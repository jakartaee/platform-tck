<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project name="TS top level" default="usage">

    <!-- IMPORTS -->
    <import file="xml/ts.top.import.xml" optional="true"/>
    <import file="../../../bin/xml/ts.top.import.xml" optional="true"/>

    <target name="build.all" depends="build.all.jars,build.all.tests"/>

    <target name="build.all.tests" >
      <property name="all.test.dir" value="signaturetest, interop, integration, ejb, common, jdbc, connector, jms, xa, servlet, jsp, appclient, javamail, assembly, jta, samples"/>
      <elementappend original="${all.test.dir}" prefix="com/sun/ts/tests" suffix="**/*.java" property="all.java.file"/>

      <echo message="Compiling:${all.java.file}"/>
      <javac fork="true" srcdir="${ts.home}/src" 
            destdir="${class.dir}" 
            includes="${all.java.file}"
            memoryInitialSize="100m"
            memoryMaximumSize="200m"
            debug="on" 
            deprecation="on" >
            <classpath>
                <pathelement path="${ts.classpath}:${local.classes}" />
            </classpath>    
      </javac>
      <dosubdirs srcdir="${ts.home}/src/com/sun/ts/tests" todo="package" includes="${all.test.dir}"/>
    </target>
    
    <target name="build" depends="compile">
          <dosubdirs srcdir="${user.dir}" todo="package"/>
     </target>

	<target name="compile">
		<javac fork="true" srcdir="${ts.home}/src" 
			destdir="${class.dir}" 
            includes="${pkg.dir}/**/*.java"
            memoryMaximumSize="200m"
			debug="on" 
			deprecation="on" >
			<classpath>
        		<pathelement path="${ts.classpath}:${local.classes}" />
      		</classpath>	
		</javac>
	</target>
		
      
    <target name="ts.version">
      <property file="version"/>
      <condition property="build.string" value="build ${ts.build}">
        <not>
          <or>
            <equals arg1="${ts.build}" arg2="$${ts.build}"/>
            <equals arg1="${ts.build}" arg2=""/>
          </or>
        </not>
      </condition>
      <condition property="build.string" value="">
        <or>
          <equals arg1="${ts.build}" arg2="$${ts.build}"/>
          <equals arg1="${ts.build}" arg2=""/>
        </or>
      </condition>
      <echo message="${ts.version} ${build.string}"/>
    </target>

    <target name="move.work.dir" if="work.dir.present">
        <property name="work.dir.copy" value="${work.dir}copy"/>
        <delete failonerror="false" dir="${work.dir.copy}"/>
        <mkdir dir="${work.dir.copy}"/>
        <move todir="${work.dir.copy}">
          <fileset dir="${work.dir}"/>
        </move>
    </target>
   
  <target name="prepare.work.dir">
    <condition property="ts.env" value="ts_win32">
      <and>
        <os family="windows"/>
      </and>
    </condition>
    <condition property="ts.env" value="ts_unix">
      <and>
        <os family="unix"/>
      </and>
    </condition>

<!-- /tmp works for both platforms -->
    <property name="work.dir" value="/tmp/JTwork"/>
    <available file="${work.dir}" type="dir" property="work.dir.present"/>
    <antcall target="move.work.dir"/>
    <mkdir dir="${work.dir}"/>
  </target>
 
   <target name="get.client" if="test" unless="test.client">
     <getclient srcdir="${ts.home}/src/${pkg.dir}"/>
   </target>
   <target name="check.selected.test" if="test" depends="get.client">
     <property name="one.test" value="${test.client}#${test}"/>
   </target>
   <target name="no.selected.test" unless="test">
     <property name="one.test" value=""/>
   </target>
   <target name="check.java.options" if="env.JAVA_OPTIONS">
     <property name="java.options" value="${env.JAVA_OPTIONS}"/>
   </target>
   <target name="no.java.options" unless="env.JAVA_OPTIONS">
    <property name="java.options" value=""/>
   </target>
   
   <target name="translatepath">
     <translatepath propname="javaee.home.ri"/>
     <translatepath propname="javaee.home"/>
     <translatepath propname="local.classes"/>
     <translatepath propname="local.classes.ri"/>
     <translatepath propname="java.endorsed.dirs"/>
   </target>
   
   <target name="runclient" depends="init, prepare.work.dir, check.selected.test, no.selected.test,
     check.java.options, no.java.options, translatepath"> 
      <condition property="tests.string" value="${multiple.tests}">
        <not>
          <or>
            <equals arg1="${multiple.tests}" arg2="$${multiple.tests}"/>
            <equals arg1="${multiple.tests}" arg2=""/>
          </or>
        </not>
      </condition>
      <condition property="tests.string" value="${ts.home}/src/${pkg.dir}/${one.test}">
        <or>
          <equals arg1="${multiple.tests}" arg2="$${multiple.tests}"/>
          <equals arg1="${multiple.tests}" arg2=""/>
        </or>
      </condition>
      <condition property="report.arg" value="-writereport /tmp/JTreport">
        <not>
          <equals arg1="${report}" arg2="$${report}"/>
        </not>
      </condition>
      <condition property="report.arg" value="">
        <equals arg1="${report}" arg2="$${report}"/>
      </condition>

      <translatepath propname="tests.string" type="initialfile"/>
    <java classname="com.sun.javatest.tool.Main" failonerror="yes" fork="yes" >
		<classpath>
   			<pathelement path="${ts.classpath}:${local.classes}:${ts.home}/lib/parser.jar"/>
      	</classpath>	
		<sysproperty key="java.compiler" value="NONE"/>
		<sysproperty key="org.omg.CORBA.ORBInitialHost" value="${orb.host}" />
		<sysproperty key="org.omg.CORBA.ORBInitialPort" value="${orb.port}" />
		<sysproperty key="com.sun.ejb.home" value="${javaee.home}" />
		<sysproperty key="TS_HOME" value="${ts.home}" />
		<sysproperty key="J2EE_HOME" value="${javaee.home}" />
		<sysproperty key="JAVA_HOME" value="${java.home}"  />		
		<sysproperty key="JAVA_OPTIONS" value="${java.options}" />			
		<sysproperty key="cts.jtroutput" value="true" />
		<sysproperty key="cts.harness.debug" value="${cts.harness.debug}"/>
		<sysproperty key="LOCAL_CLASSES" value="${local.classes}"/>
		<sysproperty key="windir" value="${env.windir}"/>
		<sysproperty key="SYSTEMROOT" value="${env.SystemRoot}"/>
		<sysproperty key="javatest.security.allowPropertiesAccess" value="true" />
		<sysproperty key="java.security.policy" value="${bin.dir}/harness.policy" />
		<sysproperty key="ORB_HOST" value="${orb.host}" />
		<sysproperty key="ORB_PORT" value="${orb.port}" />
		<sysproperty key="J2EE_HOME_RI" value="${javaee.home.ri}" />
		<sysproperty key="LOCAL_CLASSES_RI" value="${local.classes.ri}" />
        <sysproperty key="ORB_HOST_RI" value="${orb.host.ri}" />
        <sysproperty key="ORB_PORT_RI" value="${orb.port.ri}" />
		<sysproperty key="TZ" value="${tz}" />
		<sysproperty key="deliverable.class" value="${deliverable.class}" />
		<sysproperty key="java.endorsed.dirs" value="${java.endorsed.dirs}" />
		<arg line=" -EsysProps" />
		<arg line=" -batch" />
		<arg line=" -testsuite ${ts.home}/src/com/sun/ts/tests" />
		<arg line=" -workDir ${work.dir}" />
		<arg line=" -envFiles ${bin.dir}/ts.jte" />
		<arg line=" -env ${ts.env}" />
		<arg line=" -excludeList ${bin.dir}/ts.jtx" />
		<arg line=" -tests ${tests.string}" />
		<arg line=" -runtests ${report.arg}"/>
        <jvmarg value="-Xmx96m"/>
      </java>
	</target>

   <target name="gui" depends="check.java.options, no.java.options, translatepath"> 
    <java classname="com.sun.javatest.tool.Main" failonerror="yes" fork="yes" dir="${ts.home}/src/com/sun/ts/tests">
		<classpath>
   			<pathelement path="${ts.classpath}:${local.classes}:${ts.home}/lib/parser.jar"/>
      	</classpath>	
		<sysproperty key="java.compiler" value="NONE"/>
		<sysproperty key="org.omg.CORBA.ORBInitialHost" value="${orb.host}" />
		<sysproperty key="org.omg.CORBA.ORBInitialPort" value="${orb.port}" />
		<sysproperty key="com.sun.ejb.home" value="${javaee.home}" />
		<sysproperty key="TS_HOME" value="${ts.home}" />
		<sysproperty key="J2EE_HOME" value="${javaee.home}" />
		<sysproperty key="JAVA_HOME" value="${java.home}"  />		
		<sysproperty key="JAVA_OPTIONS" value="${java.options}" />			
		<sysproperty key="cts.jtroutput" value="true" />
		<sysproperty key="LOCAL_CLASSES" value="${local.classes}" />
		<sysproperty key="windir" value="${env.windir}" />
		<sysproperty key="SYSTEMROOT" value="${env.SystemRoot}" />
		<sysproperty key="javatest.security.allowPropertiesAccess" value="true" />
		<sysproperty key="java.security.policy" value="${bin.dir}/harness.policy" />
		<sysproperty key="ORB_HOST" value="${orb.host}" />
		<sysproperty key="ORB_PORT" value="${orb.port}" />
		<sysproperty key="J2EE_HOME_RI" value="${javaee.home.ri}" />
		<sysproperty key="LOCAL_CLASSES_RI" value="${local.classes.ri}" />
        <sysproperty key="ORB_HOST_RI" value="${orb.host.ri}" />
        <sysproperty key="ORB_PORT_RI" value="${orb.port.ri}" />
		<sysproperty key="TZ" value="${tz}" />
		<sysproperty key="deliverable.class" value="${deliverable.class}" />
        <sysproperty key="java.endorsed.dirs" value="${java.endorsed.dirs}" />
		<arg line="-EsysProps" />
        <jvmarg value="-Xmx150m"/>
      </java>
	</target>

    <target name="clean">
        <delete failonerror="false" includeEmptyDirs="true">
          <fileset dir="${class.dir}/${pkg.dir}"/>
        </delete>
        <delete failonerror="false" includeEmptyDirs="true">
         <fileset dir="${dist.dir}/${pkg.dir}"/>
        </delete>
    </target>

	<target name="clean.all.error.msg" >
		<property name="msg" value="Cleanup of the classes/dist directory is not allowed" />
	</target>

	<target name="clean.all" depends="clean.all.error.msg,check.bin.workspace.file" if="bin.workspace.file.exists">
		<ant antfile="workspace.xml" dir="${bin.dir}" target="clean.classes" />
		<ant antfile="workspace.xml" dir="${bin.dir}" target="clean.dist" />
	</target>

  <target name="initdb">
    <java classname="com.sun.ts.lib.util.InitTSDatabase" fork="yes" failonerror="yes" 
      classpath="${ts.classpath}:${jdbc.classpath}">
      <sysproperty key="TS_HOME" value="${ts.home}"/>
      <arg line="-U ${dbuser}"/>
      <arg line="-P ${dbpasswd}"/>
      <arg line="-S ${dburl}"/>
      <arg line="-p ${ddlfile}"/>
      <arg line="-d ${dbdriver}"/>
    </java>
  </target>

  <target name="start.sunri.porting.server" depends="init">
    <java classname="com.sun.ts.lib.implementation.sun.javaee.SunRIPortingServer" fork="yes" failonerror="yes" 
      classpath="${ts.classpath}">
      <sysproperty key="java.security.policy" value="${bin.dir}/harness.policy"/>
      <sysproperty key="org.omg.CORBA.ORBInitialHost" value="${orb.host.ri}"/>
      <sysproperty key="org.omg.CORBA.ORBInitialPort" value="${orb.port.ri}"/>
      <sysproperty key="java.endorsed.dirs" value="${java.endorsed.dirs}" />
      <sysproperty key="com.sun.enterprise.home" value="${javaee.home.ri}"/>
      <sysproperty key="cts.harness.debug" value="${cts.harness.debug}"/>
      <sysproperty key="deliverable.class" value="${deliverable.class}" />
    </java>
  </target>

  <target name="init" depends="get.harness.debug, default.harness.debug"/>

  <target name="get.harness.debug" if="env.HARNESS_DEBUG">
    <property name="cts.harness.debug" value="${env.HARNESS_DEBUG}"/>
  </target>

  <target name="default.harness.debug" unless="env.HARNESS_DEBUG">
    <property name="cts.harness.debug" value="false"/>
  </target>


  <!-- Tasks for managing ts specific jar.  These automatically call 
  the pkg target in the src/com/sun/ts/lib/build.xml file  -->
  <!-- ts specific jar (in this case cts.jar) will be created in ts.home/lib 
  and must be copied to ts.home/install/j2ee/lib.  
  If you are builing it in the workspace, then you must sccs edit ts.home/
  install/j2ee/lib/cts.jar prior to using this target.  -->

	<target name="does.bin.workspace.file.exist" >
		<available file="${bin.dir}/workspace.xml" type="file" property="bin.workspace.file.exists"/>
	</target>
	<target name="check.bin.workspace.file" depends="does.bin.workspace.file.exist" unless="bin.workspace.file.exists">
		<echo message="WARNING: The workspace file (${bin.dir}/workspace.xml) does not exist - ${msg}"/>
	</target>

	<target name="tslib.error.msg" >
		<property name="msg" value="building of ${ts.home}/lib/ctstck.jar is not allowed" />
	</target>

	<target name="tslib" depends="tslib.error.msg,check.bin.workspace.file" if="bin.workspace.file.exists">
		<tstamp/>
		<ant antfile="workspace.xml" dir="${bin.dir}" target="build" />
 	</target>

	<target name="tsharness">
       	<ant antfile="build.xml" dir="${ts.home}/src/com/sun/ts/lib" target="build" />
  	</target>

	<target name="build.all.jars" depends="tsharness,tslib"/>

	<!-- END Tasks for managing ts specific jar  -->

	<target name="move.holders.dir" if="holders.dir.present">
          <move todir="${class.dir}/${pkg.dir}/holders">
	    <fileset dir="${class.dir}/generated_classes/${pkg.dir}/holders" includes="**/*.class"/>
	  </move>
	</target>

	<target name="move.common.dir" if="common.dir.present">
          <move todir="${class.dir}/${common.dir}">
	    <fileset dir="${class.dir}/generated_classes/${common.dir}" includes="**/*.class"/>
	  </move>
	</target>

        <target name="setup_target_dirs">
    	  <delete failonerror="false" dir="${class.dir}/generated_classes"/>
    	  <mkdir dir="${class.dir}/generated_classes"/>
   	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF"/>
    	  <mkdir dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF"/>
        </target>

        <target name="build_generated_classes_jar">
    	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/classes/${pkg.dir}"/>
    	  <mkdir dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/classes/${pkg.dir}"/>
    	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/lib"/>
    	  <mkdir dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/lib"/>
	  <jar jarfile="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/lib/generated_classes.jar" basedir="${class.dir}/generated_classes" includes="**/*.class"/>
          <move todir="${class.dir}/${pkg.dir}">
	    <fileset dir="${class.dir}/generated_classes/${pkg.dir}" includes="**/*.class"/>
	  </move>
	  <available property="holders.dir.present" file="${class.dir}/generated_classes/${pkg.dir}/holders" type="dir"/>
	  <antcall target="move.holders.dir"/>
	  <available property="common.dir.present" file="${class.dir}/generated_classes/${common.dir}" type="dir"/>
	  <antcall target="move.common.dir"/>
        </target>

  	<target name="do_wsdl2java_generate_steps">
	  <antcall target="setup_target_dirs"/>
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="WSDL2Java arguments: ${wsdl2java.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${wsdl2java.args} ${config.file}"/>
    	  </exec>
    	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF" includes="**/*Config.properties"/>
          <copy todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF">
	    <fileset dir="${ts.home}/src/${pkg.dir}" includes="**/*Config.properties"/>
	  </copy>
    	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF" includes="**/*.wsdl, **/*.xsd"/>
          <copy  todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF">
	    <fileset dir="${ts.home}/src/${pkg.dir}" includes="**/*.wsdl, **/*.xsd"/>
	  </copy>
	  <antcall target="build_generated_classes_jar"/>
	  <antcall target="compile_jaxrpc"/>
  	</target>

  	<target name="do_java2wsdl_generate_steps">
	  <antcall target="compile_jaxrpc"/>
	  <antcall target="setup_target_dirs"/>
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="Java2WSDL arguments: ${java2wsdl.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${java2wsdl.args} ${config.file}"/>
    	  </exec>
	  <echo append="true" file="${class.dir}/generated_classes/${service.name}_Config.properties">wsdl.location=/WEB-INF/${service.name}.wsdl
</echo>
	  <property name="url" value="http://${webserver.host}:${webserver.port}/${app.name}/${url.alias}/${port.name}"/>
	  <replace file="${class.dir}/generated_classes/${service.name}.wsdl" value="${url}">
	    <replacefilter token="REPLACE_WITH_ACTUAL_URL"/>
	  </replace>
    	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF" includes="**/*Config.properties"/>
          <copy  todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF">
	    <fileset dir="${class.dir}/generated_classes" includes="**/*Config.properties"/>
	  </copy>
    	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF" includes="**/*.wsdl"/>
          <copy  todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF">
	    <fileset dir="${class.dir}/generated_classes" includes="**/*.wsdl"/>
	  </copy>
	  <antcall target="build_generated_classes_jar"/>
  	</target>

  	<target name="do_java2wsdl_generate_only">
	  <antcall target="compile_jaxrpc"/>
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="Java2WSDL arguments: ${java2wsdl.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${java2wsdl.args} ${config.file}"/>
    	  </exec>
	  <echo append="true" file="${class.dir}/generated_classes/${service.name}_Config.properties">wsdl.location=/WEB-INF/${service.name}.wsdl
</echo>
	  <property name="url" value="http://${webserver.host}:${webserver.port}/${app.name}/${url.alias}/${port.name}"/>
	  <replace file="${class.dir}/generated_classes/${service.name}.wsdl" value="${url}">
	    <replacefilter token="REPLACE_WITH_ACTUAL_URL"/>
	  </replace>
    	  <delete failonerror="false" file="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/${service_name}_Config.properties"/>
          <copy file="${class.dir}/generated_classes/${service.name}_Config.properties" todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF"/>
    	  <delete failonerror="false" file="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/${service.name}.wsdl"/>
          <copy file="${class.dir}/generated_classes/${service.name}.wsdl" todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF"/>
  	</target>

</project>


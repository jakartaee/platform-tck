<!--

    Copyright (c) 2013, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
-->

<!--
 =================================================================================
 This script will configure, setup, and start Java EE 7 RI. It will then configure
 and deploy the standalone JMS 2.0 RI Resource Adapter (IMQJMSRA) or the Generic
 JMS Resource Adapter (GenericJMSRA) for a JMS TCK run by creaing the JMS connector 
 connection pools, the JMS connector resources, and the JMS admin objects needed 
 for the JMS TCK. This script will unconfigure the standalone JMS 2.0 RI Resource
 Adapter (IMQJMSRA) or Generic JMS Resource Adapter (GenericJMSRA) after a JMS TCK
 run by deleting all the JMS connector connection pools, the JMS connector resources, 
 and the JMS admin objects that were created for the JMS TCK run. It will then cleanup 
 and stop Java EE 7 RI after the JMS TCK run.

 (1) Type "ant or ant help" to get usage. These 2 tasks are all you need to
     configure/unconfigure, setup/cleanup, start/stop Java EE 7 RI and deploy/
     configure the standalone JMS 2.0 RI Resource Adapter (IMQJMSRA) or Generic 
     JMS Resource Adapter (GenericJMSRA) to be run against the JMS TCK.

     % ant config.vi   configure, setup, start Java EE 7 RI and deploy/configure
      		       a standalone JMS Resource Adapter for a JMS TCK run
     % ant clean.vi    unconfigure, cleanup, stop Java EE 7 RI and undeploy/
   		       unconfigure a standalone JMS Resource Adapter after a
		       JMS TCK run

 (2) Type "ant help2" for individual ant tasks.
 ===========================================================================
-->

<project name="Java EE 7 RI Configuration for a Standalone JMS Resource Adapter for JMS TCK Run" default="help" basedir=".">

    <!-- IMPORTS -->
    <import file="./ts.common.props.xml" optional="true"/>
    <import file="../../../../bin/xml/ts.common.props.xml" optional="true"/>
    <import file="../../../../../../bin/xml/ts.common.props.xml" optional="true"/>

    <!--
      Java EE 7 RI (GlassFish 4.0) configuration properties: See the ts.jte file
    -->

    <property name="server.start.delay.mins" value="5"/>

    <property name="cli.path" value="${glassfish.home}/bin/asadmin"/>

    <property name="password.file.template" value="${common.bin.dir}/xml/impl/glassfish/templates/password.template"/>
    <property name="password.file" value="${bin.dir}/password.txt"/>
        
     <!--
       Filter the password file
     -->
     <target name="filter.password.file" depends="configPlatform">
       <copy file="${password.file.template}"
             tofile="${password.file}"
             overwrite="true">
        <filterset>
           <filter token="sjsas.master.password" value="${glassfish.master.pass}"/>
           <filter token="sjsas.admin.password" value="${glassfish.admin.pass}"/>
           <filter token="user.password" value="${userpassword}" />
         </filterset>
       </copy>
     </target>

    <target name="configPlatform" depends="checkPlatform, configUnix, configWindows"/>

    <target name="checkPlatform" >
        <condition property ="isUnixPlatform">
           <os family="unix"/>
        </condition>
        <condition property ="isWindowsPlatform">
           <os family="windows"/>
        </condition>
        <condition property ="os" value="unix">
           <os family="unix"/>
        </condition>
        <condition property ="os" value="windows">
           <os family="windows"/>
        </condition>
	<condition property ="isMac">
	   <os family="mac"/>
	</condition>
    </target>

    <target name="configUnix" depends="checkPlatform" if="isUnixPlatform" >
           <echo message="on unix"/>
           <property name="dir.sep" value="/"/>
           <property name="exec.asadmin" value="${cli.path}" />
           <property name="exec.asadmin.part2" value="" />
           <property name="exec.imqusermgr" value="${imq.bin.dir}/imqusermgr" />
           <property name="exec.imqusermgr.part2" value="" />
    </target>

    <target name="configWindows" depends="checkPlatform" if="isWindowsPlatform" >
           <echo message="on windows"/>
           <property name="dir.sep" value="\\"/>
           <property name="exec.asadmin" value="cmd.exe" />
           <property name="exec.asadmin.part2" value= " /c ${cli.path}" />
           <property name="exec.imqusermgr" value="cmd.exe" />
           <property name="exec.imqusermgr.part2" value=" /c ${imq.bin.dir}\imqusermgr" />
    </target>

    <!--
	config.vi/clean.vi targets
    -->
    <target name="config.vi" depends="doRAConfig"/>
    <target name="clean.vi" depends="doRAUnconfig"/>

     <!--
       Configure the vendors implementation
     -->
    <target name="doRAConfig" depends="configPlatform">
	<antcall target="stop-server"/>
	<antcall target="copy.tck.jars"/>
	<antcall target="start-server"/>
	<antcall target="add.users"/>
	<antcall target="create-jms-user"/>
        <if>
          <not>
            <equals arg1="${jmsra.rarfile}" arg2=""/>
          </not>
        <then>
	<antcall target="copy.jmsra.jarfile"/>
	<antcall target="copy.mq.jars"/>
	<antcall target="create-resource-adapter-config">
          <param name="propName" value="SupportsXA=true:ProviderIntegrationMode=javabean:ConnectionFactoryClassName=com.sun.messaging.ConnectionFactory:CommonSetterMethodName=setProperty:UserName=guest:Password=guest:QueueConnectionFactoryClassName=com.sun.messaging.QueueConnectionFactory:TopicConnectionFactoryClassName=com.sun.messaging.TopicConnectionFactory:QueueClassName=com.sun.messaging.Queue:TopicClassName=com.sun.messaging.Topic:LogLevel=info:UserName=guest:Password=guest:XAQueueConnectionFactoryClassName=com.sun.messaging.XAQueueConnectionFactory:XATopicConnectionFactoryClassName=com.sun.messaging.XATopicConnectionFactory:XAConnectionFactoryClassName=com.sun.messaging.XAConnectionFactory"/>
	  <param name="raName" value="${jmsra.name}"/>
	</antcall>
	<antcall target="deploy-archive">
	  <param name="archiveName" value="${jmsra.rarfile}"/>
	</antcall>
	</then>
	</if>
	<antcall target="create-connector-connection-pool">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="connDefinition" value="jakarta.jms.QueueConnectionFactory"/>
	  <param name="poolName" value="qcfpool"/>
	</antcall>
	<antcall target="create-connector-connection-pool">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="connDefinition" value="jakarta.jms.TopicConnectionFactory"/>
	  <param name="poolName" value="tcfpool"/>
	</antcall>
	<antcall target="create-connector-connection-pool-with-property">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="connDefinition" value="jakarta.jms.TopicConnectionFactory"/>
	  <param name="propName" value="ClientId=cts"/>
	  <param name="poolName" value="tcfpool2"/>
	</antcall>
	<antcall target="create-connector-connection-pool">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="connDefinition" value="jakarta.jms.ConnectionFactory"/>
	  <param name="poolName" value="cfpool"/>
	</antcall>
	<antcall target="create-connector-resource">
	  <param name="poolName" value="cfpool"/>
	  <param name="jndiName" value="MyConnectionFactory"/>
	</antcall>
	<antcall target="create-connector-resource">
	  <param name="poolName" value="qcfpool"/>
	  <param name="jndiName" value="MyQueueConnectionFactory"/>
	</antcall>
	<antcall target="create-connector-resource">
	  <param name="poolName" value="tcfpool"/>
	  <param name="jndiName" value="MyTopicConnectionFactory"/>
	</antcall>
	<antcall target="create-connector-resource">
	  <param name="poolName" value="tcfpool2"/>
	  <param name="jndiName" value="DURABLE_SUB_CONNECTION_FACTORY"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Queue"/>
	  <param name="propName" value="Name=MY_QUEUE"/>
	  <param name="jndiName" value="MY_QUEUE"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Queue"/>
	  <param name="propName" value="Name=MY_QUEUE2"/>
	  <param name="jndiName" value="MY_QUEUE2"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Queue"/>
	  <param name="propName" value="Name=testQ0"/>
	  <param name="jndiName" value="testQ0"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Queue"/>
	  <param name="propName" value="Name=testQ1"/>
	  <param name="jndiName" value="testQ1"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Queue"/>
	  <param name="propName" value="Name=testQ2"/>
	  <param name="jndiName" value="testQ2"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Queue"/>
	  <param name="propName" value="Name=testQueue2"/>
	  <param name="jndiName" value="testQueue2"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Queue"/>
	  <param name="propName" value="Name=Q2"/>
	  <param name="jndiName" value="Q2"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Topic"/>
	  <param name="propName" value="Name=MY_TOPIC"/>
	  <param name="jndiName" value="MY_TOPIC"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Topic"/>
	  <param name="propName" value="Name=MY_TOPIC2"/>
	  <param name="jndiName" value="MY_TOPIC2"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Topic"/>
	  <param name="propName" value="Name=testT0"/>
	  <param name="jndiName" value="testT0"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Topic"/>
	  <param name="propName" value="Name=testT1"/>
	  <param name="jndiName" value="testT1"/>
	</antcall>
	<antcall target="create-admin-object">
	  <param name="raName" value="${jmsra.name}"/>
	  <param name="resType" value="jakarta.jms.Topic"/>
	  <param name="propName" value="Name=testT2"/>
	  <param name="jndiName" value="testT2"/>
	</antcall>
    </target>

     <!--
       Unconfigure the vendors implementation
     -->
    <target name="doRAUnconfig" depends="configPlatform">
	<antcall target="start-server"/>
	<antcall target="delete.tck.jars"/>
	<antcall target="drop.users"/>
	<antcall target="delete-connector-resource">
	  <param name="jndiName" value="MyConnectionFactory"/>
	</antcall>
	<antcall target="delete-connector-resource">
	  <param name="jndiName" value="MyQueueConnectionFactory"/>
	</antcall>
	<antcall target="delete-connector-resource">
	  <param name="jndiName" value="MyTopicConnectionFactory"/>
	</antcall>
	<antcall target="delete-connector-resource">
	  <param name="jndiName" value="DURABLE_SUB_CONNECTION_FACTORY"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="MY_QUEUE"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="MY_QUEUE2"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="testQ0"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="testQ1"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="testQ2"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="Q2"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="testQueue2"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="MY_TOPIC"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="MY_TOPIC2"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="testT0"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="testT1"/>
	</antcall>
	<antcall target="delete-admin-object">
	  <param name="jndiName" value="testT2"/>
	</antcall>
	<antcall target="delete-connector-connection-pool">
	  <param name="poolName" value="cfpool"/>
	</antcall>
	<antcall target="delete-connector-connection-pool">
	  <param name="poolName" value="qcfpool"/>
	</antcall>
	<antcall target="delete-connector-connection-pool">
	  <param name="poolName" value="tcfpool"/>
	</antcall>
	<antcall target="delete-connector-connection-pool">
	  <param name="poolName" value="tcfpool2"/>
	</antcall>
        <if>
          <not>
            <equals arg1="${jmsra.rarfile}" arg2=""/>
          </not>
        <then>
	<antcall target="delete-resource-adapter-config">
	  <param name="raName" value="${jmsra.name}"/>
	</antcall>
	<antcall target="undeploy-archive">
	  <param name="name" value="${jmsra.name}"/>
	</antcall>
	<antcall target="delete.jmsra.jarfile"/>
	<antcall target="delete.mq.jars"/>
	</then>
	</if>
	<antcall target="delete-jms-user"/>
	<antcall target="stop-server"/>
    </target>

    <!--
        Start The App Server by calling the appropriate target
        depending on whether we are on unix/linux or windows.
    -->
    <target name="start-server" depends="filter.password.file" >

       <antcall target="start.appserver.unix"/>
       <antcall target="start.appserver.win"/>
    </target>
    <!--
        Start The App Server on unix/linux
    -->
    <target name="start.appserver.unix" depends="configPlatform" if="isUnixPlatform">
      <exec executable="${exec.asadmin}" failifexecutionfails="false">
        <arg line="${exec.asadmin.part2}" />
        <arg line=" --user ${glassfish.admin.user}"/>
        <arg line=" --passwordfile ${password.file}"/>
        <arg line=" start-domain"/>
        <arg line=" ${glassfish.domain.name}"/>
      </exec>
      <echo message=" The App Server is now available." />
    </target>

    <!--
        Start the App Server on windows
    -->
    <target name="start.appserver.win" depends="configPlatform" if="isWindowsPlatform">
      <spawn executable="${exec.asadmin}" failifexecutionfails="false">
        <arg line="${exec.asadmin.part2}" />
        <arg line=" --user ${glassfish.admin.user}"/>
        <arg line=" --passwordfile ${password.file}"/>
        <arg line=" start-domain"/>
        <arg line=" ${glassfish.domain.name}"/>
      </spawn>
      <echo message=" ...Waiting for server to be up ...(sleeping for ${server.start.delay.mins} minutes) " /> 
      <!-- 
        Currently the waitfor task allocates a port everytime it checks the admin server URL.
        If one of the server ports is allocated to the waitfor task we get a server startup error.
        Asadmin start-domain is a synchronous call but in the case of ant on windows the asadmin
        start-domain never returns to the ant exec task so it hangs forever.  For now we simply
        sleep for server.start.delay.mins minutes to give the app server more than enough time to come up.  This is
        a temparay fix until we implement something better.
      -->
      <sleep minutes="${server.start.delay.mins}"/> 
      <echo message=" HTTP server is now available at http://${glassfish.admin.host}:${glassfish.admin.port}" />
    </target>

    <!--
        Stop The App Server
    -->
    <target name="stop-server" depends="configPlatform">
      <exec executable="${exec.asadmin}" failifexecutionfails="false">
        <arg line="${exec.asadmin.part2}" />
        <arg line=" stop-domain"/>
        <arg line=" ${glassfish.domain.name}"/>
      </exec>
    </target>

    <target name="copy.tck.jars">
        <copy file="${ts.home}/lib/jmstck.jar" tofile="${glassfish.home}/domains/domain1/lib/ext/jmstck.jar" overwrite="yes" />
        <copy file="${ts.home}/lib/tsharness.jar" tofile="${glassfish.home}/domains/domain1/lib/ext/tsharness.jar" overwrite="yes" />
    </target>

    <target name="copy.jmsra.jarfile">
        <if>
          <not>
            <equals arg1="${jmsra.jarfile}" arg2=""/>
          </not>
        <then>
        <copy file="${jmsra.jarfile}" todir="${glassfish.home}/lib" overwrite="yes" />
        </then>
        </if>
    </target>

    <target name="delete.jmsra.jarfile">
        <if>
          <not>
            <equals arg1="${jmsra.jarfile}" arg2=""/>
          </not>
        <then>
	<basename property="jar.filename" file="${jmsra.jarfile}"/>
        <delete file="${glassfish.home}/lib/${jar.filename}" quiet="true"/>
        </then>
        </if>
    </target>

    <target name="copy.mq.jars">
        <copy file="${imq.lib.dir}/imq.jar" todir="${glassfish.home}/lib" overwrite="yes"/>
        <copy file="${imq.lib.dir}/imqutil.jar" todir="${glassfish.home}/lib" overwrite="yes"/>
        <copy file="${imq.lib.dir}/imqjmx.jar" todir="${glassfish.home}/lib" overwrite="yes"/>
        <copy file="${imq.lib.dir}/imqbroker.jar" todir="${glassfish.home}/lib" overwrite="yes"/>
    </target>

    <target name="delete.mq.jars">
        <delete file="${glassfish.home}/lib/imq.jar" quiet="true"/>
        <delete file="${glassfish.home}/lib/imqutil.jar" quiet="true"/>
        <delete file="${glassfish.home}/lib/imqjmx.jar" quiet="true"/>
        <delete file="${glassfish.home}/lib/imqbroker.jar" quiet="true"/>
    </target>

    <target name="delete.tck.jars">
       <delete file="${glassfish.home}/domains/domain1/lib/ext/jmstck.jar" quiet="true"/>
       <delete file="${glassfish.home}/domains/domain1/lib/ext/tsharness.jar" quiet="true"/>
    </target>

    <target name="add.users" >
	 <echo message="Create user: (j2ee,j2ee,staff:mgr:asadmin)"/>
         <antcall target="create-file-user" >
          <param name="userpassword" value="j2ee"/>
          <param name="usergroups" value="staff:mgr:asadmin"/>
          <param name="userName" value="j2ee"/>
         </antcall>
	 <echo message="Create user: (guest,guest,guest)"/>
         <antcall target="create-file-user" >
          <param name="userpassword" value="guest"/>
          <param name="usergroups" value="guest"/>
          <param name="userName" value="guest"/>
         </antcall>
    </target>

     <!--
       Create user
     -->
     <target name="create-file-user" depends="filter.password.file">
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" create-file-user"/>
            <arg line=" --groups ${usergroups}"/>
            <arg line=" ${userName}"/>
        </exec>
     </target>

    <target name="drop.users" >
	 <echo message="Delete user: j2ee"/>
         <antcall target="delete-file-user" >
          <param name="userName" value="j2ee"/>
         </antcall>
	 <echo message="Delete user: guest"/>
         <antcall target="delete-file-user" >
          <param name="userName" value="guest"/>
         </antcall>
     </target>

     <!--
       Delete user
     -->
     <target name="delete-file-user" depends="filter.password.file,configPlatform">
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" delete-file-user"/>
            <arg line=" ${userName}"/>
        </exec>
     </target>

     <!--
       Create a Resource Adapter Config
     -->
     <target name="create-resource-adapter-config" >
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" create-resource-adapter-config"/>
            <arg line=" --property ${propName}"/>
            <arg line=" ${raName}"/>
        </exec>
     </target>

     <!--
       Deploy an archive
     -->
     <target name="deploy-archive" >
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" deploy"/>
            <arg line=" ${archiveName}"/>
        </exec>
     </target>

     <!--
       UnDeploy an archive
     -->
     <target name="undeploy-archive" >
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" undeploy"/>
            <arg line=" ${name}"/>
        </exec>
     </target>

     <!--
       Create a Connector Connection Pool
     -->
     <target name="create-connector-connection-pool" >
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" create-connector-connection-pool"/>
            <arg line=" --raname ${raName}"/>
            <arg line=" --connectiondefinition ${connDefinition}"/>
            <arg line=" ${poolName}"/>
        </exec>
     </target>

     <target name="create-connector-connection-pool-with-property" >
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" create-connector-connection-pool"/>
            <arg line=" --raname ${raName}"/>
            <arg line=" --connectiondefinition ${connDefinition}"/>
            <arg line=" --property ${propName}"/>
            <arg line=" ${poolName}"/>
        </exec>
     </target>

     <!--
       Create a Connector Resource
     -->
     <target name="create-connector-resource" >
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" create-connector-resource"/>
            <arg line=" --poolname ${poolName}"/>
            <arg line=" ${jndiName}"/>
        </exec>
     </target>

     <target name="create-connector-resource-with-property" >
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" create-connector-resource"/>
            <arg line=" --poolname ${poolName}"/>
            <arg line=" --property ${propName}"/>
            <arg line=" ${jndiName}"/>
        </exec>
     </target>

     <!--
       Create a Admin Object
     -->
     <target name="create-admin-object" >
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" create-admin-object"/>
            <arg line=" --raname ${raName}"/>
            <arg line=" --restype ${resType}"/>
            <arg line=" --property ${propName}"/>
            <arg line=" ${jndiName}"/>
        </exec>
     </target>

     <!--
       Delete a Connector Connection Pool
     -->
     <target name="delete-connector-connection-pool" >
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" delete-connector-connection-pool"/>
            <arg line=" --cascade=true"/>
            <arg line=" ${poolName}"/>
        </exec>
    </target>

     <!--
       Delete a Connector Resource
     -->
     <target name="delete-connector-resource" >
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" delete-connector-resource"/>
            <arg line=" ${jndiName}"/>
        </exec>
     </target>

     <!--
       Delete a Admin Object
     -->
     <target name="delete-admin-object" >
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" delete-admin-object"/>
            <arg line=" ${jndiName}"/>
        </exec>
     </target>

     <!--
       Delete a Resource Adapter Config
     -->
     <target name="delete-resource-adapter-config" >
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" delete-resource-adapter-config"/>
            <arg line=" ${raName}"/>
        </exec>
     </target>

     <!--
        Add the a JMS user
     -->
     <target name="create-jms-user"  depends="configPlatform">
       <exec executable="${exec.imqusermgr}" >
            <env key="IMQ_JAVAHOME" value="${java.home}"/>
            <arg line="${exec.imqusermgr.part2}"/>
            <arg line=" add"/>
            <arg line=" -i ${jmsServer} "/>
            <arg line=" -u ${user} "/>
            <arg line=" -p ${password} "/>
            <arg line=" -g ${glassfish.admin.user}"/>
            <arg line=" -f "/>
            <arg line=" -c "/>
        </exec>
     </target>

     <!--
        Delete the a JMS user
     -->
     <target name="delete-jms-user"  >
       <exec executable="${exec.imqusermgr}" >
            <env key="IMQ_JAVAHOME" value="${java.home}"/>
            <arg line="${exec.imqusermgr.part2}"/>
            <arg line=" delete"/>
            <arg line=" -i ${jmsServer} "/>
            <arg line=" -u ${user} "/>
            <arg line=" -p ${password} "/>
            <arg line=" -g ${glassfish.admin.user} "/>
            <arg line=" -f "/>
        </exec>
     </target>

     <target name="list-connector-resources" depends="configPlatform">
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" list-connector-resources"/>
        </exec>
     </target>

     <target name="list-admin-objects" depends="configPlatform">
       <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" list-admin-objects"/>
        </exec>
     </target>

     <target name="help">
       <echo message="ant config.vi                configure, setup, start Java EE 7 RI and deploy/configure"/>
       <echo message="                             a standalone JMS Resource Adapter for a JMS TCK run"/>
       <echo message="ant clean.vi                 unconfigure, cleanup, stop Java EE 7 RI and undeploy/unconfigure"/>
       <echo message="                             a standalone JMS Resource Adapter after a JMS TCK run"/>
       <echo message="ant list-connector-resources list connector resources of JMS Resource Adapter"/>
       <echo message="ant list-admin-objects       list admin resources of JMS Resource Adapter"/>
     </target>
</project>

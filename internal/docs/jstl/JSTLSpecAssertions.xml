<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet href='https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/spec_assertions.xsl'?>

<!-- $URL: http://invalid.domain.com:9001/re_repos/spider/trunk/internal/docs/jstl/JSTLSpecAssertions.xml 
	$ $LastChangedDate$ -->
<spec>
	<next-available-id>109</next-available-id>
	<previous-id>108</previous-id>
	<technology>JSTL</technology>
	<id>JSTL</id>
	<name>JavaServer Pages(TM) Standard Tag Library</name>
	<version>1.2</version>
	<location-names>
		<chapters>
			<chapter id="1" name="Introduction">
				<sections>
					<section id="1.1" name="Goals" />
					<section id="1.2" name="Multiple Tag Libraries" />
					<section id="1.3" name="Container Requirement" />
				</sections>
			</chapter>
			<chapter id="2" name="Conventions">
				<sections>
					<section id="2.1" name="How Actions are Documented" />
					<section id="2.2.1" name="Attributes" />
					<section id="2.1.2" name="Syntax Notation" />
					<section id="2.2" name="Scoped Variables" />
					<section id="2.2.1" name="var and scope" />
					<section id="2.2.2" name="Visibility" />
					<section id="2.3" name="Static vs Dynamic Attribute Values" />
					<section id="2.4" name="White Spaces" />
					<section id="2.5" name="Body Content" />
					<section id="2.6" name="Naming" />
					<section id="2.7" name="Errors and Exceptions" />
					<section id="2.8" name="Configuration Data" />
					<section id="2.9" name="Default Values" />
				</sections>
			</chapter>
			<chapter id="3" name="Expression Language Overview">
				<sections>
					<section id="3.1" name="Expressions and Attribute Values" />
					<section id="3.2" name="Accessing Application Data" />
					<section id="3.3" name="Nested Properties and Accessing Collections" />
					<section id="3.4" name="Operators" />
					<section id="3.5" name="Automatic Type Conversion" />
					<section id="3.6" name="Default Values" />
				</sections>
			</chapter>
			<chapter id="4" name="General-Purpose Actions">
				<sections>
					<section id="4.1" name="Overview" />
					<section id="4.2" name="&lt;c:out&gt;" />
					<section id="4.3" name="&lt;c:set&gt;" />
					<section id="4.4" name="&lt;c:remove&gt;" />
					<section id="4.5" name="&lt;c:catch&gt;" />
				</sections>
			</chapter>
			<chapter id="5" name="Conditional Actions">
				<sections>
					<section id="5.1" name="Overview" />
					<section id="5.2" name="Custom Logic Actions" />
					<section id="5.3" name="&lt;c:if&gt;" />
					<section id="5.4" name="&lt;c:choose&gt;" />
					<section id="5.5" name="&lt;c:when&gt;" />
					<section id="5.6" name="&lt;c:otherwise&gt;" />
				</sections>
			</chapter>
			<chapter id="6" name="Iterator Actions ">
				<sections>
					<section id="6.1" name="Overview" />
					<section id="6.1.1" name="Collections of objects to iterate over" />
					<section id="6.1.2" name="Map" />
					<section id="6.1.3" name="Iteration Status" />
					<section id="6.1.4" name="Range Attributes" />
					<section id="6.1.5" name="Tag Collaboration" />
					<section id="6.1.6" name="Deferred Values" />
					<section id="6.2" name="&lt;c:forEach&gt;" />
					<section id="6.3" name="&lt;c:forTokens&gt;" />
				</sections>
			</chapter>
			<chapter id="7" name="URL Related Actions">
				<sections>
					<section id="7.1" name="Hypertext Links" />
					<section id="7.2" name="Importing Resources" />
					<section id="7.2.1" name="URL" />
					<section id="7.2.2" name="Exporting an object: String or Reader" />
					<section id="7.2.3" name="URL Encoding" />
					<section id="7.2.4" name="Networking Properties" />
					<section id="7.3" name="HTTP Redirect" />
					<section id="7.4" name="&lt;c:import&gt;" />
					<section id="7.5" name="&lt;c:url&gt;" />
					<section id="7.6" name="&lt;c:redirect&gt;" />
					<section id="7.7" name="&lt;c:param&gt;" />
				</sections>
			</chapter>
			<chapter id="8" name="Internationalization (I18N) Actions ">
				<sections>
					<section id="8.1" name="Overview" />
					<section id="8.1.1" name="&lt;fmt:message&gt;" />
					<section id="8.2" name="I18N Localization Context" />
					<section id="8.2.1" name="Preferred Locales" />
					<section id="8.3"
						name="Determining the Resource Bundle for an I18N Localization Context" />
					<section id="8.3.1" name="Resource Bundle Lookup" />
					<section id="8.3.2" name="Resource Bundle Determination Algorithm" />
					<section id="8.3.3" name="Examples" />
					<section id="8.4" name="Response Encoding" />
					<section id="8.5" name="&lt;fmt:setLocale&gt;" />
					<section id="8.6" name="&lt;fmt:bundle&gt;" />
					<section id="8.7" name="&lt;fmt:setBundle&gt;" />
					<section id="8.8" name="&lt;fmt:message&gt;" />
					<section id="8.9" name="&lt;fmt:param&gt;" />
					<section id="8.10" name="&lt;fmt:requestEncoding&gt;" />
					<section id="8.11" name="Configuration Parameters" />
					<section id="8.11.1" name="Locale" />
					<section id="8.11.2" name="Fallback Locale" />
					<section id="8.11.3" name="I18n Localization Context" />
				</sections>
			</chapter>
			<chapter id="9" name="Formatting Actions ">
				<sections>
					<section id="9.1" name="Overview" />
					<section id="9.1.1"
						name="Formatting Numbers, Currencies, and Percentages" />
					<section id="9.1.2" name="Formatting Dates and Times" />
					<section id="9.2" name="Formatting Locale" />
					<section id="9.3" name="Establishing a Formatting Locale" />
					<section id="9.3.1" name="Locales Available for Formatting Actions" />
					<section id="9.3.2" name="Locale Lookip" />
					<section id="9.3.3" name="Formatting Locale Lookup Algorithm" />
					<section id="9.4" name="Time Zone" />
					<section id="9.5" name="&lt;fmt:timeZone&gt;" />
					<section id="9.6" name="&lt;fmt:setTimeZone&gt;" />
					<section id="9.7" name="&lt;fmt:formatNumber&gt;" />
					<section id="9.8" name="&lt;fmt:parseNumber&gt;" />
					<section id="9.9" name="&lt;fmt:formatDate&gt;" />
					<section id="9.10" name="&lt;fmt:parseDate&gt;" />
					<section id="9.11" name="Configuration Settings" />
					<section id="9.11.1" name="TimeZone" />
				</sections>
			</chapter>
			<chapter id="10" name="SQL Actions ">
				<sections>
					<section id="10.1" name="Overview" />
					<section id="10.1.1" name="Data Source" />
					<section id="10.1.2" name="Querying a Database" />
					<section id="10.1.3" name="Updating a Database" />
					<section id="10.1.4" name="SQL Statement Parameters" />
					<section id="10.2" name="Database Access" />
					<section id="10.3" name="&lt;sql:query&gt;" />
					<section id="10.4" name="&lt;sql:update&gt;" />
					<section id="10.5" name="&lt;sql:transaction&gt;" />
					<section id="10.6" name="&lt;sql:setDataSource&gt;" />
					<section id="10.7" name="&lt;sql:param&gt;" />
					<section id="10.8" name="&lt;sql:dateParam&gt;" />
					<section id="10.9" name="Configuration Settings" />
					<section id="10.9.1" name="DataSource" />
					<section id="10.9.2" name="MaxRows" />
				</sections>
			</chapter>
			<chapter id="11" name="XML Core Actions">
				<sections>
					<section id="11.1" name="Overview" />
					<section id="11.1.1" name="XPath Context" />
					<section id="11.1.2" name="XPath Variable Bindings" />
					<section id="11.1.3" name="Java to XPath Type Mappings" />
					<section id="11.1.4" name="XPath to Java Type Mappings" />
					<section id="11.1.5" name="The select Attribute" />
					<section id="11.1.6" name="Default Context Node" />
					<section id="11.1.7" name="Resources Access" />
					<section id="11.1.8" name="Core Actions" />
					<section id="11.2" name="&lt;x:parse&gt;" />
					<section id="11.3" name="&lt;x:out&gt;" />
					<section id="11.4" name="&lt;x:set&gt;" />
				</sections>
			</chapter>
			<chapter id="12" name="XML Flow Control Actions">
				<sections>
					<section id="12.1" name="Overview" />
					<section id="12.2" name="&lt;x:if&gt;" />
					<section id="12.3" name="&lt;x:choose&gt;" />
					<section id="12.4" name="&lt;x:when&gt;" />
					<section id="12.5" name="&lt;x:otherwise&gt;" />
					<section id="12.6" name="&lt;x:forEach&gt;" />
				</sections>
			</chapter>
			<chapter id="13" name="XML Transform Actions">
				<sections>
					<section id="13.1" name="Overview" />
					<section id="13.2" name="&lt;x:transform&gt;" />
					<section id="13.3" name="&lt;x:param&gt;" />
				</sections>
			</chapter>
			<chapter id="14" name="Tag Library Validators">
				<sections>
					<section id="14.1" name="Overview" />
				</sections>
			</chapter>
			<chapter id="15" name="Functions">
				<sections>
					<section id="15.1" name="Overview" />
					<section id="15.1.1" name="The length function" />
					<section id="15.1.2" name="String Manipulation Functions" />
					<section id="15.2" name="&lt;fn:contains&gt;" />
					<section id="15.3" name="&lt;fn:containsIgnoreCase&gt;" />
					<section id="15.4" name="&lt;fn:endsWith&gt;" />
					<section id="15.5" name="&lt;fn:escapeXml&gt;" />
					<section id="15.6" name="&lt;fn:indexOf&gt;" />
					<section id="15.7" name="&lt;fn:join&gt;" />
					<section id="15.8" name="&lt;fn:length&gt;" />
					<section id="15.9" name="&lt;fn:replace&gt;" />
					<section id="15.10" name="&lt;fn:split&gt;" />
					<section id="15.11" name="&lt;fn:startsWith&gt;" />
					<section id="15.12" name="&lt;fn:substring&gt;" />
					<section id="15.13" name="&lt;fn:substringAfter&gt;" />
					<section id="15.14" name="&lt;fn:substringBefore&gt;" />
					<section id="15.15" name="&lt;fn:toLowerCase&gt;" />
					<section id="15.16" name="&lt;fn:toUpperCase&gt;" />
					<section id="15.17" name="&lt;fn:trim&gt;" />
				</sections>
			</chapter>
			<chapter id="16" name="Java APIs">
				<sections>
					<section id="16.0" name="Javadoc" />
				</sections>
			</chapter>
			<chapter id="Appendix A" name="Compatibility &amp; Migration">
				<sections>
					<section id="A.1" name="JSTL 1.2 Backwards Compatibilty" />
					<section id="A.2" name="JSTL 1.1 Backwards Compatibilty" />
					<section id="A.2.1"
						name="How JSTL 1.1 Backwards Compatibilty is Achieved" />
					<section id="A.3" name="Migrating to JSTL 1.1" />
				</sections>
			</chapter>
		</chapters>
	</location-names>
	<assertions>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:1</id>
			<description>The URI for the core tag library must be
				http://java.sun.com/jsp/jstl/core.</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:2</id>
			<description>The URI for the XML processing tag library must be
				http://java.sun.com/jsp/jstl/xml.</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:3</id>
			<description>The URI for the 18N capable formatting tag library must
				be http://java.sun.com/jsp/jstl/fmt.</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:4</id>
			<description>The URI for the relational database access (SQL) tag
				library must be http://java.sun.com/jsp/jstl/sql.</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:95</id>
			<description>The URI for the functions tag library must be
				http://java.sun.com/jsp/jstl/functions.</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="removed" testable="true">
			<id>JSTL:SPEC:16</id>
			<description>The URI for the RT-based core tags must be
				http://java.sun.com/jstl/core-rt</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="removed" testable="true">
			<id>JSTL:SPEC:17</id>
			<description>The URI for the RT-based XML processing tags must be
				http://java.sun.com/jstl/xml-rt</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="removed">
			<id>JSTL:SPEC:18</id>
			<description>The URI for the RT-based I18N capable formatting tags
				must be http://java.sun.com/jstl/fmt-rt</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="removed">
			<id>JSTL:SPEC:19</id>
			<description>The URI for the RT-based relational database access
				(SQL) tags must be http://java.sun.com/jstl/sql-rt</description>
			<location chapter="1" section="1.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="removed">
			<id>JSTL:SPEC:5</id>
			<description>An attribute value can accept a static String.</description>
			<location chapter="2" section="2.2.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="removed">
			<id>JSTL:SPEC:6</id>
			<description>An attribute value can accept a dynamic EL expression;
				the result of evaluating the expression must yield an object whose
				type is compatible with the expected type.</description>
			<location chapter="2" section="2.2.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="removed" testable="true">
			<id>JSTL:SPEC:20</id>
			<description>An attribute value can accept a dynamic RT expression;
				the result of evaluating the expression must yield an object whose
				type is compatible with the expected type.</description>
			<location chapter="2" section="2.2.2" />
		</assertion>
		<assertion testable="true" defined-by="technology"
			impl-spec="false" required="true" status="active">
			<id>JSTL:SPEC:7</id>
			<description>Nested scoped variables are only visible within the body
				of the action and are stored in page scope. </description>
			<location chapter="2" section="2.2.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:7.1</id>
					<description>The action must create the variable as if by calling
						PageContext.setAttribute(varName, PAGE_SCOPE).</description>
					<location chapter="2" section="2.2.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:7.2</id>
					<description>The action must remove the variable at the end of the
						action as if by calling PageContext.removeAttribute(varName,
						PAGE_SCOPE)</description>
					<location chapter="2" section="2.2.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:8</id>
			<description>At-end scoped variables are only visible at the end of
				the action and their lifecycle is one associated with their
				associated scope.</description>
			<location chapter="2" section="2.2.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:30</id>
			<description>Attributes of actions may accept dynamic values (EL or
				RT depending on the tag) except for attributes describing 'scope'
				and attributes that export variables via 'var' and/or 'varXXX'
				attributes.</description>
			<location chapter="2" section="2.2" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:9</id>
			<description>Valid whitespace characters are #x20, #x9, #xD, or #xa
				per the JSP specification as well as the XML and XSLT
				specifications.</description>
			<location chapter="2" section="2.4" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:10</id>
			<description>An empty body is always valid for actions accepting a
				body content.</description>
			<location chapter="2" section="2.5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:31</id>
			<description>Body content is used to set the value of an attribute,
				then an empty body content sets the attribute value to an empty
				string.</description>
			<location chapter="2" section="2.5" />
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:11</id>
			<description>Body content is trimmed prior to being processed by the
				action, it is trimmed as defined by the method trim() of the java
				class java.lang.String</description>
			<location chapter="2" section="2.5" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:32</id>
			<description>All syntax errors (as defined by the syntax section of
				each action) must be reported at translation time.</description>
			<location chapter="2" section="2.7" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:98</id>
			<description>Constraints, as defined in the constraints section of
				each action, must also be reported at translation time unless they
				operate on a dynamic attribute value, in which case errors are
				reported at runtime.</description>
			<location chapter="2" section="2.7" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:33</id>
			<description>Semantics of handling errors and exceptions are defined
				as follows:</description>
			<location chapter="2" section="2.7" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:33.1</id>
					<description>If 'scope' is provided an invalid value a translation
						time validation error must occur.</description>
					<location chapter="2" section="2.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:33.2</id>
					<description>If 'var' or 'varXXX' is empty, a translation time
						validation error must occur.</description>
					<location chapter="2" section="2.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:33.3</id>
					<description>Dynamic attributes with a fixed set of valid values
						will handle errors as follows:</description>
					<location chapter="2" section="2.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:33.3.1</id>
							<description>If the value is null, use the default value.</description>
							<location chapter="2" section="2.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:33.3.2</id>
							<description>If the value is invalid, throw an exception.</description>
							<location chapter="2" section="2.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:33.4</id>
					<description>Dynamic attributes without a fixed set of valid values
						will handle errors as follows:</description>
					<location chapter="2" section="2.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:33.4.1</id>
							<description>If the value is null, the behavior is specific to
								the action.</description>
							<location chapter="2" section="2.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:33.4.2</id>
							<description>If the value is of an invalid type, throw an
								exception.</description>
							<location chapter="2" section="2.7" />
							<depends>
								<depend>33.8</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:33.4.3</id>
							<description>If the value is invalid, throw an exception.</description>
							<location chapter="2" section="2.7" />
							<depends>
								<depend>33.8</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:33.5</id>
					<description>Exceptions caused by the body content must be
						propagated.</description>
					<location chapter="2" section="2.7" />
					<depends>
						<depend>33.8</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:33.6</id>
					<description>Exceptions caused by the action itself must be
						propagated.</description>
					<location chapter="2" section="2.7" />
					<depends>
						<depend>33.8</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:33.7</id>
					<description>Exceptions caused by the EL must be propagated.</description>
					<location chapter="2" section="2.7" />
					<depends>
						<depend>33.8</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:33.8</id>
					<description>An exception thrown by an action must be an instance
						or subclass of 'javax.servlet.jsp.JspException'.</description>
					<location chapter="2" section="2.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:33.8.1</id>
							<description> If an action catches any exceptions that occur in
								its body, its tag handler must provide the caught exception as
								the root cause of the JspException it re-throws.</description>
							<location chapter="2" section="2.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:33.9</id>
					<description>Exceptions caused by XPath are always propagated.</description>
					<location chapter="2" section="2.7" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:51</id>
			<description>When a configuration parameter can be specified either
				as a scoped variable or a context parameter, scoped variables are
				searched first according to the semantics defined for method
				findAttribute(String name) of the JSP class
				javax.servlet.jsp.PageContext. If the value is not found, then
				method getInitParameter(String name) is called on the servlet
				context associated with the web application to try to get the value
				of the configuration parameter from a context initialization
				parameter.</description>
			<location chapter="2" section="2.8" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:96</id>
			<description>When setting configuration data via the deployment
				descriptor, the name associated with the context initialization
				parameter must be used and only String values may be specified.</description>
			<location chapter="2" section="2.8" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:97</id>
			<description>If the type of the object used as the value of a
				configuration variable does not match one of those supported by the
				configuration variable, conversion is performed according to the
				conversion rules defined in the expression language.</description>
			<location chapter="2" section="2.8" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:97.1</id>
					<description>A failure of these conversion rules to determine an
						appropriate type coersion leads to a JspException at runtime.</description>
					<location chapter="2" section="2.8" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:99</id>
			<description>The values of the static members of the
				javax.servlet.jsp.jstl.core.Config class are as follows:</description>
			<location chapter="2" section="2.8" />
			<comment>These values are taken from the javadoc.</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:99.1</id>
					<description>The value of Config.FMT_FALLBACK_LOCALE is
						"javax.servlet.jsp.jstl.fmt.fallbackLocale".</description>
					<location chapter="2" section="2.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:99.2</id>
					<description>The value of Config.FMT_LOCALE is
						"javax.servlet.jsp.jstl.fmt.locale".</description>
					<location chapter="2" section="2.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:99.3</id>
					<description>The value of Config.FMT_LOCALIZATION_CONTEXT is
						"javax.servlet.jsp.jstl.fmt.localizationContext".</description>
					<location chapter="2" section="2.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:99.4</id>
					<description>The value of Config.FMT_TIME_ZONE is
						"javax.servlet.jsp.jstl.fmt.timeZone".</description>
					<location chapter="2" section="2.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:99.5</id>
					<description>The value of Config.SQL_DATA_SOURCE is
						"javax.servlet.jsp.jstl.sql.dataSource".</description>
					<location chapter="2" section="2.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:99.6</id>
					<description>The value of Config.SQL_MAX_ROWS is
						"javax.servlet.jsp.jstl.sql.maxRows".</description>
					<location chapter="2" section="2.8" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:100</id>
			<description>The lookup of configuration variables is performed as if
				each scope had its own name space, that is, the same configuration
				variable name in one scope does not replace one stored in a
				different scope.</description>
			<location chapter="2" section="2.8" />
			<comment>Description is taken from the javadoc for Config.get().</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:101</id>
			<description>Setting the value of a configuration variable is
				performed as if each scope had its own name space, that is, the same
				configuration variable name in one scope does not replace one stored
				in a different scope.</description>
			<location chapter="2" section="2.8" />
			<comment>Description is taken from the javadoc for Config.set().</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:102</id>
			<description>The lookup of configuration variables is performed as if
				each scope had its own name space, that is, the same configuration
				variable name in one scope does not replace one stored in a
				different scope.</description>
			<location chapter="2" section="2.8" />
			<comment>Description is taken from the javadoc for Config.remove().</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:103</id>
			<description>The javax.servlet.jsp.jstl.core.Config.find() method
				finds the value associated with a specific configuration setting
				identified by its context initialization parameter name.</description>
			<location chapter="2" section="2.8" />
			<comment>Description is taken from the javadoc for Config.find().</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:103.1</id>
					<description>If no value is found, the method attempts to find the
						value of the context initialization parameter identified by name.</description>
					<location chapter="2" section="2.8" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:34</id>
			<description>The EL is invoked exclusively via the construct ${expr}.</description>
			<location chapter="3" section="3.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:35</id>
			<description>Attributes can contain more than one EL expression,
				mixed with static text.</description>
			<location chapter="3" section="3.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:36</id>
			<description>An identifier in the EL refers to a JSP scoped variable
				returned by a call to PageContext.getAttribute(identifier).
				Therefore, the variable can reside in any of the four JSP scopes:
				page, request, session, or application.</description>
			<location chapter="3" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:37</id>
			<description>A null value is returned of the variable does not exist
				in any of the scopes.</description>
			<location chapter="3" section="3.2" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:38</id>
			<description>The EL defines implicit objects to support easy access
				to application data.</description>
			<location chapter="3" section="3.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:38.1</id>
					<description>The 'application' implicit object</description>
					<location chapter="3" section="3.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:38.2</id>
					<description>The 'session' implicit object</description>
					<location chapter="3" section="3.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:38.3</id>
					<description>The 'request' implicit object</description>
					<location chapter="3" section="3.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:38.4</id>
					<description>The 'page' implicit object</description>
					<location chapter="3" section="3.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:38.5</id>
					<description>Access to HTTP Request parameters</description>
					<location chapter="3" section="3.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:38.5.1</id>
							<description>The 'param' implicit object is a Map object where
								param["param-name"] returns the first value associated with the
								'param-name'</description>
							<location chapter="3" section="3.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:38.5.2</id>
							<description>The 'params' implicit object will return an array of
								all string values associated with that request parameter
								(params["param-name"]).</description>
							<location chapter="3" section="3.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:38.6</id>
					<description>The implicit object 'pageContext'.</description>
					<location chapter="3" section="3.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:39</id>
			<description>The EL provides two operators to provide easy access to
				data encapsulated in the accessed objects.</description>
			<location chapter="3" section="3.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:39.1</id>
					<description>The '.' operator provides a convenient shorthand for
						propety access when the property name follows the conventions of
						java indentifiers.</description>
					<location chapter="3" section="3.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:39.2</id>
					<description>The '[]' operator allows more generalized access.</description>
					<location chapter="3" section="3.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="removed" testable="true">
			<id>JSTL:SPEC:40</id>
			<description>The EL defines operators for relational, arithmetic, and
				logical operations against data.</description>
			<location chapter="3" section="3.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:40.1</id>
					<description>Relational Operators: ==, !=, &lt; (or lt), > (or gt),
						&lt;= (or le), >= (or ge)</description>
					<location chapter="3" section="3.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:40.2</id>
					<description>Arithmetic Operators: addition (+), subtraction (-),
						multiplication (*), division (/ or div), and remainder/modulo (%
						or mod)</description>
					<location chapter="3" section="3.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:40.3</id>
					<description>Binary Operators: and, or, and not</description>
					<location chapter="3" section="3.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:12</id>
			<description>The &lt;c:out&gt; action evaluates an expression and
				outputs the result of the evaluation to the current JspWriter
				object.</description>
			<location chapter="4" section="4.2" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:12.1</id>
					<description>The 'value' attribute defines the expression to be
						evaluated</description>
					<location chapter="4" section="4.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:12.1.1</id>
							<description>The result of the expression evaluation must yield
								an Object type.</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.1.2</id>
							<description>If the result of the evaluated expression is not of
								type Object and a default value is not provided, either as body
								content, or as an attribute value, an Exception is thrown.</description>
							<location chapter="4" section="4.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:12.1.3</id>
							<description>If the result of the evaluation is not a
								java.io.Reader object, then it is coerced to a String and is
								subsequently emitted into the current JspWriter object</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:12.1.4</id>
							<description>If the result of the evaluation is a java.io.Reader
								object, data is first read from the Reader object and then
								written into the current JspWriter object. </description>
							<location chapter="4" section="4.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:12.2</id>
					<description>The 'escapeXml' attribute determines whether the
						characters &lt;,>,&amp;,'," in the resulting string should be
						converted to their corresponding character entity codes.</description>
					<location chapter="4" section="4.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.1</id>
							<description>The default value is true.</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.2</id>
							<description>The result of the evaluated expression must be
								boolean.</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.3</id>
							<description>If the result of the evaluated expression is not of
								type boolean, an Exception is thrown.</description>
							<location chapter="4" section="4.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.4</id>
							<description>If a value is provided, but invalid, an Exception is
								thrown.</description>
							<location chapter="4" section="4.2" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.5</id>
							<description>'&lt;' is converted to \&lt;</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.6</id>
							<description>'>' is converted to \></description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.7</id>
							<description>'&amp;' is converted to \&amp;</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.8</id>
							<description>Single quote (') is converted to &amp;#039.</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.9</id>
							<description>Double quote (") is converted to &amp;#034.</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.10</id>
							<description>If the value evaluates to null, the default value,
								'true', will be used.</description>
							<location chapter="4" section="4.2" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.2.11</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="4" section="4.2" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:12.3</id>
					<description>The 'default' attribute specified the value to be used
						of the value attribute cannot be evaluated, or the resulting value
						is null.</description>
					<location chapter="4" section="4.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.3.1</id>
							<description>The result of the evaluated expression must be an
								Object.</description>
							<location chapter="4" section="4.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:12.3.2</id>
							<description>If the result of the evaluated expression is not of
								type Object, an Exception is thrown.</description>
							<location chapter="4" section="4.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:12.3.3</id>
							<description>If no default value is specified, it itself defaults
								to an empty string.</description>
							<location chapter="4" section="4.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:12.4</id>
					<description>An exception will be propagated only if no default
						value is specified.</description>
					<location chapter="4" section="4.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:12.5</id>
					<description>A default value for the action can be defined as body
						content of the action.</description>
					<location chapter="4" section="4.2" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
						<depend>31</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:12.6</id>
					<description>The 'value' attribute is required in all syntax
						variations of the action.</description>
					<location chapter="4" section="4.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:12.7</id>
					<description>Any exception caused by the body content, if present,
						must be propagated.</description>
					<location chapter="4" section="4.2" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:12.8</id>
					<description>If an exception is caused by the action itself, it
						must be propagated.</description>
					<location chapter="4" section="4.2" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="false" status="active">
			<id>JSTL:SPEC:13</id>
			<description>The &lt;c:set&gt; action sets the value of a scoped
				variable or a property of a target object.</description>
			<location chapter="4" section="4.3" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:13.1</id>
					<description>The expression to be evaluated in Syntax 1, 3 and 5 is
						specified by the attribute 'value'</description>
					<location chapter="4" section="4.3" />
					<sub-assertions>
						<assertion defined-by="technology" required="true"
							impl-spec="true" status="active" testable="true">
							<id>JSTL:SPEC:13.1.1</id>
							<description>The result of the expression evaluation must yield
								an Object type.</description>
							<location chapter="4" section="4.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:13.2</id>
					<description>The expression to be evaluated in Syntax 2 is
						specified within the body of the action.</description>
					<location chapter="4" section="4.3" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
						<depend>31</depend>
					</depends>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:13.3</id>
					<description>The 'var' attribute defines the name of the exported
						scoped attribute to hold the value specified in the action in
						Syntax 1, 2, 5.</description>
					<location chapter="4" section="4.3" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="false">
							<id>JSTL:SPEC:13.3.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="4" section="4.3" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.3.2</id>
							<description>The result of the expression evaluation must yield a
								String type.</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.3.3</id>
							<description>If the evaluated expression is not a String, an
								exception is thrown.</description>
							<location chapter="4" section="4.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:13.4</id>
					<description>The 'scope' attribute sets the scope of the exported
						variable in Syntax 1 qnd 2.</description>
					<location chapter="4" section="4.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:13.4.1</id>
							<description>A scoped variable can be exported to the 'page'
								scope</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:13.4.2</id>
							<description>A scoped variable can be exported to the 'request'
								scope</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:13.4.3</id>
							<description>A scoped variable can be exported to the 'session'
								scope</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:13.4.4</id>
							<description>A scoped variable can be exported to the
								'application' scope</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.4.5</id>
							<description>If the scope attribute is provided an invalid value,
								a translation time validation error will occur.</description>
							<location chapter="4" section="4.3" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:13.5</id>
					<description>If the scope attribute is not specified, the default
						scope of 'page' will be used.</description>
					<location chapter="4" section="4.3" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="false" status="removed">
					<id>JSTL:SPEC:13.6</id>
					<description>The 'var' attribute is required across all syntax
						variations of the action.</description>
					<location chapter="4" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:13.7</id>
					<description>If 'value' is null:</description>
					<location chapter="4" section="4.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.7.1</id>
							<description>In Syntax 1, the scoped variable defined by 'var'
								and 'scope' is removed.</description>
							<location chapter="4" section="4.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:13.7.1.1</id>
									<description>If attribute scope is specified, the scoped
										variable is removed according to the semantics of
										PageContext.removeAttribute(varName, scope).</description>
									<location chapter="4" section="4.3" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:13.7.1.2</id>
									<description>Otherwise, there is no way to differentiate
										between syntax 1 and syntax 5. The scoped variable is removed
										according to the semantics of
										PageContext.removeAttribute(varName), and the variable is
										removed from the VariableMapper as well.</description>
									<location chapter="4" section="4.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.7.2</id>
							<description>In Syntax 3, if target is a Map, remove the entry
								with the key identified by property.</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.7.3</id>
							<description>In Syntax 3, if target is a JavaBean component, set
								the property to null.</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.7.4</id>
							<description>In Syntax 5, here is no way to differentiate between
								syntax 1 (where scope is not specified) and syntax 5. The scoped
								variable is removed according to the semantics of
								PageContext.removeAttribute(varName), and the variable is
								removed from the VariableMapper as well.</description>
							<location chapter="4" section="4.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:13.8</id>
					<description>If an invalid value is provided to the 'scope'
						attribute, a translation time validation error must occur.</description>
					<location chapter="4" section="4.3" />
					<depends>
						<depend>33.1</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:13.9</id>
					<description>Any exception caused by the body content, must be
						propagated.</description>
					<location chapter="4" section="4.3" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:13.10</id>
					<description>The target attribute represents the target object
						whose property will be set in Syntax 3 and 4.</description>
					<location chapter="4" section="4.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.10.1</id>
							<description>The target attribute must evaluate to a JavaBeans
								object with setter property property, or to a java.util.Map
								object.</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.10.2</id>
							<description>If the target attribute is null, throw an exception.</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.10.3</id>
							<description>If the target attribute is not a java.util.Map
								object and is not a JavaBeans object that supports setting
								property 'property', throw an exception.</description>
							<location chapter="4" section="4.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:13.11</id>
					<description>The property attribute represents the name of the
						property to be set in the target object in Syntax 3 and 4.</description>
					<location chapter="4" section="4.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.11.1</id>
							<description>The property attribute must evaluate to a String.</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.11.2</id>
							<description>If the property attribute does not evaluate to a
								String, an exception is thrown.</description>
							<location chapter="4" section="4.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:13.12</id>
					<description>In Syntax 1, set the value of a the scoped variable
						identified by 'var' and 'scope' using attribute 'value.'</description>
					<location chapter="4" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:13.13</id>
					<description>In Syntax 2, set the value of a the scoped variable
						identified by 'var' and 'scope' using body content.</description>
					<location chapter="4" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:13.14</id>
					<description>In Syntax 3, set a property of a target object using
						attribute 'value.'</description>
					<location chapter="4" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:13.15</id>
					<description>In Syntax 4, set a property of a target object using
						body content.</description>
					<location chapter="4" section="4.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:13.16</id>
					<description>In Syntax 3 and 4, if the target expression evaluates
						to a java.util.Map object, set the value of the element associated
						with the key identified by 'property.'</description>
					<location chapter="4" section="4.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.16.1</id>
							<description>If the element does not exist, add it to the Map
								object.</description>
							<location chapter="4" section="4.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:13.17</id>
					<description>In Syntax 3 and 4, if the target expression does not
						evaluate to a java.util.Map object, set the value of the
						'property' property of the JavaBeans object 'target.'</description>
					<location chapter="4" section="4.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.17.1</id>
							<description>If the type of the value to be set does not match
								the type of the bean property, conversion is performed according
								to the conversion rules defined in the expression language.</description>
							<location chapter="4" section="4.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:13.17.2</id>
							<description>A failure of the conversion rules to determine an
								appropriate type coercion leads to a JspException at runtime.</description>
							<location chapter="4" section="4.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:13.18</id>
					<description>Syntax 5 sets a deferred value. The deferred-value
						specified is mapped to the "var" attribute into the EL
						VariableMapper.</description>
					<location chapter="4" section="4.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:41</id>
			<description>The &lt;c:remove&gt; action removes a scoped variable.</description>
			<location chapter="4" section="4.4" />
			<depends>
				<depend>8</depend>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:41.1</id>
					<description>The 'var' attribute specifies the name of the scoped
						variable to remove.</description>
					<location chapter="4" section="4.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:41.1.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="4" section="4.4" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:41.2</id>
					<description>The 'scope' attribute specifies the scope of the
						variable to remove.</description>
					<location chapter="4" section="4.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:41.2.1</id>
							<description>A value of 'page' will cause 'var' to be removed
								from the page scope.</description>
							<location chapter="4" section="4.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:41.2.2</id>
							<description>A value of 'request' will cause 'var' to be removed
								the the request scope.</description>
							<location chapter="4" section="4.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:41.2.3</id>
							<description>A value of 'session' will cause 'var' to be removed
								from the session scope.</description>
							<location chapter="4" section="4.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:41.2.4</id>
							<description>A value of 'application' will cause 'var' to be
								removed from the application scope.</description>
							<location chapter="4" section="4.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:41.2.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="4" section="4.4" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:41.3</id>
					<description>If attribute 'scope' is note specified, the scoped
						variable is removed by calling
						PageContext.removeAttribute(varName).</description>
					<location chapter="4" section="4.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:41.4</id>
					<description>The 'var' attribute is required.</description>
					<location chapter="4" section="4.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:41.5</id>
					<description>The &lt;c:remove&gt; attribute does not accept a body
						content.</description>
					<location chapter="4" section="4.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:42</id>
			<description>The &lt;c:catch&gt; action catchs a java.lang.Throwable
				thrown by any of its nested actions.</description>
			<location chapter="4" section="4.5" />
			<depends>
				<depend>8</depend>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:42.1</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped variable for the exception thrown from a nested action.
						They type of the scoped variable is the type of the exception
						thrown.</description>
					<location chapter="4" section="4.5" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:42.1.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="4" section="4.5" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:42.2</id>
					<description>The body content, consisting of nested actions, is
						processed by the JSP container and the result is written to the
						current JspWriter.</description>
					<location chapter="4" section="4.5" />
					<depends>
						<depend>10</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:42.3</id>
					<description>If the 'var' attribute is not specified, the exception
						is simply caught and not saved.</description>
					<location chapter="4" section="4.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:42.3.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="4" section="4.5" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:14</id>
			<description>The &lt;c:if&gt; action evaluates its body content if
				the expression specified with the 'test' attribute is true.</description>
			<location chapter="5" section="5.3" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="true"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:14.1</id>
					<description>The 'test' attribute specifies the test condition that
						indicates whether or not the body content should be processed.</description>
					<location chapter="5" section="5.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:14.1.1</id>
							<description>If the expression is true, the JSP container
								processes the body of the action and writes it to the current
								JspWriter.</description>
							<location chapter="5" section="5.3" />
							<depends>
								<depend>10</depend>
							</depends>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:14.1.2</id>
							<description>If the expression is false, the body of the action
								is not processed.</description>
							<location chapter="5" section="5.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="removed" testable="true">
							<id>JSTL:SPEC:14.1.3</id>
							<description>The result of the evaluated EL expression must be
								'boolean' or 'Boolean'</description>
							<location chapter="5" section="5.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="removed" testable="true">
							<id>JSTL:SPEC:14.1.4</id>
							<description>The result of the evaluated RT expression must be
								'boolean'.</description>
							<location chapter="5" section="5.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="true"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:14.2</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped variable for the resulting value of the test condition.</description>
					<location chapter="5" section="5.3" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:14.2.1</id>
							<description>The type of the exported scoped variable must be
								'Boolean'</description>
							<location chapter="5" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:14.2.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="5" section="5.3" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:14.3</id>
					<description>The 'scope' attribute sets the scope of the exported
						variable.</description>
					<location chapter="5" section="5.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:14.3.1</id>
							<description>A scoped variable can be exported to the 'page'
								scope</description>
							<location chapter="5" section="5.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:14.3.2</id>
							<description>A scoped variable can be exported to the 'request'
								scope</description>
							<location chapter="5" section="5.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:14.3.3</id>
							<description>A scoped variable can be exported to the 'session'
								scope</description>
							<location chapter="5" section="5.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:14.3.4</id>
							<description>A scoped variable can be exported to the
								'application' scope</description>
							<location chapter="5" section="5.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:14.3.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="5" section="5.3" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" required="true"
					impl-spec="false" testable="true" status="active">
					<id>JSTL:SPEC:14.4</id>
					<description>The 'test' attribute is required.</description>
					<location chapter="5" section="5.3" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="false">
					<id>JSTL:SPEC:14.5</id>
					<description>The action should not have a content body if the 'var'
						attribute is specified.</description>
					<location chapter="5" section="5.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:14.6</id>
					<description>If 'var' is specified without specifying a scope, the
						variable will be exported to the page scope by default.</description>
					<location chapter="5" section="5.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:14.7</id>
					<description>Any exception caused by the body-content, must be
						propagated.</description>
					<location chapter="5" section="5.4" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" testable="true" status="active">
			<id>JSTL:SPEC:15</id>
			<description>The &lt;c:choose&gt; action provides the context for
				mutually exclusive conditional execution.</description>
			<location chapter="5" section="5.4" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:15.1</id>
					<description>The &lt;c:choose&gt; action process the body of the
						first &lt;c:when&gt; action whose test condition evaluates to
						true.</description>
					<location chapter="5" section="5.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:15.1.1</id>
							<description>The body content of the &lt;c:choose&gt; action can
								only consist of:</description>
							<location chapter="5" section="5.4" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:15.1.1.1</id>
									<description>White space may appear anywhere around the
										&lt;c:when&gt; and &lt;c:otherwise&gt; subtags.</description>
									<location chapter="5" section="5.4" />
									<depends>
										<depend>9</depend>
									</depends>
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:15.1.1.2</id>
									<description>1 or more &lt;c:when&gt; actions, all of which
										must appear before &lt;c:otherwise&gt;</description>
									<location chapter="5" section="5.4" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:15.1.1.3</id>
									<description>0 or 1 &lt;c:otherwise&gt; action, which if
										present, must be the last nested action within
										&lt;c:choose&gt;</description>
									<location chapter="5" section="5.4" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" testable="true" status="active">
							<id>JSTL:SPEC:15.2.1</id>
							<description>The &lt;c:when&gt; action represents an alternative
								within a &lt;c:choose&gt; action.</description>
							<location chapter="5" section="5.5" />
							<sub-assertions>
								<assertion defined-by="technology" required="true"
									impl-spec="false" testable="true" status="active">
									<id>JSTL:SPEC:15.2.1.1</id>
									<description>The body content of the first &lt;c:when&gt;
										action to evaluate to true will be processed and written to
										the current JspWriter.</description>
									<location chapter="5" section="5.5" />
									<depends>
										<depend>10</depend>
									</depends>
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" testable="true" status="active">
									<id>JSTL:SPEC:15.2.1.2</id>
									<description>The 'test' attriubte describes a test condition
										which determines whether or not the body content should be
										processed.</description>
									<location chapter="5" section="5.5" />
									<sub-assertions>
										<assertion defined-by="technology" impl-spec="false"
											required="true" status="removed" testable="true">
											<id>JSTL:SPEC:15.2.1.2.1</id>
											<description>The result of the evaluated EL expression must
												be 'boolean' or 'Boolean'</description>
											<location chapter="5" section="5.5" />
										</assertion>
										<assertion defined-by="technology" required="true"
											impl-spec="false" status="removed" testable="true">
											<id>JSTL:SPEC:15.2.1.2.2</id>
											<description>The result of the evaluated RT expression must
												be 'boolean'</description>
											<location chapter="5" section="5.5" />
										</assertion>
									</sub-assertions>
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" testable="true" status="active">
									<id>JSTL:SPEC:15.2.1.3</id>
									<description>The 'test' attribute is required.</description>
									<location chapter="5" section="5.5" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:15.2.1.4</id>
									<description>The &lt;c:when&gt; action must have
										&lt;c:choose&gt; as an immediate parent.</description>
									<location chapter="5" section="5.5" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:15.2.1.5</id>
									<description>The &lt;c:when&gt; action must appear before an
										&lt;c:otherwise&gt; action that has the same parent. </description>
									<location chapter="5" section="5.5" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:15.2.1.6</id>
									<description>If an exception is caused by the body-content it
										must be propagated.</description>
									<location chapter="5" section="5.5" />
									<depends>
										<depend>33.5</depend>
									</depends>
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="active">
					<id>JSTL:SPEC:15.3</id>
					<description>The &lt;c:otherwise&gt; action is used optionally as
						the last alternative whitin a &lt;c:choose&gt; action.</description>
					<location chapter="5" section="5.6" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:15.3.1</id>
							<description>The body content of &lt;c:otherwise&gt; will be
								processed and written to the current JspWriter when no
								&lt;c:when&gt; action evaluated to true.</description>
							<location chapter="5" section="5.6" />
							<depends>
								<depend>10</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:15.3.2</id>
							<description>The &lt;c:otherwise&gt; action must have
								&lt;c:choose&gt; as an immediate parent.</description>
							<location chapter="5" section="5.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:15.3.3</id>
							<description>&lt;c:otherwise&gt; must be the last nested action
								within &lt;c:choose&gt;</description>
							<location chapter="5" section="5.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:15.3.4</id>
							<description>If an exception is caused by the body content, it
								must be propagated.</description>
							<location chapter="5" section="5.6" />
							<depends>
								<depend>33.5</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="true">
			<id>JSTL:SPEC:21</id>
			<description>The &lt;c:forEach&gt; action repeats its nested body
				content over a collection of objects or repeats a fixed number of
				times.</description>
			<location chapter="6" section="6.2" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:21.1</id>
					<description>The 'var' attribute represents the name of the
						exported scoped variable for the current item of the iteration.</description>
					<location chapter="6" section="6.2" />
					<depends>
						<depend>7</depend>
					</depends>
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.1.1</id>
							<description>The type of the exported variable depends on the
								underlying collection</description>
							<location chapter="6" section="6.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:21.1.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="6" section="6.2" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:21.2</id>
					<description>The 'items' attribute specifies a collection of items
						to iterate over.</description>
					<location chapter="6" section="6.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.2.1</id>
							<description>&lt;c:forEach&gt; must support iteration over Arrays</description>
							<location chapter="6" section="6.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" testable="true" status="active">
									<id>JSTL:SPEC:21.2.1.1</id>
									<description>Includes arrays of Objects</description>
									<location chapter="6" section="6.2" />
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:21.2.1.2</id>
									<description>Includes arrays of primitive types</description>
									<location chapter="6" section="6.2" />
									<sub-assertions>
										<assertion defined-by="technology" impl-spec="false"
											required="true" status="active" testable="true">
											<id>JSTL:SPEC:21.2.1.2.1</id>
											<description>The current item for the iteration is
												automatically wrapped with its standard wrapper class.</description>
											<location chapter="6" section="6.2" />
										</assertion>
									</sub-assertions>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.2.2</id>
							<description>&lt;c:forEach&gt; must support iteration over
								implementations of java.util.Collection</description>
							<location chapter="6" section="6.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="false">
									<id>JSTL:SPEC:21.2.2.1</id>
									<description>An 'Iterator' object is obtained from the
										collection vai the iterator() method, and the items of the
										collection are processed in the order returned by that
										'Iterator' object.</description>
									<location chapter="6" section="6.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.2.3</id>
							<description>&lt;c:forEach&gt; must support iteration over
								implementations of java.util.Iterator.</description>
							<location chapter="6" section="6.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="false">
									<id>JSTL:SPEC:21.2.3.1</id>
									<description>Items of the collection are processed in the order
										returned by the 'Iterator' object.</description>
									<location chapter="6" section="6.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.2.4</id>
							<description>&lt;c:forEach&gt; must support iteration over
								implementations of java.util.Enumeration.</description>
							<location chapter="6" section="6.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="false">
									<id>JSTL:SPEC:21.2.4.1</id>
									<description>Items of the collection are processed in the order
										returned by the 'Enumeration' object.</description>
									<location chapter="6" section="6.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.2.5</id>
							<description>&lt;c:forEach&gt; must support iteration over
								implementations of java.util.Map</description>
							<location chapter="6" section="6.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" testable="true" status="active">
									<id>JSTL:SPEC:21.2.5.1</id>
									<description>Items exposed via the 'var' attribute when
										iterating over an instance of java.util.Map will be of type
										java.util.Map.Entry</description>
									<location chapter="6" section="6.2" />
									<sub-assertions>
										<assertion defined-by="technology" impl-spec="false"
											required="true" status="active" testable="true">
											<id>JSTL:SPEC:21.2.5.1.1</id>
											<description>The 'key' property of the java.util.Map.Entry
												exposes the name of the key under which this item is stored
												within the underlying Map.</description>
											<location chapter="6" section="6.2" />
										</assertion>
										<assertion defined-by="technology" impl-spec="false"
											required="true" status="active" testable="true">
											<id>JSTL:SPEC:21.2.5.1.2</id>
											<description>The 'value' property of the java.util.Map.Entry
												exposes the value of the item stored in the underlying Map.</description>
											<location chapter="6" section="6.2" />
										</assertion>
									</sub-assertions>
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="false">
									<id>JSTL:SPEC:21.2.5.2</id>
									<description>A 'Set' view of the mappings is obtained from the
										map via the entrySet() method, from which an 'Iterator' object
										is obtained via the iterator() method.</description>
									<location chapter="6" section="6.2" />
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="false">
									<id>JSTL:SPEC:21.2.5.3</id>
									<description>The items of the collection are processed in the
										order returned by that 'Iterator' object.</description>
									<location chapter="6" section="6.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="removed" testable="true">
							<id>JSTL:SPEC:21.2.6</id>
							<description>&lt;c:forEach&gt; must support iteration over
								implementations of java.sql.ResultSet.</description>
							<location chapter="6" section="6.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="removed" testable="true">
									<id>JSTL:SPEC:21.2.6.1</id>
									<description>The object exposed via the 'var' attribute is the
										ResultSet object itself positioned at the current row.</description>
									<location chapter="6" section="6.2" />
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="removed" testable="true">
									<id>JSTL:SPEC:21.2.6.2</id>
									<description>Rows are processed according to their sequential
										order in the ResultSet.</description>
									<location chapter="6" section="6.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.2.7</id>
							<description>&lt;c:forEach&gt; must support iteration over a
								String representation of a comma-separated list of values, where
								the comma character is the token delimiter.</description>
							<location chapter="6" section="6.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:21.2.7.1</id>
									<description>Tokens are processed in their sequential order in
										the String.</description>
									<location chapter="6" section="6.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:21.2.8</id>
							<description>The result of the evaluated expression must be of
								type Object.</description>
							<location chapter="6" section="6.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:21.2.9</id>
							<description>If the result of the evaluated expression is not of
								type Object, an Exception is thrown.</description>
							<location chapter="6" section="6.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:21.3</id>
					<description>If the 'item's attribute is not specified, the
						exported object associated with the 'var' attribute is of type
						Integer.</description>
					<location chapter="6" section="6.2" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:21.4</id>
					<description>The 'varStatus' attribute specifies the name of the
						scoped variable for the status of the iteration</description>
					<location chapter="6" section="6.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.4.1</id>
							<description>The exported Object associated with the value of the
								'varStatus' attribute is of type
								javax.servlet.jsp.jstl.core.LoopTagStatus.</description>
							<location chapter="6" section="6.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:21.5</id>
					<description>The 'begin' attribute specifies a starting index
						value.</description>
					<location chapter="6" section="6.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.5.1</id>
							<description>If the 'items' attribute is specified, the 'begin'
								attribute dictates that the iteration begins at the item located
								at the specified index.</description>
							<location chapter="6" section="6.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:21.5.1.1</id>
									<description>The first item of the collection has index 0.</description>
									<location chapter="6" section="6.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.5.2</id>
							<description>If the 'items' attribute is not specified, the
								'begin' attribute dictates that iteration begins with the index
								set at the value specified.</description>
							<location chapter="6" section="6.2" />
						</assertion>
						<assertion defined-by="technology" required="true"
							impl-spec="false" status="active" testable="true">
							<id>JSTL:SPEC:21.5.3</id>
							<description>The result of the evaluated expression must be of
								type 'int'.</description>
							<location chapter="6" section="6.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:21.5.4</id>
							<description>If the result of the evaluated expression is not of
								type 'int'</description>
							<location chapter="6" section="6.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:21.6</id>
					<description>The 'end' attribute specifies an ending index value.</description>
					<location chapter="6" section="6.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.6.1</id>
							<description>If the 'items' attribute is specified, the 'ends'
								attribute dictates that the Iteration ends at the item located
								at the specified index.</description>
							<location chapter="6" section="6.2" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.6.2</id>
							<description>If the 'items' attribute is not specified, the 'end'
								attribute dictates that iteration ends when the index reaches
								the value specified.</description>
							<location chapter="6" section="6.2" />
						</assertion>
						<assertion defined-by="technology" required="true"
							impl-spec="true" status="active" testable="true">
							<id>JSTL:SPEC:21.6.2</id>
							<description>The result of the evaluated expression must be of
								type 'int'.</description>
							<location chapter="6" section="6.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:21.6.3</id>
							<description>If the result of the evaluated expression is not of
								type int, an Exception is thrown.</description>
							<location chapter="6" section="6.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:21.7</id>
					<description>The 'step' attribute specifies that iteration will
						only process every 'step' items of the collections, starting with
						the first.</description>
					<location chapter="6" section="6.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.7.1</id>
							<description>The result of the evaluated expression must be of
								type 'int'.</description>
							<location chapter="6" section="6.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:21.7.2</id>
							<description>If the result of the evaluated expression is not of
								type int, an Exception is thrown.</description>
							<location chapter="6" section="6.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:21.8</id>
					<description>As long as there are items to iterate over, the body
						content is processed by the JSP container and written to the
						current JspWriter.</description>
					<location chapter="6" section="6.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:21.8.1</id>
							<description>The body content is not trimmed.</description>
							<location chapter="6" section="6.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:21.9</id>
					<description>If 'begin' is specified, the value must be >= 0.</description>
					<location chapter="6" section="6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:21.11</id>
					<description>If 'step' is specified, step must be >= 1</description>
					<location chapter="6" section="6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:21.12</id>
					<description>If 'items' is null, it is treated as an empty
						collection (no iteration is performed).</description>
					<location chapter="6" section="6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:21.13</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="6" section="6.2" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:21.14</id>
					<description>When a deferred-value is specified for the items
						attribute, the tag handler now adds at each iteration a mapping
						for the var attribute into the EL VariableMapper.</description>
					<location chapter="6" section="6.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:21.15</id>
					<description>If end is specified and it is less than begin, the
						loop is simply not executed.</description>
					<location chapter="6" section="6.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="true">
			<id>JSTL:SPEC:22</id>
			<description>The &lt;c:forTokens&gt; tag iterates over tokens,
				specified by the supplied delimiters.</description>
			<location chapter="6" section="6.3" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.1</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped variable for the current item of the iteration.</description>
					<location chapter="6" section="6.3" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:22.1.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="6" section="6.3" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.2</id>
					<description>The 'items' attribute specifies the String of tokens
						to iterate over</description>
					<location chapter="6" section="6.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:22.2.1</id>
							<description>The result of the evaluated expression must be of
								type 'String'.</description>
							<location chapter="6" section="6.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:22.2.2</id>
							<description>If the result of the evaluated expression is not of
								type String, an Exception is thrown</description>
							<location chapter="6" section="6.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.3</id>
					<description>The 'delims' attribute specifies the set of
						delimiters.</description>
					<location chapter="6" section="6.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:22.3.1</id>
							<description>The result of the evaluated expression must be of
								type 'String'</description>
							<location chapter="6" section="6.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:22.3.2</id>
							<description>If the result of the evaluated expression is not of
								type String, an exception is thrown.</description>
							<location chapter="6" section="6.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.4</id>
					<description>The 'varStatus' attribute specifies the name of the
						exported scoped variable for the status of the iteration.</description>
					<location chapter="6" section="6.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:22.4.1</id>
							<description>The object exported is of type
								javax.servlet.jsp.jstl.LoopTagStatus.</description>
							<location chapter="6" section="6.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.5</id>
					<description>The 'begin' attribute specifies the index location at
						which to begin iteration</description>
					<location chapter="6" section="6.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:22.5.1</id>
							<description>The first token has an index of 0.</description>
							<location chapter="6" section="6.3" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:22.5.2</id>
							<description>The result of the evaluated expression must of of
								type 'int'.</description>
							<location chapter="6" section="6.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:22.5.3</id>
							<description>If the result of the evaluated expression is not of
								type int, an Exception is thrown.</description>
							<location chapter="6" section="6.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.6</id>
					<description>The 'end' attribute specifies the index location at
						which to stop the iteration.</description>
					<location chapter="6" section="6.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:22.6.1</id>
							<description>The result of the evaluated expression must be of
								type 'int'.</description>
							<location chapter="6" section="6.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:22.6.2</id>
							<description>If the result of the evaluated expression is not of
								type int, an Exception is thrown.</description>
							<location chapter="6" section="6.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.7</id>
					<description>The 'step' attribute specifies that iteration will
						only process every 'step' tokens of the String, starting with the
						first one.</description>
					<location chapter="6" section="6.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:22.7.1</id>
							<description>The result of the evaluated expression must be of
								type 'int'.</description>
							<location chapter="6" section="6.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:22.7.2</id>
							<description>If the result of the evaluated expression is not of
								type int, an Exception is thrown.</description>
							<location chapter="6" section="6.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.8</id>
					<description>As long as there are items to iterate over, the body
						content is processed by the JSP container and written to the
						current JspWriter.</description>
					<location chapter="6" section="6.3" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:22.8.1</id>
							<description>The body content is not trimmed</description>
							<location chapter="6" section="6.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.9</id>
					<description>The 'items' attribute is required.</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:22.10</id>
					<description>The 'delims' attribute is required.</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="false">
					<id>JSTL:SPEC:22.11</id>
					<description>The tokens of the String are retrieved as defined by
						the creation of a java.util.StringTokenizer object with arguments
						items (the string to be tokenized) and delims (the delimiters).</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:22.12</id>
					<description>If 'begin' is specified, the value must be >= 0.</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:22.13</id>
					<description>If 'end' is specified, 'end' must be >= 'begin'.</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:22.14</id>
					<description>If 'step' is specified, it must be >= 1.</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:22.15</id>
					<description>If 'items' is null, it is treated as en empty
						collection (no iteration).</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:22.16</id>
					<description>If 'delims' is null, 'items' is treated as a single
						monolithic token. Thus, when 'delims' is null, &lt;c:forTokens&gt;
						iterates exactly zero (if 'items' is also null') or one time.</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:22.17</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="6" section="6.3" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:22.18</id>
					<description>If end is specified and it is less than begin, the
						loop is simply not executed.</description>
					<location chapter="6" section="6.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:22.19</id>
					<description>When a deferred-value is specified for the items
						attribute, the tag handler now adds at each iteration a mapping
						for the var attribute into the EL VariableMapper.</description>
					<location chapter="6" section="6.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="true">
			<id>JSTL:SPEC:23</id>
			<description>The &lt;c:import&gt; action imports the content of a
				URL-based resource.</description>
			<location chapter="7" section="7.4" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.1</id>
					<description>The 'url' attribute specifies the URL of the resource
						to import.</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.1.1</id>
							<description>The 'url' attribute must be able to accept relative
								URLs as defined by the JSP specification.</description>
							<location chapter="7" section="7.4" />
							<sub-assertions>
								<assertion defined-by="technology" required="true"
									impl-spec="false" status="active" testable="true">
									<id>JSTL:SPEC:23.1.1.1</id>
									<description>A relative URL can be a context-relative path
										which starts with a '/' and is interpreted as relative to the
										application to which the JSP page belongs.</description>
									<location chapter="7" section="7.4" />
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:23.1.1.2</id>
									<description>A relative URL can be a page-relative path which
										does not start with a '/' and is interpreted as relative to
										the current JSP page.</description>
									<location chapter="7" section="7.4" />
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="false">
									<id>JSTL:SPEC:23.1.1.3</id>
									<description>The semantics of importing a resource specified
										with a relative URL in the same context are the same as an
										include performed by a RequestDispatcher.</description>
									<location chapter="7" section="7.4" />
									<sub-assertions>
										<assertion defined-by="technology" impl-spec="false"
											required="true" status="active" testable="true">
											<id>JSTL:SPEC:23.1.1.3.1</id>
											<description>The whole enviroment (request, session,
												application) of the importing page is available to the
												target resource (including request parameters of the
												importing page).</description>
											<location chapter="7" section="7.4" />
										</assertion>
									</sub-assertions>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.1.2</id>
							<description>The 'url' attribute must be able to accept relative
								URLs of a foreign context within the same container.</description>
							<location chapter="7" section="7.4" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:23.1.2.1</id>
									<description>The relative URL specified must be a
										context-relative path (starts with a '/').</description>
									<location chapter="7" section="7.4" />
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="false">
									<id>JSTL:SPEC:23.1.2.2</id>
									<description>The semantics of importing a resource specified
										with a relative URL in a foreign context are the same as an
										include performed by a RequestDispatcher on a foreign context
										in the Servlet specification.</description>
									<location chapter="7" section="7.4" />
									<sub-assertions>
										<assertion defined-by="technology" required="true"
											impl-spec="false" status="active" testable="true">
											<id>JSTL:SPEC:23.1.2.2.1</id>
											<description>Only the 'request' environement of the importing
												page is available to the target resource.</description>
											<location chapter="7" section="7.4" />
										</assertion>
									</sub-assertions>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.1.3</id>
							<description>The 'url' attribute must accept absolute URLs</description>
							<location chapter="7" section="7.4" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:23.1.3.1</id>
									<description>The &lt;c:import&gt; action supports, at a
										minimum, the protocols offered in the J2SE platform for
										absolute URLs.</description>
									<location chapter="7" section="7.4" />
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:23.1.3.2</id>
									<description>When importing resources referenced by an absolute
										URL, none of the current execution environment (request,
										session, application) is made available to the target
										resource, even if the absolute URL resolves to the same host
										and context path.</description>
									<location chapter="7" section="7.4" />
								</assertion>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:23.1.3.3</id>
									<description>When importing an external resource using the HTTP
										protocol, &lt;c:import&gt; behaves according to the semantics
										of a GET request sent via the java.net.HttpURLConnection
										class, with setFollowRedirects set to true.</description>
									<location chapter="7" section="7.4" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.1.4</id>
							<description>The result of the evaluated expression must be of
								type 'String'.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.1.5</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="7" section="7.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:23.2</id>
					<description>The 'context' attribute specifies the name of a
						context when accessing a relative URL resource that belongs to a
						foreign context.</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion defined-by="technology" required="true"
							impl-spec="false" status="active" testable="true">
							<id>JSTL:SPEC:23.2.1</id>
							<description>The result of the evaluated expression must be of
								type 'String'.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.2.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="7" section="7.4" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.2.3</id>
							<description>The relative URL must be context-relative (i.e.
								must start with a "/").
							</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.2.4</id>
							<description>The context name must also start with a "/".</description>
							<location chapter="7" section="7.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.3</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped variable for the resource's content.</description>
					<location chapter="7" section="7.4" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.3.1</id>
							<description>The type of the exported variable is 'String'.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:23.3.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="7" section="7.4" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.4</id>
					<description>The 'scope' attribute specifies the scope in which to
						export 'var'.</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.4.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.4.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.4.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.4.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:23.4.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="7" section="7.4" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:23.5</id>
					<description>The 'charEncoding' attribute specifies the character
						encoding of the content at the input resource.</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="false">
							<id>JSTL:SPEC:23.5.1</id>
							<description>The values supported by the 'charEncoding' attribute
								are the same as those supported by the constructor of the Java
								class java.io.InputStreamReader.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.5.2</id>
							<description>The result of the evaluated expression must be of
								type 'String'.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.5.3</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="7" section="7.4" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" required="true"
					impl-spec="false" status="active" testable="true">
					<id>JSTL:SPEC:23.6</id>
					<description>The 'varReader' attribute specifies the name of the
						exported scoped variable for the resources content.</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.6.1</id>
							<description>The exported variable, as defined by the 'varReader'
								attribute is of type 'Reader'.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:23.6.2</id>
							<description>The exported variable can only be accessed within
								the body content of the &lt;c:import&gt; action.</description>
							<location chapter="7" section="7.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.7</id>
					<description>If the 'var' attribute is specified, body content must
						consist of only &lt;c:param&gt; subtags.</description>
					<location chapter="7" section="7.4" />
					<depends>
						<depend>10</depend>
					</depends>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.8</id>
					<description>If the 'varReader' attribute is specified, body
						content must not contain &lt;c:param&gt; subtags.</description>
					<location chapter="7" section="7.4" />
					<depends>
						<depend>10</depend>
					</depends>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.9</id>
					<description>It is invalid to specify the 'scope' attribute if the
						'varReader' attribute is defined.</description>
					<location chapter="7" section="7.4" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.10</id>
					<description>The 'url' attribute is required across all syntax
						variations.</description>
					<location chapter="7" section="7.4" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.11</id>
					<description>If the 'var' or 'varReader' attributes are not
						specified, the content of the imported resource is written to the
						current JspWriter object.</description>
					<location chapter="7" section="7.4" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="removed" testable="true">
					<id>JSTL:SPEC:23.12</id>
					<description>If the 'charEncoding' attribute is not specified and
						the response of the &lt;c:import&gt; request has a "Content-Type"
						header, then the character encoding specified is used.</description>
					<location chapter="7" section="7.4" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="removed" testable="true">
					<id>JSTL:SPEC:23.13</id>
					<description>If the 'charEncoding' attribute is not specified, and
						the response of the &lt;c:import&gt; request does not contain a
						"Content-Type" header, then the default encoding of ISO-8859-1
						will be used.</description>
					<location chapter="7" section="7.4" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:23.14</id>
					<description>If the 'scope' attibute is not specified, the variable
						associated with the 'var' attribute will be exported to the page
						scope.</description>
					<location chapter="7" section="7.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:23.15</id>
					<description>If 'url' is null, empty, or invalid, a JspException is
						thrown.</description>
					<location chapter="7" section="7.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:23.16</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="7" section="7.4" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:23.17</id>
					<description>If an exception is caused by the action itself, it
						must be propagated.</description>
					<location chapter="7" section="7.4" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:23.18</id>
					<description>If charEncoding is null or empty, it is considered
						missing</description>
					<location chapter="7" section="7.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:23.19</id>
					<description>Error handling for internal resources:</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.19.1</id>
							<description>If a RequestDispatcher cannot be found for the
								resource, throw a JspException with the resource path included
								in the message.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.19.2</id>
							<description>Otherwise, if the RequestDispatcher.include() method
								throws an IOException or RuntimeException, throw a JspException
								with the caught exception as the root cause.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:23.19.3</id>
							<description>Otherwise, if the RequestDispatcher.include() method
								throws a ServletException, look for a root cause.</description>
							<location chapter="7" section="7.4" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:23.19.3.1</id>
									<description>If there's a root cause, throw a JspException with
										the root cause message included in the message and the
										original root cause as the JspException root cause</description>
									<location chapter="7" section="7.4" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:23.19.3.2</id>
									<description>Otherwise, throw a JspException with the caught
										exception as the root cause.</description>
									<location chapter="7" section="7.4" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.19.4</id>
							<description>Otherwise, if the resource invoked through
								RequestDispatcher.include() method sets a response status code
								other than 2xx, throw a JspException with the path and status
								code in the message.</description>
							<location chapter="7" section="7.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:23.20</id>
					<description>Error handling for external resources:</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.20.1</id>
							<description>If the URLConnection class throws an IOException or
								a RuntimeException, throw a JspException with the message from
								the original exception included in the message and the original
								exception as the root cause</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.20.2</id>
							<description>For an HttpURLConnection, if the response status
								code is other than 2xx (i.e. 200-299, the range of success codes
								in the HTTP response codes), throw a JspException with the path
								and status code in the message.</description>
							<location chapter="7" section="7.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:23.21</id>
					<description>If the character encoding is not specified, the
						following rules apply:</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.21.1</id>
							<description>If URLConnection.getContentType() has a non-null
								result, the character set is retrieved from
								URLConnection.getContentType() by parsing this method's result
								according to RFC 2045 (section 5.1)</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:23.21.2</id>
							<description>If this method's result does not include a character
								set, or if the character set causes
								InputStreamReader(InputStream in, String charsetName) to throw
								an UnsupportedEncodingException, then use ISO-8859-1</description>
							<location chapter="7" section="7.4" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:24</id>
			<description>The &lt;c:url&gt; action builds a URL with the proper
				rewriting rules applied.</description>
			<location chapter="7" section="7.5" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.1</id>
					<description>The 'value' attribute specifies the URL string to be
						processed.</description>
					<location chapter="7" section="7.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="7" section="7.5" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.2</id>
					<description>The 'var' attribute specified the name of the exported
						scoped variable for the processed URL.  </description>
					<location chapter="7" section="7.5" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="true" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.2.1</id>
							<description>The type of the exported variable must be of type
								String.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:24.2.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="7" section="7.5" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.3</id>
					<description>The 'scope' attribute specifies the scope which to
						export 'var' to.</description>
					<location chapter="7" section="7.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.3.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.3.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.3.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.3.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.3.5</id>
							<description>The default value of the 'scope' attribute is
								'page'.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:24.3.6</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="7" section="7.5" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.4</id>
					<description>If the 'scope' attribute is not specified, and 'var'
						is, 'var' will be exported to the page scope.</description>
					<location chapter="7" section="7.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.5</id>
					<description>Only relative URLs are rewritten.</description>
					<location chapter="7" section="7.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.6</id>
					<description>The rewriting must be performed by calling method
						encodeURL() of the Servlet API.</description>
					<location chapter="7" section="7.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.7</id>
					<description>If 'var' is not specified, the result of the action is
						written to the current JspWriter.</description>
					<location chapter="7" section="7.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.8</id>
					<description>If a body is present within the &lt;c:url&gt; tag, it
						must consist only of &lt;c:param&gt; subtags.</description>
					<location chapter="7" section="7.5" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.9</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="7" section="7.5" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.10</id>
					<description>If an exception is caused by the action itself, it
						must be propagated.</description>
					<location chapter="7" section="7.5" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.11</id>
					<description>The 'context' attribute represents the name of the
						context when specifying a relative URL resource that belongs to a
						foreign context.</description>
					<location chapter="7" section="7.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.11.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="7" section="7.5" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.11.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.11.3</id>
							<description>The URL specified must start with a leading '/'.</description>
							<location chapter="7" section="7.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:24.11.4</id>
							<description>The context name specified must start with a leading
								'/'.</description>
							<location chapter="7" section="7.5" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:24.12</id>
					<description>If the URL contains characters that should be encoded
						(e.g. space), it is the user's responsibility to encode them.</description>
					<location chapter="7" section="7.5" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="true">
			<id>JSTL:SPEC:25</id>
			<description>&lt;c:param&gt; is a nested action of &lt;c:import&gt;
				and &lt;c:url&gt; and &lt;c:redirect&gt;to add request parameters to
				the URL.</description>
			<location chapter="7" section="7.7" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="true"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:25.1</id>
					<description>The 'name' attribute specifies the name of a query
						string parameter.</description>
					<location chapter="7" section="7.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:25.1.1</id>
							<description>The result of the evaluated expression myst be of
								type String</description>
							<location chapter="7" section="7.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:25.2</id>
					<description>The 'value' attribute specifies the value of the query
						string parameter.</description>
					<location chapter="7" section="7.7" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:25.2.1</id>
							<description>The result of the evaluated expression must be of
								type 'String'.</description>
							<location chapter="7" section="7.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:25.2.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="7" section="7.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:25.3</id>
					<description>The 'encode' attribute determines whether the values
						of the 'name' and 'value' attributes should be URL encoded.</description>
					<location chapter="7" section="7.7" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:25.3.1</id>
							<description>If the 'encode' attribute is set to 'false' no URL
								encoding will take place against the values of the 'name' and
								'value' attributes.</description>
							<location chapter="7" section="7.7" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:25.3.2</id>
							<description>If the 'encode' attribute is set to 'true', the
								values of the 'name' and 'value' attributes will be URL encoded.</description>
							<location chapter="7" section="7.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:25.3.3</id>
							<description>The result of the evaluated expression must be of
								type boolean.</description>
							<location chapter="7" section="7.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:25.3.4</id>
							<description>If the evaluated expression is not of type boolean,
								an Exception is thrown.</description>
							<location chapter="7" section="7.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:25.3.5</id>
							<description>If the result of the evaluated value is null, the
								default value, 'true', will be used.</description>
							<location chapter="7" section="7.7" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:25.3.6</id>
							<description>If an invalid value is provided, an Exception is
								thrown.</description>
							<location chapter="7" section="7.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					status="active" required="true" testable="true">
					<id>JSTL:SPEC:25.4</id>
					<description>If the 'encode' attribute is not specified, then the
						values of the 'name' and 'value' attributes will be URL encoded.</description>
					<location chapter="7" section="7.7" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:25.5</id>
					<description>The parameter value can be specified within the body
						of the action.</description>
					<location chapter="7" section="7.7" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:25.6</id>
					<description>The 'name' attribute is required across all syntax
						variations.</description>
					<location chapter="7" section="7.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:25.7</id>
					<description>Query parameter aggregration rules work as specified
						for the include() method of the RequestDispatcher in the Servlet
						specification.</description>
					<location chapter="7" section="7.4" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:25.7.1</id>
							<description>The original parameters are augmented with the new
								parameters, with new values taking precedence over existing
								values.</description>
							<location chapter="7" section="7.4" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:25.7.2</id>
							<description>The scope of the new parameters is the import call;
								the new parameters (and values) will not apply after the import.</description>
							<location chapter="7" section="7.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:25.8</id>
					<description>If 'name' is null or empty, no action is performed. It
						is not an error.</description>
					<location chapter="7" section="7.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:25.9</id>
					<description>If value is null, it is processed as an empty value.</description>
					<location chapter="7" section="7.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:25.10</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="7" section="7.7" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:43</id>
			<description>The &lt;c:redirect&gt; action sets an HTTP redirect to
				the client.</description>
			<location chapter="7" section="7.6" />
			<depends>
				<depend>30</depend>
				<depend>31</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:43.1</id>
					<description>The 'url' attribute specifies the URL to which the
						client is to be redirected.</description>
					<location chapter="7" section="7.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:43.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="7" section="7.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:43.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="7" section="7.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:43.2</id>
					<description>If body content is present within the action, it must
						consist of &lt;c:param&gt; tags.</description>
					<location chapter="7" section="7.6" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:43.3</id>
					<description>The action uses method sendRedirect() of the Servlet
						API, and from doEndTag(), returns SKIP_PAGE</description>
					<location chapter="7" section="7.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:43.4</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="7" section="7.6" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:43.5</id>
					<description>If an exception is caused by the action itself, it
						must be propagated.</description>
					<location chapter="7" section="7.6" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:43.6</id>
					<description>The 'context' attribute specifies the name of the
						context when redirecting to a relative URL resource that belongs
						to a foreign context.</description>
					<location chapter="7" section="7.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:43.6.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="7" section="7.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:43.6.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="7" section="7.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:43.6.3</id>
							<description>The URL specified must start with a leading '/'.</description>
							<location chapter="7" section="7.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:43.6.4</id>
							<description>The context name specified must start with a leading
								'/'.</description>
							<location chapter="7" section="7.6" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="false">
			<id>JSTL:SPEC:106</id>
			<description>An i18n action determines its localization context as
				follows:</description>
			<location chapter="8" section="8.2" />
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:106.1</id>
					<description>If attribute 'bundle' is specified in
						&lt;fmt:message>, the i18n localization context
						associated with it is used for localization.
					</description>
					<location chapter="8" section="8.2" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:106.2</id>
					<description>If &lt;fmt:message> actions that do not contain the
						'bundle' attribute are nested inside a &lt;fmt:bundle> action, the
						i18n localization context of the enclosing &lt;fmt:bundle> action
						is used for localization.</description>
					<location chapter="8" section="8.2" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:106.3</id>
					<description>Otherwise, the i18n localization context whose
						resource bundle is to be used for localization is specified via
						the javax.servlet.jsp.jstl.fmt.localizationContext configuration
						setting.</description>
					<location chapter="8" section="8.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:106.3.1</id>
							<description>If the configuration setting is of type
								LocalizationContext its resource bundle component is used for
								localization.</description>
							<location chapter="8" section="8.2" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:106.3.2</id>
							<description>Otherwise, the configuration setting is of type
								String, and the action establishes its own i18n localization
								context whose resource bundle component is determined according
								to the resource bundle determination algorithm in Section 8.3,
								using the configuration setting as the resource bundle basename.</description>
							<location chapter="8" section="8.2" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="false">
			<id>JSTL:SPEC:105</id>
			<description>The method for setting the preferred locales is
				characterized as either application-based
				or browser-based.
			</description>
			<location chapter="8" section="8.2.1" />
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:105.1</id>
					<description>Application-based locale setting has priority over
						browser-based locale setting.</description>
					<location chapter="8" section="8.2.1" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:105.2</id>
					<description>In application-based mode, the locale is set via the
						javax.servlet.jsp.jstl.fmt.locale configuration setting</description>
					<location chapter="8" section="8.2.1" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:105.3</id>
					<description>In the browser-based locale setting, the client
						determines via its browser settings which locale(s) should be used
						by the web application. The action retrieves the client's locale
						preferences by calling ServletRequest.getLocales() on the incoming
						request</description>
					<location chapter="8" section="8.2.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="true">
			<id>JSTL:SPEC:26</id>
			<description>Given a basename and an ordered set of preferred
				locales, the resource bundle for an I18N localization context is
				determined according to a specified algorithm.</description>
			<location chapter="8" section="8.3" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:26.1</id>
					<description>Resource bundles are searched in the following order:
						- basename + _ + language + _ + country + _ + variant
						- basename + _ + language + _ + country
						- basename + _ + language
						- basename
					</description>
					<location chapter="8" section="8.3.1" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="false">
					<id>JSTL:SPEC:26.2</id>
					<description>The resource bundle determination algorithm is
						comprised of two steps.</description>
					<location chapter="8" section="8.3.2" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:26.2.1</id>
							<description>Find a match within the ordered set of preferred
								locales.</description>
							<location chapter="8" section="8.3.2" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:26.2.1.1</id>
									<description>A resource bundle look up is performed for each
										one of the preferred locales (processed in the order returned
										by ServletRequest.getLocales()) until a match is found.</description>
									<location chapter="8" section="8.3.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:26.2.2</id>
							<description>If the resource lookup fails for the preferred
								locales, a resource bundle lookup is performed for the fallback
								locale specified in the
								javax.servlet.jsp.jstl.fmt.fallbackLocale scoped attribute or
								context configuration parameter.</description>
							<location chapter="8" section="8.3.2" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="false">
							<id>JSTL:SPEC:26.2.3</id>
							<description>If no match is found is found following the
								specified steps, an attempt is made to load the root resource
								bundle with the given basename.</description>
							<location chapter="8" section="8.3.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:26.2.3.1</id>
									<description>If such a resource bundle exists, it is used as
										the resource bundle of an i18n localization context that does
										not have any locale.</description>
									<location chapter="8" section="8.3.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:26.2.3.2</id>
									<description>Otherwise, the established i18n localization
										context contains neither a resource bundle nor a locale. It is
										then up to the i18n action relying on this i18n localization
										context for the localization of its data to take a proper
										corrective action.</description>
									<location chapter="8" section="8.3.2" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:26.2.4</id>
							<description>The alogrithm must give a higher priority to a
								'language' match over an 'exact' match that would have occurred
								further down the list of preferred locales.</description>
							<location chapter="8" section="8.3.2" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:26.2.5</id>
							<description>The algorithm must never consider the default locale
								associated with the Java runtime of the container as this would
								result in non-portable behavior.</description>
							<location chapter="8" section="8.3.2" />
						</assertion>
						<assertion defined-by="technology" impl-spec="true"
							required="true" status="active" testable="false">
							<id>JSTL:SPEC:26.2.6</id>
							<description>The behavior is implementation-specific if the set
								of available resource bundles changes during the execution of
								the page.</description>
							<location chapter="8" section="8.3.2" />
						</assertion>
						<assertion defined-by="technology" impl-spec="true"
							required="false" status="active" testable="false">
							<id>JSTL:SPEC:26.2.7</id>
							<description>Implementations may cache whatever information they
								deem necessary to improve performance of the algorithm presented
								in this section.</description>
							<location chapter="8" section="8.3.2" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="true">
			<id>JSTL:SPEC:27</id>
			<description>Any I18N action that establishes a localization context
				is responsible for setting the response's locale of its page by
				calling ServletResponse.setLocale() with the locale of the
				localization context.</description>
			<location chapter="8" section="8.4" />
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:27.1</id>
					<description>After an action has called
						ServletResponse.setLocale(), it must call
						ServletResponse.getCharacterEncoding() and store the result in the
						'javax.servlet.jsp.jstl.fmt.request.charset' session attribute.</description>
					<location chapter="8" section="8.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="true">
			<id>JSTL:SPEC:28</id>
			<description>&lt;fmt:setLocale> stores the specified locale in the
				javax.servlet.jsp.jstl.fmt.locale configuration variable.</description>
			<location chapter="8" section="8.5" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:28.1</id>
					<description>The 'value' attribute specifies a printable
						representation of a locale, which must contain a two-letter (lower
						case) language code (as defined by ISO-639), and may contain a
						two-letter (upper-case) country code (as defined by ISO-3166).
						Language and country codes must be separated by a hyphen ('-') or
						an underscore ('_').</description>
					<location chapter="8" section="8.5" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:28.1.1</id>
							<description>The result of the evaluated expression must be of
								type String or java.util.Locale.</description>
							<location chapter="8" section="8.5" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:28.1.2</id>
							<description>The locale specified by the attribute 'value' will
								be assigned to the scoped attribute
								'javax.servlet.jsp.jstl.fmt.locale'.</description>
							<location chapter="8" section="8.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:28.1.3</id>
							<description>If the evaluated expression is not of type String or
								java.util.Locale, an Exception is thrown.</description>
							<location chapter="8" section="8.5" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:28.2</id>
					<description>The 'variant' attribute specifies a Vendor- or
						browser-specified variant as defined in the javdocs of
						java.util.Locale.</description>
					<location chapter="8" section="8.5" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:28.2.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="8" section="8.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:28.2.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="8" section="8.5" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:28.3</id>
					<description>The 'scope' attribute specifies the scope of the
						locale.</description>
					<location chapter="8" section="8.5" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:28.3.1</id>
							<description>A value of 'page' will set the attribute
								'javax.servlet.jsp.jstl.fmt.locale' to the page scope.</description>
							<location chapter="8" section="8.5" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:28.3.2</id>
							<description>A value of 'request' will set attribute
								'javax.servlet.jsp.jstl.fmt.locale' to the request scope.</description>
							<location chapter="8" section="8.5" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:28.3.3</id>
							<description>A value of 'session' will set attribute
								'javax.servlet.jsp.jstl.fmt.locale' to the session scope.</description>
							<location chapter="8" section="8.5" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:28.3.4</id>
							<description>A value of 'application' will set attribute
								'javax.servlet.jsp.jstl.fmt.locale' to the page application.</description>
							<location chapter="8" section="8.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:28.3.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="6" section="8.5" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:28.4</id>
					<description>If the 'scope' attribute is not specified, the
						'javax.servlet.jsp.jstl.ftm.locale' attribute will be set to the
						page scope.</description>
					<location chapter="8" section="8.5" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:28.5</id>
					<description>The 'value' attribute is required.</description>
					<location chapter="8" section="8.5" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:28.6</id>
					<description>If the 'value' attribute is null or empty, the runtime
						default locale is used.</description>
					<location chapter="8" section="8.5" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:28.7</id>
					<description>If the 'value' attribute is of type java.util.Locale,
						'variant' is ignored.</description>
					<location chapter="8" section="8.5" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:28.8</id>
					<description>It is invalid for the action to have a body.</description>
					<location chapter="8" section="8.5" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion defined-by="technology" impl-spec="false"
			required="true" status="active" testable="true">
			<id>JSTL:SPEC:29</id>
			<description>The &lt;fmt:bundle> action creates an i18n localization
				context to be used by its body content.</description>
			<location chapter="8" section="8.6" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:29.1</id>
					<description>The 'basename' attribute specifies the resource bundle
						base name.</description>
					<location chapter="8" section="8.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:29.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="8" section="8.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:29.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="8" section="8.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:29.1.3</id>
							<description>The specific resource bundle that is loaded is
								determined according to the algorithm presented in Section
								8.3.2.</description>
							<location chapter="8" section="8.6" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:29.2</id>
					<description>The 'prefix' attribute specifies the prefix to be
						prepended to any message keys that are looked up in the resource
						bundle that was loaded by this action.</description>
					<location chapter="8" section="8.6" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:29.2.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="8" section="8.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:29.2.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="8" section="8.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="removed" testable="true">
					<id>JSTL:SPEC:29.3</id>
					<description>The 'var' attribute specifies the name of the scoped
						variable which stores the resource bundle.</description>
					<location chapter="8" section="8.6" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="removed" testable="true">
							<id>JSTL:SPEC:29.3.1</id>
							<description>The type of the variable must be
								java.util.ResourceBundle.</description>
							<location chapter="8" section="8.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="false">
							<id>JSTL:SPEC:29.3.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="8" section="8.6" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="removed" testable="true">
					<id>JSTL:SPEC:29.4</id>
					<description>The 'scope' attribute defines the scope of the 'var'
						attribute.</description>
					<location chapter="8" section="8.6" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="removed" testable="true">
							<id>JSTL:SPEC:29.4.1</id>
							<description>Setting the 'scope' attribute value to 'page' will
								export 'var' to the page scope.</description>
							<location chapter="8" section="8.6" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="removed" testable="true">
							<id>JSTL:SPEC:29.4.2</id>
							<description>Setting the 'scope' attribute value to 'request'
								will export 'var' to the request scope.</description>
							<location chapter="8" section="8.6" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="removed" testable="true">
							<id>JSTL:SPEC:29.4.3</id>
							<description>Setting the 'scope' attribute value to 'session'
								will export 'var' to the session scope.</description>
							<location chapter="8" section="8.6" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="removed" testable="true">
							<id>JSTL:SPEC:29.4.4</id>
							<description>Setting the 'scope' attribute value to 'application'
								will export 'application' to the page scope.</description>
							<location chapter="8" section="8.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="false">
							<id>JSTL:SPEC:29.4.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="8" section="8.6" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="removed" testable="true">
					<id>JSTL:SPEC:29.5</id>
					<description>If the 'scope' attribute is not specified, the default
						scope of the 'var' attribute must be 'page'.</description>
					<location chapter="8" section="8.6" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:29.6</id>
					<description>The 'basename' attribute is required.</description>
					<location chapter="8" section="8.6" />
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:29.7</id>
					<description>The JSP container processes the body content and then
						writes it to the current JspWriter object (the action ignores the
						body).</description>
					<location chapter="8" section="8.6" />
					<depends>
						<depend>10</depend>
					</depends>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" testable="true" status="removed">
					<id>JSTL:SPEC:29.8</id>
					<description>A &lt;fmt:bundle> action with no body content and with
						no 'var' attribute specified will set or override the
						'javax.servlet.jsp.jstl.fmt.basename' attribute in the scope given
						by the scope attribute, thereby making its base name the (new)
						default for that scope.</description>
					<location chapter="8" section="8.6" />
					<depends>
						<depend>29.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:29.9</id>
					<description>If basename is null or empty, or a resource bundle
						cannot be found, the null resource bundle is stored in the i18n
						localization context</description>
					<location chapter="8" section="8.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:29.10</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="8" section="8.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:29.11</id>
					<description>The scope of the i18n localization context is limited
						to the action's body content.</description>
					<location chapter="8" section="8.6" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:92</id>
			<description>The &lt;fmt:setBundle> action creates an i18n
				localization context and stores it in the scoped variable or the
				javax.servlet.jsp.jstl.fmt.localizationContext configuration
				variable.</description>
			<location chapter="8" section="8.7" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:92.1</id>
					<description>The 'basename' attribute specifies the resource bundle
						base name.</description>
					<location chapter="8" section="8.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="8" section="8.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="8" section="8.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.1.3</id>
							<description>The basename attribute is required.</description>
							<location chapter="8" section="8.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:92.2</id>
					<description>The specific resource bundle that is loaded is
						determined according to the algorithm presented in Section 8.3.2. </description>
					<location chapter="8" section="8.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:92.3</id>
					<description>If basename is null or empty, or a resource bundle
						cannot be found, the null resource bundle is stored in the i18n
						localization context.</description>
					<location chapter="8" section="8.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:92.4</id>
					<description>The 'var' attribute specifies the exported scoped
						variable which stores the i18n localization context of type
						javax.servlet.jsp.jstl.fmt.LocalizationContext.</description>
					<location chapter="8" section="8.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.4.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="8" section="8.7" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:92.5</id>
					<description>If var is not specified, the i18n localization context
						is stored in the javax.servlet.jsp.jstl.fmt.localizationContext
						configuration variable, thereby making it the new default i18n
						localization context in the given scope.</description>
					<location chapter="8" section="8.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:92.6</id>
					<description>The 'scope' attribute determines the scope of the var
						attribute or the localization context configuration variable.</description>
					<location chapter="8" section="8.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.6.1</id>
							<description>Setting the 'scope' attribute value to 'page' will
								export 'var' to the page scope.</description>
							<location chapter="8" section="8.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.6.2</id>
							<description>Setting the 'scope' attribute value to 'request''
								will export 'var' to the request scope.</description>
							<location chapter="8" section="8.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.6.3</id>
							<description>Setting the 'scope' attribute value to 'session'
								will export 'var' to the session scope.</description>
							<location chapter="8" section="8.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.6.4</id>
							<description>Setting the 'scope' attribute value to 'application'
								will export 'var' to the application scope.</description>
							<location chapter="8" section="8.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.6.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="8" section="8.7" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:92.6.6</id>
							<description>The default value of the 'scope' attribute is
								'page.'</description>
							<location chapter="8" section="8.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:92.7</id>
					<description>The body content must be empty.</description>
					<location chapter="8" section="8.7" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:44</id>
			<description>The &lt;fmt:message> action looks up a localized message
				in a resource bundle.</description>
			<location chapter="8" section="8.8" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.1</id>
					<description>The 'key' attribute specifies the message key to be
						looked up.</description>
					<location chapter="8" section="8.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="8" section="8.8" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.2</id>
					<description>The 'bundle' attribute specifies the resource bundle
						in which to look up the message key.</description>
					<location chapter="8" section="8.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.2.1</id>
							<description>The result of the evaluated expression must be of
								type ResourceBundle</description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.2.2</id>
							<description>If the evaluated expression is not of type
								ResourceBundle, an Exception is thrown.</description>
							<location chapter="8" section="8.8" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.3</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute which stores the localized message.</description>
					<location chapter="8" section="8.8" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:44.3.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="8" section="8.8" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.4</id>
					<description>The 'scope' attribute specifies the scope of 'var'.</description>
					<location chapter="8" section="8.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.4.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.4.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.4.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.4.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:44.4.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="8" section="8.8" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:44.4.6</id>
							<description>The default value of the 'scope' attribute is
								'page'.</description>
							<location chapter="8" section="8.8" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.5</id>
					<description>The action must accept a message key within the tag's
						body content</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.6</id>
					<description>If this action is nested inside a &lt;fmt:bundle>
						action, and the parent &lt;fmt:bundle> action contains a prefix
						attribute, the specified prefix is prepended to the message key.</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:44.7</id>
					<description>If the given key is not found in the resource bundle,
						or a resource bundle with the given base name does not exist, two
						actions must occur:</description>
					<location chapter="8" section="8.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="false">
							<id>JSTL:SPEC:44.7.1</id>
							<description>A message is logged to the servlet context.</description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:44.7.2</id>
							<description>An error message of the form "???&lt;key>???" (where
								&lt;key> is the name of the undefined message key) is output to
								the current JspWriter object.</description>
							<location chapter="8" section="8.8" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.8</id>
					<description>If the message corresponding to the given key is
						compound (contains one or more variables), and the action's body
						contains one or more &lt;fmt:param> subtags (one for each
						parameter), then parametric replacement of the parameters will
						take place in the order that the &lt;fmt:param> subtags were
						provided.</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.9</id>
					<description>If the message is compound and no &lt;fmt:param>
						subtags are specified, it is left unmodified.</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.10</id>
					<description>If 'scope' is specified, 'var' must also be specified.</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.11</id>
					<description>If 'key' is null or empty, the message is processed as
						if undefined; i.e, an error message of the form "??????" is
						written.</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.12</id>
					<description>If 'scope' is not specified, and 'var' is, then 'var'
						will be exported to the page scope.</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.13</id>
					<description>If 'key' is null or empty, the message is processed as
						if undefined; that is, an error message of the form "??????" is
						produced.</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.14</id>
					<description>If the i18n localization context that this action
						determines does not have any resource bundle, an error message of
						the form “???&lt;key>???” is produced</description>
					<location chapter="8" section="8.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:44.15</id>
					<description>In the presence of one or more &lt;fmt:param> subtags,
						the message is supplied to the java.text.MessageFormat method
						applyPattern(), and the values of the &lt;fmt:param> tags are
						collected in an Object[] and supplied to the
						java.text.MessageFormat method format().</description>
					<location chapter="8" section="8.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.15.1</id>
							<description>The locale of the java.text.MessageFormat is set to
								the appropriate localization context locale before
								applyPattern() is called. </description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.15.2</id>
							<description>If the localization context does not have any
								locale, the locale of the java.text.MessageFormat is set to the
								locale returned by the formatting locale lookup algorithm of
								Section 9.3, except that the available formatting locales are
								given as the intersection of the number- and date- formatting
								locales. </description>
							<location chapter="8" section="8.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:44.15.3</id>
							<description>If this algorithm does not yield any locale, the
								locale of the java.text.MessageFormat is set to the runtime's
								default locale.</description>
							<location chapter="8" section="8.8" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:75</id>
			<description>The &lt;fmt:param> action supplies a single parameter
				for parametric replacement to a containing &lt;fmt:message> action.</description>
			<location chapter="8" section="8.9" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:75.1</id>
					<description>The 'value' attribute specifies the argument used for
						parametric replacement.</description>
					<location chapter="8" section="8.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:75.1.1</id>
							<description>The result of the evaluated expression must be of
								type 'Object'.</description>
							<location chapter="8" section="8.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:75.1.2</id>
							<description>If the evaluated expression is not of type Object,
								an Exception is thrown.</description>
							<location chapter="8" section="8.9" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:75.2</id>
					<description>The value of the parameter can be specified as body
						content of the action.</description>
					<location chapter="8" section="8.9" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:75.3</id>
					<description>The &lt;fmt:param> action must be nested in a
						&lt;fmt:message> action.</description>
					<location chapter="8" section="8.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:75.4</id>
					<description>Parametric replacement must take place in order of the
						&lt;fmt:param> tags.</description>
					<location chapter="8" section="8.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:75.5</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="8" section="8.9" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:45</id>
			<description>The &lt;fmt:requestEncoding> action sets the request's
				character encoding.</description>
			<location chapter="8" section="8.10" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:45.1</id>
					<description>The 'value' attribute specifies the name of the
						character encoding to be applied when decoding request parameters.</description>
					<location chapter="8" section="8.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:45.1.1</id>
							<description>The result of the evaluated expression must be of
								type String</description>
							<location chapter="8" section="8.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:45.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="8" section="8.10" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:45.2</id>
					<description>It is invalid for this action to have a body.</description>
					<location chapter="8" section="8.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:45.3</id>
					<description>This action calls the setCharacterEncoding() method on
						the servlet request with the character encoding name specified in
						the 'value' attribute.</description>
					<location chapter="8" section="8.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:45.4</id>
					<description>The following events will occur if the 'value'
						attribute is not set:</description>
					<location chapter="8" section="8.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:45.4.1</id>
							<description>The action will check if there is a charset defined
								in the request Content-Type header. If found, the charset
								defined will be used.</description>
							<location chapter="8" section="8.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:45.4.2</id>
							<description>If no Content-Type header is found, the action will
								use the encoding defined by the
								'javax.servlet.jsp.jstl.fmt.request.charset' scoped attribute.</description>
							<location chapter="8" section="8.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:45.4.3</id>
							<description>If the 'javax.servlet.jsp.jstl.fmt.request.charset'
								scoped attribute is not found, the default character encoding,
								ISO-8859-1, is used.</description>
							<location chapter="8" section="8.10" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:108</id>
			<description>The javax.servlet.jsp.jstl.fmt.locale configuration
				setting disables browser-based locales.</description>
			<location chapter="8" section="8.11.1" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:46</id>
			<description>The specific locale that a formatting action uses to
				localize its data is determined as
				follws:
			</description>
			<location chapter="9" section="9.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:46.1</id>
					<description>If a formatting action is nested inside a
						&lt;fmt:bundle> action, the locale of the enclosing resource
						bundle is used as the formatting locale.</description>
					<location chapter="9" section="9.2" />
					<depends>
						<depend>29</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:46.2</id>
					<description>Otherwise, if a default localization context for I18N
						actions is specified via the
						'javax.servlet.jsp.jstl.fmt.localizationContext' configuration
						setting, and its value is of type LocalizationContext, then its
						locale is used as the formatting locale.</description>
					<location chapter="9" section="9.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:46.3</id>
					<description>Otherwise, if a default localization context for I18N
						actions is specified via the
						'javax.servlet.jsp.jstl.fmt.localizationContext' configuration
						setting, and its value is of type String, the formatting action
						establishes its own i18n localization context and uses its locale
						as the formatting locale</description>
					<location chapter="9" section="9.2" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:46.4</id>
					<description>If the locale cannot be determined according to the
						three preceding steps, the formatting action itself establishes a
						localization context according to an alogrithm based on the
						preferred locales.</description>
					<location chapter="9" section="9.2" />
					<depends>
						<depend>FIXME</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:47</id>
			<description>The locales available for actions &lt;fmt:formatNumber>
				and &lt;fmt:parseNumber> are determined by a call to
				java.text.NumberFormat.getAvailableLocales().</description>
			<keywords>
				<keyword />
			</keywords>
			<location chapter="9" section="9.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:48</id>
			<description>The locales available for actions &lt;fmt:formatDate>
				and &lt;fmt:parseDate> are determined by a call to
				java.text.DateFormat.getAvailableLocales().</description>
			<location chapter="9" section="9.3" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:49</id>
			<description>A match of the specified locale against an available
				locale is therefore attempted in the following order:</description>
			<location chapter="9" section="9.3.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:49.1</id>
					<description>language, country, and variant are the same.</description>
					<location chapter="9" section="9.3.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:49.2</id>
					<description>language and country are the same.</description>
					<location chapter="9" section="9.3.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:49.3</id>
					<description>language is the same and the available local does not
						have a country.</description>
					<location chapter="9" section="9.3.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:50</id>
			<description>The locale lookup algorithm is comprised of two steps
				and will stop processing as soon as a locale has been selected for
				the localization context.</description>
			<location chapter="9" section="9.3.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:A local lookup is performed for each one of the
						preferred locales until a match is found. The first match found
						becomes the selected locale for the localization context.</id>
					<description>50.1</description>
					<location chapter="9" section="9.3.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:50.1.1</id>
							<description>The locales will be processed by the alogrithm in
								the order they were returned by a call to
								ServletRequest.getLocales().</description>
							<location chapter="9" section="9.3.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:50.2</id>
					<description>A locale lookup is performed for the fallback locale
						specified in the 'javax.servlet.jsp.jstl.fmt.fallbackLocale'
						scoped attribute or context configuration parameter. If a match
						exists, it becomes the selected locale for the localization
						context.</description>
					<location chapter="9" section="9.3.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:50.3</id>
					<description>If no match is found, the default JVM locale is used.</description>
					<location chapter="9" section="9.3.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:52</id>
			<description>The 'javax.servlet.jsp.jstl.fmt.timeZone' scoped
				attribute or context configuration parameter specifies the time zone
				in which to format or parse time information.</description>
			<location chapter="9" section="9.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:53</id>
			<description>If the javax.servlet.jsp.jstl.fmt.timeZone scoped
				attribute or context configuration parameter does not exist, the JSP
				container's time zone is used.</description>
			<location chapter="9" section="9.4" />
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:54</id>
			<description>The &lt;fmt:timeZone> action specifies the time zone in
				which time information is to be formatted or parsed.</description>
			<location chapter="9" section="9.5" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:54.1</id>
					<description>The 'value' attribute specifies the time zone.</description>
					<location chapter="9" section="9.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:54.1.1</id>
							<description>The result of the evaluated expression must be of
								type String or java.util.TimeZone.</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:54.1.2</id>
							<description>A string value is interpreted as a time zone ID.</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:54.1.3</id>
							<description>The time zone can be specified as one of the time
								zone IDs supported by the Java platform.</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:54.1.4</id>
							<description>The time zone can be specified as a custom format
								(such as "GMT-8:00").</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:54.1.5</id>
							<description>If the evaluated expression is not of type String or
								type java.util.Timezone, an Exception is thrown.</description>
							<location chapter="9" section="9.5" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:54.2</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute.</description>
					<location chapter="9" section="9.5" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:54.2.1</id>
							<description>The type of the exported variable must be of type
								java.util.TimeZone.</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="false">
							<id>JSTL:SPEC:54.2.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="9" section="9.5" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:54.3</id>
					<description>The 'scope' attribute sets the scope for attributes.</description>
					<location chapter="9" section="9.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:54.3.1</id>
							<description>A value of 'page' sets the attribute to the page
								scope.</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:54.3.2</id>
							<description>A value of 'request' sets the attribute to the
								request scope.</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:54.3.3</id>
							<description>A value of 'session' sets the attribute to the
								session scope.</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:54.3.4</id>
							<description>A value of 'application' sets the attribute to the
								application scope.</description>
							<location chapter="9" section="9.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="false">
							<id>JSTL:SPEC:54.3.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="9" section="9.5" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:54.4</id>
					<description>If neither 'var' nor 'scope' is specified, then the
						attribute 'javax.servlet.jsp.jstl.fmt.timeZone' is set to the
						value specified and exported to the page scope.</description>
					<location chapter="9" section="9.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:54.5</id>
					<description>If 'scope'' is specified, and 'var' is not, the
						attribute 'javax.servlet.jsp.jstl.fmt.timeZone' is set to the
						value specified by 'value' to the specified scope.</description>
					<location chapter="9" section="9.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:54.6</id>
					<description>If 'var' is specified, and 'scope' is not, then the
						attribute specified by var will be exported to the page scope.</description>
					<location chapter="9" section="9.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:54.7</id>
					<description>If 'value' is null or empty, the GMT timezone is used.</description>
					<location chapter="9" section="9.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:54.8</id>
					<description>The JSP container processes the body content and then
						writes it to the current JspWriter. The action ignores the body
						content.</description>
					<location chapter="9" section="9.5" />
					<depends>
						<depend>10</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:54.9</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="9" section="9.5" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:93</id>
			<description>&lt;fmt:setTimeZone> stores the specified time zone in a
				scoped variable or the time zone configuration variable.</description>
			<location chapter="9" section="9.6" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:93.1</id>
					<description>The 'value' attribute specifies the time zone.</description>
					<location chapter="9" section="9.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.1.1</id>
							<description>The 'value' attribute is required.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.1.2</id>
							<description>The result of the evaluated expression must be of
								type String or java.util.TimeZone.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.1.3</id>
							<description>A string value is interpreted as a time zone ID.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.1.4</id>
							<description>The time zone can be specified as one of the time
								zone IDs supported by the Java platform.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.1.5</id>
							<description>The time zone can be specified as a custom format
								(such as "GMT-8:00").</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.1.6</id>
							<description>If the evaluated expression is not of type String or
								type java.util.Timezone, an Exception is thrown.</description>
							<location chapter="9" section="9.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="false">
					<id>JSTL:SPEC:93.2</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute.</description>
					<location chapter="9" section="9.6" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.2.1</id>
							<description>The type of the exported variable must be of type
								java.util.TimeZone.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:93.2.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="9" section="9.6" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:93.3</id>
					<description>The 'scope' attribute sets the scope for attributes.</description>
					<location chapter="9" section="9.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.3.1</id>
							<description>A value of 'page' sets the attribute to the page
								scope.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.3.2</id>
							<description>A value of 'request' sets the attribute to the
								request scope.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.3.3</id>
							<description>A value of 'session' sets the attribute to the
								session scope.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.3.4</id>
							<description>A value of 'application' sets the attribute to the
								application scope.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:93.3.5</id>
							<description>The default value of the attribute is 'page.'</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:93.3.6</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="9" section="9.6" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:93.4</id>
					<description>If var is not specified, the time zone is stored in
						the javax.servlet.jsp.jstl.fmt.timeZone configuration variable,
						thereby making it the new default time zone in the given scope.</description>
					<location chapter="9" section="9.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:93.5</id>
					<description>The body content must be empty.</description>
					<location chapter="9" section="9.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:93.6</id>
					<description>If the time zone is given as a string, it is parsed
						using java.util.TimeZone.getTimeZone().</description>
					<location chapter="9" section="9.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:93.7</id>
					<description>If 'value' is null or empty, the GMT timezone is used.</description>
					<location chapter="9" section="9.6" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:55</id>
			<description>The &lt;fmt:formatNumber> action formats a numeric value
				in a local-sensitive or customized manner as a number, currency, or
				percentage.</description>
			<location chapter="9" section="9.7" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.1</id>
					<description>The 'value' attribute specifies the numeric value to
						be formatted.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.1.1</id>
							<description>The result of the evaluated expression must be of
								type String or Number.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.1.2</id>
							<description>If the evaluated expression is not of type String or
								Number, an Exception is thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.2</id>
					<description>The 'type' attribute specifies how the value should be
						formatted.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:55.2.1</id>
							<description>A value of 'number' will format the value as a
								number.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.2.2</id>
							<description>A value of 'currency' will format the value as a
								currency.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.2.3</id>
							<description>A value of 'percentage' will format the value as a
								percentage.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.2.4</id>
							<description>If the value evaluates to null, the default value,
								'number', will be used.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.2.5</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.3</id>
					<description>The 'pattern' attribute specifies a custom formatting
						pattern (applied only when formatting numbers).</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.3.1</id>
							<description>The result of the evaluated expression must be of
								type String</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.3.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.4</id>
					<description>The 'currencyCode' attribute specifies the ISO 4217
						current code (applied only when formatting currencies).</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.4.1</id>
							<description>If 'currencyCode' is specified, and type is not
								'currency', then 'currencyCode' is ignored.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.4.2</id>
							<description>The result of the evaluated expression my be of type
								String.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.4.3</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.5</id>
					<description>the 'currencySymbol' attribute specifies the current
						symbol (applied only when formatting currencies).</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.5.1</id>
							<description>If 'currencySymbol' is specified, and 'type' is not
								'currency', then 'currencySymbol' is ignored.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.5.2</id>
							<description>The result of the evaluated expression must be of
								type String</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.5.3</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.6</id>
					<description>the 'groupingUsed' attribute specifies whether the
						formatted output will contain any grouping separators.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.6.1</id>
							<description>The result of the evaluated expression must be of
								type boolean.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.6.2</id>
							<description>If the evaluated expression is not of type boolean,
								an Exception is thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.6.3</id>
							<description>If the value evaluates to null, the default value,
								'true', will be used.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.6.4</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.7</id>
					<description>The 'maxIntegerDigits' attribute specifies the maximum
						number of digits in the integer portion of the formatted output.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.7.1</id>
							<description>The result of the evaluated expression must be of
								type int.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.7.2</id>
							<description>If the evaluated expression is not of type int, an
								Exception is thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.8</id>
					<description>The 'minIntegerDigits' attribute specifies the minimum
						number of digits in the integer portion of the formatted output.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.8.1</id>
							<description>The result of the evaluated expression must be of
								type int.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.8.2</id>
							<description>If the evaluated expression is not of type int, an
								Exception is thrown.</description>
							<location chapter="9" section="9.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.9</id>
					<description>The 'maxFractionDigits' attribute specifies the
						maximum number of digits in the fractional portion of the
						formatted output.</description>
					<location chapter="9" section="9.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.9.1</id>
							<description>The result of the evaluated expression must be of
								type int.</description>
							<location chapter="9" section="9.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.9.2</id>
							<description>If the evaluated expression is not of type int, an
								Exception is thrown.</description>
							<location chapter="9" section="9.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.10</id>
					<description>The 'minFractionDigits' attribute specifies the
						minimum number of digits in the fractional portion of the
						formatted output.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="false" impl-spec="false"
							defined-by="technology" status="active" testable="true">
							<id>JSTL:SPEC:55.11</id>
							<description>The result of the evaluated expression must be of
								type int.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.11.1</id>
							<description>If the evaluated expression is not of type int, an
								Exception is thrown.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.12</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute which stores the formatted value.</description>
					<location chapter="9" section="9.7" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.12.1</id>
							<description>The type of the exported attribute must be String.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:55.12.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.13</id>
					<description>The 'scope' attribute specifies the scope of 'var'.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.13.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.13.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.13.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.13.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:55.13.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="9" section="9.7" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.14</id>
					<description>If the 'type' attribute is not specified, 'number'
						will be used.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.15</id>
					<description>If 'var' is specified, but 'scope' is not, 'var' will
						be exported to the page scope.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:55.16</id>
					<description>If 'scope' is specified, 'var' must also be specified.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:55.17</id>
					<description>The value of the 'currencyCode' attribute must be a
						valid ISO 4217 currency code.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.18</id>
					<description>If 'value' is null or empty, nothing is written to the
						current JspWriter object and the scoped variable is removed if it
						is specified.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.19</id>
					<description>The value to be formatted can be specified as body
						content of the action.</description>
					<location chapter="9" section="9.7" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.20</id>
					<description>If the numeric value to be formatted is given as a
						string literal, it is parsed into an instance of java.lang.Number.
						If the string does not contain any decimal point, it is parsed
						using java.lang.Long.valueOf(), or java.lang.Double.valueOf()
						otherwise.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.21</id>
					<description>A 'javax.servlet.jsp.JspException' is thrown if the
						number to be formatted is given as a string and cannot be parsed
						as a number.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.22</id>
					<description>The formatted result is written to the current
						JspWritter object if 'var' is not specified.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.23</id>
					<description>The presence of the 'pattern' attribute will override
						the predefined formatting pattern of the page's locale.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.23.1</id>
							<description>The given pattern string must follow the pattern
								syntax specified in the documentation for the
								java.text.DecimalFormat class.</description>
							<location chapter="9" section="9.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.24</id>
					<description>The presence of the 'currencySymbol' attribute will
						override the predefined currency symbol of the page's locale.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.25</id>
					<description>The presence of the 'currencyCode' attribute will
						override the predefined currency code of the page's locale.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.26</id>
					<description>If the container's runtime is J2SE 1.4 or greater:</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:55.26.1</id>
							<description>If both 'currencyCode' and 'currencySymbol' are
								present, 'currencyCode' takes precedence over 'currencySymbol'.</description>
							<location chapter="9" section="9.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:55:27</id>
					<description>If the container's runtime is less than J2SE 1.4:</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.27.1</id>
							<description>If both 'currencyCode' and 'currencySymbol' are
								present, 'currencySymbol' takes precedence over 'currencyCode'.</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.27.2</id>
							<description>If only 'currencyCode' is given, it is used as a
								currency symbol.</description>
							<location chapter="9" section="9.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.28</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="9" section="9.7" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.29</id>
					<description>If a formatting pattern is not specified via the
						pattern attribute, it is looked up in a locale-dependent fashion
						determined via a combination of the formatting locale, which is
						determined according to Section 9.2, and the type attribute.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.29.1</id>
							<description>Depending on the value of the type attribute, the
								given numeric value is formatted as a number, currency, or
								percentage</description>
							<location chapter="9" section="9.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.29.2</id>
							<description>The locale's default formatting pattern for numbers,
								currencies, or percentages is determined by calling the
								java.text.NumberFormat method getNumberInstance,
								getCurrencyInstance, or getPercentInstance, respectively, with
								the formatting locale.</description>
							<location chapter="9" section="9.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.30</id>
					<description>Symbols in a formatting pattern are determined by the
						locale.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.31</id>
					<description>If the numeric value is given as a string literal, it
						is first parsed into a java.lang.Number.</description>
					<location chapter="9" section="9.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:55.31.1</id>
							<description>If the numeric value is given as a string literal,
								it is first parsed into a java.lang.Number.</description>
							<location chapter="9" section="9.7" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:55.31.1.1</id>
									<description>If the string does not contain any decimal point,
										it is parsed using java.lang.Long.valueOf().</description>
									<location chapter="9" section="9.7" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:55.31.1.2</id>
									<description>Otherwise, it is parsed using
										java.lang.Double.valueOf().</description>
									<location chapter="9" section="9.7" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.32</id>
					<description>The formatted result is output to the current
						JspWriter object, unless the var attribute is given, in which case
						it is stored in the named scoped variable.</description>
					<location chapter="9" section="9.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:55.33</id>
					<description>The pattern attribute takes precedence over type.</description>
					<location chapter="9" section="9.7" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:56</id>
			<description>The &lt;fmt:parseNumber> action parses the string
				representation of numbers, currencies, and percentages that were
				formatted in a locale-sensitive or customized.</description>
			<location chapter="9" section="9.8" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.1</id>
					<description>The 'value' attribute specifies the string to be
						parsed.</description>
					<location chapter="9" section="9.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.1.1</id>
							<description>The result of the evaluated expression must be of
								type String</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:56.2</id>
					<description>The 'type' attribute specifies how 'value' should be
						parsed.</description>
					<location chapter="9" section="9.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.2.1</id>
							<description>A value of 'number' will format value as a number.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.2.2</id>
							<description>A value of 'currency' will format value as a
								currency.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.2.3</id>
							<description>A value of 'percentage' will format the value as a
								percentage.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.2.4</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.2.5</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.2.6</id>
							<description>If the value evaluates to null, the default value,
								'number', will be used.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.2.7</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.3</id>
					<description>The 'pattern' attribute specifies a custom formatting
						pattern which determines how the string in the 'value' attribute
						is to be parsed.</description>
					<location chapter="9" section="9.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.3.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.3.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.4</id>
					<description>The 'parseLocale' attribute specifies the locale whose
						default formatting pattern (for numbers, currencies, or
						percentages) is to be used during the parse operation, or to which
						the pattern specified via the 'pattern' attribute (if present) is
						applied.</description>
					<location chapter="9" section="9.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.4.1</id>
							<description>The result of the evaluated expression must be of
								type String or java.util.Locale.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.4.2</id>
							<description>If the evaluated expression is not of type String of
								java.util.Locale, an Exception is thrown.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.5</id>
					<description>The 'integerOnly' attribute specifies whether just the
						integer portion of the given value should be parsed.</description>
					<location chapter="9" section="9.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.5.1</id>
							<description>The result of the evaluated expression must be of
								type boolean.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.5.2</id>
							<description>If the evaluated expression is not of type boolean,
								an Exception is thrown.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.5.3</id>
							<description>If the value evaluates to null, the default value,
								'true', will be used.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.6</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute which stores the parsed result.</description>
					<location chapter="9" section="9.8" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.6.1</id>
							<description>The type of the exported attribute is of type
								java.lang.Number.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:56.6.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.7</id>
					<description>the 'scope' attribute specifies the scope of 'var'.</description>
					<location chapter="9" section="9.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.7.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.7.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.7.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.7.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:56.7.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="9" section="9.8" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:56.8</id>
					<description>If 'scope' is specified, 'var' must also be specified.</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.9</id>
					<description>If 'value' is null or empty, the scoped variable
						defined by 'var' and 'scope' is removed.</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.10</id>
					<description>If 'var' is specified and 'scope' is not, 'var' is
						exported to the page scope.</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.11</id>
					<description>The value to be parsed by the action can be passed to
						the action as body content.</description>
					<location chapter="9" section="9.8" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.12</id>
					<description>If 'var' is not specified, the result is written to
						the current JspWriter object using java.lang.Number.toString().</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.13</id>
					<description>If the 'parseLocale' attribute is null or empty, it is
						treated as if it were missing.</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.14</id>
					<description>If an exception occurs during the parsing of the
						value, it must be caught and rethrown as a JspException. </description>
					<location chapter="9" section="9.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.14.1</id>
							<description>The message of the rethrown JspException must
								include the value that was to be parsed, and the caught
								exception must be provided as the root cause.</description>
							<location chapter="9" section="9.8" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.15</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="9" section="9.8" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.16</id>
					<description>If the numeric string to be parsed is null or empty,
						the scoped variable defined by attributes var and scope is
						removed.</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.17</id>
					<description>If this action fails to determine a formatting locale,
						it must throw a JspException whose message must include the value
						that was to be parsed.</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.18</id>
					<description>If the attribute pattern is null or empty, it is
						ignored.</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="deprecated" testable="false">
					<id>JSTL:SPEC:56.19</id>
					<description>The parse pattern may be specified via the pattern
						attribute, or is looked up in a locale-dependent fashion.</description>
					<location chapter="9" section="9.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.19.1</id>
							<description>A pattern string specified via the pattern attribute
								must follow the pattern syntax specified by
								java.text.DecimalFormat.</description>
							<location chapter="9" section="9.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:56.19.2</id>
							<description>If looked up in a locale-dependent fashion, the
								parse pattern is determined via a combination of the type and
								parseLocale attributes. </description>
							<location chapter="9" section="9.8" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:56.19.2.1</id>
									<description>The parse pattern for numbers, currencies, or
										percentages is determined by calling the
										java.text.NumberFormat method getNumberInstance,
										getCurrencyInstance, or getPercentInstance, respectively, with
										the locale specified via parseLocale.</description>
									<location chapter="9" section="9.8" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:56.19.2.2</id>
									<description>If parseLocale is missing, the formatting locale,
										which is obtained according to Section 9.2, is used as the
										parse locale.</description>
									<location chapter="9" section="9.8" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.20</id>
					<description>The pattern attribute takes precedence over type.</description>
					<location chapter="9" section="9.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:56.21</id>
					<description>The formatting symbols in the pattern are given by the
						parse locale.</description>
					<location chapter="9" section="9.8" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:57</id>
			<description>The &lt;fmt:formatDate> action allows the formatting of
				dates and times in a locale-sensitive or customized manner.</description>
			<location chapter="9" section="9.9" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.1</id>
					<description>The 'value' attribute specifies the date and/or time
						to be formatted.</description>
					<location chapter="9" section="9.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.1.1</id>
							<description>The type of the evaluated expression must be of
								java.util.Date.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.1.2</id>
							<description>If the evaluated expression is not of type
								java.util.Date, an Exception is thrown.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.1.3</id>
							<description>The 'value' attribute is required.</description>
							<location chapter="9" section="9.9" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="platform"
					status="active" testable="true">
					<id>JSTL:SPEC:57.2</id>
					<description>The 'type' attribute specifies which date/time
						components to be formatted.</description>
					<location chapter="9" section="9.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.2.1</id>
							<description>A value of 'time' will result in only the time
								component being formatted.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.2.2</id>
							<description>A value of 'date' will result in only the date
								component being formatted.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.2.3</id>
							<description>A value of 'both' will result in both the data and
								time components being formatted.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.2.4</id>
							<description>If the value evaluates to null, the default value,
								'date', will be used.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.2.5</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.3</id>
					<description>The 'dateStyle' attribute specifies the formatting
						style for dates.</description>
					<location chapter="9" section="9.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.1</id>
							<description>The 'dateStyle' attribute will only be applied if
								'type' is not set, or type is set to 'date' or 'both'</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.2</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.3</id>
							<description>A value of 'default' will format the date using the
								default style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.4</id>
							<description>A value of 'short' will format the date using the
								short style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.5</id>
							<description>A value of 'medium' will format the date using the
								medium style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.6</id>
							<description>A value of 'long' will format the date using the
								long style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.7</id>
							<description>A value of 'full' will format the date using the
								full style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.8</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.9</id>
							<description>If the value evaluates to null, the default value,
								'default', will be used.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.10</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.4</id>
					<description>The 'timeStyle' attribute specifies the formatting
						style for times.</description>
					<location chapter="9" section="9.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.1</id>
							<description>The 'timeStyle' attribute will only be applied if
								'type' is set to 'time' or 'both'</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.2</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.3</id>
							<description>A value of 'default' will format the time using the
								default style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.4</id>
							<description>A value of 'short' will format the time using the
								short style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.5</id>
							<description>A value of 'medium' will format the time using the
								medium style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.6</id>
							<description>A value of 'long' will format the time using the
								long style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.7</id>
							<description>A value of 'full' will format the time using the
								full style.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.8</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.9</id>
							<description>If the value evaluates to null, the default value,
								'default', will be used.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.4.10</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.5</id>
					<description>The 'pattern' attribute specifies a custom formatting
						stype for dates and times.</description>
					<location chapter="9" section="9.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.5.1</id>
							<description>The result of the evaluated string must be of type
								String.</description>
							<location chapter="9" section="9.9" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.6</id>
					<description>The 'timeZone' attribute specifies the time zone in
						which to represent the formatted time.</description>
					<location chapter="9" section="9.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.6.1</id>
							<description>The result of the evaluated expression must be of
								type String or java.util.TimeZone.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.6.2</id>
							<description>If the evaluated expression is not of type String or
								java.util.TimeZone, an Exception is thrown.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.7</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped variable which stores the formatted result.</description>
					<location chapter="9" section="9.9" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.7.1</id>
							<description>The type of the exported attribute must be of type
								String.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:57.7.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.8</id>
					<description>The 'scope' attribute specifies the scope of 'var'.</description>
					<location chapter="9" section="9.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.8.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.8.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.8.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.8.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.8.5</id>
							<description>The default value of the 'scope' attribute is
								'page'.</description>
							<location chapter="9" section="9.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:57.8.6</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="9" section="9.9" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:57.9</id>
					<description>If 'scope' is specified, 'var' must also be specified.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.10</id>
					<description>If 'value' is null or empty, nothing is written to the
						current JspWriter object and the scoped variable is removed if it
						is specified.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.11</id>
					<description>If 'timeZone' is null or empty, it is handled as if it
						was missing.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.12</id>
					<description>If 'var' is not specified, the formatted result is
						written to the current JspWriter object.</description>
					<location chapter="9" section="9.9" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:57.13</id>
					<description>The value to be parsed can be passed as body content
						to the action.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:57.14</id>
					<description>If value is missing and the action has no body, the
						current date and time are used.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.15</id>
					<description>If the 'timeZone' attribute is not specified and the
						action is nested inside a &lt;fmt:timeZone> tag, the time zone is
						taken from the enclosing &lt;fmt:timeZone> tag.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.16</id>
					<description>If the 'timeZone' attribute is not specified and the
						action is not nested inside a &lt;fmt:timeZone> tag, the time zone
						as defined by the 'javax.servlet.jsp.jstl.fmt.timeZone' scope
						attribute or context configuration parameter is used.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:57.17</id>
					<description>If the 'timeZone' attribute is not specified, and the
						action is not nested inside a &lt;fmt:timeZone> tag, and the
						'javax.servlet.jsp.jstl.fmt.timeZone' attribute is not available,
						the time zone of the container is used.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.18</id>
					<description>If the 'pattern' attribute is specified, its value
						must use the pattern syntax specified in the documentation for the
						Java class java.text.SimpleDateFormat.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.19</id>
					<description>If the 'type' attribute is not specified, the action
						will format the value as if 'date' was specified.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.20</id>
					<description>If the 'dateStyle' attribute is not specified, the
						action will assume 'default'</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.21</id>
					<description>If the 'timeStyle' attribute is not specified, the
						action will assume 'default'.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:57.22</id>
					<description>If the input to the 'value' attribute is a string
						literal, it is parsed into an instance of java.util.Date according
						to the default formatting style for dates of the English ("en")
						locale; i.e. it is parsed in a fashion equivalent to using a
						&lt;fmt:parseDate> action with type equal to 'date' and dateStyle
						equal to 'default'.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.23</id>
					<description>A javax.servlet.jsp.JspException is thrown if the date
						to be formatted is given as a string and connect be parsed as a
						date.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:57.24</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="9" section="9.9" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:57.25</id>
					<description>The body content must be empty.</description>
					<location chapter="9" section="9.9" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:58</id>
			<description>The &lt;fmt:parseDate> action parses the string
				representation of dates and times that were formatted in a
				locale-sensitive or customized manner.</description>
			<location chapter="9" section="9.10" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.1</id>
					<description>The 'value' attribute specifies the date to be parsed.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.2</id>
					<description>The 'type' attribute specifies what the date string
						specified by value contains.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.2.1</id>
							<description>A value of 'time' specifies that only the time
								portion should be present.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.2.2</id>
							<description>A value of 'date' specifies that only the date
								portion should be present.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.2.3</id>
							<description>A value of 'both' specifies that both the data and
								time portion should be present.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.2.4</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.2.5</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.2.6</id>
							<description>If the value evaluates to null, the default value,
								'both', will be used.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.2.7</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.3</id>
					<description>The 'dateStyle' attribute specifies the formatting
						style for dates which determins how the date component of the date
						string is parsed.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.1</id>
							<description>A value of 'default' will cause the date to be
								parsed in the default style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.2</id>
							<description>A value of 'short' will cause the date to be parsed
								in the short style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.3</id>
							<description>A value of 'medium' will cause the date to be parsed
								in the medium style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.4</id>
							<description>A value of 'long' will cause the date to be parsed
								using the long style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.5</id>
							<description>A value of 'full' will cause the date to be parsed
								using the full style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.6</id>
							<description>The result of the evaluated expression must be of
								type String</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.7</id>
							<description>The 'dateStyle' attribute will be ignored if 'type'
								is set to 'time'.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.8</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.9</id>
							<description>If the value evaluates to null, the default value,
								'default', will be used.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.3.10</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.4</id>
					<description>The 'timeStyle' attribute specifies the formatting
						styles for times which determins how the time component in the
						data string is parsed.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.4.1</id>
							<description>A value of 'default' will cause the time to be
								parsed using the default style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.4.2</id>
							<description>A value of 'short' will cause the time to be parsed
								using the short style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.4.3</id>
							<description>A value of 'medium' will cause the time to be parsed
								using the medium style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.4.4</id>
							<description>A value of 'long' will cause the time to be parsed
								using the long style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.4.5</id>
							<description>A value of 'full' will cause the time to be parsed
								using the full style.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.4.6</id>
							<description>The result of the evaluated expression must be of
								type String</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.4.7</id>
							<description>The 'timeStyle' attribute will be ignored if 'type'
								is equal to 'date'.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.4.8</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.5</id>
					<description>The 'pattern' attribute specifies a custom formatting
						pattern which determines how the date string is to be parsed.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.5.1</id>
							<description>The result of the evaluated expression must be of
								type String</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.5.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.6</id>
					<description>The 'timeZone' attribute specifies the time zone in
						which to interpret any time information in the date string.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.6.1</id>
							<description>The result of the evaluated expression must be of
								type String or java.util.TimeZone.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.6.2</id>
							<description>If the evaluated expression is not of type String or
								java.util.TimeZone, an Exception is thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.7</id>
					<description>The 'parseLocale' attribute specifies the locale whose
						predefined formatting styles for dates and times are to be used
						during the parse operation, or to which the pattern specified via
						the 'pattern' attribute (if present) is applied.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.7.1</id>
							<description>The result of the evaluated expression must be of
								type String or type java.util.Locale.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.7.2</id>
							<description>If the evaluated expression is not of type String or
								type java.util.Locale, an Exception is thrown.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.8</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute in which the parsed result is stored.</description>
					<location chapter="9" section="9.10" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.8.1</id>
							<description>The type of the exported attribute must be of type
								java.util.Date.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:58.8.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.9</id>
					<description>The 'scope' attribute specifies the scope for 'var'.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.9.1</id>
							<description>A value of 'page' will export var to the page scope.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.9.2</id>
							<description>A value of 'request' will export var to the request
								scope.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.9.3</id>
							<description>A value of 'session' will export var to the session
								scope.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.9.4</id>
							<description>A value of 'application' will export var to the
								application scope.</description>
							<location chapter="9" section="9.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:58.9.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="9" section="9.10" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:58.10</id>
					<description>If 'scope' is specified, 'var' must also be specified.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.11</id>
					<description>If 'value' is null or empty, the scoped variable
						defined by 'var' is removed.  </description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.12</id>
					<description>The date string to be parsed can be specified via the
						tag's body content.</description>
					<location chapter="9" section="9.10" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.13</id>
					<description>If the 'var' attribute is not specified, the result of
						the parsed date string is written to the current JspWriter object.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.14</id>
					<description>If the 'var' attribute is specified, and 'scope' is
						not, 'var' will be exported to the page scope.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.15</id>
					<description>If the 'type' attribute is not specified, the action
						will use date as the default.</description>
					<location chapter="9" section="9.20" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.16</id>
					<description>If the 'dateStyle' attribute is not specified, the
						action will assume the date to be parsed is in the default style.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.17</id>
					<description>if the 'timeStyle' attribute is not specified, the
						action will assume the time to be parsed in in the default style.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.18</id>
					<description>If the 'parseLocale' attribute is not specified, the
						page's formatting locale is used.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.19</id>
					<description>The value of the 'timeZone' attribute will be used if
						the given time information does not specify a time zone.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.20</id>
					<description>If the 'timeZone' attribute is missing, and the action
						is nested inside a &lt;fmt:timeZone> tag, the time zone is taken
						from the enclosing &lt;fmt:timeZone> tag.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.21</id>
					<description>If the 'timeZone' attribute is missing, and the action
						is not nested inside a &lt;fmt:timeZone> tag, the value of the
						'javax.servlet.jsp.jstl.fmt.timeZone' scoped attribute or context
						configuration parameter is used.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.22</id>
					<description>If the 'timeZone' attribute is missing, and the action
						is not nested inside a &lt;fmt:timeZone> tag, or the
						'javax.servlet.jsp.jstl.fmt.timeZone' scoped attribute or context
						parameter is not set, the container's time zone is used.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.23</id>
					<description>A 'javax.servlet.jsp.JspException' is thrown if the
						given date string cannot be parsed as a date.</description>
					<location chapter="9" section="9.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:58.23.1</id>
							<description>The message of the rethrown JspException must
								include the value that was to be parsed, and the caught
								exception must be provided as the root cause.</description>
							<location chapter="9" section="9.10" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.24</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="9" section="9.10" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.25</id>
					<description>If 'timeZone' is null or empty, it is treated as if it
						was missing.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.26</id>
					<description>If 'parseLocale' is null or empty, it is treated as if
						it was missing.</description>
					<location chapter="9" section="9.10" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:58.27</id>
					<description>If this action fails to determine a formatting locale,
						it must throw a JspException whose message must include the value
						that was to be parsed.</description>
					<location chapter="9" section="9.10" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:59</id>
			<description>The &lt;sql:query> action queries a database.</description>
			<location chapter="10" section="10.3" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.1</id>
					<description>The 'sql' attribute specifies the SQL query statement.</description>
					<location chapter="10" section="10.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.2</id>
					<description>The 'dataSource' attribute specifies the DataSource
						associated with the database to query.</description>
					<location chapter="10" section="10.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:59.2.1</id>
							<description>The result of the evaluated expression can be of
								type String.</description>
							<location chapter="10" section="10.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:59.2.1.1</id>
									<description>A String value passed to the 'dataSource'
										attribute represents a relative path to a JNDI resource or the
										parameters for the DriverManager class.</description>
									<location chapter="10" section="10.3" />
									<comment>This is not testable as Web containers are only
										required to implement JNDI accessible datasources if in a J2EE
										environment.</comment>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.2.2</id>
							<description>The result of the evaluated expression can be of
								type javax.sql.DataSource.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.2.4</id>
							<description>If 'dataSource' is null, a JspException is thrown.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.2.3</id>
							<description>If the evaluated expression is not of type String or
								javax.sql.DataSource, an Exception is thrown.</description>
							<location chapter="10" section="10.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.3</id>
					<description>The 'maxRows' attribute specifies the maximum number
						of rows to be included in the query result.</description>
					<location chapter="10" section="10.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.3.1</id>
							<description>If 'maxRows' is not specified, no limit on the
								maximum number of rows is enforced.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.3.2</id>
							<description>The result of the evaluated expression must be of
								type int.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.3.3</id>
							<description>If the evaluated expression is not of type int, an
								Exception is thrown.</description>
							<location chapter="10" section="10.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.3.4</id>
							<description>The maximum number of rows to be included in the
								query result may also be specified by the configuration setting
								javax.servlet.jsp.jstl.sql.maxRows.</description>
							<location chapter="10" section="10.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:59.3.4.1</id>
									<description>Attribute maxRows has priority over the
										configuration setting.</description>
									<location chapter="10" section="10.3" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.3.5</id>
							<description>A value of -1for maxRows or the configuration
								setting means that no limit is enforced on the maximum number of
								rows.</description>
							<location chapter="10" section="10.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.4</id>
					<description>The 'startRow' attribute causes the 'Result' object
						returned to only include rows starting at the specified index.</description>
					<location chapter="10" section="10.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.4.1</id>
							<description>The index is '0' based, meaning the first row is at
								index 0.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.4.2</id>
							<description>The result of the evaluated expression must be of
								type int.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.4.3</id>
							<description>If the evaluated expression is not of type int, an
								Exception is thrown.</description>
							<location chapter="10" section="10.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.5</id>
					<description>The 'var' attibute specifies the name of the exported
						scoped variable for the query result.</description>
					<location chapter="10" section="10.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.5.1</id>
							<description>The type of the exported attribute must be
								'javax.servlet.jsp.jstl.sql.Result'.</description>
							<location chapter="10" section="10.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.6</id>
					<description>The 'scope' attribute specifies the scope in which to
						export 'var'.</description>
					<location chapter="10" section="10.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.6.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.6.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.6.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.6.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:59.6.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="10" section="10.3" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:59.7</id>
					<description>If 'dataSource' is specified, this action must not be
						nested inside a &lt;sql:transaction> action.</description>
					<location chapter="10" section="10.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.8</id>
					<description>If the query produces no results, and empty 'Result'
						object (of size zero) is returned.</description>
					<location chapter="10" section="10.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.9</id>
					<description>The action must support the query to be executed as
						body content.</description>
					<location chapter="10" section="10.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.10</id>
					<description>If the query contains parameter markers, the values
						for the markers must be supplied as nested &lt;sql:param> tags.</description>
					<location chapter="10" section="10.3" />
					<depends>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:59.11</id>
					<description>If the query to be executed is specified as body
						content, and contains parameter markers, the nested &lt;sql:param>
						actions must be placed after the query.</description>
					<location chapter="10" section="10.3" />
					<depends>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.12</id>
					<description>A connection is obtained by the action using the
						following algorithm:</description>
					<location chapter="10" section="10.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.12.1</id>
							<description>If the 'dataSource' attribute is given, the
								Connection object is obtained through getConnection() on the
								specified DataSource and release before the end of the tag.</description>
							<location chapter="10" section="10.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:59.12.1.1</id>
									<description>If 'dataSource' resolves to a String, it is
										interpreted as a JNDI path to a DataSource resource.</description>
									<location chapter="10" section="10.3" />
									<comment>Not testable as access to JNDI resources is only
										required for containers in a J2EE environment.</comment>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.12.2</id>
							<description>If the 'dataSource' attribute is missing, and this
								action is nested inside a &lt;sql:transaction> tag, the
								Connection object is obtained from the parent
								&lt;sql:transaction> tag, which manages it and is responsible
								for releasing it.</description>
							<location chapter="10" section="10.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:59.12.3</id>
							<description>If the 'dataSource' attribute is missing, and this
								action is not nested inside a &lt;sql:transaction> tag, the
								DataSource from which to obtain the Connection is retrieved from
								the 'javax.servlet.jsp.jstl.sql.dataSource scoped variable.</description>
							<location chapter="10" section="10.3" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:59.12.3.1</id>
									<description>The Connection object is obtained through
										getConnection() on the specified DataSource and released
										before the tag completes.</description>
									<location chapter="10" section="10.3" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:59.13</id>
					<description>The 'var' attribute is required across all syntax
						variations.</description>
					<location chapter="10" section="10.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.14</id>
					<description>If 'scope' is not specified, 'var' will be exported to
						the page scope.</description>
					<location chapter="10" section="10.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="deprecated" testable="true">
					<id>JSTL:SPEC:59.15</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="10" section="10.3" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="deprecated" testable="true">
					<id>JSTL:SPEC:59.16</id>
					<description>Any exception caused by the action itself, must be
						propagated.</description>
					<location chapter="10" section="10.3" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:59.17</id>
					<description>If an exception occurs during the execution of this
						action, it must be caught and rethrown as a JspException. The
						message of the rethrown JspException must include the SQL
						statement, and the caught exception must be provided as the root
						cause.</description>
					<location chapter="10" section="10.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:60</id>
			<description>The &lt;sql:update> action executes a SQL INSERT,
				UPDATE, DELETE statement, as well as SQL statements that return
				nothing, such as SQL DDL statements.</description>
			<location chapter="10" section="10.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.1</id>
					<description>The 'sql' attribute specifies the SQL udpate
						statement.</description>
					<location chapter="10" section="10.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.4" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.2</id>
					<description>The 'dataSource' attribute specifies the DataSource
						associated with the database to query.</description>
					<location chapter="10" section="10.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:60.2.1</id>
							<description>The result of the evaluated expression can be of
								type String.</description>
							<location chapter="10" section="10.4" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:60.2.1.1</id>
									<description>A String value passed to the 'dataSource'
										attribute represents a relative path to a JNDI resource or the
										parameters for the DriverManager class.</description>
									<location chapter="10" section="10.4" />
									<comment>This is not testable as Web containers are only
										required to implement JNDI accessible datasources if in a J2EE
										environment.</comment>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.2.2</id>
							<description>The result of the evaluated expression can be of
								type javax.sql.DataSource.</description>
							<location chapter="10" section="10.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.2.3</id>
							<description>If the evaluated expression is not of type String or
								javax.sql.DataSource, an Exception is thrown.</description>
							<location chapter="10" section="10.4" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.2.4</id>
							<description>If 'dataSource' is null, a JspException is thrown.</description>
							<location chapter="10" section="10.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.3</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute.</description>
					<location chapter="10" section="10.4" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.3.1</id>
							<description>The type of the scoped attribute is
								'java.lang.Integer'.</description>
							<location chapter="10" section="10.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:60.3.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="10" section="10.4" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.4</id>
					<description>The 'scope' attribute specifies the scope in which to
						export 'var'.</description>
					<location chapter="10" section="10.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.4.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="10" section="10.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.4.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="10" section="10.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.4.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="10" section="10.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.4.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="10" section="10.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:60.4.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="10" section="10.4" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:60.5</id>
					<description>If 'dataSource' is specified, this action must not be
						nested inside a &lt;sql:transaction> action.</description>
					<location chapter="10" section="10.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.6</id>
					<description>The action must support the update to be executed as
						body content.</description>
					<location chapter="10" section="10.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.7</id>
					<description>If the update contains parameter markers, the values
						for the markers must be supplied as nested &lt;sql:param> tags.</description>
					<location chapter="10" section="10.4" />
					<depends>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:60.8</id>
					<description>If the update to be executed is specified as body
						content, and contains parameter markers, the nested &lt;sql:param>
						actions must be placed after the query.</description>
					<location chapter="10" section="10.4" />
					<depends>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.9</id>
					<description>A connection is obtained by the action using the
						following algorithm:</description>
					<location chapter="10" section="10.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.9.1</id>
							<description>If the 'dataSource' attribute is given, the
								Connection object is obtained through getConnection() on the
								specified DataSource and release before the end of the tag.</description>
							<location chapter="10" section="10.4" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:60.9.1.1</id>
									<description>If 'dataSource' resolves to a String, it is
										interpreted as a JNDI path to a DataSource resource.</description>
									<location chapter="10" section="10.4" />
									<comment>Not testable as access to JNDI resources is only
										required for containers in a J2EE environment.</comment>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.9.2</id>
							<description>If the 'dataSource' attribute is missing, and this
								action is nested inside a &lt;sql:transaction> tag, the
								Connection object is obtained from the parent
								&lt;sql:transaction> tag, which manages it and is responsible
								for releasing it.</description>
							<location chapter="10" section="10.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.9.3</id>
							<description>If the 'dataSource' attribute is missing, and this
								action is not nested inside a &lt;sql:transaction> tag, the
								DataSource from which to obtain the Connection is retrieved from
								the 'javax.servlet.jsp.jstl.sql.dataSource scoped variable.</description>
							<location chapter="10" section="10.4" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:60.9.3.1</id>
									<description>The Connection object is obtained through
										getConnection() on the specified DataSource and released
										before the tag completes.</description>
									<location chapter="10" section="10.4" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.10</id>
					<description>The result of the &lt;sql:udpate> action is returned
						as the number of rows that were affected by the update.</description>
					<location chapter="10" section="10.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.11</id>
					<description>If 'scope' is not specified, but 'var' is, then 'var'
						will be exported to the page scope.</description>
					<location chapter="10" section="10.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.11</id>
					<description>If the 'var' attribute is not specified, the result of
						the action is written to the current JspWriter object.</description>
					<location chapter="10" section="10.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.12</id>
					<description>If 'scope' is specified, 'var' must also be specified.</description>
					<location chapter="10" section="10.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="deprecated" testable="true">
					<id>JSTL:SPEC:60.13</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="10" section="10.4" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="deprecated" testable="true">
					<id>JSTL:SPEC:60.14</id>
					<description>Any exception caused during the processing of the
						action, must be propagated.</description>
					<location chapter="10" section="10.4" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:60.15</id>
					<description>If an exception occurs during the execution of this
						action, it must be caught and rethrown as a JspException. The
						message of the rethrown JspException must include the SQL
						statement, and the caught exception must be provided as the root
						cause.</description>
					<location chapter="10" section="10.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:61</id>
			<description>The &lt;sql:transaction> action establishes a
				transaction context for its &lt;sql:query> and &lt;sql:update>
				subtags.</description>
			<location chapter="10" section="10.5" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:61.1</id>
					<description>The 'dataSource' attribute specifies the DataSource
						associated with the database to query.</description>
					<location chapter="10" section="10.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:61.1.1</id>
							<description>The result of the evaluated expression can be of
								type String.</description>
							<location chapter="10" section="10.5" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:60.1.1.1</id>
									<description>A String value passed to the 'dataSource'
										attribute represents a relative path to a JNDI resource or the
										parameters for the DriverManager class.</description>
									<location chapter="10" section="10.5" />
									<comment>This is not testable as Web containers are only
										required to implement JNDI accessible datasources if in a J2EE
										environment.</comment>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.1.2</id>
							<description>The result of the evaluated expression can be of
								type javax.sql.DataSource.</description>
							<location chapter="10" section="10.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:60.1.3</id>
							<description>If the evaluated expression is not of type String or
								javax.sql.DataSource, an Exception is thrown.</description>
							<location chapter="10" section="10.5" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:61.2</id>
					<description>The 'isolation' attribute specifies the transaciton
						isolation level.</description>
					<location chapter="10" section="10.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.2.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.2.2</id>
							<description>A value of 'read_committed' sets the transaction
								isolation level to TRANSACTION_READ_COMMITTED.</description>
							<location chapter="10" section="10.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.2.3</id>
							<description>A value of 'read_uncommitted' sets the transaction
								isolation level to TRANSACTION_READ_UNCOMMITTED.</description>
							<location chapter="10" section="10.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.2.4</id>
							<description>A value of 'repeatable_read' sets the transaction
								isolation level to TRANSACTION_REPEATABLE_READ.</description>
							<location chapter="10" section="10.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.2.5</id>
							<description>A value of 'serializable' sets the transaction
								isolation level to TRANSACTION_SERIALIZABLE.</description>
							<location chapter="10" section="10.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.2.6</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.5" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.2.7</id>
							<description>If the isolation level is not specified, it is the
								isolation level the DataSource has been configured with.</description>
							<location chapter="10" section="10.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.3.9</id>
							<description>If the value evaluates to null, the default value,
								'default', will be used.</description>
							<location chapter="9" section="9.6" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:57.2.10</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="9" section="9.6" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:61.3</id>
					<description>Any nested &lt;sql:query> and &lt;sql:update> actions
						must not specify a 'dataSource' attribute.</description>
					<location chapter="10" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:61.4</id>
					<description>If 'dataSource' is null, a JspException is thrown.</description>
					<location chapter="10" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:61.5</id>
					<description>The tag handler of the &lt;sql:transaction> action
						must perform the following steps in it's lifecycle methods:</description>
					<location chapter="10" section="10.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:61.5.1</id>
							<description>doStartTag():</description>
							<location chapter="10" section="10.5" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:61.5.1.1</id>
									<description>Determine the transaction isolation level of the
										DBMS (using the Connection method getTransactionIsolation()).</description>
									<location chapter="10" section="10.5" />
									<sub-assertions>
										<assertion required="true" impl-spec="false"
											defined-by="technology" status="active" testable="false">
											<id>JSTL:SPEC:61.5.1.1.1</id>
											<description>If transactions are not supported, an exception
												is raised causing the transaction to fail.</description>
											<location chapter="10" section="10.5" />
										</assertion>
										<assertion required="true" impl-spec="false"
											defined-by="technology" status="active" testable="true">
											<id>JSTL:SPEC:61.5.1.1.2</id>
											<description>For any other transaction isolation level, the
												auto-commit mode is disabled by calling setAutoCommit(false)
												on the connection.</description>
											<location chapter="10" section="10.5" />
										</assertion>
									</sub-assertions>
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:61.5.1.2</id>
									<description>If the 'isolation' attribute is specified, the
										current transaction isolation level is save and set to the
										specified level (using the Connection method
										setTransactionIsolation()).</description>
									<location chapter="10" section="10.5" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.5.2</id>
							<description>doEndTag():</description>
							<location chapter="10" section="10.5" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:61.5.2.1</id>
									<description>Calls the cConnection method commit().</description>
									<location chapter="10" section="10.5" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.5.3</id>
							<description>doCatch():</description>
							<location chapter="10" section="10.5" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:61.5.3.1</id>
									<description>Calls the Connection method rollback().</description>
									<location chapter="10" section="10.5" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.5.4</id>
							<description>doFinally():</description>
							<location chapter="10" section="10.5" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:61.5.4.1</id>
									<description>If a transaction isolation level has been saved,
										it is restored using the Connection meghod
										setTransactionIsolation().</description>
									<location chapter="10" section="10.5" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:61.5.4.2</id>
									<description>Enables auto-commit mode by calling
										setAutoCommit(true) on the Connection.</description>
									<location chapter="10" section="10.5" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:61.5.4.3</id>
									<description>Closes the connection.</description>
									<location chapter="10" section="10.5" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:61.6</id>
					<description>Any exception occurring during the execution of this
						action must be caught and rethrown after the transaction has been
						rolled back.</description>
					<location chapter="10" section="10.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:61.7</id>
					<description>A connection is obtained by the action using the
						following algorithm:</description>
					<location chapter="10" section="10.5" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.7.1</id>
							<description>If the 'dataSource' attribute is given, the
								Connection object is obtained through getConnection() on the
								specified DataSource and release before the end of the tag.</description>
							<location chapter="10" section="10.5" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:61.7.1.1</id>
									<description>If 'dataSource' resolves to a String, it is
										interpreted as a JNDI path to a DataSource resource.</description>
									<location chapter="10" section="10.5" />
									<comment>Not testable as access to JNDI resources is only
										required for containers in a J2EE environment.</comment>
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:61.7.2</id>
							<description>If the 'dataSource' attribute is missing, the
								DataSource from which to obtain the Connection is retrieved from
								the 'javax.servlet.jsp.jstl.sql.dataSource scoped variable.</description>
							<location chapter="10" section="10.5" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:61.7.2.1</id>
									<description>The Connection object is obtained through
										getConnection() on the specified DataSource and released
										before the tag completes.</description>
									<location chapter="10" section="10.5" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:61.8</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="10" section="10.5" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:61.9</id>
					<description>If an exception is caused by the action, it must be
						propagated.</description>
					<location chapter="10" section="10.5" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:62</id>
			<description>&lt;sql:setDataSource> exports a data source either as a
				scoped variable or as the data source configuration variable
				(javax.servlet.jsp.jstl.sql.dataSource).</description>
			<location chapter="10" section="10.6" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:62.1</id>
					<description>The 'dataSource' attribute specifies the data source.</description>
					<location chapter="10" section="10.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.1.1</id>
							<description>The 'dataSource' attribute must evaluate to type
								String or javax.sql.DataSource</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.1.2</id>
							<description>If 'dataSource' does not evaluate to one of the
								allowed types, an exception is thrown.</description>
							<location chapter="10" section="10.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.1.3</id>
							<description>If 'dataSource' is specified as a string, it can
								either be a relative path to a JNDI resource, or a JDBC
								parameters string as defined in Section 10.1.1</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.1.4</id>
							<description>If 'dataSource' is null, a JspException is thrown</description>
							<location chapter="10" section="10.6" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:62.2</id>
					<description>The 'driver' attribute specifies the driver class
						name.</description>
					<location chapter="10" section="10.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.2.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.2.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:62.3</id>
					<description>The 'url' attribute specifies the JDBC URL associated
						with the database.</description>
					<location chapter="10" section="10.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.3.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.3.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:62.4</id>
					<description>The 'user' attribute specifies the user on whose
						behalf the connection to the database is being made.</description>
					<location chapter="10" section="10.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.4.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.4.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:62.5</id>
					<description>The 'password' attribute specifies the password of the
						user on whose behalf the connection to the database is being made.</description>
					<location chapter="10" section="10.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.5.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.5.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:62.6</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped variable for the data source specified. </description>
					<location chapter="10" section="10.6" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.6.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.6.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.6.3</id>
							<description>The type of the exported attribute must be of type
								javax.sql.DataSource or String.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:62.6.4</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="10" section="10.6" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.6.5</id>
							<description>If the 'var' attribute is not specified, the data
								source is exported in the javax.servlet.jsp.jstl.sql.dataSource
								configuration variable.</description>
							<location chapter="10" section="10.6" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:62.7</id>
					<description>The 'scope' attribute specifies the scope in which to
						export 'var'/</description>
					<location chapter="10" section="10.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.7.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.7.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.7.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.7.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="10" section="10.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:62.7.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="10" section="10.6" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:62.8</id>
					<description>If 'scope' is not specified, then 'var' will be
						exported to the page scope.</description>
					<location chapter="10" section="10.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:62.9</id>
					<description>The action must have no body.</description>
					<location chapter="10" section="10.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:62.8</id>
					<description>If the 'driver' attribute is not set, then the context
						configuration parameter 'javax.servlet.jsp.jstl.sql.driver' will
						be used.</description>
					<location chapter="10" section="10.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:62.9</id>
					<description>If the 'url' attribute is not set, then the context
						configuration parameter 'javax.servlet.jsp.jstl.sql.url' will be
						used.</description>
					<location chapter="10" section="10.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:62.10</id>
					<description>If the 'user' attribute is not set, then the context
						configuration parameter 'javax.servlet.jsp.jstl.sql.user' will be
						used.</description>
					<location chapter="10" section="10.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:62.11</id>
					<description>The user's password may only be specified by the
						context configuration parameter
						'javax.servlet.jsp.jstl.sql.password'.</description>
					<location chapter="10" section="10.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:62.12</id>
					<description>If an exception is caused by the action, it must be
						propagated.</description>
					<location chapter="10" section="10.6" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:62.13</id>
					<description>The data source must be specified either via the
						dataSource attribute (as a DataSource object, JNDI relative path,
						or JDBC parameters string), or via the four JDBC parameters
						attributes.</description>
					<location chapter="10" section="10.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:62.13.1</id>
							<description>Either the dataSource or the url attribute must be
								present.</description>
							<location chapter="10" section="10.6" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:63</id>
			<description>The &lt;sql:param> action is used as a subtag of
				SQLExecutionTag actions such as &lt;sql:query> and &lt;sql:update>
				to set the values of parameter markers ('?') in a SQL statement.</description>
			<location chapter="10" section="10.7" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:63.1</id>
					<description>The 'value' attribute specifies the parameter value.</description>
					<location chapter="10" section="10.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:63.1.1</id>
							<description>The result of the evaluated expression must be of
								type Object.</description>
							<location chapter="10" section="10.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:63.1.2</id>
							<description>If the evaluated expression is not of type Object,
								an Exception is thrown.</description>
							<location chapter="10" section="10.7" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:63.2</id>
					<description>The &lt;sql:param> tags must be nested inside an
						action whose tag handler is an instance of SQLExecutionTag.</description>
					<location chapter="10" section="10.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:63.4</id>
					<description>If 'value' is null, the parameter is set to SQL NULL.</description>
					<location chapter="10" section="10.7" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:63.5</id>
					<description>The value of the &lt;sql:param> action can be set as
						body content of the action.</description>
					<location chapter="10" section="10.7" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:63.6</id>
					<description>The &lt;sql:param> action substitutes the given
						parameter value for a parameter marker(“?”) in the SQL statement
						of its enclosing SQLExecutionTag action.</description>
					<location chapter="10" section="10.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:63.6.1</id>
							<description>The specified parameters are substituted in the
								order in which they are specified.</description>
							<location chapter="10" section="10.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:63.7</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="10" section="10.7" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:94</id>
			<description>&lt;sql:dateParam> Sets the values of parameter markers
				(“?”) in a SQL statement for values of type java.util.Date. Subtag
				of SQLExecutionTag actions, such as &lt;sql:query> and
				&lt;sql:update>.</description>
			<location chapter="10" section="10.8" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:94.1</id>
					<description>The 'value' attribute represents a parameter value for
						DATE, TIME, or TIMESTAMP column in a database table.</description>
					<location chapter="10" section="10.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.1.1</id>
							<description>The 'value' attribute is required.</description>
							<location chapter="10" section="10.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.1.2</id>
							<description>The result of the evaluated expression must be of
								type java.util.Date.</description>
							<location chapter="10" section="10.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.1.3</id>
							<description>If the evaluated expression is not of type
								java.util.Date, an Exception is thrown.</description>
							<location chapter="10" section="10.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.1.4</id>
							<description>If value is null, the parameter is set to the SQL
								value NULL</description>
							<location chapter="10" section="10.8" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:94.2</id>
					<description>The 'type' attribute represents one of "date", "time"
						or "timestamp".</description>
					<location chapter="10" section="10.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.2.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="10" section="10.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.2.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="10" section="10.8" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:94.3</id>
					<description>The body content must be empty.</description>
					<location chapter="10" section="10.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:94.4</id>
					<description>The &lt;sql:dateParam> tags must be nested inside an
						action whose tag handler is an instance of SQLExecutionTag.</description>
					<location chapter="10" section="10.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:94.5</id>
					<description>&lt;sql:dateParam> converts the provided
						java.util.Date instance to one of java.sql.Date, java.sql.Time or
						java.sql.Timestamp as defined by the type attribute as follows:</description>
					<location chapter="10" section="10.8" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.5.1</id>
							<description>If the java.util.Date object provided by the value
								attribute is an instance of java.sql.Time, java.sql.Date, or
								java.sql.Timestamp, and the type attribute matches this object's
								type, then it is passed as is to the database.</description>
							<location chapter="10" section="10.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.5.2</id>
							<description>Otherwise, the object is converted to the
								appropriate type by calling that type's constructor with a
								parameter of date.getTime(), where date is the value of the
								value attribute.</description>
							<location chapter="10" section="10.8" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:94.6</id>
							<description>The &lt;sql:dateParam> action substitutes the given
								parameter value for a parameter marker(“?”) in the SQL statement
								of its enclosing SQLExecutionTag action.</description>
							<location chapter="10" section="10.8" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:94.6.1</id>
									<description>Parameters are substituted in the order in which
										they are specified.</description>
									<location chapter="10" section="10.8" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="false">
									<id>JSTL:SPEC:94.6.2</id>
									<description>The &lt;sql:dateParam> action locates its nearest
										ancestor that is an instance of SQLExecutionTag and calls its
										addSQLParameter() method, supplying it with the given
										parameter value.</description>
									<location chapter="10" section="10.8" />
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:64</id>
			<description>The XPath engine must support the following scopes:</description>
			<location chapter="11" section="11.1.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.1</id>
					<description>$foo -> pageContext.findAttribute("foo")</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.2</id>
					<description>$pageScope:foo -> pageContext.getAttribute("foo",
						PageContext.PAGE_SCOPE)</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.3</id>
					<description>$requestScope:foo -> pageContext.getAttribute("foo",
						PageContext.REQUEST_SCOPE)</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.4</id>
					<description>$sessionScope:foo -> pageContext.getAttribute("foo",
						PageContext.SESSION_SCOPE)</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.5</id>
					<description>$applicationScope:foo ->
						pageContext.getAttribute("foo", PageContext.APPLICATION_SCOPE)</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.6</id>
					<description>$param:foo -> request.getParameter("foo")</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.7</id>
					<description>$header:foo -> request.getHeader("foo")</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.8</id>
					<description>$cookie:foo -> maps the cookies value for name foo.</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:64.9</id>
					<description>$initParam:foo -> application.getInitParameter("foo")</description>
					<location chapter="11" section="11.1.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:65</id>
			<description>The following Java to XPath type mappings must be
				supported:</description>
			<location chapter="11" section="11.1.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:65.1</id>
					<description>Java: java.lang.Boolean -> XPath: boolean</description>
					<location chapter="11" section="11.1.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:65.2</id>
					<description>Java: java.lang.Number -> XPath: number</description>
					<location chapter="11" section="11.1.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:65.3</id>
					<description>Java: java.lang.String -> XPath: string</description>
					<location chapter="11" section="11.1.3" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:65.4</id>
					<description>Object exported by &lt;x:parse> -> node-set</description>
					<location chapter="11" section="11.1.3" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:65.5</id>
					<description>XPath variable references that address objects of
						other types result in implementation specified behavior.</description>
					<location chapter="11" section="11.1.3" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:66</id>
			<description>The following XPath to Java type mappings must be
				supported:</description>
			<location chapter="11" section="11.1.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:66.1</id>
					<description>XPath: boolean -> Java: java.lang.Boolean</description>
					<location chapter="11" section="11.1.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:66.2</id>
					<description>XPath: number (a floaing point number) -> Java:
						java.lang.Number</description>
					<location chapter="11" section="11.1.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:66.3</id>
					<description>XPath: string (a sequence of UCS characters) -> Java:
						java.lang.String</description>
					<location chapter="11" section="11.1.4" />
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:66.4</id>
					<description>XPath node-set -> Java: Type usable by JSTL
						XML-manipulation tags in the same JSTL Implementation. The
						specified Java type representing the node-sets may thus vary by
						implementation.</description>
					<location chapter="11" section="11.1.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:67</id>
			<description>The &lt;x:parse> action parses an XML document.</description>
			<location chapter="11" section="11.2" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:67.1</id>
					<description>The 'systemIDl' attribute specifies the URL of the
						source XML document to be parsed.</description>
					<location chapter="11" section="11.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:67.1.1</id>
							<description>The result of the evaluated expression must be of
								type String</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="removed" testable="true">
							<id>JSTL:SPEC:67.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="11" section="11.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="deprecated" testable="true">
					<id>JSTL:SPEC:67.2</id>
					<description>The 'xml' attribute specifies the source XML document
						to be parsed.</description>
					<location chapter="11" section="11.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="deprecated" testable="true">
							<id>JSTL:SPEC:67.2.1</id>
							<description>The result of the evaluated expression must be of
								type String or Reader</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="deprecated" testable="true">
							<id>JSTL:SPEC:67.2.2</id>
							<description>If the evaluated expression is not of type String or
								Reader, an Exception is thrown.</description>
							<location chapter="11" section="11.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.19</id>
					<description>The 'doc' attribute specifies the source XML document
						to be parsed.</description>
					<location chapter="11" section="11.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.19.1</id>
							<description>The result of the evaluated expression must be of
								type String or Reader</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.19.2</id>
							<description>If the evaluated expression is not of type String or
								Reader, an Exception is thrown.</description>
							<location chapter="11`" section="11.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.3</id>
					<description>The 'filter' attribute specifies the filter to be
						applied to the source document.</description>
					<location chapter="11" section="11.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.3.1</id>
							<description>The result of the evaluated expression must be of
								type 'org.xml.sax.XMLFilter'</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.3.2</id>
							<description>If the evaluated expression is not of type
								org.xml.sax.XMLFilter, an Exception is thrown.</description>
							<location chapter="11" section="11.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.3.3</id>
							<description>If filter is null, filtering is not performed</description>
							<location chapter="11" section="11.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.4</id>
					<description>The 'var' attribute specifies the named of the
						exported scoped attribute for the parsed XML document.</description>
					<location chapter="11" section="11.2" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="true" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:67.4.1</id>
							<description>The type of the exported scoped attribute is
								implementation specified.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:67.4.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="11" section="11.2" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.5</id>
					<description>The 'scope' attribute specifies the scope in which to
						export 'var'.</description>
					<location chapter="11" section="11.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.5.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.5.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.5.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.5.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:67.5.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="11" section="11.2" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.6</id>
					<description>The 'varDom' attribute specifies the exported scoped
						attribute for the parsed XML document.</description>
					<location chapter="11" section="11.2" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.6.1</id>
							<description>The exported scoped attribute must be of type
								org.w3c.dom.Document.</description>
							<location chapter="11" section="11.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.7</id>
					<description>The 'scopeDom' attribute specifies the scope in which
						to export 'varDom'.</description>
					<location chapter="11" section="11.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.7.1</id>
							<description>A value of 'page' will export 'varDom' to the page
								scope.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.7.2</id>
							<description>A value of 'request' will export 'varDom' to the
								request scope.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.7.3</id>
							<description>A value of 'session' will export 'varDom' to the
								session scope.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:67.7.4</id>
							<description>A value of 'application' will export 'varDom' to the
								application scope.</description>
							<location chapter="11" section="11.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:67.7.5</id>
							<description>If the scopeDom attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="11" section="11.2" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="false">
					<id>JSTL:SPEC:67.8</id>
					<description>It is invalid to specify 'xmlUrl' if the action has
						body-content.</description>
					<location chapter="11" section="11.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="false">
					<id>JSTL:SPEC:67.9</id>
					<description>It is invalid to specify 'xmlTest' if the action has
						body-content.</description>
					<location chapter="11" section="11.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:67.10</id>
					<description>One and only one of var and varDom must be specified</description>
					<location chapter="11" section="11.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:67.11</id>
					<description>If 'scope' is specified, 'var' must also be specified.</description>
					<location chapter="11" section="11.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:67.12</id>
					<description>If 'scopeDom' is specified, 'varDom' must also be
						specified.</description>
					<location chapter="11" section="11.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:67.13</id>
					<description>If 'xmlUrl' is null or empty, a JspException is
						thrown.</description>
					<location chapter="11" section="11.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.14</id>
					<description>The document to be parsed can be specified as body
						content of the action.</description>
					<location chapter="11" section="11.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.15</id>
					<description>The 'var' or 'varDom' attribute is required across all
						syntax variations.</description>
					<location chapter="11" section="11.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.16</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="11" section="11.2" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.17</id>
					<description>If an exception is caused by the action, it must be
						propagated.</description>
					<location chapter="11" section="11.2" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:67.18</id>
					<description>If the source XML document is null or empty, a
						JspException is thrown.</description>
					<location chapter="11" section="11.2" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:68</id>
			<description>The &lt;x:out> action evaluates an XPath expression and
				outputs the result of the evaluation to the current JspWriter
				object.</description>
			<location chapter="11" section="11.3" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:68.1</id>
					<description>The 'select' attribute specifies the XPath expression
						to be evaluated.</description>
					<location chapter="11" section="11.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:68.2</id>
					<description>The 'escapeXml' attribute determines wheth characters
						&lt;,>,&amp;,'," in the result string should be converted to their
						corresponding character entity codes.</description>
					<location chapter="11" section="11.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:68.2.1</id>
							<description>'&lt;' is converted to \&lt;</description>
							<location chapter="11" section="11.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:68.2.2</id>
							<description>'>' is converted to \></description>
							<location chapter="11" section="11.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:68.2.3</id>
							<description>'&amp;' is converted to \&amp;</description>
							<location chapter="11" section="11.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:68.2.4</id>
							<description>Single quote (') is converted to &amp;#039.</description>
							<location chapter="11" section="11.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:68.2.5</id>
							<description>Double quote (") is converted to &amp;#034.</description>
							<location chapter="11" section="11.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:68.2.6</id>
							<description>If the value evaluates to null, the default value,
								'true', will be used.</description>
							<location chapter="11" section="11.3" />
							<depends>
								<depend>33.3.1</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:68.2.7</id>
							<description>An invalid value will result in an Exception being
								thrown.</description>
							<location chapter="11" section="11.3" />
							<depends>
								<depend>33.3.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:68.3</id>
					<description>If 'escaleXml' is not specified, then escaping will be
						performed.</description>
					<location chapter="11" section="11.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:68.4</id>
					<description>It is illegal for the &lt;x:out> action to have body
						content.</description>
					<location chapter="11" section="11.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:68.5</id>
					<description>A JspException is thrown if the expression language
						reports a failure to complete the evaluation of the expression.</description>
					<location chapter="11" section="11.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:68.6</id>
					<description>The 'select' attribute is required.</description>
					<location chapter="11" section="11.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:68.7</id>
					<description>If an exception is caused by the action itself, it
						must be propagated.</description>
					<location chapter="11" section="11.3" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:69</id>
			<description>The &lt;x:set> actions evaluates an XPath expression and
				sets the result into a scoped variable.</description>
			<location chapter="11" section="11.4" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
				<depend>66</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:69.1</id>
					<description>The 'select' attribute specifies the XPath expression
						to be evaluated.</description>
					<location chapter="11" section="11.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:69.2</id>
					<description>The 'var' attribute specifies the named of the
						exported scoped attribute which holds the result of the evaluated
						XPath expression.</description>
					<location chapter="11" section="11.4" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:69.2.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="11" section="11.4" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:69.3</id>
					<description>The 'scope' attribute specifies the scope in which to
						export 'var'.</description>
					<location chapter="11" section="11.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:69.3.1</id>
							<description>A value of 'page' exports 'var' to the page scope.</description>
							<location chapter="11" section="11.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:69.3.2</id>
							<description>A value of 'request' exports 'var' to the request
								scope.</description>
							<location chapter="11" section="11.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:69.3.3</id>
							<description>A value of 'session' exports 'var' to the session
								scope.</description>
							<location chapter="11" section="11.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:69.3.4</id>
							<description>A value of 'application' exports 'var' to the
								application scope.</description>
							<location chapter="11" section="11.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:69.3.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="11" section="11.4" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:69.4</id>
					<description>If 'scope' is not specified, 'var' will be exported to
						the page scope.</description>
					<location chapter="11" section="11.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:69.5</id>
					<description>The 'var' attribute is required across all syntax
						variations.</description>
					<location chapter="11" section="11.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:69.6</id>
					<description>The value of the scoped variable can also be specified
						as body content.</description>
					<location chapter="11" section="11.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:69.7</id>
					<description>The 'var' attribute is required across all syntax
						variations.</description>
					<location chapter="11" section="11.4" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:69.8</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="11" section="11.4" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:69.9</id>
					<description>The body content must be empty.</description>
					<location chapter="11" section="11.4" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:70</id>
			<description>The &lt;x:if> action evaluates the XPath expression and
				renders its body content if the expression evaluates to true.</description>
			<location chapter="12" section="12.2" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:70.1</id>
					<description>The 'select' attribute specifies the test condition
						determines whether the body content should be processed.</description>
					<location chapter="12" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:70.2</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute for the resulting value of the test condition.</description>
					<location chapter="12" section="12.2" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:70.2.1</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="12" section="12.2" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:70.3</id>
					<description>The 'scope' attribute specifieds the scope in which to
						export 'var'</description>
					<location chapter="12" section="12.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:70.3.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="12" section="12.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:70.3.2</id>
							<description>A value of 'reqeust' will export 'var' to the
								request scope.</description>
							<location chapter="12" section="12.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:70.3.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="12" section="12.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:70.3.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="12" section="12.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:70.3.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="12" section="12.2" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:70.4</id>
					<description>If 'scope' is specified, 'var' must also be specified.</description>
					<location chapter="12" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:70.5</id>
					<description>If the test condition evaluates to true, the JSP
						container processes the body content and then writes it to the
						current JspWriter.</description>
					<location chapter="12" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:70.6</id>
					<description>The 'select' attribute is required.</description>
					<location chapter="12" section="12.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:70.7</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="12" section="12.2" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:71</id>
			<description>The &lt;x:choose> action provides the context for
				mutually exclusive conditional execution.</description>
			<location chapter="12" section="12.3" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:71.1</id>
					<description>The body content of must consist of only:</description>
					<location chapter="12" section="12.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:71.1.1</id>
							<description>White space may appear anywhere around teh
								&lt;x:when> and &lt;x:otherwise> subtags.</description>
							<location chapter="12" section="12.3" />
							<depends>
								<depend>9</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:71.1.2</id>
							<description>1 to N &lt;x:when> actions which must all appear
								before &lt;x:otherwise></description>
							<location chapter="12" section="12.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:71.1.3</id>
							<description>0 or 1 &lt;x:otherwise> action which must be the
								last nested action in &lt;x:choose></description>
							<location chapter="12" section="12.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:71.2</id>
					<description>The body content is processed by the JSP container and
						written to the current JspWriter.</description>
					<location chapter="12" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:71.3</id>
					<description>The action processes the body of the first &lt;x:when>
						action whose test condition evaluates to true.</description>
					<location chapter="12" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:71.4</id>
					<description>If none of the test conditions of nested &lt;x:when>
						actions evaluates to true, then the body of the &lt;x:otherwise>
						action is processed, if present.</description>
					<location chapter="12" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:71.7</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="12" section="12.3" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:71.5</id>
					<description>The &lt;x:when> action represents an alternative
						within an &lt;x:choose> action.</description>
					<location chapter="12" section="12.4" />
					<depends>
						<depend>30</depend>
						<depend>32</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:71.5.1</id>
							<description>The 'select' attribute specifies the test condition
								that determines whether the body content should be processed.</description>
							<location chapter="12" section="12.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:71.5.2</id>
							<description>&lt;x:when> must have &lt;x:choose> as an immediate
								parent.</description>
							<location chapter="12" section="12.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:71.5.3</id>
							<description>&lt;x:when> must appear before an &lt;x:otherwise>
								action that has the same parent.</description>
							<location chapter="12" section="12.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:71.5.4</id>
							<description>If the test condition of the action evaluates to
								true, the JSP container processes the body content and then
								writes it to the current JspWriter.</description>
							<location chapter="12" section="12.4" />
							<depends>
								<depend>10</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:71.5.5</id>
							<description>The 'select' attribute is required.</description>
							<location chapter="12" section="12.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:71.5.6</id>
							<description>If an exception is caused by the body content, it
								must be propagated.</description>
							<location chapter="12" section="12.4" />
							<depends>
								<depend>33.5</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:71.6</id>
					<description>The &lt;x:otherwise> action is used optionally as the
						last alternative within a &lt;x:choose> action.</description>
					<location chapter="12" section="12.5" />
					<depends>
						<depend>30</depend>
						<depend>32</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:71.6.1</id>
							<description>The &lt;x:otherwise> action must have &lt;x:choose>
								as an immediate parent.</description>
							<location chapter="12" section="12.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:71.6.2</id>
							<description>The &lt;x:otherwise> action must be the last nested
								action within &lt;x:choose></description>
							<location chapter="12" section="12.5" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:71.6.3</id>
							<description>If none of the nested &lt;x:when> test conditions
								evaluates to true, then the body content of the &lt;x:otherwise>
								action is evaluated by the JSP container, and the result is
								written to the current JspWriter.</description>
							<location chapter="12" section="12.5" />
							<depends>
								<depend>10</depend>
							</depends>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:71.6.4</id>
							<description>If an exception is caused by the body content, it
								must be propagated.</description>
							<location chapter="12" section="12.5" />
							<depends>
								<depend>33.5</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:72</id>
			<description>The &lt;x:forEach> action evaluates the given XPath
				expression and repeats its nested body content over the result,
				setting the context node to each element in the iteration.</description>
			<location chapter="12" section="12.6" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:72.1</id>
					<description>The 'select' attribute specifies the XPath expression
						to be evaluated.</description>
					<location chapter="12" section="12.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:72.2</id>
					<description>The 'var' attribute specified the named of the
						exported scoped attribute for the current item of the iteration.</description>
					<location chapter="12" section="12.6" />
					<depends>
						<depend>7</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:72.2.1</id>
							<description>The type of the exported attribute depends on the
								object of the underlying collection.</description>
							<location chapter="12" section="12.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:72.2.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="12" section="12.6" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:72.3</id>
					<description>If 'select' is emtpy, a JspException is thrown.</description>
					<location chapter="12" section="12.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:72.4</id>
					<description>As long as there are items to iterate over, the body
						content is processed by the JSP container and written to the
						current JspWriter.</description>
					<location chapter="12" section="12.6" />
					<depends>
						<depend>10</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:72.5</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="12" section="12.6" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:72.6</id>
					<description>The 'varStatus' attribute specifies the name of the
						scoped variable for the status of the iteration</description>
					<location chapter="12" section="12.6" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:72.6.1</id>
							<description>The exported Object associated with the value of the
								'varStatus' attribute is of type
								javax.servlet.jsp.jstl.core.LoopTagStatus.</description>
							<location chapter="12" section="12.6" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:72.7</id>
					<description>The 'begin' attribute specifies a starting index
						value.</description>
					<location chapter="12" section="12.6" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:72.7.1</id>
							<description>If the 'items' attribute is specified, the 'begin'
								attribute dictates that the iteration begins at the item located
								at the specified index.</description>
							<location chapter="12" section="12.6" />
							<sub-assertions>
								<assertion defined-by="technology" impl-spec="false"
									required="true" status="active" testable="true">
									<id>JSTL:SPEC:72.7.1.1</id>
									<description>The first item of the collection has index 0.</description>
									<location chapter="12" section="12.6" />
								</assertion>
							</sub-assertions>
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:72.7.2</id>
							<description>If the 'items' attribute is not specified, the
								'begin' attribute dictates that iteration begins with the index
								set at the value specified.</description>
							<location chapter="12" section="12.6" />
						</assertion>
						<assertion defined-by="technology" required="true"
							impl-spec="false" status="active" testable="true">
							<id>JSTL:SPEC:72.7.3</id>
							<description>The result of the evaluated expression must be of
								type 'int'.</description>
							<location chapter="12" section="12.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:72.7.4</id>
							<description>If the result of the evaluated expression is not of
								type 'int'</description>
							<location chapter="12" section="12.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:72.8</id>
					<description>The 'end' attribute specifies an ending index value.</description>
					<location chapter="12" section="12.6" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:72.8.1</id>
							<description>If the 'items' attribute is specified, the 'ends'
								attribute dictates that the Iteration ends at the item located
								at the specified index.</description>
							<location chapter="12" section="12.6" />
						</assertion>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:72.8.2</id>
							<description>If the 'items' attribute is not specified, the 'end'
								attribute dictates that iteration ends when the index reaches
								the value specified.</description>
							<location chapter="12" section="12.6" />
						</assertion>
						<assertion defined-by="technology" required="true"
							impl-spec="true" status="active" testable="true">
							<id>JSTL:SPEC:72.8.3</id>
							<description>The result of the evaluated expression must be of
								type 'int'.</description>
							<location chapter="12" section="12.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:72.8.4</id>
							<description>If the result of the evaluated expression is not of
								type int, an Exception is thrown.</description>
							<location chapter="12" section="12.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion defined-by="technology" impl-spec="false"
					required="true" status="active" testable="true">
					<id>JSTL:SPEC:72.9</id>
					<description>The 'step' attribute specifies that iteration will
						only process every 'step' items of the collections, starting with
						the first.</description>
					<location chapter="12" section="12.6" />
					<sub-assertions>
						<assertion defined-by="technology" impl-spec="false"
							required="true" status="active" testable="true">
							<id>JSTL:SPEC:72.9.1</id>
							<description>The result of the evaluated expression must be of
								type 'int'.</description>
							<location chapter="12" section="12.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:72.9.2</id>
							<description>If the result of the evaluated expression is not of
								type int, an Exception is thrown.</description>
							<location chapter="12" section="12.6" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:72.10</id>
					<description>If 'begin' is specified, the value must be >= 0.</description>
					<location chapter="12" section="12.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="true">
					<id>JSTL:SPEC:72.11</id>
					<description>If 'end' is specified, the value must be >= 'begin'</description>
					<location chapter="12" section="12.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:72.12</id>
					<description>If 'step' is specified, step must be >= 1</description>
					<location chapter="12" section="12.6" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:72.13</id>
					<description>If end is specified and it is less than begin, the
						loop is simply not executed.</description>
					<location chapter="12" section="12.6" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:73</id>
			<description>The &lt;x:transform> action applies a transformation to
				an XML document given a specified XSLT stylesheet or a transformer
				object.</description>
			<location chapter="13" section="13.2" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="deprecated" testable="true">
					<id>JSTL:SPEC:73.1</id>
					<description>The 'xmlSystemID' attribute specifies the URL of the
						source XML document to be transformed.</description>
					<location chapter="13" section="13.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="deprecated" testable="true">
							<id>JSTL:SPEC:73.1.1</id>
							<description>The result of the evaluated expression must be
								String.</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="deprecated" testable="true">
							<id>JSTL:SPEC:73.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="13" section="13.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.16</id>
					<description>The 'docSystemID' attribute specifies the URL of the
						source XML document to be transformed.</description>
					<location chapter="13" section="13.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.16.1</id>
							<description>The result of the evaluated expression must be
								String.</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.16.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="13" section="13.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="deprecated" testable="true">
					<id>JSTL:SPEC:73.2</id>
					<description>The 'xml' attribute specifies the source XML document
						to be transformed.</description>
					<location chapter="13" section="13.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="deprecated" testable="true">
							<id>JSTL:SPEC:73.2.1</id>
							<description>The type of the evaluated expression can be:</description>
							<location chapter="13" section="13.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="deprecated" testable="true">
									<id>JSTL:SPEC:73.2.1.1</id>
									<description>String</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="deprecated" testable="true">
									<id>JSTL:SPEC:73.2.1.2</id>
									<description>Reader</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="deprecated" testable="true">
									<id>JSTL:SPEC:73.2.1.3</id>
									<description>javax.xml.transform.Source</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="deprecated" testable="true">
									<id>JSTL:SPEC:73.2.1.4</id>
									<description>An object exported by &lt;x:parse> or &lt;x:set></description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="deprecated" testable="true">
									<id>JSTL:SPEC:73.2.1.5</id>
									<description>org.w3c.dom.Document</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="deprecated" testable="true">
									<id>JSTL:SPEC:73.2.1.6</id>
									<description>If the evaluated expression is not of type String,
										Reader, javax.xml.transform.Source, org.w3c.dom.Document, or
										an Object exported by &lt;x:parse> or &lt;x:set>, an Exception
										is thrown.</description>
									<location chapter="13" section="13.2" />
									<depends>
										<depend>33.4.2</depend>
									</depends>
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.17</id>
					<description>The 'doc' attribute specifies the source XML document
						to be transformed.</description>
					<location chapter="13" section="13.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.17.1</id>
							<description>The type of the evaluated expression can be:</description>
							<location chapter="13" section="13.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.17.1.1</id>
									<description>String</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.17.1.2</id>
									<description>Reader</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.17.1.3</id>
									<description>javax.xml.transform.Source</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.17.1.4</id>
									<description>An object exported by &lt;x:parse> or &lt;x:set></description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.17.1.5</id>
									<description>org.w3c.dom.Document</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.17.1.6</id>
									<description>If the evaluated expression is not of type String,
										Reader, javax.xml.transform.Source, org.w3c.dom.Document, or
										an Object exported by &lt;x:parse> or &lt;x:set>, an Exception
										is thrown.</description>
									<location chapter="13" section="13.2" />
									<depends>
										<depend>33.4.2</depend>
									</depends>
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.3</id>
					<description>The 'xsltSystemID' attribute specifies the URL of the
						transformation stylesheet.</description>
					<location chapter="13" section="13.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.3.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.3.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="13" section="13.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.4</id>
					<description>The 'xslt' attribute specifies the transformation
						stylesheet.</description>
					<location chapter="13" section="13.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.4.1</id>
							<description>The type of the evaluated expression can be:</description>
							<location chapter="13" section="13.2" />
							<sub-assertions>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.4.1.1</id>
									<description>String</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.4.1.2</id>
									<description>Reader</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.4.1.3</id>
									<description>javax.xml.transform.Source</description>
									<location chapter="13" section="13.2" />
								</assertion>
								<assertion required="true" impl-spec="false"
									defined-by="technology" status="active" testable="true">
									<id>JSTL:SPEC:73.4.1.4</id>
									<description>If the evaluated expression is not of type String,
										Reader, or javax.xml.transform.Source, an Exception is thrown.</description>
									<location chapter="13" section="13.2" />
									<depends>
										<depend>33.4.2</depend>
									</depends>
								</assertion>
							</sub-assertions>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.5</id>
					<description>The 'var' attribute specifies the name of the exported
						scoped attribute to hold the result of the transformation.</description>
					<location chapter="13" section="13.2" />
					<depends>
						<depend>8</depend>
					</depends>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.5.1</id>
							<description>The type of the exported attribute must be
								'org.w3c.dom.Document'</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:73.5.2</id>
							<description>If the 'var' attribute is specified, but empty, a
								translation time validation error will occur.</description>
							<location chapter="13" section="13.2" />
							<depends>
								<depend>33.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.6</id>
					<description>The 'scope' attribute specifies the scope in which to
						export 'var'.</description>
					<location chapter="13" section="13.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.6.1</id>
							<description>A value of 'page' will export 'var' to the page
								scope.</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.6.2</id>
							<description>A value of 'request' will export 'var' to the
								request scope.</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.6.3</id>
							<description>A value of 'session' will export 'var' to the
								session scope.</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.6.4</id>
							<description>A value of 'application' will export 'var' to the
								application scope.</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:73.6.5</id>
							<description>If the 'scope' attribute is provided an invalid
								value, a translation time validation error will occur.</description>
							<location chapter="13" section="13.2" />
							<depends>
								<depend>33.1</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.7</id>
					<description>The 'result' attribute specifies how the tranformation
						result should be processed.</description>
					<location chapter="13" section="13.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.8</id>
							<description>The result of the evaluated expression must be of
								type 'javax.xml.transform.Result'.</description>
							<location chapter="13" section="13.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:73.8.1</id>
							<description>If the evaluated expression is not of type
								javax.xml.transform.Result, an Exception is thrown.</description>
							<location chapter="13" section="13.2" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:73.8</id>
					<description>If 'scope' is specified, 'var' must be specified also.</description>
					<location chapter="13" section="13.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.8</id>
					<description>If 'doc' or 'xslt' is null or empty, a JspException is
						thrown.</description>
					<location chapter="13" section="13.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.9</id>
					<description>If 'var' or 'result' is not specified, the result of
						the transformation is written to the current JspWriter.</description>
					<location chapter="13" section="13.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="removed" testable="false">
					<id>JSTL:SPEC:73.10</id>
					<description>One and only one attribute, either 'xmlUrl' or
						'xmlText', must be present in the action, if the action has no
						body content.</description>
					<location chapter="13" section="13.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:73.11</id>
					<description>One and only one attribute, either 'xsltUrl' or
						'xsltText', must be present in the action, across all syntax
						variations.</description>
					<location chapter="13" section="13.2" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.12</id>
					<description>The XML document to be parsed can be specified as body
						content of the action.</description>
					<location chapter="13" section="13.2" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.13</id>
					<description>&lt;x:param> subtags can be nested after the XML
						content within the actions body.</description>
					<location chapter="13" section="13.2" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.14</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="13" section="13.2" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:73.15</id>
					<description>If an exception is caused by the action itself, it
						must be propagated.</description>
					<location chapter="13" section="13.2" />
					<depends>
						<depend>33.6</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:74</id>
			<description>The &lt;x:param> nested action of &lt;x:transform> is
				used to set transformation parameters.</description>
			<location chapter="13" section="13.3" />
			<depends>
				<depend>30</depend>
				<depend>32</depend>
			</depends>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:74.1</id>
					<description>The 'name' attribute specifies the name of the
						transformation parameter.</description>
					<location chapter="13" section="13.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:74.1.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="13" section="13.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:74.1.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="13" section="13.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:74.2</id>
					<description>The 'value' attribute specifies the value of the
						parameter.</description>
					<location chapter="13" section="13.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:74.2.1</id>
							<description>The result of the evaluated expression must be of
								type String.</description>
							<location chapter="13" section="13.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:74.2.2</id>
							<description>If the evaluated expression is not of type String,
								an Exception is thrown.</description>
							<location chapter="13" section="13.3" />
							<depends>
								<depend>33.4.2</depend>
							</depends>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:74.3</id>
					<description>The value of the parameter can be specified via the
						actions body content.</description>
					<location chapter="13" section="13.3" />
					<depends>
						<depend>10</depend>
						<depend>11</depend>
					</depends>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:74.4</id>
					<description>If an exception is caused by the body content, it must
						be propagated.</description>
					<location chapter="13" section="13.3" />
					<depends>
						<depend>33.5</depend>
					</depends>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:109</id>
			<description>The PermittedTaglibsTLV class is used to allow a TLD to
				restrict what taglibs (in addition to itself) may be imported on a
				page where it's used.</description>
			<location chapter="14" section="14.1" />
			<comment>Description taken from javadoc.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:104</id>
			<description>The ScriptFreeTLV class is used for enforcing
				restrictions against the use of JSP scripting elements.</description>
			<location chapter="14" section="14.1" />
			<comment>Description taken from javadoc.</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:104.1</id>
					<description>The allowDeclarations initialization parameter, if
						true, indicates that declaration elements are not prohibited.</description>
					<location chapter="14" section="14.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:104.2</id>
					<description>The allowScriptlets initialization parameter, if true,
						indicates that scriptlets elements are not prohibited.</description>
					<location chapter="14" section="14.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:104.3</id>
					<description>The allowExpressions initialization parameter, if
						true, indicates that top-level expression elements (i.e.,
						expressions not associated with request-time attribute values) are
						not prohibited.</description>
					<location chapter="14" section="14.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:104.4</id>
					<description>The allowRTExpressions initialization parameter, if
						true, indicates that expression elements associated with
						request-time attribute values are not prohibited.</description>
					<location chapter="14" section="14.1" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:104.5</id>
					<description>The default value for all for initialization
						parameters is false, indicating all forms of scripting elements
						are to be prohibited.</description>
					<location chapter="14" section="14.1" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:76</id>
			<description>The fn:contains function tests if a string contains the
				specified substring.</description>
			<location chapter="15" section="15.2" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:76.1</id>
					<description>fn:contains has two arguments, string and substring.</description>
					<location chapter="15" section="15.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:76.1.1</id>
							<description>The string argument is of type String.</description>
							<location chapter="15" section="15.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:76.1.2</id>
							<description>If string is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:76.1.3</id>
							<description>The substring argument is of type String.</description>
							<location chapter="15" section="15.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:76.1.4</id>
							<description>If substring is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.2" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="false">
					<id>JSTL:SPEC:76.2</id>
					<description>The result is of type Boolean.</description>
					<location chapter="15" section="15.2" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:76.2.1</id>
							<description>The result is true if the character sequence
								represented by the substring argument exists in the character
								sequence represented by the string argument, false otherwise.</description>
							<location chapter="15" section="15.2" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:76.2.2</id>
							<description>If substring is empty, this matches the beginning of
								the string and the value returned is true.</description>
							<location chapter="15" section="15.2" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:77</id>
			<description>The fn:containsIgnoreCase function tests if a string
				contains the specified substring.</description>
			<location chapter="15" section="15.3" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:77.1</id>
					<description>fn:containsIgnoreCase has two arguments, string and
						substring.</description>
					<location chapter="15" section="15.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:77.1.1</id>
							<description>The string argument is of type String.</description>
							<location chapter="15" section="15.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:77.1.2</id>
							<description>If string is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:77.1.3</id>
							<description>The substring argument is of type String.</description>
							<location chapter="15" section="15.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:77.1.4</id>
							<description>If substring is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.3" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:77.2</id>
					<description>The result is of type Boolean.</description>
					<location chapter="15" section="15.3" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:77.2.1</id>
							<description>The result is true if the character sequence
								represented by the substring argument exists in the character
								sequence represented by the string argument ignoring case
								differences, false otherwise.</description>
							<location chapter="15" section="15.3" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:77.2.2</id>
							<description>If substring is empty, this matches the beginning of
								the string and the value returned is true.</description>
							<location chapter="15" section="15.3" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:78</id>
			<description>fn:endsWith tests if a string ends with the specified
				suffix.</description>
			<location chapter="15" section="15.4" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:78.1</id>
					<description>fn:endsWith has two arguments, string and suffix.</description>
					<location chapter="15" section="15.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:78.1.1</id>
							<description>The string argument is of type String.</description>
							<location chapter="15" section="15.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:78.1.2</id>
							<description>If string is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:78.1.3</id>
							<description>The suffix argument is of type String.</description>
							<location chapter="15" section="15.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:78.1.4</id>
							<description>If suffix is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.4" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:78.2</id>
					<description>The result is of type Boolean.</description>
					<location chapter="15" section="15.4" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:78.2.1</id>
							<description>The result is true if the character sequence
								represented by the suffix argument is a suffix of the character
								sequence represented by the string argument, false otherwise.</description>
							<location chapter="15" section="15.4" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:78.2.2</id>
							<description>If suffix is empty, this matches the end of the
								string and the value returned is true.</description>
							<location chapter="15" section="15.4" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:79</id>
			<description>fn:escapeXml escapes characters that could be
				interpreted as XML markup.</description>
			<location chapter="15" section="15.5" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:79.1</id>
					<description>fn:escapeXml has a single argument, string, of type
						String</description>
					<location chapter="15" section="15.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:79.2</id>
					<description>The result is a converted string. The conversions are
						the same as the ones applied by &lt;c:out&gt; when attribute
						escapeXml is set to true.</description>
					<location chapter="15" section="15.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:79.3</id>
					<description>If string is null, it is processed as an empty string.</description>
					<location chapter="15" section="15.5" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:79.4</id>
					<description>If string is an empty string, an empty string is
						returned.</description>
					<location chapter="15" section="15.5" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:80</id>
			<description>fn:indexOf returns the index within a string of the
				first occurrence of a specified substring.</description>
			<location chapter="15" section="15.6" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:80.1</id>
					<description>fn:indexOf has two arguments</description>
					<location chapter="15" section="15.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:80.1.1</id>
							<description>The string argument is of type String.</description>
							<location chapter="15" section="15.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:80.1.2</id>
							<description>If string is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:80.1.3</id>
							<description>The substring argument is of type String.</description>
							<location chapter="15" section="15.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:80.1.4</id>
							<description>If substring is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.6" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:80.2</id>
					<description>The result is an integer</description>
					<location chapter="15" section="15.6" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:80.2.1</id>
							<description>If the substring argument is a substring of the
								input string, the result is the index of the first character of
								the first such substring.</description>
							<location chapter="15" section="15.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:80.2.2</id>
							<description>If the substring argument does not occur as a
								substring, -1 is returned.</description>
							<location chapter="15" section="15.6" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:80.2.3</id>
							<description>If substring is empty, this matches the beginning of
								the string and the value returned is 0.</description>
							<location chapter="15" section="15.6" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:81</id>
			<description>fn:join joins all elements of an array into a string.</description>
			<location chapter="15" section="15.7" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:81.1</id>
					<description>fn:join has two arguments</description>
					<location chapter="15" section="15.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:81.1.1</id>
							<description>The array argument is an array of Strings to be
								joined</description>
							<location chapter="15" section="15.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:81.1.2</id>
							<description>The separator argument is a String to separate each
								element of the array in the resulting string.</description>
							<location chapter="15" section="15.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:81.1.3</id>
							<description>If separator is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.7" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:81.2</id>
					<description>The result is a String of all array elements joined
						into one string.</description>
					<location chapter="15" section="15.7" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:81.2.1</id>
							<description>If the array argument is null, an empty string is
								returned.</description>
							<location chapter="15" section="15.7" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:81.2.2</id>
							<description>If the separator argument is an empty string, then
								the elements are joined together without any separator.</description>
							<location chapter="15" section="15.7" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:82</id>
			<description>fn:length Returns the number of items in a collection,
				or the number of characters in a string.</description>
			<location chapter="15" section="15.8" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:82.1</id>
					<description>fn:length has a single argument, input, which may be
						any of the types supported for the items attribute in the
						&lt;c:forEach&gt; action, or String.</description>
					<location chapter="15" section="15.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:82.2</id>
					<description>The result is an int representing the length of the
						collection or the string.</description>
					<location chapter="15" section="15.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:82.3</id>
					<description>If input is null, it is treated as an empty collection
						and the value returned is 0.</description>
					<location chapter="15" section="15.8" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:82.4</id>
					<description>If input is an empty string, the value returned is 0.</description>
					<location chapter="15" section="15.8" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:83</id>
			<description>fn:replace returns a string resulting from replacing in
				an input string all occurrences of a "before" substring into an
				"after" substring.</description>
			<location chapter="15" section="15.9" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:83.1</id>
					<description>fn:replace has three arguments.</description>
					<location chapter="15" section="15.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.1.1</id>
							<description>The inputString argument is of type String</description>
							<location chapter="15" section="15.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.1.2</id>
							<description>If inputString is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.1.3</id>
							<description>The beforeSubstring argument is of type String</description>
							<location chapter="15" section="15.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.1.4</id>
							<description>If beforeSubstring is null, it is processed as an
								empty string</description>
							<location chapter="15" section="15.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.1.5</id>
							<description>The afterSubstring argument is of type String</description>
							<location chapter="15" section="15.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.1.6</id>
							<description>If afterSubstring is null, it is processed as an
								empty string</description>
							<location chapter="15" section="15.9" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:83.2</id>
					<description>The result is the string that results from replacing
						all occurrences of beforeSubstring by afterSubstring.</description>
					<location chapter="15" section="15.9" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.2.1</id>
							<description>If inputstring is an empty string, an empty string
								is returned.</description>
							<location chapter="15" section="15.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.2.2</id>
							<description>If beforeSubstring is an empty string, the input
								string is returned.</description>
							<location chapter="15" section="15.9" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:83.2.3</id>
							<description>If afterSubstring is an empty string, all
								occurrences of beforeSubstring are removed from inputString</description>
							<location chapter="15" section="15.9" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="true">
			<id>JSTL:SPEC:84</id>
			<description>fn:split splits a string into an array of substrings.</description>
			<location chapter="15" section="15.10" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:84.1</id>
					<description>fn:split has two arguments</description>
					<location chapter="15" section="15.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:84.1.1</id>
							<description>The string argument is of type String.</description>
							<location chapter="15" section="15.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:84.1.2</id>
							<description>If string is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:84.1.3</id>
							<description>The delimiters argument is of type String.</description>
							<location chapter="15" section="15.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:84.1.4</id>
							<description>If delimiters is null, it is processed as an empty
								string</description>
							<location chapter="15" section="15.10" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:84.2</id>
					<description>The result is an array of Strings</description>
					<location chapter="15" section="15.10" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:84.2.1</id>
							<description>If both arguments are non-empty, the input string is
								broken into tokens according to the semantics of the Java class
								java.util.StringTokenizer</description>
							<location chapter="15" section="15.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:84.2.2</id>
							<description>If the input string is empty, the array returned
								contains one element consisting of an empty string.</description>
							<location chapter="15" section="15.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:84.2.3</id>
							<description>If delimiters is an empty string, the array returned
								contains one element consisting of the input string</description>
							<location chapter="15" section="15.10" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:84.2.4</id>
							<description>Delimiter characters themselves are not treated as
								tokens, and are not included in any token.</description>
							<location chapter="15" section="15.10" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:85</id>
			<description>fn:startsWith tests if a string starts with the
				specified prefix.</description>
			<location chapter="15" section="15.11" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:85.1</id>
					<description>fn:startsWith has two arguments, string and prefix.</description>
					<location chapter="15" section="15.11" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:85.1.1</id>
							<description>The string argument is of type String.</description>
							<location chapter="15" section="15.11" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:85.1.2</id>
							<description>If string is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.11" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:85.1.3</id>
							<description>The prefix argument is of type String.</description>
							<location chapter="15" section="15.11" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:85.1.4</id>
							<description>If prefix is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.11" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:85.2</id>
					<description>The result is of type Boolean.</description>
					<location chapter="15" section="15.11" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:85.2.1</id>
							<description>The result is true if the character sequence
								represented by the prefix argument is a prefix of the character
								sequence represented by the string argument, false otherwise.</description>
							<location chapter="15" section="15.11" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:85.2.2</id>
							<description>If prefix is empty, this matches the beginning of
								the string and the value returned is true.</description>
							<location chapter="15" section="15.11" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:86</id>
			<description>fn:substring returns a subset of a string.</description>
			<location chapter="15" section="15.12" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:86.1</id>
					<description>fn:substring has three arguments.</description>
					<location chapter="15" section="15.12" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:86.1.1</id>
							<description>The argument string is of type String.</description>
							<location chapter="15" section="15.12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:86.1.2</id>
							<description>If string is null, it is processed as an empty
								string</description>
							<location chapter="15" section="15.12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:86.1.3</id>
							<description>The beginIndex argument is an int.</description>
							<location chapter="15" section="15.12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:86.1.4</id>
							<description>If beginIndex is less than 0, its value is adjusted
								to be 0.</description>
							<location chapter="15" section="15.12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:86.1.5</id>
							<description>The endIndex argument is an int.</description>
							<location chapter="15" section="15.12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:86.1.6</id>
							<description>If endIndex is less than 0 or greater than the
								length of the input string, its value is adjusted to be the
								length of the input string.</description>
							<location chapter="15" section="15.12" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:86.2</id>
					<description>The result is of type String.</description>
					<location chapter="15" section="15.12" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:86.2.1</id>
							<description>Returns a substring of the input string according to
								the semantics of method substring() of the Java class
								java.lang.String, provided that beginIndex is not greater than
								the last index of the input string and that endIndex is not less
								than beginIndex.</description>
							<location chapter="15" section="15.12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:86.2.2</id>
							<description>If beginIndex is greater than the last index of the
								input string, an empty string is returned.</description>
							<location chapter="15" section="15.12" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="false">
							<id>JSTL:SPEC:86.2.3</id>
							<description>If endIndex is less than beginIndex, an empty string
								is returned.</description>
							<location chapter="15" section="15.12" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:87</id>
			<description>fn:substringAfter returns a subset of a string following
				a specific substring.</description>
			<location chapter="15" section="15.13" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:87.1</id>
					<description>fn:substringAfter has two arguments.</description>
					<location chapter="15" section="15.13" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:87.1.1</id>
							<description>The string argument is of type String.</description>
							<location chapter="15" section="15.13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:87.1.2</id>
							<description>If string is null, it is processed as an empty
								string</description>
							<location chapter="15" section="15.13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:87.1.3</id>
							<description>The substring argument is of type String.</description>
							<location chapter="15" section="15.13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:87.1.4</id>
							<description>If substring is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.13" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:87.2</id>
					<description>The result is of type String.</description>
					<location chapter="15" section="15.13" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:87.2.1</id>
							<description>The substring returned starts at the first character
								after the substring matched in the input string, and extends up
								to the end of the input string.</description>
							<location chapter="15" section="15.13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:87.2.2</id>
							<description>If the string argument is an empty string, an empty
								string is returned</description>
							<location chapter="15" section="15.13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:87.2.3</id>
							<description>If the substring argument is an empty string, it
								matches the beginning of the input string and the input string
								is returned.</description>
							<location chapter="15" section="15.13" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:87.2.4</id>
							<description>If the substring argument does not occur in the
								input string, an empty string is returned.</description>
							<location chapter="15" section="15.13" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:88</id>
			<description>fn:substringBefore returns a subset of a string before a
				specific substring.</description>
			<location chapter="15" section="15.14" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:88.1</id>
					<description>fn:substringBefore has two arguments.</description>
					<location chapter="15" section="15.14" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:88.1.1</id>
							<description>The string argument is of type String.</description>
							<location chapter="15" section="15.14" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:88.1.2</id>
							<description>If string is null, it is processed as an empty
								string</description>
							<location chapter="15" section="15.14" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:88.1.3</id>
							<description>The substring argument is of type String.</description>
							<location chapter="15" section="15.14" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:88.1.4</id>
							<description>If substring is null, it is processed as an empty
								string.</description>
							<location chapter="15" section="15.14" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:88.2</id>
					<description>The result is of type String.</description>
					<location chapter="15" section="15.14" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:88.2.1</id>
							<description>The substring returned starts at the first character
								in the input string and extends up to the character just before
								the substring matched in the input string.</description>
							<location chapter="15" section="15.14" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:88.2.2</id>
							<description>If the string argument is an empty string, an empty
								string is returned</description>
							<location chapter="15" section="15.14" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:88.2.3</id>
							<description>If the substring argument is an empty string, it
								matches the beginning of the input string and the input string
								is returned.</description>
							<location chapter="15" section="15.14" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:88.2.4</id>
							<description>If the substring argument does not occur in the
								input string, an empty string is returned.</description>
							<location chapter="15" section="15.14" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:89</id>
			<description>fn:toLowerCase converts all of the characters of a
				string to lower case.</description>
			<location chapter="15" section="15.15" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:89.1</id>
					<description>fn:toLowerCase has a single argument of type String.</description>
					<location chapter="15" section="15.15" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:89.2</id>
					<description>The result is a String in which all of the characters
						of the input string are converted to lower case according to the
						semantics of method toLowerCase() of the Java class
						java.lang.String.</description>
					<location chapter="15" section="15.15" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:89.3</id>
					<description>If string is null, it is treated as an empty string
						and an empty string is returned</description>
					<location chapter="15" section="15.15" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:90</id>
			<description>fn:toUpperCase converts all of the characters of a
				string to upper case.</description>
			<location chapter="15" section="15.16" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:90.1</id>
					<description>fn:toUpperCase has a single argument of type String.</description>
					<location chapter="15" section="15.16" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:90.2</id>
					<description>The result is a String in which all of the characters
						of the input string are converted to upper case according to the
						semantics of method toUpperCase() of the Java class
						java.lang.String.</description>
					<location chapter="15" section="15.16" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:90.3</id>
					<description>If string is null, it is treated as an empty string
						and an empty string is returned</description>
					<location chapter="15" section="15.16" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:91</id>
			<description>fn:trim removes white space from both ends of a string.</description>
			<location chapter="15" section="15.17" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:91.1</id>
					<description>fn:trim has a single argument of type String</description>
					<location chapter="15" section="15.17" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:91.2</id>
					<description>The result is a String with white space removed from
						both ends according to the semantics of method trim() of the Java
						class java.lang.String.</description>
					<location chapter="15" section="15.17" />
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:91.3</id>
					<description>If string is null, it is treated as an empty string
						and an empty string is returned</description>
					<location chapter="15" section="15.17" />
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology"
			status="active" testable="false">
			<id>JSTL:SPEC:107</id>
			<description>The LocaleSupport class exposes the locale-determination
				logic for resource bundles through convenience methods.</description>
			<location chapter="16" section="16.0" />
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:107.1</id>
					<description>getLocalizedMessage(PageContext, String) retrieves the
						localized message corresponding to the given key.</description>
					<location chapter="16" section="16.0" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:107.1.1</id>
							<description>The given key is looked up in the resource bundle of
								the default I18N localization context, which is retrieved from
								the javax.servlet.jsp.jstl.fmt.localizationContext configuration
								setting.</description>
							<location chapter="16" section="16.0" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:107.1.2</id>
							<description>If the configuration setting is empty, or the
								default I18N localization context does not contain any resource
								bundle, or the given key is undefined in its resource bundle,
								the string &lt;key&gt; is returned, where &lt;key&gt; is
								replaced with the given key.</description>
							<location chapter="16" section="16.0" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:107.2</id>
					<description>getLocalizedMessage(PageContext, String, String)
						retrieves the localized message corresponding to the given key.</description>
					<location chapter="16" section="16.0" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:107.2.1</id>
							<description>The given key is looked up in the resource bundle
								with the given base name.</description>
							<location chapter="16" section="16.0" />
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:107.2.2</id>
							<description>If no resource bundle with the given base name
								exists, or the given key is undefined in the resource bundle,
								the string &lt;key&gt; is returned, where &lt;key&gt; is
								replaced with the given key.</description>
							<location chapter="16" section="16.0" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:107.3</id>
					<description>getLocalizedMessage(PageContext, String, Object[])
						retrieves the localized message corresponding to the given key,
						and performs parametric replacement using the arguments specified
						via args.</description>
					<location chapter="16" section="16.0" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:107.3.1</id>
							<description>The localized message is retrieved as in
								getLocalizedMessage(pageContext, key)</description>
							<location chapter="16" section="16.0" />
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology"
					status="active" testable="true">
					<id>JSTL:SPEC:107.4</id>
					<description>getLocalizedMessage(PageContext, String, Object[],
						String) retrieves the localized message corresponding to the given
						key, and performs parametric replacement using the arguments
						specified via args.</description>
					<location chapter="16" section="16.0" />
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology"
							status="active" testable="true">
							<id>JSTL:SPEC:107.4.1</id>
							<description>The localized message is retrieved as in
								getLocalizedMessage(pageContext, key, basename)</description>
							<location chapter="16" section="16.0" />
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
	</assertions>
</spec>

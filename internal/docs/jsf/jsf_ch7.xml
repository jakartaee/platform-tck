<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2009, 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!-- =============================== Chapter 7 ============================= --> 

<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The JSF implementation must provide a default implementation 
        ActionListener that performs the following functions:
    </description>
    <location chapter="7" section="1.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                The processAction() method must call 
                FacesContext.renderResponse() in order to bypass any 
                intervening lifecycle phases, once the method returns.
            </description>
            <location chapter="7" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="false">
            <id>__NUMBER__.2</id>
            <description>
                The processAction() method must next determine the 
                logical outcome of this event, as follows:
            </description>
            <location chapter="7" section="1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" 
                           defined-by="technology" status="active" 
                           testable="true">
                    <id>__NUMBER__.2.1</id>
                    <description>
                        If the originating component has a non-null 
                        action property, retrieve the MethodBinding and 
                        call invoke() to perform the application-
                        specified processing in this action method. If 
                        the method returns non-null, call toString() on 
                        the result and use the value returned as the 
                        logical outcome.
                    </description>
                    <location chapter="7" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" 
                           defined-by="technology" status="active" 
                           testable="true">
                    <id>__NUMBER__.2.2</id>
                    <description>
                        The default logical outcome is null.
                    </description>
                    <location chapter="7" section="1.1"/>
                </assertion>
            </sub-assertions>       
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If a call is made to setViewHandler() after the first time the
        Render Response phase has executed, the call must be ignored by 
        the implementation.
    </description>
    <location chapter="7" section="1.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The default implementation simply returns the ExpressionFactory 
        from the JSP container by calling JspFactory.getDefaultFactory()
        .getJspApplicationContext(servletContext)
        .getExpressionFactory().
    </description>
    <location chapter="7" section="1.8"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The "public UIComponent createComponent(ValueExpression
        componentExpression, FacesContext context, 
        String componentType);" method has the following behavior:
    </description>
    <location chapter="7" section="1.10"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Call the getValue() method on the specified 
                ValueExpression, in the context of the specified 
                FacesContext. If this results in a non-null UIComponent 
                instance, return it as the value of this method.
            </description>
            <location chapter="7" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If the getValue() call did not return a component 
                instance, create a new component instance of the 
                specified component type, pass the new component to the
                setValue() method of the specified ValueExpression, and 
                return it.
            </description>
            <location chapter="7" section="1.10"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The default NavigationHandler implementation must behave as if
        it were performing the following algorithm (although optimized 
        implementation techniques may be utilized):
    </description>
    <location chapter="7" section="4.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                If the logical outcome value passed to the 
                handleNavigation() method is null, do not scan for 
                matching rules. This is an indication that the current 
                view should be redisplayed.
            </description>
            <location chapter="7" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Find a &lt;navigation-rule&gt; element for which the 
                view identifier (of the view in the FacesContext 
                instance for the current request) matches the 
                &lt;from-view-id&gt; matching pattern of the 
                &lt;navigation-rule&gt;. Rule instances are considered 
                in the following order:
            </description>
            <location chapter="7" section="4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" 
                           defined-by="technology" status="active" testable="true">
                    <id>__NUMBER__.2.1</id>
                    <description>
                        An exact match of the view identifier against a 
                        &lt;from-view-id&gt; pattern that does not end with an 
                        asterisk (“*”) character.
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" 
                           defined-by="technology" status="active" testable="true">
                    <id>__NUMBER__.2.2</id>
                    <description>
                        For &lt;from-view-id&gt; patterns that end with an 
                        asterisk, an exact match on characters preceding the 
                        asterisk against the prefix of the view id. If the 
                        patterns for multiple navigation rules match, pick the 
                        longest matching prefix first.
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" 
                           defined-by="technology" status="active" testable="true">
                    <id>__NUMBER__.2.3</id>
                    <description>
                        If there is a &lt;navigation-rule&gt; with a 
                        &lt;from-view-id&gt; pattern of only an asterisk3, it 
                        matches any view identifier.
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                From the &lt;avigation-case&gt; elements nested within the 
                matching &lt;navigationrule&gt; element, locate a matching 
                navigation case by matching the &lt;from-action&gt; and 
                &lt;from-outcome&gt; values against the corresponding parameter 
                values passed in to the handleNavigation() method. Navigation 
                cases are checked in the following order:
            </description>
            <location chapter="7" section="4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" 
                           defined-by="technology" status="active" testable="true">
                    <id>__NUMBER__.3.1</id>
                    <description>
                        Cases specifying both a &lt;from-action&gt; value and a 
                        &lt;from-outcome&gt; value are matched against the 
                        action expression and outcome parameters passed to the
                        handleNavigation() method (both parameters must be not 
                        null, and both must be equal to the corresponding 
                        condition values, in order to match).
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" 
                           defined-by="technology" status="active" testable="true">
                    <id>__NUMBER__.3.2</id>
                    <description>
                        Cases that specify only a &lt;from-outcome&gt; value are 
                        matched against the outcome parameter passed to the 
                        handleNavigation() method (which must be not null,
                        and equal to the corresponding condition value, to 
                        match).
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" 
                           defined-by="technology" status="active" testable="true">
                    <id>__NUMBER__.3.3</id>
                    <description>
                        Cases that specify only a &lt;from-action&gt; value are 
                        matched against the action expression parameter passed 
                        to the handleNavigation() method (which must be not 
                        null, and equal to the corresponding condition value, to 
                        match).
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                If a matching &lt;navigation-case&gt; element was located, and 
                the &lt;redirect/&gt; element was not specified in this 
                &lt;navigation-case&gt; (or the application is running in a 
                Portlet environment, where redirects are not possible), use the 
                &lt;to-view-id&gt; element of the matching case to request a new
                UIViewRoot instance from the ViewHandler instance for this 
                application, and pass it to the setViewRoot() method of the 
                FacesContext instance for the current request. Then, exit the 
                algorithm.
            </description>
            <location chapter="7" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                If a matching &lt;navigation-case&gt; element was located, the 
                &lt;redirect/&gt; element was specified in this 
                &lt;navigation-case&gt;, and the application is not running in a
                Portlet environment, use the &lt;to-view-id&gt; element of the 
                matching case to construct a context-relative path that 
                corresponds to that view id, cause the current response to
                perform an HTTP redirect to this path, and call 
                responseComplete() on the FacesContext instance for the current 
                request.
            </description>
            <location chapter="7" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                If no matching &lt;navigation-case&gt; element was located, 
                return to Step 1 and find the next matching 
                &lt;navigation-rule&gt; element (if any). If there are no more 
                matching rule elements, return without changing the current 
                view.
            </description>
            <location chapter="7" section="4.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The calculateCharacterEncoding() method must fulfill the following 
        responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Examine the Content-Type request header. If it has a charset 
                parameter extract it and return it.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If not, test for the existence of a session by calling 
                getSession(false) on the ExternalContext for this FacesContext. 
                If the session is non-null, look in the Map returned by the 
                getSessionMap() method of the ExternalContext for a value under 
                the key given by the value of the symbolic constant
                jakarta.faces.application.ViewHandler.CHARACTER_ENCODING_KEY. If a
                value is found, convert it to a String and return it.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The calculateLocale() method must fulfill the following 
        responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Attempt to match one of the locales returned by the getLocales() 
                method of the ExternalContext instance for this request, against 
                the supported locales for this application as defined in the 
                application configuration resources. Matching is performed by 
                the algorithm described in Section JSTL.8.3.2 of the JSTL 
                Specification. If a match is found, return the corresponding 
                Locale object.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Otherwise, if the application has specified a default locale in 
                the application configuration resources, return the 
                corresponding Locale object.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Otherwise, return the value returned by calling 
                Locale.getDefault().
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The calculateRenderKitId() method must fulfill the following 
        responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Return the value of the request parameter named by the symbolic 
                constant ResponseStateManager.RENDER_KIT_ID_PARAM if it is not 
                null.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Otherwise, return the value returned by
                Application.getDefaultRenderKitId() if it is not null.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Otherwise, return the value specified by the symbolic constant
                RenderKitFactory.HTML_BASIC_RENDER_KIT.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The createView() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" 
                   status="active" testable="false">
            <id>__NUMBER__.1</id>
            <description>
                Calculate the viewId that corresponds to this request, as 
                follows:
            </description>
            <location chapter="7" section="5.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active" testable="true">
                    <id>__NUMBER__.1.1</id>
                    <description>
                        If prefix mapping (such as “/faces/*”) is used for 
                        FacesServlet, the viewId is set from the extra path 
                        information of the request URI.
                    </description>
                    <location chapter="7" section="5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active" testable="true">
                    <id>__NUMBER__.1.2</id>
                    <description>
                        If suffix mapping (such as “*.faces”) is used for 
                        FacesServlet, the viewId is set from the servlet path 
                        information of the request URI, after replacing the 
                        suffix with the value of the context initialization 
                        parameter named by the symbolic constant
                        ViewHandler.DEFAULT_SUFFIX_PARAM_NAME (if no such 
                        context initialization parameter is present, use the 
                        value of the symbolic constant
                        ViewHandler.DEFAULT_SUFFIX as the replacement suffix).
                    </description>
                    <location chapter="7" section="5.2"/>
                </assertion> 
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If no viewId could be identified, or the viewId is exactly equal 
                to the servlet mapping, call the redirect() method of the 
                ExternalContext instance for this request, passing the context 
                path of this web application.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Create a new UIViewRoot object instance
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Conditionally copy the renderKitId and locale from any current 
                view for the current request (as described in the Javadocs for 
                createView()).
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false"
                   defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Return the newly created UIViewRoot.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The getActionURL() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" 
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                If the specified viewId does not start with a “/”, throw
                IllegalArgumentException.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" 
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If prefix mapping (such as “/faces/*”) is used for FacesServlet, 
                prepend the context path of the current application, and the 
                specified prefix, to the specified viewId and return the 
                completed value. For example “/cardemo/faces/chooseLocale.jsp”.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" 
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                If suffix mapping (such as “*.faces”) is used for FacesServlet, 
                and the specified viewId ends with the specified suffix, 
                replacing the suffix with the value specified by the context 
                initialization parameter named by the symbolic constant
                ViewHandler.DEFAULT_SUFFIX_NAME (if no such context 
                initialization parameter is present, use the value of the 
                symbolic constant ViewHandler.DEFAULT_SUFFIX as the replacement 
                suffix), prefix this value with the context path for the current 
                web application, and return the result. For example
                “/cardemo/chooseLocale.faces”
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The getResourceURL() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" 
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                If the specified path starts with a “/”, prefix it with the 
                context path for the current web application, and return the 
                result.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" 
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Otherwise, return the specified path value unchanged.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The initView() method must fulfill the following responsibilities:
        Call calculateCharacterEncoding(). If the result is non-null pass the 
        result to the setRequestCharacterEncoding() method of the 
        ExternalContext for this FacesContext.
    </description>
    <location chapter="7" section="5.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The renderView() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                If the current request is a ServletRequest, call the set() 
                method of the javax.servlet.jsp.jstl.core.Config class, passing 
                the current ServletRequest, the symbolic constant 
                Config.FMT_LOCALE, and the locale property of the specfied 
                UIViewRoot. This configures JSTL with the application’s
                preferred locale for rendering this response.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Update the JSTL locale attribute in request scope so that JSTL 
                picks up the new locale from the UIViewRoot.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Create a wrapper around the current response from the 
                ExternalContext and set it as the new response in the 
                ExternalContext.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                Execute the JSP page to build the view by treating the viewId as
                a context-relative path(starting with a slash character), by 
                passing it to the dispatch() method of the ExternalContext 
                associated with this request.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                Restore the original response into the ExternalContext.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                If the FacesContext has a non-null ResponseWriter create a new 
                writer using its cloneWithWriter() method, passing the 
                response’s Writer as the argument.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.7</id>
            <description>
                Set the new ResponseWriter into the FacesContext, saving the
                old one aside.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.8</id>
            <description>
                Call saveView() on the StateManager for this application, saving
                the result in a thread-safe manner for use in the writeState() 
                method of ViewHandler.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.9</id>
            <description>
                Call startDocument() on the ResponseWriter.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.10</id>
            <description>
                Call encodeAll() on the UIViewRoot.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.11</id>
            <description>
                Output any content in the wrapped response from above to the
                response, removing the wrapped response from the thread-safe 
                storage.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.12</id>
            <description>
                Call endDocument() on the ResponseWriter.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.13</id>
            <description>
                If the old ResponseWriter was not null, place the old 
                ResponseWriter back into the FacesContext.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The restoreView() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Calculate the viewId that corresponds to this request using the 
                “The ViewId derivation algorithm”.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If no viewId could be identified, return null.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Call the restoreView() method of the associated StateManager, 
                passing the FacesContext instance for the current request and 
                the calculated viewId, and return the returned UIViewRoot, 
                which may be null
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The writeState() method must Obtain the saved state stored in a 
        thread-safe manner during the invocation of renderView() and pass it to 
        the writeState() method of the StateManager for this application.
    </description>
    <location chapter="7" section="5.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"  
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The "public Object saveView(FacesContext context)" method causes the 
        tree structure and component state of the view contained in the argument 
        FacesContext to be collected, stored, and returned in a java.lang.Object
        instance that must implement java.io.Serializable. If null is returned 
        from this method, there is no state tosave.
    </description>
    <location chapter="7" section="6.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"  
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The "public boolean isSavingStateInClient(FacesContext context)" method
        will Return true if and only if the value of the ServletContext init 
        parameter named by the value of the constant 
        StateManager.STATE_SAVING_METHOD_PARAM_NAME is equal to the value of the
        constant STATE_SAVING_METHOD_CLIENT. Return false otherwise.
    </description>
    <location chapter="7" section="6.5"/>
</assertion>

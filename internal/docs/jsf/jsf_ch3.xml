<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2009, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!-- =============================== Chapter 3 ============================= -->      
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Every User Interface component may be named by a component 
        identifier, which (if utilized) must be unique among the 
        components that share a common naming container parent in a 
        component tree.
    </description>
    <location chapter="3" section="1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
    status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        Component identifiers must conform to the following rules:
    </description>
    <location chapter="3" section="1.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false"
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                They must start with a letter (as defined by the 
                Character.isLetter() method).
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false"
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Subsequent characters may be letters (as defined by the 
                Character.isLetter() method), digits as defined by the 
                Character.isDigit() method, dashes (‘-’), and 
                underscores (‘_’).
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The implementation of setValueExpression must detemine if the 
        expression is a literal by calling 
        ValueExpression.isLiteralText() on the expression argument.
    </description>
    <location chapter="3" section="1.4"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false"
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                If the expression argument is literal text, then 
                ValueExpression.getValue() must be called on the 
                expression argument.
            </description>
            <location chapter="3" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false"
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The result must be used as the value argument, along 
                with the name argument to this component
                getAttributes().put(name,value) method call.
            </description>
            <location chapter="3" section="1.4"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        For the standard component classes defined by this 
        specification, all attributes, and all properties other than id
        and parent, are value expression enabled.
    </description>
    <location chapter="3" section="1.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The specified ValueExpression must point to a read-write 
        JavaBeans property of type UIComponent(or appropriate subclass).
        Such a component binding is used at two different times 
        during the processing of a Faces Request:
    </description>
    <location chapter="3" section="1.5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                When a component instance is first created (typically by 
                virtue of being referenced by a UIComponentELTag in a 
                JSP page), the JSF implementation will retrieve the
                ValueExpression for the name binding, and call 
                getValue() on it. 
            </description>
            <location chapter="3" section="1.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" 
                    defined-by="technology" status="active" 
                    testable="true">
                    <id>__NUMBER__.1.1</id>
                    <description>
                        If this call returns a non-null UIComponent 
                        value (because the JavaBean programmatically 
                        instantiated and configured a component 
                        already), that instance will be added to the 
                        component tree that is being created. 
                    </description>
                    <location chapter="3" section="1.5"/>
                </assertion>
                <assertion required="true" impl-spec="false" 
                    defined-by="technology" status="active"
                    testable="true">
                    <id>__NUMBER__.1.2</id>
                    <description>
                        If the call returns null, a new component
                        instance will be created, added to the component 
                        tree, and setValue() will be called on the 
                        ValueBinding (which will cause the property on 
                        the JavaBean to be set to the newly created 
                        component instance).
                    </description>
                    <location chapter="3" section="1.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                When a component tree is recreated during the Restore 
                View phase of the request processing lifecycle, for each 
                component that has a ValueExpression associated with the
                name “binding”, setValue() will be called on it, passing
                the recreated component instance.
            </description>
            <location chapter="3" section="1.5"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The UIComponent.getChildren() method returns a mutable List.
        The returned List implementation must support all of the 
        required and optional methods of the List interface, as well as
        update the parent property of children that are added and 
        removed, as described in the Javadocs for this method.    
    </description>
    <location chapter="3" section="1.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If there are no children, the getChildCount() method must 
        return 0. 
    </description>
    <location chapter="3" section="1.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The getChildCount() must not cause the creation of a child 
        component list, so it is preferred over calling 
        getChildren().size() when there are no children.
    </description>
    <location chapter="3" section="1.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The Map returned by getAttributes() must also support 
        attribute-property transparency, which operates as follows:
    </description>
    <location chapter="3" section="1.10"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description> 
                When the get() method is called, if the specified 
                attribute name matches the name of a readable JavaBeans 
                property on the component implementation class, the 
                value returned will be acquired by calling the 
                appropriate property getter method, and wrapping Java
                primitive values (such as int) in their corresponding 
                wrapper classes (such as java.lang.Integer) if
                necessary. If the specified attribute name does not 
                match the name of a readable JavaBeans property on the 
                component implementation class, consult the internal 
                data-structure to in which generic attributes are 
                stored. If no entry exists in the internal 
                data-structure, see if there is a ValueExpression for 
                this attribute name by calling getValueExpression(), 
                passing the attribute name as the key. If a 
                ValueExpression exists, call getValue() on it, returning
                the result. If an ELException is thrown wrap it in a 
                FacesException and re-throw it.
            </description>
            <location chapter="3" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                When the put() method is called, if the specified 
                attribute name matches the name of a writable JavaBeans
                property on the component implementation class, the 
                appropriate property setter method will be called. If
                the specified attribute name does not match the name of
                a writable JavaBeans property, simply put the value in
                the data-structure for generic attributes.
            </description>
            <location chapter="3" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                When the remove() method is called, if the specified 
                attribute name matches the name of a JavaBeans property 
                on the component, an IllegalArgumentException must be
                thrown.
            </description>
            <location chapter="3" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                When the containsKey() method is called, if the 
                specified attribute name matches the name of a JavaBeans
                property, return false. Otherwise, return true if and 
                only if the specified attribute name exists in the 
                internal data-structure for the generic attributes.
            </description>
            <location chapter="3" section="1.10"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The following converter id values must be registered to create
        instances of the specified Converter implementation classes:
    </description>
    <location chapter="3" section="1.10"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                jakarta.faces.BigDecimal -- An instance of
                jakarta.faces.convert.BigDecimalConverter (or a subclass 
                of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                jakarta.faces.BigInteger -- An instance of
                jakarta.faces.convert.BigIntegerConverter (or a subclass 
                of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                jakarta.faces.Boolean -- An instance of
                jakarta.faces.convert.BooleanConverter (or a subclass 
                of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                jakarta.faces.Byte -- An instance of 
                jakarta.faces.convert.ByteConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                jakarta.faces.Character -- An instance of
                jakarta.faces.convert.CharacterConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                jakarta.faces.DateTime -- An instance of
                jakarta.faces.convert.DateTimeConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.7</id>
            <description>
                jakarta.faces.Double -- An instance of
                jakarta.faces.convert.DoubleConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.8</id>
            <description>
                jakarta.faces.Float -- An instance of
                jakarta.faces.convert.FloatConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.9</id>
            <description>
                jakarta.faces.Integer -- An instance of
                jakarta.faces.convert.IntegerConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.10</id>
            <description>
                jakarta.faces.Long -- An instance of 
                jakarta.faces.convert.LongConverter (or a subclass of this
                class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.11</id>
            <description>
                jakarta.faces.Number -- An instance of
                jakarta.faces.convert.NumberConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.12</id>
            <description>
                jakarta.faces.Short -- An instance of
                jakarta.faces.convert.ShortConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        A JSF implementation must register converters for all of the
        following classes using the by-type registration mechanism:
    </description>
    <location chapter="3" section="3.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                java.math.BigDecimal, and java.math.BigDecimal.TYPE --
                An instance of jakarta.faces.convert.BigDecimalConverter 
                (or a subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                java.math.BigInteger, and java.math.BigInteger.TYPE -- 
                An instance of jakarta.faces.convert.BigIntegerConverter 
                (or a subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                java.lang.Boolean, and java.lang.Boolean.TYPE -- An 
                instance of jakarta.faces.convert.BooleanConverter 
                (or a subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                java.lang.Byte, and java.lang.Byte.TYPE -- An instance 
                of jakarta.faces.convert.ByteConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                java.lang.Character, and java.lang.Character.TYPE -- An 
                instance of jakarta.faces.convert.CharacterConverter 
                (or a subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                java.lang.Double, and java.lang.Double.TYPE -- An 
                instance of jakarta.faces.convert.DoubleConverter (or a 
                subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.7</id>
            <description>
                java.lang.Float, and java.lang.Float.TYPE -- An instance
                of jakarta.faces.convert.FloatConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.8</id>
            <description>
                java.lang.Integer, and java.lang.Integer.TYPE -- An 
                instance of jakarta.faces.convert.IntegerConverter (or a 
                subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.9</id>
            <description>
                java.lang.Long, and java.lang.Long.TYPE -- An instance 
                of jakarta.faces.convert.LongConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.10</id>
            <description>
                java.lang.Short, and java.lang.Short.TYPE -- An instance
                of jakarta.faces.convert.ShortConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.11</id>
            <description>
                java.lang.Enum, and java.lang.Enum.TYPE -- An instance 
                of jakarta.faces.convert.EnumConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        A compliant implementation must allow the registration of a 
        converter for class java.lang.String and java.lang.String.TYPE 
        that will be used to convert values for these types.
    </description>
    <location chapter="3" section="3.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        A concrete UIComponent subclass that emits events of a 
        particular type must include public methods to register and 
        deregister a listener implementation.
    </description>
    <location chapter="3" section="4.5"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" 
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The following standard Validator implementations (in the
        jakarta.faces.validator package) are provided:
    </description>
    <location chapter="3" section="5.5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                DoubleRangeValidator—Checks the local value of a 
                component, which must be of any numeric type, against 
                specified maximum and/or minimum values. Standard
                identifier is “jakarta.faces.DoubleRange”.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                LengthValidator—Checks the length (i.e. number of 
                characters) of the local value of a component, which 
                must be of type String, against maximum and/or minimum 
                values. Standard identifier is “jakarta.faces.Length”.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                LongRangeValidator—Checks the local value of a 
                component, which must be of any numeric type convertible
                to long, against maximum and/or minimum values. Standard
                identifier is “jakarta.faces.LongRange”.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                MethodExpressionValidator—Wraps a MethodExpression and 
                interprets it as pointing to a method that performs 
                validation. Any exception thrown when the expression
                is invoked is wrapped in a ValidatorException in similar 
                fashion as the above validators.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
    </sub-assertions>
</assertion>
        

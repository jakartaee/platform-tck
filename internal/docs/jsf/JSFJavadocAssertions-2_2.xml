<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
  <next-available-id>3090</next-available-id>
  <previous-id>2939</previous-id>
  <technology>JSF</technology>
  <id>JSF:JAVADOC:JSF</id>
  <name>JavaServer Faces</name>
  <version>2.2</version>
  <assertions>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- UNMODIFIED ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1</id>
      <description>Construct a new exception with no detail message or root cause.</description>
      <package>jakarta.faces</package>
      <class-interface>FacesException</class-interface>
      <method name="FacesException" return-type="FacesException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces</package>
      <class-interface>FacesException</class-interface>
      <method name="FacesException" return-type="FacesException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:3</id>
      <description>Construct a new exception with the specified root cause. The detail message will be set to (cause == null ? null : cause.toString()</description>
      <package>jakarta.faces</package>
      <class-interface>FacesException</class-interface>
      <method name="FacesException" return-type="FacesException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:4</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces</package>
      <class-interface>FacesException</class-interface>
      <method name="FacesException" return-type="FacesException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:5</id>
      <description>Return the cause of this exception, or null if the cause is nonexistent or unknown.</description>
      <package>jakarta.faces</package>
      <class-interface>FacesException</class-interface>
      <method name="getCause" return-type="java.lang.Throwable" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:6</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces</package>
      <class-interface>FacesWrapper</class-interface>
      <method name="getWrapped" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:8</id>
      <description>if the web application class loader cannot be identified</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="getFactory" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:9</id>
      <description>if factoryName does not identify a standard JavaServer Faces factory name</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="getFactory" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:10</id>
      <description>if there is no configured factory implementation class for the specified factory name</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="getFactory" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:11</id>
      <description>if factoryname is null</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="getFactory" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:12</id>
      <description>Release any references to factory instances associated with the class loader for the calling web application. This method must be called during of web application shutdown.</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="releaseFactories" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:13</id>
      <description>if the web application class loader cannot be identified</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="releaseFactories" return-type="void">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:14</id>
      <description>This method will store the argument factoryName/implName mapping in such a way that #getFactory will find this mapping when searching for a match. This method has no effect if getFactory() has already been called looking for a factory for this factoryName. This method can be used by implementations to store a factory mapping while parsing the Faces configuration file</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="setFactory" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:15</id>
      <description>if factoryName does not identify a standard JavaServer Faces factory name</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="setFactory" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:16</id>
      <description>if factoryname is null</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="setFactory" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:17</id>
      <description>Register a new mapping of behavior id to the name of the corresponding Behavior class. This allows subsequent calls to createBehavior() to serve as a factory for Behavior instances.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addBehavior" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:18</id>
      <description>if behaviorId or behaviorClass is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addBehavior" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:19</id>
      <description>Register a new mapping of component type to the name of the corresponding UIComponent class. This allows subsequent calls to createComponent() to serve as a factory for UIComponent instances.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addComponent" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:20</id>
      <description>if componentType or componentClass is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addComponent" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:21</id>
      <description>Register a new mapping of converter id to the name of the corresponding Converter class. This allows subsequent calls to createConverter() to serve as a factory for Converter instances.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addConverter" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:22</id>
      <description>if converterId or converterClass is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addConverter" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:23</id>
      <description>Register a new converter class that is capable of performing conversions for the specified target class.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addConverter" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:24</id>
      <description>if targetClass or converterClass is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addConverter" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:26</id>
      <description>Provide a way for Faces applications to register an ELContextListener that will be notified on creation of ELContext instances. This listener will be called once per request. An implementation is provided that throws UnsupportedOperationException so that users that decorate the Application continue to work.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addELContextListener" return-type="void">
        <parameters>
          <parameter>ELContextListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:27</id>
      <description>Cause an the argument resolver to be added to the resolver chain as specified in section JSF.5.5.1 of the JavaServer Faces Specification. It is not possible to remove an ELResolver registered with this method, once it has been registered. It is illegal to register an ELResolver after the application has received any requests from the client. If an attempt is made to register a listener after that time, an IllegalStateException must be thrown. This restriction is in place to allow the JSP container to optimize for the common case where no additional ELResolvers are in the chain, aside from the standard ones. It is permissible to add ELResolvers before or after initialization to a CompositeELResolver that is already in the chain. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend Application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addELResolver" return-type="void">
        <parameters>
          <parameter>ELResolver</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:28</id>
      <description>Register a new mapping of validator id to the name of the corresponding Validator class. This allows subsequent calls to createValidator() to serve as a factory for Validator instances.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addValidator" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:29</id>
      <description>if validatorId or validatorClass is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addValidator" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:30</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="Application" return-type="Application" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:31</id>
      <description>Instantiate and return a new Behavior instance of the class specified by a previous call to addBehavior() for the specified behavior id.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createBehavior" return-type="jakarta.faces.component.behavior.Behavior">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:32</id>
      <description>if the Behavior cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createBehavior" return-type="jakarta.faces.component.behavior.Behavior">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:33</id>
      <description>if behaviorId is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createBehavior" return-type="jakarta.faces.component.behavior.Behavior">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:34</id>
      <description>Instantiate and return a new UIComponent instance of the class specified by a previous call to addComponent() for the specified component type. Before the component instance is returned, it must be inspected for the presence of a jakarta.faces.event.ListenerFor (or jakarta.faces.event.ListenersFor) or ResourceDependency (or ResourceDependencies) annotation. If any of these annotations are present, the action listed in jakarta.faces.event.ListenerFor or ResourceDependency must be taken on the component, before it is returned from this method. This variant of createComponent must not inspect the jakarta.faces.render.Renderer for the component to be returned for any of the afore mentioned annotations. Such inspection is the province of #createComponent(ValueExpression, FacesContext, String, String) or #createComponent(FacesContext, String, String).</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:35</id>
      <description>if a UIComponent of the specified type cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:36</id>
      <description>if componentType is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:37</id>
      <description>Wrap the argument componentBinding in an implementation of ValueExpression and call through to #createComponent(jakarta.el.ValueExpression,jakarta.faces.context.FacesContext,java.lang.String).</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:38</id>
      <description>if a UIComponent cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:39</id>
      <description>if any parameter is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:40</id>
      <description>Call the getValue() method on the specified ValueExpression. If it returns a UIComponent instance, return it as the value of this method. If it does not, instantiate a new UIComponent instance of the specified component type, pass the new component to the setValue() method of the specified ValueExpression, and return it. Before the component instance is returned, it must be inspected for the presence of a jakarta.faces.event.ListenerFor (or jakarta.faces.event.ListenersFor) or ResourceDependency (or ResourceDependencies) annotation. If any of these annotations are present, the action listed in jakarta.faces.event.ListenerFor or ResourceDependency must be taken on the component, before it is returned from this method. This variant of createComponent must not inspect the jakarta.faces.render.Renderer for the component to be returned for any of the afore mentioned annotations. Such inspection is the province of #createComponent(ValueExpression, FacesContext, String, String) or #createComponent(FacesContext, String, String).</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:41</id>
      <description>if a UIComponent cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:42</id>
      <description>if any parameter is null A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:43</id>
      <description>Like #createComponent(ValueExpression, FacesContext, String) except the Renderer for the component to be returned must be inspected for the annotations mentioned in #createComponent(ValueExpression, FacesContext, String) as specified in the documentation for that method. The Renderer instance to inspect must be obtained by calling FacesContext#getRenderKit and calling jakarta.faces.render.RenderKit#getRenderer on the result, passing the argument componentType as the first argument and the result of calling UIComponent#getFamily on the newly created component as the second argument. If no such Renderer can be found, a message must be logged with a helpful error message. Otherwise, UIComponent#setRendererType must be called on the newly created UIComponent instance, passing the argument rendererType as the argument. A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:44</id>
      <description>if a UIComponent cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:45</id>
      <description>if any of the parameters componentExpression, context, or componentType are null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:46</id>
      <description>Like #createComponent(String) except the Renderer for the component to be returned must be inspected for the annotations mentioned in #createComponent(ValueExpression, FacesContext, String) as specified in the documentation for that method. The Renderer instance to inspect must be obtained by calling FacesContext#getRenderKit and calling jakarta.faces.render.RenderKit#getRenderer on the result, passing the argument componentType as the first argument and the result of calling UIComponent#getFamily on the newly created component as the second argument. If no such Renderer can be found, a message must be logged with a helpful error message. Otherwise, UIComponent#setRendererType must be called on the newly created UIComponent instance, passing the argument rendererType as the argument. A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:47</id>
      <description>if a UIComponent cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:48</id>
      <description>if any of the parameters context, or componentType are null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:50</id>
      <description>if a UIComponent from the Resource cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:51</id>
      <description>if any parameter is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:52</id>
      <description>if unable, for any reason, to obtain a ViewDeclarationLanguage instance as described above.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:53</id>
      <description>Instantiate and return a new Converter instance of the class specified by a previous call to addConverter() for the specified converter id. If the toLowerCase() of the String represenation of the value of the "jakarta.faces.DATETIMECONVERTER_DEFAULT_TIMEZONE_IS_SYSTEM_TIMEZONE" application configuration parameter is "true" (without the quotes) and the Converter instance to be returned is an instance of jakarta.faces.convert.DateTimeConverter, jakarta.faces.convert.DateTimeConverter#setTimeZone must be called, passing the return from TimeZone.getDefault(). The argument converter must be inspected for the presence of the jakarta.faces.application.ResourceDependency annotation. If the ResourceDependency annotation is present, the action described in ResourceDependency must be taken. If the ResourceDependency annotation is not present, the argument converter must be inspected for the presence of the jakarta.faces.application.ResourceDependencies annotation. If the ResourceDependencies annotation is present, the action described in ResourceDependencies must be taken.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createConverter" return-type="jakarta.faces.convert.Converter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:54</id>
      <description>if the Converter cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createConverter" return-type="jakarta.faces.convert.Converter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:55</id>
      <description>if converterId is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createConverter" return-type="jakarta.faces.convert.Converter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:56</id>
      <description>Instantiate and return a new Converter instance of the class that has registered itself as capable of performing conversions for objects of the specified type. If no such Converter class can be identified, return null. To locate an appropriate Converter class, the following algorithm is performed, stopping as soon as an appropriate Converter class is found: Locate a Converter registered for the target class itself. Locate a Converter registered for interfaces that are implemented by the target class (directly or indirectly). Locate a Converter registered for the superclass (if any) of the target class, recursively working up the inheritance hierarchy. If the Converter has a single argument constructor that accepts a Class, instantiate the Converter using that constructor, passing the argument targetClass as the sole argument. Otherwise, simply use the zero-argument constructor. If the toLowerCase() of the String represenation of the value of the "jakarta.faces.DATETIMECONVERTER_DEFAULT_TIMEZONE_IS_SYSTEM_TIMEZONE" application configuration parameter is "true" (without the quotes) and the Converter instance to be returned is an instance of jakarta.faces.convert.DateTimeConverter, jakarta.faces.convert.DateTimeConverter#setTimeZone must be called, passing the return from TimeZone.getDefault().</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createConverter" return-type="jakarta.faces.convert.Converter">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:57</id>
      <description>if the Converter cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createConverter" return-type="jakarta.faces.convert.Converter">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:58</id>
      <description>if targetClass is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createConverter" return-type="jakarta.faces.convert.Converter">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:59</id>
      <description>Call #getExpressionFactory then call ExpressionFactory#createMethodExpression, passing the given arguments, and wrap the result in a MethodBinding implementation, returning it.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createMethodBinding" return-type="jakarta.faces.el.MethodBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:60</id>
      <description>if the specified ref has invalid syntax</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createMethodBinding" return-type="jakarta.faces.el.MethodBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
        <throw>jakarta.faces.el.ReferenceSyntaxException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:61</id>
      <description>if ref is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createMethodBinding" return-type="jakarta.faces.el.MethodBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:62</id>
      <description>Instantiate and return a new Validator instance of the class specified by a previous call to addValidator() for the specified validator id. The argument validator must be inspected for the presence of the jakarta.faces.application.ResourceDependency annotation. If the ResourceDependency annotation is present, the action described in ResourceDependency must be taken. If the ResourceDependency annotation is not present, the argument validator must be inspected for the presence of the jakarta.faces.application.ResourceDependencies annotation. If the ResourceDependencies annotation is present, the action described in ResourceDependencies must be taken.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createValidator" return-type="jakarta.faces.validator.Validator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:63</id>
      <description>if a Validator of the specified id cannot be created</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createValidator" return-type="jakarta.faces.validator.Validator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:64</id>
      <description>if validatorId is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createValidator" return-type="jakarta.faces.validator.Validator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:65</id>
      <description>Call #getExpressionFactory then call ExpressionFactory#createValueExpression, passing the argument ref, Object.class for the expectedType, and null, for the fnMapper.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:66</id>
      <description>if the specified ref has invalid syntax</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.el.ReferenceSyntaxException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:67</id>
      <description>if ref is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:68</id>
      <description>Get a value by evaluating an expression. Call #getExpressionFactory then call ExpressionFactory#createValueExpression passing the argument expression and expectedType. Call FacesContext#getELContext and pass it to ValueExpression#getValue, returning the result. An implementation is provided that throws UnsupportedOperationException so that users that decorate the Application continue to work.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="evaluateExpressionGet" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:69</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="evaluateExpressionGet" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>ELException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:71</id>
      <description>Return an Iterator over the set of currently registered behavior ids for this Application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getBehaviorIds" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:72</id>
      <description>Return an Iterator over the set of currently defined component types for this Application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getComponentTypes" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:73</id>
      <description>Return an Iterator over the set of currently registered converter ids for this Application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getConverterIds" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:74</id>
      <description>Return an Iterator over the set of Class instances for which Converter classes have been explicitly registered.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getConverterTypes" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:75</id>
      <description>Return the default Locale for this application. If not explicitly set, null is returned.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getDefaultLocale" return-type="java.util.Locale" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:76</id>
      <description>Return the renderKitId to be used for rendering this application. If not explicitly set, null is returned.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getDefaultRenderKitId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:77</id>
      <description>Return an immutable Map over the set of currently registered default validator IDs and their class name for this Application. An implementation is provided that returns Collections.emptyMap so that users that decorate the Application continue to work.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getDefaultValidatorInfo" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:78</id>
      <description>If no calls have been made to #addELContextListener, this method must return an empty array. Otherwise, return an array representing the list of listeners added by calls to #addELContextListener. An implementation is provided that throws UnsupportedOperationException so that users that decorate the Application continue to work.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getELContextListeners" return-type="ELContextListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:79</id>
      <description>Return the singleton ELResolver instance to be used for all EL resolution. This is actually an instance of jakarta.el.CompositeELResolver that must contain the following ELResolver instances in the following order: ELResolver instances declared using the element in the application configuration resources. An implementation that wraps the head of the legacy VariableResolver chain, as per section VariableResolver ChainWrapper in Chapter JSF.5 in the spec document. An implementation that wraps the head of the legacy PropertyResolver chain, as per section PropertyResolver ChainWrapper in Chapter JSF.5 in the spec document. Any ELResolver instances added by calls to #addELResolver. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend Application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getELResolver" return-type="ELResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:80</id>
      <description>Return the ExpressionFactory instance for this application. This instance is used by the convenience method #evaluateExpressionGet. The implementation must return the ExpressionFactory from the JSP container by calling JspFactory.getDefaultFactory().getJspApplicationContext(servletContext).getExpressionFactory(). An implementation is provided that throws UnsupportedOperationException so that users that decorate the Application continue to work.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getExpressionFactory" return-type="ExpressionFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:81</id>
      <description>Return the fully qualified class name of the ResourceBundle to be used for JavaServer Faces messages for this application. If not explicitly set, null is returned.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getMessageBundle" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:82</id>
      <description>Return the NavigationHandler instance that will be passed the outcome returned by any invoked application action for this web application. If not explicitly set, a default implementation must be provided that performs the functions described in the NavigationHandler class description.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getNavigationHandler" return-type="jakarta.faces.application.NavigationHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:83</id>
      <description>Return the project stage for the currently running application instance. The default value is ProjectStage#Production The implementation of this method must perform the following algorithm or an equivalent with the same end result to determine the value to return. If the value has already been determined by a previous call to this method, simply return that value. Look for a JNDI environment entry under the key given by the value of ProjectStage#PROJECT_STAGE_JNDI_NAME (return type of java.lang.String). If found, continue with the algorithm below, otherwise, look for an entry in the initParamMap of the ExternalContext from the current FacesContext with the key given by the value of ProjectStage#PROJECT_STAGE_PARAM_NAME If a value is found, see if an enum constant can be obtained by calling ProjectStage.valueOf(), passing the value from the initParamMap. If this succeeds without exception, save the value and return it. If not found, or any of the previous attempts to discover the enum constant value have failed, log a descriptive error message, assign the value as ProjectStage.Production and return it. A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getProjectStage" return-type="jakarta.faces.application.ProjectStage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:84</id>
      <description>Return a PropertyResolver instance that wraps the ELResolver instance that Faces provides to the unified EL for the resolution of expressions that appear programmatically in an application. Note that this no longer returns the default PropertyResolver since that class is now a no-op that aids in allowing custom PropertyResolvers to affect the EL resolution process.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getPropertyResolver" return-type="jakarta.faces.el.PropertyResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:85</id>
      <description>Find a ResourceBundle as defined in the application configuration resources under the specified name. If a ResourceBundle was defined for the name, return an instance that uses the locale of the current jakarta.faces.component.UIViewRoot. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getResourceBundle" return-type="java.util.ResourceBundle">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:86</id>
      <description>if a bundle was defined, but not resolvable</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getResourceBundle" return-type="java.util.ResourceBundle">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:87</id>
      <description>if ctx == null || name == null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getResourceBundle" return-type="java.util.ResourceBundle">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:88</id>
      <description>Return the singleton, stateless, thread-safe ResourceHandler for this application. The JSF implementation must support the following techniques for declaring an alternate implementation of ResourceHandler. The ResourceHandler implementation is declared in the application configuration resources by giving the fully qualified class name as the value of the element within the element. In all of the above cases, the runtime must employ the decorator pattern as for every other pluggable artifact in JSF. A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getResourceHandler" return-type="jakarta.faces.application.ResourceHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:89</id>
      <description>Return the StateManager instance that will be utilized during the Restore View and Render Response phases of the request processing lifecycle. If not explicitly set, a default implementation must be provided that performs the functions described in the StateManager description in the JavaServer Faces Specification.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getStateManager" return-type="jakarta.faces.application.StateManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:90</id>
      <description>Return an Iterator over the supported Locales for this appication.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getSupportedLocales" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:91</id>
      <description>Return an Iterator over the set of currently registered validator ids for this Application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getValidatorIds" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:92</id>
      <description>Return the VariableResolver that wraps the ELResolver instance that Faces provides to the unified EL for the resolution of expressions that appear programmatically in an application. The implementation of the VariableResolvermust pass null as the base argument for any methods invoked on the underlying ELResolver. Note that this method no longer returns the default VariableResolver, since that class now is a no-op that aids in allowing custom VariableResolvers to affect the EL resolution process.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getVariableResolver" return-type="jakarta.faces.el.VariableResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:93</id>
      <description>Return the ViewHandler instance that will be utilized during the Restore View and Render Response phases of the request processing lifecycle. If not explicitly set, a default implementation must be provided that performs the functions described in the ViewHandler description in the JavaServer Faces Specification.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getViewHandler" return-type="jakarta.faces.application.ViewHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:94</id>
      <description>If jakarta.faces.context.FacesContext#isProcessingEvents() is true and there are one or more listeners for events of the type represented by systemEventClass, call those listeners, passing source as the source of the event. The implementation should be as fast as possible in determining whether or not a listener for the given systemEventClass and source has been installed, and should return immediately once such a determination has been made. The implementation of publishEvent must honor the requirements stated in #subscribeToEvent regarding the storage and retrieval of listener instances. Specifically, if #subscribeToEvent(Class,Class,SystemEventListener) was called, the sourceClass argument must match exactly the Class of the source argument in the call to publishEvent(). The implementation must not do any inheritance hierarachy inspection when looking for a match between the sourceClass passed to #subscribeToEvent(Class,Class,SystemEventListener) and the sourceClass passed to publishEvent() in order to find any listeners to which the event should be published. In the case where the Class of the source argument does not match the Class of the sourceClass used when the listener was subscribed using subscribeToEvent(), #publishEvent(FacesContext,Class,Class,Object) can be used to provide the Class used to perform the listener lookup and match. The default implementation must implement an algorithm semantically equivalent to the following to locate listener instances and to invoke them. If the source argument implements jakarta.faces.event.SystemEventListenerHolder, call jakarta.faces.event.SystemEventListenerHolder#getListenersForEventClass on it, passing the systemEventClass argument. If the list is not empty, perform algorithm traverseListenerList on the list. If any view level listeners have been installed by previous calls to #subscribeToEvent(Class, Class, jakarta.faces.event.SystemEventListener) on the jakarta.faces.component.UIViewRoot, perform algorithm traverseListenerList on the list of listeners for that event installed on the UIViewRoot. If any Application level listeners have been installed by previous calls to #subscribeToEvent(Class, Class, jakarta.faces.event.SystemEventListener), perform algorithm traverseListenerList on the list. If any Application level listeners have been installed by previous calls to #subscribeToEvent(Class, jakarta.faces.event.SystemEventListener), perform algorithm traverseListenerList on the list. If the act of invoking the processListener method causes an jakarta.faces.event.AbortProcessingException to be thrown, processing of the listeners must be aborted, no further processing of the listeners for this event must take place, and the exception must be logged with Level.SEVERE. Algorithm traverseListenerList: For each listener in the list, Call jakarta.faces.event.SystemEventListener#isListenerForSource, passing the source argument. If this returns false, take no action on the listener. Otherwise, if the event to be passed to the listener instances has not yet been constructed, construct the event, passing source as the argument to the one-argument constructor that takes an Object. This same event instance must be passed to all listener instances. Call jakarta.faces.event.SystemEvent#isAppropriateListener, passing the listener instance as the argument. If this returns false, take no action on the listener. Call jakarta.faces.event.SystemEvent#processListener, passing the listener instance. A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="publishEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:95</id>
      <description>if either context, systemEventClass or source is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="publishEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:96</id>
      <description>This method functions exactly like #publishEvent(FacesContext,Class,Object), except the run-time must use the argument sourceBaseType to find the matching listener instead of using the Class of the source argument. A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="publishEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:98</id>
      <description>Remove the argument listener from the list of ELContextListeners. If listener is null, no exception is thrown and no action is performed. If listener is not in the list, no exception is thrown and no action is performed. An implementation is provided that throws UnsupportedOperationException so that users that decorate the Application continue to work.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="removeELContextListener" return-type="void">
        <parameters>
          <parameter>ELContextListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:99</id>
      <description>Set the default ActionListener to be registered for all jakarta.faces.component.ActionSource components.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:100</id>
      <description>if listener is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:101</id>
      <description>Set the default Locale for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setDefaultLocale" return-type="void">
        <parameters>
          <parameter>java.util.Locale</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:102</id>
      <description>if locale is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setDefaultLocale" return-type="void">
        <parameters>
          <parameter>java.util.Locale</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:103</id>
      <description>Set the renderKitId to be used to render this application. Unless the client has provided a custom ViewHandler that supports the use of multiple jakarta.faces.render.RenderKit instances in the same application, this method must only be called at application startup, before any Faces requests have been processed. This is a limitation of the current Specification, and may be lifted in a future release.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setDefaultRenderKitId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:104</id>
      <description>Set the fully qualified class name of the ResourceBundle to be used for JavaServer Faces messages for this application. See the JavaDocs for the java.util.ResourceBundle class for more information about the syntax for resource bundle names.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setMessageBundle" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:105</id>
      <description>if bundle is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setMessageBundle" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:106</id>
      <description>Set the NavigationHandler instance that will be passed the outcome returned by any invoked application action for this web application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setNavigationHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.NavigationHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:107</id>
      <description>if handler is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setNavigationHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.NavigationHandler</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:108</id>
      <description>Set the PropertyResolver instance that will be utilized to resolve method and value bindings. This method is now deprecated but the implementation must cause the argument to be set as the head of the legacy PropertyResolver chain, replacing any existing value that was set from the application configuration resources. It is illegal to call this method after the application has received any requests from the client. If an attempt is made to register a listener after that time it must have no effect.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setPropertyResolver" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.PropertyResolver</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:109</id>
      <description>if resolver is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setPropertyResolver" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.PropertyResolver</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:110</id>
      <description>if called after the first request to the jakarta.faces.webapp.FacesServlet has been serviced.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setPropertyResolver" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.PropertyResolver</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:111</id>
      <description>Set the ResourceHandler instance that will be utilized for rendering the markup for resources, and for satisfying client requests to serve up resources.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setResourceHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ResourceHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:112</id>
      <description>if this method is called after at least one request has been processed by the Lifecycle instance for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setResourceHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ResourceHandler</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:113</id>
      <description>if resourceHandler is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setResourceHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ResourceHandler</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:114</id>
      <description>Set the StateManager instance that will be utilized during the Restore View and Render Response phases of the request processing lifecycle.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setStateManager" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.StateManager</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:115</id>
      <description>if this method is called after at least one request has been processed by the Lifecycle instance for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setStateManager" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.StateManager</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:116</id>
      <description>if manager is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setStateManager" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.StateManager</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:117</id>
      <description>Set the Locale instances representing the supported Locales for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setSupportedLocales" return-type="void">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:118</id>
      <description>if the argument newLocales is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setSupportedLocales" return-type="void">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:119</id>
      <description>Set the VariableResolver instance that will be consulted to resolve method and value bindings. This method is now deprecated but the implementation must cause the argument to be set as the head of the legacy VariableResolver chain, replacing any existing value that was set from the application configuration resources. It is illegal to call this method after the application has received any requests from the client. If an attempt is made to register a listener after that time it must have no effect.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setVariableResolver" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.VariableResolver</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:120</id>
      <description>if resolver is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setVariableResolver" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.VariableResolver</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:121</id>
      <description>if called after the first request to the jakarta.faces.webapp.FacesServlet has been serviced.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setVariableResolver" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.VariableResolver</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:122</id>
      <description>Set the ViewHandler instance that will be utilized during the Restore View and Render Response phases of the request processing lifecycle.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setViewHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ViewHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:123</id>
      <description>if this method is called after at least one request has been processed by the Lifecycle instance for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setViewHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ViewHandler</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:124</id>
      <description>if handler is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setViewHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ViewHandler</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:126</id>
      <description>if any combination of systemEventClass, or listener are null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:127</id>
      <description>Install the listener instance referenced by argument listener into application as a listener for events of type systemEventClass. The default implementation simply calls through to #subscribeToEvent(Class, Class, jakarta.faces.event.SystemEventListener) passing null as the sourceClass argument A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:128</id>
      <description>if any combination of systemEventClass, or listener are null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:130</id>
      <description>if any combination of context, systemEventClass, or listener are null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:132</id>
      <description>if any combination of context, systemEventClass, or listener are null. http://java.sun.com/javaee/javaserverfaces/reference/api/index.html</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:133</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationFactory</class-interface>
      <method name="ApplicationFactory" return-type="ApplicationFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:134</id>
      <description>Create (if needed) and return an Application instance for this web application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationFactory</class-interface>
      <method name="getApplication" return-type="jakarta.faces.application.Application" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:135</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.ApplicationFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:136</id>
      <description>Replace the Application instance that will be returned for this web application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationFactory</class-interface>
      <method name="setApplication" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.Application</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:137</id>
      <description>if application is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationFactory</class-interface>
      <method name="setApplication" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.Application</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:138</id>
      <description>The default behavior of this method is to call Application#addBehavior(String, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addBehavior" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:139</id>
      <description>The default behavior of this method is to call Application#addComponent(String, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addComponent" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:140</id>
      <description>The default behavior of this method is to call Application#addConverter(String, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addConverter" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:141</id>
      <description>The default behavior of this method is to call Application#addConverter(Class, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addConverter" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:142</id>
      <description>The default behavior of this method is to call Application#addDefaultValidatorId(String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addDefaultValidatorId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:143</id>
      <description>The default behavior of this method is to call Application#addELContextListener(jakarta.el.ELContextListener) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addELContextListener" return-type="void">
        <parameters>
          <parameter>ELContextListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:144</id>
      <description>The default behavior of this method is to call Application#addELResolver(jakarta.el.ELResolver) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addELResolver" return-type="void">
        <parameters>
          <parameter>ELResolver</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:145</id>
      <description>The default behavior of this method is to call Application#addValidator(String, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addValidator" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:146</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="ApplicationWrapper" return-type="ApplicationWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:147</id>
      <description>The default behavior of this method is to call Application#createBehavior(String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createBehavior" return-type="jakarta.faces.component.behavior.Behavior">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:148</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createBehavior" return-type="jakarta.faces.component.behavior.Behavior">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:149</id>
      <description>The default behavior of this method is to call Application#createComponent(String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:150</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:153</id>
      <description>The default behavior of this method is to call Application#createComponent(jakarta.el.ValueExpression, jakarta.faces.context.FacesContext, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:154</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:155</id>
      <description>The default behavior of this method is to call Application#createComponent(jakarta.el.ValueExpression, jakarta.faces.context.FacesContext, String, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>ValueExpression</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:156</id>
      <description>The default behavior of this method is to call Application#createComponent(jakarta.faces.context.FacesContext, String, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:157</id>
      <description>The default behavior of this method is to call Application#createComponent(jakarta.faces.context.FacesContext, Resource) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:158</id>
      <description>The default behavior of this method is to call Application#createConverter(String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createConverter" return-type="jakarta.faces.convert.Converter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:159</id>
      <description>The default behavior of this method is to call Application#createConverter(Class) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createConverter" return-type="jakarta.faces.convert.Converter">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:162</id>
      <description>The default behavior of this method is to call Application#createValidator(String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createValidator" return-type="jakarta.faces.validator.Validator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:163</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createValidator" return-type="jakarta.faces.validator.Validator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:164</id>
      <description>The default behavior of this method is to call Application#createValueBinding(String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:165</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.el.ReferenceSyntaxException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:168</id>
      <description>The default behavior of this method is to call Application#getActionListener on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getActionListener" return-type="jakarta.faces.event.ActionListener" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:169</id>
      <description>The default behavior of this method is to call Application#getBehaviorIds on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getBehaviorIds" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:170</id>
      <description>The default behavior of this method is to call Application#getComponentTypes on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getComponentTypes" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:171</id>
      <description>The default behavior of this method is to call Application#getConverterIds on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getConverterIds" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:172</id>
      <description>The default behavior of this method is to call Application#getConverterTypes on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getConverterTypes" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:173</id>
      <description>The default behavior of this method is to call Application#getDefaultLocale on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getDefaultLocale" return-type="java.util.Locale" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:174</id>
      <description>The default behavior of this method is to call Application#getDefaultRenderKitId on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getDefaultRenderKitId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:175</id>
      <description>The default behavior of this method is to call Application#getDefaultValidatorInfo on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getDefaultValidatorInfo" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:176</id>
      <description>The default behavior of this method is to call Application#getELContextListeners on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getELContextListeners" return-type="ELContextListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:177</id>
      <description>The default behavior of this method is to call Application#getELResolver on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getELResolver" return-type="ELResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:178</id>
      <description>The default behavior of this method is to call Application#getExpressionFactory on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getExpressionFactory" return-type="ExpressionFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:179</id>
      <description>The default behavior of this method is to call Application#getMessageBundle on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getMessageBundle" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:180</id>
      <description>The default behavior of this method is to call Application#getNavigationHandler on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getNavigationHandler" return-type="jakarta.faces.application.NavigationHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:181</id>
      <description>The default behavior of this method is to call Application#getProjectStage on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getProjectStage" return-type="jakarta.faces.application.ProjectStage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:183</id>
      <description>The default behavior of this method is to call Application#getResourceBundle(jakarta.faces.context.FacesContext, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getResourceBundle" return-type="java.util.ResourceBundle">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:184</id>
      <description>The default behavior of this method is to call Application#getResourceHandler on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getResourceHandler" return-type="jakarta.faces.application.ResourceHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:185</id>
      <description>The default behavior of this method is to call Application#getStateManager on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getStateManager" return-type="jakarta.faces.application.StateManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:186</id>
      <description>The default behavior of this method is to call Application#getSupportedLocales on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getSupportedLocales" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:187</id>
      <description>The default behavior of this method is to call Application#getValidatorIds on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getValidatorIds" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:189</id>
      <description>The default behavior of this method is to call Application#getViewHandler on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getViewHandler" return-type="jakarta.faces.application.ViewHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:190</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.Application" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:191</id>
      <description>The default behavior of this method is to call Application#publishEvent(jakarta.faces.context.FacesContext, Class, Object) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="publishEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:192</id>
      <description>The default behavior of this method is to call Application#publishEvent(jakarta.faces.context.FacesContext, Class, Class, Object) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="publishEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:193</id>
      <description>The default behavior of this method is to call Application#removeELContextListener(jakarta.el.ELContextListener) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="removeELContextListener" return-type="void">
        <parameters>
          <parameter>ELContextListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:194</id>
      <description>The default behavior of this method is to call Application#setActionListener(jakarta.faces.event.ActionListener) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:195</id>
      <description>The default behavior of this method is to call Application#setDefaultLocale(java.util.Locale) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setDefaultLocale" return-type="void">
        <parameters>
          <parameter>java.util.Locale</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:196</id>
      <description>The default behavior of this method is to call Application#setDefaultRenderKitId(String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setDefaultRenderKitId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:197</id>
      <description>The default behavior of this method is to call Application#setMessageBundle(String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setMessageBundle" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:198</id>
      <description>The default behavior of this method is to call Application#setNavigationHandler(NavigationHandler) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setNavigationHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.NavigationHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:200</id>
      <description>The default behavior of this method is to call Application#setResourceHandler(ResourceHandler) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setResourceHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ResourceHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:201</id>
      <description>The default behavior of this method is to call Application#setStateManager(StateManager) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setStateManager" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.StateManager</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:202</id>
      <description>The default behavior of this method is to call Application#setSupportedLocales(java.util.Collection) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setSupportedLocales" return-type="void">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:204</id>
      <description>The default behavior of this method is to call Application#setViewHandler(ViewHandler) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setViewHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ViewHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:205</id>
      <description>The default behavior of this method is to call Application#subscribeToEvent(Class, Class, jakarta.faces.event.SystemEventListener) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:206</id>
      <description>The default behavior of this method is to call Application#subscribeToEvent(Class, jakarta.faces.event.SystemEventListener) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:207</id>
      <description>The default behavior of this method is to call Application#unsubscribeFromEvent(Class, Class, jakarta.faces.event.SystemEventListener) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:208</id>
      <description>The default behavior of this method is to call Application#unsubscribeFromEvent(Class, jakarta.faces.event.SystemEventListener) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:209</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="ConfigurableNavigationHandler" return-type="ConfigurableNavigationHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:210</id>
      <description>Return the NavigationCase representing the navigation that would be taken had NavigationHandler#handleNavigation been called with the same arguments or null if there is no such case.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="getNavigationCase" return-type="jakarta.faces.application.NavigationCase">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:211</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="getNavigationCase" return-type="jakarta.faces.application.NavigationCase">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:212</id>
      <description>Return a Map where the keys are values and the values are Set where each element in the Set is a NavigationCase that applies to that . The implementation must support live modifications to this Map.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="getNavigationCases" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:214</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="performNavigation" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:215</id>
      <description>Construct a new jakarta.faces.application.FacesMessage with no initial values. The severity is set to Severity.INFO.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="FacesMessage" return-type="FacesMessage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:216</id>
      <description>Construct a new jakarta.faces.application.FacesMessage with just a summary. The detail is null, the severity is set to Severity.INFO.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="FacesMessage" return-type="FacesMessage">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:217</id>
      <description>Construct a new jakarta.faces.application.FacesMessage with the specified initial values. The severity is set to Severity.INFO.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="FacesMessage" return-type="FacesMessage">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:218</id>
      <description>Construct a new FacesMessage with the specified initial values.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="FacesMessage" return-type="FacesMessage">
        <parameters>
          <parameter>jakarta.faces.application.FacesMessage.FacesMessage.Severity</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:219</id>
      <description>Return the localized detail text. If no localized detail text has been defined for this message, return the localized summary text instead.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="getDetail" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:220</id>
      <description>Return the severity level.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="getSeverity" return-type="jakarta.faces.application.FacesMessage.FacesMessage.Severity" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:221</id>
      <description>Return the localized summary text.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="getSummary" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:222</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="isRendered" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:223</id>
      <description>Marks this message as having been rendered to the client.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="rendered" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:224</id>
      <description>Set the localized detail text.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="setDetail" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:225</id>
      <description>Set the severity level.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="setSeverity" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.FacesMessage.FacesMessage.Severity</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:226</id>
      <description>if the specified severity level is not one of the supported values</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="setSeverity" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.FacesMessage.FacesMessage.Severity</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:227</id>
      <description>Set the localized summary text.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage</class-interface>
      <method name="setSummary" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:228</id>
      <description>Compare this jakarta.faces.application.FacesMessage.Severity instance to the specified one. Returns a negative integer, zero, or a positive integer if this object is less than, equal to, or greater than the specified object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage.Severity</class-interface>
      <method name="compareTo" return-type="int">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:229</id>
      <description>Return the ordinal value of this FacesMessage.Severity instance.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage.Severity</class-interface>
      <method name="getOrdinal" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:230</id>
      <description>Return a String representation of this FacesMessage.Severity instance.</description>
      <package>jakarta.faces.application</package>
      <class-interface>FacesMessage.Severity</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:231</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="equals" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:232</id>
      <description>Construct an absolute URL to this NavigationCase instance using jakarta.faces.application.ViewHandler#getActionURL on the path portion of the url.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getActionURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:233</id>
      <description>if the process of constructing the URL causes this exception to be thrown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getActionURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:234</id>
      <description>Construct an absolute URL suitable for a bookmarkable link to this NavigationCase instance using jakarta.faces.application.ViewHandler#getBookmarkableURL on the path portion of the url. This URL may include view parameters specified as metadata within the view.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getBookmarkableURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:235</id>
      <description>if the process of constructing the URL causes this exception to be thrown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getBookmarkableURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:237</id>
      <description>exceptions encountered during the process of evaluating the expression or obtaining its value.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getCondition" return-type="java.lang.Boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>any</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:238</id>
      <description>Return the for this</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getFromAction" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:239</id>
      <description>Return the for this</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getFromOutcome" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:240</id>
      <description>Return the of the inside which this is nested.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getFromViewId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:241</id>
      <description>Return the parameters to be included for navigation cases requiring a redirect. If no parameters are defined, null will be returned. The keys in the Map are parameter names. For each key, the corresponding value is a List of unconverted values.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getParameters" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:242</id>
      <description>Construct an absolute URL suitable for a "redirect" to this NavigationCase instance using jakarta.faces.application.ViewHandler#getRedirectURL on the path portion of the url.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getRedirectURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:243</id>
      <description>if the process of constructing the URL causes this exception to be thrown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getRedirectURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:244</id>
      <description>Construct an absolute URL to this NavigationCase instance using jakarta.faces.application.ViewHandler#getResourceURL on the path portion of the url.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getResourceURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:245</id>
      <description>if the process of constructing the URL causes this exception to be thrown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getResourceURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:246</id>
      <description>Evaluates the for this</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getToViewId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:247</id>
      <description>Test if this navigation case has an associated element.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="hasCondition" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:248</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="hashCode" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:249</id>
      <description>Return the value for this . This will be true if the view parametets should be encoded into the redirect URL (only applies to redirect case)</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="isIncludeViewParams" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:250</id>
      <description>Return the value for this . This will be true if the new view should be navigated to via a jakarta.faces.context.ExternalContext#redirect(String)</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="isRedirect" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:251</id>
      <description>Construct a new NavigationCase based on the provided arguments. See section JSF.7.4.2 for how a NavigationCase is used by the standard ConfigurableNavigationHandler</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="NavigationCase" return-type="NavigationCase">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
          <parameter>boolean</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:252</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:253</id>
      <description>Perform navigation processing based on the state information in the specified FacesContext, plus the outcome string returned by an executed application action. If the implementation class also extends ConfigurableNavigationHandler, the implementation must guarantee that the logic used in a call to ConfigurableNavigationHandler#getNavigationCase is used in this method to determine the correct navigation. This method must set the render targets (used in partial rendering) to render all invoking jakarta.faces.context.PartialViewContext#setRenderAll) if the view identifier has changed as the result of an application action (to take into account Ajax requests).</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandler</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:254</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandler</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:255</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandler</class-interface>
      <method name="NavigationHandler" return-type="NavigationHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:256</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ProjectStage</class-interface>
      <method name="valueOf" return-type="jakarta.faces.application.ProjectStage">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:257</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ProjectStage</class-interface>
      <method name="values" return-type="jakarta.faces.application.ProjectStage[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:258</id>
      <description>Return the MIME content-type for this resource.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="getContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:259</id>
      <description>If the current request is a resource request, (that is, ResourceHandler#isResourceRequest returns true), return an InputStream containing the bytes of the resource. Otherwise, throw an IOException.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="getInputStream" return-type="java.io.InputStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:260</id>
      <description>if the current request is not a resource request.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="getInputStream" return-type="java.io.InputStream">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:261</id>
      <description>Return the libraryName for this resource. May be null. The libraryName for a resource is an optional String that indicates membership in a "resource library". All resources with the same libraryName belong to the same "resource library". The "resource library" concept allows disambiguating resources that have the same resourceName. See ResourceHandler for more information.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="getLibraryName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:263</id>
      <description>Return the resourceName for this resource. Will never be null. All Resource instances must have a resourceName.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="getResourceName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:264</id>
      <description>Returns a mutable Map whose entries will be sent as response headers during ResourceHandler#handleResourceRequest. The entries in this map must not persist beyond the scope of a single request. Any modifications made to the map after the resource has been served will be ignored by the run-time.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="getResponseHeaders" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:265</id>
      <description>Return an actual URL instance that refers to this resource instance.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="getURL" return-type="java.net.URL" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:266</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="Resource" return-type="Resource" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:267</id>
      <description>Set the MIME content-type for this resource. The default implementation performs no validation on the argument.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="setContentType" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:268</id>
      <description>Set the libraryName for this resource.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="setLibraryName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:269</id>
      <description>Set the resourceName for this resource.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="setResourceName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:270</id>
      <description>if argument resourceName is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="setResourceName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:271</id>
      <description>Call through to #getRequestPath and return the result.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:273</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ResourceDependencies</class-interface>
      <method name="value" return-type="jakarta.faces.application.ResourceDependency[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:274</id>
      <description>The libraryName in which the resource pointed to by this ResourceDependency resides. If not specified, defaults to the empty string. It is valid to have EL Expressions in the value of this attribute, as long as the expression resolves to an instance of the expected type.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceDependency</class-interface>
      <method name="library" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:275</id>
      <description>The resourceName of the resource pointed to by this ResourceDependency. It is valid to have EL Expressions in the value of this attribute, as long as the expression resolves to an instance of the expected type.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceDependency</class-interface>
      <method name="name" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:276</id>
      <description>The value given for this attribute will be passed as the "target" argument to jakarta.faces.component.UIViewRoot#addComponentResource(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.String). If this attribute is specified, jakarta.faces.component.UIViewRoot#addComponentResource(jakarta.faces.context.FacesContext,jakarta.faces.component.UIComponent) must be called instead, as described above. It is valid to have EL Expressions in the value of this attribute, as long as the expression resolves to an instance of the expected type.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceDependency</class-interface>
      <method name="target" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:278</id>
      <description>if resourceName is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:280</id>
      <description>if resourceName is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:282</id>
      <description>if resourceName is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:283</id>
      <description>Return the renderer-type for a jakarta.faces.render.Renderer that is capable of rendering this resource. The default implementation must return values according to the following table. If no renderer-type can be determined, null must be returned. example resource name renderer-type mycomponent.js jakarta.faces.resource.Script mystyle.css jakarta.faces.resource.Stylesheet</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="getRendererTypeForResourceName" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:284</id>
      <description>This method specifies the contract for satisfying resource requests. This method is called from jakarta.faces.webapp.FacesServlet#service after that method determines the current request is a resource request by calling #isResourceRequest. Thus, handleResourceRequest may assume that the current request is a resource request. The default implementation must implement an algorithm semantically identical to the following algorithm. For discussion, in all cases when a status code is to be set, this spec talks only using the Servlet API, but it is understood that in a portlet environment the appropriate equivalent API must be used. If the resourceIdentifier ends with any of the extensions listed in the value of the #RESOURCE_EXCLUDES_PARAM_NAME init parameter, HttpServletRequest.SC_NOT_FOUND must be passed to HttpServletResponse.setStatus(), then handleResourceRequest must immediately return. Extract the resourceName from the resourceIdentifier by taking the substring of resourceIdentifier that starts at #RESOURCE_IDENTIFIER.length() + 1 and goes to the end of resourceIdentifier. If no resourceName can be extracted, HttpServletRequest.SC_NOT_FOUND must be passed to HttpServletResponse.setStatus(), then handleResourceRequest must immediately return. Extract the libraryName from the request by looking in the request parameter map for an entry under the key "ln", without the quotes. If found, use its value as the libraryName. If resourceName and libraryName are present, call #createResource(String, String) to create the Resource. If only resourceName is present, call #createResource(String) to create the Resource. If the Resource cannot be successfully created, HttpServletRequest.SC_NOT_FOUND must be passed to HttpServletResponse.setStatus(), then handleResourceRequest must immediately return. Call Resource#userAgentNeedsUpdate. If this method returns false, HttpServletRequest.SC_NOT_MODIFIED must be passed to HttpServletResponse.setStatus(), then handleResourceRequest must immediately return. Pass the result of Resource#getContentType to HttpServletResponse.setContentType. Call Resource#getResponseHeaders. For each entry in this Map, call HttpServletResponse.setHeader(), passing the key as the first argument and the value as the second argument. Call Resource#getInputStream and serve up the bytes of the resource to the response. Call HttpServletResponse.setContentLength() passing the byte count of the resource. If an IOException is thrown during any of the previous steps, log a descriptive, localized message, including the resourceName and libraryName (if present). Then, HttpServletRequest.SC_NOT_FOUND must be passed to HttpServletResponse.setStatus(), then handleResourceRequest must immediately return. In all cases in this method, any streams, channels, sockets, or any other IO resources must be closed before this method returns.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="handleResourceRequest" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:285</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="handleResourceRequest" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:286</id>
      <description>Return true if the current request is a resource request. This method is called by jakarta.faces.webapp.FacesServlet#service to determine if this request is a view request or a resource request.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="isResourceRequest" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:288</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="ResourceHandler" return-type="ResourceHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:289</id>
      <description>The default behavior of this method is to call ResourceHandler#createResource(String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:290</id>
      <description>The default behavior of this method is to call ResourceHandler#createResource(String, String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:291</id>
      <description>The default behavior of this method is to call ResourceHandler#createResource(String, String, String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:292</id>
      <description>The default behavior of this method is to call ResourceHandler#getRendererTypeForResourceName(String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="getRendererTypeForResourceName" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:293</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.ResourceHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:294</id>
      <description>The default behavior of this method is to call ResourceHandler#handleResourceRequest(jakarta.faces.context.FacesContext) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="handleResourceRequest" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:295</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="handleResourceRequest" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:296</id>
      <description>The default behavior of this method is to call ResourceHandler#isResourceRequest(jakarta.faces.context.FacesContext) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="isResourceRequest" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:297</id>
      <description>The default behavior of this method is to call ResourceHandler#libraryExists(String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="libraryExists" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:298</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="ResourceHandlerWrapper" return-type="ResourceHandlerWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:299</id>
      <description>The default behavior of this method is to call Resource#getInputStream on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getInputStream" return-type="java.io.InputStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:300</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getInputStream" return-type="java.io.InputStream">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:301</id>
      <description>The default behavior of this method is to call Resource#getRequestPath on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getRequestPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:302</id>
      <description>The default behavior of this method is to call Resource#getResponseHeaders on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getResponseHeaders" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:303</id>
      <description>The default behavior of this method is to call Resource#getURL on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getURL" return-type="java.net.URL" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:304</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.Resource" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:305</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="ResourceWrapper" return-type="ResourceWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:306</id>
      <description>The default behavior of this method is to call Resource#userAgentNeedsUpdate on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="userAgentNeedsUpdate" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:307</id>
      <description>Convenience method to return the view state as a String with no RenderKit specific markup. This default implementation of this method will call #saveView(jakarta.faces.context.FacesContext) and passing the result to and returning the resulting value from ResponseStateManager#getViewState(jakarta.faces.context.FacesContext, Object).</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="getViewState" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:308</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="isSavingStateInClient" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:309</id>
      <description>if context is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="isSavingStateInClient" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:311</id>
      <description>if renderKitId is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:312</id>
      <description>Return the tree structure and component state information for the view contained in the specified FacesContext instance as an object of type StateManager.SerializedView. If there is no state information to be saved, return null instead. Components may opt out of being included in the serialized view by setting their transient property to true. This must cause the component itself, as well as all of that component's children and facets, to be omitted from the saved tree structure and component state information. This method must also enforce the rule that, for components with non-null ids, all components that are descendants of the same nearest NamingContainer must have unique identifiers.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="saveSerializedView" return-type="jakarta.faces.application.StateManager.StateManager.SerializedView">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:313</id>
      <description>if more than one component or facet within the same NamingContainer in this view has the same non-null component id</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="saveSerializedView" return-type="jakarta.faces.application.StateManager.StateManager.SerializedView">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:315</id>
      <description>if more than one component or facet within the same NamingContainer in this view has the same non-null component id</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="saveView" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:316</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="StateManager" return-type="StateManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:317</id>
      <description>Save the state represented in the specified state Object instance, in an implementation dependent manner. This method will typically simply delegate the actual writing to the writeState() method of the ResponseStateManager instance provided by the RenderKit being used to render this view. This method assumes that the caller has positioned the ResponseWriter at the correct position for the saved state to be written. For backwards compatability with existing StateManager implementations, the default implementation of this method checks if the argument is an instance of Object [] of length greater than or equal to two. If so, it creates a SerializedView instance with the tree structure coming from element zero and the component state coming from element one and calls through to #writeState(jakarta.faces.context.FacesContext,jakarta.faces.application.StateManager.SerializedView). If not, does nothing.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:318</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:319</id>
      <description>Save the state represented in the specified SerializedView isntance, in an implementation dependent manner. This method must consult the context initialization parameter named by the symbolic constant StateManager.STATE_SAVING_METHOD_PARAM_NAME to determine whether state should be saved on the client or the server. If not present, client side state saving is assumed. If the init parameter indicates that client side state saving should be used, this method must delegate the actual writing to the writeState() method of the ResponseStateManager instance provided by the RenderKit being used to render this view. This method assumes that the caller has positioned the ResponseWriter at the correct position for the saved state to be written.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.StateManager.StateManager.SerializedView</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:320</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.StateManager.StateManager.SerializedView</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:321</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManager.SerializedView</class-interface>
      <method name="getState" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:322</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManager.SerializedView</class-interface>
      <method name="getStructure" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:323</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManager.SerializedView</class-interface>
      <method name="StateManager.SerializedView" return-type="StateManager.SerializedView">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:324</id>
      <description>The default behavior of this method is to call StateManager#getViewState(jakarta.faces.context.FacesContext) on the wrapped StateManager object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="getViewState" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:325</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.StateManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:326</id>
      <description>The default behavior of this method is to call StateManager#isSavingStateInClient(jakarta.faces.context.FacesContext) on the wrapped StateManager object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="isSavingStateInClient" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:327</id>
      <description>The default behavior of this method is to call StateManager#restoreView(jakarta.faces.context.FacesContext, String, String) on the wrapped StateManager object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:328</id>
      <description>The default behavior of this method is to call StateManager#saveSerializedView(jakarta.faces.context.FacesContext) on the wrapped StateManager object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="saveSerializedView" return-type="jakarta.faces.application.StateManager.StateManager.SerializedView">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:329</id>
      <description>The default behavior of this method is to call StateManager#saveView(jakarta.faces.context.FacesContext) on the wrapped StateManager object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="saveView" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:330</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="StateManagerWrapper" return-type="StateManagerWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:331</id>
      <description>The default behavior of this method is to call StateManager#writeState(jakarta.faces.context.FacesContext, java.lang.Object) on the wrapped StateManager object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:332</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:333</id>
      <description>The default behavior of this method is to call StateManager#writeState(jakarta.faces.context.FacesContext, jakarta.faces.application.StateManager.SerializedView) on the wrapped StateManager object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.StateManager.StateManager.SerializedView</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:334</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>StateManagerWrapper</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.StateManager.StateManager.SerializedView</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:335</id>
      <description>Return the message for this exception prepended with the view identifier if the view identifier is not null, otherwise, return the message.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewExpiredException</class-interface>
      <method name="getMessage" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:336</id>
      <description>Return the view identifier of this exception, or null if the view identifier is nonexistent or unknown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewExpiredException</class-interface>
      <method name="getViewId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:337</id>
      <description>Construct a new exception with no detail message or root cause.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewExpiredException</class-interface>
      <method name="ViewExpiredException" return-type="ViewExpiredException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:338</id>
      <description>Construct a new exception with the specified view identifier.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewExpiredException</class-interface>
      <method name="ViewExpiredException" return-type="ViewExpiredException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:339</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewExpiredException</class-interface>
      <method name="ViewExpiredException" return-type="ViewExpiredException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:340</id>
      <description>Construct a new exception with the specified root cause. The detail message will be set to (cause == null ? null : cause.toString()</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewExpiredException</class-interface>
      <method name="ViewExpiredException" return-type="ViewExpiredException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:341</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewExpiredException</class-interface>
      <method name="ViewExpiredException" return-type="ViewExpiredException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:342</id>
      <description>Returns the correct character encoding to be used for this request. The following algorithm is employed. Examine the Content-Type request header. If it has a charset parameter, extract it and return that as the encoding. If no charset parameter was found, check for the existence of a session by calling ExternalContext#getSession(boolean) passing false as the argument. If that method returns true, get the session Map by calling ExternalContext#getSessionMap and look for a value under the key given by the value of the symbolic constant ViewHandler#CHARACTER_ENCODING_KEY. If present, return the value, converted to String. Otherwise, return null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="calculateCharacterEncoding" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:343</id>
      <description>Returns an appropriate Locale to use for this and subsequent requests for the current client.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="calculateLocale" return-type="java.util.Locale">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:344</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="calculateLocale" return-type="java.util.Locale">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:345</id>
      <description>Return an appropriate renderKitId for this and subsequent requests from the current client. It is an error for this method to return null. The default return value is jakarta.faces.render.RenderKitFactory#HTML_BASIC_RENDER_KIT.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="calculateRenderKitId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:346</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="calculateRenderKitId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:347</id>
      <description>Create and return a new UIViewRoot instance initialized with information from the argument FacesContext and viewId. Locate the ViewDeclarationLanguage implementation for the VDL used in the view. The argument viewId must be converted to a physical viewId that can refer to an actual resource suitable for use by the ViewDeclarationLanguage ViewDeclarationLanguage#createView, which must be called by this method.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="createView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:348</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="createView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:351</id>
      <description>if viewId is not valid for this ViewHandler, or does not start with "/".</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:352</id>
      <description>if context or viewId is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:355</id>
      <description>If the value returned from this method is used as the file argument to the four-argument constructor for java.net.URL (assuming appropriate values are used for the first three arguments), then a client making a request to the toExternalForm() of that URL will select the argument path for direct rendering. If the specified path starts with a slash, it must be treated as context relative; otherwise, it must be treated as relative to the action URL of the current view.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getResourceURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:356</id>
      <description>if viewId is not valid for this ViewHandler.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getResourceURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:357</id>
      <description>if context or path is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getResourceURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:358</id>
      <description>Return the ViewDeclarationLanguage instance used for this ViewHandler instance. The default implementation must use jakarta.faces.view.ViewDeclarationLanguageFactory#getViewDeclarationLanguage to obtain the appropriate ViewDeclarationLanguage implementation for the argument viewId. Any exceptions thrown as a result of invoking that method must not be swallowed. The default implementation of this method returns null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getViewDeclarationLanguage" return-type="jakarta.faces.view.ViewDeclarationLanguage">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:359</id>
      <description>Initialize the view for the request processing lifecycle. This method must be called at the beginning of the Restore View Phase of the Request Processing Lifecycle. It is responsible for performing any per-request initialization necessary to the operation of the lifycecle. The default implementation must perform the following actions. If ExternalContext#getRequestCharacterEncoding returns null, call #calculateCharacterEncoding and pass the result, if non-null, into the ExternalContext#setRequestCharacterEncoding method. If ExternalContext#getRequestCharacterEncoding returns non-null take no action.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="initView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:360</id>
      <description>if a problem occurs setting the encoding, such as the UnsupportedEncodingException thrown by the underlying Servlet or Portlet technology when the encoding is not supported.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="initView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:361</id>
      <description>Perform whatever actions are required to render the response view to the response object associated with the current FacesContext. Otherwise, the default implementation must obtain a reference to the ViewDeclarationLanguage for the viewId of the argument viewToRender and call its ViewDeclarationLanguage#renderView method, returning the result and not swallowing any exceptions thrown by that method.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:362</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:363</id>
      <description>if a servlet error occurs</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:364</id>
      <description>if context or viewToRender is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:365</id>
      <description>Perform whatever actions are required to restore the view associated with the specified FacesContext and viewId. It may delegate to the restoreView of the associated StateManager to do the actual work of restoring the view. If there is no available state for the specified viewId, return null. Otherwise, the default implementation must obtain a reference to the ViewDeclarationLanguage for this viewId and call its ViewDeclarationLanguage#restoreView method, returning the result and not swallowing any exceptions thrown by that method.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:366</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:367</id>
      <description>if a servlet error occurs</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:368</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="ViewHandler" return-type="ViewHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:369</id>
      <description>Take any appropriate action to either immediately write out the current state information (by calling StateManager#writeState, or noting where state information should later be written. This method must do nothing if the current request is an Ajax request. When responding to Ajax requests, the state is obtained by calling StateManager#getViewState and then written into the Ajax response during final encoding (jakarta.faces.component.UIViewRoot#encodeEnd.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:370</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:371</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:372</id>
      <description>The default behavior of this method is to call ViewHandler#calculateCharacterEncoding(jakarta.faces.context.FacesContext) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="calculateCharacterEncoding" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:373</id>
      <description>The default behavior of this method is to call ViewHandler#calculateLocale(jakarta.faces.context.FacesContext) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="calculateLocale" return-type="java.util.Locale">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:374</id>
      <description>The default behavior of this method is to call ViewHandler#calculateRenderKitId(jakarta.faces.context.FacesContext) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="calculateRenderKitId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:375</id>
      <description>The default behavior of this method is to call ViewHandler#createView(jakarta.faces.context.FacesContext, String) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="createView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:376</id>
      <description>The default behavior of this method is to call ViewHandler#deriveViewId(jakarta.faces.context.FacesContext, String) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="deriveViewId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:377</id>
      <description>The default behavior of this method is to call ViewHandler#getActionURL(jakarta.faces.context.FacesContext, String) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="getActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:378</id>
      <description>The default behavior of this method is to call ViewHandler#getBookmarkableURL(jakarta.faces.context.FacesContext, String, java.util.Map, boolean) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="getBookmarkableURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:379</id>
      <description>The default behavior of this method is to call ViewHandler#getRedirectURL(jakarta.faces.context.FacesContext, String, java.util.Map, boolean) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="getRedirectURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:380</id>
      <description>The default behavior of this method is to call ViewHandler#getResourceURL(jakarta.faces.context.FacesContext, String) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="getResourceURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:381</id>
      <description>The default behavior of this method is to call ViewHandler#getViewDeclarationLanguage on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="getViewDeclarationLanguage" return-type="jakarta.faces.view.ViewDeclarationLanguage">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:382</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.ViewHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:383</id>
      <description>The default behavior of this method is to call ViewHandler#initView on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="initView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:384</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="initView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:385</id>
      <description>The default behavior of this method is to call ViewHandler#renderView(jakarta.faces.context.FacesContext, jakarta.faces.component.UIViewRoot) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:386</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:387</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:388</id>
      <description>The default behavior of this method is to call ViewHandler#restoreView(jakarta.faces.context.FacesContext, String) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:389</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="ViewHandlerWrapper" return-type="ViewHandlerWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:390</id>
      <description>The default behavior of this method is to call ViewHandler#writeState(jakarta.faces.context.FacesContext) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:391</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:392</id>
      <description>Add a new ActionListener to the set of listeners interested in being notified when ActionEvents occur.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="addActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:393</id>
      <description>if listener is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="addActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:394</id>
      <description>If the implementing class also implements ActionSource2, the implementation of this method must call through to ActionSource2#getActionExpression and examine the result. If the result came from a previous call to #setAction, extract the MethodBinding from it and return it. Otherwise, wrap the returned jakarta.el.MethodExpression in a MethodBinding implementation, and return it. If the implementing class does not implement ActionSource2, return the MethodBindingpointing at the application action to be invoked, if this UIComponent is activated by the user, during the Apply Request Values or Invoke Application phase of the request processing lifecycle, depending on the value of the immediate property.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="getAction" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:395</id>
      <description>If #setActionListener was not previously called for this instance, this method must return null. If it was called, this method must return the exact MethodBinding instance that was passed to #setActionListener. The method to be invoked, if this UIComponent is activated by the user, will be called during the Apply Request Values or Invoke Application phase of the request processing lifecycle, depending upon the value of the immediate property.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="getActionListener" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:396</id>
      <description>Return the set of registered ActionListeners for this ActionSource instance. If there are no registered listeners, a zero-length array is returned.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="getActionListeners" return-type="jakarta.faces.event.ActionListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:397</id>
      <description>Return a flag indicating that the default ActionListener provided by the JavaServer Faces implementation should be executed immediately (that is, during Apply Request Values phase of the request processing lifecycle), rather than waiting until the Invoke Application phase. The default value for this property must be false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="isImmediate" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:398</id>
      <description>Remove an existing ActionListener (if any) from the set of listeners interested in being notified when ActionEvents occur.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="removeActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:399</id>
      <description>if listener is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="removeActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:400</id>
      <description>If the implementing class also implements ActionSource2, the implementation of this method must wrap the argument action in a class that implements jakarta.el.MethodExpression and call through to ActionSource2#setActionExpression, passing the wrapped action. If the implementing class does not implement ActionSource2, set the MethodBinding pointing at the appication action to be invoked, if this UIComponent is activated by the user, during the Apply Request Values or Invoke Application phase of the request processing lifecycle, depending on the value of the immediate property. Any method referenced by such an expression must be public, with a return type of String, and accept no parameters.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="setAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:401</id>
      <description>Wrap the argument actionListener in an implementation of ActionListener and store it in the internal data structure that backs the #getActionListeners method, taking care to over-write any instance that was stored by a previous call to setActionListener. Any method referenced by such an expression must be public, with a return type of void, and accept a single parameter of type ActionEvent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="setActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:402</id>
      <description>Set the "immediate execution" flag for this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource</class-interface>
      <method name="setImmediate" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:403</id>
      <description>Return the MethodExpression pointing at the application action to be invoked, if this UIComponent is activated by the user, during the Apply Request Values or Invoke Application phase of the request processing lifecycle, depending on the value of the immediate property. Note that it's possible that the returned MethodExpression is just a wrapper around a MethodBinding instance whith was set by a call to ActionSource#setAction. This makes it possible for the default ActionListener to continue to work properly with older components.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource2</class-interface>
      <method name="getActionExpression" return-type="MethodExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:404</id>
      <description>Set the MethodExpression pointing at the appication action to be invoked, if this UIComponent is activated by the user, during the Apply Request Values or Invoke Application phase of the request processing lifecycle, depending on the value of the immediate property. Any method referenced by such an expression must be public, with a return type of String, and accept no parameters.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ActionSource2</class-interface>
      <method name="setActionExpression" return-type="void">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:405</id>
      <description>This method will be called by an implementation of UIComponent#invokeOnComponent and must be passed the component with the clientId given as an argument to invokeOnComponent. At the point in time when this method is called, the argument target is guaranteed to be in the proper state with respect to its ancestors in the View.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ContextCallback</class-interface>
      <method name="invokeContextCallback" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:406</id>
      <description>Add a Validator instance to the set associated with this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="addValidator" return-type="void">
        <parameters>
          <parameter>jakarta.faces.validator.Validator</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:407</id>
      <description>if validator is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="addValidator" return-type="void">
        <parameters>
          <parameter>jakarta.faces.validator.Validator</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:408</id>
      <description>Add a new ValueChangeListener to the set of listeners interested in being notified when ValueChangeEvents occur.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="addValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:409</id>
      <description>if listener is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="addValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:411</id>
      <description>If #setValidator was not previously called for this instance, this method must return null. If it was called, this method must return the exact MethodBinding instance that was passed to #setValidator. This method will be called during the Process Validations or Apply Request Values phases (depending on the value of the immediate property).</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="getValidator" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:412</id>
      <description>Return the set of registered Validators for this component instance. If there are no registered validators, a zero-length array is returned.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="getValidators" return-type="jakarta.faces.validator.Validator[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:413</id>
      <description>If #setValueChangeListener was not previously called for this instance, this method must return null. If it was called, this method must return the exact MethodBinding instance that was passed to #setValueChangeListener.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="getValueChangeListener" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:414</id>
      <description>Return the set of registered ValueChangeListeners for this component instance. If there are no registered listeners, a zero-length array is returned.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="getValueChangeListeners" return-type="jakarta.faces.event.ValueChangeListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:415</id>
      <description>Return the "immediate" state for this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="isImmediate" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:416</id>
      <description>Return the "local value set" state for this component. Calls to setValue() automatically reset this property to true.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="isLocalValueSet" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:417</id>
      <description>Return the "required field" state for this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="isRequired" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:418</id>
      <description>Return a flag indicating whether the local value of this component is valid (no conversion error has occurred).</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="isValid" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:419</id>
      <description>Remove a Validator instance from the set associated with this component, if it was previously associated. Otherwise, do nothing.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="removeValidator" return-type="void">
        <parameters>
          <parameter>jakarta.faces.validator.Validator</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:420</id>
      <description>Remove an existing ValueChangeListener (if any) from the set of listeners interested in being notified when ValueChangeEvents occur.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="removeValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:421</id>
      <description>if listener is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="removeValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:422</id>
      <description>Convenience method to reset this component's value to the un-initialized state.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="resetValue" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:423</id>
      <description>Set the "immediate" state for this component. When set to true, the component's value will be converted and validated immediately in the Apply Request Values phase, and ValueChangeEvents will be delivered in that phase as well. The default value for this property must be false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="setImmediate" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:424</id>
      <description>Sets the "local value set" state for this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="setLocalValueSet" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:425</id>
      <description>Set the "required field" state for this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="setRequired" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:427</id>
      <description>Set a flag indicating whether the local value of this component is valid (no conversion error has occurred).</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="setValid" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:428</id>
      <description>Wrap the argument validatorBinding in an implementation of jakarta.faces.validator.Validator and store it in the internal data structure that backs the #getValidators method, taking care to over-write any instance that was stored by a previous call to setValidator. The argument method will be called during the Process Validations or Apply Request Values phases (depending on the value of the immediate property). Any method referenced by such an expression must be public, with a return type of void, and accept parameters of type jakarta.faces.context.FacesContext, UIComponent, and Object.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="setValidator" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:429</id>
      <description>Wrap the argument valueChangeMethod in an implementation of ValueChangeListener and store it in the internal data structure that backs the #getValueChangeListeners method, taking care to over-write any instance that was stored by a previous call to setValueChangeListener. This argument method will be called during the Process Validations or Apply Request Values phases (depending on the value of the immediate property). Any method referenced by such an expression must be public, with a return type of void, and accept a parameter of type jakarta.faces.event.ValueChangeEvent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="setValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:431</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.component</package>
      <class-interface>PartialStateHolder</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:432</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.component</package>
      <class-interface>PartialStateHolder</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:433</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.component</package>
      <class-interface>PartialStateHolder</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:434</id>
      <description>Store the specified value in a List that is internal to the StateHelper. It's important to note for delta tracking that any modifications to the internal List be made through this method or StateHelper#remove(java.io.Serializable, Object).</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHelper</class-interface>
      <method name="add" return-type="void">
        <parameters>
          <parameter>java.io.Serializable</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:435</id>
      <description>Attempts to find a value associated with the specified key, using the value expression collection from the component if no such value is found.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHelper</class-interface>
      <method name="eval" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Serializable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:436</id>
      <description>Performs the same logic as #eval(java.io.Serializable) } but if no value is found, this will return the specified defaultValue</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHelper</class-interface>
      <method name="eval" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Serializable</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:437</id>
      <description>Return the value currently associated with the specified key if any.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHelper</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Serializable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:438</id>
      <description>Return the previously stored value and store the specified key/value pair. This is intended to store data that would otherwise reside in an instance variable on the component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHelper</class-interface>
      <method name="put" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Serializable</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:439</id>
      <description>Store the specified mapKey/value in a Map that is internal to the helper, and return the previously stored value. The Map will then be associated with key. It's important to note for delta tracking that any modifications to the internal Map be made through this method or StateHelper#remove(java.io.Serializable, Object).</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHelper</class-interface>
      <method name="put" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Serializable</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:440</id>
      <description>Remove the key/value pair from the helper, returning the value previously stored under this key.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHelper</class-interface>
      <method name="remove" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Serializable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:441</id>
      <description>Remove a value from the inner data structure. Look in the inner data structure for the value at the given key. If the value is a Map, remove and return the value under the key given by the valueOrKey argument. If the value is a Collection, simply remove the value given by the argument valueOrKey and return null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHelper</class-interface>
      <method name="remove" return-type="java.lang.Object">
        <parameters>
          <parameter>java.io.Serializable</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:442</id>
      <description>If true, the Object implementing this interface must not participate in state saving or restoring.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHolder</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:445</id>
      <description>Gets the state of the instance as a Serializable Object. If the class that implements this interface has references to instances that implement StateHolder (such as a UIComponent with event handlers, validators, etc.) this method must call the #saveState method on all those instances as well. This method must not save the state of children and facets. That is done via the jakarta.faces.application.StateManager This method must not alter the state of the implementing object. In other words, after executing this code: Object state = component.saveState(facesContext); component should be the same as before executing it. The return from this method must be Serializable</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHolder</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:446</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHolder</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:447</id>
      <description>Denotes whether or not the Object implementing this interface must or must not participate in state saving or restoring.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHolder</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:448</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIColumn</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:449</id>
      <description>Return the footer facet of the column (if any). A convenience method for getFacet("footer").</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIColumn</class-interface>
      <method name="getFooter" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:450</id>
      <description>Return the header facet of the column (if any). A convenience method for getFacet("header").</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIColumn</class-interface>
      <method name="getHeader" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:451</id>
      <description>Set the footer facet of the column. A convenience method for getFacets().put("footer", footer).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIColumn</class-interface>
      <method name="setFooter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:452</id>
      <description>if footer is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIColumn</class-interface>
      <method name="setFooter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:453</id>
      <description>Set the header facet of the column. A convenience method for getFacets().put("header", header).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIColumn</class-interface>
      <method name="setHeader" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:454</id>
      <description>if header is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIColumn</class-interface>
      <method name="setHeader" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:455</id>
      <description>Create a new UIColumn instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIColumn</class-interface>
      <method name="UIColumn" return-type="UIColumn" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:456</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="addActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:457</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="addActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:458</id>
      <description>In addition to to the default UIComponent#broadcast processing, pass the ActionEvent being broadcast to the method referenced by actionListener (if any), and to the default ActionListener registered on the jakarta.faces.application.Application.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:459</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:460</id>
      <description>if the implementation class of this FacesEvent is not supported by this component</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:461</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:462</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="getAction" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:463</id>
      <description>Return the MethodExpression pointing at the application action to be invoked, if this UIComponent is activated by the user, during the Apply Request Values or Invoke Application phase of the request processing lifecycle, depending on the value of the immediate property. Note that it's possible that the returned MethodExpression is just a wrapper around a MethodBinding instance whith was set by a call to ActionSource#setAction. This makes it possible for the default ActionListener to continue to work properly with older components.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="getActionExpression" return-type="MethodExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:464</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="getActionListener" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:465</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="getActionListeners" return-type="jakarta.faces.event.ActionListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:466</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:467</id>
      <description>Returns the value property of the UICommand. This is most often rendered as a label.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:468</id>
      <description>The immediate flag.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="isImmediate" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:469</id>
      <description>Intercept queueEvent and take the following action. If the event is an ActionEvent, obtain the UIComponent instance from the event. If the component is an ActionSource obtain the value of its "immediate" property. If it is true, mark the phaseId for the event to be PhaseId.APPLY_REQUEST_VALUES otherwise, mark the phaseId to be PhaseId.INVOKE_APPLICATION. The event must be passed on to super.queueEvent() before returning from this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:470</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="removeActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:471</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="removeActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:472</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="setAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:473</id>
      <description>Set the MethodExpression pointing at the appication action to be invoked, if this UIComponent is activated by the user, during the Apply Request Values or Invoke Application phase of the request processing lifecycle, depending on the value of the immediate property. Any method referenced by such an expression must be public, with a return type of String, and accept no parameters.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="setActionExpression" return-type="void">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:474</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="setActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:475</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="setImmediate" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:476</id>
      <description>Sets the value property of the UICommand. This is most often rendered as a label.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:477</id>
      <description>Create a new UICommand instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UICommand</class-interface>
      <method name="UICommand" return-type="UICommand" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:479</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:480</id>
      <description>if the implementation class of this FacesEvent is not supported by this component</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:481</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:482</id>
      <description>An implementation of PartialStateHolder#clearInitialState, this method is called by the runtime to tell the instance to stop tracking state changes.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:483</id>
      <description>Decode any new state of this UIComponent from the request contained in the specified FacesContext, and store this state as needed. During decoding, events may be enqueued for later processing (by event listeners who have registered an interest), by calling queueEvent().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:484</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:485</id>
      <description>If this component returns true from #isRendered, take the following action. Render this component and all its children that return true from isRendered(), regardless of the value of the #getRendersChildren flag.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeAll" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:486</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeAll" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:487</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeAll" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:488</id>
      <description>If our rendered property is true, render the beginning of the current state of this UIComponent to the response contained in the specified FacesContext. Call #pushComponentToEL(jakarta.faces.context.FacesContext,jakarta.faces.component.UIComponent). Call jakarta.faces.application.Application#publishEvent, passing jakarta.faces.event.PreRenderComponentEvent.class as the first argument and the component instance to be rendered as the second argument. If a Renderer is associated with this UIComponent, the actual encoding will be delegated to Renderer#encodeBegin(FacesContext, UIComponent). If our rendered property is false, call #pushComponentToEL(jakarta.faces.context.FacesContext,jakarta.faces.component.UIComponent) and return immediately.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:489</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:490</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:491</id>
      <description>If our rendered property is true, render the child UIComponents of this UIComponent. This method will only be called if the rendersChildren property is true. If a Renderer is associated with this UIComponent, the actual encoding will be delegated to Renderer#encodeChildren(FacesContext, UIComponent). If no Renderer is associated with this UIComponent, iterate over each of the children of this component and call #encodeAll(jakarta.faces.context.FacesContext).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:492</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:493</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:494</id>
      <description>If our rendered property is true, render the ending of the current state of this UIComponent. If a Renderer is associated with this UIComponent, the actual encoding will be delegated to Renderer#encodeEnd(FacesContext, UIComponent). Call UIComponent#popComponentFromEL. before returning regardless of the value of the rendered property.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:495</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:496</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:498</id>
      <description>if an intermediate identifier in a search expression identifies a UIComponent that is not a NamingContainer</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="findComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:499</id>
      <description>if expr is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="findComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:500</id>
      <description>Return a mutable Map representing the attributes (and properties, see below) associated wth this UIComponent, keyed by attribute name (which must be a String). The returned implementation must support all of the standard and optional Map methods, plus support the following additional requirements: The Map implementation must implement the java.io.Serializable interface. Any attempt to add a null key or value must throw a NullPointerException. Any attempt to add a key that is not a String must throw a ClassCastException. If the attribute name specified as a key matches a property of this UIComponent's implementation class, the following methods will have special behavior: containsKey - Return false. get() - If the property is readable, call the getter method and return the returned value (wrapping primitive values in their corresponding wrapper classes); otherwise throw IllegalArgumentException. put() - If the property is writeable, call the setter method to set the corresponding value (unwrapping primitive values in their corresponding wrapper classes). If the property is not writeable, or an attempt is made to set a property of primitive type to null, throw IllegalArgumentException. remove - Throw IllegalArgumentException.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getAttributes" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:501</id>
      <description>Return the number of child UIComponents that are associated with this UIComponent. If there are no children, this method must return 0. The method must not cause the creation of a child component list.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getChildCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:503</id>
      <description>Enable EL to access the clientId of a component. This is particularly useful in combination with the component and cc implicit objects. A default implementation is provided that simply calls FacesContext#getCurrentInstance and then calls through to #getClientId(FacesContext).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getClientId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:504</id>
      <description>Return a client-side identifier for this component, generating one if necessary. The associated Renderer, if any, will be asked to convert the clientId to a form suitable for transmission to the client. The return from this method must be the same value throughout the lifetime of the instance, unless the id property of the component is changed, or the component is placed in a NamingContainer whose client ID changes (for example, UIData). However, even in these cases, consecutive calls to this method must always return the same value. The implementation must follow these steps in determining the clientId: Find the closest ancestor to this component in the view hierarchy that implements NamingContainer. Call getContainerClientId() on it and save the result as the parentId local variable. Call #getId on this component and save the result as the myId local variable. If myId is null, call context.getViewRoot().createUniqueId() and assign the result to myId. If parentId is non-null, let myId equal parentId + UINamingContainer#getSeparatorChar + myId. Call Renderer#convertClientId, passing myId, and return the result.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:505</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:506</id>
      <description>Finds the nearest composite component parent of the specified component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getCompositeComponentParent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:507</id>
      <description>Allow components that implement NamingContainer to selectively disable prepending their clientId to their descendent's clientIds by breaking the prepending logic into a seperately callable method. See #getClientId for usage. By default, this method will call through to #getClientId and return the result.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getContainerClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:508</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getContainerClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:509</id>
      <description>Return the UIComponent instance that is currently processing. This is equivalent to evaluating the EL expression "#{component}" and doing a getValue operation on the resultant ValueExpression. This method must return null if there is no currently processing UIComponent</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getCurrentComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:510</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getCurrentComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:511</id>
      <description>Return the closest ancestor component, relative to the component returned from #getCurrentComponent, that is a composite component, or null if no such component exists.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getCurrentCompositeComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:512</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getCurrentCompositeComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:513</id>
      <description>Convenience method to return the named facet, if it exists, or null otherwise. If the requested facet does not exist, the facets Map must not be created.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getFacet" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:514</id>
      <description>Return the number of facet UIComponents that are associated with this UIComponent. If there are no facets, this method must return 0. The method must not cause the creation of a facet component map. For backwards compatability with classes that extend UIComponent directly, a default implementation is provided that simply calls #getFacets and then calls the size() method on the returned Map. A more optimized version of this method is provided in UIComponentBase#getFacetCount.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getFacetCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:515</id>
      <description>Return a mutable Map representing the facet UIComponents associated with this UIComponent, keyed by facet name (which must be a String). The returned implementation must support all of the standard and optional Map methods, plus support the following additional requirements: The Map implementation must implement the java.io.Serializable interface. Any attempt to add a null key or value must throw a NullPointerException. Any attempt to add a key that is not a String must throw a ClassCastException. Any attempt to add a value that is not a UIComponent must throw a ClassCastException. Whenever a new facet UIComponent is added: The parent property of the component must be set to this component instance. If the parent property of the component was already non-null, the component must first be removed from its previous parent (where it may have been either a child or a facet). Whenever an existing facet UIComponent is removed: The parent property of the facet must be set to null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getFacets" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:516</id>
      <description>Return an Iterator over the facet followed by child UIComponents of this UIComponent. Facets are returned in an undefined order, followed by all the children in the order they are stored in the child list. If this component has no facets or children, an empty Iterator is returned. The returned Iterator must not support the remove() operation.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getFacetsAndChildren" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:517</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:518</id>
      <description>Return the component identifier of this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:521</id>
      <description>Starting with "this", return the closest component in the ancestry that is a NamingContainer or null if none can be found.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getNamingContainer" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:522</id>
      <description>Return the parent UIComponent of this UIComponent, if any. A component must allow child components to be added to and removed from the list of children of this component, even though the child component returns null from getParent( ).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getParent" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:523</id>
      <description>Return the Renderer type for this UIComponent (if any).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getRendererType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:524</id>
      <description>Return a flag indicating whether this component is responsible for rendering its child components. The default implementation in UIComponentBase#getRendersChildren tries to find the renderer for this component. If it does, it calls Renderer#getRendersChildren and returns the result. If it doesn't, it returns false. As of version 1.2 of the JavaServer Faces Specification, component authors are encouraged to return true from this method and rely on UIComponentBase#encodeChildren.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getRendersChildren" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:525</id>
      <description>Return a Map of the ResourceBundle for this component. A component may have a ResourceBundle associated with it. This bundle may contain localized properties relating to instances of this component. The default implementation first looks for a ResourceBundle with a base name equal to the fully qualified class name of the current UIComponent this and Locale equal to the Locale of the current UIViewRoot. If no such bundle is found, and the component is a composite component, let resourceName be the resourceName of the Resource for this composite component, replacing the file extension with ".properties". Let libraryName be the libraryName of the the Resource for this composite component. Call jakarta.faces.application.ResourceHandler#createResource(java.lang.String,java.lang.String), passing the derived resourceName and libraryName. Note that this will automatically allow for the localization of the ResourceBundle due to the localization facility implemented in createResource, which is specified in section JSF.2.6.1.3 of the spec prose document. If the resultant Resource exists and can be found, the InputStream for the resource is used to create a ResourceBundle. If either of the two previous steps for obtaining the ResourceBundle for this component is successful, the ResourceBundle is wrapped in a Map and returned. Otherwise Collections.EMPTY_MAP is returned.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getResourceBundleMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:526</id>
      <description>Call through to #getValueExpression and examine the result. If the result is an instance of the wrapper class mandated in #setValueBinding, extract the ValueBinding instance and return it. Otherwise, wrap the result in an implementation of ValueBinding, and return it.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:527</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:528</id>
      <description>Return the ValueExpression used to calculate the value for the specified attribute or property name, if any. This method must be overridden and implemented for components that comply with JSF 1.2 and later.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:529</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:530</id>
      <description>An implementation of PartialStateHolder#initialStateMarked, this method is called by the runtime to test if the PartialStateHolder#markInitialState method was called.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:532</id>
      <description>if the argument Callback throws an Exception, it is wrapped in a FacesException and re-thrown.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:533</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:534</id>
      <description>Return true if component is a composite component, otherwise false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="isCompositeComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:535</id>
      <description>if component is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="isCompositeComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:536</id>
      <description>Return true if this component is within the view hierarchy otherwise false</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="isInView" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:537</id>
      <description>Return true if this component (and its children) should be rendered during the Render Response phase of the request processing lifecycle.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="isRendered" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:538</id>
      <description>An implementation of PartialStateHolder#markInitialState, this method is called by the runtime to indicate that the instance should start tracking changes to its state.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:539</id>
      <description>Pop the current UIComponent from the FacesContext attributes map so that the previous UIComponent, if any, becomes the current component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="popComponentFromEL" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:540</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="popComponentFromEL" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:541</id>
      <description>Perform the component tree processing required by the Apply Request Values phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. If the rendered property of this UIComponent is false, skip further processing. Call #pushComponentToEL. Call the processDecodes() method of all facets and children of this UIComponent, in the order determined by a call to getFacetsAndChildren(). Call the decode() method of this component. Call #popComponentFromEL from inside of a finally block, just before returning. If a RuntimeException is thrown during decode processing, call FacesContext#renderResponse and re-throw the exception.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:542</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:544</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ComponentSystemEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:545</id>
      <description>Perform the component tree processing required by the Restore View phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. Call the restoreState() method of this component. Call UIComponent#pushComponentToEL. Call the processRestoreState() method of all facets and children of this UIComponent in the order determined by a call to getFacetsAndChildren(). After returning from the processRestoreState() method on a child or facet, call UIComponent#popComponentFromEL This method may not be called if the state saving method is set to server.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processRestoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:546</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processRestoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:547</id>
      <description>Perform the component tree processing required by the state saving portion of the Render Response phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. consult the transient property of this component. If true, just return null. Call #pushComponentToEL. Call the processSaveState() method of all facets and children of this UIComponent in the order determined by a call to getFacetsAndChildren(), skipping children and facets that are transient. Ensure that #popComponentFromEL is called correctly after each child or facet. Call the saveState() method of this component. Encapsulate the child state and your state into a Serializable Object and return it. This method may not be called if the state saving method is set to server.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processSaveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:548</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processSaveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:549</id>
      <description>Perform the component tree processing required by the Update Model Values phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. If the rendered property of this UIComponent is false, skip further processing. Call #pushComponentToEL. Call the processUpdates() method of all facets and children of this UIComponent, in the order determined by a call to getFacetsAndChildren(). After returning from the processUpdates() method on a child or facet, call UIComponent#popComponentFromEL</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:550</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:552</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:553</id>
      <description>Push the current UIComponent this to the FacesContext attribute map using the key #CURRENT_COMPONENT saving the previous UIComponent associated with #CURRENT_COMPONENT for a subsequent call to #popComponentFromEL. This method and popComponentFromEL() form the basis for the contract that enables the EL Expression "#{component}" to resolve to the "current" component that is being processed in the lifecycle. The requirements for when pushComponentToEL() and popComponentFromEL() must be called are specified as needed in the javadoc for this class. After pushComponentToEL() returns, a call to #getCurrentComponent must return this UIComponent instance until popComponentFromEL() is called, after which point the previous UIComponent instance will be returned from getCurrentComponent()</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="pushComponentToEL" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:554</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="pushComponentToEL" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:555</id>
      <description>Queue an event for broadcast at the end of the current request processing lifecycle phase. The default implementation in UIComponentBase must delegate this call to the queueEvent() method of the parent UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:556</id>
      <description>if this component is not a descendant of a UIViewRoot</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:557</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:558</id>
      <description>Set the component identifier of this UIComponent (if any). Component identifiers must obey the following syntax restrictions: Must not be a zero-length String. First character must be a letter or an underscore ('_'). Subsequent characters must be a letter, a digit, an underscore ('_'), or a dash ('-'). Component identifiers must also obey the following semantic restrictions (note that this restriction is NOT enforced by the setId() implementation): The specified identifier must be unique among all the components (including facets) that are descendents of the nearest ancestor UIComponent that is a NamingContainer, or within the scope of the entire component tree if there is no such ancestor that is a NamingContainer.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:559</id>
      <description>if id is not syntactically valid</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:560</id>
      <description>Updates the status as to whether or not this component is currently within the view hierarchy. This method must never be called by developers; a UIComponent's internal implementation will call it as components are added to or removed from a parent's child List or facet Map.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setInView" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:562</id>
      <description>Set the rendered property of this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setRendered" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:563</id>
      <description>Set the Renderer type for this UIComponent, or null for components that render themselves.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setRendererType" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:564</id>
      <description>Wrap the argument binding in an implementation of ValueExpression and call through to #setValueExpression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:565</id>
      <description>if name is one of id or parent</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:566</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:567</id>
      <description>Set the ValueExpression used to calculate the value for the specified attribute or property name, if any. The implementation must call ValueExpression#isLiteralText on the argument expression. If isLiteralText() returns true, invoke ValueExpression#getValue on the argument expression and pass the result as the value parameter in a call to this.#getAttributes().put(name, value) where name is the argument name. If an exception is thrown as a result of calling ValueExpression#getValue, wrap it in a jakarta.faces.FacesException and re-throw it. If isLiteralText() returns false, simply store the un-evaluated expression argument in the collection of ValueExpressions under the key given by the argument name. This method must be overridden and implemented for components that comply with JSF 1.2 and later.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:568</id>
      <description>if name is one of id or parent</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:569</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:572</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="UIComponent" return-type="UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:576</id>
      <description>This is a default implementation of jakarta.faces.component.behavior.ClientBehaviorHolder#addClientBehavior. UIComponent does not implement the jakarta.faces.component.behavior.ClientBehaviorHolder interface, but provides default implementations for the methods defined by jakarta.faces.component.behavior.ClientBehaviorHolder to simplify subclass implementations. Subclasses that wish to support the jakarta.faces.component.behavior.ClientBehaviorHolder contract must declare that the subclass implements jakarta.faces.component.behavior.ClientBehaviorHolder, and must provide an implementation of jakarta.faces.component.behavior.ClientBehaviorHolder#getEventNames.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="addClientBehavior" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.behavior.ClientBehavior</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:578</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:579</id>
      <description>if the implementation class of this FacesEvent is not supported by this component</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:580</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:581</id>
      <description>For each of the attached objects on this instance that implement PartialStateHolder, call PartialStateHolder#clearInitialState on the attached object.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:582</id>
      <description>Decode any new state of this UIComponent from the request contained in the specified FacesContext, and store this state as needed. During decoding, events may be enqueued for later processing (by event listeners who have registered an interest), by calling queueEvent().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:583</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:584</id>
      <description>If our rendered property is true, render the beginning of the current state of this UIComponent to the response contained in the specified FacesContext. Call #pushComponentToEL(jakarta.faces.context.FacesContext,jakarta.faces.component.UIComponent). Call jakarta.faces.application.Application#publishEvent, passing jakarta.faces.event.PreRenderComponentEvent.class as the first argument and the component instance to be rendered as the second argument. If a Renderer is associated with this UIComponent, the actual encoding will be delegated to Renderer#encodeBegin(FacesContext, UIComponent). If our rendered property is false, call #pushComponentToEL(jakarta.faces.context.FacesContext,jakarta.faces.component.UIComponent) and return immediately.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:585</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:586</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:587</id>
      <description>If our rendered property is true, render the child UIComponents of this UIComponent. This method will only be called if the rendersChildren property is true. If a Renderer is associated with this UIComponent, the actual encoding will be delegated to Renderer#encodeChildren(FacesContext, UIComponent). If no Renderer is associated with this UIComponent, iterate over each of the children of this component and call #encodeAll(jakarta.faces.context.FacesContext).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:588</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:589</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:590</id>
      <description>If our rendered property is true, render the ending of the current state of this UIComponent. If a Renderer is associated with this UIComponent, the actual encoding will be delegated to Renderer#encodeEnd(FacesContext, UIComponent). Call UIComponent#popComponentFromEL. before returning regardless of the value of the rendered property.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:591</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:592</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:594</id>
      <description>if an intermediate identifier in a search expression identifies a UIComponent that is not a NamingContainer</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="findComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:595</id>
      <description>if expr is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="findComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:596</id>
      <description>Return a mutable Map representing the attributes (and properties, see below) associated wth this UIComponent, keyed by attribute name (which must be a String). The returned implementation must support all of the standard and optional Map methods, plus support the following additional requirements: The Map implementation must implement the java.io.Serializable interface. Any attempt to add a null key or value must throw a NullPointerException. Any attempt to add a key that is not a String must throw a ClassCastException. If the attribute name specified as a key matches a property of this UIComponent's implementation class, the following methods will have special behavior: containsKey - Return false. get() - If the property is readable, call the getter method and return the returned value (wrapping primitive values in their corresponding wrapper classes); otherwise throw IllegalArgumentException. put() - If the property is writeable, call the setter method to set the corresponding value (unwrapping primitive values in their corresponding wrapper classes). If the property is not writeable, or an attempt is made to set a property of primitive type to null, throw IllegalArgumentException. remove - Throw IllegalArgumentException.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getAttributes" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:597</id>
      <description>Return the number of child UIComponents that are associated with this UIComponent. If there are no children, this method must return 0. The method must not cause the creation of a child component list.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getChildCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:599</id>
      <description>This is a default implementation of jakarta.faces.component.behavior.ClientBehaviorHolder#getClientBehaviors. UIComponent does not implement the jakarta.faces.component.behavior.ClientBehaviorHolder interface, but provides default implementations for the methods defined by jakarta.faces.component.behavior.ClientBehaviorHolder to simplify subclass implementations. Subclasses that wish to support the jakarta.faces.component.behavior.ClientBehaviorHolder contract must declare that the subclass implements jakarta.faces.component.behavior.ClientBehaviorHolder, and must add an implementation of jakarta.faces.component.behavior.ClientBehaviorHolder#getEventNames.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getClientBehaviors" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:600</id>
      <description>Return a client-side identifier for this component, generating one if necessary. The associated Renderer, if any, will be asked to convert the clientId to a form suitable for transmission to the client. The return from this method must be the same value throughout the lifetime of the instance, unless the id property of the component is changed, or the component is placed in a NamingContainer whose client ID changes (for example, UIData). However, even in these cases, consecutive calls to this method must always return the same value. The implementation must follow these steps in determining the clientId: Find the closest ancestor to this component in the view hierarchy that implements NamingContainer. Call getContainerClientId() on it and save the result as the parentId local variable. Call #getId on this component and save the result as the myId local variable. If myId is null, call context.getViewRoot().createUniqueId() and assign the result to myId. If parentId is non-null, let myId equal parentId + UINamingContainer#getSeparatorChar + myId. Call Renderer#convertClientId, passing myId, and return the result.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:601</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:602</id>
      <description>This is a default implementation of jakarta.faces.component.behavior.ClientBehaviorHolder#getDefaultEventName. UIComponent does not implement the jakarta.faces.component.behavior.ClientBehaviorHolder interface, but provides default implementations for the methods defined by jakarta.faces.component.behavior.ClientBehaviorHolder to simplify subclass implementations. Subclasses that wish to support the jakarta.faces.component.behavior.ClientBehaviorHolder contract must declare that the subclass implements jakarta.faces.component.behavior.ClientBehaviorHolder, and must provide an implementation of jakarta.faces.component.behavior.ClientBehaviorHolder#getEventNames.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getDefaultEventName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:603</id>
      <description>This is a default implementation of jakarta.faces.component.behavior.ClientBehaviorHolder#getEventNames. UIComponent does not implement the jakarta.faces.component.behavior.ClientBehaviorHolder interface, but provides default implementations for the methods defined by jakarta.faces.component.behavior.ClientBehaviorHolder to simplify subclass implementations. Subclasses that wish to support the jakarta.faces.component.behavior.ClientBehaviorHolder contract must declare that the subclass implements jakarta.faces.component.behavior.ClientBehaviorHolder, and must override this method to return a non-Empty Collection of the client event names that the component supports.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getEventNames" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:604</id>
      <description>Convenience method to return the named facet, if it exists, or null otherwise. If the requested facet does not exist, the facets Map must not be created.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getFacet" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:605</id>
      <description>Return the number of facet UIComponents that are associated with this UIComponent. If there are no facets, this method must return 0. The method must not cause the creation of a facet component map. For backwards compatability with classes that extend UIComponent directly, a default implementation is provided that simply calls #getFacets and then calls the size() method on the returned Map. A more optimized version of this method is provided in UIComponentBase#getFacetCount.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getFacetCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:606</id>
      <description>Return a mutable Map representing the facet UIComponents associated with this UIComponent, keyed by facet name (which must be a String). The returned implementation must support all of the standard and optional Map methods, plus support the following additional requirements: The Map implementation must implement the java.io.Serializable interface. Any attempt to add a null key or value must throw a NullPointerException. Any attempt to add a key that is not a String must throw a ClassCastException. Any attempt to add a value that is not a UIComponent must throw a ClassCastException. Whenever a new facet UIComponent is added: The parent property of the component must be set to this component instance. If the parent property of the component was already non-null, the component must first be removed from its previous parent (where it may have been either a child or a facet). Whenever an existing facet UIComponent is removed: The parent property of the facet must be set to null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getFacets" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:607</id>
      <description>Return an Iterator over the facet followed by child UIComponents of this UIComponent. Facets are returned in an undefined order, followed by all the children in the order they are stored in the child list. If this component has no facets or children, an empty Iterator is returned. The returned Iterator must not support the remove() operation.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getFacetsAndChildren" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:608</id>
      <description>Return the component identifier of this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:609</id>
      <description>Return the parent UIComponent of this UIComponent, if any. A component must allow child components to be added to and removed from the list of children of this component, even though the child component returns null from getParent( ).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getParent" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:610</id>
      <description>Return the Renderer type for this UIComponent (if any).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getRendererType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:611</id>
      <description>Return a flag indicating whether this component is responsible for rendering its child components. The default implementation in UIComponentBase#getRendersChildren tries to find the renderer for this component. If it does, it calls Renderer#getRendersChildren and returns the result. If it doesn't, it returns false. As of version 1.2 of the JavaServer Faces Specification, component authors are encouraged to return true from this method and rely on UIComponentBase#encodeChildren.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getRendersChildren" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:612</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:613</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:614</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:615</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:616</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:617</id>
      <description>Return true if this component (and its children) should be rendered during the Render Response phase of the request processing lifecycle.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="isRendered" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:618</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:619</id>
      <description>For each of the attached objects on this instance that implement PartialStateHolder, call PartialStateHolder#markInitialState on the attached object.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:620</id>
      <description>Perform the component tree processing required by the Apply Request Values phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. If the rendered property of this UIComponent is false, skip further processing. Call #pushComponentToEL. Call the processDecodes() method of all facets and children of this UIComponent, in the order determined by a call to getFacetsAndChildren(). Call the decode() method of this component. Call #popComponentFromEL from inside of a finally block, just before returning. If a RuntimeException is thrown during decode processing, call FacesContext#renderResponse and re-throw the exception.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:621</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:622</id>
      <description>Perform the component tree processing required by the Restore View phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. Call the restoreState() method of this component. Call UIComponent#pushComponentToEL. Call the processRestoreState() method of all facets and children of this UIComponent in the order determined by a call to getFacetsAndChildren(). After returning from the processRestoreState() method on a child or facet, call UIComponent#popComponentFromEL This method may not be called if the state saving method is set to server.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processRestoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:623</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processRestoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:624</id>
      <description>Perform the component tree processing required by the state saving portion of the Render Response phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. consult the transient property of this component. If true, just return null. Call #pushComponentToEL. Call the processSaveState() method of all facets and children of this UIComponent in the order determined by a call to getFacetsAndChildren(), skipping children and facets that are transient. Ensure that #popComponentFromEL is called correctly after each child or facet. Call the saveState() method of this component. Encapsulate the child state and your state into a Serializable Object and return it. This method may not be called if the state saving method is set to server.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processSaveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:625</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processSaveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:626</id>
      <description>Perform the component tree processing required by the Update Model Values phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. If the rendered property of this UIComponent is false, skip further processing. Call #pushComponentToEL. Call the processUpdates() method of all facets and children of this UIComponent, in the order determined by a call to getFacetsAndChildren(). After returning from the processUpdates() method on a child or facet, call UIComponent#popComponentFromEL</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:627</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:629</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:630</id>
      <description>Queue an event for broadcast at the end of the current request processing lifecycle phase. The default implementation in UIComponentBase must delegate this call to the queueEvent() method of the parent UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:631</id>
      <description>if this component is not a descendant of a UIViewRoot</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:632</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:633</id>
      <description>This method is called by UIComponent subclasses that need to restore the objects they saved using #saveAttachedState. This method is tightly coupled with #saveAttachedState. This method supports restoring all attached objects types supported by #saveAttachedState.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="restoreAttachedState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:634</id>
      <description>if the object is not previously returned by #saveAttachedState.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="restoreAttachedState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:635</id>
      <description>if context is null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="restoreAttachedState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:636</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:637</id>
      <description>This method is called by UIComponent subclasses that want to save one or more attached objects. It is a convenience method that does the work of saving attached objects that may or may not implement the StateHolder interface. Using this method implies the use of #restoreAttachedState to restore the attached objects. This method supports saving attached objects of the following type: Objects, null values, and Collections of these objects. If any contained objects are not Collections and do not implement StateHolder, they must have zero-argument public constructors. The exact structure of the returned object is undefined and opaque, but will be serializable.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="saveAttachedState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:638</id>
      <description>if the context argument is null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="saveAttachedState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:639</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:640</id>
      <description>Set the component identifier of this UIComponent (if any). Component identifiers must obey the following syntax restrictions: Must not be a zero-length String. First character must be a letter or an underscore ('_'). Subsequent characters must be a letter, a digit, an underscore ('_'), or a dash ('-'). Component identifiers must also obey the following semantic restrictions (note that this restriction is NOT enforced by the setId() implementation): The specified identifier must be unique among all the components (including facets) that are descendents of the nearest ancestor UIComponent that is a NamingContainer, or within the scope of the entire component tree if there is no such ancestor that is a NamingContainer.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:641</id>
      <description>if id is not syntactically valid</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:643</id>
      <description>Set the rendered property of this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setRendered" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:644</id>
      <description>Set the Renderer type for this UIComponent, or null for components that render themselves.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setRendererType" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:645</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:646</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:647</id>
      <description>if name is one of id or parent</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:648</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:649</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="UIComponentBase" return-type="UIComponentBase" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:650</id>
      <description>Override the default UIComponentBase#broadcast processing to unwrap any wrapped FacesEvent and reset the current row index, before the event is actually broadcast. For events that we did not wrap (in queueEvent()), default processing will occur.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:651</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:652</id>
      <description>if the implementation class of this FacesEvent is not supported by this component</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:653</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:654</id>
      <description>Generate an identifier for a component. The identifier will be prefixed with UNIQUE_ID_PREFIX, and will be unique within this component-container. Optionally, a unique seed value can be supplied by component creators which should be included in the generated unique id.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="createUniqueId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:655</id>
      <description>In addition to the default behavior, ensure that any saved per-row state for our child input components is discarded unless it is needed to rerender the current page with errors.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:656</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:657</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:658</id>
      <description>Return a client identifier for this component that includes the current value of the rowIndex property, if it is not set to -1. This implies that multiple calls to getClientId() may return different results, but ensures that child components can themselves generate row-specific client identifiers (since UIData is a NamingContainer).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:659</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:660</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:661</id>
      <description>Return the zero-relative row number of the first row to be displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getFirst" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:662</id>
      <description>Return the footer facet of this component (if any). A convenience method for getFacet("footer").</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getFooter" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:663</id>
      <description>Return the header facet of this component (if any). A convenience method for getFacet("header").</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getHeader" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:664</id>
      <description>Return the number of rows in the underlying data model. If the number of available rows is unknown, return -1.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getRowCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:665</id>
      <description>if an error occurs getting the row count</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getRowCount" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:666</id>
      <description>Return the data object representing the data for the currently selected row index, if any.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getRowData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:667</id>
      <description>if an error occurs getting the row data</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:668</id>
      <description>if now row data is available at the currently specified row index</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:669</id>
      <description>Return the zero-relative index of the currently selected row. If we are not currently positioned on a row, return -1. This property is not enabled for value binding expressions.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:670</id>
      <description>if an error occurs getting the row index</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getRowIndex" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:671</id>
      <description>Return the number of rows to be displayed, or zero for all remaining rows in the table. The default value of this property is zero.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getRows" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:673</id>
      <description>Return the request-scope attribute under which the data object for the current row will be exposed when iterating. This property is not enabled for value binding expressions.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getVar" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:674</id>
      <description>Override behavior from UIComponentBase#invokeOnComponent to provide special care for positioning the data properly before finding the component and invoking the callback on it. If the argument clientId is equal to this.getClientId() simply invoke the contextCallback, passing the context argument and this as arguments, and return true. If the argument clientId is not equal to this.getClientId(), inspect each of the facet children of this UIData instance and for each one, compare its clientId with the argument clientId. If there is a match, invoke the contextCallback, passing the context argument and this as arguments, and return true. Otherwise, attempt to extract a rowIndex from the clientId. For example, if the argument clientId was form:data:3:customerHeader the rowIndex would be 3. Let this value be called newIndex. The current rowIndex of this instance must be saved aside and restored before returning in all cases, regardless of the outcome of the search or if any exceptions are thrown in the process. The implementation of this method must never return true if setting the rowIndex of this instance to be equal to newIndex causes this instance to return false from #isRowAvailable.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:675</id>
      <description>{@inheritDoc} Also throws FacesException if any exception is thrown when deriving the rowIndex from the argument clientId.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:676</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:677</id>
      <description>Return a flag indicating whether there is rowData available at the current rowIndex. If no wrappedData is available, return false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="isRowAvailable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:678</id>
      <description>if an error occurs getting the row availability</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="isRowAvailable" return-type="boolean">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:679</id>
      <description>Override the default UIComponentBase#processDecodes processing to perform the following steps. If the rendered property of this UIComponent is false, skip further processing. Set the current rowIndex to -1. Call the processDecodes() method of all facets of this UIData, in the order determined by a call to getFacets().keySet().iterator(). Call the processDecodes() method of all facets of the UIColumn children of this UIData. Iterate over the set of rows that were included when this component was rendered (i.e. those defined by the first and rows properties), performing the following processing for each row: Set the current rowIndex to the appropriate value for this row. If isRowAvailable() returns true, iterate over the children components of each UIColumn child of this UIData component, calling the processDecodes() method for each such child. Set the current rowIndex to -1. Call the decode() method of this component. If a RuntimeException is thrown during decode processing, call FacesContext#renderResponse and re-throw the exception.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:680</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:681</id>
      <description>Override the default UIComponentBase#processUpdates processing to perform the following steps. If the rendered property of this UIComponent is false, skip further processing. Set the current rowIndex to -1. Call the processUpdates() method of all facets of this UIData, in the order determined by a call to getFacets().keySet().iterator(). Call the processUpdates() method of all facets of the UIColumn children of this UIData. Iterate over the set of rows that were included when this component was rendered (i.e. those defined by the first and rows properties), performing the following processing for each row: Set the current rowIndex to the appropriate value for this row. If isRowAvailable() returns true, iterate over the children components of each UIColumn child of this UIData component, calling the processUpdates() method for each such child. Set the current rowIndex to -1.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:682</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:683</id>
      <description>Override the default UIComponentBase#processValidators processing to perform the following steps. If the rendered property of this UIComponent is false, skip further processing. Set the current rowIndex to -1. Call the processValidators() method of all facets of this UIData, in the order determined by a call to getFacets().keySet().iterator(). Call the processValidators() method of all facets of the UIColumn children of this UIData. Iterate over the set of rows that were included when this component was rendered (i.e. those defined by the first and rows properties), performing the following processing for each row: Set the current rowIndex to the appropriate value for this row. If isRowAvailable() returns true, iterate over the children components of each UIColumn child of this UIData component, calling the processValidators() method for each such child. Set the current rowIndex to -1.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:684</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:685</id>
      <description>Override the default UIComponentBase#queueEvent processing to wrap any queued events in a wrapper so that we can reset the current row index in broadcast().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:686</id>
      <description>if this component is not a descendant of a UIViewRoot</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:687</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:688</id>
      <description>Set the zero-relative row number of the first row to be displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setFirst" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:689</id>
      <description>if first is negative</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setFirst" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:690</id>
      <description>Set the footer facet of this component. A convenience method for getFacets().put("footer", footer).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setFooter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:691</id>
      <description>if footer is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setFooter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:692</id>
      <description>Set the header facet of this component. A convenience method for getFacets().put("header", header).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setHeader" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:693</id>
      <description>if header is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setHeader" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:695</id>
      <description>if an error occurs setting the row index</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:696</id>
      <description>if rowIndex is less than -1</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:697</id>
      <description>Set the number of rows to be displayed, or zero for all remaining rows in the table.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setRows" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:698</id>
      <description>if rows is negative</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setRows" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:699</id>
      <description>Set the value of the UIData. This value must either be be of type DataModel, or a type that can be adapted into a DataModel.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:700</id>
      <description>If "name" is something other than "value", "var", or "rowIndex", rely on the superclass conversion from ValueBinding to ValueExpression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:701</id>
      <description>if name is one of id, parent, var, or rowIndex</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:702</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:703</id>
      <description>Set the ValueExpression used to calculate the value for the specified attribute or property name, if any. In addition, if a ValueExpression is set for the value property, remove any synthesized DataModel for the data previously bound to this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:704</id>
      <description>if name is one of id, parent, var, or rowIndex</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:705</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:706</id>
      <description>Set the request-scope attribute under which the data object for the current row wil be exposed when iterating.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setVar" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:707</id>
      <description>Create a new UIData instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="UIData" return-type="UIData" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:709</id>
      <description>if any of the parameters are null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="visitTree" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.visit.VisitContext</parameter>
          <parameter>jakarta.faces.component.visit.VisitCallback</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:711</id>
      <description>Override the UIComponent#getContainerClientId to allow users to disable this form from prepending its clientId to its descendent's clientIds depending on the value of this form's #isPrependId property.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="getContainerClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:712</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:713</id>
      <description>The prependId flag.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="isPrependId" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:715</id>
      <description>Override UIComponent#processDecodes to ensure that the form is decoded before its children. This is necessary to allow the submitted property to be correctly set.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:716</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:717</id>
      <description>Override UIComponent#processUpdates to ensure that the children of this UIForm instance are only processed if #isSubmitted returns true.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:718</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:719</id>
      <description>Override UIComponent#processValidators to ensure that the children of this UIForm instance are only processed if #isSubmitted returns true.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:720</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:721</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="setPrependId" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:723</id>
      <description>Create a new UIForm instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="UIForm" return-type="UIForm" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:725</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:726</id>
      <description>Return the image URL for this UIGraphic. This method is a typesafe alias for getValue().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="getUrl" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:727</id>
      <description>Returns the value property of the UIGraphic. This will typically be rendered as an URL.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:728</id>
      <description>Return any ValueBinding set for value if a ValueBinding for url is requested; otherwise, perform the default superclass processing for this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:729</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:730</id>
      <description>Return any ValueExpression set for value if a ValueExpression for url is requested; otherwise, perform the default superclass processing for this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:731</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:732</id>
      <description>Set the image URL for this UIGraphic. This method is a typesafe alias for setValue().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="setUrl" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:733</id>
      <description>Sets the value property of the UIGraphic. This will typically be rendered as an URL.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:734</id>
      <description>Store any ValueBinding specified for url under value instead; otherwise, perform the default superclass processing for this method. In all cases, the superclass is relied on to convert the ValueBinding to a ValueExpression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:735</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:736</id>
      <description>Store any ValueExpression specified for url under value instead; otherwise, perform the default superclass processing for this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:737</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:738</id>
      <description>Create a new UIGraphic instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIGraphic</class-interface>
      <method name="UIGraphic" return-type="UIGraphic" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:739</id>
      <description>Add a Validator instance to the set associated with this UIInput.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="addValidator" return-type="void">
        <parameters>
          <parameter>jakarta.faces.validator.Validator</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:740</id>
      <description>if validator is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="addValidator" return-type="void">
        <parameters>
          <parameter>jakarta.faces.validator.Validator</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:741</id>
      <description>Add a new ValueChangeListener to the set of listeners interested in being notified when ValueChangeEvents occur.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="addValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:742</id>
      <description>if listener is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="addValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:743</id>
      <description>For each of the attached objects on this instance that implement PartialStateHolder, call PartialStateHolder#clearInitialState on the attached object.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:744</id>
      <description>Decode any new state of this UIComponent from the request contained in the specified FacesContext, and store this state as needed. During decoding, events may be enqueued for later processing (by event listeners who have registered an interest), by calling queueEvent().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:745</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:746</id>
      <description>If there has been a call to #setConverterMessage on this instance, return the message. Otherwise, call #getValueExpression passing the key "converterMessage", get the result of the expression, and return it. Any ELExceptions thrown during the call to getValue() must be wrapped in a FacesException and rethrown.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getConverterMessage" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:747</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:748</id>
      <description>If there has been a call to #setRequiredMessage on this instance, return the message. Otherwise, call #getValueExpression passing the key "requiredMessage", get the result of the expression, and return it. Any ELExceptions thrown during the call to getValue() must be wrapped in a FacesException and rethrown.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getRequiredMessage" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:749</id>
      <description>Return the submittedValue value of this UIInput component. This method should only be used by the decode() and validate() method of this component, or its corresponding Renderer.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getSubmittedValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:750</id>
      <description>Return a MethodBinding pointing at a method that will be called during Process Validations phase of the request processing lifecycle, to validate the current value of this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getValidator" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:751</id>
      <description>If there has been a call to #setValidatorMessage on this instance, return the message. Otherwise, call #getValueExpression passing the key "validatorMessage", get the result of the expression, and return it. Any ELExceptions thrown during the call to getValue() must be wrapped in a FacesException and rethrown.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getValidatorMessage" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:752</id>
      <description>Return the set of registered Validators for this UIInput instance. If there are no registered validators, a zero-length array is returned.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getValidators" return-type="jakarta.faces.validator.Validator[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:753</id>
      <description>If #setValueChangeListener was not previously called for this instance, this method must return null. If it was called, this method must return the exact MethodBinding instance that was passed to #setValueChangeListener.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getValueChangeListener" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:754</id>
      <description>Return the set of registered ValueChangeListeners for this UIInput instance. If there are no registered listeners, a zero-length array is returned.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getValueChangeListeners" return-type="jakarta.faces.event.ValueChangeListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:755</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="isEmpty" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:756</id>
      <description>Return the "immediate" state for this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="isImmediate" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:757</id>
      <description>Return the "local value set" state for this component. Calls to setValue() automatically reset this property to true.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="isLocalValueSet" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:758</id>
      <description>Return the "required field" state for this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="isRequired" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:759</id>
      <description>Return a flag indicating whether the local value of this component is valid (no conversion error has occurred).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="isValid" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:760</id>
      <description>In addition to the actions taken in UIOutput when PartialStateHolder#markInitialState() is called, check if any of the installed Validators are PartialStateHolders and if so, call jakarta.faces.component.PartialStateHolder#markInitialState() as appropriate.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:761</id>
      <description>Specialized decode behavior on top of that provided by the superclass. In addition to the standard processDecodes behavior inherited from UIComponentBase, calls validate() if the the immediate property is true; if the component is invalid afterwards or a RuntimeException is thrown, calls FacesContext#renderResponse.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:762</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:763</id>
      <description>In addition to the standard processUpdates behavior inherited from UIComponentBase, calls updateModel(). If the component is invalid afterwards, calls FacesContext#renderResponse. If a RuntimeException is thrown during update processing, calls FacesContext#renderResponse and re-throw the exception.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:764</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:765</id>
      <description>In addition to the standard processValidators behavior inherited from UIComponentBase, calls validate() if the immediate property is false (which is the default); if the component is invalid afterwards, calls FacesContext#renderResponse. If a RuntimeException is thrown during validation processing, calls FacesContext#renderResponse and re-throw the exception.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:766</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:767</id>
      <description>Remove a Validator instance from the set associated with this UIInput, if it was previously associated. Otherwise, do nothing.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="removeValidator" return-type="void">
        <parameters>
          <parameter>jakarta.faces.validator.Validator</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:768</id>
      <description>Remove an existing ValueChangeListener (if any) from the set of listeners interested in being notified when ValueChangeEvents occur.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="removeValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:769</id>
      <description>if listener is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="removeValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:771</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:772</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:773</id>
      <description>Override any ValueExpression set for the "converterMessage" with the literal argument provided to this method. Subsequent calls to #getConverterMessage will return this value;</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setConverterMessage" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:774</id>
      <description>Set the "immediate" state for this component. When set to true, the component's value will be converted and validated immediately in the Apply Request Values phase, and ValueChangeEvents will be delivered in that phase as well. The default value for this property must be false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setImmediate" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:775</id>
      <description>Sets the "local value set" state for this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setLocalValueSet" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:776</id>
      <description>Set the "required field" state for this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setRequired" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:777</id>
      <description>Override any ValueExpression set for the "requiredMessage" with the literal argument provided to this method. Subsequent calls to #getRequiredMessage will return this value;</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setRequiredMessage" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:778</id>
      <description>Set the submittedValue value of this UIInput component. This method should only be used by the decode() and validate() method of this component, or its corresponding Renderer.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setSubmittedValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:779</id>
      <description>Set a flag indicating whether the local value of this component is valid (no conversion error has occurred).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setValid" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:780</id>
      <description>Set a MethodBinding pointing at a method that will be called during Process Validations phase of the request processing lifecycle, to validate the current value of this component. Any method referenced by such an expression must be public, with a return type of void, and accept parameters of type FacesContext, UIComponent, and Object.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setValidator" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:781</id>
      <description>Override any ValueExpression set for the "validatorMessage" with the literal argument provided to this method. Subsequent calls to #getValidatorMessage will return this value;</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setValidatorMessage" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:782</id>
      <description>Set the value of this UIComponent (if any).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:783</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="setValueChangeListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:784</id>
      <description>Create a new UIInput instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="UIInput" return-type="UIInput" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:785</id>
      <description>Perform the following algorithm to update the model data associated with this UIInput, if any, as appropriate. If the valid property of this component is false, take no further action. If the localValueSet property of this component is false, take no further action. If no ValueExpression for value exists, take no further action. Call setValue() method of the ValueExpression to update the value that the ValueExpression points at. If the setValue() method returns successfully: Clear the local value of this UIInput. Set the localValueSet property of this UIInput to false. If the setValue() method throws an Exception: Enqueue an error message. Create a FacesMessage with the id #UPDATE_MESSAGE_ID. Create a UpdateModelException, passing the FacesMessage and the caught exception to the constructor. Create an ExceptionQueuedEventContext, passing the FacesContext, the UpdateModelException, this component instance, and PhaseId#UPDATE_MODEL_VALUES to its constructor. Call FacesContext#getExceptionHandler and then call ExceptionHandler#processEvent, passing the ExceptionQueuedEventContext. Set the valid property of this UIInput to false. The exception must not be re-thrown. This enables tree traversal to continue for this lifecycle phase, as in all the other lifecycle phases.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="updateModel" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:786</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="updateModel" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:788</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:789</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:791</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="isRedisplay" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:792</id>
      <description>Return the flag indicating whether the detail property of the associated message(s) should be displayed. Defaults to true.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="isShowDetail" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:793</id>
      <description>Return the flag indicating whether the summary property of the associated message(s) should be displayed. Defaults to false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="isShowSummary" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:795</id>
      <description>Set the flag indicating whether the detail property of the associated message(s) should be displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="setRedisplay" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:796</id>
      <description>Set the flag indicating whether the detail property of the associated message(s) should be displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="setShowDetail" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:797</id>
      <description>Set the flag indicating whether the summary property of the associated message(s) should be displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="setShowSummary" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:798</id>
      <description>Create a new UIMessage instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="UIMessage" return-type="UIMessage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:799</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:800</id>
      <description>Return the client identifier of the component for which this component represents associated message(s) (if any).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="getFor" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:801</id>
      <description>Return the flag indicating whether only global messages (that is, messages with no associated client identifier) should be rendered. Mutually exclusive with the "for" property which takes precedence. Defaults to false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="isGlobalOnly" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:802</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="isRedisplay" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:803</id>
      <description>Return the flag indicating whether the detail property of the associated message(s) should be displayed. Defaults to false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="isShowDetail" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:804</id>
      <description>Return the flag indicating whether the summary property of the associated message(s) should be displayed. Defaults to true.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="isShowSummary" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:805</id>
      <description>Set the client identifier of the component for which this component represents associated message(s) (if any). This property must be set before the message is displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="setFor" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:806</id>
      <description>Set the flag indicating whether only global messages (that is, messages with no associated client identifier) should be rendered.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="setGlobalOnly" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:807</id>
      <description>Set the flag indicating whether the detail property of the associated message(s) should be displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="setRedisplay" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:808</id>
      <description>Set the flag indicating whether the detail property of the associated message(s) should be displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="setShowDetail" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:809</id>
      <description>Set the flag indicating whether the summary property of the associated message(s) should be displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="setShowSummary" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:810</id>
      <description>Create a new UIMessages instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessages</class-interface>
      <method name="UIMessages" return-type="UIMessages" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:811</id>
      <description>Generate an identifier for a component. The identifier will be prefixed with UNIQUE_ID_PREFIX, and will be unique within this component-container. Optionally, a unique seed value can be supplied by component creators which should be included in the generated unique id.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UINamingContainer</class-interface>
      <method name="createUniqueId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:812</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UINamingContainer</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:813</id>
      <description>Return the character used to separate segments of a clientId. The implementation must determine if there is a with the value given by the value of the symbolic constant #SEPARATOR_CHAR_PARAM_NAME. If there is a value for this param, the first character of the value must be returned from this method. Otherwise, the value of the symbolic constant NamingContainer#SEPARATOR_CHAR must be returned.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UINamingContainer</class-interface>
      <method name="getSeparatorChar" return-type="char">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:814</id>
      <description>Create a new UINamingContainer instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UINamingContainer</class-interface>
      <method name="UINamingContainer" return-type="UINamingContainer" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:816</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutcomeTarget</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:817</id>
      <description>Returns the outcome property of the UIOutcomeTarget. This value is passed to the jakarta.faces.application.NavigationHandler when resolving the target url of this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutcomeTarget</class-interface>
      <method name="getOutcome" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:818</id>
      <description>Return whether or not the view parameters should be encoded into the target url.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutcomeTarget</class-interface>
      <method name="isIncludeViewParams" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:819</id>
      <description>Set whether or not the page parameters should be encoded into the target url.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutcomeTarget</class-interface>
      <method name="setIncludeViewParams" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:820</id>
      <description>Sets the outcome property of the UIOutcomeTarget. This value is passed to the NavigationHandler when resolving the target url of this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutcomeTarget</class-interface>
      <method name="setOutcome" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:821</id>
      <description>Create a new UIOutcomeTarget instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutcomeTarget</class-interface>
      <method name="UIOutcomeTarget" return-type="UIOutcomeTarget" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:822</id>
      <description>For each of the attached objects on this instance that implement PartialStateHolder, call PartialStateHolder#clearInitialState on the attached object.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:823</id>
      <description>Return the Converter (if any) that is registered for this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="getConverter" return-type="jakarta.faces.convert.Converter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:824</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:825</id>
      <description>Return the local value of this UIComponent (if any), without evaluating any associated ValueExpression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="getLocalValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:827</id>
      <description>In addition to the actions taken in UIComponentBase when PartialStateHolder#markInitialState() is called, check if the installed Converter is a PartialStateHolder and if it is, call jakarta.faces.component.PartialStateHolder#markInitialState() on it.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:828</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:829</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:830</id>
      <description>Set the Converter (if any) that is registered for this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="setConverter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.convert.Converter</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:831</id>
      <description>Set the value of this UIComponent (if any).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:832</id>
      <description>Create a new UIOutput instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="UIOutput" return-type="UIOutput" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:833</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIPanel</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:834</id>
      <description>Create a new UIPanel instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIPanel</class-interface>
      <method name="UIPanel" return-type="UIPanel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:835</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIParameter</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:836</id>
      <description>Return the optional parameter name for this parameter.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIParameter</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:837</id>
      <description>Returns the value property of the UIParameter.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIParameter</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:838</id>
      <description>Return the value of the disable directive for this component. This directive determines whether the parameter value should be disabled by assigning it a null value. If true, the value set on this component is ignored.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIParameter</class-interface>
      <method name="isDisable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:839</id>
      <description>Sets the disable property of the UIParameter.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIParameter</class-interface>
      <method name="setDisable" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:840</id>
      <description>Set the optional parameter name for this parameter.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIParameter</class-interface>
      <method name="setName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:841</id>
      <description>Sets the value property of the\ UIParameter.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIParameter</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:842</id>
      <description>Create a new UIParameter instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIParameter</class-interface>
      <method name="UIParameter" return-type="UIParameter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:843</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:844</id>
      <description>Return any ValueBinding set for value if a ValueBinding for selected is requested; otherwise, perform the default superclass processing for this method. Rely on the superclass implementation to wrap the returned ValueExpression in a ValueBinding.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:845</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:846</id>
      <description>Return any ValueExpression set for value if a ValueExpression for selected is requested; otherwise, perform the default superclass processing for this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:847</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:848</id>
      <description>Return the local value of the selected state of this component. This method is a typesafe alias for getValue().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="isSelected" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:849</id>
      <description>Set the local value of the selected state of this component. This method is a typesafe alias for setValue().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="setSelected" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:850</id>
      <description>Store any ValueBinding specified for selected under value instead; otherwise, perform the default superclass processing for this method. Rely on the superclass implementation to wrap the argument ValueBinding in a ValueExpression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:851</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:852</id>
      <description>Store any ValueExpression specified for selected under value instead; otherwise, perform the default superclass processing for this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:853</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:854</id>
      <description>Create a new UISelectBoolean instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectBoolean</class-interface>
      <method name="UISelectBoolean" return-type="UISelectBoolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:855</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:856</id>
      <description>Return the description for this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="getItemDescription" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:857</id>
      <description>Return the localized label for this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="getItemLabel" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:858</id>
      <description>Return the server value for this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="getItemValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:859</id>
      <description>Returns the value property of the UISelectItem.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:860</id>
      <description>Return the disabled setting for this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="isItemDisabled" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:861</id>
      <description>Return the escape setting for the label of this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="isItemEscaped" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:862</id>
      <description>Return the value of the noSelectionOption property. If the value of this property is true, the system interprets the option represented by this UISelectItem instance as representing a "no selection" option. See UISelectOne#validateValue and UISelectMany#validateValue for usage.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="isNoSelectionOption" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:863</id>
      <description>Set the description for this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="setItemDescription" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:864</id>
      <description>Set the disabled value for this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="setItemDisabled" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:865</id>
      <description>Set the escape value for the label of this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="setItemEscaped" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:866</id>
      <description>Set the localized label for this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="setItemLabel" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:867</id>
      <description>Set the server value for this selection item.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="setItemValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:868</id>
      <description>Set the value of the noSelectionOption property.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="setNoSelectionOption" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:869</id>
      <description>Sets the value property of the UISelectItem.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:870</id>
      <description>Create a new UISelectItem instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItem</class-interface>
      <method name="UISelectItem" return-type="UISelectItem" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:871</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItems</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:872</id>
      <description>Returns the value property of the UISelectItems.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItems</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:873</id>
      <description>Sets the value property of the UISelectItems.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItems</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:874</id>
      <description>Create a new UISelectItems instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectItems</class-interface>
      <method name="UISelectItems" return-type="UISelectItems" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:875</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:876</id>
      <description>Return the currently selected values, or null if there are no currently selected values. This is a typesafe alias for getValue().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="getSelectedValues" return-type="java.lang.Object[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:877</id>
      <description>Return any ValueBinding set for value if a ValueBinding for selectedValues is requested; otherwise, perform the default superclass processing for this method. This method relies on the superclass to provide the ValueExpression to ValueBinding wrapping.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:878</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:879</id>
      <description>Return any ValueExpression set for value if a ValueExpression for selectedValues is requested; otherwise, perform the default superclass processing for this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:880</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:881</id>
      <description>Set the currently selected values, or null to indicate that there are no currently selected values. This is a typesafe alias for setValue().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="setSelectedValues" return-type="void">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:882</id>
      <description>Store any ValueBinding specified for selectedValues under value instead; otherwise, perform the default superclass processing for this method. This method relies on the superclass to wrap the argument ValueBinding in a ValueExpression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:883</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="setValueBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:884</id>
      <description>Store any ValueExpression specified for selectedValues under value instead; otherwise, perform the default superclass processing for this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:885</id>
      <description>if name is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:886</id>
      <description>Create a new UISelectMany instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectMany</class-interface>
      <method name="UISelectMany" return-type="UISelectMany" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:887</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectOne</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:888</id>
      <description>Create a new UISelectOne instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UISelectOne</class-interface>
      <method name="UISelectOne" return-type="UISelectOne" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:889</id>
      <description>Override behavior from superclass to pull a value from the incoming request parameter map under the name given by #getName and store it with a call to UIInput#setSubmittedValue.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:890</id>
      <description>Called specially by UIViewRoot#encodeEnd, this method simply sets the submitted value to be the return from #getStringValue.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="encodeAll" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:891</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="encodeAll" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:892</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:893</id>
      <description>Return the request parameter name from which the value is retrieved.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:894</id>
      <description>If the value of this parameter comes from a ValueExpression return the value of the expression, otherwise, return the local value.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="getStringValue" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:895</id>
      <description>Manually perform standard conversion steps to get a string value from the value expression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="getStringValueFromModel" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:896</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="getStringValueFromModel" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:898</id>
      <description>Return false. The immediate setting is not relevant for view parameters and must be assumed to be false.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="isImmediate" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:899</id>
      <description>Specialize superclass behavior to treat null differently. In this class, a null value along with the "required" flag being set to true will cause a validation failure.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:900</id>
      <description>Set the request parameter name from which the value is retrieved.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="setName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:901</id>
      <description>PENDING (docs) Interesting that submitted value isn't saved by the parent</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="setSubmittedValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:902</id>
      <description>Create a new UIViewParameter instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="UIViewParameter" return-type="UIViewParameter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:903</id>
      <description>Call through to superclass UIInput#updateModel then take the additional action of pushing the value into request scope if and only if the value is not a value expression, is valid, and the local value was set on this lifecycle execution.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="updateModel" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:904</id>
      <description>Return the UIViewParameter to which this instance refers. If the current viewId is the same as the viewId passed to our constructor, use the index passed to the constructor to find the actual UIViewParameter instance and return it. Otherwise, call StateHolder#restoreState on the saved state and return the result.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter.Reference</class-interface>
      <method name="getUIViewParameter" return-type="jakarta.faces.component.UIViewParameter">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:905</id>
      <description>Construct a reference to a UIViewParameter. This constructor cause the StateHolder#saveState method to be called on argument UIViewParameter.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter.Reference</class-interface>
      <method name="UIViewParameter.Reference" return-type="UIViewParameter.Reference">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewParameter</parameter>
          <parameter>int</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:906</id>
      <description>Add argument component, which is assumed to represent a resource instance, as a resource to this view. A resource instance is rendered by a resource Renderer, as described in the Standard HTML RenderKit. The default implementation must call through to #addComponentResource(jakarta.faces.context.FacesContext, jakarta.faces.component.UIComponent, java.lang.String).</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="addComponentResource" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:907</id>
      <description>Add argument component, which is assumed to represent a resource instance, as a resource to this view. A resource instance is rendered by a resource Renderer, as described in the Standard HTML RenderKit. The component must be added using the following algorithm: If the target argument is null, look for a target attribute on the component. If there is no target attribute, set target to be the default value head Call #getComponentResources to obtain the child list for the given target. If the component ID of componentResource matches the the ID of a resource that has allready been added, remove the old resource. Add the component resource to the list.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="addComponentResource" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:908</id>
      <description>Add the argument newPhaseListener to the list of PhaseListeners on this UIViewRoot.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="addPhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:909</id>
      <description>Broadcast any events that have been queued. First broadcast events that have been queued for PhaseId#ANY_PHASE. Then broadcast ane events that have been queued for the current phase. In both cases, UIComponent#pushComponentToEL must be called before the event is broadcast, and UIComponent#popComponentFromEL must be called after the return from the broadcast, even in the case of an exception.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="broadcastEvents" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:911</id>
      <description>Generate an identifier for a component. The identifier will be prefixed with UNIQUE_ID_PREFIX, and will be unique within this UIViewRoot. Optionally, a unique seed value can be supplied by component creators which should be included in the generated unique id.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="createUniqueId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:912</id>
      <description>Override the default UIComponentBase#encodeBegin behavior. If #getBeforePhaseListener returns non-null, invoke it, passing a PhaseEvent for the PhaseId#RENDER_RESPONSE phase. If the internal list populated by calls to #addPhaseListener is non-empty, any listeners in that list must have their PhaseListener#beforePhase method called, passing the PhaseEvent. Any errors that occur during invocation of any of the the beforePhase listeners must be logged and swallowed. After listeners are invoked call superclass processing.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:913</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:914</id>
      <description>If jakarta.faces.context.PartialViewContext#isAjaxRequest returns true, perform partial rendering by calling jakarta.faces.context.PartialViewContext#processPartial with PhaseId#RENDER_RESPONSE. If jakarta.faces.context.PartialViewContext#isAjaxRequest returns false, delegate to the parent jakarta.faces.component.UIComponentBase#encodeChildren method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:915</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:916</id>
      <description>If #getAfterPhaseListener returns non-null, invoke it, passing a PhaseEvent for the PhaseId#RENDER_RESPONSE phase. Any errors that occur during invocation of the afterPhase listener must be logged and swallowed. If the current view has view parameters, as indicated by a non-empty and non-UnsupportedOperationException throwing return from jakarta.faces.view.ViewDeclarationLanguage#getViewMetadata(jakarta.faces.context.FacesContext, String), call UIViewParameter#encodeAll on each parameter. If calling getViewParameters() causes UnsupportedOperationException to be thrown, the exception must be silently swallowed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:917</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:918</id>
      <description>Return the MethodExpression that will be invoked after this view is rendered.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getAfterPhaseListener" return-type="MethodExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:919</id>
      <description>Return the MethodExpression that will be invoked before this view is rendered.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getBeforePhaseListener" return-type="MethodExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:921</id>
      <description>if target or context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getComponentResources" return-type="java.util.List">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:922</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:923</id>
      <description>Return the Locale to be used in localizing the response being created for this view. Algorithm: If we have a locale ivar, return it. If we have a value expression for "locale", get its value. If the value is null, return the result of calling jakarta.faces.application.ViewHandler#calculateLocale. If the value is an instance of java.util.Locale return it. If the value is a String, convert it to a java.util.Locale and return it. If there is no value expression for "locale", return the result of calling jakarta.faces.application.ViewHandler#calculateLocale.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getLocale" return-type="java.util.Locale" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:924</id>
      <description>Return an unmodifiable list of the PhaseListener instances attached to this UIViewRoot instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getPhaseListeners" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:925</id>
      <description>Return the render kit identifier of the jakarta.faces.render.RenderKit associated with this view. Unless explicitly set, as in jakarta.faces.application.ViewHandler#createView, the returned value will be null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getRenderKitId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:926</id>
      <description>Call UIComponentBase#getRendersChildren If jakarta.faces.context.PartialViewContext#isAjaxRequest returns true this method must return true.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getRendersChildren" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:927</id>
      <description>Return the view identifier for this view.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getViewId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:928</id>
      <description>Return the SystemEventListener instances registered on this UIComponent instance that are interested in events of type eventClass.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getViewListenersForEventClass" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:929</id>
      <description>if argument systemEvent is null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getViewListenersForEventClass" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:930</id>
      <description>This implementation simply calls through to #getViewMap(boolean), passing true as the argument, and returns the result.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getViewMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:933</id>
      <description>Broadcast any events that have been queued for the Invoke Application phase of the request processing lifecycle and to clear out any events for later phases if the event processing for this phase caused FacesContext#renderResponse or FacesContext#responseComplete to be called.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processApplication" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:934</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processApplication" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:935</id>
      <description>Perform partial processing by calling jakarta.faces.context.PartialViewContext#processPartial with PhaseId#APPLY_REQUEST_VALUES if: jakarta.faces.context.PartialViewContext#isPartialRequest returns true and we don't have a request to process all components in the view (jakarta.faces.context.PartialViewContext#isExecuteAll returns false) Perform full processing by calling UIComponentBase#processDecodes if one of the following conditions are met: jakarta.faces.context.PartialViewContext#isPartialRequest returns true and we have a request to process all components in the view (jakarta.faces.context.PartialViewContext#isExecuteAll returns true) jakarta.faces.context.PartialViewContext#isPartialRequest returns false Override the default UIComponentBase#processDecodes behavior to broadcast any queued events after the default processing or partial processing has been completed and to clear out any events for later phases if the event processing for this phase caused FacesContext#renderResponse or FacesContext#responseComplete to be called.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:936</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processDecodes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:938</id>
      <description>Perform partial processing by calling jakarta.faces.context.PartialViewContext#processPartial with PhaseId#UPDATE_MODEL_VALUES if: jakarta.faces.context.PartialViewContext#isPartialRequest returns true and we don't have a request to process all components in the view (jakarta.faces.context.PartialViewContext#isExecuteAll returns false) Perform full processing by calling UIComponentBase#processUpdates if one of the following conditions are met: jakarta.faces.context.PartialViewContext#isPartialRequest returns true and we have a request to process all components in the view (jakarta.faces.context.PartialViewContext#isExecuteAll returns true) jakarta.faces.context.PartialViewContext#isPartialRequest returns false Override the default UIComponentBase behavior to broadcast any queued events after the default processing or partial processing has been completed and to clear out any events for later phases if the event processing for this phase caused FacesContext#renderResponse or FacesContext#responseComplete to be called.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:939</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processUpdates" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:940</id>
      <description>Perform partial processing by calling jakarta.faces.context.PartialViewContext#processPartial with PhaseId#PROCESS_VALIDATIONS if: jakarta.faces.context.PartialViewContext#isPartialRequest returns true and we don't have a request to process all components in the view (jakarta.faces.context.PartialViewContext#isExecuteAll returns false) Perform full processing by calling UIComponentBase#processValidators if one of the following conditions are met: jakarta.faces.context.PartialViewContext#isPartialRequest returns true and we have a request to process all components in the view (jakarta.faces.context.PartialViewContext#isExecuteAll returns true) jakarta.faces.context.PartialViewContext#isPartialRequest returns false Override the default UIComponentBase#processValidators behavior to broadcast any queued events after the default processing or partial processing has been completed and to clear out any events for later phases if the event processing for this phase caused FacesContext#renderResponse or FacesContext#responseComplete to be called.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:941</id>
      <description>if context is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:942</id>
      <description>Override the default UIComponentBase#queueEvent behavior to accumulate the queued events for later broadcasting.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:943</id>
      <description>if this component is not a descendant of a UIViewRoot</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:944</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="queueEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:945</id>
      <description>Remove argument component, which is assumed to represent a resource instance, as a resource to this view.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="removeComponentResource" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:946</id>
      <description>Remove argument component, which is assumed to represent a resource instance, as a resource to this view. A resource instance is rendered by a resource Renderer, as described in the Standard HTML RenderKit. The component must be removed using the following algorithm: If the target argument is null, look for a target attribute on the component. If there is no target attribute, set target to be the default value head Call #getComponentResources to obtain the child list for the given target. Remove the component resource from the child list.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="removeComponentResource" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:947</id>
      <description>If the argument toRemove is in the list of PhaseListeners for this instance, it must be removed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="removePhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:948</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:949</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:950</id>
      <description>Allow an arbitrary method to be called for the "afterPhase" event as the UIViewRoot runs through its lifecycle. This method will be called for all phases including PhaseId#RESTORE_VIEW. Unlike a true PhaseListener, this approach doesn't allow for only receiving PhaseEvents for a given phase. The method must conform to the signature of PhaseListener#afterPhase.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="setAfterPhaseListener" return-type="void">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:951</id>
      <description>Allow an arbitrary method to be called for the "beforePhase" event as the UIViewRoot runs through its lifecycle. This method will be called for all phases except PhaseId#RESTORE_VIEW. Unlike a true PhaseListener, this approach doesn't allow for only receiving PhaseEvents for a given phase. The method must conform to the signature of PhaseListener#beforePhase.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="setBeforePhaseListener" return-type="void">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:952</id>
      <description>Overridden to take no action.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="setInView" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:953</id>
      <description>Set the Locale to be used in localizing the response being created for this view.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="setLocale" return-type="void">
        <parameters>
          <parameter>java.util.Locale</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:954</id>
      <description>Set the render kit identifier of the jakarta.faces.render.RenderKit associated with this view. This method may be called at any time between the end of Apply Request Values phase of the request processing lifecycle (i.e. when events are being broadcast) and the beginning of the Render Response phase.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="setRenderKitId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:955</id>
      <description>Set the view identifier for this view.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="setViewId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:956</id>
      <description>Install the listener instance referenced by argument listener into the UIViewRoot as a listener for events of type systemEventClass. Note that installed listeners are not maintained as part of the UIViewRoot's state.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="subscribeToViewEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:957</id>
      <description>if systemEventClass or listener are null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="subscribeToViewEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:958</id>
      <description>Create a new UIViewRoot instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="UIViewRoot" return-type="UIViewRoot" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:959</id>
      <description>Remove the listener instance referenced by argument listener from the UIViewRoot as a listener for events of type systemEventClass.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="unsubscribeFromViewEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:960</id>
      <description>if systemEventClass or listener are null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="unsubscribeFromViewEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:961</id>
      <description>Generate an identifier for a component. The identifier will be prefixed with UNIQUE_ID_PREFIX, and will be unique within this component-container. Optionally, a unique seed value can be supplied by component creators which should be included in the generated unique id.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UniqueIdVendor</class-interface>
      <method name="createUniqueId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:962</id>
      <description>Return the FacesMessage passed to the constructor.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UpdateModelException</class-interface>
      <method name="getFacesMessage" return-type="jakarta.faces.application.FacesMessage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:963</id>
      <description>Store the argument facesMessage so it may be returned from #getFacesMessage and pass the argument cause to the super constructor.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UpdateModelException</class-interface>
      <method name="UpdateModelException" return-type="UpdateModelException">
        <parameters>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:964</id>
      <description>Return the Converter (if any) that is registered for this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ValueHolder</class-interface>
      <method name="getConverter" return-type="jakarta.faces.convert.Converter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:965</id>
      <description>Return the local value of this UIComponent (if any), without evaluating any associated ValueExpression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ValueHolder</class-interface>
      <method name="getLocalValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:967</id>
      <description>Set the Converter (if any) that is registered for this UIComponent.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ValueHolder</class-interface>
      <method name="setConverter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.convert.Converter</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:968</id>
      <description>Set the value of this UIComponent (if any).</description>
      <package>jakarta.faces.component</package>
      <class-interface>ValueHolder</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:969</id>
      <description>Add the specified AjaxBehaviorListener to the set of listeners registered to receive event notifications from this AjaxBehavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="addAjaxBehaviorListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.AjaxBehaviorListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:970</id>
      <description>if listener is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="addAjaxBehaviorListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.AjaxBehaviorListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:971</id>
      <description />
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="AjaxBehavior" return-type="AjaxBehavior" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:972</id>
      <description>Return a non-empty Collection of component identifiers that will be used to identify components that should be processed during the execute phase of the request processing lifecycle. Note that the returned collection may be unmodifiable. Modifications should be performed by calling #setExecute.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getExecute" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:973</id>
      <description>This method returns an unmodifiable Set containing the ClientBehaviorHint SUBMITTING.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getHints" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:974</id>
      <description>Return the String of JavaScript function name that will be used to identify the client callback function that should be run in the event of an error.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getOnerror" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:975</id>
      <description>Return the String of JavaScript function name that will be used to identify the client callback function that should be run on the occurance of a client-side event.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getOnevent" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:976</id>
      <description>Return a non-empty Collection of component identifiers that will be used to identify components that should be processed during the render phase of the request processing lifecycle. Note that the returned collection may be unmodifiable. Modifications should be performed by calling #setRender.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getRender" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:977</id>
      <description>Returns the renderer type of the ClientBehaviorRenderer to use for the behavior. The default implementation returns null. Subclasses should either override this method to return a string that identifies the type of ClientBehaviorRenderer to use, or should override #getScript and perform script rendering locally in the ClientBehavior implementation.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getRendererType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:978</id>
      <description>Returns the ValueExpression used to calculate the value for the specified property name, if any.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:979</id>
      <description>if name is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:980</id>
      <description>Return the disabled status of this behavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="isDisabled" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:982</id>
      <description>Tests whether the immediate attribute is specified. Returns true if the immediate attribute is specified, either as a locally set property or as a value expression. This information allows an associated client behavior renderer to fall back on the parent component's immediate status when immediate is not explicitly specified on the AjaxBehavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="isImmediateSet" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:983</id>
      <description>Remove the specified AjaxBehaviorListener from the set of listeners registered to receive event notifications from this AjaxBehavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="removeAjaxBehaviorListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.AjaxBehaviorListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:984</id>
      <description>if listener is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="removeAjaxBehaviorListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.AjaxBehaviorListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:985</id>
      <description>Implementation of jakarta.faces.component.StateHolder#restoreState.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:986</id>
      <description>Implementation of jakarta.faces.component.StateHolder#saveState.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:987</id>
      <description>Sets the disabled status of this behavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setDisabled" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:988</id>
      <description>Sets the component identifiers that will be used to identify components that should be processed during the execute phase of the request processing lifecycle.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setExecute" return-type="void">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:989</id>
      <description>Sets the immediate status of this behavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setImmediate" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:990</id>
      <description>Sets the JavaScript function name that will be used to identify the client callback function that should be run in the event of an error.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setOnerror" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:991</id>
      <description>Sets the JavaScript function name that will be used to identify the client callback function that should be run in response to event activity.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setOnevent" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:992</id>
      <description>Sets the component identifiers that will be used to identify components that should be processed during the render phase of the request processing lifecycle.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setRender" return-type="void">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:993</id>
      <description>Sets the ValueExpression used to calculate the value for the specified property name.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:994</id>
      <description>if name is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setValueExpression" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:995</id>
      <description>Broadcast the specified BehaviorEvent to all registered event listeners who have expressed an interest in events of this type. Listeners are called in the order in which they were added.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>Behavior</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.BehaviorEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:996</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>Behavior</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.BehaviorEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:997</id>
      <description>if the implementation class of this BehaviorEvent is not supported by this component</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>Behavior</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.BehaviorEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:998</id>
      <description>if event is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>Behavior</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.BehaviorEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:999</id>
      <description />
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="BehaviorBase" return-type="BehaviorBase" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1000</id>
      <description>Default implementation of Behavior#broadcast. Delivers the specified BehaviorEvent to all registered BehaviorListener event listeners who have expressed an interest in events of this type. Listeners are called in the order in which they were registered (added).</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.BehaviorEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1001</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.BehaviorEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1002</id>
      <description>if the implementation class of this BehaviorEvent is not supported by this component</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.BehaviorEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1003</id>
      <description>if event is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.BehaviorEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1004</id>
      <description>Clears the initial state flag, causing the behavior to revert from partial to full state saving.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1005</id>
      <description>Implementation of jakarta.faces.component.PartialStateHolder#initialStateMarked.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1006</id>
      <description>Implementation of jakarta.faces.component.StateHolder#isTransient.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1007</id>
      <description>Implementation of jakarta.faces.component.PartialStateHolder#markInitialState.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1008</id>
      <description>Implementation of jakarta.faces.component.StateHolder#restoreState.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1009</id>
      <description>Implementation of jakarta.faces.component.StateHolder#saveState.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1010</id>
      <description>Implementation of jakarta.faces.component.StateHolder#setTransient.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>BehaviorBase</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1011</id>
      <description>Decode any new state of this ClientBehavior from the request contained in the specified FacesContext. During decoding, events may be enqueued for later processing (by event listeners who have registered an interest), by calling queueEvent(). Default implementation delegates decoding to jakarta.faces.render.ClientBehaviorRenderer#decode(FacesContext, UIComponent, ClientBehavior)</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehavior</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1012</id>
      <description>if context or component is null.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehavior</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1013</id>
      <description>Returns hints that describe the behavior of the ClientBehavior implementation. The hints may impact how Renderers behave in the presence of Behaviors. For example, when a Behavior that specifies ClientBehaviorHint.SUBMITTING is present, the Renderer may choose to alternate the scripts that it generates itself.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehavior</class-interface>
      <method name="getHints" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1014</id>
      <description>Return the script that implements this ClientBehavior's client-side logic. ClientBehavior.getScript() implementations are allowed to return null to indicate that no script is required for this particular getScript() call. For example, a ClientBehavior implementation may return null if the Behavior is disabled.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehavior</class-interface>
      <method name="getScript" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.component.behavior.ClientBehaviorContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1015</id>
      <description>if behaviorContext is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehavior</class-interface>
      <method name="getScript" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.component.behavior.ClientBehaviorContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1016</id>
      <description />
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorBase</class-interface>
      <method name="ClientBehaviorBase" return-type="ClientBehaviorBase" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1017</id>
      <description>Default implementation of of ClientBehavior#decode. If a ClientBehaviorRenderer is available for the specified behavior renderer type, this method delegates to the ClientBehaviorRenderer's decode() method. Otherwise, no decoding is performed.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorBase</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1018</id>
      <description>if context or component is null.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorBase</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1019</id>
      <description>Default implementation of ClientBehavior#getHints(). By default, no hints are specified, and this method returns an empty, umodifiable set.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorBase</class-interface>
      <method name="getHints" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1020</id>
      <description>Returns the renderer type of the ClientBehaviorRenderer to use for the behavior. The default implementation returns null. Subclasses should either override this method to return a string that identifies the type of ClientBehaviorRenderer to use, or should override #getScript and perform script rendering locally in the ClientBehavior implementation.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorBase</class-interface>
      <method name="getRendererType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1021</id>
      <description>Default implementation of of ClientBehavior#getScript. If a ClientBehaviorRenderer is available for the specified behavior renderer type, this method delegates to the ClientBehaviorRenderer#getScript method. Otherwise, this method returns null.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorBase</class-interface>
      <method name="getScript" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.component.behavior.ClientBehaviorContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1022</id>
      <description>if behaviorContext is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorBase</class-interface>
      <method name="getScript" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.component.behavior.ClientBehaviorContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1023</id>
      <description />
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext</class-interface>
      <method name="ClientBehaviorContext" return-type="ClientBehaviorContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1024</id>
      <description>Creates a ClientBehaviorContext instance.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext</class-interface>
      <method name="createClientBehaviorContext" return-type="jakarta.faces.component.behavior.ClientBehaviorContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1025</id>
      <description>if context, component or eventName is null</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext</class-interface>
      <method name="createClientBehaviorContext" return-type="jakarta.faces.component.behavior.ClientBehaviorContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Collection</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1026</id>
      <description>Returns the UIComponent that is requesting the ClientBehavior script.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext</class-interface>
      <method name="getComponent" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1027</id>
      <description>Returns the name of the behavior event for which the ClientBehavior script is being requested.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext</class-interface>
      <method name="getEventName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1028</id>
      <description>Returns the FacesContext for the current request.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext</class-interface>
      <method name="getFacesContext" return-type="jakarta.faces.context.FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1029</id>
      <description>Returns parameters that "submitting" ClientBehavior implementations should include when posting back data into the Faces lifecycle. If no parameters are specified, this method returns an empty (non-null) collection.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext</class-interface>
      <method name="getParameters" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1030</id>
      <description>Returns an id for use as the ClientBehavior source. ClientBehavior implementations that submit back to the Faces lifecycle are required to identify which component triggered the ClientBehavior-initiated request via the jakarta.faces.source request parameter. In most cases, th source id can be trivially derived from the element to which the behavior's client-side script is attached - ie. the source id is typically the id of this element. However, in components which produce more complex content, the behavior script may not be able to determine the correct id to use for the jakarta.faces.source value. The ClientBehaviorContext#getSourceId method allows the component to pass this information into the ClientBehavior#getScript implementation.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext</class-interface>
      <method name="getSourceId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1031</id>
      <description>Creates a Parameter instance.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext.Parameter</class-interface>
      <method name="ClientBehaviorContext.Parameter" return-type="ClientBehaviorContext.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1032</id>
      <description>Returns the Parameter's name.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext.Parameter</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1033</id>
      <description>Returns the Parameter's value.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorContext.Parameter</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1034</id>
      <description />
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorHint</class-interface>
      <method name="valueOf" return-type="jakarta.faces.component.behavior.ClientBehaviorHint">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1035</id>
      <description />
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorHint</class-interface>
      <method name="values" return-type="jakarta.faces.component.behavior.ClientBehaviorHint[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1037</id>
      <description>Returns a non-null, unmodifiable Map that contains the the ClientBehaviors that have been attached to the component implementing this interface. The keys in this Map are event names defined by #getEventNames.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorHolder</class-interface>
      <method name="getClientBehaviors" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1038</id>
      <description>Returns the default event name for this ClientBehaviorHolder implementation. This must be one of the event names returned by #getEventNames or null if the component does not have a default event.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorHolder</class-interface>
      <method name="getDefaultEventName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1039</id>
      <description>Returns a non-null, unmodifiable Collection containing the names of the logical events supported by the component implementing this interface.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorHolder</class-interface>
      <method name="getEventNames" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1040</id>
      <description />
      <package>jakarta.faces.component.behavior</package>
      <class-interface>FacesBehavior</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1042</id>
      <description>Returns a VisitContext instance that is initialized with the specified ids and hintsfor use with UIComponent#visitTree.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="createVisitContext" return-type="jakarta.faces.component.visit.VisitContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.util.Collection</parameter>
          <parameter>java.util.Set</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1043</id>
      <description>Creates a VisitContext instance for use with UIComponent#visitTree UIComponent.visitTree(). This method can be used to obtain a VisitContext instance when all components should be visited with the default visit hints.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="createVisitContext" return-type="jakarta.faces.component.visit.VisitContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1044</id>
      <description>Returns the FacesContext for the current request.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="getFacesContext" return-type="jakarta.faces.context.FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1046</id>
      <description>Returns the ids of the components to visit. In the case of a full tree visit, this method returns the ALL_IDS collection. Otherwise, if a partial visit is beign performed, returns a modifiable collection containing the client ids of the components that should be visited.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="getIdsToVisit" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1047</id>
      <description>Given a jakarta.faces.component.NamingContainer component, returns the client ids of any components underneath the NamingContainer that should be visited. This method is called by NamingContainer visitTree() implementations to determine whether the NamingContainer contains components to be visited. In the case where no such components exist, the NamingContainer can short-circuit the tree visit and avoid descending into child subtrees. In addition, iterating components such as UIData may be able to use the returned ids to determine which iterated states (ie. rows) need to be visited. This allows the visit traversal to be contstrained such only those rows that contain visit targets need to be traversed.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="getSubtreeIdsToVisit" return-type="java.util.Collection">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1049</id>
      <description>Called by UIComponent#visitTree UIComponent.visitTree() to visit a single component.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="invokeVisitCallback" return-type="jakarta.faces.component.visit.VisitResult">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.component.visit.VisitCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1050</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="VisitContext" return-type="VisitContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1051</id>
      <description>Return a new VisitContext instance.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextFactory</class-interface>
      <method name="getVisitContext" return-type="jakarta.faces.component.visit.VisitContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.util.Collection</parameter>
          <parameter>java.util.Set</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1052</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.component.visit.VisitContextFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1053</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextFactory</class-interface>
      <method name="VisitContextFactory" return-type="VisitContextFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1054</id>
      <description>Returns the FacesContext for the current request.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextWrapper</class-interface>
      <method name="getFacesContext" return-type="jakarta.faces.context.FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1056</id>
      <description>Returns the ids of the components to visit. In the case of a full tree visit, this method returns the ALL_IDS collection. Otherwise, if a partial visit is beign performed, returns a modifiable collection containing the client ids of the components that should be visited.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextWrapper</class-interface>
      <method name="getIdsToVisit" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1057</id>
      <description>Given a jakarta.faces.component.NamingContainer component, returns the client ids of any components underneath the NamingContainer that should be visited. This method is called by NamingContainer visitTree() implementations to determine whether the NamingContainer contains components to be visited. In the case where no such components exist, the NamingContainer can short-circuit the tree visit and avoid descending into child subtrees. In addition, iterating components such as UIData may be able to use the returned ids to determine which iterated states (ie. rows) need to be visited. This allows the visit traversal to be contstrained such only those rows that contain visit targets need to be traversed.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextWrapper</class-interface>
      <method name="getSubtreeIdsToVisit" return-type="java.util.Collection">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1059</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.component.visit.VisitContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1060</id>
      <description>Called by UIComponent#visitTree UIComponent.visitTree() to visit a single component.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextWrapper</class-interface>
      <method name="invokeVisitCallback" return-type="jakarta.faces.component.visit.VisitResult">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.component.visit.VisitCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1061</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextWrapper</class-interface>
      <method name="VisitContextWrapper" return-type="VisitContextWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1062</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitHint</class-interface>
      <method name="valueOf" return-type="jakarta.faces.component.visit.VisitHint">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1063</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitHint</class-interface>
      <method name="values" return-type="jakarta.faces.component.visit.VisitHint[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1064</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitResult</class-interface>
      <method name="valueOf" return-type="jakarta.faces.component.visit.VisitResult">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1065</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitResult</class-interface>
      <method name="values" return-type="jakarta.faces.component.visit.VisitResult[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1066</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="ExceptionHandler" return-type="ExceptionHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1067</id>
      <description>Return the first ExceptionQueuedEvent handled by this handler.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="getHandledExceptionQueuedEvent" return-type="jakarta.faces.event.ExceptionQueuedEvent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1068</id>
      <description>The default implementation must return an Iterable over all ExceptionQueuedEvents that have been handled by the #handle method.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="getHandledExceptionQueuedEvents" return-type="java.lang.Iterable" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1069</id>
      <description>Unwrap the argument t until the unwrapping encounters an Object whose getClass() is not equal to FacesException.class or jakarta.el.ELException.class. If there is no root cause, null is returned.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="getRootCause" return-type="java.lang.Throwable">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1070</id>
      <description>if argument t is null.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="getRootCause" return-type="java.lang.Throwable">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1071</id>
      <description>Return an Iterable over all ExceptionQueuedEvents that have not yet been handled by the #handle method.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="getUnhandledExceptionQueuedEvents" return-type="java.lang.Iterable" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1072</id>
      <description>Take action to handle the Exception instances residing inside the ExceptionQueuedEvent instances that have been queued by calls to Application().publishEvent(ExceptionQueuedEvent.class, eventContext). The requirements of the default implementation are detailed in section JSF.6.2.1.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="handle" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1073</id>
      <description>if and only if a problem occurs while performing the algorithm to handle the Exception, not as a means of conveying a handled Exception itself.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="handle" return-type="void">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1074</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="isListenerForSource" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1075</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.SystemEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1076</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandler</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.SystemEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1077</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerFactory</class-interface>
      <method name="ExceptionHandlerFactory" return-type="ExceptionHandlerFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1078</id>
      <description>Create and return a A new ExceptionHandler instance. The implementation must return an ExceptionHandler instance suitable for the environment. For example, in some cases it may be desirable for an ExceptionHandler to write error information to the response instead of throwing exceptions as in the case of Ajax applications.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerFactory</class-interface>
      <method name="getExceptionHandler" return-type="jakarta.faces.context.ExceptionHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1079</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.ExceptionHandlerFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1080</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="ExceptionHandlerWrapper" return-type="ExceptionHandlerWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1081</id>
      <description>The default behavior of this method is to call ExceptionHandler#getHandledExceptionQueuedEvent() on the wrapped ExceptionHandler object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="getHandledExceptionQueuedEvent" return-type="jakarta.faces.event.ExceptionQueuedEvent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1082</id>
      <description>The default behavior of this method is to call ExceptionHandler#getHandledExceptionQueuedEvents() on the wrapped ExceptionHandler object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="getHandledExceptionQueuedEvents" return-type="java.lang.Iterable" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1083</id>
      <description>The default behavior of this method is to call jakarta.faces.context.ExceptionHandler#getRootCause(Throwable) on the wrapped ExceptionHandler object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="getRootCause" return-type="java.lang.Throwable">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1084</id>
      <description>The default behavior of this method is to call ExceptionHandler#getUnhandledExceptionQueuedEvents() on the wrapped ExceptionHandler object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="getUnhandledExceptionQueuedEvents" return-type="java.lang.Iterable" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1085</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.ExceptionHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1086</id>
      <description>The default behavior of this method is to call jakarta.faces.context.ExceptionHandler#handle() on the wrapped ExceptionHandler object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="handle" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1087</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="handle" return-type="void">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1088</id>
      <description>The default behavior of this method is to call jakarta.faces.context.ExceptionHandler#isListenerForSource(Object) on the wrapped ExceptionHandler object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="isListenerForSource" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1089</id>
      <description>The default behavior of this method is to call jakarta.faces.context.ExceptionHandler#processEvent(jakarta.faces.event.SystemEvent) on the wrapped ExceptionHandler object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.SystemEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1090</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExceptionHandlerWrapper</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.SystemEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1092</id>
      <description>if the properties Map is not-null and not empty and contains any keys that are not one of the keys listed above.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="addResponseCookie" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1093</id>
      <description>Add the given name and value to the response header. Servlet:This must be performed by calling the javax.servlet.http.HttpServletResponse addHeader method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="addResponseHeader" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1095</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="dispatch" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1096</id>
      <description>thrown if a ServletException occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="dispatch" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1100</id>
      <description>if url is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodeActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1102</id>
      <description>Return the specified name, after prefixing it with a namespace that ensures that it will be unique within the context of a particular page. Servlet: The input value must be returned unchanged.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodeNamespace" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1105</id>
      <description>if url is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodePartialActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1107</id>
      <description>Return the input URL, after performing any rewriting needed to ensure that it will correctly identify an addressable resource in the current application. Servlet: This must be the value returned by the javax.servlet.http.HttpServletResponse method encodeURL(url).</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodeResourceURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1108</id>
      <description>if url is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodeResourceURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1109</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="ExternalContext" return-type="ExternalContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1110</id>
      <description>Return a mutable Map representing the application scope attributes for the current application. The returned Map must implement the entire contract for a modifiable map as described in the JavaDocs for java.util.Map. Modifications made in the Map must cause the corresponding changes in the set of application scope attributes. Particularly the clear(), remove(), put(), putAll(), and get() operations must take the appropriate action on the underlying data structure. For any of the Map methods that cause an element to be removed from the underlying data structure, the following action regarding managed-beans must be taken. If the element to be removed is a managed-bean, and it has one or more public no-argument void return methods annotated with javax.annotation.PreDestroy, each such method must be called before the element is removed from the underlying data structure. Elements that are not managed-beans, but do happen to have methods with that annotation must not have those methods called on removal. Any exception thrown by the PreDestroy annotated methods must by caught and not rethrown. The exception may be logged. It is valid to call this method during application startup or shutdown. If called at startup or shutdown time, this method returns a Map that is backed by the same container context instance (ServletContext or PortletContext) as the one returned by calling getApplicationMap() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This must be the set of attributes available via the javax.servlet.ServletContext methods getAttribute(), getAttributeNames(), removeAttribute(), and setAttribute().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getApplicationMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1111</id>
      <description>Return the name of the authentication scheme used to authenticate the current user, if any; otherwise, return null. For standard authentication schemes, the returned value will match one of the following constants: BASIC_AUTH, CLIENT_CERT_AUTH, DIGEST_AUTH, or FORM_AUTH. Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method getAuthType().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getAuthType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1112</id>
      <description>Return the application environment object instance for the current appication. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this returns the same container context instance (ServletContext or PortletContext) as the one returned when calling getContext() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This must be the current application's javax.servlet.ServletContext instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getContext" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1113</id>
      <description>Return the name of the container context for this application. Return the result of calling getServletContextName() on the ServletContext instance for this application. It is valid to call this method during application startup or shutdown. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getContextName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1114</id>
      <description>Return the threadsafe Flash for this application. The default implementation will throw UnsupportedOperationException. Compliant JSF runtimes must provide an implementation of this method.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getFlash" return-type="jakarta.faces.context.Flash" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1115</id>
      <description>Return the value of the specified application initialization parameter (if any). Servlet: This must be the result of the javax.servlet.ServletContext method getInitParameter(name). It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this method calls through to the actual container context to return the init parameter value.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getInitParameter" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1116</id>
      <description>if name is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getInitParameter" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1117</id>
      <description>Return an immutable Map whose keys are the set of application initialization parameter names configured for this application, and whose values are the corresponding parameter values. The returned Map must implement the entire contract for an unmodifiable map as described in the JavaDocs for java.util.Map. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this method returns a Map that is backed by the same container context instance (ServletContext or PortletContext) as the one returned by calling getInitParameterMap() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This result must be as if it were synthesized by calling the javax.servlet.ServletContext method getInitParameterNames, and putting each configured parameter name/value pair into the result.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getInitParameterMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1118</id>
      <description>Returns the MIME type of the specified file or null if the MIME type is not known. The MIME type is determined by the container. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this method calls through to the getMimeType() method on the same container context instance (ServletContext or PortletContext) as the one used when calling getMimeType() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This must be the value returned by the javax.servlet.ServletContext method getMimeType().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getMimeType" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1119</id>
      <description>Returns a String containing the real path for a given virtual path. Servlet: This must be the value returned by the javax.servlet.ServletContext method getRealPath(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRealPath" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1120</id>
      <description>Return the login name of the user making the current request if any; otherwise, return null. Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method getRemoteUser().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRemoteUser" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1121</id>
      <description>Return the environment-specific object instance for the current request. Servlet: This must be the current request's javax.servlet.http.HttpServletRequest instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequest" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1122</id>
      <description>Return the character encoding currently being used to interpret this request. Servlet: This must return the value returned by the javax.servlet.ServletRequest method getCharacterEncoding(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestCharacterEncoding" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1123</id>
      <description>Return the result of calling getContentLenth() on the ServletRequest instance for this request. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestContentLength" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1124</id>
      <description>Return the MIME Content-Type for this request. If not available, return null. Servlet: This must return the value returned by the javax.servlet.ServletRequest method getContentType(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1125</id>
      <description>Return the portion of the request URI that identifies the web application context for this request. Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method getContextPath().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestContextPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1126</id>
      <description>Return an immutable Map whose keys are the set of cookie names included in the current request, and whose values (of type javax.servlet.http.Cookie) are the first (or only) cookie for each cookie name returned by the underlying request. The returned Map must implement the entire contract for an unmodifiable map as described in the JavaDocs for java.util.Map. Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method getCookies(), unless null was returned, in which case this must be a zero-length array.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestCookieMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1127</id>
      <description>Return an immutable Map whose keys are the set of request header names included in the current request, and whose values (of type String) are the first (or only) value for each header name returned by the underlying request. The returned Map must implement the entire contract for an unmodifiable map as described in the JavaDocs for java.util.Map. In addition, key comparisons must be performed in a case insensitive manner. Servlet: This must be the set of headers available via the javax.servlet.http.HttpServletRequest methods getHeader() and getHeaderNames().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestHeaderMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1128</id>
      <description>Return an immutable Map whose keys are the set of request header names included in the current request, and whose values (of type String[]) are all of the value for each header name returned by the underlying request. The returned Map must implement the entire contract for an unmodifiable map as described in the JavaDocs for java.util.Map. In addition, key comparisons must be performed in a case insensitive manner. Servlet: This must be the set of headers available via the javax.servlet.http.HttpServletRequest methods getHeaders() and getHeaderNames().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestHeaderValuesMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1129</id>
      <description>Return the preferred Locale in which the client will accept content. Servlet: This must be the value returned by the javax.servlet.ServletRequest method getLocale().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestLocale" return-type="java.util.Locale" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1130</id>
      <description>Return an Iterator over the preferred Locales specified in the request, in decreasing order of preference. Servlet: This must be an Iterator over the values returned by the javax.servlet.ServletRequest method getLocales().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestLocales" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1131</id>
      <description>Return a mutable Map representing the request scope attributes for the current application. The returned Map must implement the entire contract for a modifiable map as described in the JavaDocs for java.util.Map. Modifications made in the Map must cause the corresponding changes in the set of request scope attributes. Particularly the clear(), remove(), put(), putAll(), and get() operations must take the appropriate action on the underlying data structure. For any of the Map methods that cause an element to be removed from the underlying data structure, the following action regarding managed-beans must be taken. If the element to be removed is a managed-bean, and it has one or more public no-argument void return methods annotated with javax.annotation.PreDestroy, each such method must be called before the element is removed from the underlying data structure. Elements that are not managed-beans, but do happen to have methods with that annotation must not have those methods called on removal. Any exception thrown by the PreDestroy annotated methods must by caught and not rethrown. The exception may be logged. Servlet: This must be the set of attributes available via the javax.servlet.ServletRequest methods getAttribute(), getAttributeNames(), removeAttribute(), and setAttribute().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1132</id>
      <description>Return an immutable Map whose keys are the set of request parameters names included in the current request, and whose values (of type String) are the first (or only) value for each parameter name returned by the underlying request. The returned Map must implement the entire contract for an unmodifiable map as described in the JavaDocs for java.util.Map. Servlet: This must be the set of parameters available via the javax.servlet.ServletRequest methods getParameter() and getParameterNames().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestParameterMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1133</id>
      <description>Return an Iterator over the names of all request parameters included in the current request. Servlet: This must be an Iterator over the values returned by the javax.servlet.ServletRequest method getParameterNames().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestParameterNames" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1134</id>
      <description>Return an immutable Map whose keys are the set of request parameters names included in the current request, and whose values (of type String[]) are all of the values for each parameter name returned by the underlying request. The returned Map must implement the entire contract for an unmodifiable map as described in the JavaDocs for java.util.Map. Servlet: This must be the set of parameters available via the javax.servlet.ServletRequest methods getParameterValues() and getParameterNames().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestParameterValuesMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1135</id>
      <description>Return the extra path information (if any) included in the request URI; otherwise, return null. Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method getPathInfo().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestPathInfo" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1136</id>
      <description>Returns the name of the scheme used to make this request, for example, http, https, or ftp. Servlet: This must be the value returned by the javax.servlet.ServletRequest method getScheme(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestScheme" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1137</id>
      <description>Returns the host name of the server to which the request was sent. Servlet: This must be the value returned by the javax.servlet.ServletRequest method getServerName(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestServerName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1138</id>
      <description>Returns the port number to which the request was sent. Servlet: This must be the value returned by the javax.servlet.ServletRequest method getServerPort(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestServerPort" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1139</id>
      <description>Return the servlet path information (if any) included in the request URI; otherwise, return null. Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method getServletPath().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getRequestServletPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1140</id>
      <description>Return a URL for the application resource mapped to the specified path, if it exists; otherwise, return null. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this method calls through to the getResource() method on the same container context instance (ServletContext or PortletContext) as the one used when calling getResource() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This must be the value returned by the javax.servlet.ServletContext method getResource(path).</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResource" return-type="java.net.URL">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1141</id>
      <description>if the specified path is not in the correct form</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResource" return-type="java.net.URL">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1142</id>
      <description>if path is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResource" return-type="java.net.URL">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1143</id>
      <description>Return an InputStream for an application resource mapped to the specified path, if it exists; otherwise, return null. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this method calls through to the getResourceAsStream() method on the same container context instance (ServletContext or PortletContext) as the one used when calling getResourceAsStream() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This must be the value returned by the javax.servlet.ServletContext method getResourceAsStream(path).</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResourceAsStream" return-type="java.io.InputStream">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1144</id>
      <description>if path is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResourceAsStream" return-type="java.io.InputStream">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1145</id>
      <description>Return the Set of resource paths for all application resources whose resource path starts with the specified argument. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this method calls through to the getResourcePaths() method on the same container context instance (ServletContext or PortletContext) as the one used when calling getResourcePaths() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This must be the value returned by the javax.servlet.ServletContext method getResourcePaths(path).</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResourcePaths" return-type="java.util.Set">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1146</id>
      <description>if path is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResourcePaths" return-type="java.util.Set">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1147</id>
      <description>Return the environment-specific object instance for the current response. Servlet: This is the current request's javax.servlet.http.HttpServletResponse instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResponse" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1148</id>
      <description>Return the buffer size for the current response. Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse getBufferSize method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResponseBufferSize" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1149</id>
      <description>Returns the name of the character encoding (MIME charset) used for the body sent in this response. Servlet: This must return the value returned by the javax.servlet.ServletResponse method getCharacterEncoding(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResponseCharacterEncoding" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1150</id>
      <description>Return the MIME Content-Type for this response. If not available, return null. Servlet: This must return the value returned by the javax.servlet.ServletResponse method getContentType(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResponseContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1151</id>
      <description>Returns an OutputStream suitable for writing binary data to the user-agent. Servlet: This must return the value returned by the javax.servlet.ServletResponse method getOutputStream(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResponseOutputStream" return-type="java.io.OutputStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1152</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResponseOutputStream" return-type="java.io.OutputStream">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1153</id>
      <description>Returns a Writer suitable for writing character data to the user-agent. Servlet: This must return the value returned by the javax.servlet.ServletResponse#getWriter. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResponseOutputWriter" return-type="java.io.Writer" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1154</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getResponseOutputWriter" return-type="java.io.Writer">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1155</id>
      <description>If the create parameter is true, create (if necessary) and return a session instance associated with the current request. If the create parameter is false return any existing session instance associated with the current request, or return null if there is no such session. Servlet: This must return the result of calling getSession(create) on the underlying javax.servlet.http.HttpServletRequest instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getSession" return-type="java.lang.Object">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1157</id>
      <description>Return the Principal object containing the name of the current authenticated user, if any; otherwise, return null. Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method getUserPrincipal().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getUserPrincipal" return-type="java.security.Principal" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1158</id>
      <description>Invalidates this session then unbinds any objects bound to it. Servlet: This must be the value returned by the javax.servlet.http.HttpSession method invalidate(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="invalidateSession" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1159</id>
      <description>Check if the current response has been committed. Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse isCommitted method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="isResponseCommitted" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1160</id>
      <description>Return true if the currently authenticated user is included in the specified role. Otherwise, return false. Servlet: This must be the value returned by the javax.servlet.http.HttpServletRequest method isUserInRole(role).</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="isUserInRole" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1161</id>
      <description>if role is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="isUserInRole" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1162</id>
      <description>Log the specified message to the application object. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this calls the log() method on the same container context instance (ServletContext or PortletContext) as the one used during a call to log() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This must be performed by calling the javax.servlet.ServletContext method log(String).</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="log" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1163</id>
      <description>if message is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="log" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1164</id>
      <description>Log the specified message and exception to the application object. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this calls the log() method on the same container context instance (ServletContext or PortletContext) as the one used when calling log() on the ExternalContext returned by the FacesContext during an actual request. Servlet: This must be performed by calling the javax.servlet.ServletContext method log(String,Throwable).</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="log" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1165</id>
      <description>if message or exception is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="log" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1166</id>
      <description>Redirect a request to the specified URL, and cause the responseComplete() method to be called on the FacesContext instance for the current request. The implementation must determine if the request is an Ajax request by obtaining a PartialViewContext instance from the FacesContext and calling PartialViewContext#isAjaxRequest(). Servlet: For non Ajax requests, this must be accomplished by calling the javax.servlet.http.HttpServletResponse method sendRedirect(). For Ajax requests, the implementation must: Get a PartialResponseWriter instance from the FacesContext. Call #setResponseContentType with text/xml Call #setResponseCharacterEncoding with UTF-8 Call #addResponseHeader with Cache-Control, no-cache Call PartialResponseWriter#startDocument Call PartialResponseWriter#redirect with the url argument. Call PartialResponseWriter#endDocument</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1167</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1168</id>
      <description>if the specified url is relative</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1169</id>
      <description>if, in a portlet environment, the current response object is a RenderResponse instead of an ActionResponse</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1170</id>
      <description>if, in a servlet environment, the current response has already been committed</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1171</id>
      <description>Flushes the buffered response content to the client. Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse flushBuffer method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="responseFlushBuffer" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1172</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="responseFlushBuffer" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1173</id>
      <description>Resets the current response. Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse reset method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="responseReset" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1174</id>
      <description>Sends an HTTP status code with message. Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse sendError method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="responseSendError" return-type="void">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1175</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="responseSendError" return-type="void">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1176</id>
      <description>Set the environment-specific request to be returned by subsequent calls to #getRequest. This may be used to install a wrapper for the request. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setRequest" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1177</id>
      <description>Overrides the name of the character encoding used in the body of this request. Calling this method after the request has been accessed will have no no effect, unless a Reader or Stream has been obtained from the request, in which case an IllegalStateException is thrown. Servlet: This must call through to the javax.servlet.ServletRequest method setCharacterEncoding(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setRequestCharacterEncoding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1178</id>
      <description>if this is not a valid encoding</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setRequestCharacterEncoding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.UnsupportedEncodingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1179</id>
      <description>Set the environment-specific response to be returned by subsequent calls to #getResponse. This may be used to install a wrapper for the response. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setResponse" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1180</id>
      <description>Set the buffer size for the current response. Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse setBufferSize method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setResponseBufferSize" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1181</id>
      <description>Sets the character encoding (MIME charset) of the response being sent to the client, for example, to UTF-8. Servlet: This must call through to the javax.servlet.ServletResponse method setCharacterEncoding(). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setResponseCharacterEncoding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1182</id>
      <description>Set the content length of the response. Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse setContentLength method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setResponseContentLength" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1183</id>
      <description>Sets the content type of the response being sent to the client, if the response has not been committed yet. Servlet: This must call setContentType() on the underlying javax.servlet.ServletResponse instance. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setResponseContentType" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1184</id>
      <description>Set the response header with the given name and value. Servlet:This must be performed by calling the javax.servlet.http.HttpServletResponse setHeader method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setResponseHeader" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1185</id>
      <description>Sets the HTTP status code for the response. Servlet: This must be performed by calling the javax.servlet.http.HttpServletResponse setStatus method. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setResponseStatus" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1186</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextFactory</class-interface>
      <method name="ExternalContextFactory" return-type="ExternalContextFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1187</id>
      <description>Create (if needed) and return an ExternalContext instance that is initialized for the processing of the specified request and response objects, for this web application.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextFactory</class-interface>
      <method name="getExternalContext" return-type="jakarta.faces.context.ExternalContext">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1188</id>
      <description>if a ExternalContext cannot be constructed for the specified parameters</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextFactory</class-interface>
      <method name="getExternalContext" return-type="jakarta.faces.context.ExternalContext">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1189</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextFactory</class-interface>
      <method name="getExternalContext" return-type="jakarta.faces.context.ExternalContext">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1190</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.ExternalContextFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1191</id>
      <description>The default behavior of this method is to call ExternalContext#addResponseCookie(String, String, Map) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="addResponseCookie" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1192</id>
      <description>The default behavior of this method is to call ExternalContext#addResponseHeader(String,String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="addResponseHeader" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1193</id>
      <description>The default behavior of this method is to call ExternalContext#dispatch(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="dispatch" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1194</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="dispatch" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1195</id>
      <description>The default behavior of this method is to call ExternalContext#encodeActionURL(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="encodeActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1196</id>
      <description>The default behavior of this method is to call jakarta.faces.context.ExternalContext#encodeBookmarkableURL(String, java.util.Map) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="encodeBookmarkableURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1197</id>
      <description>The default behavior of this method is to call ExternalContext#encodeNamespace(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="encodeNamespace" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1200</id>
      <description>The default behavior of this method is to call jakarta.faces.context.ExternalContext#encodeRedirectURL(String, java.util.Map) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="encodeRedirectURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1201</id>
      <description>The default behavior of this method is to call ExternalContext#encodeResourceURL(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="encodeResourceURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1202</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="ExternalContextWrapper" return-type="ExternalContextWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1203</id>
      <description>The default behavior of this method is to call ExternalContext#getApplicationMap on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getApplicationMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1204</id>
      <description>The default behavior of this method is to call ExternalContext#getAuthType on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getAuthType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1205</id>
      <description>The default behavior of this method is to call ExternalContext#getContext on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getContext" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1206</id>
      <description>The default behavior of this method is to call ExternalContext#getContextName on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getContextName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1207</id>
      <description>The default behavior of this method is to call ExternalContext#getFlash() on the wrapped ExternalContext object.&lt;/p?</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getFlash" return-type="jakarta.faces.context.Flash" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1208</id>
      <description>The default behavior of this method is to call ExternalContext#getInitParameter(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getInitParameter" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1209</id>
      <description>The default behavior of this method is to call ExternalContext#getInitParameterMap on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getInitParameterMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1210</id>
      <description>The default behavior of this method is to call ExternalContext#getMimeType(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getMimeType" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1211</id>
      <description>The default behavior of this method is to call ExternalContext#getRealPath(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRealPath" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1212</id>
      <description>The default behavior of this method is to call ExternalContext#getRemoteUser on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRemoteUser" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1213</id>
      <description>The default behavior of this method is to call ExternalContext#getRequest on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequest" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1214</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestCharacterEncoding on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestCharacterEncoding" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1215</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestContentLength on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestContentLength" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1216</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestContentType on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1217</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestContextPath on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestContextPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1218</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestCookieMap on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestCookieMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1219</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestHeaderMap on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestHeaderMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1220</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestHeaderValuesMap on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestHeaderValuesMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1221</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestLocale on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestLocale" return-type="java.util.Locale" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1222</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestLocales on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestLocales" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1223</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestMap on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1224</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestParameterMap on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestParameterMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1225</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestParameterNames on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestParameterNames" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1226</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestParameterValuesMap on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestParameterValuesMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1227</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestPathInfo on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestPathInfo" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1228</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestScheme on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestScheme" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1229</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestServerName on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestServerName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1230</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestServerPort on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestServerPort" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1231</id>
      <description>The default behavior of this method is to call ExternalContext#getRequestServletPath on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getRequestServletPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1232</id>
      <description>The default behavior of this method is to call ExternalContext#getResource(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResource" return-type="java.net.URL">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1233</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResource" return-type="java.net.URL">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1234</id>
      <description>The default behavior of this method is to call ExternalContext#getResourceAsStream(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResourceAsStream" return-type="java.io.InputStream">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1235</id>
      <description>The default behavior of this method is to call ExternalContext#getResourcePaths(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResourcePaths" return-type="java.util.Set">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1236</id>
      <description>The default behavior of this method is to call ExternalContext#getResponse on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResponse" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1237</id>
      <description>The default behavior of this method is to call ExternalContext#getResponseBufferSize() on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResponseBufferSize" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1238</id>
      <description>The default behavior of this method is to call ExternalContext#getResponseCharacterEncoding on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResponseCharacterEncoding" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1239</id>
      <description>The default behavior of this method is to call ExternalContext#getResponseContentType on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResponseContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1240</id>
      <description>The default behavior of this method is to call ExternalContext#getResponseOutputStream on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResponseOutputStream" return-type="java.io.OutputStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1241</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResponseOutputStream" return-type="java.io.OutputStream">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1242</id>
      <description>The default behavior of this method is to call ExternalContext#getResponseOutputWriter on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResponseOutputWriter" return-type="java.io.Writer" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1243</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getResponseOutputWriter" return-type="java.io.Writer">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1244</id>
      <description>The default behavior of this method is to call ExternalContext#getSession(boolean) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getSession" return-type="java.lang.Object">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1246</id>
      <description>The default behavior of this method is to call ExternalContext#getUserPrincipal on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getUserPrincipal" return-type="java.security.Principal" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1247</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.ExternalContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1248</id>
      <description>The default behavior of this method is to call ExternalContext#invalidateSession on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="invalidateSession" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1249</id>
      <description>The default behavior of this method is to call ExternalContext#isResponseCommitted() on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="isResponseCommitted" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1250</id>
      <description>The default behavior of this method is to call ExternalContext#isUserInRole(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="isUserInRole" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1251</id>
      <description>The default behavior of this method is to call ExternalContext#log(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="log" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1252</id>
      <description>The default behavior of this method is to call ExternalContext#log(String, Throwable) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="log" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1253</id>
      <description>The default behavior of this method is to call ExternalContext#redirect(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1254</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1255</id>
      <description>The default behavior of this method is to call jakarta.faces.context.ExternalContext#responseFlushBuffer() on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="responseFlushBuffer" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1256</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="responseFlushBuffer" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1257</id>
      <description>The default behavior of this method is to call ExternalContext#responseReset() on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="responseReset" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1258</id>
      <description>The default behavior of this method is to call ExternalContext#responseSendError(int,String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="responseSendError" return-type="void">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1259</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="responseSendError" return-type="void">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1260</id>
      <description>The default behavior of this method is to call ExternalContext#setRequest(Object) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setRequest" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1261</id>
      <description>The default behavior of this method is to call ExternalContext#setRequestCharacterEncoding(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setRequestCharacterEncoding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1262</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setRequestCharacterEncoding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.UnsupportedEncodingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1263</id>
      <description>The default behavior of this method is to call ExternalContext#setResponse(Object) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setResponse" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1264</id>
      <description>The default behavior of this method is to call ExternalContext#setResponseBufferSize(int) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setResponseBufferSize" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1265</id>
      <description>The default behavior of this method is to call ExternalContext#getResponseCharacterEncoding on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setResponseCharacterEncoding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1266</id>
      <description>The default behavior of this method is to call jakarta.faces.context.ExternalContext#setResponseContentLength(int) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setResponseContentLength" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1267</id>
      <description>The default behavior of this method is to call ExternalContext#setResponseContentType(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setResponseContentType" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1268</id>
      <description>The default behavior of this method is to call ExternalContext#setResponseHeader(String,String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setResponseHeader" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1269</id>
      <description>The default behavior of this method is to call ExternalContext#setResponseStatus(int) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setResponseStatus" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1270</id>
      <description>Append a jakarta.faces.application.FacesMessage to the set of messages associated with the specified client identifier, if clientId is not null. If clientId is null, this jakarta.faces.application.FacesMessage is assumed to not be associated with any specific component instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="addMessage" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1271</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="addMessage" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1272</id>
      <description>if message is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="addMessage" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1273</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="FacesContext" return-type="FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1274</id>
      <description>Return the Application instance associated with this web application. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, returns the correct current jakarta.faces.application.Application instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getApplication" return-type="jakarta.faces.application.Application" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1275</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getApplication" return-type="jakarta.faces.application.Application">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1276</id>
      <description>Return a mutable Map representing the attributes associated wth this FacesContext instance. This Map is useful to store attributes that you want to go out of scope when the Faces lifecycle for the current request ends, which is not always the same as the request ending, especially in the case of Servlet filters that are invoked after the Faces lifecycle for this request completes. Accessing this Map does not cause any events to fire, as is the case with the other maps: for request, session, and application scope. When #release() is invoked, the attributes must be cleared. The Map returned by this method is not associated with the request. If you would like to get or set request attributes, see ExternalContext#getRequestMap. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getAttributes" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1277</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getAttributes" return-type="java.util.Map">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1278</id>
      <description>Return an Iterator over the client identifiers for which at least one jakarta.faces.application.FacesMessage has been queued. If there are no such client identifiers, an empty Iterator is returned. If any messages have been queued that were not associated with any specific client identifier, a null value will be included in the iterated values. The elements in the Iterator must be returned in the order in which they were added with #addMessage.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getClientIdsWithMessages" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1279</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getClientIdsWithMessages" return-type="java.util.Iterator">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1280</id>
      <description>Return the FacesContext instance for the request that is being processed by the current thread. If called during application initialization or shutdown, any method documented as "valid to call this method during application startup or shutdown" must be supported during application startup or shutdown time. The result of calling a method during application startup or shutdown time that does not have this designation is undefined.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getCurrentInstance" return-type="jakarta.faces.context.FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1281</id>
      <description>Return the value last set on this FacesContext instance when #setCurrentPhaseId was called.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getCurrentPhaseId" return-type="jakarta.faces.event.PhaseId" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1282</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getCurrentPhaseId" return-type="jakarta.faces.event.PhaseId">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1283</id>
      <description>Return the ELContext instance for this FacesContext instance. This ELContext instance has the same lifetime and scope as the FacesContext instance with which it is associated, and may be created lazily the first time this method is called for a given FacesContext instance. Upon creation of the ELContext instance, the implementation must take the following action: Call the ELContext#putContext method on the instance, passing in FacesContext.class and the this reference for the FacesContext instance itself. If the Collection returned by jakarta.faces.application.Application#getELContextListeners is non-empty, create an instance of jakarta.el.ELContextEvent and pass it to each jakarta.el.ELContextListener instance in the Collection by calling the jakarta.el.ELContextListener#contextCreated method.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getELContext" return-type="ELContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1284</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getELContext" return-type="ELContext">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1285</id>
      <description>Return the ExceptionHandler for this request.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getExceptionHandler" return-type="jakarta.faces.context.ExceptionHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1286</id>
      <description>Return the ExternalContext instance for this FacesContext instance. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this method returns an ExternalContext instance with the special behaviors indicated in the javadoc for that class. Methods document as being valid to call during application startup or shutdown must be supported.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getExternalContext" return-type="jakarta.faces.context.ExternalContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1287</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getExternalContext" return-type="jakarta.faces.context.ExternalContext">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1289</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMaximumSeverity" return-type="jakarta.faces.application.FacesMessage.FacesMessage.Severity">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1290</id>
      <description>Like #getMessages, but returns a List, enabling use from EL expressions. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMessageList" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1291</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMessageList" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1292</id>
      <description>Like #getMessages(java.lang.String), but returns a List of messages for the component with client id matching argument clientId. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMessageList" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1293</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMessageList" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1294</id>
      <description>Return an Iterator over the jakarta.faces.application.FacesMessages that have been queued, whether or not they are associated with any specific client identifier. If no such messages have been queued, return an empty Iterator. The elements of the Iterator must be returned in the order in which they were added with calls to #addMessage.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMessages" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1295</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMessages" return-type="java.util.Iterator">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1296</id>
      <description>Return an Iterator over the jakarta.faces.application.FacesMessages that have been queued that are associated with the specified client identifier (if clientId is not null), or over the jakarta.faces.application.FacesMessages that have been queued that are not associated with any specific client identifier (if clientId is null). If no such messages have been queued, return an empty Iterator. The elements of the Iterator must be returned in the order in which they were added with calls to #addMessage.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMessages" return-type="java.util.Iterator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1297</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMessages" return-type="java.util.Iterator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1298</id>
      <description>Return the PartialViewContext for this request. The PartialViewContext is used to control the processing of specified components during the execute portion of the request processing lifecycle (known as partial processing) and the rendering of specified components (known as partial rendering). This method must return a new PartialViewContext if one does not already exist.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getPartialViewContext" return-type="jakarta.faces.context.PartialViewContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1299</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getPartialViewContext" return-type="jakarta.faces.context.PartialViewContext">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1300</id>
      <description>Return the RenderKit instance for the render kit identifier specified on our UIViewRoot, if there is one. If there is no current UIViewRoot, if the UIViewRoot does not have a specified renderKitId, or if there is no RenderKit for the specified identifier, return null instead.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getRenderKit" return-type="jakarta.faces.render.RenderKit" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1301</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1302</id>
      <description>Return true if the renderResponse() method has been called for the current request.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getRenderResponse" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1303</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getRenderResponse" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1304</id>
      <description>Return true if the responseComplete() method has been called for the current request.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getResponseComplete" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1305</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getResponseComplete" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1306</id>
      <description>Return the ResponseStream to which components should direct their binary output. Within a given response, components can use either the ResponseStream or the ResponseWriter, but not both.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getResponseStream" return-type="jakarta.faces.context.ResponseStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1307</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getResponseStream" return-type="jakarta.faces.context.ResponseStream">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1308</id>
      <description>Return the ResponseWriter to which components should direct their character-based output. Within a given response, components can use either the ResponseStream or the ResponseWriter, but not both.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getResponseWriter" return-type="jakarta.faces.context.ResponseWriter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1309</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getResponseWriter" return-type="jakarta.faces.context.ResponseWriter">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1310</id>
      <description>Return the root component that is associated with the this request. It is valid to call this method during application startup or shutdown. If called during application startup or shutdown, this method returns a new UIViewRoot with its locale set to Locale.getDefault().</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getViewRoot" return-type="jakarta.faces.component.UIViewRoot" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1311</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getViewRoot" return-type="jakarta.faces.component.UIViewRoot">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1312</id>
      <description>This utility method simply returns the result of jakarta.faces.render.ResponseStateManager#isPostback(FacesContext). The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isPostback" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1313</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isPostback" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1314</id>
      <description>Returns a flag indicating whether or not the runtime should publish events when asked to do so.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isProcessingEvents" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1315</id>
      <description>Return true if the current ProjectStage as returned by the Application instance is equal to stage, otherwise return false</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isProjectStage" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.application.ProjectStage</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1316</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isProjectStage" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.application.ProjectStage</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1317</id>
      <description>if stage is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isProjectStage" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.application.ProjectStage</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1318</id>
      <description>Return true if the validationFailed() method has been called for the current request.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isValidationFailed" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1319</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isValidationFailed" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1320</id>
      <description>Release any resources associated with this FacesContext instance. Faces implementations may choose to pool instances in the associated FacesContextFactory to avoid repeated object creation and garbage collection. After release() is called on a FacesContext instance (until the FacesContext instance has been recycled by the implementation for re-use), calling any other methods will cause an IllegalStateException to be thrown. If a call was made to #getAttributes during the processing for this request, the implementation must call clear() on the Map returned from getAttributes(), and then de-allocate the data-structure behind that Map. The implementation must call #setCurrentInstance passing null to remove the association between this thread and this dead FacesContext instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1321</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="release" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1322</id>
      <description>Signal the JavaServer faces implementation that, as soon as the current phase of the request processing lifecycle has been completed, control should be passed to the Render Response phase, bypassing any phases that have not been executed yet.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="renderResponse" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1323</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="renderResponse" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1324</id>
      <description>Signal the JavaServer Faces implementation that the HTTP response for this request has already been generated (such as an HTTP redirect), and that the request processing lifecycle should be terminated as soon as the current phase is completed.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="responseComplete" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1325</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="responseComplete" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1326</id>
      <description>The implementation must call this method at the earliest possble point in time after entering into a new phase in the request processing lifecycle.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setCurrentPhaseId" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1327</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setCurrentPhaseId" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1328</id>
      <description>Set the ExceptionHandler for this request.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setExceptionHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ExceptionHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1329</id>
      <description>Allows control of wheter or not the runtime will publish events when Application#publishEvent(FacesContext, Class, Object) or Application#publishEvent(FacesContext, Class, Class, Object) is called.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setProcessingEvents" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1330</id>
      <description>Set the ResponseStream to which components should direct their binary output.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setResponseStream" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ResponseStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1331</id>
      <description>if responseStream is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setResponseStream" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ResponseStream</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1332</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setResponseStream" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ResponseStream</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1333</id>
      <description>Set the ResponseWriter to which components should direct their character-based output.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setResponseWriter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ResponseWriter</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1334</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setResponseWriter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ResponseWriter</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1335</id>
      <description>if responseWriter is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setResponseWriter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ResponseWriter</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1337</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setViewRoot" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1338</id>
      <description>if root is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setViewRoot" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1339</id>
      <description>Sets a flag which indicates that a conversion or validation error occurred while processing the inputs. Inputs consist of either page parameters or form bindings. This flag can be read using #isValidationFailed.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="validationFailed" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1340</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="validationFailed" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1341</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextFactory</class-interface>
      <method name="FacesContextFactory" return-type="FacesContextFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1342</id>
      <description>Create (if needed) and return a FacesContext instance that is initialized for the processing of the specified request and response objects, utilizing the specified Lifecycle instance, for this web application. The implementation of this method must ensure that calls to the getCurrentInstance() method of FacesContext, from the same thread that called this method, will return the same FacesContext instance until the release() method is called on that instance. The implementation must call ExternalContextFactory#getExternalContext to produce the ExternalContext for the FacesContext instance. The default implementation must call ExceptionHandlerFactory#getExceptionHandler and make it so the return from that method is what gets returned from a call to FacesContext#getExceptionHandler on the returned FacesContext instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextFactory</class-interface>
      <method name="getFacesContext" return-type="jakarta.faces.context.FacesContext">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1343</id>
      <description>if a FacesContext cannot be constructed for the specified parameters</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextFactory</class-interface>
      <method name="getFacesContext" return-type="jakarta.faces.context.FacesContext">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1344</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextFactory</class-interface>
      <method name="getFacesContext" return-type="jakarta.faces.context.FacesContext">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1345</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.FacesContextFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1346</id>
      <description>The default behavior of this method is to call FacesContext#addMessage(String, FacesMessage) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="addMessage" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1347</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="FacesContextWrapper" return-type="FacesContextWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1348</id>
      <description>The default behavior of this method is to call FacesContext#getApplication() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getApplication" return-type="jakarta.faces.application.Application" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1349</id>
      <description>The default behavior of this method is to call FacesContext#getAttributes() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getAttributes" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1350</id>
      <description>The default behavior of this method is to call jakarta.faces.context.FacesContext#getClientIdsWithMessages() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getClientIdsWithMessages" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1351</id>
      <description>The default behavior of this method is to call FacesContext#getCurrentPhaseId() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getCurrentPhaseId" return-type="jakarta.faces.event.PhaseId" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1352</id>
      <description>The default behavior of this method is to call FacesContext#getELContext() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getELContext" return-type="ELContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1353</id>
      <description>The default behavior of this method is to call FacesContext#getExceptionHandler() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getExceptionHandler" return-type="jakarta.faces.context.ExceptionHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1354</id>
      <description>The default behavior of this method is to call FacesContext#getExternalContext() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getExternalContext" return-type="jakarta.faces.context.ExternalContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1355</id>
      <description>The default behavior of this method is to call FacesContext#getMaximumSeverity() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getMaximumSeverity" return-type="jakarta.faces.application.FacesMessage.FacesMessage.Severity" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1356</id>
      <description>The default behavior of this method is to call FacesContext#getMessageList() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getMessageList" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1357</id>
      <description>The default behavior of this method is to call FacesContext#getMessageList(String) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getMessageList" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1358</id>
      <description>The default behavior of this method is to call FacesContext#getMessages() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getMessages" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1359</id>
      <description>The default behavior of this method is to call FacesContext#getMessages(String) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getMessages" return-type="java.util.Iterator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1360</id>
      <description>The default behavior of this method is to call FacesContext#getPartialViewContext() ()} on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getPartialViewContext" return-type="jakarta.faces.context.PartialViewContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1361</id>
      <description>The default behavior of this method is to call FacesContext#getRenderKit() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getRenderKit" return-type="jakarta.faces.render.RenderKit" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1362</id>
      <description>The default behavior of this method is to call FacesContext#getRenderResponse() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getRenderResponse" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1363</id>
      <description>The default behavior of this method is to call FacesContext#getResponseComplete() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getResponseComplete" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1364</id>
      <description>The default behavior of this method is to call FacesContext#getResponseStream() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getResponseStream" return-type="jakarta.faces.context.ResponseStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1365</id>
      <description>The default behavior of this method is to call FacesContext#getResponseWriter() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getResponseWriter" return-type="jakarta.faces.context.ResponseWriter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1366</id>
      <description>The default behavior of this method is to call FacesContext#getViewRoot() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getViewRoot" return-type="jakarta.faces.component.UIViewRoot" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1367</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1368</id>
      <description>The default behavior of this method is to call FacesContext#isPostback() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="isPostback" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1369</id>
      <description>The default behavior of this method is to call jakarta.faces.context.FacesContext#isProcessingEvents() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="isProcessingEvents" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1370</id>
      <description>The default behavior of this method is to call jakarta.faces.context.FacesContext#isProjectStage(jakarta.faces.application.ProjectStage) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="isProjectStage" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.application.ProjectStage</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1371</id>
      <description>The default behavior of this method is to call jakarta.faces.context.FacesContext#isValidationFailed on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="isValidationFailed" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1372</id>
      <description>The default behavior of this method is to call FacesContext#release() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1373</id>
      <description>The default behavior of this method is to call FacesContext#renderResponse() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="renderResponse" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1374</id>
      <description>The default behavior of this method is to call FacesContext#responseComplete() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="responseComplete" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1375</id>
      <description>The default behavior of this method is to call FacesContext#setCurrentPhaseId(PhaseId) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="setCurrentPhaseId" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1376</id>
      <description>The default behavior of this method is to call FacesContext#setExceptionHandler(ExceptionHandler) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="setExceptionHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ExceptionHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1377</id>
      <description>The default behavior of this method is to call FacesContext#setProcessingEvents(boolean) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="setProcessingEvents" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1378</id>
      <description>The default behavior of this method is to call FacesContext#setResponseStream(ResponseStream) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="setResponseStream" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ResponseStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1379</id>
      <description>The default behavior of this method is to call FacesContext#setResponseWriter(ResponseWriter) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="setResponseWriter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.ResponseWriter</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1380</id>
      <description>The default behavior of this method is to call FacesContext#setViewRoot(UIViewRoot) on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="setViewRoot" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1381</id>
      <description>The default behavior of this method is to call jakarta.faces.context.FacesContext#validationFailed() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="validationFailed" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1382</id>
      <description>Called after the execution of every lifecycle phase, this method allows implementations to take the necessary actions to provide the Flash scope contract as it applies to the request procesing lifecycle.</description>
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="doPostPhaseActions" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1383</id>
      <description>Called before the execution of every lifecycle phase, this method allows implementations to take the necessary actions to provide the Flash scope contract as it applies to the request procesing lifecycle.</description>
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="doPrePhaseActions" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1384</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="Flash" return-type="Flash" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1387</id>
      <description>Causes a value stored with a previous call to #putNow, its EL equivalent, or to the request Map, to be promoted to the flash so that is available on the next traversal through the lifecycle on this session.</description>
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="keep" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1388</id>
      <description>Puts a value in the flash so that it can be accessed on this traversal of the lifecycle, rather than on the next traversal. This is simply an alias for putting a value in the request map. EL Usage Example Value of \#{flash.now.bar}, should be barValue.</description>
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="putNow" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1389</id>
      <description>Setter for keepMessages JavaBeans property. See #isKeepMessages.</description>
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="setKeepMessages" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1390</id>
      <description>Setting this property to true indicates that the next request on this session will be a redirect. Recall that on a redirect, the server sends a special response to the client instructing it to issue a new request to a specific URI. The implementation must insure that reading the value of this property on that request will return true. EL Usage Example</description>
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="setRedirect" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1391</id>
      <description>Write a delete operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="delete" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1392</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="delete" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1393</id>
      <description>Write the end of a partial response.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endDocument" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1394</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endDocument" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1395</id>
      <description>Write the end of an error.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endError" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1396</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endError" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1397</id>
      <description>Write the end of an eval operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endEval" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1398</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endEval" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1399</id>
      <description>Write the end of an extension operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endExtension" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1400</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endExtension" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1401</id>
      <description>Write the end of an insert operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endInsert" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1402</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endInsert" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1403</id>
      <description>Write the end of an update operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endUpdate" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1404</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="endUpdate" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1405</id>
      <description>Return the wrapped ResponseWriter instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.ResponseWriter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1406</id>
      <description>Create a PartialResponseWriter.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="PartialResponseWriter" return-type="PartialResponseWriter">
        <parameters>
          <parameter>jakarta.faces.context.ResponseWriter</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1407</id>
      <description>Write a redirect operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1408</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="redirect" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1409</id>
      <description>Write the start of a partial response.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startDocument" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1410</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startDocument" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1411</id>
      <description>Write the start of an error.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startError" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1412</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startError" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1413</id>
      <description>Write the start of an eval operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startEval" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1414</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startEval" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1415</id>
      <description>Write the start of an extension operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startExtension" return-type="void">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1416</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startExtension" return-type="void">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1417</id>
      <description>Write the start of an insert operation where the contents will be inserted after the specified target node.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startInsertAfter" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1418</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startInsertAfter" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1419</id>
      <description>Write the start of an insert operation where the contents will be inserted before the specified target node.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startInsertBefore" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1420</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startInsertBefore" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1421</id>
      <description>Write the start of an update operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startUpdate" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1422</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="startUpdate" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1423</id>
      <description>Write an attribute update operation.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="updateAttributes" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1424</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialResponseWriter</class-interface>
      <method name="updateAttributes" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1425</id>
      <description>Return a Collection of client identifiers from the current request with the request parameter name #PARTIAL_EXECUTE_PARAM_NAME. If there is no such request parameter, return an empty Collection. These client identifiers are used to identify components that will be processed during the execute phase of the request processing lifecycle. The returned Collection is mutable.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="getExecuteIds" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1426</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="getExecuteIds" return-type="java.util.Collection">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1427</id>
      <description>Return the ResponseWriter to which components should direct their output for partial view rendering. Within a given response, components can use either the ResponseStream or the ResponseWriter, but not both.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="getPartialResponseWriter" return-type="jakarta.faces.context.PartialResponseWriter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1428</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="getPartialResponseWriter" return-type="jakarta.faces.context.PartialResponseWriter">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1429</id>
      <description>Return a Collection of client identifiers from the current request with the request parameter name #PARTIAL_RENDER_PARAM_NAME. If there is no such request parameter, return an empty Collection. These client identifiers are used to identify components that will be processed during the render phase of the request processing lifecycle. The returned Collection is mutable.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="getRenderIds" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1430</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="getRenderIds" return-type="java.util.Collection">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1431</id>
      <description>Return true if the request header Faces-Request is present with the value partial/ajax. Otherwise, return false.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isAjaxRequest" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1432</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isAjaxRequest" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1433</id>
      <description>Return true if #isAjaxRequest returns true and #PARTIAL_EXECUTE_PARAM_NAME is present in the current request with the value #ALL_PARTIAL_PHASE_CLIENT_IDS. Otherwise, return false.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isExecuteAll" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1434</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isExecuteAll" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1435</id>
      <description>Return true #isAjaxRequest returns true or if the request header Faces-Request is present with the value partial/process. Otherwise, return false.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isPartialRequest" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1436</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isPartialRequest" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1437</id>
      <description>Return true if #isAjaxRequest returns true and #PARTIAL_RENDER_PARAM_NAME is present in the current request with the value #ALL_PARTIAL_PHASE_CLIENT_IDS. Otherwise, return false.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isRenderAll" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1438</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isRenderAll" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1439</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="PartialViewContext" return-type="PartialViewContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1440</id>
      <description>Perform lifecycle processing on components during the indicated phaseId. Only those components with identifiers existing in the Collection returned from #getExecuteIds and #getRenderIds will be processed.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="processPartial" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1441</id>
      <description>Release any resources associated with this PartialViewContext instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1442</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="release" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1443</id>
      <description>Dynamically indicate that this is a partial request.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="setPartialRequest" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1444</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="setPartialRequest" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1445</id>
      <description>Indicate the entire view must be rendered if renderAll is true.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="setRenderAll" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1446</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="setRenderAll" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1447</id>
      <description>Create (if needed) and return a PartialViewContext instance that is initialized using the current FacesContext instance.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextFactory</class-interface>
      <method name="getPartialViewContext" return-type="jakarta.faces.context.PartialViewContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1448</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.PartialViewContextFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1449</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextFactory</class-interface>
      <method name="PartialViewContextFactory" return-type="PartialViewContextFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1450</id>
      <description>The default behavior of this method is to call PartialViewContext#getExecuteIds() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="getExecuteIds" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1451</id>
      <description>The default behavior of this method is to call PartialViewContext#getPartialResponseWriter() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="getPartialResponseWriter" return-type="jakarta.faces.context.PartialResponseWriter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1452</id>
      <description>The default behavior of this method is to call PartialViewContext#getRenderIds() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="getRenderIds" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1453</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.PartialViewContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1454</id>
      <description>The default behavior of this method is to call PartialViewContext#isAjaxRequest() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="isAjaxRequest" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1455</id>
      <description>The default behavior of this method is to call PartialViewContext#isExecuteAll() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="isExecuteAll" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1456</id>
      <description>The default behavior of this method is to call PartialViewContext#isPartialRequest() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="isPartialRequest" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1457</id>
      <description>The default behavior of this method is to call PartialViewContext#isRenderAll() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="isRenderAll" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1458</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="PartialViewContextWrapper" return-type="PartialViewContextWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1459</id>
      <description>The default behavior of this method is to call PartialViewContext#processPartial(PhaseId) on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="processPartial" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1460</id>
      <description>The default behavior of this method is to call PartialViewContext#release() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1461</id>
      <description>The default behavior of this method is to call PartialViewContext#setRenderAll(boolean) on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="setRenderAll" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1462</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseStream</class-interface>
      <method name="ResponseStream" return-type="ResponseStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1463</id>
      <description>Create and return a new instance of this ResponseWriter, using the specified Writer as the output destination.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="cloneWithWriter" return-type="jakarta.faces.context.ResponseWriter">
        <parameters>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1464</id>
      <description>Close an XML CDATA block. The default implementation of this method takes no action when invoked.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="endCDATA" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1465</id>
      <description>if input/output error occures</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="endCDATA" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1466</id>
      <description>Write whatever text should end a response. If there is an open element that has been created by a call to startElement(), that element will be closed first.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="endDocument" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1467</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="endDocument" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1469</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="endElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1470</id>
      <description>if name is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="endElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1471</id>
      <description>Flush any ouput buffered by the output method to the underlying Writer or OutputStream. This method will not flush the underlying Writer or OutputStream; it simply clears any values buffered by this ResponseWriter.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="flush" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1472</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="flush" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1473</id>
      <description>Return the character encoding (such as "ISO-8859-1") for this ResponseWriter. Please see the IANA for a list of character encodings.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="getCharacterEncoding" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1474</id>
      <description>Return the content type (such as "text/html") for this ResponseWriter. Note: this must not include the "charset=" suffix.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="getContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1475</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="ResponseWriter" return-type="ResponseWriter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1476</id>
      <description>Open an XML CDATA block. Note that XML does not allow nested CDATA blocks, though this method does not enforce that constraint. The default implementation of this method takes no action when invoked.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="startCDATA" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1477</id>
      <description>if input/output error occures</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="startCDATA" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1478</id>
      <description>Write whatever text should begin a response.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="startDocument" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1479</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="startDocument" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1481</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="startElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1482</id>
      <description>if name is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="startElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1483</id>
      <description>Write an attribute name and corresponding value, after converting that text to a String (if necessary), and after performing any escaping appropriate for the markup language being rendered. This method may only be called after a call to startElement(), and before the opened element has been closed.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1484</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1485</id>
      <description>if this method is called when there is no currently open element</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1486</id>
      <description>if name is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1487</id>
      <description>Write a comment containing the specified text, after converting that text to a String (if necessary), and after performing any escaping appropriate for the markup language being rendered. If there is an open element that has been created by a call to startElement(), that element will be closed first.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeComment" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1488</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeComment" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1489</id>
      <description>if comment is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeComment" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1490</id>
      <description>Write an object, after converting it to a String (if necessary), and after performing any escaping appropriate for the markup language being rendered. If there is an open element that has been created by a call to startElement(), that element will be closed first.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1491</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1492</id>
      <description>if text is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1493</id>
      <description>Write an object, after converting it to a String (if necessary), and after performing any escaping appropriate for the markup language being rendered. This method is equivalent to #writeText(java.lang.Object,java.lang.String) but adds a component property to allow custom ResponseWriter implementations to associate a component with an arbitrary portion of text. The default implementation simply ignores the component argument and calls through to #writeText(java.lang.Object,java.lang.String)</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1494</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1495</id>
      <description>if text is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1496</id>
      <description>Write text from a character array, after any performing any escaping appropriate for the markup language being rendered. If there is an open element that has been created by a call to startElement(), that element will be closed first.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>char[]</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1497</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>char[]</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1498</id>
      <description>if the calculated starting or ending position is outside the bounds of the character array</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>char[]</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1499</id>
      <description>if text is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>char[]</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1501</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeURIAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1502</id>
      <description>if this method is called when there is no currently open element</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeURIAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1503</id>
      <description>if name is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeURIAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1504</id>
      <description>The default behavior of this method is to call ResponseWriter#cloneWithWriter(java.io.Writer) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="cloneWithWriter" return-type="jakarta.faces.context.ResponseWriter">
        <parameters>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1505</id>
      <description>The default behavior of this method is to call ResponseWriter#close() on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="close" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1506</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="close" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1507</id>
      <description>The default behavior of this method is to call ResponseWriter#endCDATA on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="endCDATA" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1508</id>
      <description>on any read/write error</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="endCDATA" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1509</id>
      <description>The default behavior of this method is to call ResponseWriter#endDocument() on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="endDocument" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1510</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="endDocument" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1511</id>
      <description>The default behavior of this method is to call ResponseWriter#endElement(String) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="endElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1512</id>
      <description>on any read/write error</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="endElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1513</id>
      <description>The default behavior of this method is to call ResponseWriter#flush() on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="flush" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1514</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="flush" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1515</id>
      <description>The default behavior of this method is to call ResponseWriter#getCharacterEncoding() on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="getCharacterEncoding" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1516</id>
      <description>The default behavior of this method is to call ResponseWriter#getContentType() on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="getContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1517</id>
      <description>Return the instance that we are wrapping. As of version 2, this method is public.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.ResponseWriter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1518</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="ResponseWriterWrapper" return-type="ResponseWriterWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1519</id>
      <description>The default behavior of this method is to call ResponseWriter#startCDATA on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="startCDATA" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1520</id>
      <description>on any read/write error</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="startCDATA" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1521</id>
      <description>The default behavior of this method is to call ResponseWriter#startDocument() on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="startDocument" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1522</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="startDocument" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1523</id>
      <description>The default behavior of this method is to call ResponseWriter#startElement(String, jakarta.faces.component.UIComponent) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="startElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1524</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="startElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1525</id>
      <description>The default behavior of this method is to call ResponseWriter#write(char[], int, int) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="write" return-type="void">
        <parameters>
          <parameter>char[]</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1526</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="write" return-type="void">
        <parameters>
          <parameter>char[]</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1527</id>
      <description>The default behavior of this method is to call ResponseWriter#writeAttribute(String, Object, String) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1528</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1529</id>
      <description>The default behavior of this method is to call ResponseWriter#writeComment(Object) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeComment" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1530</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeComment" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1531</id>
      <description>The default behavior of this method is to call ResponseWriter#writeText(Object, String) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1532</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1533</id>
      <description>The default behavior of this method is to call ResponseWriter#writeText(Object, UIComponent, String) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1534</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1535</id>
      <description>The default behavior of this method is to call ResponseWriter#writeText(char[], int, int) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>char[]</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1536</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeText" return-type="void">
        <parameters>
          <parameter>char[]</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1537</id>
      <description>The default behavior of this method is to call ResponseWriter#writeURIAttribute(String, Object, String) on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeURIAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1538</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeURIAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1539</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>BigDecimalConverter</class-interface>
      <method name="BigDecimalConverter" return-type="BigDecimalConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1540</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigDecimalConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1541</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigDecimalConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1542</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigDecimalConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1543</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigDecimalConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1544</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigDecimalConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1545</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigDecimalConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1546</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>BigIntegerConverter</class-interface>
      <method name="BigIntegerConverter" return-type="BigIntegerConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1547</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigIntegerConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1548</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigIntegerConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1549</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigIntegerConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1550</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigIntegerConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1551</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigIntegerConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1552</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BigIntegerConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1553</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>BooleanConverter</class-interface>
      <method name="BooleanConverter" return-type="BooleanConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1554</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BooleanConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1555</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BooleanConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1556</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BooleanConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1557</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BooleanConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1558</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BooleanConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1559</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>BooleanConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1560</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>ByteConverter</class-interface>
      <method name="ByteConverter" return-type="ByteConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1561</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ByteConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1562</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ByteConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1563</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ByteConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1564</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ByteConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1565</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ByteConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1566</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ByteConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1567</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>CharacterConverter</class-interface>
      <method name="CharacterConverter" return-type="CharacterConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1568</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>CharacterConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1569</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>CharacterConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1570</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>CharacterConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1571</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>CharacterConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1572</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>CharacterConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1573</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>CharacterConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1574</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>Converter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1575</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>Converter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1576</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>Converter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1577</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>Converter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1578</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>Converter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1579</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>Converter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1580</id>
      <description>Construct a new exception with no detail message or root cause.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ConverterException</class-interface>
      <method name="ConverterException" return-type="ConverterException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1581</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ConverterException</class-interface>
      <method name="ConverterException" return-type="ConverterException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1582</id>
      <description>Construct a new exception with the specified root cause. The detail message will be set to (cause == null ? null : cause.toString()</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ConverterException</class-interface>
      <method name="ConverterException" return-type="ConverterException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1583</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ConverterException</class-interface>
      <method name="ConverterException" return-type="ConverterException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1584</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ConverterException</class-interface>
      <method name="ConverterException" return-type="ConverterException">
        <parameters>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1585</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ConverterException</class-interface>
      <method name="ConverterException" return-type="ConverterException">
        <parameters>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1586</id>
      <description>Returns the FacesMessage associated with this exception; this will only be available if the converter that thew this exception instance placed it there.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ConverterException</class-interface>
      <method name="getFacesMessage" return-type="jakarta.faces.application.FacesMessage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1587</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1588</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="DateTimeConverter" return-type="DateTimeConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1589</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1590</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1591</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1592</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1593</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1594</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1595</id>
      <description>Return the style to be used to format or parse dates. If not set, the default value, default, is returned.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getDateStyle" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1596</id>
      <description>Return the Locale to be used when parsing or formatting dates and times. If not explicitly set, the Locale stored in the jakarta.faces.component.UIViewRoot for the current request is returned.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getLocale" return-type="java.util.Locale" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1597</id>
      <description>Return the format pattern to be used when formatting and parsing dates and times.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getPattern" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1598</id>
      <description>Return the style to be used to format or parse times. If not set, the default value, default, is returned.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getTimeStyle" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1599</id>
      <description>Return the TimeZone used to interpret a time value. If not explicitly set, the default time zone of GMT returned.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getTimeZone" return-type="java.util.TimeZone" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1600</id>
      <description>Return the type of value to be formatted or parsed. If not explicitly set, the default type, date is returned.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="getType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1601</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1602</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1603</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1604</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1605</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1606</id>
      <description>Set the style to be used to format or parse dates. Valid values are default, short, medium, long, and full. An invalid value will cause a ConverterException when getAsObject() or getAsString() is called.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="setDateStyle" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1607</id>
      <description>Set the Locale to be used when parsing or formatting dates and times. If set to null, the Locale stored in the jakarta.faces.component.UIViewRoot for the current request will be utilized.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="setLocale" return-type="void">
        <parameters>
          <parameter>java.util.Locale</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1608</id>
      <description>Set the format pattern to be used when formatting and parsing dates and times. Valid values are those supported by java.text.SimpleDateFormat. An invalid value will cause a ConverterException when getAsObject() or getAsString() is called.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="setPattern" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1609</id>
      <description>Set the style to be used to format or parse times. Valid values are default, short, medium, long, and full. An invalid value will cause a ConverterException when getAsObject() or getAsString() is called.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="setTimeStyle" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1610</id>
      <description>Set the TimeZone used to interpret a time value.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="setTimeZone" return-type="void">
        <parameters>
          <parameter>java.util.TimeZone</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1611</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1612</id>
      <description>Set the type of value to be formatted or parsed. Valid values are both, date, or time. An invalid value will cause a ConverterException when getAsObject() or getAsString() is called.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DateTimeConverter</class-interface>
      <method name="setType" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1613</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>DoubleConverter</class-interface>
      <method name="DoubleConverter" return-type="DoubleConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1614</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DoubleConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1615</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DoubleConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1616</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DoubleConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1617</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DoubleConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1618</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DoubleConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1619</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>DoubleConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1620</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1621</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="EnumConverter" return-type="EnumConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1622</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="EnumConverter" return-type="EnumConverter">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1623</id>
      <description>Convert the value argument to one of the enum constants of the class provided in our constructor. If no target class argument has been provided to the constructor of this instance, throw a ConverterException containing the #ENUM_NO_CLASS_ID message with proper parameters. If the value argument is null or it has a length of zero, return null. Otherwise, perform the equivalent of Enum.valueOf using target class and value and return the Object. If the conversion fails, throw a ConverterException containing the #ENUM_ID message with proper parameters.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1624</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1625</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1626</id>
      <description>Convert the enum constant given by the value argument into a String. If no target class argument has been provided to the constructor of this instance, throw a ConverterException containing the #ENUM_NO_CLASS_ID message with proper parameters. If the value argument is null, return null. If the value is an instance of the provided target class, return its string value by casting it to a java.lang.Enum and returning the result of calling the name() method. Otherwise, throw a ConverterException containing the #ENUM_ID message with proper parameters.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1627</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1628</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1629</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1630</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1631</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1632</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1633</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1634</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>EnumConverter</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1635</id>
      <description>The value of this annotation attribute is taken to be the converter-for-class with which instances of this class of converter can be instantiated by calling jakarta.faces.application.Application#createConverter(java.lang.Class).</description>
      <package>jakarta.faces.convert</package>
      <class-interface>FacesConverter</class-interface>
      <method name="forClass" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1637</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>FloatConverter</class-interface>
      <method name="FloatConverter" return-type="FloatConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1638</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>FloatConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1639</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>FloatConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1640</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>FloatConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1641</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>FloatConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1642</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>FloatConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1643</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>FloatConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1644</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>IntegerConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1645</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>IntegerConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1646</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>IntegerConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1647</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>IntegerConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1648</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>IntegerConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1649</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>IntegerConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1650</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>IntegerConverter</class-interface>
      <method name="IntegerConverter" return-type="IntegerConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1651</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>LongConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1652</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>LongConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1653</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>LongConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1654</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>LongConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1655</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>LongConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1656</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>LongConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1657</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>LongConverter</class-interface>
      <method name="LongConverter" return-type="LongConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1658</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1659</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1660</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1661</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1662</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1663</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1664</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1665</id>
      <description>Return the ISO 4217 currency code used by getAsString() with a type of currency. If not set, the value used will be based on the formatting Locale.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getCurrencyCode" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1666</id>
      <description>Return the currency symbol used by getAsString() with a type of currency. If not set, the value used will be based on the formatting Locale.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getCurrencySymbol" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1667</id>
      <description>Return the Locale to be used when parsing numbers. If this value is null, the Locale stored in the jakarta.faces.component.UIViewRoot for the current request will be utilized.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getLocale" return-type="java.util.Locale" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1668</id>
      <description>Return the maximum number of digits getAsString() should render in the fraction portion of the result.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getMaxFractionDigits" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1669</id>
      <description>Return the maximum number of digits getAsString() should render in the integer portion of the result.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getMaxIntegerDigits" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1670</id>
      <description>Return the minimum number of digits getAsString() should render in the fraction portion of the result.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getMinFractionDigits" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1671</id>
      <description>Return the minimum number of digits getAsString() should render in the integer portion of the result.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getMinIntegerDigits" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1672</id>
      <description>Return the format pattern to be used when formatting and parsing numbers.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getPattern" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1673</id>
      <description>Return the number type to be used when formatting and parsing numbers. If not modified, the default type is number.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="getType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1674</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1675</id>
      <description>Return true if getAsString should include grouping separators if necessary. If not modified, the default value is true.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="isGroupingUsed" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1676</id>
      <description>Return true if only the integer portion of the given value should be returned from getAsObject(). If not modified, the default value is false.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="isIntegerOnly" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1677</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1678</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1679</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="NumberConverter" return-type="NumberConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1680</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1681</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1682</id>
      <description>Set the ISO 4217 currency code used by getAsString() with a type of currency.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setCurrencyCode" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1683</id>
      <description>Set the currency symbol used by getAsString() with a type of currency.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setCurrencySymbol" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1684</id>
      <description>Set the flag indicating whether getAsString() should include grouping separators if necessary.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setGroupingUsed" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1685</id>
      <description>Set to true if only the integer portion of the given value should be returned from getAsObject().</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setIntegerOnly" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1686</id>
      <description>Set the Locale to be used when parsing numbers. If set to null, the Locale stored in the jakarta.faces.component.UIViewRoot for the current request will be utilized.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setLocale" return-type="void">
        <parameters>
          <parameter>java.util.Locale</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1687</id>
      <description>Set the maximum number of digits getAsString() should render in the fraction portion of the result. If not set, the number of digits depends on the value being converted.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setMaxFractionDigits" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1688</id>
      <description>Set the maximum number of digits getAsString() should render in the integer portion of the result. If not set, the number of digits depends on the value being converted.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setMaxIntegerDigits" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1689</id>
      <description>Set the minimum number of digits getAsString() should render in the fraction portion of the result. If not set, the number of digits depends on the value being converted.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setMinFractionDigits" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1690</id>
      <description>Set the minimum number of digits getAsString() should render in the integer portion of the result. If not set, the number of digits depends on the value being converted.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setMinIntegerDigits" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1691</id>
      <description>Set the format pattern to be used when formatting and parsing numbers. Valid values are those supported by java.text.DecimalFormat. An invalid value will cause a ConverterException when getAsObject() or getAsString() is called.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setPattern" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1692</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1693</id>
      <description>Set the number type to be used when formatting and parsing numbers. Valid values are currency, number, or percent. An invalid value will cause a ConverterException when getAsObject() or getAsString() is called.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>NumberConverter</class-interface>
      <method name="setType" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1694</id>
      <description>Convert the specified string value, which is associated with the specified UIComponent, into a model data object that is appropriate for being stored during the Apply Request Values phase of the request processing lifecycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ShortConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1695</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ShortConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1696</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ShortConverter</class-interface>
      <method name="getAsObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1697</id>
      <description>Convert the specified model object value, which is associated with the specified UIComponent, into a String that is suitable for being included in the response generated during the Render Response phase of the request processing lifeycle.</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ShortConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1698</id>
      <description>if conversion cannot be successfully performed</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ShortConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1699</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.convert</package>
      <class-interface>ShortConverter</class-interface>
      <method name="getAsString" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1700</id>
      <description />
      <package>jakarta.faces.convert</package>
      <class-interface>ShortConverter</class-interface>
      <method name="ShortConverter" return-type="ShortConverter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1701</id>
      <description />
      <package>jakarta.faces.el</package>
      <class-interface>CompositeComponentExpressionHolder</class-interface>
      <method name="getExpression" return-type="ValueExpression">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1702</id>
      <description>Construct a new exception with no detail message or root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>EvaluationException</class-interface>
      <method name="EvaluationException" return-type="EvaluationException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1703</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>EvaluationException</class-interface>
      <method name="EvaluationException" return-type="EvaluationException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1704</id>
      <description>Construct a new exception with the specified root cause. The detail message will be set to (cause == null ? null : cause.toString()</description>
      <package>jakarta.faces.el</package>
      <class-interface>EvaluationException</class-interface>
      <method name="EvaluationException" return-type="EvaluationException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1705</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>EvaluationException</class-interface>
      <method name="EvaluationException" return-type="EvaluationException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1706</id>
      <description>Return the (possibly null) expression String, with leading and trailing delimiters, from which this MethodBinding was built. The default implementation returns null.</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="getExpressionString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1707</id>
      <description>Return the Java class representing the return type from the method identified by this method binding expression.</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1708</id>
      <description>if no suitable method can be found</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.el.MethodNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1709</id>
      <description>if context is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1710</id>
      <description>Return the return value (if any) resulting from a call to the method identified by this method binding expression, passing it the specified parameters, relative to the specified FacesContext.</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1711</id>
      <description>if an exception is thrown by the called method (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1712</id>
      <description>if no suitable method can be found</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
        <throw>jakarta.faces.el.MethodNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1713</id>
      <description>if context is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1714</id>
      <description />
      <package>jakarta.faces.el</package>
      <class-interface>MethodBinding</class-interface>
      <method name="MethodBinding" return-type="MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1715</id>
      <description>Construct a new exception with no detail message or root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodNotFoundException</class-interface>
      <method name="MethodNotFoundException" return-type="MethodNotFoundException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1716</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodNotFoundException</class-interface>
      <method name="MethodNotFoundException" return-type="MethodNotFoundException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1717</id>
      <description>Construct a new exception with the specified root cause. The detail message will be set to (cause == null ? null : cause.toString()</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodNotFoundException</class-interface>
      <method name="MethodNotFoundException" return-type="MethodNotFoundException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1718</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>MethodNotFoundException</class-interface>
      <method name="MethodNotFoundException" return-type="MethodNotFoundException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1719</id>
      <description>Construct a new exception with no detail message or root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyNotFoundException</class-interface>
      <method name="PropertyNotFoundException" return-type="PropertyNotFoundException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1720</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyNotFoundException</class-interface>
      <method name="PropertyNotFoundException" return-type="PropertyNotFoundException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1721</id>
      <description>Construct a new exception with the specified root cause. The detail message will be set to (cause == null ? null : cause.toString()</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyNotFoundException</class-interface>
      <method name="PropertyNotFoundException" return-type="PropertyNotFoundException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1722</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyNotFoundException</class-interface>
      <method name="PropertyNotFoundException" return-type="PropertyNotFoundException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1723</id>
      <description>Return the java.lang.Class representing the type of the specified property. An instance of any Object of that type my be set as the value of that property, as long as the property is not read-only. The actual value of the property, if non-null, is guaranteed to be an instance of this type, or an instance of a subclass of this type. This method is also useful for discovering the type of Objects that may be set as the value of the property. For a bean base object, the property is coerced to a String and used as the property name. For all other base object types (e.g., a Map), the property is used without any coercing.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1724</id>
      <description>if an exception is thrown while testing the property (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1725</id>
      <description>if the specified bean base object property does not exist or if base or property is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1726</id>
      <description>Return the java.lang.Class representing the type of the specified index.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1727</id>
      <description>if an exception is thrown while testing the property (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1728</id>
      <description>if the index is out of bounds or if base is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1729</id>
      <description>Return the value of the specified property from the specified base object. For a bean base object, the property is coerced to a String and used as the property name. For all other base object types (e.g., a Map), the property is used without any coercing.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1730</id>
      <description>if an exception is thrown while getting the property value (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1731</id>
      <description>if the specified property for a bean base object does not exist or is not readable</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1732</id>
      <description>Return the value at the specified index of the specified base object.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1733</id>
      <description>if an exception is thrown while getting the property value (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1734</id>
      <description>if the index is out of bounds or if base is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1735</id>
      <description>Checks if the specified property is read-only. For a bean base object, the property is coerced to a String and used as the property name. For all other base object types (e.g., a Map), the property is used without any coercing.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1736</id>
      <description>if an exception is thrown while testing the property (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1737</id>
      <description>if the specified bean base object property does not exist or if base or property is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1738</id>
      <description>Checks if the specified index is read-only.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1739</id>
      <description>if an exception is thrown while testing the property (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1740</id>
      <description>if the index is out of bounds or if base is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1741</id>
      <description />
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="PropertyResolver" return-type="PropertyResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1742</id>
      <description>Set the specified value of the specified property on the specified base object. For a bean base object, the property is coerced to a String and used as the property name. For all other base object types (e.g., a Map), the property is used without any coercing.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1743</id>
      <description>if an exception is thrown while setting the property value (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1744</id>
      <description>if the specified bean base object property does not exist or is not writeable, or if base or name is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1745</id>
      <description>Set the value at the specified index of the specified base object.</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1746</id>
      <description>if an exception is thrown while setting the property value (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1747</id>
      <description>if the index is out of bounds or if base is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>PropertyResolver</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1748</id>
      <description>Construct a new exception with no detail message or root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>ReferenceSyntaxException</class-interface>
      <method name="ReferenceSyntaxException" return-type="ReferenceSyntaxException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1749</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>ReferenceSyntaxException</class-interface>
      <method name="ReferenceSyntaxException" return-type="ReferenceSyntaxException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1750</id>
      <description>Construct a new exception with the specified root cause. The detail message will be set to (cause == null ? null : cause.toString()</description>
      <package>jakarta.faces.el</package>
      <class-interface>ReferenceSyntaxException</class-interface>
      <method name="ReferenceSyntaxException" return-type="ReferenceSyntaxException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1751</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.el</package>
      <class-interface>ReferenceSyntaxException</class-interface>
      <method name="ReferenceSyntaxException" return-type="ReferenceSyntaxException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1752</id>
      <description>Return the (possibly null) expression String, including the delimiters, from which this ValueBinding was built.</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getExpressionString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1753</id>
      <description>Return the type of the property represented by this ValueBinding, relative to the specified FacesContext.</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1754</id>
      <description>if an exception is thrown while getting the description of the property (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1755</id>
      <description>if a specified property name does not exist</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1756</id>
      <description>if context is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getType" return-type="java.lang.Class">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1757</id>
      <description>Return the value of the property represented by this ValueBinding, relative to the specified FacesContext.</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1758</id>
      <description>if an exception is thrown while getting the value (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1759</id>
      <description>if a specified property name does not exist, or is not readable</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1760</id>
      <description>if context is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="getValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1761</id>
      <description>Return true if the specified property of the specified property is known to be immutable; otherwise, return false.</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1762</id>
      <description>if an exception is thrown while getting the description of the property (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1763</id>
      <description>if a specified property name does not exist</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1764</id>
      <description>if context is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="isReadOnly" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1765</id>
      <description>Set the value of the property represented by this ValueBinding, relative to the specified FacesContext.</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1766</id>
      <description>if an exception is thrown while setting the value (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1767</id>
      <description>if a specified property name does not exist, or is not writeable</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.el.PropertyNotFoundException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1768</id>
      <description>if context is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1769</id>
      <description />
      <package>jakarta.faces.el</package>
      <class-interface>ValueBinding</class-interface>
      <method name="ValueBinding" return-type="ValueBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1770</id>
      <description>Resolve the specified variable name, and return the corresponding object, if any; otherwise, return null.</description>
      <package>jakarta.faces.el</package>
      <class-interface>VariableResolver</class-interface>
      <method name="resolveVariable" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1771</id>
      <description>if an exception is thrown while resolving the variable name (the thrown exception must be included as the cause property of this exception)</description>
      <package>jakarta.faces.el</package>
      <class-interface>VariableResolver</class-interface>
      <method name="resolveVariable" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.el.EvaluationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1772</id>
      <description>if context or name is null</description>
      <package>jakarta.faces.el</package>
      <class-interface>VariableResolver</class-interface>
      <method name="resolveVariable" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:1773</id>
      <description />
      <package>jakarta.faces.el</package>
      <class-interface>VariableResolver</class-interface>
      <method name="VariableResolver" return-type="VariableResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1774</id>
      <description>Construct a new exception with no detail message or root cause.</description>
      <package>jakarta.faces.event</package>
      <class-interface>AbortProcessingException</class-interface>
      <method name="AbortProcessingException" return-type="AbortProcessingException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1775</id>
      <description>Construct a new exception with the specified detail message and no root cause.</description>
      <package>jakarta.faces.event</package>
      <class-interface>AbortProcessingException</class-interface>
      <method name="AbortProcessingException" return-type="AbortProcessingException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1776</id>
      <description>Construct a new exception with the specified root cause.</description>
      <package>jakarta.faces.event</package>
      <class-interface>AbortProcessingException</class-interface>
      <method name="AbortProcessingException" return-type="AbortProcessingException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1777</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.event</package>
      <class-interface>AbortProcessingException</class-interface>
      <method name="AbortProcessingException" return-type="AbortProcessingException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1778</id>
      <description>Construct a new event object from the specified source component and action command.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionEvent</class-interface>
      <method name="ActionEvent" return-type="ActionEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1779</id>
      <description>Return true if this FacesListener is an instance of a listener class that this event supports. Typically, this will be accomplished by an "instanceof" check on the listener class.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionEvent</class-interface>
      <method name="isAppropriateListener" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1780</id>
      <description>Broadcast this FacesEvent to the specified FacesListener, by whatever mechanism is appropriate. Typically, this will be accomplished by calling an event processing method, and passing this FacesEvent as a paramter.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1781</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1782</id>
      <description>Invoked when the action described by the specified ActionEvent occurs.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionListener</class-interface>
      <method name="processAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1783</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionListener</class-interface>
      <method name="processAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1784</id>
      <description>Construct a new event object from the specified source component and Ajax behavior.</description>
      <package>jakarta.faces.event</package>
      <class-interface>AjaxBehaviorEvent</class-interface>
      <method name="AjaxBehaviorEvent" return-type="AjaxBehaviorEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.component.behavior.Behavior</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1785</id>
      <description>Return true if this FacesListener is an instance of a the appropriate listener class that this event supports.</description>
      <package>jakarta.faces.event</package>
      <class-interface>AjaxBehaviorEvent</class-interface>
      <method name="isAppropriateListener" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1786</id>
      <description>Broadcast this event instance to the specified FacesListener, by whatever mechanism is appropriate. Typically, this will be accomplished by calling an event processing method, and passing this instance as a parameter.</description>
      <package>jakarta.faces.event</package>
      <class-interface>AjaxBehaviorEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1787</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.event</package>
      <class-interface>AjaxBehaviorEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1788</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>AjaxBehaviorListener</class-interface>
      <method name="processAjaxBehavior" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.AjaxBehaviorEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1789</id>
      <description>if lifecycle processing should cease for this request.</description>
      <package>jakarta.faces.event</package>
      <class-interface>AjaxBehaviorListener</class-interface>
      <method name="processAjaxBehavior" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.AjaxBehaviorEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1790</id>
      <description>Construct a new event object from the specified source component and behavior.</description>
      <package>jakarta.faces.event</package>
      <class-interface>BehaviorEvent</class-interface>
      <method name="BehaviorEvent" return-type="BehaviorEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.component.behavior.Behavior</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1791</id>
      <description>Return the source Behavior that sent this event.</description>
      <package>jakarta.faces.event</package>
      <class-interface>BehaviorEvent</class-interface>
      <method name="getBehavior" return-type="jakarta.faces.component.behavior.Behavior" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1792</id>
      <description>Pass the argument component to the superclass constructor.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ComponentSystemEvent</class-interface>
      <method name="ComponentSystemEvent" return-type="ComponentSystemEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1793</id>
      <description>the source UIComponent that sent this event.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ComponentSystemEvent</class-interface>
      <method name="getComponent" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1794</id>
      <description>When called, the listener can assume that any guarantees given in the javadoc for the specific SystemEvent subclass are true.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ComponentSystemEventListener</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ComponentSystemEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1795</id>
      <description>if lifecycle processing should cease for this request.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ComponentSystemEventListener</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ComponentSystemEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1796</id>
      <description>Instantiate a new ExceptionQueuedEvent that indicates the argument ExceptionQueuedEventContext occurred.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEvent</class-interface>
      <method name="ExceptionQueuedEvent" return-type="ExceptionQueuedEvent">
        <parameters>
          <parameter>jakarta.faces.event.ExceptionQueuedEventContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1797</id>
      <description>Return the ExceptionQueuedEventContext for this event instance.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEvent</class-interface>
      <method name="getContext" return-type="jakarta.faces.event.ExceptionQueuedEventContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1798</id>
      <description>Instantiate a new ExceptionQueuedEventContext that indicates the argument Throwable just occurred.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="ExceptionQueuedEventContext" return-type="ExceptionQueuedEventContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1799</id>
      <description>Instantiate a new ExceptionQueuedEventContext that indicates the argument Throwable just occurred, relevant to the argument component.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="ExceptionQueuedEventContext" return-type="ExceptionQueuedEventContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Throwable</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1800</id>
      <description>Instantiate a new ExceptionQueuedEventContext that indicates the argument Throwable just occurred, relevant to the argument component, during the lifecycle phase phaseId.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="ExceptionQueuedEventContext" return-type="ExceptionQueuedEventContext">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Throwable</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1801</id>
      <description>A Map of attributes relevant to the context of this ExceptionQueuedEvent.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="getAttributes" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1802</id>
      <description>Return the UIComponent which was being processed when the exception was thrown. If none or not available, this will be null.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="getComponent" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1803</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="getContext" return-type="jakarta.faces.context.FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1804</id>
      <description>Return the exception property.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="getException" return-type="java.lang.Throwable" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1805</id>
      <description>Return a List that contains a single entry, the jakarta.faces.context.ExceptionHandler for the current request.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="getListenersForEventClass" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1806</id>
      <description>Return the PhaseId which was being processed when the exception was thrown. If none or not available, this will be null.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="getPhaseId" return-type="jakarta.faces.event.PhaseId" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1807</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="inAfterPhase" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1808</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>ExceptionQueuedEventContext</class-interface>
      <method name="inBeforePhase" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1809</id>
      <description>Construct a new event object from the specified source component.</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="FacesEvent" return-type="FacesEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1810</id>
      <description>Return the source UIComponent that sent this event.</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="getComponent" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1811</id>
      <description>Return the identifier of the request processing phase during which this event should be delivered. Legal values are the singleton instances defined by the PhaseId class, including PhaseId.ANY_PHASE, which is the default value.</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="getPhaseId" return-type="jakarta.faces.event.PhaseId" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1812</id>
      <description>Return true if this FacesListener is an instance of a listener class that this event supports. Typically, this will be accomplished by an "instanceof" check on the listener class.</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="isAppropriateListener" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1813</id>
      <description>Broadcast this FacesEvent to the specified FacesListener, by whatever mechanism is appropriate. Typically, this will be accomplished by calling an event processing method, and passing this FacesEvent as a paramter.</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1814</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1815</id>
      <description>Convenience method to queue this event for broadcast at the end of the current request processing lifecycle phase.</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="queue" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1816</id>
      <description>if the source component for this event is not a descendant of a UIViewRoot</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="queue" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1817</id>
      <description>Set the PhaseId during which this event will be delivered.</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="setPhaseId" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1818</id>
      <description>phaseId is null.</description>
      <package>jakarta.faces.event</package>
      <class-interface>FacesEvent</class-interface>
      <method name="setPhaseId" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseId</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1819</id>
      <description>The kind of object that emits events of the type given by the value of the #systemEventClass attribute. It is valid to have EL Expressions in the value of this attribute, as long as the expression resolves to an instance of the expected type.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ListenerFor</class-interface>
      <method name="sourceClass" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1820</id>
      <description>The kind of system event for which this class will be installed as a listener. The implementation only supports exact matches on the Class and must not honor subclass relationships. It is valid to have EL Expressions in the value of this attribute, as long as the expression resolves to an instance of the expected type.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ListenerFor</class-interface>
      <method name="systemEventClass" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1821</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>ListenersFor</class-interface>
      <method name="value" return-type="jakarta.faces.event.ListenerFor[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1822</id>
      <description>If true, the Object implementing this interface must not participate in state saving or restoring.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1823</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="MethodExpressionActionListener" return-type="MethodExpressionActionListener" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1824</id>
      <description>Construct a ValueChangeListener that contains a MethodExpression. To accomodate method expression targets that take no arguments instead of taking an ActionEvent argument, the implementation of this class must take the argument methodExpressionOneArg, extract its expression string, and create another MethodExpression whose expected param types match those of a zero argument method. The usage requirements for both of these MethodExpression instances are described in #processAction.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="MethodExpressionActionListener" return-type="MethodExpressionActionListener">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1825</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="MethodExpressionActionListener" return-type="MethodExpressionActionListener">
        <parameters>
          <parameter>MethodExpression</parameter>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1826</id>
      <description>Call through to the MethodExpression passed in our constructor. First, try to invoke the MethodExpression passed to the constructor of this instance, passing the argument ActionEvent as the argument. If a MethodNotFoundException is thrown, call to the zero argument MethodExpression derived from the MethodExpression passed to the constructor of this instance. If that fails for any reason, throw an AbortProcessingException, including the cause of the failure.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="processAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1827</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="processAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1828</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="processAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1829</id>
      <description>Both MethodExpression instances described in the constructor must be restored.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1830</id>
      <description>Both MethodExpression instances described in the constructor must be saved.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:1831</id>
      <description>Denotes whether or not the Object implementing this interface must or must not participate in state saving or restoring.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionActionListener</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1832</id>
      <description>If true, the Object implementing this interface must not participate in state saving or restoring.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1833</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="MethodExpressionValueChangeListener" return-type="MethodExpressionValueChangeListener" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1834</id>
      <description>Construct a ValueChangeListener that contains a MethodExpression.To accomodate method expression targets that take no arguments instead of taking a ValueChangeEvent argument, the implementation of this class must take the argument methodExpressionOneArg, extract its expression string, and create another MethodExpression whose expected param types match those of a zero argument method. The usage requirements for both of these MethodExpression instances are described in #processValueChange.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="MethodExpressionValueChangeListener" return-type="MethodExpressionValueChangeListener">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1835</id>
      <description>Construct a ValueChangeListener that contains a MethodExpression.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="MethodExpressionValueChangeListener" return-type="MethodExpressionValueChangeListener">
        <parameters>
          <parameter>MethodExpression</parameter>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1836</id>
      <description>Call through to the MethodExpression passed in our constructor. First, try to invoke the MethodExpression passed to the constructor of this instance, passing the argument ValueChangeEvent as the argument. If a MethodNotFoundException is thrown, call to the zero argument MethodExpression derived from the MethodExpression passed to the constructor of this instance. If that fails for any reason, throw an AbortProcessingException, including the cause of the failure.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="processValueChange" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1837</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="processValueChange" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1839</id>
      <description>Both MethodExpression instances described in the constructor must be restored.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1840</id>
      <description>Both MethodExpression instances described in the constructor must be saved.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1841</id>
      <description>Denotes whether or not the Object implementing this interface must or must not participate in state saving or restoring.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1842</id>
      <description>The value of this annotation attribute is taken to be the short name for the jakarta.faces.event.ComponentSystemEvent. If the value of this attribute is ommitted, the following algorithm must be used by the code that processes this annotation to determine its value. Get the unqualified class name (e.g., UserLoginEvent) Strip off the trailing "Event", if present (e.g., UserLogin) Convert the first character to lower-case (e.g., userLogin) Prepend the package name to the lower-cased name.</description>
      <package>jakarta.faces.event</package>
      <class-interface>NamedEvent</class-interface>
      <method name="shortName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1843</id>
      <description>Return the FacesContext for the request being processed.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseEvent</class-interface>
      <method name="getFacesContext" return-type="jakarta.faces.context.FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1844</id>
      <description>Return the PhaseId representing the current request processing lifecycle phase.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseEvent</class-interface>
      <method name="getPhaseId" return-type="jakarta.faces.event.PhaseId" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1845</id>
      <description>Construct a new event object from the specified parameters. The specified Lifecycle will be the source of this event.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseEvent</class-interface>
      <method name="PhaseEvent" return-type="PhaseEvent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.event.PhaseId</parameter>
          <parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1846</id>
      <description>Compare this PhaseId instance to the specified one. Returns a negative integer, zero, or a positive integer if this object is less than, equal to, or greater than the specified object.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseId</class-interface>
      <method name="compareTo" return-type="int">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1847</id>
      <description>Return the ordinal value of this PhaseId instance.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseId</class-interface>
      <method name="getOrdinal" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1848</id>
      <description>Return a String representation of this PhaseId instance.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseId</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1849</id>
      <description>Handle a notification that the processing for a particular phase has just been completed.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseListener</class-interface>
      <method name="afterPhase" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1850</id>
      <description>Handle a notification that the processing for a particular phase of the request processing lifecycle is about to begin.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseListener</class-interface>
      <method name="beforePhase" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1851</id>
      <description>Return the identifier of the request processing phase during which this listener is interested in processing PhaseEvent events. Legal values are the singleton instances defined by the PhaseId class, including PhaseId.ANY_PHASE to indicate an interest in being notified for all standard phases.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseListener</class-interface>
      <method name="getPhaseId" return-type="jakarta.faces.event.PhaseId" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1852</id>
      <description>Returns true if and only if the argument listener is an instance of SystemEventListener.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostAddToViewEvent</class-interface>
      <method name="isAppropriateListener" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1853</id>
      <description>Instantiate a new PostAddToViewEvent that indicates the argument component was just added to the view.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostAddToViewEvent</class-interface>
      <method name="PostAddToViewEvent" return-type="PostAddToViewEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1855</id>
      <description>The source Application that sent this event.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostConstructApplicationEvent</class-interface>
      <method name="getApplication" return-type="jakarta.faces.application.Application" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1856</id>
      <description>Constructs a new AppliationPostConstructEvent for this application.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostConstructApplicationEvent</class-interface>
      <method name="PostConstructApplicationEvent" return-type="PostConstructApplicationEvent">
        <parameters>
          <parameter>jakarta.faces.application.Application</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1857</id>
      <description>Return the ScopeContext for this event.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostConstructCustomScopeEvent</class-interface>
      <method name="getContext" return-type="jakarta.faces.event.ScopeContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1858</id>
      <description>An instance of this event indicates that the custom scope enclosed within the argument scopeContext was just created.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostConstructCustomScopeEvent</class-interface>
      <method name="PostConstructCustomScopeEvent" return-type="PostConstructCustomScopeEvent">
        <parameters>
          <parameter>jakarta.faces.event.ScopeContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1859</id>
      <description>Instantiate a new PostConstructViewMapEvent that indicates the argument root was just associated with its view map.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostConstructViewMapEvent</class-interface>
      <method name="PostConstructViewMapEvent" return-type="PostConstructViewMapEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1860</id>
      <description>Instantiate a new PostRestoreStateEvent that indicates the argument component just had its state restored.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostRestoreStateEvent</class-interface>
      <method name="PostRestoreStateEvent" return-type="PostRestoreStateEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1861</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>PostRestoreStateEvent</class-interface>
      <method name="setComponent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1862</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>PostValidateEvent</class-interface>
      <method name="PostValidateEvent" return-type="PostValidateEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1863</id>
      <description>The source Application that sent this event.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreDestroyApplicationEvent</class-interface>
      <method name="getApplication" return-type="jakarta.faces.application.Application" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1864</id>
      <description>Constructs a new PreDestroyApplicationEvent for this application.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreDestroyApplicationEvent</class-interface>
      <method name="PreDestroyApplicationEvent" return-type="PreDestroyApplicationEvent">
        <parameters>
          <parameter>jakarta.faces.application.Application</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1865</id>
      <description>Return the ScopeContext for this event.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreDestroyCustomScopeEvent</class-interface>
      <method name="getContext" return-type="jakarta.faces.event.ScopeContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1866</id>
      <description>An instance of this event indicates that the custom scope enclosed within the argument scopeContext is about to end.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreDestroyCustomScopeEvent</class-interface>
      <method name="PreDestroyCustomScopeEvent" return-type="PreDestroyCustomScopeEvent">
        <parameters>
          <parameter>jakarta.faces.event.ScopeContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1867</id>
      <description>Instantiate a new ViewMapDestroydEvent that indicates the argument root just had its associated view map destroyed.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreDestroyViewMapEvent</class-interface>
      <method name="PreDestroyViewMapEvent" return-type="PreDestroyViewMapEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1868</id>
      <description>Returns true if and only if the argument listener is an instance of SystemEventListener.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreRemoveFromViewEvent</class-interface>
      <method name="isAppropriateListener" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1869</id>
      <description>Instantiate a new BeforeRemoveFromView that indicates the argument component is about to be removed from the view.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreRemoveFromViewEvent</class-interface>
      <method name="PreRemoveFromViewEvent" return-type="PreRemoveFromViewEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1870</id>
      <description>Instantiate a new PreRenderComponentEvent that indicates the argument component is about to be rendered.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreRenderComponentEvent</class-interface>
      <method name="PreRenderComponentEvent" return-type="PreRenderComponentEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1871</id>
      <description>Instantiate a new PreRenderViewEvent that indicates the argument root is about to be rendered.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreRenderViewEvent</class-interface>
      <method name="PreRenderViewEvent" return-type="PreRenderViewEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1872</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>PreValidateEvent</class-interface>
      <method name="PreValidateEvent" return-type="PreValidateEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1873</id>
      <description>Return the scope itself, exposed as a Map.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ScopeContext</class-interface>
      <method name="getScope" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1874</id>
      <description>Return the name of this custom scope.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ScopeContext</class-interface>
      <method name="getScopeName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1875</id>
      <description>Construct this structure with the supplied arguments.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ScopeContext</class-interface>
      <method name="ScopeContext" return-type="ScopeContext">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1877</id>
      <description>Broadcast this event instance to the specified FacesListener, by whatever mechanism is appropriate. Typically, this will be accomplished by calling an event processing method, and passing this instance as a paramter.</description>
      <package>jakarta.faces.event</package>
      <class-interface>SystemEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1878</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.event</package>
      <class-interface>SystemEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1879</id>
      <description>Pass the argument source to the superclass constructor.</description>
      <package>jakarta.faces.event</package>
      <class-interface>SystemEvent</class-interface>
      <method name="SystemEvent" return-type="SystemEvent">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1880</id>
      <description>This method must return true if and only if this listener instance is interested in receiving events from the instance referenced by the source parameter.</description>
      <package>jakarta.faces.event</package>
      <class-interface>SystemEventListener</class-interface>
      <method name="isListenerForSource" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1881</id>
      <description>When called, the listener can assume that any guarantees given in the javadoc for the specific SystemEvent subclass are true.</description>
      <package>jakarta.faces.event</package>
      <class-interface>SystemEventListener</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.SystemEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1882</id>
      <description>if lifecycle processing should cease for this request.</description>
      <package>jakarta.faces.event</package>
      <class-interface>SystemEventListener</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.SystemEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1883</id>
      <description>Return a List of SystemEventListener instances that have been installed into the class implementing this interface.</description>
      <package>jakarta.faces.event</package>
      <class-interface>SystemEventListenerHolder</class-interface>
      <method name="getListenersForEventClass" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1884</id>
      <description>Return the current local value of the source UIComponent.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ValueChangeEvent</class-interface>
      <method name="getNewValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1885</id>
      <description>Return the previous local value of the source UIComponent.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ValueChangeEvent</class-interface>
      <method name="getOldValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1886</id>
      <description>Return true if this FacesListener is an instance of a listener class that this event supports. Typically, this will be accomplished by an "instanceof" check on the listener class.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ValueChangeEvent</class-interface>
      <method name="isAppropriateListener" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1887</id>
      <description>Broadcast this FacesEvent to the specified FacesListener, by whatever mechanism is appropriate. Typically, this will be accomplished by calling an event processing method, and passing this FacesEvent as a paramter.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ValueChangeEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1888</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.event</package>
      <class-interface>ValueChangeEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1889</id>
      <description>Construct a new event object from the specified source component, old value, and new value. The default PhaseId for this event is PhaseId#ANY_PHASE.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ValueChangeEvent</class-interface>
      <method name="ValueChangeEvent" return-type="ValueChangeEvent">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1890</id>
      <description>Invoked when the value change described by the specified ValueChangeEvent occurs.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ValueChangeListener</class-interface>
      <method name="processValueChange" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1891</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.event</package>
      <class-interface>ValueChangeListener</class-interface>
      <method name="processValueChange" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1892</id>
      <description>Register a new PhaseListener instance that is interested in being notified before and after the processing for standard phases of the request processing lifecycle.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="addPhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1893</id>
      <description>if listener is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="addPhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1894</id>
      <description>Execute all of the phases of the request processing lifecycle, up to but not including the Render Response phase, as described in the JavaServer Faces Specification, in the specified order. The processing flow can be affected (by the application, by components, or by event listeners) by calls to the renderResponse() or responseComplete() methods of the FacesContext instance associated with the current request.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="execute" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1895</id>
      <description>if thrown during the execution of the request processing lifecycle</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="execute" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1896</id>
      <description>if context is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="execute" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1897</id>
      <description>Return the set of registered PhaseListeners for this Lifecycle instance. If there are no registered listeners, a zero-length array is returned.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="getPhaseListeners" return-type="jakarta.faces.event.PhaseListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1898</id>
      <description />
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="Lifecycle" return-type="Lifecycle" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1899</id>
      <description>Deregister an existing PhaseListener instance that is no longer interested in being notified before and after the processing for standard phases of the request processing lifecycle. If no such listener instance has been registered, no action is taken.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="removePhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1900</id>
      <description>if listener is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="removePhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1901</id>
      <description>Execute the Render Response phase of the request processing lifecycle, unless the responseComplete() method has been called on the FacesContext instance associated with the current request.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="render" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1902</id>
      <description>if an exception is thrown during the execution of the request processing lifecycle</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="render" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1903</id>
      <description>if context is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="render" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1904</id>
      <description>Register a new Lifecycle instance, associated with the specified lifecycleId, to be supported by this LifecycleFactory. This method may be called at any time, and makes the corresponding Lifecycle instance available throughout the remaining lifetime of this web application.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="addLifecycle" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1905</id>
      <description>if a Lifecycle with the specified lifecycleId has already been registered</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="addLifecycle" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1906</id>
      <description>if lifecycleId or lifecycle is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="addLifecycle" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1907</id>
      <description>Create (if needed) and return a Lifecycle instance for the specified lifecycle identifier. The set of available lifecycle identifiers is available via the getLifecycleIds() method. Each call to getLifecycle() for the same lifecycleId, from within the same web application, must return the same Lifecycle instance.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="getLifecycle" return-type="jakarta.faces.lifecycle.Lifecycle">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1908</id>
      <description>if no Lifecycle instance can be returned for the specified identifier</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="getLifecycle" return-type="jakarta.faces.lifecycle.Lifecycle">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1909</id>
      <description>if lifecycleId is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="getLifecycle" return-type="jakarta.faces.lifecycle.Lifecycle">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1910</id>
      <description>Return an Iterator over the set of lifecycle identifiers supported by this factory. This set must include the value specified by LifecycleFactory.DEFAULT_LIFECYCLE.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="getLifecycleIds" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1911</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.lifecycle.LifecycleFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1912</id>
      <description />
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleFactory</class-interface>
      <method name="LifecycleFactory" return-type="LifecycleFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1913</id>
      <description>Construct a new ArrayDataModel with no specified wrapped data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="ArrayDataModel" return-type="ArrayDataModel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1914</id>
      <description>Construct a new ArrayDataModel wrapping the specified array.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="ArrayDataModel" return-type="ArrayDataModel">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1915</id>
      <description>If there is wrappedData available, return the length of the array. If no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="getRowCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1916</id>
      <description>if an error occurs getting the row count</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="getRowCount" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1917</id>
      <description>If row data is available, return the array element at the index specified by rowIndex. If no wrapped data is available, return null.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1918</id>
      <description>if an error occurs getting the row data</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1919</id>
      <description>if now row data is available at the currently specified row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1920</id>
      <description>Return the zero-relative index of the currently selected row. If we are not currently positioned on a row, or no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1921</id>
      <description>if an error occurs getting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="getRowIndex" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1922</id>
      <description>Return the object representing the data wrapped by this DataModel, if any.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="getWrappedData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1923</id>
      <description>Return true if there is wrappedData available, and the current value of rowIndex is greater than or equal to zero, and less than the length of the array. Otherwise, return false.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1924</id>
      <description>if an error occurs getting the row availability</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1925</id>
      <description>Set the zero-relative index of the currently selected row, or -1 to indicate that we are not positioned on a row. It is possible to set the row index at a value for which the underlying data collection does not contain any row data. Therefore, callers may use the isRowAvailable() method to detect whether row data will be available for use by the getRowData() method. If there is no wrappedData available when this method is called, the specified rowIndex is stored (and may be retrieved by a subsequent call to getRowData()), but no event is sent. Otherwise, if the currently selected row index is changed by this call, a DataModelEvent will be sent to the rowSelected() method of all registered DataModelListeners.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1926</id>
      <description>if an error occurs setting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1927</id>
      <description>if rowIndex is less than -1</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1928</id>
      <description>Set the object representing the data collection wrapped by this DataModel. If the specified data is null, detach this DataModel from any previously wrapped data collection instead. If data is non-null, the currently selected row index must be set to zero, and a DataModelEvent must be sent to the rowSelected() method of all registered DataModelListeners indicating that this row is now selected.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1929</id>
      <description>if data is not of the appropriate type for this DataModel implementation</description>
      <package>jakarta.faces.model</package>
      <class-interface>ArrayDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1930</id>
      <description>Add a new DataModelListener to the set interested in notifications from this DataModel.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="addDataModelListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.model.DataModelListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1931</id>
      <description>if listener is null</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="addDataModelListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.model.DataModelListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1932</id>
      <description />
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="DataModel" return-type="DataModel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1933</id>
      <description>Return the set of DataModelListeners interested in notifications from this DataModel. If there are no such listeners, an empty array is returned.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getDataModelListeners" return-type="jakarta.faces.model.DataModelListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1934</id>
      <description>Return the number of rows of data objects represented by this DataModel. If the number of rows is unknown, or no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getRowCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1935</id>
      <description>if an error occurs getting the row count</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getRowCount" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1936</id>
      <description>Return an object representing the data for the currenty selected row index. If no wrappedData is available, return null.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1937</id>
      <description>if an error occurs getting the row data</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1938</id>
      <description>if now row data is available at the currently specified row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1939</id>
      <description>Return the zero-relative index of the currently selected row. If we are not currently positioned on a row, or no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1940</id>
      <description>if an error occurs getting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getRowIndex" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1941</id>
      <description>Return the object representing the data wrapped by this DataModel, if any.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="getWrappedData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1942</id>
      <description>Return a flag indicating whether there is rowData available at the current rowIndex. If no wrappedData is available, return false.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1943</id>
      <description>if an error occurs getting the row availability</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1944</id>
      <description>Return a read-only Iterator over the row data for this model.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="iterator" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1945</id>
      <description>Remove an existing DataModelListener from the set interested in notifications from this DataModel.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="removeDataModelListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.model.DataModelListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1946</id>
      <description>if listener is null</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="removeDataModelListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.model.DataModelListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1947</id>
      <description>Set the zero-relative index of the currently selected row, or -1 to indicate that we are not positioned on a row. It is possible to set the row index at a value for which the underlying data collection does not contain any row data. Therefore, callers may use the isRowAvailable() method to detect whether row data will be available for use by the getRowData() method. If there is no wrappedData available when this method is called, the specified rowIndex is stored (and may be retrieved by a subsequent call to getRowData()), but no event is sent. Otherwise, if the currently selected row index is changed by this call, a DataModelEvent will be sent to the rowSelected() method of all registered DataModelListeners.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1948</id>
      <description>if an error occurs setting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1949</id>
      <description>if rowIndex is less than -1</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1950</id>
      <description>Set the object representing the data collection wrapped by this DataModel. If the specified data is null, detach this DataModel from any previously wrapped data collection instead. If data is non-null, the currently selected row index must be set to zero, and a DataModelEvent must be sent to the rowSelected() method of all registered DataModelListeners indicating that this row is now selected.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1951</id>
      <description>if data is not of the appropriate type for this DataModel implementation</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1952</id>
      <description>Construct an event object that is associated with the specified row index and associated data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModelEvent</class-interface>
      <method name="DataModelEvent" return-type="DataModelEvent">
        <parameters>
          <parameter>jakarta.faces.model.DataModel</parameter>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1953</id>
      <description>Return the DataModel that fired this event.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModelEvent</class-interface>
      <method name="getDataModel" return-type="jakarta.faces.model.DataModel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1954</id>
      <description>Return the object representing the data for the specified row index, or null for no associated row data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModelEvent</class-interface>
      <method name="getRowData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1955</id>
      <description>Return the row index for this event, or -1 for no specific row.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModelEvent</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1956</id>
      <description>Notification that a particular row index, with the associated row data, has been selected for processing.</description>
      <package>jakarta.faces.model</package>
      <class-interface>DataModelListener</class-interface>
      <method name="rowSelected" return-type="void">
        <parameters>
          <parameter>jakarta.faces.model.DataModelEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1957</id>
      <description>If there is wrappedData available, return the length of the list. If no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="getRowCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1958</id>
      <description>if an error occurs getting the row count</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="getRowCount" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1959</id>
      <description>If row data is available, return the array element at the index specified by rowIndex. If no wrapped data is available, return null.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1960</id>
      <description>if an error occurs getting the row data</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1961</id>
      <description>if now row data is available at the currently specified row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1962</id>
      <description>Return the zero-relative index of the currently selected row. If we are not currently positioned on a row, or no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1963</id>
      <description>if an error occurs getting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="getRowIndex" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1964</id>
      <description>Return the object representing the data wrapped by this DataModel, if any.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="getWrappedData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1965</id>
      <description>Return true if there is wrappedData available, and the current value of rowIndex is greater than or equal to zero, and less than the size of the list. Otherwise, return false.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1966</id>
      <description>if an error occurs getting the row availability</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1967</id>
      <description>Construct a new ListDataModel with no specified wrapped data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="ListDataModel" return-type="ListDataModel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1968</id>
      <description>Construct a new ListDataModel wrapping the specified list.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="ListDataModel" return-type="ListDataModel">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1969</id>
      <description>Set the zero-relative index of the currently selected row, or -1 to indicate that we are not positioned on a row. It is possible to set the row index at a value for which the underlying data collection does not contain any row data. Therefore, callers may use the isRowAvailable() method to detect whether row data will be available for use by the getRowData() method. If there is no wrappedData available when this method is called, the specified rowIndex is stored (and may be retrieved by a subsequent call to getRowData()), but no event is sent. Otherwise, if the currently selected row index is changed by this call, a DataModelEvent will be sent to the rowSelected() method of all registered DataModelListeners.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1970</id>
      <description>if an error occurs setting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1971</id>
      <description>if rowIndex is less than -1</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1972</id>
      <description>Set the object representing the data collection wrapped by this DataModel. If the specified data is null, detach this DataModel from any previously wrapped data collection instead. If data is non-null, the currently selected row index must be set to zero, and a DataModelEvent must be sent to the rowSelected() method of all registered DataModelListeners indicating that this row is now selected.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1973</id>
      <description>if data is not of the appropriate type for this DataModel implementation</description>
      <package>jakarta.faces.model</package>
      <class-interface>ListDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1974</id>
      <description>If there is wrappedData available, return the length of the array returned by calling getRows() on the underlying Result. If no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="getRowCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1976</id>
      <description>If row data is available, return the SortedMap array element at the index specified by rowIndex of the array returned by calling getRows() on the underlying Result. If no wrapped data is available, return null. Note that, if a non-null Map is returned by this method, it will contain the values of the columns for the current row, keyed by column name. Column name comparisons must be performed in a case-insensitive manner.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="getRowData" return-type="java.util.SortedMap" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1978</id>
      <description>if now row data is available at the currently specified row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="getRowData" return-type="java.util.SortedMap">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1979</id>
      <description>Return the zero-relative index of the currently selected row. If we are not currently positioned on a row, or no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1980</id>
      <description>if an error occurs getting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="getRowIndex" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1981</id>
      <description>Return the object representing the data wrapped by this DataModel, if any.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="getWrappedData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1982</id>
      <description>Return true if there is wrappedData available, and the current value of rowIndex is greater than or equal to zero, and less than the length of the array returned by calling getRows() on the underlying Result. Otherwise, return false.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1984</id>
      <description>Construct a new ResultDataModel with no specified wrapped data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="ResultDataModel" return-type="ResultDataModel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1985</id>
      <description>Construct a new ResultDataModel wrapping the specified Result.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="ResultDataModel" return-type="ResultDataModel">
        <parameters>
          <parameter>Result</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1986</id>
      <description>Set the zero-relative index of the currently selected row, or -1 to indicate that we are not positioned on a row. It is possible to set the row index at a value for which the underlying data collection does not contain any row data. Therefore, callers may use the isRowAvailable() method to detect whether row data will be available for use by the getRowData() method. If there is no wrappedData available when this method is called, the specified rowIndex is stored (and may be retrieved by a subsequent call to getRowData()), but no event is sent. Otherwise, if the currently selected row index is changed by this call, a DataModelEvent will be sent to the rowSelected() method of all registered DataModelListeners.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1987</id>
      <description>if an error occurs setting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1988</id>
      <description>if rowIndex is less than -1</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1989</id>
      <description>Set the object representing the data collection wrapped by this DataModel. If the specified data is null, detach this DataModel from any previously wrapped data collection instead. If data is non-null, the currently selected row index must be set to zero, and a DataModelEvent must be sent to the rowSelected() method of all registered DataModelListeners indicating that this row is now selected.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1990</id>
      <description>if data is not of the appropriate type for this DataModel implementation</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1991</id>
      <description>Return -1, since ResultSet does not provide a standard way to determine the number of available rows without scrolling through the entire ResultSet, and this can be very expensive if the number of rows is large.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="getRowCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1992</id>
      <description>if an error occurs getting the row count</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="getRowCount" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1993</id>
      <description>If row data is available, return a Map representing the values of the columns for the row specified by rowIndex, keyed by the corresponding column names. If no wrapped data is available, return null. If a non-null Map is returned, its behavior must correspond to the contract for a mutable Map as described in the JavaDocs for AbstractMap, with the following exceptions and specialized behavior: The Map, and any supporting objects it returns, must perform all column name comparisons in a case-insensitive manner. This case-insensitivity must be implemented using a case-insensitive Comparator, such as String.CASE_INSENSITIVE_ORDER. The following methods must throw UnsupportedOperationException: clear(), remove(). The entrySet() method must return a Set that has the following behavior: Throw UnsupportedOperationException for any attempt to add or remove entries from the Set, either directly or indirectly through an Iterator returned by the Set. Updates to the value of an entry in this set must write through to the corresponding column value in the underlying ResultSet. The keySet() method must return a Set that throws UnsupportedOperationException on any attempt to add or remove keys, either directly or through an Iterator returned by the Set. The put() method must throw IllegalArgumentException if a key value for which containsKey() returns false is specified. However, if a key already present in the Map is specified, the specified value must write through to the corresponding column value in the underlying ResultSet. The values() method must return a Collection that throws UnsupportedOperationException on any attempt to add or remove values, either directly or through an Iterator returned by the Collection.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="getRowData" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1994</id>
      <description>if an error occurs getting the row data</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="getRowData" return-type="java.util.Map">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1995</id>
      <description>if now row data is available at the currently specified row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="getRowData" return-type="java.util.Map">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1996</id>
      <description>Return the zero-relative index of the currently selected row. If we are not currently positioned on a row, or no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1997</id>
      <description>if an error occurs getting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="getRowIndex" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1998</id>
      <description>Return the object representing the data wrapped by this DataModel, if any.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="getWrappedData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1999</id>
      <description>Return true if there is wrappedData available, and the result of calling absolute() on the underlying ResultSet, passing the current value of rowIndex plus one (to account for the fact that ResultSet uses one-relative indexing), returns true. Otherwise, return false.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2000</id>
      <description>if an error occurs getting the row availability</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2001</id>
      <description>Construct a new ResultSetDataModel with no specified wrapped data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="ResultSetDataModel" return-type="ResultSetDataModel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2002</id>
      <description>Construct a new ResultSetDataModel wrapping the specified ResultSet.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="ResultSetDataModel" return-type="ResultSetDataModel">
        <parameters>
          <parameter>java.sql.ResultSet</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2003</id>
      <description>Set the zero-relative index of the currently selected row, or -1 to indicate that we are not positioned on a row. It is possible to set the row index at a value for which the underlying data collection does not contain any row data. Therefore, callers may use the isRowAvailable() method to detect whether row data will be available for use by the getRowData() method. If there is no wrappedData available when this method is called, the specified rowIndex is stored (and may be retrieved by a subsequent call to getRowData()), but no event is sent. Otherwise, if the currently selected row index is changed by this call, a DataModelEvent will be sent to the rowSelected() method of all registered DataModelListeners.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2004</id>
      <description>if an error occurs setting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2005</id>
      <description>if rowIndex is less than -1</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2006</id>
      <description>Set the object representing the data collection wrapped by this DataModel. If the specified data is null, detach this DataModel from any previously wrapped data collection instead. If data is non-null, the currently selected row index must be set to zero, and a DataModelEvent must be sent to the rowSelected() method of all registered DataModelListeners indicating that this row is now selected.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2007</id>
      <description>if data is not of the appropriate type for this DataModel implementation</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultSetDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2008</id>
      <description>If there is wrappedData available, return 1. If no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="getRowCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2010</id>
      <description>If wrapped data is available, return the wrapped data instance. Otherwise, return null.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2012</id>
      <description>if now row data is available at the currently specified row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2013</id>
      <description>Return the zero-relative index of the currently selected row. If we are not currently positioned on a row, or no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2014</id>
      <description>if an error occurs getting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="getRowIndex" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2015</id>
      <description>Return the object representing the data wrapped by this DataModel, if any.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="getWrappedData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2016</id>
      <description>Return true if there is wrappedData available, and the current value of rowIndex is zero. Otherwise, return false.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2018</id>
      <description>Construct a new ScalarDataModel with no specified wrapped data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="ScalarDataModel" return-type="ScalarDataModel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2019</id>
      <description>Construct a new ScalarDataModel wrapping the specified scalar object.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="ScalarDataModel" return-type="ScalarDataModel">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2020</id>
      <description>Set the zero-relative index of the currently selected row, or -1 to indicate that we are not positioned on a row. It is possible to set the row index at a value for which the underlying data collection does not contain any row data. Therefore, callers may use the isRowAvailable() method to detect whether row data will be available for use by the getRowData() method. If there is no wrappedData available when this method is called, the specified rowIndex is stored (and may be retrieved by a subsequent call to getRowData()), but no event is sent. Otherwise, if the currently selected row index is changed by this call, a DataModelEvent will be sent to the rowSelected() method of all registered DataModelListeners.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2021</id>
      <description>if an error occurs setting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2022</id>
      <description>if rowIndex is less than -1</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2023</id>
      <description>Set the object representing the data collection wrapped by this DataModel. If the specified data is null, detach this DataModel from any previously wrapped data collection instead. If data is non-null, the currently selected row index must be set to zero, and a DataModelEvent must be sent to the rowSelected() method of all registered DataModelListeners indicating that this row is now selected.</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2024</id>
      <description>if data is not of the appropriate type for this DataModel implementation</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2025</id>
      <description>Return a description of this item, for use in development tools.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="getDescription" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2026</id>
      <description>Return the label of this item, to be rendered visibly for the user.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="getLabel" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2027</id>
      <description>Return the value of this item, to be delivered to the model if this item is selected by the user.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2028</id>
      <description>Return the disabled flag for this item, which should modify the rendered output to make this item unavailable for selection by the user if set to true.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="isDisabled" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2029</id>
      <description>If and only if this returns true, the code that renders this select item must escape the label using escaping syntax appropriate to the content type being rendered.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="isEscape" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2030</id>
      <description>Return the value of the noSelectionOption property. If the value of this property is true, the system interprets the option represented by this SelectItem instance as representing a "no selection" option. See UISelectOne#validateValue and UISelectMany#validateValue for usage.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="isNoSelectionOption" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2031</id>
      <description>Construct a SelectItem with no initialized property values.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="SelectItem" return-type="SelectItem" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2032</id>
      <description>Construct a SelectItem with the specified value. The label property will be set to the value (converted to a String, if necessary), the description property will be set to null, the disabled property will be set to false, and the escape property will be set to ( true.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="SelectItem" return-type="SelectItem">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2033</id>
      <description>Construct a SelectItem with the specified value and label. The description property will be set to null, the disabled property will be set to false, and the escape property will be set to true.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="SelectItem" return-type="SelectItem">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2034</id>
      <description>Construct a SelectItem instance with the specified value, label and description. This disabled property will be set to false, and the escape property will be set to true.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="SelectItem" return-type="SelectItem">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2035</id>
      <description>Construct a SelectItem instance with the specified property values. The escape property will be set to true.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="SelectItem" return-type="SelectItem">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2036</id>
      <description>Construct a SelectItem instance with the specified property values.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="SelectItem" return-type="SelectItem">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2037</id>
      <description>Construct a SelectItem instance with the specified property values.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="SelectItem" return-type="SelectItem">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
          <parameter>boolean</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2038</id>
      <description>Set the description of this item, for use in development tools.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="setDescription" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2039</id>
      <description>Set the disabled flag for this item, which should modify the rendered output to make this item unavailable for selection by the user if set to true.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="setDisabled" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2040</id>
      <description>Set the value of the escape property. See #isEscape.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="setEscape" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2041</id>
      <description>Set the label of this item, to be rendered visibly for the user.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="setLabel" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2042</id>
      <description>Set the value of the noSelectionOption property.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="setNoSelectionOption" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2043</id>
      <description>Set the value of this item, to be delivered to the model if this item is selected by this user.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItem</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2044</id>
      <description>Return the set of subordinate SelectItems for this group.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItemGroup</class-interface>
      <method name="getSelectItems" return-type="jakarta.faces.model.SelectItem[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2045</id>
      <description>Construct a SelectItemGroup with no initialized property values.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItemGroup</class-interface>
      <method name="SelectItemGroup" return-type="SelectItemGroup" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2046</id>
      <description>Construct a SelectItemGroup with the specified label and no associated selectItems. The value property will be set to a zero-length String, the description property will be set to null, and the disabled property will be set to false.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItemGroup</class-interface>
      <method name="SelectItemGroup" return-type="SelectItemGroup">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2047</id>
      <description>Construct a SelectItemGroup with the specified properties. The value property will be set to a zero-length String.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItemGroup</class-interface>
      <method name="SelectItemGroup" return-type="SelectItemGroup">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
          <parameter>jakarta.faces.model.SelectItem[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2048</id>
      <description>Set the set of subordinate SelectItems for this group.</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItemGroup</class-interface>
      <method name="setSelectItems" return-type="void">
        <parameters>
          <parameter>jakarta.faces.model.SelectItem[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2049</id>
      <description>if selectItems is null</description>
      <package>jakarta.faces.model</package>
      <class-interface>SelectItemGroup</class-interface>
      <method name="setSelectItems" return-type="void">
        <parameters>
          <parameter>jakarta.faces.model.SelectItem[]</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2050</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>ClientBehaviorRenderer</class-interface>
      <method name="ClientBehaviorRenderer" return-type="ClientBehaviorRenderer" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2051</id>
      <description>Decode any new state of this ClientBehavior from the request contained in the specified FacesContext. During decoding, events may be enqueued for later processing (by event listeners who have registered an interest), by calling queueEvent().</description>
      <package>jakarta.faces.render</package>
      <class-interface>ClientBehaviorRenderer</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.component.behavior.ClientBehavior</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2052</id>
      <description>if context, component behavior is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>ClientBehaviorRenderer</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.component.behavior.ClientBehavior</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2053</id>
      <description>Return the script that implements this ClientBehavior's client-side logic. The default implementation returns null. ClientBehaviorRenderer.getScript() implementations are allowed to return null to indicate that no script is required for this particular getScript() call. For example, a ClientBehaviorRenderer implementation may return null if the associated ClientBehavior is disabled.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ClientBehaviorRenderer</class-interface>
      <method name="getScript" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.component.behavior.ClientBehaviorContext</parameter>
          <parameter>jakarta.faces.component.behavior.ClientBehavior</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2054</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>FacesBehaviorRenderer</class-interface>
      <method name="rendererType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2055</id>
      <description>The value of this annotation attribute is taken to be the render-kit-id in which an instance of this class of Renderer must be installed.</description>
      <package>jakarta.faces.render</package>
      <class-interface>FacesBehaviorRenderer</class-interface>
      <method name="renderKitId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2056</id>
      <description>The value of this annotation attribute is taken to be the component-family which, in combination with #rendererType can be used to obtain a reference to an instance of this Renderer by calling jakarta.faces.render.RenderKit#getRenderer(java.lang.String, java.lang.String).</description>
      <package>jakarta.faces.render</package>
      <class-interface>FacesRenderer</class-interface>
      <method name="componentFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2057</id>
      <description>The value of this annotation attribute is taken to be the renderer-type which, in combination with #componentFamily can be used to obtain a reference to an instance of this Renderer by calling jakarta.faces.render.RenderKit#getRenderer(java.lang.String, java.lang.String).</description>
      <package>jakarta.faces.render</package>
      <class-interface>FacesRenderer</class-interface>
      <method name="rendererType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2058</id>
      <description>The value of this annotation attribute is taken to be the render-kit-id in which an instance of this class of Renderer must be installed.</description>
      <package>jakarta.faces.render</package>
      <class-interface>FacesRenderer</class-interface>
      <method name="renderKitId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2059</id>
      <description>Convert the component generated client id to a form suitable for transmission to the client. The default implementation returns the argument clientId unchanged.</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="convertClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2060</id>
      <description>if context or clientId is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="convertClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2061</id>
      <description>Decode any new state of the specified UIComponent from the request contained in the specified FacesContext, and store that state on the UIComponent. During decoding, events may be enqueued for later processing (by event listeners that have registered an interest), by calling queueEvent() on the associated UIComponent.</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2062</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2063</id>
      <description>Render the beginning specified UIComponent to the output stream or writer associated with the response we are creating. If the conversion attempted in a previous call to getConvertedValue() for this component failed, the state information saved during execution of decode() should be used to reproduce the incorrect input.</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2064</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2065</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2066</id>
      <description>Render the child components of this UIComponent, following the rules described for encodeBegin() to acquire the appropriate value to be rendered. This method will only be called if the rendersChildren property of this component is true.</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2067</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2068</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2069</id>
      <description>Render the ending of the current state of the specified UIComponent, following the rules described for encodeBegin() to acquire the appropriate value to be rendered.</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2070</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2071</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2072</id>
      <description>Attempt to convert previously stored state information into an object of the type required for this component (optionally using the registered jakarta.faces.convert.Converter for this component, if there is one). If conversion is successful, the new value should be returned from this method; if not, a ConverterException should be thrown.</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="getConvertedValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2073</id>
      <description>if the submitted value cannot be converted successfully.</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="getConvertedValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2074</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="getConvertedValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2075</id>
      <description>Return a flag indicating whether this Renderer is responsible for rendering the children the component it is asked to render. The default implementation returns false.</description>
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="getRendersChildren" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2076</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>Renderer</class-interface>
      <method name="Renderer" return-type="Renderer" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2077</id>
      <description>Register the specified ClientBehaviorRenderer instance, associated with the specified component type, to the set of ClientBehaviorRenderers registered with this RenderKit, replacing any previously registered ClientBehaviorRenderer for this type.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="addClientBehaviorRenderer" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.render.ClientBehaviorRenderer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2078</id>
      <description>if type or renderer is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="addClientBehaviorRenderer" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.render.ClientBehaviorRenderer</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2079</id>
      <description>Register the specified Renderer instance, associated with the specified component family and rendererType, to the set of Renderers registered with this RenderKit, replacing any previously registered Renderer for this combination of identifiers.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="addRenderer" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.render.Renderer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2080</id>
      <description>if family or rendererType or renderer is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="addRenderer" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.render.Renderer</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2081</id>
      <description>Use the provided OutputStream to create a new ResponseStream instance.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="createResponseStream" return-type="jakarta.faces.context.ResponseStream">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2082</id>
      <description>Use the provided Writer to create a new ResponseWriter instance for the specified (optional) content type, and character encoding. Implementors are advised to consult the getCharacterEncoding() method of class javax.servlet.ServletResponse to get the required value for the characterEncoding for this method. Since the Writer for this response will already have been obtained (due to it ultimately being passed to this method), we know that the character encoding cannot change during the rendering of the response.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="createResponseWriter" return-type="jakarta.faces.context.ResponseWriter">
        <parameters>
          <parameter>java.io.Writer</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2083</id>
      <description>if no matching content type can be found in contentTypeList, no appropriate content type can be found with the implementation dependent best fit algorithm, or no matching character encoding can be found for the argument characterEncoding.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="createResponseWriter" return-type="jakarta.faces.context.ResponseWriter">
        <parameters>
          <parameter>java.io.Writer</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2084</id>
      <description>Return the ClientBehaviorRenderer instance most recently registered for the specified type, if any; otherwise, return null.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="getClientBehaviorRenderer" return-type="jakarta.faces.render.ClientBehaviorRenderer">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2085</id>
      <description>if type is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="getClientBehaviorRenderer" return-type="jakarta.faces.render.ClientBehaviorRenderer">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2086</id>
      <description>Return an Iterator over the ClientBehaviorRenderer types.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="getClientBehaviorRendererTypes" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2087</id>
      <description>Return an Iterator over the component-family entries supported by this RenderKit instance. The default implementation of this method returns an empty Iterator</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="getComponentFamilies" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2088</id>
      <description>Return the Renderer instance most recently registered for the specified component family and rendererType, if any; otherwise, return null.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="getRenderer" return-type="jakarta.faces.render.Renderer">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2089</id>
      <description>if family or rendererType is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="getRenderer" return-type="jakarta.faces.render.Renderer">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2090</id>
      <description>Return an Iterator over the renderer-type entries for the given component-family. If the specified componentFamily is not known to this RenderKit implementation, return an empty Iterator The default implementation of this method returns an empty Iterator</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="getRendererTypes" return-type="java.util.Iterator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2091</id>
      <description>Return an instance of ResponseStateManager to handle rendering technology specific state management decisions.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="getResponseStateManager" return-type="jakarta.faces.render.ResponseStateManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2092</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>RenderKit</class-interface>
      <method name="RenderKit" return-type="RenderKit" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2093</id>
      <description>Register the specified RenderKit instance, associated with the specified renderKitId, to be supported by this RenderKitFactory, replacing any previously registered RenderKit for this identifier.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitFactory</class-interface>
      <method name="addRenderKit" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.render.RenderKit</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2094</id>
      <description>if renderKitId or renderKit is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitFactory</class-interface>
      <method name="addRenderKit" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.render.RenderKit</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2095</id>
      <description>Return a RenderKit instance for the specified render kit identifier, possibly customized based on dynamic characteristics of the specified FacesContext, if non-null. If there is no registered RenderKit for the specified identifier, return null. The set of available render kit identifiers is available via the getRenderKitIds() method.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitFactory</class-interface>
      <method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2096</id>
      <description>if no RenderKit instance can be returned for the specified identifier</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitFactory</class-interface>
      <method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2097</id>
      <description>if renderKitId is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitFactory</class-interface>
      <method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2098</id>
      <description>Return an Iterator over the set of render kit identifiers registered with this factory. This set must include the value specified by RenderKitFactory.HTML_BASIC_RENDER_KIT.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitFactory</class-interface>
      <method name="getRenderKitIds" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2099</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.render.RenderKitFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2100</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitFactory</class-interface>
      <method name="RenderKitFactory" return-type="RenderKitFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2101</id>
      <description>The default behavior of this method is to call RenderKit#addClientBehaviorRenderer(String, ClientBehaviorRenderer) on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="addClientBehaviorRenderer" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.render.ClientBehaviorRenderer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2102</id>
      <description>The default behavior of this method is to call RenderKit#addRenderer(String, String, Renderer) on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="addRenderer" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.render.Renderer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2103</id>
      <description>The default behavior of this method is to call RenderKit#createResponseStream(java.io.OutputStream) on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="createResponseStream" return-type="jakarta.faces.context.ResponseStream">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2104</id>
      <description>The default behavior of this method is to call RenderKit#createResponseWriter(java.io.Writer, String, String) on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="createResponseWriter" return-type="jakarta.faces.context.ResponseWriter">
        <parameters>
          <parameter>java.io.Writer</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2105</id>
      <description>The default behavior of this method is to call RenderKit#getClientBehaviorRenderer(String) on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="getClientBehaviorRenderer" return-type="jakarta.faces.render.ClientBehaviorRenderer">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2106</id>
      <description>The default behavior of this method is to call jakarta.faces.render.RenderKit#getClientBehaviorRendererTypes() on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="getClientBehaviorRendererTypes" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2107</id>
      <description>The default behavior of this method is to call jakarta.faces.render.RenderKit#getComponentFamilies() on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="getComponentFamilies" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2108</id>
      <description>The default behavior of this method is to call RenderKit#getRenderer(String, String) on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="getRenderer" return-type="jakarta.faces.render.Renderer">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2109</id>
      <description>The default behavior of this method is to call RenderKit#getRendererTypes(String) on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="getRendererTypes" return-type="java.util.Iterator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2110</id>
      <description>The default behavior of this method is to call jakarta.faces.render.RenderKit#getResponseStateManager() on the wrapped RenderKit object.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="getResponseStateManager" return-type="jakarta.faces.render.ResponseStateManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2111</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.render.RenderKit" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2112</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>RenderKitWrapper</class-interface>
      <method name="RenderKitWrapper" return-type="RenderKitWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2113</id>
      <description>The implementation must inspect the current request and return the component state Object passed to it on a previous invocation of writeState().</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="getComponentStateToRestore" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2115</id>
      <description>The implementation must inspect the current request and return the tree structure Object passed to it on a previous invocation of writeState().</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="getTreeStructureToRestore" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2116</id>
      <description>Return the specified state as a String without any markup related to the rendering technology supported by this ResponseStateManager.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="getViewState" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2118</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="ResponseStateManager" return-type="ResponseStateManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2121</id>
      <description>Take the argument state and write it into the output using the current ResponseWriter, which must be correctly positioned already. If the jakarta.faces.application.StateManager.SerializedView is to be written out to hidden fields, the implementation must take care to make all necessary character replacements to make the Strings suitable for inclusion as an HTTP request paramater. If the state saving method for this application is jakarta.faces.application.StateManager#STATE_SAVING_METHOD_CLIENT, the implementation may encrypt the state to be saved to the client. We recommend that the state be unreadable by the client, and also be tamper evident. The reference implementation follows these recommendations.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.StateManager.StateManager.SerializedView</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2122</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.StateManager.StateManager.SerializedView</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2123</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="BeanValidator" return-type="BeanValidator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2124</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2125</id>
      <description>Return the validation groups passed to the Validation API when checking constraints. If the validationGroupsArray attribute is omitted or empty, the validation groups will be inherited from the branch defaults, or if there are no branch defaults, the jakarta.validation.groups.Default group will be used.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="getValidationGroups" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2126</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2127</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2128</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2129</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2130</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2131</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2132</id>
      <description>A comma-separated list of validation groups which are used to filter which validations get checked by this validator. If the validationGroupsArray attribute is omitted or is empty, the validation groups will be inherited from the branch defaults or, if there are no branch defaults, the jakarta.validation.groups.Default group will be used.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="setValidationGroups" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2134</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.validator.ValidatorException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2135</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2136</id>
      <description>Construct a Validator with no preconfigured limits.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="DoubleRangeValidator" return-type="DoubleRangeValidator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2137</id>
      <description>Construct a Validator with the specified preconfigured limit.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="DoubleRangeValidator" return-type="DoubleRangeValidator">
        <parameters>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2138</id>
      <description>Construct a Validator with the specified preconfigured limits.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="DoubleRangeValidator" return-type="DoubleRangeValidator">
        <parameters>
          <parameter>double</parameter>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2139</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="equals" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2140</id>
      <description>Return the maximum value to be enforced by this Validator or Double.MAX_VALUE if it has not been set.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="getMaximum" return-type="double" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2141</id>
      <description>Return the minimum value to be enforced by this Validator, or Double.MIN_VALUE if it has not been set.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="getMinimum" return-type="double" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2142</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="hashCode" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2143</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2144</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2145</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2146</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2147</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2148</id>
      <description>Set the maximum value to be enforced by this Validator.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="setMaximum" return-type="void">
        <parameters>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2149</id>
      <description>Set the minimum value to be enforced by this Validator.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="setMinimum" return-type="void">
        <parameters>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2150</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2151</id>
      <description>Perform the correctness checks implemented by this Validator against the specified UIComponent. If any violations are found, a ValidatorException will be thrown containing the jakarta.faces.application.FacesMessage describing the failure. For a validator to be fully compliant with Version 2 and later of the specification, it must not fail validation on null or empty values unless it is specifically intended to address null or empty values. An application-wide is provided to allow validators designed for JSF 1.2 to work with JSF 2 and later. The jakarta.faces.VALIDATE_EMPTY_FIELDS must be set to false to enable this backwards compatibility behavior.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2152</id>
      <description>if validation fails</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.validator.ValidatorException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2153</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.validator</package>
      <class-interface>DoubleRangeValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2154</id>
      <description>If true, the validator id for this annotation is added to the list of default validators by a call to jakarta.faces.application.Application#addDefaultValidatorId.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>FacesValidator</class-interface>
      <method name="isDefault" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2156</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2157</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="equals" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2158</id>
      <description>Return the maximum length to be enforced by this Validator, or 0 if the maximum has not been set.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="getMaximum" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2159</id>
      <description>Return the minimum length to be enforced by this Validator, or 0 if the minimum has not been set.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="getMinimum" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2160</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="hashCode" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2161</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2162</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2163</id>
      <description>Construct a Validator with no preconfigured limits.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="LengthValidator" return-type="LengthValidator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2164</id>
      <description>Construct a Validator with the specified preconfigured limit.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="LengthValidator" return-type="LengthValidator">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2165</id>
      <description>Construct a Validator with the specified preconfigured limits.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="LengthValidator" return-type="LengthValidator">
        <parameters>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2166</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2167</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2168</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2169</id>
      <description>Set the maximum length to be enforced by this Validator.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="setMaximum" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2170</id>
      <description>Set the minimum length to be enforced by this Validator.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="setMinimum" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2171</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2172</id>
      <description>Perform the correctness checks implemented by this Validator against the specified UIComponent. If any violations are found, a ValidatorException will be thrown containing the jakarta.faces.application.FacesMessage describing the failure. For a validator to be fully compliant with Version 2 and later of the specification, it must not fail validation on null or empty values unless it is specifically intended to address null or empty values. An application-wide is provided to allow validators designed for JSF 1.2 to work with JSF 2 and later. The jakarta.faces.VALIDATE_EMPTY_FIELDS must be set to false to enable this backwards compatibility behavior.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2173</id>
      <description>if validation fails</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.validator.ValidatorException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2174</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LengthValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2175</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2176</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="equals" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2177</id>
      <description>Return the maximum value to be enforced by this Validator.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="getMaximum" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2178</id>
      <description>Return the minimum value to be enforced by this Validator.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="getMinimum" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2179</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="hashCode" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2180</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2181</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2182</id>
      <description>Construct a Validator with no preconfigured limits.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="LongRangeValidator" return-type="LongRangeValidator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2183</id>
      <description>Construct a Validator with the specified preconfigured limit.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="LongRangeValidator" return-type="LongRangeValidator">
        <parameters>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2184</id>
      <description>Construct a Validator with the specified preconfigured limits.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="LongRangeValidator" return-type="LongRangeValidator">
        <parameters>
          <parameter>long</parameter>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2185</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2186</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2187</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2188</id>
      <description>Set the maximum value to be enforced by this Validator.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="setMaximum" return-type="void">
        <parameters>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2189</id>
      <description>Set the minimum value to be enforced by this Validator.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="setMinimum" return-type="void">
        <parameters>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2190</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2191</id>
      <description>Perform the correctness checks implemented by this Validator against the specified UIComponent. If any violations are found, a ValidatorException will be thrown containing the jakarta.faces.application.FacesMessage describing the failure. For a validator to be fully compliant with Version 2 and later of the specification, it must not fail validation on null or empty values unless it is specifically intended to address null or empty values. An application-wide is provided to allow validators designed for JSF 1.2 to work with JSF 2 and later. The jakarta.faces.VALIDATE_EMPTY_FIELDS must be set to false to enable this backwards compatibility behavior.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2192</id>
      <description>if validation fails</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.validator.ValidatorException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2193</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.validator</package>
      <class-interface>LongRangeValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2194</id>
      <description>If true, the Object implementing this interface must not participate in state saving or restoring.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2195</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="MethodExpressionValidator" return-type="MethodExpressionValidator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2196</id>
      <description>Construct a Validator that contains a MethodExpression.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="MethodExpressionValidator" return-type="MethodExpressionValidator">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2199</id>
      <description>Gets the state of the instance as a Serializable Object. If the class that implements this interface has references to instances that implement StateHolder (such as a UIComponent with event handlers, validators, etc.) this method must call the #saveState method on all those instances as well. This method must not save the state of children and facets. That is done via the jakarta.faces.application.StateManager This method must not alter the state of the implementing object. In other words, after executing this code: Object state = component.saveState(facesContext); component should be the same as before executing it. The return from this method must be Serializable</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2200</id>
      <description>if context is null</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2201</id>
      <description>Denotes whether or not the Object implementing this interface must or must not participate in state saving or restoring.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2202</id>
      <description>Perform the correctness checks implemented by this Validator against the specified UIComponent. If any violations are found, a ValidatorException will be thrown containing the jakarta.faces.application.FacesMessage describing the failure. For a validator to be fully compliant with Version 2 and later of the specification, it must not fail validation on null or empty values unless it is specifically intended to address null or empty values. An application-wide is provided to allow validators designed for JSF 1.2 to work with JSF 2 and later. The jakarta.faces.VALIDATE_EMPTY_FIELDS must be set to false to enable this backwards compatibility behavior.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2203</id>
      <description>if validation fails</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.validator.ValidatorException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2204</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2205</id>
      <description>Reset the PartialStateHolder to a non-delta tracking state.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="clearInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2206</id>
      <description>Return the ValueExpression that yields the regular expression pattern when evaluated.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="getPattern" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2207</id>
      <description>Return true if delta state changes are being tracked, otherwise false</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="initialStateMarked" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2208</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="isTransient" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2209</id>
      <description>The runtime must ensure that the #markInitialState method is called on each instance of this interface in the view at the appropriate time to indicate the component is in its initial state. The implementor of the interface must ensure that #initialStateMarked returns true from the time markInitialState() is called until #clearInitialState is called, after which time initialStateMarked() must return false. Also, during the time that the instance returns true from initialStateMarked(), the implementation must return only the state that has changed in its implementation of StateHolder#saveState.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2210</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="RegexValidator" return-type="RegexValidator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2211</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2212</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2213</id>
      <description>The Regular Expression property to validate against.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="setPattern" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2214</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="setTransient" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2215</id>
      <description>Validate a String against a regular expression pattern. The full regex pattern must be matched in order to pass the validation.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2216</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2217</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RegexValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.validator.ValidatorException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2218</id>
      <description />
      <package>jakarta.faces.validator</package>
      <class-interface>RequiredValidator</class-interface>
      <method name="RequiredValidator" return-type="RequiredValidator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2219</id>
      <description>Verify that the converted object value is not null.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RequiredValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2220</id>
      <description>{@inheritDoc}</description>
      <package>jakarta.faces.validator</package>
      <class-interface>RequiredValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.validator.ValidatorException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2221</id>
      <description>Perform the correctness checks implemented by this Validator against the specified UIComponent. If any violations are found, a ValidatorException will be thrown containing the jakarta.faces.application.FacesMessage describing the failure. For a validator to be fully compliant with Version 2 and later of the specification, it must not fail validation on null or empty values unless it is specifically intended to address null or empty values. An application-wide is provided to allow validators designed for JSF 1.2 to work with JSF 2 and later. The jakarta.faces.VALIDATE_EMPTY_FIELDS must be set to false to enable this backwards compatibility behavior.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>Validator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2222</id>
      <description>if validation fails</description>
      <package>jakarta.faces.validator</package>
      <class-interface>Validator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.validator.ValidatorException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2223</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.validator</package>
      <class-interface>Validator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2224</id>
      <description>Returns the FacesMessage associated with the exception. If this instance was created with a constructor that takes Collection, this method returns the first message in the Collection</description>
      <package>jakarta.faces.validator</package>
      <class-interface>ValidatorException</class-interface>
      <method name="getFacesMessage" return-type="jakarta.faces.application.FacesMessage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2225</id>
      <description>If this instance was created with a constructor that takes Collection, this method returns the passed collection, otherwise this method returns null.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>ValidatorException</class-interface>
      <method name="getFacesMessages" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2226</id>
      <description>Construct a new exception with the specified message and no root cause.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>ValidatorException</class-interface>
      <method name="ValidatorException" return-type="ValidatorException">
        <parameters>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2227</id>
      <description>Allow this one exception to contain multiple messages.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>ValidatorException</class-interface>
      <method name="ValidatorException" return-type="ValidatorException">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2228</id>
      <description>Construct a new exception with the specified detail message and root cause.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>ValidatorException</class-interface>
      <method name="ValidatorException" return-type="ValidatorException">
        <parameters>
          <parameter>jakarta.faces.application.FacesMessage</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2229</id>
      <description>Allow this one exception to contain multiple messages, while passing on the root cause to the superclass</description>
      <package>jakarta.faces.validator</package>
      <class-interface>ValidatorException</class-interface>
      <method name="ValidatorException" return-type="ValidatorException">
        <parameters>
          <parameter>java.util.Collection</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2230</id>
      <description>Take the argument parent and apply this attached object to it. The action taken varies with class that implements one of the subinterfaces of this interface.</description>
      <package>jakarta.faces.view</package>
      <class-interface>AttachedObjectHandler</class-interface>
      <method name="applyAttachedObject" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2231</id>
      <description>Return the value of the "for" attribute specified by the page author on the tag for this AttachedObjectHandler.</description>
      <package>jakarta.faces.view</package>
      <class-interface>AttachedObjectHandler</class-interface>
      <method name="getFor" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2232</id>
      <description>Returns the name by which this attached object target is exposed to the page author.</description>
      <package>jakarta.faces.view</package>
      <class-interface>AttachedObjectTarget</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2233</id>
      <description>Returns the List that this AttachedObjectTarget exposes. Each attached object exposed by the composite component author may point at multiple UIComponent instances within the composite component. This method is used by the jakarta.faces.view.ViewDeclarationLanguage#retargetAttachedObjects method to take the appropriate action on the attached object.</description>
      <package>jakarta.faces.view</package>
      <class-interface>AttachedObjectTarget</class-interface>
      <method name="getTargets" return-type="java.util.List">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2234</id>
      <description>Return the client event name to which this behavior applies.</description>
      <package>jakarta.faces.view</package>
      <class-interface>BehaviorHolderAttachedObjectHandler</class-interface>
      <method name="getEventName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2235</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>BehaviorHolderAttachedObjectTarget</class-interface>
      <method name="isDefaultEvent" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2236</id>
      <description>Return the estimated character column.</description>
      <package>jakarta.faces.view</package>
      <class-interface>Location</class-interface>
      <method name="getColumn" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2237</id>
      <description>Return the line number in the page for this location.</description>
      <package>jakarta.faces.view</package>
      <class-interface>Location</class-interface>
      <method name="getLine" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2238</id>
      <description>Return the file path to the page represented by this location.</description>
      <package>jakarta.faces.view</package>
      <class-interface>Location</class-interface>
      <method name="getPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2239</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>Location</class-interface>
      <method name="Location" return-type="Location">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2240</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>Location</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2243</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>StateManagementStrategy</class-interface>
      <method name="StateManagementStrategy" return-type="StateManagementStrategy" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2245</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="buildView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2247</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="createView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2249</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getComponentMetadata" return-type="java.beans.BeanInfo">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2250</id>
      <description>if there is an error in obtaining the metadata</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getComponentMetadata" return-type="java.beans.BeanInfo">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2251</id>
      <description>if this is a JSP VDL implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getComponentMetadata" return-type="java.beans.BeanInfo">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.UnsupportedOperationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2253</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getScriptComponentResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2254</id>
      <description>if there is an error in obtaining the script component resource</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getScriptComponentResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2255</id>
      <description>if this is a JSP VDL implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getScriptComponentResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.UnsupportedOperationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2256</id>
      <description>For implementations that want to control the implementation of state saving and restoring, the StateManagementStrategy allows them to do so. Returning null indicates that the implementation wishes the runtime to handle the state saving and restoring. Implementations that provide the VDL for Facelets for JSF 2.0 and later must return non-null from this method.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getStateManagementStrategy" return-type="jakarta.faces.view.StateManagementStrategy">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2258</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getViewMetadata" return-type="jakarta.faces.view.ViewMetadata">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2259</id>
      <description>if there is an error in obtaining the metadata</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getViewMetadata" return-type="jakarta.faces.view.ViewMetadata">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2261</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2262</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2264</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2265</id>
      <description>Assuming the component metadata for argument topLevelComponent has been made available by an earlier call to ViewDeclarationLanguage#getComponentMetadata, leverage the component metadata for the purpose of re-targeting attached objects from the top level composite component to the individual AttachedObjectTarget instances inside the composite component. This method must be called by the ViewDeclarationLanguage implementation when creating the UIComponent tree when a composite component usage is encountered. An algorithm semantically equivalent to the following must be implemented. Obtain the metadata for the composite component. Currently this entails getting the value of the UIComponent#BEANINFO_KEY component attribute, which will be an instance of BeanInfo. If the metadata cannot be found, log an error message and return. Get the BeanDescriptor from the BeanInfo. Get the value of the AttachedObjectTarget#ATTACHED_OBJECT_TARGETS_KEY from the BeanDescriptor's getValue() method. This will be a List&lt;AttachedObjectTarget&gt;. Let this be targetList. For each curHandler entry in the argument handlers Let forAttributeValue be the return from AttachedObjectHandler#getFor. For each curTarget entry in targetList, the first of the following items that causes a match will take this action: For each UIComponent in the list returned from curTarget.getTargets(), call curHandler.applyAttachedObject(), passing the FacesContext and the UIComponent. and cause this inner loop to terminate. If curHandler is an instance of ActionSource2AttachedObjectHandler and curTarget is an instance of ActionSource2AttachedObjectTarget, and curTarget.getName() is equal to curTargetName, consider it a match. If curHandler is an instance of EditableValueHolderAttachedObjectHandler and curTarget is an instance of EditableValueHolderAttachedObjectTarget, and curTarget.getName() is equal to curTargetName, consider it a match. If curHandler is an instance of ValueHolderAttachedObjectHandler and curTarget is an instance of ValueHolderAttachedObjectTarget, and curTarget.getName() is equal to curTargetName, consider it a match. If curHandler is an instance of BehaviorHolderAttachedObjectHandler and curTarget is an instance of BehaviorHolderAttachedObjectTarget, and either of the following conditions are true, curHandler.getEventName() is not null and is equal to curTargetName. curHandler.getEventName() is null and curTarget.isDefaultEvent() is true. consider it a match. The implementation must support retargeting attached objects from the top level compsite component to targets that are composite and non-composite components. An implementation is provided that will throw UnsupportedOperationException. A Faces implementation compliant with version 2.0 and beyond of the specification must override this method.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="retargetAttachedObjects" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2266</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="retargetAttachedObjects" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.util.List</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2267</id>
      <description>Assuming the component metadata for argument topLevelComponent has been made available by an earlier call to ViewDeclarationLanguage#getComponentMetadata, leverage the component metadata for the purpose of re-targeting any method expressions from the top level component to the appropriate inner component. For each attribute that is a MethodExpression (as indicated by the presence of a "method-signature" attribute and the absence of a "type" attribute), the following action must be taken: Get the value of the targets attribute. If the value is a ValueExpression evaluate it. If there is no targets attribute, let the name of the metadata element be the evaluated value of the targets attribute. Interpret targets as a space (not tab) separated list of ids. For each entry in the list: Find the inner component of the topLevelComponent with the id equal to the current list entry. For discussion, this component is called target. If not found, log and error and continue to the next attribute. For discussion the declared name of the attribute is called name. In the attributes map of the topLevelComponent, look up the entry under the key name. Assume the result is a ValueExpression. For discussion, this is attributeValueExpression. If not found, log an error and continue to the next attribute. If name is equal to the string "action", or "actionListener" without the quotes, assume target is an jakarta.faces.component.ActionSource2. If name is equal to the string "validator", or "valueChangeListener" without the quotes, assume target is an jakarta.faces.component.EditableValueHolder. Call getExpressionString() on the attributeValueExpression and use that string to create a MethodExpression of the appropriate signature for name. If name is not equal to any of the previously listed strings, call getExpressionString() on the attributeValueExpression and use that string to create a MethodExpression where the signature is created based on the value of the "method-signature" attribute of the tag. Let the resultant MethodExpression be called attributeMethodExpression for discussion. If name is equal to the string "action" without the quotes, call jakarta.faces.component.ActionSource2#setActionExpression on target, passing attributeMethodExpression. If name is equal to the string "actionListener" without the quotes, call jakarta.faces.component.ActionSource#addActionListener on target, passing attributeMethodExpression wrapped in a jakarta.faces.event.MethodExpressionActionListener. If name is equal to the string "validator" without the quotes, call jakarta.faces.component.EditableValueHolder#addValidator on target, passing attributeMethodExpression wrapped in a jakarta.faces.validator.MethodExpressionValidator. If name is equal to the string "valueChangeListener" without the quotes, call jakarta.faces.component.EditableValueHolder#addValueChangeListener on target, passing attributeMethodExpression wrapped in a jakarta.faces.event.MethodExpressionValueChangeListener. Otherwise, assume that the MethodExpression should be placed in the components attribute set. The runtme must create the MethodExpression instance based on the value of the "method-signature" attribute. An implementation is provided that will throw UnsupportedOperationException. A Faces implementation compliant with version 2.0 and beyond of the specification must override this method.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="retargetMethodExpressions" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2268</id>
      <description>if context or topLevelComponent is null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="retargetMethodExpressions" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2269</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="ViewDeclarationLanguage" return-type="ViewDeclarationLanguage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2271</id>
      <description>if viewId is null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageFactory</class-interface>
      <method name="getViewDeclarationLanguage" return-type="jakarta.faces.view.ViewDeclarationLanguage">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2272</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.view.ViewDeclarationLanguageFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2273</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageFactory</class-interface>
      <method name="ViewDeclarationLanguageFactory" return-type="ViewDeclarationLanguageFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2274</id>
      <description>Creates a new UIViewRoot containing only view parameter metadata. The processing of building this UIViewRoot with metadata should not cause any events to be published to the application. The implementation must call FacesContext#setProcessingEvents passing false as the argument, at the beginning of the method, and pass true to the same method at the end. The implementation must ensure that this happens regardless of ant exceptions that may be thrown.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewMetadata</class-interface>
      <method name="createMetadataView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2275</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewMetadata</class-interface>
      <method name="getViewId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2276</id>
      <description>Utility method to extract view metadata from the provided UIViewRoot.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewMetadata</class-interface>
      <method name="getViewParameters" return-type="java.util.Collection">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2277</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewMetadata</class-interface>
      <method name="ViewMetadata" return-type="ViewMetadata" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2278</id>
      <description>Returns the resolved literal String value of the attribute name after evaluating EL.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>AttributeHandler</class-interface>
      <method name="getAttributeName" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2279</id>
      <description>Return the value of the behavior-id.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>BehaviorConfig</class-interface>
      <method name="getBehaviorId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2280</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>BehaviorHandler</class-interface>
      <method name="BehaviorHandler" return-type="BehaviorHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.BehaviorConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2281</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>BehaviorHandler</class-interface>
      <method name="getBehaviorId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2282</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>BehaviorHandler</class-interface>
      <method name="getEvent" return-type="jakarta.faces.view.facelets.TagAttribute" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2283</id>
      <description>Return the client event name to which this behavior applies.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>BehaviorHandler</class-interface>
      <method name="getEventName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2284</id>
      <description>ComponentType to pass to the Application. Cannot be null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentConfig</class-interface>
      <method name="getComponentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2285</id>
      <description>RendererType to set on created UIComponent instances.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentConfig</class-interface>
      <method name="getRendererType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2286</id>
      <description>Leverage the TagHandlerDelegateFactory provided by the implementation to create an instance of TagHandlerDelegate designed for use with ComponentHandler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentHandler</class-interface>
      <method name="ComponentHandler" return-type="ComponentHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.ComponentConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2287</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentHandler</class-interface>
      <method name="getComponentConfig" return-type="jakarta.faces.view.facelets.ComponentConfig" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2288</id>
      <description>Determine if the passed component is not null and if it's new to the tree. This operation can be used for determining if attributes should be wired to the component.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentHandler</class-interface>
      <method name="isNew" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2289</id>
      <description>This method is guaranteed to be called after the component has been created but before it has been populated with children.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentHandler</class-interface>
      <method name="onComponentCreated" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2290</id>
      <description>This method is guaranteed to be called after the component has been populated with children.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentHandler</class-interface>
      <method name="onComponentPopulated" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2291</id>
      <description>Calls apply on any child handlers.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>CompositeFaceletHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2292</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>CompositeFaceletHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2293</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>CompositeFaceletHandler</class-interface>
      <method name="CompositeFaceletHandler" return-type="CompositeFaceletHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletHandler[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2294</id>
      <description>Returns the array of child handlers contained by this handler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>CompositeFaceletHandler</class-interface>
      <method name="getHandlers" return-type="jakarta.faces.view.facelets.FaceletHandler[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2295</id>
      <description>Return the converter id to be used in instantiating this converter</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ConverterConfig</class-interface>
      <method name="getConverterId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2296</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ConverterHandler</class-interface>
      <method name="ConverterHandler" return-type="ConverterHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.ConverterConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2297</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ConverterHandler</class-interface>
      <method name="getConverterId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2298</id>
      <description>The default implementation simply calls through to TagHandlerDelegate#apply.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2299</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2301</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="applyNextHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2302</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="applyNextHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2303</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="applyNextHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>ELException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2304</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="DelegatingMetaTagHandler" return-type="DelegatingMetaTagHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.TagConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2305</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="getBinding" return-type="jakarta.faces.view.facelets.TagAttribute" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2306</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="getTag" return-type="jakarta.faces.view.facelets.Tag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2307</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="getTagAttribute" return-type="jakarta.faces.view.facelets.TagAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2308</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="getTagId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2309</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="isDisabled" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2310</id>
      <description>Invoking/extending this method will cause the results of the created MetaRuleset to auto-wire state to the passed instance.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="setAttributes" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2311</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="FaceletContext" return-type="FaceletContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2312</id>
      <description>Generate a unique ID for the passed String</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="generateUniqueId" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2313</id>
      <description>Return an attribute set by a previous call to #setAttribute. Support method which is backed by the current VariableMapper</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="getAttribute" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2314</id>
      <description>The ExpressionFactory to use within the Facelet this context is executing upon. Must not be null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="getExpressionFactory" return-type="ExpressionFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2315</id>
      <description>The current FacesContext bound to this "request". Must not be null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="getFacesContext" return-type="jakarta.faces.context.FacesContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2316</id>
      <description>Include another Facelet defined at some path, relative to the executing context, not the current Facelet (same as include directive in JSP)</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2317</id>
      <description>if unable to load relativePath</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2318</id>
      <description>if unable to parse the markup loaded from relativePath</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.view.facelets.FaceletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2320</id>
      <description>if any of the expressions in the markup loaded from relativePath fail</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>ELException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2321</id>
      <description>Include another Facelet defined at some path, absolute to this ClassLoader/OS</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2322</id>
      <description>if unable to load relativePath</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2323</id>
      <description>if unable to parse the markup loaded from relativePath</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>jakarta.faces.view.facelets.FaceletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2325</id>
      <description>if any of the expressions in the markup loaded from relativePath fail</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>ELException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2326</id>
      <description>Support method which is backed by the current VariableMapper.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="setAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2327</id>
      <description>Set the FunctionMapper to use in EL evaluation/creation.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="setFunctionMapper" return-type="void">
        <parameters>
          <parameter>FunctionMapper</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2328</id>
      <description>Set the VariableMapper to use in EL evaluation/creation.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="setVariableMapper" return-type="void">
        <parameters>
          <parameter>VariableMapper</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2329</id>
      <description>Create an empty FaceletException.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletException</class-interface>
      <method name="FaceletException" return-type="FaceletException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2330</id>
      <description>Create a FaceletException with argument message as the message.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletException</class-interface>
      <method name="FaceletException" return-type="FaceletException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2331</id>
      <description>Wrap argument cause within this FaceletException instance.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletException</class-interface>
      <method name="FaceletException" return-type="FaceletException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2332</id>
      <description>Wrap argument cause in a FaceletException instance, with a message given by the argument message.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletException</class-interface>
      <method name="FaceletException" return-type="FaceletException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2333</id>
      <description>Process changes on a particular UIComponent</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2334</id>
      <description>if unable to load relativePath</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2335</id>
      <description>if unable to parse the markup loaded from relativePath</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>jakarta.faces.view.facelets.FaceletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2337</id>
      <description>if any of the expressions in the markup loaded from relativePath fail</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>ELException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2338</id>
      <description>Take the necessary actions to apply the attached object represented by the tag for the concrete subclass of this class to the argument parent.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletsAttachedObjectHandler</class-interface>
      <method name="applyAttachedObject" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2339</id>
      <description>Call through to super</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletsAttachedObjectHandler</class-interface>
      <method name="FaceletsAttachedObjectHandler" return-type="FaceletsAttachedObjectHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.TagConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2340</id>
      <description>Return the value of the "for" attribute. This enables the runtime to know to which inner component this attached object should be retargeted.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletsAttachedObjectHandler</class-interface>
      <method name="getFor" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2341</id>
      <description>Returns the resolved literal String value of the facet name after evaluating EL.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FacetHandler</class-interface>
      <method name="getFacetName" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2342</id>
      <description>Take the action prescribed in the JSF specification for this particular VDL element attribute.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Metadata</class-interface>
      <method name="applyMetadata" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2343</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Metadata</class-interface>
      <method name="Metadata" return-type="Metadata" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2344</id>
      <description>Return a beans PropertyDescriptor for the property with name given by argument name.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetadataTarget</class-interface>
      <method name="getProperty" return-type="java.beans.PropertyDescriptor">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2345</id>
      <description>Return a Class for the property with name given by argument name.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetadataTarget</class-interface>
      <method name="getPropertyType" return-type="java.lang.Class">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2346</id>
      <description>Return a Method for the getter of the property with name given by argument name.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetadataTarget</class-interface>
      <method name="getReadMethod" return-type="java.lang.reflect.Method">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2347</id>
      <description>Return the Class of the metadata target.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetadataTarget</class-interface>
      <method name="getTargetClass" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2348</id>
      <description>Return a Method for the setter of the property with name given by argument name.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetadataTarget</class-interface>
      <method name="getWriteMethod" return-type="java.lang.reflect.Method">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2349</id>
      <description>Return true if the target for this metadata element is an instance of the argument type.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetadataTarget</class-interface>
      <method name="isTargetInstanceOf" return-type="boolean">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2350</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetadataTarget</class-interface>
      <method name="MetadataTarget" return-type="MetadataTarget" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2351</id>
      <description>Return an abstraction that takes appropriate action given the kind of rule represented by the argument name, in the context of this particular concrete subclass of MetaRule. The abstraction must encapsulate the value from the argument attribute.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRule</class-interface>
      <method name="applyRule" return-type="jakarta.faces.view.facelets.Metadata">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
          <parameter>jakarta.faces.view.facelets.MetadataTarget</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2352</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRule</class-interface>
      <method name="MetaRule" return-type="MetaRule" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2353</id>
      <description>Add another Metadata to this ruleset, returning this.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRuleset</class-interface>
      <method name="add" return-type="jakarta.faces.view.facelets.MetaRuleset">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Metadata</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2354</id>
      <description>Add another MetaRule to this ruleset, returning this.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRuleset</class-interface>
      <method name="addRule" return-type="jakarta.faces.view.facelets.MetaRuleset">
        <parameters>
          <parameter>jakarta.faces.view.facelets.MetaRule</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2355</id>
      <description>Customize this MetaRuleset by removing the attribute named by argument attribute and re-adding it under the name given by the argument property, returning this.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRuleset</class-interface>
      <method name="alias" return-type="jakarta.faces.view.facelets.MetaRuleset">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2356</id>
      <description>Take actions to apply the rule.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRuleset</class-interface>
      <method name="finish" return-type="jakarta.faces.view.facelets.Metadata" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2357</id>
      <description>Customize this MetaRuleset instance to advise it to ignore the attribute named by the attribute argument, returning this.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRuleset</class-interface>
      <method name="ignore" return-type="jakarta.faces.view.facelets.MetaRuleset">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2358</id>
      <description>Customize this MetaRuleset instance to advise it to ignore all attributes, returning this.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRuleset</class-interface>
      <method name="ignoreAll" return-type="jakarta.faces.view.facelets.MetaRuleset" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2359</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaRuleset</class-interface>
      <method name="MetaRuleset" return-type="MetaRuleset" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2360</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>MetaTagHandler</class-interface>
      <method name="MetaTagHandler" return-type="MetaTagHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.TagConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2361</id>
      <description>Returns the URL of a Facelet template file. Called by the Facelets Runtime to load a template file referred to in a Facelets page.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ResourceResolver</class-interface>
      <method name="resolveUrl" return-type="java.net.URL">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2362</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ResourceResolver</class-interface>
      <method name="ResourceResolver" return-type="ResourceResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2363</id>
      <description>Return an object encapsulating the TagAttributes specified on this element in the view.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Tag</class-interface>
      <method name="getAttributes" return-type="jakarta.faces.view.facelets.TagAttributes" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2364</id>
      <description>Return the XML local name of the tag. For example, would be "tag".</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Tag</class-interface>
      <method name="getLocalName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2365</id>
      <description>Return the Location of this Tag instance in the Facelet view.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Tag</class-interface>
      <method name="getLocation" return-type="jakarta.faces.view.Location" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2366</id>
      <description>Return the resolved XML Namespace for this tag in the Facelets view.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Tag</class-interface>
      <method name="getNamespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2367</id>
      <description>Return the XML qualified name for this tag. For example, would be "my:tag".</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Tag</class-interface>
      <method name="getQName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2368</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Tag</class-interface>
      <method name="Tag" return-type="Tag">
        <parameters>
          <parameter>jakarta.faces.view.Location</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.view.facelets.TagAttributes</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2369</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Tag</class-interface>
      <method name="Tag" return-type="Tag">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
          <parameter>jakarta.faces.view.facelets.TagAttributes</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2370</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Tag</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2371</id>
      <description>If literal, return Boolean#getBoolean(java.lang.String) Boolean.getBoolean(java.lang.String) passing our value, otherwise call #getObject(FaceletContext, Class) getObject(FaceletContext, Class).</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2372</id>
      <description>If literal, call Integer#parseInt(java.lang.String) Integer.parseInt(String), otherwise call #getObject(FaceletContext, Class) getObject(FaceletContext, Class).</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2373</id>
      <description>Local name of this attribute</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getLocalName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2374</id>
      <description>The location of this attribute in the FaceletContext</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getLocation" return-type="jakarta.faces.view.Location" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2375</id>
      <description>Create a MethodExpression, using this attribute's value as the expression String.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getMethodExpression" return-type="MethodExpression">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2376</id>
      <description>The resolved Namespace for this attribute</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getNamespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2377</id>
      <description>Delegates to getObject with Object.class as a param</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2378</id>
      <description>If literal, simply coerce our String literal value using an ExpressionFactory, otherwise create a ValueExpression and evaluate it.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getObject" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2379</id>
      <description>The qualified name for this attribute</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getQName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2380</id>
      <description>Return the literal value of this attribute</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getValue" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2381</id>
      <description>If literal, then return our value, otherwise delegate to getObject, passing String.class.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getValue" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2382</id>
      <description>Create a ValueExpression, using this attribute's literal value and the passed expected type.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getValueExpression" return-type="ValueExpression">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2383</id>
      <description>If this TagAttribute is literal (not #{..} or ${..})</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="isLiteral" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2384</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="TagAttribute" return-type="TagAttribute" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2385</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributeException</class-interface>
      <method name="TagAttributeException" return-type="TagAttributeException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2386</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributeException</class-interface>
      <method name="TagAttributeException" return-type="TagAttributeException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2387</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributeException</class-interface>
      <method name="TagAttributeException" return-type="TagAttributeException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2388</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributeException</class-interface>
      <method name="TagAttributeException" return-type="TagAttributeException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2389</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributeException</class-interface>
      <method name="TagAttributeException" return-type="TagAttributeException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2390</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributeException</class-interface>
      <method name="TagAttributeException" return-type="TagAttributeException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2391</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributeException</class-interface>
      <method name="TagAttributeException" return-type="TagAttributeException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2392</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributeException</class-interface>
      <method name="TagAttributeException" return-type="TagAttributeException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
          <parameter>jakarta.faces.view.facelets.TagAttribute</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2393</id>
      <description>Using no namespace, find the TagAttribute</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributes</class-interface>
      <method name="get" return-type="jakarta.faces.view.facelets.TagAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2394</id>
      <description>Find a TagAttribute that matches the passed namespace and local name.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributes</class-interface>
      <method name="get" return-type="jakarta.faces.view.facelets.TagAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2395</id>
      <description>Return an array of all TagAttributes in this set</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributes</class-interface>
      <method name="getAll" return-type="jakarta.faces.view.facelets.TagAttribute[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2396</id>
      <description>Get all TagAttributes for the passed namespace</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributes</class-interface>
      <method name="getAll" return-type="jakarta.faces.view.facelets.TagAttribute[]">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2397</id>
      <description>A list of Namespaces found in this set</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributes</class-interface>
      <method name="getNamespaces" return-type="java.lang.String[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2398</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributes</class-interface>
      <method name="TagAttributes" return-type="TagAttributes" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2399</id>
      <description>The next FaceletHandler (child or children) to be applied. This must never be null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagConfig</class-interface>
      <method name="getNextHandler" return-type="jakarta.faces.view.facelets.FaceletHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2400</id>
      <description>Return the Tag representing this handler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagConfig</class-interface>
      <method name="getTag" return-type="jakarta.faces.view.facelets.Tag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2401</id>
      <description>A document-unique id, follows the convention "_tagId##"</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagConfig</class-interface>
      <method name="getTagId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2402</id>
      <description>If handled, return a new Tag instance, otherwise return null</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagDecorator</class-interface>
      <method name="decorate" return-type="jakarta.faces.view.facelets.Tag">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2403</id>
      <description>Wrap the argument tag so the exception can reference its information.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagException</class-interface>
      <method name="TagException" return-type="TagException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2404</id>
      <description>Wrap the argument tag so the exception can reference its information.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagException</class-interface>
      <method name="TagException" return-type="TagException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2405</id>
      <description>Wrap the argument tag so the exception can reference its information.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagException</class-interface>
      <method name="TagException" return-type="TagException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2406</id>
      <description>Wrap the argument tag so the exception can reference its information.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagException</class-interface>
      <method name="TagException" return-type="TagException">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2407</id>
      <description>Every TagHandler instance is associated with a Tag. Each Tag instance has a TagAttributes property, which is simply a collection of TagAttribute instances. Extract and save as protected instance variables the TagConfig#getTagId, TagConfig#getTag and TagConfig#getNextHandler returns from the argument TagConfig. This constructor is only called when the Facelets View is compiled.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandler</class-interface>
      <method name="TagHandler" return-type="TagHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.TagConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2408</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandler</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2410</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegate</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2411</id>
      <description>Return a MetaRuleset particular to this kind of tag handler. Called from classes that implement MetaTagHandler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegate</class-interface>
      <method name="createMetaRuleset" return-type="jakarta.faces.view.facelets.MetaRuleset">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2412</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegate</class-interface>
      <method name="TagHandlerDelegate" return-type="TagHandlerDelegate" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2413</id>
      <description>Create and return a TagHandlerDelegate instance designed for use with BehaviorHandler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegateFactory</class-interface>
      <method name="createBehaviorHandlerDelegate" return-type="jakarta.faces.view.facelets.TagHandlerDelegate">
        <parameters>
          <parameter>jakarta.faces.view.facelets.BehaviorHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2414</id>
      <description>Create and return a TagHandlerDelegate instance designed for use with ComponentHandler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegateFactory</class-interface>
      <method name="createComponentHandlerDelegate" return-type="jakarta.faces.view.facelets.TagHandlerDelegate">
        <parameters>
          <parameter>jakarta.faces.view.facelets.ComponentHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2415</id>
      <description>Create and return a TagHandlerDelegate instance designed for use with ConverterHandler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegateFactory</class-interface>
      <method name="createConverterHandlerDelegate" return-type="jakarta.faces.view.facelets.TagHandlerDelegate">
        <parameters>
          <parameter>jakarta.faces.view.facelets.ConverterHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2416</id>
      <description>Create and return a TagHandlerDelegate instance designed for use with ValidatorHandler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegateFactory</class-interface>
      <method name="createValidatorHandlerDelegate" return-type="jakarta.faces.view.facelets.TagHandlerDelegate">
        <parameters>
          <parameter>jakarta.faces.view.facelets.ValidatorHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2417</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegateFactory</class-interface>
      <method name="TagHandlerDelegateFactory" return-type="TagHandlerDelegateFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2418</id>
      <description>Returns the literal String value of the contained text.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TextHandler</class-interface>
      <method name="getText" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2419</id>
      <description>Returns the resolved literal String value of the contained text after evaluating EL.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TextHandler</class-interface>
      <method name="getText" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2420</id>
      <description>Return the validator-id associated with a particular validator in your faces-config</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ValidatorConfig</class-interface>
      <method name="getValidatorId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2421</id>
      <description>Return the TagConfig subclass used to configure this handler instance.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ValidatorHandler</class-interface>
      <method name="getValidatorConfig" return-type="jakarta.faces.view.facelets.ValidatorConfig" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2422</id>
      <description>Retrieve the id of the validator that is to be created and added to the parent EditableValueHolder. All subclasses should override this method because it is important for Facelets to have a unique way of identifying the validators that are added to this EditableValueHolder and allows exclusions to work properly. An exclusion is a validator declaration that has the attribute "disabled" which resolves to false, instructing Facelets not to register a default validator with the same id.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ValidatorHandler</class-interface>
      <method name="getValidatorId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2423</id>
      <description>Construct this instance around the configuration information in argument config</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ValidatorHandler</class-interface>
      <method name="ValidatorHandler" return-type="ValidatorHandler">
        <parameters>
          <parameter>jakarta.faces.view.facelets.ValidatorConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2424</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>AttributeTag</class-interface>
      <method name="AttributeTag" return-type="AttributeTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2425</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>AttributeTag</class-interface>
      <method name="doEndTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2426</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>AttributeTag</class-interface>
      <method name="doEndTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2427</id>
      <description>Register the specified attribute name and value with the UIComponent instance associated with our most immediately surrounding UIComponentTag instance, if this UIComponent does not already have a value for the specified attribute name.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>AttributeTag</class-interface>
      <method name="doStartTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2428</id>
      <description>if a JSP error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>AttributeTag</class-interface>
      <method name="doStartTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2429</id>
      <description>Release references to any acquired resources.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>AttributeTag</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2430</id>
      <description>Set the attribute name.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>AttributeTag</class-interface>
      <method name="setName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2431</id>
      <description>Set the attribute value.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>AttributeTag</class-interface>
      <method name="setValue" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2432</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterELTag</class-interface>
      <method name="ConverterELTag" return-type="ConverterELTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2433</id>
      <description>Create a new instance of the specified Converter class, and register it with the UIComponent instance associated with our most immediately surrounding UIComponentClassicTagBase instance, if the UIComponent instance was created by this execution of the containing JSP page. If the localValue of the UIComponent is a String, attempt to convert it.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterELTag</class-interface>
      <method name="doStartTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2434</id>
      <description>if a JSP error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterELTag</class-interface>
      <method name="doStartTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2435</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterTag</class-interface>
      <method name="ConverterTag" return-type="ConverterTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2436</id>
      <description>Create a new instance of the specified Converter class, and register it with the UIComponent instance associated with our most immediately surrounding UIComponentTag instance, if the UIComponent instance was created by this execution of the containing JSP page. If the localValue of the UIComponent is a String, attempt to convert it.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterTag</class-interface>
      <method name="doStartTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2437</id>
      <description>if a JSP error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterTag</class-interface>
      <method name="doStartTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2438</id>
      <description>Release references to any acquired resources.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterTag</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2439</id>
      <description>Set the expression that will be used to create a ValueExpression that references a backing bean property of the Converter instance to be created.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2440</id>
      <description>if a JSP error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2441</id>
      <description>Set the identifer of the Converter instance to be created.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ConverterTag</class-interface>
      <method name="setConverterId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2442</id>
      <description>Release all resources acquired at startup time.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="destroy" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2443</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="FacesServlet" return-type="FacesServlet" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2444</id>
      <description>Return the ServletConfig instance for this servlet.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="getServletConfig" return-type="ServletConfig" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2445</id>
      <description>Return information about this Servlet.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="getServletInfo" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2446</id>
      <description>Acquire the factory instances we will require.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="init" return-type="void">
        <parameters>
          <parameter>ServletConfig</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2447</id>
      <description>if, for any reason, the startup of this Faces application failed. This includes errors in the config file that is parsed before or during the processing of this init() method.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="init" return-type="void">
        <parameters>
          <parameter>ServletConfig</parameter>
        </parameters>
        <throw>ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2449</id>
      <description>if an input/output error occurs during processing</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="service" return-type="void">
        <parameters>
          <parameter>ServletRequest</parameter>
          <parameter>ServletResponse</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2450</id>
      <description>if a servlet error occurs during processing</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="service" return-type="void">
        <parameters>
          <parameter>ServletRequest</parameter>
          <parameter>ServletResponse</parameter>
        </parameters>
        <throw>ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2451</id>
      <description>Return EVAL_BODY_INCLUDE to cause nested body content to be evaluated.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacetTag</class-interface>
      <method name="doStartTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2452</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>FacetTag</class-interface>
      <method name="doStartTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2453</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>FacetTag</class-interface>
      <method name="FacetTag" return-type="FacetTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2454</id>
      <description>Return the name to be assigned to this facet.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacetTag</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2455</id>
      <description>Release any resources allocated by this tag instance.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacetTag</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2456</id>
      <description>Set the name to be assigned to this facet.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacetTag</class-interface>
      <method name="setName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2457</id>
      <description>Create and return a A new ExceptionHandler instance. The implementation must return an ExceptionHandler instance suitable for the environment. For example, in some cases it may be desirable for an ExceptionHandler to write error information to the response instead of throwing exceptions as in the case of Ajax applications.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>PreJsf2ExceptionHandlerFactory</class-interface>
      <method name="getExceptionHandler" return-type="jakarta.faces.context.ExceptionHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2458</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>PreJsf2ExceptionHandlerFactory</class-interface>
      <method name="PreJsf2ExceptionHandlerFactory" return-type="PreJsf2ExceptionHandlerFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2459</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentBodyTag</class-interface>
      <method name="UIComponentBodyTag" return-type="UIComponentBodyTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2460</id>
      <description>Perform any processing necessary to handle the content implications of CASE 4 in the class description. Return result from #getDoAfterBodyValue</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="doAfterBody" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2461</id>
      <description>if an error is encountered</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="doAfterBody" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2462</id>
      <description>Perform any processing necessary to handle the content implications of CASE 3 in the class description. The default implementation, which is intended to be sufficient for most components, calls #createVerbatimComponentFromBodyContent on this instance and adds it as a child of the component for this tag's component at the end of the child list. In addition, the following housekeeping steps are taken. Retrieve from the UIComponent the set of component ids of child components created by UIComponentTag instances the last time this page was processed (if any). Compare it to the list of children created during this page processing pass, and remove all children present in the old list but not the new. Save the new list as a component attribute so that it gets saved as part of the component's state. Retrieve from the UIComponent the set of facet names of facets created by UIComponentTag instances the last time this page was processed (if any). Compare it to the list of facets created during this page processing pass, and remove all facets present in the old list but not the new. Save the new list as a component attribute so that it gets saved as part of the component's state. Release all references to the component, and pop it from the component stack for this response, removing the stack if this was the outermost component. The flag value to be returned is acquired by calling the getDoEndValue() method, which tag subclasses may override if they do not want the default value.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="doEndTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2463</id>
      <description>if an error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="doEndTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2464</id>
      <description>Prepare for evaluation of the body. This method is invoked by the JSP page implementation object after setBodyContent() and before the first time the body is to be evaluated. This method will not be invoked for empty tags or for non-empty tags whose doStartTag() method returns SKIP_BODY or EVAL_BODY_INCLUDE.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="doInitBody" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2465</id>
      <description>if an error is encountered</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="doInitBody" return-type="void">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2466</id>
      <description>Perform any processing necessary to find (or create) the UIComponent instance in the view corresponding to this tag instance in the page and, if and only if a component was created, insert it into the tree at the proper location as expected by the page author. Secondarily, cause a transient UIOutput component to be created and placed in the tree before the UIComponent instance for this tag. The value of this UIOutput component must include anything covered by CASE 1 or CASE 2 in the class description. The default implementation, which is intended to be sufficient for most components, implements this secondary requirement by calling #getParentUIComponentClassicTagBase, and calling #createVerbatimComponentFromBodyContent on the result. It then adds the returned component to the tree before the actual component for this tag instance instance by calling #addVerbatimBeforeComponent. Before returning, the component is pushed onto the component stack for this response to enable the #getParentUIComponentClassicTagBase method to work properly. The flag value to be returned is acquired by calling the getDoStartValue() method, which tag subclasses may override if they do not want the default value.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="doStartTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2467</id>
      <description>if an error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="doStartTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2468</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="getBodyContent" return-type="BodyContent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2469</id>
      <description>Return the UIComponent instance that is associated with this tag instance. This method is designed to be used by tags nested within this tag, and only returns useful results between the execution of doStartTag() and doEndTag() on this tag instance.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="getComponentInstance" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2470</id>
      <description>Return true if we dynamically created a new component instance during execution of this tag. This method is designed to be used by tags nested within this tag, and only returns useful results between the execution of doStartTag() and doEndTag() on this tag instance.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="getCreated" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2471</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="getJspId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2472</id>
      <description>Return the Tag that is the parent of this instance.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="getParent" return-type="Tag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2473</id>
      <description>Locate and return the nearest enclosing UIComponentClassicTagBase if any; otherwise, return null.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="getParentUIComponentClassicTagBase" return-type="jakarta.faces.webapp.UIComponentClassicTagBase">
        <parameters>
          <parameter>PageContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2474</id>
      <description>Get the JspWriter from our BodyContent.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="getPreviousOut" return-type="JspWriter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2475</id>
      <description>Release any resources allocated during the execution of this tag handler.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2476</id>
      <description>Set the bodyContent for this tag handler. This method is invoked by the JSP page implementation object at most once per action invocation, before doInitiBody(). This method will not be invoked for empty tags or for non-empty tags whose doStartTag() method returns SKIP_BODY or EVAL_BODY_INCLUDE.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="setBodyContent" return-type="void">
        <parameters>
          <parameter>BodyContent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2477</id>
      <description>Set the component identifier for our component. If the argument begins with UIViewRoot#UNIQUE_ID_PREFIX throw an IllegalArgumentException</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="setId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2478</id>
      <description>if the argument is non-null and starts with UIViewRoot#UNIQUE_ID_PREFIX.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="setId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2479</id>
      <description>Defined on JspIdConsumer. This method is called by the container before #doStartTag. The argument is guaranteed to be unique within the page. IMPLEMENTATION NOTE: This method will detect where we are in an include and assign a unique ID for each include in a particular 'logical page'. This allows us to avoid possible duplicate ID situations for included pages that have components without explicit IDs.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="setJspId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2480</id>
      <description>Set the PageContext of the page containing this tag instance.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="setPageContext" return-type="void">
        <parameters>
          <parameter>PageContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2481</id>
      <description>Set the Tag that is the parent of this instance.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="setParent" return-type="void">
        <parameters>
          <parameter>Tag</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2482</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentClassicTagBase</class-interface>
      <method name="UIComponentClassicTagBase" return-type="UIComponentClassicTagBase" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2483</id>
      <description>Release any resources allocated during the execution of this tag handler.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentELTag</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2484</id>
      <description>Set the value expression for our component.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentELTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2485</id>
      <description>if an error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentELTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2486</id>
      <description>Set an override for the rendered attribute.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentELTag</class-interface>
      <method name="setRendered" return-type="void">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2487</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentELTag</class-interface>
      <method name="UIComponentELTag" return-type="UIComponentELTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2488</id>
      <description>Locate and return the nearest enclosing UIComponentTag if any; otherwise, return null.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="getParentUIComponentTag" return-type="jakarta.faces.webapp.UIComponentTag">
        <parameters>
          <parameter>PageContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2489</id>
      <description>Return true if the specified value conforms to the syntax requirements of a value binding expression. Such expressions ` * may be used on most component tag attributes to signal a desire for deferred evaluation of the attribute or property value to be set on the underlying UIComponent.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="isValueReference" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2490</id>
      <description>if value is null</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="isValueReference" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2491</id>
      <description>Release any resources allocated during the execution of this tag handler.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2492</id>
      <description>Set the value binding expression for our component.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2493</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2494</id>
      <description>if the specified binding is not a valid value binding expression.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2495</id>
      <description>Set an override for the rendered attribute.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="setRendered" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2496</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTag</class-interface>
      <method name="UIComponentTag" return-type="UIComponentTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2497</id>
      <description>Return the UIComponent instance that is associated with this tag instance. This method is designed to be used by tags nested within this tag, and only returns useful results between the execution of doStartTag() and doEndTag() on this tag instance.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTagBase</class-interface>
      <method name="getComponentInstance" return-type="jakarta.faces.component.UIComponent" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2498</id>
      <description>Return the component type for the component that is or will be bound to this tag. This value can be passed to jakarta.faces.application.Application#createComponent to create the UIComponent instance for this tag. Subclasses must override this method to return the appropriate value.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTagBase</class-interface>
      <method name="getComponentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2499</id>
      <description>Return true if we dynamically created a new component instance during execution of this tag. This method is designed to be used by tags nested within this tag, and only returns useful results between the execution of doStartTag() and doEndTag() on this tag instance.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTagBase</class-interface>
      <method name="getCreated" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2500</id>
      <description>Return the rendererType property that selects the Renderer to be used for encoding this component, or null to ask the component to render itself directly. Subclasses must override this method to return the appropriate value.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTagBase</class-interface>
      <method name="getRendererType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2501</id>
      <description>Set the component identifier for the component corresponding to this tag instance. If the argument begins with jakarta.faces.component.UIViewRoot#UNIQUE_ID_PREFIX throw an IllegalArgumentException</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTagBase</class-interface>
      <method name="setId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2502</id>
      <description>if the argument is non-null and starts with jakarta.faces.component.UIViewRoot#UNIQUE_ID_PREFIX.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTagBase</class-interface>
      <method name="setId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2503</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>UIComponentTagBase</class-interface>
      <method name="UIComponentTagBase" return-type="UIComponentTagBase" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2504</id>
      <description>Create a new instance of the specified Validator class, and register it with the UIComponent instance associated with our most immediately surrounding UIComponentTagBase instance, if the UIComponent instance was created by this execution of the containing JSP page.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorELTag</class-interface>
      <method name="doStartTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2505</id>
      <description>if a JSP error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorELTag</class-interface>
      <method name="doStartTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2506</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorELTag</class-interface>
      <method name="ValidatorELTag" return-type="ValidatorELTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2507</id>
      <description>Create a new instance of the specified Validator class, and register it with the UIComponent instance associated with our most immediately surrounding UIComponentTag instance, if the UIComponent instance was created by this execution of the containing JSP page.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorTag</class-interface>
      <method name="doStartTag" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2508</id>
      <description>if a JSP error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorTag</class-interface>
      <method name="doStartTag" return-type="int">
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2509</id>
      <description>Release references to any acquired resources.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorTag</class-interface>
      <method name="release" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2510</id>
      <description>Set the expression that will be used to create a ValueExpression that references a backing bean property of the Validator instance to be created.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2511</id>
      <description>if a JSP error occurs</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorTag</class-interface>
      <method name="setBinding" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>JspException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2512</id>
      <description>Set the identifer of the Validator instance to be created.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorTag</class-interface>
      <method name="setValidatorId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:2513</id>
      <description />
      <package>jakarta.faces.webapp</package>
      <class-interface>ValidatorTag</class-interface>
      <method name="ValidatorTag" return-type="ValidatorTag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:49</id>
      <description>Instantiate and return a new UIComponent instance from the argument Resource. An algorithm semantically equivalent to the following must be followed to instantiate the UIComponent to return. Obtain a reference to the ViewDeclarationLanguage for this Application instance by calling ViewHandler#getViewDeclarationLanguage, passing the viewId found by calling jakarta.faces.component.UIViewRoot#getViewId on the jakarta.faces.component.UIViewRoot in the argument FacesContext. Obtain a reference to the composite component metadata for this composite component by calling ViewDeclarationLanguage#getComponentMetadata, passing the facesContext and componentResource arguments to this method. This version of JSF specification uses JavaBeans as the API to the component metadata. Determine if the component author declared a componentType for this component instance by obtaining the BeanDescriptor from the component metadata and calling its getValue() method, passing UIComponent#COMPOSITE_COMPONENT_TYPE_KEY as the argument. If non-null, the result must be a ValueExpression whose value is the component-type of the UIComponent to be created for this Resource component. Call through to #createComponent(java.lang.String) to create the component. Otherwise, determine if a script based component for this Resource can be found by calling ViewDeclarationLanguage#getScriptComponentResource. If the result is non-null, and is a script written in one of the languages listed in JSF.4.3 of the specification prose document, create a UIComponent instance from the script resource. Otherwise, let library-name be the return from calling Resource#getLibraryName on the argument componentResource and resource-name be the return from calling Resource#getResourceName on the argument componentResource. Create a fully qualified Java class name by removing any file extension from resource-name and let fqcn be library-name + "." + resource-name. If a class with the name of fqcn cannot be found, take no action and continue to the next step. If any of InstantiationException, IllegalAccessException, or ClassCastException are thrown, wrap the exception in a FacesException and re-throw it. If any other exception is thrown, log the exception and continue to the next step. If none of the previous steps have yielded a UIComponent instance, call #createComponent(java.lang.String) passing "jakarta.faces.NamingContainer" as the argument. Call UIComponent#setRendererType on the UIComponent instance, passing "jakarta.faces.Composite" as the argument. Store the argument Resource in the attributes Map of the UIComponent under the key, Resource#COMPONENT_RESOURCE_KEY. Store composite component metadata in the attributes Map of the UIComponent under the key, UIComponent#BEANINFO_KEY. Before the component instance is returned, it must be inspected for the presence of a jakarta.faces.event.ListenerFor annotation. If this annotation is present, the action listed in jakarta.faces.event.ListenerFor must be taken on the component, before it is returned from this method. A default implementation is provided that throws UnsupportedOperationException so that users that decorate Application can continue to function.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:97</id>
      <description>if any arguments except for sourceBaseType are null</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="publishEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:410</id>
      <description>Return the submittedValue value of this component. This method should only be used by the encodeBegin() and/or encodeEnd() methods of this component, or its corresponding Renderer. The action taken based on whether the value is null, empty, or non-null is determined based on the value of the jakarta.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULLcontext-param.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="getSubmittedValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:426</id>
      <description>Set the submittedValue value of this component. This method should only be used by the decode() and validate() method of this component, or its corresponding Renderer. The action taken based on whether the value is null, empty, or non-null is determined based on the value of the jakarta.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULLcontext-param.</description>
      <package>jakarta.faces.component</package>
      <class-interface>EditableValueHolder</class-interface>
      <method name="setSubmittedValue" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:443</id>
      <description>Perform any processing required to restore the state from the entries in the state Object. If the class that implements this interface has references to instances that also implement StateHolder (such as a UIComponent with event handlers, validators, etc.) this method must call the #restoreState method on all those instances as well. If the state argument is null, take no action and return.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHolder</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:444</id>
      <description>if context is null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>StateHolder</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:478</id>
      <description>Broadcast the specified FacesEvent to all registered event listeners who have expressed an interest in events of this type. Listeners are called in the order in which they were added. If the event is an instance of jakarta.faces.event.BehaviorEvent and the current component is the source of the event call jakarta.faces.event.BehaviorEvent#getBehavior to get the jakarta.faces.component.behavior.Behavior for the event. Call jakarta.faces.component.behavior.Behavior#broadcast(jakarta.faces.event.BehaviorEvent) on the Behavior instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:502</id>
      <description>Return a mutable List representing the child UIComponents associated with this component. The returned implementation must support all of the standard and optional List methods, plus support the following additional requirements: The List implementation must implement the java.io.Serializable interface. Any attempt to add a null must throw a NullPointerException Any attempt to add an object that does not implement UIComponent must throw a ClassCastException. Whenever a new child component is added, the parent property of the child must be set to this component instance. If the parent property of the child was already non-null, the child must first be removed from its previous parent (where it may have been either a child or a facet). Whenever an existing child component is removed, the parent property of the child must be set to null. After the child component has been added to the view, jakarta.faces.application.Application#publishEvent must be called, passing jakarta.faces.event.PostAddToViewEvent.class as the first argument and the newly added component as the second argument if any the following cases are true. jakarta.faces.context.FacesContext#getCurrentPhaseId returns jakarta.faces.event.PhaseId#RESTORE_VIEW and partial state saving is enabled. jakarta.faces.context.FacesContext#isPostback returns false and jakarta.faces.context.FacesContext#getCurrentPhaseId returns something other than jakarta.faces.event.PhaseId#RESTORE_VIEW</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getChildren" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:519</id>
      <description>This implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class. UIComponentBase provides the implementation of this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getListenersForEventClass" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:531</id>
      <description>Starting at this component in the View hierarchy, search for a component with a clientId equal to the argument clientId and, if found, call the ContextCallback#invokeContextCallback method on the argument callback, passing the current FacesContext and the found component as arguments. This method is similar to #findComponent but it does not support the leading UINamingContainer#getSeparatorChar syntax for searching from the root of the View. The default implementation will first check if this.getClientId() is equal to the argument clientId. If so, first call #pushComponentToEL, then call the ContextCallback#invokeContextCallback method on the argument callback, passing through the FacesContext argument and passing this as the component argument. Then call #popComponentFromEL. If an Exception is thrown by the callback, wrap it in a FacesException and re-throw it. Otherwise, return true. Otherwise, for each component returned by #getFacetsAndChildren, call invokeOnComponent() passing the arguments to this method, in order. The first time invokeOnComponent() returns true, abort traversing the rest of the Iterator and return true. When calling ContextCallback#invokeContextCallback the implementation of this method must guarantee that the state of the component passed to the callback correctly reflects the component's position in the View hierarchy with respect to any state found in the argument clientId. For example, an iterating component such as UIData will need to set its row index to correctly reflect the argument clientId before finding the appropriate child component backed by the correct row. When the callback returns, either normally or by throwing an Exception the implementation of this method must restore the state of the view to the way it was before invoking the callback. If none of the elements from #getFacetsAndChildren returned true from invokeOnComponent(), return false. Simple usage example to find a component by clientId. private UIComponent found = null; private void doFind(FacesContext context, String clientId) { context.getViewRoot().invokeOnComponent(context, clientId, new ContextCallback() { public void invokeContextCallback(FacesContext context, UIComponent component) { found = component; } }); }</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="invokeOnComponent" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.ContextCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:551</id>
      <description>Perform the component tree processing required by the Process Validations phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. If the rendered property of this UIComponent is false, skip further processing. Call #pushComponentToEL. Call the processValidators() method of all facets and children of this UIComponent, in the order determined by a call to getFacetsAndChildren(). After returning from calling getFacetsAndChildren() call UIComponent#popComponentFromEL.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:561</id>
      <description>Set the parent UIComponent of this UIComponent. If parent.isInView() returns true, calling this method will first cause a jakarta.faces.event.PreRemoveFromViewEvent to be published, for this node, and then the children of this node. Then, once the re-parenting has occurred, a jakarta.faces.event.PostAddToViewEvent will be published as well, first for this node, and then for the node's children, but only if any of the following conditions are true. jakarta.faces.context.FacesContext#getCurrentPhaseId returns jakarta.faces.event.PhaseId#RESTORE_VIEW and partial state saving is enabled. jakarta.faces.context.FacesContext#isPostback returns false and jakarta.faces.context.FacesContext#getCurrentPhaseId returns something other than jakarta.faces.event.PhaseId#RESTORE_VIEW This method must never be called by developers; a UIComponent's internal implementation will call it as components are added to or removed from a parent's child List or facet Map.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="setParent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:570</id>
      <description>This implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class. UIComponentBase provides the implementation of this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.ComponentSystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:573</id>
      <description>This implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class. UIComponentBase provides the implementation of this method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.ComponentSystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:577</id>
      <description>Broadcast the specified FacesEvent to all registered event listeners who have expressed an interest in events of this type. Listeners are called in the order in which they were added. If the event is an instance of jakarta.faces.event.BehaviorEvent and the current component is the source of the event call jakarta.faces.event.BehaviorEvent#getBehavior to get the jakarta.faces.component.behavior.Behavior for the event. Call jakarta.faces.component.behavior.Behavior#broadcast(jakarta.faces.event.BehaviorEvent) on the Behavior instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:598</id>
      <description>Return a mutable List representing the child UIComponents associated with this component. The returned implementation must support all of the standard and optional List methods, plus support the following additional requirements: The List implementation must implement the java.io.Serializable interface. Any attempt to add a null must throw a NullPointerException Any attempt to add an object that does not implement UIComponent must throw a ClassCastException. Whenever a new child component is added, the parent property of the child must be set to this component instance. If the parent property of the child was already non-null, the child must first be removed from its previous parent (where it may have been either a child or a facet). Whenever an existing child component is removed, the parent property of the child must be set to null. After the child component has been added to the view, jakarta.faces.application.Application#publishEvent must be called, passing jakarta.faces.event.PostAddToViewEvent.class as the first argument and the newly added component as the second argument if any the following cases are true. jakarta.faces.context.FacesContext#getCurrentPhaseId returns jakarta.faces.event.PhaseId#RESTORE_VIEW and partial state saving is enabled. jakarta.faces.context.FacesContext#isPostback returns false and jakarta.faces.context.FacesContext#getCurrentPhaseId returns something other than jakarta.faces.event.PhaseId#RESTORE_VIEW</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getChildren" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:628</id>
      <description>Perform the component tree processing required by the Process Validations phase of the request processing lifecycle for all facets of this component, all children of this component, and this component itself, as follows. If the rendered property of this UIComponent is false, skip further processing. Call #pushComponentToEL. Call the processValidators() method of all facets and children of this UIComponent, in the order determined by a call to getFacetsAndChildren(). After returning from calling getFacetsAndChildren() call UIComponent#popComponentFromEL.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="processValidators" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:642</id>
      <description>Set the parent UIComponent of this UIComponent. If parent.isInView() returns true, calling this method will first cause a jakarta.faces.event.PreRemoveFromViewEvent to be published, for this node, and then the children of this node. Then, once the re-parenting has occurred, a jakarta.faces.event.PostAddToViewEvent will be published as well, first for this node, and then for the node's children, but only if any of the following conditions are true. jakarta.faces.context.FacesContext#getCurrentPhaseId returns jakarta.faces.event.PhaseId#RESTORE_VIEW and partial state saving is enabled. jakarta.faces.context.FacesContext#isPostback returns false and jakarta.faces.context.FacesContext#getCurrentPhaseId returns something other than jakarta.faces.event.PhaseId#RESTORE_VIEW This method must never be called by developers; a UIComponent's internal implementation will call it as components are added to or removed from a parent's child List or facet Map.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="setParent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:694</id>
      <description>Set the zero relative index of the current row, or -1 to indicate that no row is currently selected, by implementing the following algorithm. It is possible to set the row index at a value for which the underlying data collection does not contain any row data. Therefore, callers may use the isRowAvailable() method to detect whether row data will be available for use by the getRowData() method. To support transient state among descendents, please consult the specification for #setRowStatePreserved, which details the requirements for setRowIndex() when the rowStatePreserved JavaBeans property is set to true. Save current state information for all descendant components (as described below). Store the new row index, and pass it on to the DataModel associated with this UIData instance. If the new rowIndex value is -1: If the var property is not null, remove the corresponding request scope attribute (if any). Reset the state information for all descendant components (as described below). If the new rowIndex value is not -1: If the var property is not null, call getRowData() and expose the resulting data object as a request scope attribute whose key is the var property value. Reset the state information for all descendant components (as described below). To save current state information for all descendant components, UIData must maintain per-row information for each descendant as follows: If the descendant is an instance of EditableValueHolder, save the state of its localValue property. If the descendant is an instance of EditableValueHolder, save the state of the localValueSet property. If the descendant is an instance of EditableValueHolder, save the state of the valid property. If the descendant is an instance of EditableValueHolder, save the state of the submittedValue property. To restore current state information for all descendant components, UIData must reference its previously stored information for the current rowIndex and call setters for each descendant as follows: If the descendant is an instance of EditableValueHolder, restore the value property. If the descendant is an instance of EditableValueHolder, restore the state of the localValueSet property. If the descendant is an instance of EditableValueHolder, restore the state of the valid property. If the descendant is an instance of EditableValueHolder, restore the state of the submittedValue property.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:710</id>
      <description>Generate an identifier for a component. The identifier will be prefixed with UNIQUE_ID_PREFIX, and will be unique within this component-container. Optionally, a unique seed value can be supplied by component creators which should be included in the generated unique id. If the prependId property has the value false, this method must call createUniqueId on the next ancestor UniqueIdVendor.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="createUniqueId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:714</id>
      <description>Returns the current value of the submitted property. The default value is false. See #setSubmitted for details. This property must be kept as a transient property using the UIComponent#getTransientStateHelper.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="isSubmitted" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:722</id>
      <description>If this UIForm instance (as opposed to other forms in the page) is experiencing a submit during this request processing lifecycle, this method must be called, with true as the argument, during the UIComponent#decode for this UIForm instance. If this UIForm instance is not experiencing a submit, this method must be called, with false as the argument, during the UIComponent#decode for this UIForm instance. The value of a UIForm's submitted property must not be saved as part of its state. This property must be kept as a transient property using the UIComponent#getTransientStateHelper.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="setSubmitted" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:790</id>
      <description>Return the Identifier of the component for which to render error messages. If this component is within the same NamingContainer as the target component, this must be the component identifier. Otherwise, it must be an absolute component identifier (starting with ":"). See the UIComponent#findComponent for more information.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="getFor" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:794</id>
      <description>Set the identifier of the component for which this component represents associated message(s) (if any). This property must be set before the message is displayed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIMessage</class-interface>
      <method name="setFor" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:826</id>
      <description>Gets the value of this UIComponent. If validation failed, as indicated by jakarta.faces.context.FacesContext#isValidationFailed returning true, always return the local value. Otherwise, first, consult the local value property of this component. If non-null return it. If null, see if we have a ValueExpression for the value property. If so, return the result of evaluating the property, otherwise return null. Note that because the specification for UIComponent#setValueBinding requires a call through to UIComponent#setValueExpression, legacy tags will continue to work.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:937</id>
      <description>The default implementation must call UIComponentBase#processRestoreState from within a try block. The try block must have a finally block that ensures that no FacesEvents remain in the event queue.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="processRestoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:966</id>
      <description>Gets the value of this UIComponent. If validation failed, as indicated by jakarta.faces.context.FacesContext#isValidationFailed returning true, always return the local value. Otherwise, first, consult the local value property of this component. If non-null return it. If null, see if we have a ValueExpression for the value property. If so, return the result of evaluating the property, otherwise return null. Note that because the specification for UIComponent#setValueBinding requires a call through to UIComponent#setValueExpression, legacy tags will continue to work.</description>
      <package>jakarta.faces.component</package>
      <class-interface>ValueHolder</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1156</id>
      <description>Return a mutable Map representing the session scope attributes for the current application. The returned Map must implement the entire contract for a modifiable map as described in the JavaDocs for java.util.Map. Modifications made in the Map must cause the corresponding changes in the set of session scope attributes. Particularly the clear(), remove(), put(), and get() operations must take the appropriate action on the underlying data structure. Accessing attributes via this Map must cause the creation of a session associated with the current request, if such a session does not already exist. For any of the Map methods that cause an element to be removed from the underlying data structure, the following action regarding managed-beans must be taken. If the element to be removed is a managed-bean, and it has one or more public no-argument void return methods annotated with javax.annotation.PreDestroy, each such method must be called before the element is removed from the underlying data structure. Elements that are not managed-beans, but do happen to have methods with that annotation must not have those methods called on removal. Any exception thrown by the PreDestroy annotated methods must by caught and not rethrown. The exception may be logged. Servlet: This must be the set of attributes available via the javax.servlet.http.HttpSession methods getAttribute(), getAttributeNames(), removeAttribute(), and setAttribute().</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getSessionMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1198</id>
      <description>The default behavior of this method is to call ExternalContext#encodePartialActionURL(String) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="encodePartialActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1245</id>
      <description>The default behavior of this method is to call ExternalContext#getSessionMap() on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getSessionMap" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1288</id>
      <description>Return the maximum severity level recorded on any jakarta.faces.application.FacesMessages that has been queued, whether or not they are associated with any specific jakarta.faces.component.UIComponent. If no such messages have been queued, return null.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getMaximumSeverity" return-type="jakarta.faces.application.FacesMessage.FacesMessage.Severity" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1336</id>
      <description>Set the root component that is associated with this request. This method can be called by the application handler (or a class that the handler calls), during the Invoke Application phase of the request processing lifecycle and during the Restore View phase of the request processing lifecycle (especially when a new root component is created). In the present version of the specification, implementations are not required to enforce this restriction, though a future version of the specification may require enforcement. If the current UIViewRoot is non-null, and calling equals() on the argument root, passing the current UIViewRoot returns false, the clear method must be called on the Map returned from UIViewRoot#getViewMap.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setViewRoot" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1500</id>
      <description>Write a URI attribute name and corresponding value, after converting that text to a String (if necessary), and after performing any encoding or escaping appropriate to the markup language being rendered. When rendering in a WWW environment, the escaping conventions established in the W3C URI spec document must be followed. In particular, spaces ' ' must be encoded as %20 and not the plus character '+'. This method may only be called after a call to startElement(), and before the opened element has been closed.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeURIAttribute" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1876</id>
      <description>Return true if this FacesListener is an instance of a the appropriate listener class that this event supports. The default implementation returns true if the listener is a ComponentSystemEventListener.</description>
      <package>jakarta.faces.event</package>
      <class-interface>SystemEvent</class-interface>
      <method name="isAppropriateListener" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2197</id>
      <description>Perform any processing required to restore the state from the entries in the state Object. If the class that implements this interface has references to instances that also implement StateHolder (such as a UIComponent with event handlers, validators, etc.) this method must call the #restoreState method on all those instances as well. If the state argument is null, take no action and return.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2198</id>
      <description>if context is null.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>MethodExpressionValidator</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2241</id>
      <description>Restore the state of the view with information in the request. The default implementation must perform the following algorithm or its semantic equivalent. As in the case of restore view on an initial request, the view metadata must be restored and properly handled as well. Obtain the ViewMetadata for the current viewId, and from that call ViewMetadata#createMetadataView. Store the resultant UIViewRoot in the FacesContext. Obtain the state of the UIViewRoot from the state Object returned from jakarta.faces.render.ResponseStateManager#getState and pass that to UIViewRoot#restoreViewScopeState. Build the view from the markup. For all components in the view that do not have an explicitly assigned id in the markup, the values of those ids must be the same as on an initial request for this view. This view will not contain any components programmatically added during the previous lifecycle run, and it will contain components that were programmatically deleted on the previous lifecycle run. Both of these cases must be handled. Call jakarta.faces.render.ResponseStateManager#getState to obtain the data structure returned from the previous call to #saveView. Visit the tree using jakarta.faces.component.UIComponent#visitTree. For each node, call jakarta.faces.component.UIComponent#restoreState, passing the state saved corresponding to the current client id. Ensure that any programmatically deleted components are removed. Ensure any programmatically added components are added. The implementation must ensure that the jakarta.faces.component.UIComponent#restoreState method is called for each node in the tree, except for those that were programmatically deleted on the previous run through the lifecycle.</description>
      <package>jakarta.faces.view</package>
      <class-interface>StateManagementStrategy</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2244</id>
      <description>Take any actions specific to this VDL implementation to cause the argument UIViewRoot which must have been created via a call to #createView, to be populated with children. The Facelets implementation must insure that markup comprising the view must be executed, with the jakarta.faces.component.UIComponent instances in the view being encountered in the same depth-first order as in other lifecycle methods defined on UIComponent, and added to the view (but not rendered) during the traversal. The runtime must guarantee that the view must be fully populated before any of the following happen. The jakarta.faces.event.PhaseListener#afterPhase method of any PhaseListeners attached to the application is called The jakarta.faces.component.UIViewRoot phase listener installed via jakarta.faces.component.UIViewRoot#setAfterPhaseListener or jakarta.faces.component.UIViewRoot#addPhaseListener are called. If the root is already populated with children, the view must still be re-built, but care must be taken to ensure that the existing components are correctly paired up with their VDL counterparts in the VDL page. Also, any system events that would normally be generated during the adding or removing of components from the view must be temporarily disabled during the creation of the view and then re-enabled when the view has been built.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="buildView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2270</id>
      <description>Return the ViewDeclarationLanguage instance suitable for handling the VDL contained in the page referenced by the argument viewId. The default implementation must return a valid ViewDeclarationLanguage instance for views written in either JSP, Faces XML Views, or Facelets for JSF 2.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageFactory</class-interface>
      <method name="getViewDeclarationLanguage" return-type="jakarta.faces.view.ViewDeclarationLanguage">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2300</id>
      <description>Invoke the apply() method on this instance's TagHandler#nextHandler.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>DelegatingMetaTagHandler</class-interface>
      <method name="applyNextHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2514</id>
      <description>if called after the first request to the jakarta.faces.webapp.FacesServlet has been serviced.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addELResolver" return-type="void">
        <parameters>
          <parameter>ELResolver</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2515</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="ConfigurableNavigationHandlerWrapper" return-type="ConfigurableNavigationHandlerWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2516</id>
      <description>Return the NavigationCase representing the navigation that would be taken had NavigationHandler#handleNavigation been called with the same arguments or null if there is no such case.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="getNavigationCase" return-type="jakarta.faces.application.NavigationCase">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2517</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="getNavigationCase" return-type="jakarta.faces.application.NavigationCase">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2518</id>
      <description>Return a Map where the keys are values and the values are Set where each element in the Set is a NavigationCase that applies to that . The implementation must support live modifications to this Map.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="getNavigationCases" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2519</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.ConfigurableNavigationHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2520</id>
      <description>Perform navigation processing based on the state information in the specified FacesContext, plus the outcome string returned by an executed application action. If the implementation class also extends ConfigurableNavigationHandler, the implementation must guarantee that the logic used in a call to ConfigurableNavigationHandler#getNavigationCase is used in this method to determine the correct navigation. This method must set the render targets (used in partial rendering) to render all invoking jakarta.faces.context.PartialViewContext#setRenderAll) if the view identifier has changed as the result of an application action (to take into account Ajax requests).</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2521</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2523</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="performNavigation" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2525</id>
      <description>if resourceId is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createResourceFromId" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2526</id>
      <description>The default behavior of this method is to call ResourceHandler#createResourceFromId(String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="createResourceFromId" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2527</id>
      <description>The default behavior of this method is to call Resource#getContentType() on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2528</id>
      <description>The default behavior of this method is to call Resource#getLibraryName() on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getLibraryName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2529</id>
      <description>The default behavior of this method is to call Resource#getResourceName() on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="getResourceName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2530</id>
      <description>The default behavior of this method is to call Resource#setContentType(String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="setContentType" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2531</id>
      <description>The default behavior of this method is to call Resource#setLibraryName(String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="setLibraryName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2532</id>
      <description>The default behavior of this method is to call Resource#setResourceName(String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceWrapper</class-interface>
      <method name="setResourceName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2534</id>
      <description>The default behavior of this method is to call ViewHandler#deriveLogicalViewId(jakarta.faces.context.FacesContext, String) on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="deriveLogicalViewId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2535</id>
      <description>Return the value currently associated with the specified key if any.</description>
      <package>jakarta.faces.component</package>
      <class-interface>TransientStateHelper</class-interface>
      <method name="getTransient" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2536</id>
      <description>Performs the same logic as #getTransient } but if no value is found, this will return the specified defaultValue</description>
      <package>jakarta.faces.component</package>
      <class-interface>TransientStateHelper</class-interface>
      <method name="getTransient" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2537</id>
      <description>Return the previously stored value and store the specified key/value pair. This is intended to store data that would otherwise reside in an instance variable on the component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>TransientStateHelper</class-interface>
      <method name="putTransient" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2538</id>
      <description>Restore the "transient state" using the object passed as state. If the state argument is null clear any previous transient state if any and return.</description>
      <package>jakarta.faces.component</package>
      <class-interface>TransientStateHolder</class-interface>
      <method name="restoreTransientState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2539</id>
      <description>Return the object containing related "transient states". that could be used later to restore the "transient state".</description>
      <package>jakarta.faces.component</package>
      <class-interface>TransientStateHolder</class-interface>
      <method name="saveTransientState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2540</id>
      <description>Return the TransientStateHelper instance for this UIComponent instance. The default implementation simply calls through to #getTransientStateHelper(boolean) passing true as the argument.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getTransientStateHelper" return-type="jakarta.faces.component.TransientStateHelper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2541</id>
      <description>Return the TransientStateHelper instance for this UIComponent instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getTransientStateHelper" return-type="jakarta.faces.component.TransientStateHelper">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2542</id>
      <description>For components that need to support the concept of transient state, this method will restore any state saved on a prior call to #saveTransientState.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="restoreTransientState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2543</id>
      <description>For components that need to support the concept of transient state, this method will save any state that is known to be transient in nature.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="saveTransientState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2544</id>
      <description>Return the SystemEventListener instances registered on this UIComponent instance that are interested in events of type eventClass.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getListenersForEventClass" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2545</id>
      <description>if argument eventClass is null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getListenersForEventClass" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2546</id>
      <description>Install the listener instance referenced by argument componentListener as a listener for events of type eventClass originating from this specific instance of UIComponent. The default implementation creates an inner SystemEventListener instance that wraps argument componentListener as the listener argument. This inner class must call through to the argument componentListener in its implementation of SystemEventListener#processEvent and its implementation of SystemEventListener#isListenerForSource must return true if the instance class of this UIComponent is assignable from the argument to isListenerForSource.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.ComponentSystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2547</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.ComponentSystemEventListener</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2548</id>
      <description>Remove the listener instance referenced by argument componentListener as a listener for events of type eventClass originating from this specific instance of UIComponent. When doing the comparison to determine if an existing listener is equal to the argument componentListener (and thus must be removed), the equals() method on the existing listener must be invoked, passing the argument componentListener, rather than the other way around.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.ComponentSystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2549</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.ComponentSystemEventListener</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2550</id>
      <description>Return the value of the rowStatePreserved JavaBeans property. See #setRowStatePreserved.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="isRowStatePreserved" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2551</id>
      <description>Override the base class method to take special action if the method is being invoked when StateManager#IS_BUILDING_INITIAL_STATE is true and the rowStatePreserved JavaBeans property for this instance is true. The additional action taken is to traverse the descendents and save their state without regard to any particular row value.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="markInitialState" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2552</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="restoreState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2553</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="saveState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2554</id>
      <description>If this property is set to true, the UIData must take steps to ensure that modifications to its iterated children will be preserved on a per-row basis. This allows applications to modify component properties, such as the style-class, for a specific row, rather than having such modifications apply to all rows. To accomplish this, UIData must call StateHolder#saveState and TransientStateHolder#saveTransientState on its children to capture their state on exiting each row. When re-entering the row, StateHolder#restoreState and TransientStateHolder#restoreTransientState must be called in order to reinitialize the children to the correct state for the new row. All of this action must take place during the processing of #setRowIndex. Users should consider enabling this feature for cases where it is necessary to modify properties of UIData's children in a row-specific way. Note, however, that row-level state saving/restoring does add overhead. As such, this feature should be used judiciously.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="setRowStatePreserved" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2555</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="addActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2556</id>
      <description>Enable the method invocation specified by this component instance to return a value that performs navigation, similar in spirit to UICommand#broadcast. Take no action and return immediately if any of the following conditions are true. The response has already been marked as complete. The current UIViewRoot is different from the event's source's UIViewRoot. Save a local reference to the viewId of the current UIViewRoot. For discussion, let this reference be viewIdBeforeAction. Obtain the ActionListener from the jakarta.faces.application.Application. Wrap the current FacesContext in an implementation of jakarta.faces.context.FacesContextWrapper that overrides the FacesContext#renderResponse method such that it takes no action. Set the current FacesContext to be the FacesContextWrapper instance. Make it so a call to #isProcessingBroadcast on the current FacesContext will return true. This is necessary because the jakarta.faces.application.NavigationHandler will call this method to determine if the navigation is happening as the result of a UIViewAction. Invoke ActionListener#processAction. In a finally block, restore the original FacesContext, make it so a call to #isProcessingBroadcast on the current context will return false and discard the wrapper. If the response has been marked as complete during the invocation of processAction(), take no further action and return. Otherwise, compare viewIdBeforeAction with the viewId of the UIViewRoot on the FacesContext after the invocation of processAction(). If the two viewIds are the same and no more UIViewAction events have been queued by a call to #decode, call FacesContext#renderResponse and return. It is possible to detect the case where no more UIViewAction events have been queued because the number of such events queued has been noted in the specification for #decode. Otherwise, execute the lifecycle on the new UIViewRoot.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2557</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2558</id>
      <description>if the implementation class of this FacesEvent is not supported by this component</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2559</id>
      <description>if event is null</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="broadcast" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2561</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="getAction" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2562</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="getActionExpression" return-type="MethodExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2563</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="getActionListener" return-type="jakarta.faces.el.MethodBinding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2564</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="getActionListeners" return-type="jakarta.faces.event.ActionListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2565</id>
      <description>Return the identifier of the component family to which this component belongs. This identifier, in conjunction with the value of the rendererType property, may be used to select the appropriate Renderer for this component instance.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="getFamily" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2566</id>
      <description>Returns the name of the lifecycle phase in which the action is to be queued.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="getPhase" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2567</id>
      <description>If the value of the component's immediate attribute is true, the action will be invoked during the Apply Request Values JSF lifecycle phase. Otherwise, the action will be invoked during the Invoke Application phase, the default behavior. The phase can be set explicitly in the phase attribute, which takes precedence over the immediate attribute.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="isImmediate" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2568</id>
      <description>If true this component will operate on postback.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="isOnPostback" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2569</id>
      <description>Returns true if the current request processing lifecycle is in the midst of processing the broadcast of an event queued during a call to #decode. The implementation of #broadcast is responsible for ensuring that calls to this method accurately reflect this fact.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="isProcessingBroadcast" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2570</id>
      <description>Return true if this component should take the actions specified in the #decode method.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="isRendered" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2571</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="removeActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2572</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="setAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2573</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="setActionExpression" return-type="void">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2574</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="setActionListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.MethodBinding</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2575</id>
      <description />
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="setImmediate" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2576</id>
      <description>Controls whether or not this component operates on postback.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="setOnPostback" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2577</id>
      <description>Attempt to set the lifecycle phase in which this instance will queue its ActionEvent. Pass the argument phase to PhaseId#phaseIdValueOf. If the result is not one of the following values, FacesException must be thrown. PhaseId#APPLY_REQUEST_VALUESPhaseId#PROCESS_VALIDATIONSPhaseId#UPDATE_MODEL_VALUESPhaseId#INVOKE_APPLICATION If set, this value takes precedence over the immediate flag.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="setPhase" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2578</id>
      <description>Sets the if property of this component.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="setRendered" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2579</id>
      <description>Create a new UIViewAction instance with default property values.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="UIViewAction" return-type="UIViewAction" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2580</id>
      <description>Restore ViewScope state. This is needed to allow the use of view scoped beans for EL-expressions in the template from which the component tree is built. For example: .</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="restoreViewScopeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2581</id>
      <description>Return the name of the container context for this application. Servlet: Return the result of calling getContextPath() on the ServletContext instance for this application. It is valid to call this method during application startup or shutdown. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getApplicationContextPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2582</id>
      <description>Returns the maximum time interval, in seconds, that the servlet container will keep this session open between client accesses. After this interval, the servlet container will invalidate the session. The maximum time interval can be set with the #setSessionMaxInactiveInterval method. A return value of zero or less indicates that the session will never timeout. Servlet: This must return the result of calling getMaxInactiveInterval on the underlying javax.servlet.http.HttpServletRequest instance. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getSessionMaxInactiveInterval" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2583</id>
      <description>Returns a boolean indicating whether this request was made using a secure channel, such as HTTPS. Servlet: This must return the result of calling isSecure on the underlying javax.servlet.http.HttpServletRequest instance. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="isSecure" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2584</id>
      <description>Specifies the time, in seconds, between client requests before the servlet container will invalidate this session. An interval value of zero or less indicates that the session should never timeout. Servlet: This must call setMaxInactiveInterval on the underlying javax.servlet.http.HttpServletRequest instance. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setSessionMaxInactiveInterval" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2585</id>
      <description>The default behavior of this method is to call ExternalContext#getApplicationContextPath on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getApplicationContextPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2586</id>
      <description>The default behavior of this method is to call ExternalContext#getSessionMaxInactiveInterval() on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getSessionMaxInactiveInterval" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2587</id>
      <description>The default behavior of this method is to call ExternalContext#isSecure on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="isSecure" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2588</id>
      <description>The default behavior of this method is to call ExternalContext#setSessionMaxInactiveInterval(int) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setSessionMaxInactiveInterval" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2589</id>
      <description>Return a flag indicating if the resources associated with this FacesContext instance have been released.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="isReleased" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2590</id>
      <description>The default behavior of this method is to call FacesContext#isReleased on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="isReleased" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2591</id>
      <description>The default behavior of this method is to call PartialViewContext#setPartialRequest(boolean) on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="setPartialRequest" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2592</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>ActionListenerWrapper</class-interface>
      <method name="ActionListenerWrapper" return-type="ActionListenerWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2593</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionListenerWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.event.ActionListener" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2594</id>
      <description>Invoked when the action described by the specified ActionEvent occurs.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionListenerWrapper</class-interface>
      <method name="processAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2595</id>
      <description>Signal the JavaServer Faces implementation that no further processing on the current event should be performed</description>
      <package>jakarta.faces.event</package>
      <class-interface>ActionListenerWrapper</class-interface>
      <method name="processAction" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ActionEvent</parameter>
        </parameters>
        <throw>jakarta.faces.event.AbortProcessingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2596</id>
      <description>Return true if the argument FacesListener is an instance of the appropriate listener class that this event supports. The default implementation returns true if the listener is a ComponentSystemEventListener or if super.isAppropriateListener() returns true.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ComponentSystemEvent</class-interface>
      <method name="isAppropriateListener" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2597</id>
      <description>Return the name of this phase.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseId</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2598</id>
      <description>Return a PhaseId representation of the arcument phase.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseId</class-interface>
      <method name="phaseIdValueOf" return-type="jakarta.faces.event.PhaseId">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2599</id>
      <description>if argument phase is null.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseId</class-interface>
      <method name="phaseIdValueOf" return-type="jakarta.faces.event.PhaseId">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>&lt;code&gt;NullPointerException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2600</id>
      <description>if the PhaseId corresponding to the argument phase cannot be found.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PhaseId</class-interface>
      <method name="phaseIdValueOf" return-type="jakarta.faces.event.PhaseId">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>&lt;code&gt;FacesException&lt;/code&gt;</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2601</id>
      <description>Returns a non-null String that can be used to identify this view declaration language. The default implementation returns the fully qualified class name of the view declaration language implementation. Subclasses may override to provide a more meaningful id.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2603</id>
      <description>Take any actions specific to this VDL implementation to cause the argument UIViewRoot which must have been created via a call to #createView, to be populated with children. The Facelets implementation must insure that markup comprising the view must be executed, with the jakarta.faces.component.UIComponent instances in the view being encountered in the same depth-first order as in other lifecycle methods defined on UIComponent, and added to the view (but not rendered) during the traversal. The runtime must guarantee that the view must be fully populated before any of the following happen. The jakarta.faces.event.PhaseListener#afterPhase method of any PhaseListeners attached to the application is called The jakarta.faces.component.UIViewRoot phase listener installed via jakarta.faces.component.UIViewRoot#setAfterPhaseListener or jakarta.faces.component.UIViewRoot#addPhaseListener are called. If the root is already populated with children, the view must still be re-built, but care must be taken to ensure that the existing components are correctly paired up with their VDL counterparts in the VDL page. Also, any system events that would normally be generated during the adding or removing of components from the view must be temporarily disabled during the creation of the view and then re-enabled when the view has been built.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="buildView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2604</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="buildView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2606</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="createView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2608</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getComponentMetadata" return-type="java.beans.BeanInfo">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2609</id>
      <description>if there is an error in obtaining the metadata</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getComponentMetadata" return-type="java.beans.BeanInfo">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2610</id>
      <description>if this is a JSP VDL implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getComponentMetadata" return-type="java.beans.BeanInfo">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.UnsupportedOperationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2611</id>
      <description>Returns a non-null String that can be used to identify this view declaration language. The default implementation returns the fully qualified class name of the view declaration language implementation. Subclasses may override to provide a more meaningful id.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2613</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getScriptComponentResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2614</id>
      <description>if there is an error in obtaining the script component resource</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getScriptComponentResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2615</id>
      <description>if this is a JSP VDL implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getScriptComponentResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
        <throw>java.lang.UnsupportedOperationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2616</id>
      <description>For implementations that want to control the implementation of state saving and restoring, the StateManagementStrategy allows them to do so. Returning null indicates that the implementation wishes the runtime to handle the state saving and restoring. Implementations that provide the VDL for Facelets for JSF 2.0 and later must return non-null from this method.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getStateManagementStrategy" return-type="jakarta.faces.view.StateManagementStrategy">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2618</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getViewMetadata" return-type="jakarta.faces.view.ViewMetadata">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2619</id>
      <description>if there is an error in obtaining the metadata</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getViewMetadata" return-type="jakarta.faces.view.ViewMetadata">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2620</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.view.ViewDeclarationLanguage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2622</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2623</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2625</id>
      <description>if any of the arguments are null</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2626</id>
      <description>Assuming the component metadata for argument topLevelComponent has been made available by an earlier call to ViewDeclarationLanguage#getComponentMetadata, leverage the component metadata for the purpose of re-targeting attached objects from the top level composite component to the individual AttachedObjectTarget instances inside the composite component. This method must be called by the ViewDeclarationLanguage implementation when creating the UIComponent tree when a composite component usage is encountered. An algorithm semantically equivalent to the following must be implemented. Obtain the metadata for the composite component. Currently this entails getting the value of the UIComponent#BEANINFO_KEY component attribute, which will be an instance of BeanInfo. If the metadata cannot be found, log an error message and return. Get the BeanDescriptor from the BeanInfo. Get the value of the AttachedObjectTarget#ATTACHED_OBJECT_TARGETS_KEY from the BeanDescriptor's getValue() method. This will be a List&lt;AttachedObjectTarget&gt;. Let this be targetList. For each curHandler entry in the argument handlers Let forAttributeValue be the return from AttachedObjectHandler#getFor. For each curTarget entry in targetList, the first of the following items that causes a match will take this action: For each UIComponent in the list returned from curTarget.getTargets(), call curHandler.applyAttachedObject(), passing the FacesContext and the UIComponent. and cause this inner loop to terminate. If curHandler is an instance of ActionSource2AttachedObjectHandler and curTarget is an instance of ActionSource2AttachedObjectTarget, and curTarget.getName() is equal to curTargetName, consider it a match. If curHandler is an instance of EditableValueHolderAttachedObjectHandler and curTarget is an instance of EditableValueHolderAttachedObjectTarget, and curTarget.getName() is equal to curTargetName, consider it a match. If curHandler is an instance of ValueHolderAttachedObjectHandler and curTarget is an instance of ValueHolderAttachedObjectTarget, and curTarget.getName() is equal to curTargetName, consider it a match. If curHandler is an instance of BehaviorHolderAttachedObjectHandler and curTarget is an instance of BehaviorHolderAttachedObjectTarget, and either of the following conditions are true, curHandler.getEventName() is not null and is equal to curTargetName. curHandler.getEventName() is null and curTarget.isDefaultEvent() is true. consider it a match. The implementation must support retargeting attached objects from the top level compsite component to targets that are composite and non-composite components. An implementation is provided that will throw UnsupportedOperationException. A Faces implementation compliant with version 2.0 and beyond of the specification must override this method.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="retargetAttachedObjects" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2627</id>
      <description>if any of the arguments are null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="retargetAttachedObjects" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.util.List</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2628</id>
      <description>Assuming the component metadata for argument topLevelComponent has been made available by an earlier call to ViewDeclarationLanguage#getComponentMetadata, leverage the component metadata for the purpose of re-targeting any method expressions from the top level component to the appropriate inner component. For each attribute that is a MethodExpression (as indicated by the presence of a "method-signature" attribute and the absence of a "type" attribute), the following action must be taken: Get the value of the targets attribute. If the value is a ValueExpression evaluate it. If there is no targets attribute, let the name of the metadata element be the evaluated value of the targets attribute. Interpret targets as a space (not tab) separated list of ids. For each entry in the list: Find the inner component of the topLevelComponent with the id equal to the current list entry. For discussion, this component is called target. If not found, log and error and continue to the next attribute. For discussion the declared name of the attribute is called name. In the attributes map of the topLevelComponent, look up the entry under the key name. Assume the result is a ValueExpression. For discussion, this is attributeValueExpression. If not found, log an error and continue to the next attribute. If name is equal to the string "action", or "actionListener" without the quotes, assume target is an jakarta.faces.component.ActionSource2. If name is equal to the string "validator", or "valueChangeListener" without the quotes, assume target is an jakarta.faces.component.EditableValueHolder. Call getExpressionString() on the attributeValueExpression and use that string to create a MethodExpression of the appropriate signature for name. If name is not equal to any of the previously listed strings, call getExpressionString() on the attributeValueExpression and use that string to create a MethodExpression where the signature is created based on the value of the "method-signature" attribute of the tag. Let the resultant MethodExpression be called attributeMethodExpression for discussion. If name is equal to the string "action" without the quotes, call jakarta.faces.component.ActionSource2#setActionExpression on target, passing attributeMethodExpression. If name is equal to the string "actionListener" without the quotes, call jakarta.faces.component.ActionSource#addActionListener on target, passing attributeMethodExpression wrapped in a jakarta.faces.event.MethodExpressionActionListener. If name is equal to the string "validator" without the quotes, call jakarta.faces.component.EditableValueHolder#addValidator on target, passing attributeMethodExpression wrapped in a jakarta.faces.validator.MethodExpressionValidator. If name is equal to the string "valueChangeListener" without the quotes, call jakarta.faces.component.EditableValueHolder#addValueChangeListener on target, passing attributeMethodExpression wrapped in a jakarta.faces.event.MethodExpressionValueChangeListener. Otherwise, assume that the MethodExpression should be placed in the components attribute set. The runtme must create the MethodExpression instance based on the value of the "method-signature" attribute. An implementation is provided that will throw UnsupportedOperationException. A Faces implementation compliant with version 2.0 and beyond of the specification must override this method.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="retargetMethodExpressions" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2629</id>
      <description>if context or topLevelComponent is null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="retargetMethodExpressions" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2630</id>
      <description />
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="ViewDeclarationLanguageWrapper" return-type="ViewDeclarationLanguageWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2633</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Facelet</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2635</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Facelet</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>jakarta.faces.view.facelets.FaceletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2636</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Facelet</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>ELException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2637</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Facelet</class-interface>
      <method name="Facelet" return-type="Facelet" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2638</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="FaceletCache" return-type="FaceletCache" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2639</id>
      <description>Returns a cached Facelet instance. If no instance is available, it will be created using the Facelet MemberFactory and stored in the cache.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="getFacelet" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2640</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="getFacelet" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2641</id>
      <description>if argument url is null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="getFacelet" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2642</id>
      <description>Returns a cached View Metadata Facelet instance. If no instance is available, it will be created using the View Metadata Facelet MemberFactory and stored in the cache.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="getViewMetadataFacelet" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2643</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="getViewMetadataFacelet" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2644</id>
      <description>if argument url is null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="getViewMetadataFacelet" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2645</id>
      <description>Determines whether a cached Facelet instance exists for this URL. Returns true if a cached instance exists, false otherwise</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="isFaceletCached" return-type="boolean">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2646</id>
      <description>if argument url is null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="isFaceletCached" return-type="boolean">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2647</id>
      <description>Determines whether a cached View Metadata Facelet instance exists for this URL. Returns true if a cached instance exists, false otherwise</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="isViewMetadataFaceletCached" return-type="boolean">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2648</id>
      <description>if argument url is null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache</class-interface>
      <method name="isViewMetadataFaceletCached" return-type="boolean">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2649</id>
      <description>Create a Facelet or View Metadata Facelet (depending on the type of factory this is) for the argument URL.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache.MemberFactory</class-interface>
      <method name="newInstance" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2650</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache.MemberFactory</class-interface>
      <method name="newInstance" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2651</id>
      <description>if argument key is null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCache.MemberFactory</class-interface>
      <method name="newInstance" return-type="java.lang.Object">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2652</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCacheFactory</class-interface>
      <method name="FaceletCacheFactory" return-type="FaceletCacheFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2653</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCacheFactory</class-interface>
      <method name="getFaceletCache" return-type="jakarta.faces.view.facelets.FaceletCache" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2654</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletCacheFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.view.facelets.FaceletCacheFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:151</id>
      <description>The default behavior of this method is to call Application#createComponent(jakarta.faces.el.ValueBinding, jakarta.faces.context.FacesContext, String) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:152</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.el.ValueBinding</parameter>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:160</id>
      <description>The default behavior of this method is to call Application#createMethodBinding(String, Class[]) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createMethodBinding" return-type="jakarta.faces.el.MethodBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:161</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="createMethodBinding" return-type="jakarta.faces.el.MethodBinding">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
        <throw>jakarta.faces.el.ReferenceSyntaxException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:166</id>
      <description>The default behavior of this method is to call Application#evaluateExpressionGet(jakarta.faces.context.FacesContext, String, Class) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="evaluateExpressionGet" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:167</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="evaluateExpressionGet" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>ELException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:182</id>
      <description>The default behavior of this method is to call Application#getPropertyResolver on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getPropertyResolver" return-type="jakarta.faces.el.PropertyResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:188</id>
      <description>The default behavior of this method is to call Application#getVariableResolver on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getVariableResolver" return-type="jakarta.faces.el.VariableResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:199</id>
      <description>The default behavior of this method is to call Application#setPropertyResolver(jakarta.faces.el.PropertyResolver) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setPropertyResolver" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.PropertyResolver</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>JSF:JAVADOC:203</id>
      <description>The default behavior of this method is to call Application#setVariableResolver(jakarta.faces.el.VariableResolver) on the wrapped Application object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setVariableResolver" return-type="void">
        <parameters>
          <parameter>jakarta.faces.el.VariableResolver</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2114</id>
      <description>The implementation must inspect the current request and return an Object representing the tree structure and component state passed in to a previous invocation of #writeState(jakarta.faces.context.FacesContext,java.lang.Object). If the state saving method for this application is jakarta.faces.application.StateManager#STATE_SAVING_METHOD_CLIENT, writeState() will have encrypted the state in a tamper evident manner. If the state fails to decrypt, or decrypts but indicates evidence of tampering, a jakarta.faces.application.ProtectedViewException must be thrown. For backwards compatability with existing ResponseStateManager implementations, the default implementation of this method calls #getTreeStructureToRestore and #getComponentStateToRestore and creates and returns a two element Object array with element zero containing the structure property and element one containing the state property of the SerializedView.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="getState" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2120</id>
      <description>if the state argument is not an array of length 2.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2560</id>
      <description>Override behavior from the superclass to queue an ActionEvent that may result in the invocation of the action or any actionListeners that may be associated with this instance. Take no action if any of the following conditions are true: The current request is a postback and the instance has been configured to not operate on postback. See #isOnPostback. The condition stated in the if property evaluates to false. See #isRendered. Instantiate an ActionEvent, passing this component instance as the source. Set the phaseId property of the ActionEvent as follows. If this component instance has been configured with a specific lifecycle phase with a call to #setPhase use that as the phaseId If the value of the immediate property is true, use PhaseId#APPLY_REQUEST_VALUES. Otherwise, use PhaseId#INVOKE_APPLICATION. Queue the event with a call to #queueEvent. Keep track of the number of events that are queued in this way on this run through the lifecycle. This information is necessary during processing in #broadcast.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewAction</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2678</id>
      <description>if called after the first request to the jakarta.faces.webapp.FacesServlet has been serviced.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="addELResolver" return-type="void">
        <parameters>
          <parameter>ELResolver</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2679</id>
      <description>if this method is called after at least one request has been processed by the Lifecycle instance for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setResourceHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ResourceHandler</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2680</id>
      <description>if resourceHandler is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setResourceHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ResourceHandler</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2681</id>
      <description>if this method is called after at least one request has been processed by the Lifecycle instance for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setStateManager" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.StateManager</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2682</id>
      <description>if manager is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setStateManager" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.StateManager</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2683</id>
      <description>if this method is called after at least one request has been processed by the Lifecycle instance for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setViewHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ViewHandler</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2684</id>
      <description>if manager is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setViewHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.application.ViewHandler</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2685</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ProtectedViewException</class-interface>
      <method name="ProtectedViewException" return-type="ProtectedViewException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2686</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ProtectedViewException</class-interface>
      <method name="ProtectedViewException" return-type="ProtectedViewException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2687</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ProtectedViewException</class-interface>
      <method name="ProtectedViewException" return-type="ProtectedViewException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2688</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>ProtectedViewException</class-interface>
      <method name="ProtectedViewException" return-type="ProtectedViewException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2692</id>
      <description>The default behavior of this method is to call ViewHandler#addProtectedView on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="addProtectedView" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2693</id>
      <description>The default behavior of this method is to call ViewHandler#getProtectedViewsUnmodifiable on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="getProtectedViewsUnmodifiable" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2694</id>
      <description>The default behavior of this method is to call ViewHandler#removeProtectedView on the wrapped ViewHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandlerWrapper</class-interface>
      <method name="removeProtectedView" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2695</id>
      <description>Before calling the corresponding method on the superclass, verify that there is a current component so that EL expressions that start with #{component} or #{cc} operate as expected.</description>
      <package>jakarta.faces.event</package>
      <class-interface>ComponentSystemEvent</class-interface>
      <method name="processListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.FacesListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2700</id>
      <description>Returns the delay value, or null if no value was set.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="getDelay" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2701</id>
      <description>If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is 300. If the value of delay is the literal string 'none' without the quotes, no delay is used.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setDelay" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2702</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>PostKeepFlashValueEvent</class-interface>
      <method name="getKey" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2703</id>
      <description>Instantiate a new PostKeepFlashValueEvent that indicates the argument key was just kept in the flash. If the argument is null, the literal Flash#NULL_VALUE must be passed to the superclass constructor.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostKeepFlashValueEvent</class-interface>
      <method name="PostKeepFlashValueEvent" return-type="PostKeepFlashValueEvent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2704</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>PostPutFlashValueEvent</class-interface>
      <method name="getKey" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2705</id>
      <description>Instantiate a new PostPutFlashValueEvent that indicates the argument key was just put to the flash. If the argument is null, the literal Flash#NULL_VALUE must be passed to the superclass constructor.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PostPutFlashValueEvent</class-interface>
      <method name="PostPutFlashValueEvent" return-type="PostPutFlashValueEvent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2706</id>
      <description>Instantiate a new PreClearFlashEvent that indicates the argument key was just put to the flash.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreClearFlashEvent</class-interface>
      <method name="PreClearFlashEvent" return-type="PreClearFlashEvent">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2707</id>
      <description />
      <package>jakarta.faces.event</package>
      <class-interface>PreRemoveFlashValueEvent</class-interface>
      <method name="getKey" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2708</id>
      <description>Instantiate a new PreRemoveFlashValueEvent that indicates the argument key will be removed from the flash. If the argument is null, the literal Flash#NULL_VALUE must be passed to the superclass constructor.</description>
      <package>jakarta.faces.event</package>
      <class-interface>PreRemoveFlashValueEvent</class-interface>
      <method name="PreRemoveFlashValueEvent" return-type="PreRemoveFlashValueEvent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:310</id>
      <description>The functionality of this method is now handled by jakarta.faces.view.StateManagementStrategy#restoreView. Restore the tree structure and the component state of the view for the specified viewId, in an implementation dependent manner, and return the restored UIViewRoot. If there is no saved state information available for this viewId, return null instead. This method must consult the context initialization parameter named by the symbolic constant StateManager.STATE_SAVING_METHOD_PARAM_NAME to determine whether state should be saved on the client or the server. If not present, client side state saving is assumed. If the init parameter indicates that client side state saving should be used, this method must call the getTreeStructureToRestore() and (if the previous method call returned a non-null value) getComponentStateToRestore() methods of the ResponseStateManager instance provided by the RenderKit responsible for this view.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:314</id>
      <description>The functionality of this method is now handled by jakarta.faces.view.StateManagementStrategy#saveView. Return an opaque Object containing sufficient information for this same instance to restore the state of the current UIViewRoot on a subsequent request. The returned object must implement java.io.Serializable. If there is no state information to be saved, return null instead. Components may opt out of being included in the serialized view by setting their transient property to true. This must cause the component itself, as well as all of that component's children and facets, to be omitted from the saved tree structure and component state information. This method must also enforce the rule that, for components with non-null ids, all components that are descendants of the same nearest NamingContainer must have unique identifiers. For backwards compatability with existing StateManager implementations, the default implementation of this method calls #saveSerializedView and creates and returns a two element Object array with element zero containing the structure property and element one containing the state property of the SerializedView.</description>
      <package>jakarta.faces.application</package>
      <class-interface>StateManager</class-interface>
      <method name="saveView" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1838</id>
      <description>if the argument valueChangeEvent is null.</description>
      <package>jakarta.faces.event</package>
      <class-interface>MethodExpressionValueChangeListener</class-interface>
      <method name="processValueChange" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ValueChangeEvent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:7</id>
      <description>Create (if necessary) and return a per-web-application instance of the appropriate implementation class for the specified JavaServer Faces factory class, based on the discovery algorithm described in the class description. The standard injectionProvider and wrappers in JSF all implement the interface FacesWrapper. If the returned Object is an implementation of one of the standard injectionProvider, it must be legal to cast it to an instance of FacesWrapper and call FacesWrapper#getWrapped on the instance.</description>
      <package>jakarta.faces</package>
      <class-interface>FactoryFinder</class-interface>
      <method name="getFactory" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2709</id>
      <description>Assume that the submitted value is always a string, but the return type from this method is Object..</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewParameter</class-interface>
      <method name="getSubmittedValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2710</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModification</class-interface>
      <method name="ComponentModification" return-type="ComponentModification" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2711</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModification</class-interface>
      <method name="resume" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2712</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModification</class-interface>
      <method name="suspend" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2713</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModificationManager</class-interface>
      <method name="ComponentModificationManager" return-type="ComponentModificationManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2714</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModificationManager</class-interface>
      <method name="peek" return-type="jakarta.faces.component.visit.ComponentModification" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2715</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModificationManager</class-interface>
      <method name="pop" return-type="jakarta.faces.component.visit.ComponentModification" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
      <id>JSF:JAVADOC:2716</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModificationManager</class-interface>
      <method name="push" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.visit.ComponentModification</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2719</id>
      <description>Return the jakarta.faces.component.visit.ComponentModificationManager for this single run through the JSF request processing lifecycle. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getComponentModificationManager" return-type="jakarta.faces.component.visit.ComponentModificationManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2720</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getComponentModificationManager" return-type="jakarta.faces.component.visit.ComponentModificationManager">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2721</id>
      <description>The default behavior of this method is to call FacesContext#getComponentModificationManager on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getComponentModificationManager" return-type="jakarta.faces.component.visit.ComponentModificationManager" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:430</id>
      <description>The value of this annotation attribute is taken to be the component-type with which instances of this class of component can be instantiated by calling jakarta.faces.application.Application#createComponent(java.lang.String). If no value is specified, or the value is null, the value is taken to be the return of calling getSimpleName on the class to which this annotation is attached and lowercasing the first character. If more than one component with this derived name is found, the results are undefined.</description>
      <package>jakarta.faces.component</package>
      <class-interface>FacesComponent</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:497</id>
      <description>Search for and return the UIComponent with an id that matches the specified search expression (if any), according to the algorithm described below. WARNING: The found UIComponent instance, if any, is returned without regard for its tree traversal context. Retrieving an EL-bound attribute from the component is not safe. EL expressions can contain implicit objects, such as #{component}, which assume they are being evaluated within the scope of a tree traversal context. Evaluating expressions with these kinds of implicit objects outside of a tree traversal context produces undefined results. See #invokeOnComponent for a method that does correctly account for the tree traversal context when operating on the found UIComponent instance. #invokeOnComponent is also useful to find components given a simple clientId. Component identifiers are required to be unique within the scope of the closest ancestor NamingContainer that encloses this component (which might be this component itself). If there are no NamingContainer components in the ancestry of this component, the root component in the tree is treated as if it were a NamingContainer, whether or not its class actually implements the NamingContainer interface. A search expression consists of either an identifier (which is matched exactly against the id property of a UIComponent, or a series of such identifiers linked by the UINamingContainer#getSeparatorChar character value. The search algorithm should operates as follows, though alternate alogrithms may be used as long as the end result is the same: Identify the UIComponent that will be the base for searching, by stopping as soon as one of the following conditions is met: If the search expression begins with the the separator character (called an "absolute" search expression), the base will be the root UIComponent of the component tree. The leading separator character will be stripped off, and the remainder of the search expression will be treated as a "relative" search expression as described below. Otherwise, if this UIComponent is a NamingContainer it will serve as the basis. Otherwise, search up the parents of this component. If a NamingContainer is encountered, it will be the base. Otherwise (if no NamingContainer is encountered) the root UIComponent will be the base. The search expression (possibly modified in the previous step) is now a "relative" search expression that will be used to locate the component (if any) that has an id that matches, within the scope of the base component. The match is performed as follows: If the search expression is a simple identifier, this value is compared to the id property, and then recursively through the facets and children of the base UIComponent (except that if a descendant NamingContainer is found, its own facets and children are not searched). If the search expression includes more than one identifier separated by the separator character, the first identifier is used to locate a NamingContainer by the rules in the previous bullet point. Then, the findComponent() method of this NamingContainer will be called, passing the remainder of the search expression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="findComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:593</id>
      <description>Search for and return the UIComponent with an id that matches the specified search expression (if any), according to the algorithm described below. WARNING: The found UIComponent instance, if any, is returned without regard for its tree traversal context. Retrieving an EL-bound attribute from the component is not safe. EL expressions can contain implicit objects, such as #{component}, which assume they are being evaluated within the scope of a tree traversal context. Evaluating expressions with these kinds of implicit objects outside of a tree traversal context produces undefined results. See #invokeOnComponent for a method that does correctly account for the tree traversal context when operating on the found UIComponent instance. #invokeOnComponent is also useful to find components given a simple clientId. Component identifiers are required to be unique within the scope of the closest ancestor NamingContainer that encloses this component (which might be this component itself). If there are no NamingContainer components in the ancestry of this component, the root component in the tree is treated as if it were a NamingContainer, whether or not its class actually implements the NamingContainer interface. A search expression consists of either an identifier (which is matched exactly against the id property of a UIComponent, or a series of such identifiers linked by the UINamingContainer#getSeparatorChar character value. The search algorithm should operates as follows, though alternate alogrithms may be used as long as the end result is the same: Identify the UIComponent that will be the base for searching, by stopping as soon as one of the following conditions is met: If the search expression begins with the the separator character (called an "absolute" search expression), the base will be the root UIComponent of the component tree. The leading separator character will be stripped off, and the remainder of the search expression will be treated as a "relative" search expression as described below. Otherwise, if this UIComponent is a NamingContainer it will serve as the basis. Otherwise, search up the parents of this component. If a NamingContainer is encountered, it will be the base. Otherwise (if no NamingContainer is encountered) the root UIComponent will be the base. The search expression (possibly modified in the previous step) is now a "relative" search expression that will be used to locate the component (if any) that has an id that matches, within the scope of the base component. The match is performed as follows: If the search expression is a simple identifier, this value is compared to the id property, and then recursively through the facets and children of the base UIComponent (except that if a descendant NamingContainer is found, its own facets and children are not searched). If the search expression includes more than one identifier separated by the separator character, the first identifier is used to locate a NamingContainer by the rules in the previous bullet point. Then, the findComponent() method of this NamingContainer will be called, passing the remainder of the search expression.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="findComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:672</id>
      <description>Return the value of the UIData. This value must either be be of type DataModel, or a type that can be adapted into a DataModel. UIData will automatically adapt the following types: Arrays java.util.List java.sql.ResultSet javax.servlet.jsp.jstl.sql.Result java.util.Collection All other types will be adapted using the ScalarDataModel class, which will treat the object as a single row of data.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1101</id>
      <description>The purpose of this method is to generate a query string from the collection of Parameter objects provided by the parameters argument and append that query string to the baseUrl. This method must be able to encode the parameters to a baseUrl that may or may not have existing query parameters. The parameter values should be encoded appropriately for the environment so that the resulting URL can be used as the target of a link (e.g., in an href attribute) in a JSF response. It's possible for an ExternalContext implementation to override this method in any way that would make the URL bookmarkable in that environment. See #encodeActionURL(java.lang.String) for the required specification of how to encode the jakarta.faces.lifecycle.ClientWindow. The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodeBookmarkableURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1104</id>
      <description>Return the input URL, after performing any rewriting needed to ensure that it can be used in a partial page submission (ajax request) to correctly identify an addressable action in the current application. See #encodeActionURL(java.lang.String) for the required specification of how to encode the jakarta.faces.lifecycle.ClientWindow. Servlet:Returns the same encoded URL as the #encodeActionURL(String url) method. Portlet:Returns an encoded URL that, upon HTTP POST, will invoke the RESOURCE_PHASE of the portlet lifecycle.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodePartialActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1106</id>
      <description>The purpose of this method is to generate a query string from the collection of Parameter objects provided by the parameters argument and append that query string to the baseUrl. This method must be able to encode the parameters to a baseUrl that may or may not have existing query parameters. The parameter values should be encoded appropriately for the environment so that the resulting URL can be used as the target of a redirect. It's possible for an ExternalContext implementation to override this method to accomodate the definition of redirect for that environment. See #encodeActionURL(java.lang.String) for the required specification of how to encode the jakarta.faces.lifecycle.ClientWindow.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodeRedirectURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2155</id>
      <description>The value of this annotation attribute is taken to be the validator-id with which instances of this class of component can be instantiated by calling jakarta.faces.application.Application#createValidator(java.lang.String). If no value is specified, or the value is null, the value is taken to be the return of calling getSimpleName on the class to which this annotation is attached and lowercasing the first character. If more than one validator with this derived name is found, the results are undefined.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>FacesValidator</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:708</id>
      <description>Override the behavior in UIComponent#visitTree to handle iteration correctly. If the UIComponent#isVisitable method of this instance returns false, take no action and return. Call UIComponent#pushComponentToEL and invoke the visit callback on this UIData instance as described in UIComponent#visitTree. Let the result of the invoctaion be visitResult. If visitResult is VisitResult#COMPLETE, take no further action and return true. Otherwise, determine if we need to visit our children. The default implementation calls VisitContext#getSubtreeIdsToVisit passing this as the argument. If the result of that call is non-empty, let doVisitChildren be true. If doVisitChildren is true and visitResult is VisitResult#ACCEPT, take the following action. If this component has facets, call UIComponent#getFacets on this instance and invoke the values() method. For each UIComponent in the returned Map, call UIComponent#visitTree. If this component has children, for each UIColumn child: Call VisitContext#invokeVisitCallback on that UIColumn instance. If such a call returns true, terminate visiting and return true from this method. If the child UIColumn has facets, call UIComponent#visitTree on each one. Take no action on non-UIColumn children. Save aside the result of a call to #getRowIndex. For each child component of this UIData that is also an instance of UIColumn, Iterate over the rows. Let rowsToProcess be the return from #getRows. Let rowIndex be the return from #getFirst - 1. While the number of rows processed is less than rowsToProcess, take the following actions. Call #setRowIndex, passing the current row index. If #isRowAvailable returns false, take no further action and return false. Call UIComponent#visitTree on each of the children of this UIColumn instance. Call #popComponentFromEL and restore the saved row index with a call to #setRowIndex. Return false to allow the visiting to continue.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIData</class-interface>
      <method name="visitTree" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.visit.VisitContext</parameter>
          <parameter>jakarta.faces.component.visit.VisitCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2696</id>
      <description>Compliant implementations must return a cryptographically strong token for use to protect views in this application. For backwards compatability with earlier revisions, a default implementation is provided that simply returns null.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="getCryptographicallyStrongTokenFromSession" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2725</id>
      <description>If the value of this attribute is true, the runtime must create a Facelet tag handler, that extends from jakarta.faces.view.facelets.ComponentHandler, suitable for use in pages under the tag library with namespace given by the value of the #namespace attribute.</description>
      <package>jakarta.faces.component</package>
      <class-interface>FacesComponent</class-interface>
      <method name="createTag" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2726</id>
      <description>If the value of the #createTag attribute is true, the value of this attribute is taken to be the tag library namespace into which this component is placed.</description>
      <package>jakarta.faces.component</package>
      <class-interface>FacesComponent</class-interface>
      <method name="namespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2727</id>
      <description>If the value of the #createTag attribute is true, the runtime must use this value as the tag name for including an instance of the component annotated with this annotation in a view. If this attribute is not specified on a usage of this annotation, the simple name of the class on which this annotation is declared, with the first character lowercased, is taken to be the value.</description>
      <package>jakarta.faces.component</package>
      <class-interface>FacesComponent</class-interface>
      <method name="tagName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2728</id>
      <description>Return the ClientWindow set in a preceding call to #setClientWindow, or null if no such call has been made.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getClientWindow" return-type="jakarta.faces.lifecycle.ClientWindow" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2729</id>
      <description>Return the id of the current session or the empty string if no session has been created and the create parameter is false. Servlet: If create is true, obtain a reference to the HttpSession for the current request (creating the session if necessary) and return its id. If create is false, obtain a reference to the current session, if one exists, and return its id. If no session exists, return the empty string.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="getSessionId" return-type="java.lang.String">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2730</id>
      <description>Associate this instance with a ClientWindow.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="setClientWindow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.lifecycle.ClientWindow</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2731</id>
      <description>The default behavior of this method is to call ExternalContext#getClientWindow on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getClientWindow" return-type="jakarta.faces.lifecycle.ClientWindow" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2732</id>
      <description>The default behavior of this method is to call ExternalContext#getSessionId(boolean) on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="getSessionId" return-type="java.lang.String">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2733</id>
      <description>The default behavior of this method is to call ExternalContext#setClientWindow on the wrapped ExternalContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContextWrapper</class-interface>
      <method name="setClientWindow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.lifecycle.ClientWindow</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2734</id>
      <description>Return the result of calling UINamingContainer#getSeparatorChar, passing this as the argument. Note that this enables accessing the value of this property from the EL expression #{facesContext.namingContainerSeparatorChar}.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getNamingContainerSeparatorChar" return-type="char" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2735</id>
      <description>The default behavior of this method is to call FacesContext#getNamingContainerSeparatorChar() on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getNamingContainerSeparatorChar" return-type="char" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2736</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>FlashFactory</class-interface>
      <method name="FlashFactory" return-type="FlashFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2738</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.FlashFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2739</id>
      <description>The default behavior of this method is to call Flash#clear() on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="clear" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2740</id>
      <description>The default behavior of this method is to call Flash#containsKey(Object) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="containsKey" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2741</id>
      <description>The default behavior of this method is to call Flash#containsValue(Object) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="containsValue" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2742</id>
      <description>The default behavior of this method is to call Flash#doPostPhaseActions(FacesContext) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="doPostPhaseActions" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2743</id>
      <description>The default behavior of this method is to call Flash#doPrePhaseActions(FacesContext) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="doPrePhaseActions" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2744</id>
      <description>The default behavior of this method is to call Flash#entrySet() on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="entrySet" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2745</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="FlashWrapper" return-type="FlashWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2746</id>
      <description>The default behavior of this method is to call Flash#get(Object) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2747</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.context.Flash" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2748</id>
      <description>The default behavior of this method is to call Flash#isEmpty() on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="isEmpty" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2749</id>
      <description>The default behavior of this method is to call Flash#isKeepMessages() on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="isKeepMessages" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2750</id>
      <description>The default behavior of this method is to call Flash#isRedirect() on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="isRedirect" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2751</id>
      <description>The default behavior of this method is to call Flash#keep(String) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="keep" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2752</id>
      <description>The default behavior of this method is to call Flash#keySet() on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="keySet" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2753</id>
      <description>The default behavior of this method is to call Flash#put on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="put" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2754</id>
      <description>The default behavior of this method is to call Flash#putAll(Map) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="putAll" return-type="void">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2755</id>
      <description>The default behavior of this method is to call Flash#putNow(String, Object) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="putNow" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2756</id>
      <description>The default behavior of this method is to call Flash#remove(Object) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="remove" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2757</id>
      <description>The default behavior of this method is to call Flash#setKeepMessages(boolean) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="setKeepMessages" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2758</id>
      <description>The default behavior of this method is to call Flash#setRedirect(boolean) on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="setRedirect" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2759</id>
      <description>The default behavior of this method is to call Flash#size() on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="size" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2760</id>
      <description>The default behavior of this method is to call Flash#values() on the wrapped Flash object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashWrapper</class-interface>
      <method name="values" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2761</id>
      <description />
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="ClientWindow" return-type="ClientWindow" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2765</id>
      <description>Return a String value that uniquely identifies this ClientWindow within the scope of the current session. See #decode for the specification of how to derive this value.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="getId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2768</id>
      <description>Register a new PhaseListener instance that is interested in being notified before and after the processing for standard phases of the request processing lifecycle.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="addPhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2769</id>
      <description>if listener is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="addPhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2771</id>
      <description>Execute all of the phases of the request processing lifecycle, up to but not including the Render Response phase, as described in the JavaServer Faces Specification, in the specified order. The processing flow can be affected (by the application, by components, or by event listeners) by calls to the renderResponse() or responseComplete() methods of the FacesContext instance associated with the current request.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="execute" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2772</id>
      <description>if thrown during the execution of the request processing lifecycle</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="execute" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2773</id>
      <description>if context is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="execute" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2774</id>
      <description>Return the set of registered PhaseListeners for this Lifecycle instance. If there are no registered listeners, a zero-length array is returned.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="getPhaseListeners" return-type="jakarta.faces.event.PhaseListener[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2775</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.lifecycle.Lifecycle" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2776</id>
      <description />
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="LifecycleWrapper" return-type="LifecycleWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2777</id>
      <description>Deregister an existing PhaseListener instance that is no longer interested in being notified before and after the processing for standard phases of the request processing lifecycle. If no such listener instance has been registered, no action is taken.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="removePhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2778</id>
      <description>if listener is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="removePhaseListener" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.PhaseListener</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2779</id>
      <description>Execute the Render Response phase of the request processing lifecycle, unless the responseComplete() method has been called on the FacesContext instance associated with the current request.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="render" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2780</id>
      <description>if an exception is thrown during the execution of the request processing lifecycle</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="render" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2781</id>
      <description>if context is null</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="render" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2782</id>
      <description>Construct a new CollectionDataModel with no specified wrapped data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="CollectionDataModel" return-type="CollectionDataModel" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2783</id>
      <description>Construct a new CollectionDataModel wrapping the specified list.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="CollectionDataModel" return-type="CollectionDataModel">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2784</id>
      <description>If there is wrappedData available, return the length of the list. If no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="getRowCount" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2785</id>
      <description>if an error occurs getting the row count</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="getRowCount" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2786</id>
      <description>If row data is available, return the array element at the index specified by rowIndex. If no wrapped data is available, return null.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2787</id>
      <description>if an error occurs getting the row data</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2788</id>
      <description>if now row data is available at the currently specified row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2789</id>
      <description>Return the zero-relative index of the currently selected row. If we are not currently positioned on a row, or no wrappedData is available, return -1.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="getRowIndex" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2790</id>
      <description>if an error occurs getting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="getRowIndex" return-type="int">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2791</id>
      <description>Return the object representing the data wrapped by this DataModel, if any.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="getWrappedData" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2792</id>
      <description>Return true if there is wrappedData available, and the current value of rowIndex is greater than or equal to zero, and less than the size of the list. Otherwise, return false.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2793</id>
      <description>if an error occurs getting the row availability</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean">
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2794</id>
      <description>Set the zero-relative index of the currently selected row, or -1 to indicate that we are not positioned on a row. It is possible to set the row index at a value for which the underlying data collection does not contain any row data. Therefore, callers may use the isRowAvailable() method to detect whether row data will be available for use by the getRowData() method. If there is no wrappedData available when this method is called, the specified rowIndex is stored (and may be retrieved by a subsequent call to getRowData()), but no event is sent. Otherwise, if the currently selected row index is changed by this call, a DataModelEvent will be sent to the rowSelected() method of all registered DataModelListeners.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2795</id>
      <description>if an error occurs setting the row index</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>jakarta.faces.FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2796</id>
      <description>if rowIndex is less than -1</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="setRowIndex" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:236</id>
      <description>Evaluates the for this , if any. The expression to be evaluated is passed into the constructor as a string. When the expression is evaluated, its value must be coerced into a boolean per the normal EL coercion rules.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getCondition" return-type="java.lang.Boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:279</id>
      <description>Create an instance of Resource with a resourceName given by the value of the argument resourceName that is a member of the library named by the argument libraryName. The content-type of the resource is derived by passing the resourceName to jakarta.faces.context.ExternalContext#getMimeType. The algorithm specified in section JSF.2.6.1.4 of the spec prose document linked in the overview summary must be executed to create the Resource. New requirements were introduced in version 2.2 of the specification.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:281</id>
      <description>Create an instance of Resource with a resourceName given by the value of the argument resourceName that is a member of the library named by the argument libraryName that claims to have the content-type given by the argument content-type. The algorithm specified in section JSF.2.6.1.4 of the spec prose document linked in the overview summary must be executed to create the Resource. New requirements were introduced in version 2.2 of the specification.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:287</id>
      <description>Return true if the resource library named by the argument libraryName can be found. If there is a localePrefix for this application, as defined in #LOCALE_PREFIX, first look for the library with the prefix. If no such library is found, look for the library without the prefix. This allows developers to avoid duplication of files. For example, consider the case where the developer wants to have a resource library containing a localized image resource and a non-localized script resource. By checking both locations for the existence of the library, along with other spec changes in section 2.6.1.4, this scenario is enabled.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="libraryExists" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1091</id>
      <description>Adds the cookie represented by the arguments to the response. Servlet: This must be accomplished by calling the javax.servlet.http.HttpServletResponse method addCookie(). The Cookie argument must be constructed by passing the name and value parameters. If the properties arugument is non-null and not empty, the Cookie instance must be initialized as described below. Key in "values" Map Expected type of value. Name of setter method on Cookie instance to be set with the value from the Map. comment String setComment domain String setDomain maxAge Integer setMaxAge secure Boolean setSecure path String setPath httpOnly Boolean setHttpOnly The default implementation throws UnsupportedOperationException and is provided for the sole purpose of not breaking existing applications that extend this class.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="addResponseCookie" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2242</id>
      <description>Return the state of the current view in an Object that implements Serializable and can be passed to java.io.ObjectOutputStream.writeObject() without causing a java.io.NotSerializableException to be thrown. The default implementation must perform the following algorithm or its semantic equivalent, explicitly performing all the steps listed here. If the UIViewRoot of the current view is marked transient, return null immediately. Traverse the view and verify that each of the client ids are unique. Throw IllegalStateException if more than one client id are the same. Visit the tree using jakarta.faces.component.UIComponent#visitTree. For each node, call jakarta.faces.component.UIComponent#saveState, saving the returned Object in a way such that it can be restored given only its client id. Special care must be taken to handle the case of components that were added or deleted programmatically during this lifecycle traversal, rather than by the VDL. The implementation must ensure that the jakarta.faces.component.UIComponent#saveState method is called for each node in the tree. The data structure used to save the state obtained by executing the above algorithm must be Serializable, and all of the elements within the data structure must also be Serializable.</description>
      <package>jakarta.faces.view</package>
      <class-interface>StateManagementStrategy</class-interface>
      <method name="saveView" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2524</id>
      <description>Create an instance of Resource given the argument resourceId. The content-type of the resource is derived by passing the resourceName to jakarta.faces.context.ExternalContext#getMimeType The resource must be identified according to the specification in JSF.2.6.1.3 of the spec prose document linked in the overview summary. New requirements were introduced in version 2.2 of the specification.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createResourceFromId" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1636</id>
      <description>The value of this annotation attribute is taken to be the converter-id with which instances of this class of converter can be instantiated by calling jakarta.faces.application.Application#createConverter(java.lang.String).</description>
      <package>jakarta.faces.convert</package>
      <class-interface>FacesConverter</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2801</id>
      <description>Called by the flow system to cause the flow to be inspected for navigation rules. For backward compatibility with earlier implementations, an empty method is provided.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="inspectFlow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2802</id>
      <description>Called by the flow system to cause the flow to be inspected for navigation rules. For backward compatibility with earlier implementations, an empty method is provided.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="inspectFlow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:125</id>
      <description>Install the listener instance referenced by argument listener into the application as a listener for events of type systemEventClass that originate from objects of type sourceClass. If argument sourceClass is non-null, sourceClass and systemEventClass must be used to store the argument listener in the application in such a way that the listener can be quickly looked up by the implementation of #publishEvent given systemEventClass and an instance of the Class referenced by sourceClass. If argument sourceClass is null, the listener must be discoverable by the implementation of #publishEvent given only systemEventClass. It is valid to call this method during the processing of an event which was subscribed to by a previous call to this method.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="subscribeToEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:129</id>
      <description>Remove the listener instance referenced by argument listener from the application as a listener for events of type systemEventClass that originate from objects of type sourceClass. See #subscribeToEvent(Class, Class, jakarta.faces.event.SystemEventListener) for the specification of how the listener is stored, and therefore, how it must be removed. See #subscribeToEvent(java.lang.Class,java.lang.Class,jakarta.faces.event.SystemEventListener) for an additional requirement regarding when it is valid to call this method.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:131</id>
      <description>Remove the listener instance referenced by argument listener from the application as a listener for events of type systemEventClass. The default implementation simply calls through to #unsubscribeFromEvent(Class, jakarta.faces.event.SystemEventListener) passing null as the sourceClass argument See #subscribeToEvent(java.lang.Class,java.lang.Class,jakarta.faces.event.SystemEventListener) for an additional requirement regarding when it is valid to call this method.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="unsubscribeFromEvent" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>jakarta.faces.event.SystemEventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:910</id>
      <description>Generate an identifier for a component. The identifier will be prefixed with UNIQUE_ID_PREFIX, and will be unique within the non-NamingContainer child sub-trees of this UIViewRoot.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="createUniqueId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2632</id>
      <description>The passed UIComponent parent will be populated/restored in accordance with the Facelets chapter in the spec prose document.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Facelet</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2762</id>
      <description>The implementation is responsible for examining the incoming request and extracting the value that must be returned from the #getId method. If #CLIENT_WINDOW_MODE_PARAM_NAME is "none" this method must not be invoked. If #CLIENT_WINDOW_MODE_PARAM_NAME is "url" the implementation must first look for a request parameter under the name given by the value of jakarta.faces.render.ResponseStateManager#CLIENT_WINDOW_PARAM. If no value is found, look for a request parameter under the name given by the value of jakarta.faces.render.ResponseStateManager#CLIENT_WINDOW_URL_PARAM. If no value is found, fabricate an id that uniquely identifies this ClientWindow within the scope of the current session. This value must be encrypted with a key stored in the http session and made available to return from the #getId method. The value must be suitable for inclusion as a hidden field or query parameter. If a value is found, decrypt it using the key from the session and make it available for return from #getId.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2767</id>
      <description>Create or restore the ClientWindow to be used to display the jakarta.faces.component.UIViewRoot for this run through the lifecycle. See the class documentation for ClientWindow for an overview of the feature. If the value of the ClientWindow#CLIENT_WINDOW_MODE_PARAM_NAME configuration parameter is "none" without the quotes, this method must take no action. Otherwise, call jakarta.faces.context.ExternalContext#getClientWindow(). If the result is null, create a new instance of ClientWindow and call ClientWindow#decode(jakarta.faces.context.FacesContext) on it. Store the new ClientWindow by calling jakarta.faces.context.ExternalContext#setClientWindow(jakarta.faces.lifecycle.ClientWindow).</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>Lifecycle</class-interface>
      <method name="attachWindow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2770</id>
      <description>Create or restore the ClientWindow to be used to display the jakarta.faces.component.UIViewRoot for this run through the lifecycle. See the class documentation for ClientWindow for an overview of the feature. If the value of the ClientWindow#CLIENT_WINDOW_MODE_PARAM_NAME configuration parameter is "none" without the quotes, this method must take no action. Otherwise, call jakarta.faces.context.ExternalContext#getClientWindow(). If the result is null, create a new instance of ClientWindow and call ClientWindow#decode(jakarta.faces.context.FacesContext) on it. Store the new ClientWindow by calling jakarta.faces.context.ExternalContext#setClientWindow(jakarta.faces.lifecycle.ClientWindow).</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>LifecycleWrapper</class-interface>
      <method name="attachWindow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2797</id>
      <description>Set the wrapped data.</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2798</id>
      <description>if data is non-null and is not a Collection</description>
      <package>jakarta.faces.model</package>
      <class-interface>CollectionDataModel</class-interface>
      <method name="setWrappedData" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2803</id>
      <description />
      <package>jakarta.faces</package>
      <class-interface>ApplicationConfigurationResourceDocumentPopulator</class-interface>
      <method name="ApplicationConfigurationResourceDocumentPopulator" return-type="ApplicationConfigurationResourceDocumentPopulator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2809</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModificationManager</class-interface>
      <method name="resume" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2810</id>
      <description />
      <package>jakarta.faces.component.visit</package>
      <class-interface>ComponentModificationManager</class-interface>
      <method name="suspend" return-type="java.util.Collection">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2814</id>
      <description>if an error occurs getting the row count</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="getRowCount" return-type="int">
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2815</id>
      <description>if an error occurs getting the row data</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="getRowData" return-type="java.util.SortedMap">
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2816</id>
      <description>if an error occurs getting the row availability</description>
      <package>jakarta.faces.model</package>
      <class-interface>ResultDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean">
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2817</id>
      <description>if an error occurs getting the row count</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="getRowCount" return-type="int">
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2818</id>
      <description>if an error occurs getting the row data</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="getRowData" return-type="java.lang.Object">
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2819</id>
      <description>if an error occurs getting the row availability</description>
      <package>jakarta.faces.model</package>
      <class-interface>ScalarDataModel</class-interface>
      <method name="isRowAvailable" return-type="boolean">
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2820</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>Facelet</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2821</id>
      <description>if unable to create child UIComponent instances</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2822</id>
      <description>if unable to create child UIComponent instances</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletContext</class-interface>
      <method name="includeFacelet" return-type="void">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2823</id>
      <description>if unable to create child UIComponent instances</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletHandler</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>FacesException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2825</id>
      <description>Set a reference to the Tag for which this class represents the attributes. The VDL runtime must ensure that this method is called before any FaceletHandlers for this element are instantiated. For compatibility with previous implementations, a no-op implementation is provided.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="setTag" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2827</id>
      <description>Set a reference to the Tag for which this class represents the attributes. The VDL runtime must ensure that this method is called before any FaceletHandlers for this element are instantiated. For compatibility with previous implementations, a no-op implementation is provided.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributes</class-interface>
      <method name="setTag" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.Tag</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1094</id>
      <description>Dispatch a request to the specified resource to create output for this response. Servlet: This must be accomplished by calling the javax.servlet.ServletContext method getRequestDispatcher(path), and calling the forward() method on the resulting object. If the call to getRequestDisatcher(path) returns null, send aServletResponse SC_NOT_FOUND error code.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="dispatch" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:25</id>
      <description>Register a validator by its id that is applied to all UIInput components in a view. The validator to most often serve this role is the BeanValidator. The usage contract for this method assumes that the validator has been registered using the normal ???by-id??? registration mechanism. An implementation is provided that takes no action so that users that decorate the Application continue to work.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="addDefaultValidatorId" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:213</id>
      <description>A convenience method to signal the JavaServer Faces implementation to perform navigation with the provided outcome. When the NavigationHandler is invoked, the current viewId is treated as the "from viewId" and the "from action" is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="performNavigation" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:349</id>
      <description>Derive and return the viewId from the current request, or the argument input by following the algorithm defined in specification section JSF.7.6.2. The default implementation of this method simply returns rawViewId unchanged.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="deriveViewId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:350</id>
      <description>If the value returned from this method is used as the file argument to the four-argument constructor for java.net.URL (assuming appropriate values are used for the first three arguments), then a client making a request to the toExternalForm() of that URL will select the argument viewId for traversing the JSF lifecycle. Please see section JSF.7.6.2 for the complete specification.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:353</id>
      <description>Return a JSF action URL derived from the viewId argument that is suitable to be used as the target of a link in a JSF response. Compiliant implementations must implement this method as specified in section JSF.7.6.2. The default implementation simply calls through to #getActionURL, passing the arguments context and viewId.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getBookmarkableURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:543</id>
      <description>The default implementation performs the following action. If the argument event is an instance of PostRestoreStateEvent, call this.#getValueExpression passing the literal string ???binding???, without the quotes, as the argument. If the result is non-null, set the value of the ValueExpression to be this.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="processEvent" return-type="void">
        <parameters>
          <parameter>jakarta.faces.event.ComponentSystemEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:575</id>
      <description>Perform a tree visit starting at this node in the tree. UIComponent.visitTree() implementations do not invoke the VisitCallback directly, but instead call VisitContext#invokeVisitCallback to invoke the callback. This allows VisitContext implementations to provide optimized tree traversals, for example by only calling the VisitCallback for a subset of components. UIComponent.visitTree() implementations must call UIComponent.pushComponentToEL() before performing the visit and UIComponent.popComponentFromEL() after the visit.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="visitTree" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.visit.VisitContext</parameter>
          <parameter>jakarta.faces.component.visit.VisitCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:724</id>
      <description>Perform a tree visit starting at this node in the tree. UIComponent.visitTree() implementations do not invoke the VisitCallback directly, but instead call VisitContext#invokeVisitCallback to invoke the callback. This allows VisitContext implementations to provide optimized tree traversals, for example by only calling the VisitCallback for a subset of components. UIComponent.visitTree() implementations must call UIComponent.pushComponentToEL() before performing the visit and UIComponent.popComponentFromEL() after the visit.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIForm</class-interface>
      <method name="visitTree" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.visit.VisitContext</parameter>
          <parameter>jakarta.faces.component.visit.VisitCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:770</id>
      <description>Convenience method to reset this component's value to the un-initialized state. This method does the following: Call UIOutput#setValue. Call #setSubmittedValue passing null. Call #setLocalValueSet passing false. Call #setValid passing true. Upon return from this call if the instance had a ValueBinding associated with it for the "value" property, this binding is evaluated when UIOutput#getValue is called. Otherwise, null is returned from getValue().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="resetValue" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:815</id>
      <description>Perform a tree visit starting at this node in the tree. UIComponent.visitTree() implementations do not invoke the VisitCallback directly, but instead call VisitContext#invokeVisitCallback to invoke the callback. This allows VisitContext implementations to provide optimized tree traversals, for example by only calling the VisitCallback for a subset of components. UIComponent.visitTree() implementations must call UIComponent.pushComponentToEL() before performing the visit and UIComponent.popComponentFromEL() after the visit.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UINamingContainer</class-interface>
      <method name="visitTree" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.visit.VisitContext</parameter>
          <parameter>jakarta.faces.component.visit.VisitCallback</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:932</id>
      <description>Override superclass method to always return true because a UIViewRoot is defined to always be in a view.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="isInView" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:981</id>
      <description>Return the immediate status of this behavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="isImmediate" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1036</id>
      <description>Attaches a ClientBehavior to the component implementing this interface for the specified event. Valid event names for a UIComponent implementation are defined by ClientBehaviorHolder.getEventNames().</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>ClientBehaviorHolder</class-interface>
      <method name="addClientBehavior" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.behavior.ClientBehavior</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1041</id>
      <description>This method is called during component tree visits by VisitContext#invokeVisitCallback VisitContext.invokeVisitCallback() to visit the specified component. At the point in time when this method is called, the argument target is guaranteed to be in the proper state with respect to its ancestors in the View.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitCallback</class-interface>
      <method name="visit" return-type="jakarta.faces.component.visit.VisitResult">
        <parameters>
          <parameter>jakarta.faces.component.visit.VisitContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1045</id>
      <description>Returns hints that influence the behavior of the tree visit. Interested parties, such as UIComponent#visitTree UIComponent.visitTree() implementations, may check to see whether a particular hint is present by calling VisitContext.getHints().contains(), passing in one of the hints defined by VisitHint.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="getHints" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1048</id>
      <description>if component is not an instance of NamingContainer</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContext</class-interface>
      <method name="getSubtreeIdsToVisit" return-type="java.util.Collection">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1055</id>
      <description>Returns hints that influence the behavior of the tree visit. Interested parties, such as UIComponent#visitTree UIComponent.visitTree() implementations, may check to see whether a particular hint is present by calling VisitContext.getHints().contains(), passing in one of the hints defined by VisitHint.</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextWrapper</class-interface>
      <method name="getHints" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1058</id>
      <description>if component is not an instance of NamingContainer</description>
      <package>jakarta.faces.component.visit</package>
      <class-interface>VisitContextWrapper</class-interface>
      <method name="getSubtreeIdsToVisit" return-type="java.util.Collection">
        <parameters>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1385</id>
      <description>Return the value of this JavaBeans property for the flash for this session. This value determines whether or not any jakarta.faces.application.FacesMessage instances queued in the current jakarta.faces.context.FacesContext must be preserved so they are accessible on the next traversal of the lifecycle on this session, regardless of the request being a redirect after post, or a normal postback. Map accesses for the special key ???keepMessages??? must return the value of this JavaBeans property. EL Usage Example First page Next page Any messages present on the first page must be displayed on this page.</description>
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="isKeepMessages" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1386</id>
      <description>Return the value of this property for the flash for this session. This must be false unless: #setRedirect was called for the current lifecycle traversal with true as the argument. The current lifecycle traversal for this session is in the ???execute??? phase and the previous traversal had #setRedirect called with true as the argument.</description>
      <package>jakarta.faces.context</package>
      <class-interface>Flash</class-interface>
      <method name="isRedirect" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1468</id>
      <description>Write the end of an element, after closing any open element created by a call to startElement(). Elements must be closed in the inverse order from which they were opened; it is an error to do otherwise. If the argument component's pass through attributes includes an attribute of the name given by the value of the symbolic constant jakarta.faces.render.Renderer#PASSTHROUGH_RENDERER_LOCALNAME_KEY, use that as the element name, instead of the value passed as the first parameter to this method.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="endElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1480</id>
      <description>Write the start of an element, up to and including the element name. Once this method has been called, clients can call the writeAttribute() or writeURIAttribute() methods to add attributes and corresponding values. The starting element will be closed (that is, the trailing '&gt;' character added) on any subsequent call to startElement(), writeComment(), writeText(), endElement(), endDocument(), close(), flush(), or write(). If the argument component's pass through attributes includes an attribute of the name given by the value of the symbolic constant jakarta.faces.render.Renderer#PASSTHROUGH_RENDERER_LOCALNAME_KEY, use that as the element name, instead of the value passed as the first parameter to this method. Care must be taken so that this value is not also rendered when any other pass through attributes on this component are rendered.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="startElement" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2117</id>
      <description>Return true if the current request is a postback. This method is leveraged from the Restore View Phase to determine if jakarta.faces.application.ViewHandler#restoreView or jakarta.faces.application.ViewHandler#createView should be called. The default implementation must return true if this ResponseStateManager instance wrote out state on a previous request to which this request is a postback, false otherwise. The implementation of this method for the Standard HTML RenderKit must consult the jakarta.faces.context.ExternalContext's requestParameterMap and return true if and only if there is a key equal to the value of the symbolic constant #VIEW_STATE_PARAM. For backwards compatability with implementations of ResponseStateManager prior to JSF 1.2, a default implementation is provided that consults the jakarta.faces.context.ExternalContext's requestParameterMap and return true if its size is greater than 0.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="isPostback" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2133</id>
      <description>Verify that the value is valid according to the Bean Validation constraints. Obtain a ValidatorFactory instance by calling jakarta.validation.Validation#buildDefaultValidatorFactory. Let validationGroupsArray be a Class [] representing validator groups set on the component by the tag handler for this validator. The first search component terminates the search for the validation groups value. If no such value is found use the class name of jakarta.validation.groups.Default as the value of the validation groups. Let valueExpression be the return from calling UIComponent#getValueExpression on the argument component, passing the literal string ???value??? (without the quotes) as an argument. If this application is running in an environment with a Unified EL Implementation for Java EE6 or later, obtain the ValueReference from valueExpression and let valueBaseClase be the return from calling ValueReference.getBase() and valueProperty be the return from calling ValueReference.getProperty(). If an earlier version of the Unified EL is present, use the appropriate methods to inspect valueExpression and derive values for valueBaseClass and valueProperty. If no ValueReference can be obtained, take no action and return. If ValueReference.getBase() return null, take no action and return. Obtain the ValidatorContext from the ValidatorFactory. Decorate the MessageInterpolator returned from ValidatorFactory#getMessageInterpolator with one that leverages the Locale returned from jakarta.faces.component.UIViewRoot#getLocale, and store it in the ValidatorContext using ValidatorContext#messageInterpolator. Obtain the jakarta.validation.Validator instance from the validatorContext. Obtain a jakarta.validation.BeanDescriptor from the jakarta.validation.Validator. If hasConstraints() on the BeanDescriptor returns false, take no action and return. Otherwise proceed. Call jakarta.validation.Validator#validateValue, passing valueBaseClass, valueProperty, the value argument, and validatorGroupsArray as arguments. If the returned Set&lt;ConstraintViolation&gt; is non-empty, for each element in the Set, create a FacesMessage where the summary and detail are the return from calling ConstraintViolation#getMessage. Capture all such FacesMessage instances into a Collection and pass them to ValidatorException#ValidatorException(java.util.Collection), throwing the new exception.</description>
      <package>jakarta.faces.validator</package>
      <class-interface>BeanValidator</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2246</id>
      <description>Create a UIViewRoot from the VDL contained in the artifact referenced by the argument viewId. See section JSF.7.7.2 for the specification of the default implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="createView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2248</id>
      <description>Return a reference to the component metadata for the composite component represented by the argument componentResource, or null if the metadata cannot be found. See section JSF.7.7.2 for the specification of the default implementation. JSP implementations must throw UnsupportedOperationException.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getComponentMetadata" return-type="java.beans.BeanInfo">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2252</id>
      <description>Take implementation specific action to discover a Resource given the argument componentResource. See section JSF.7.7.2 for the specification of the default implementation. JSP implementations must throw UnsupportedOperationException.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getScriptComponentResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2257</id>
      <description>Return a reference to the view metadata for the view represented by the argument viewId, or null if the metadata cannot be found. See section JSF.7.7.2 for the specification of the default implementation. Facelets for JSF 2 implementation must return non-null. JSP implementations must return null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="getViewMetadata" return-type="jakarta.faces.view.ViewMetadata">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2260</id>
      <description>Render a view rooted at argumentview. See section JSF.7.7.2 for the specification of the default implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2263</id>
      <description>Restore a UIViewRoot from a previously created view. See section JSF.7.7.2 for the specification of the default implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:920</id>
      <description>Return an unmodifiable List of UIComponents for the provided target agrument. Each component in the List is assumed to represent a resource instance. The default implementation must use an algorithm equivalent to the the following. Locate the facet for the component by calling getFacet() using target as the argument. If the facet is not found, create the facet by calling context.getApplication().createComponent(). The argument to this method must refer to a component that extends UIPanel and overrides the encodeAll() method to take no action. This is necessary to prevent component resources from being inadvertently rendered. Set the id of the facet to be a string created by prepending the literal string ???jakarta_faces_location_??? (without the quotes) to the value of the target argument Add the facet to the facets Map using target as the key return the children of the facet</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getComponentResources" return-type="java.util.List">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:931</id>
      <description>Returns a Map that acts as the interface to the data store that is the "view scope", or, if this instance does not have such a Map and the create argument is true, creates one and returns it. This map must be instantiated lazily and cached for return from subsequent calls to this method on this UIViewRoot instance. jakarta.faces.application.Application#publishEvent must be called, passing PostConstructViewMapEvent.class as the first argument and this UIViewRoot instance as the second argument. The returned Map must be implemented such that calling clear() on the Map causes jakarta.faces.application.Application#publishEvent to be called, passing PreDestroyViewMapEvent.class as the first argument and this UIViewRoot instance as the second argument. Depending upon application configuration, objects stored in the view map may need to be Serializable. In general, it is a good idea to ensure that any objects stored in the view map are Serializable. For reasons made clear in jakarta.faces.view.ViewScoped, this map must ultimately be stored in the session. For this reason, a true value for the create argument will force the session to be created with a call to jakarta.faces.context.ExternalContext#getSession(boolean). See FacesContext#setViewRoot for the specification of when the clear() method must be called.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="getViewMap" return-type="java.util.Map">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2522</id>
      <description>A convenience method to signal the JavaServer Faces implementation to perform navigation with the provided outcome. When the NavigationHandler is invoked, the current viewId is treated as the "from viewId" and the "from action" is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="performNavigation" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2533</id>
      <description>Derive and return the viewId from the current request, or the argument input by following the algorithm defined in specification section JSF.7.6.2. Note that unlike deriveViewId(), this method does not require that a physical view be present. The default implementation of this method simply returns rawViewId unchanged.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="deriveLogicalViewId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2605</id>
      <description>Create a UIViewRoot from the VDL contained in the artifact referenced by the argument viewId. See section JSF.7.7.2 for the specification of the default implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="createView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2607</id>
      <description>Return a reference to the component metadata for the composite component represented by the argument componentResource, or null if the metadata cannot be found. See section JSF.7.7.2 for the specification of the default implementation. JSP implementations must throw UnsupportedOperationException.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getComponentMetadata" return-type="java.beans.BeanInfo">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2612</id>
      <description>Take implementation specific action to discover a Resource given the argument componentResource. See section JSF.7.7.2 for the specification of the default implementation. JSP implementations must throw UnsupportedOperationException.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getScriptComponentResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.application.Resource</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2617</id>
      <description>Return a reference to the view metadata for the view represented by the argument viewId, or null if the metadata cannot be found. See section JSF.7.7.2 for the specification of the default implementation. Facelets for JSF 2 implementation must return non-null. JSP implementations must return null.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="getViewMetadata" return-type="jakarta.faces.view.ViewMetadata">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2621</id>
      <description>Render a view rooted at argumentview. See section JSF.7.7.2 for the specification of the default implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="renderView" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2624</id>
      <description>Restore a UIViewRoot from a previously created view. See section JSF.7.7.2 for the specification of the default implementation.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="restoreView" return-type="jakarta.faces.component.UIViewRoot">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:354</id>
      <description>Return a JSF action URL derived from the viewId argument that is suitable to be used by the NavigationHandler to issue a redirect request to the URL using a NonFaces request. Compliant implementations must implement this method as specified in section JSF.7.6.2. The default implementation simply calls through to #getActionURL, passing the arguments context and viewId.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getRedirectURL" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2689</id>
      <description>Add the argument urlPattern to the thread safe Set of protected views for this application. Compliant implementations make it so a subsequent call to #getProtectedViewsUnmodifiable contains the argument. The runtime must support calling this method at any time after application startup. The default implementation takes no action.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="addProtectedView" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2690</id>
      <description>Return an unmodifiable Set of the protected views currently known to this ViewHandler instance. Compliant implementations must return a Set that is the concatenation of the contents of all the elements within all the in all of the application configuration resources in the current application. The runtime must support calling this method at any time after application startup. The default implementation returns an unmodifiable empty Set.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="getProtectedViewsUnmodifiable" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2691</id>
      <description>Remove the argument urlPattern from the thread safe Set of protected views for this application, if present in the Set. If the argument urlPattern is not present in the Set, this method has no effect. Compliant implementations must make it so a subsequent call to #getProtectedViewsUnmodifiable does not contain the argument. The runtime must support calling this method at any time after application startup. Returns true if this Set contained the argument. The default implementation takes no action and returns false.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ViewHandler</class-interface>
      <method name="removeProtectedView" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2448</id>
      <description>Process an incoming request, and create the corresponding response according to the following specification. If the request and response arguments to this method are not instances of HttpServletRequest and HttpServletResponse, respectively, the results of invoking this method are undefined. This method must respond to requests that contain the following strings by invoking the sendError method on the response argument (cast to HttpServletResponse), passing the code HttpServletResponse.SC_NOT_FOUND as the argument. /WEB-INF/ /WEB-INF /META-INF/ /META-INF If none of the cases described above in the specification for this method apply to the servicing of this request, the following action must be taken to service the request. Acquire a FacesContext instance for this request. Acquire the ResourceHandler for this request by calling jakarta.faces.application.Application#getResourceHandler. Call jakarta.faces.application.ResourceHandler#isResourceRequest. If this returns true call jakarta.faces.application.ResourceHandler#handleResourceRequest. If this returns false, call jakarta.faces.lifecycle.Lifecycle#attachWindow followed by jakarta.faces.lifecycle.Lifecycle#execute followed by jakarta.faces.lifecycle.Lifecycle#render. If a jakarta.faces.FacesException is thrown in either case, extract the cause from the FacesException. If the cause is null extract the message from the FacesException, put it inside of a new ServletException instance, and pass the FacesException instance as the root cause, then rethrow the ServletException instance. If the cause is an instance of ServletException, rethrow the cause. If the cause is an instance of IOException, rethrow the cause. Otherwise, create a new ServletException instance, passing the message from the cause, as the first argument, and the cause itself as the second argument. The implementation must make it so jakarta.faces.context.FacesContext#release is called within a finally block as late as possible in the processing for the JSF related portion of this request.</description>
      <package>jakarta.faces.webapp</package>
      <class-interface>FacesServlet</class-interface>
      <method name="service" return-type="void">
        <parameters>
          <parameter>ServletRequest</parameter>
          <parameter>ServletResponse</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2602</id>
      <description>Tests whether a physical resource corresponding to the specified viewId exists. The default implementation uses jakarta.faces.application.ResourceHandler#createViewResource to locate the physical resource.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="viewExists" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2631</id>
      <description>Tests whether a physical resource corresponding to the specified viewId exists. The default implementation uses jakarta.faces.application.ResourceHandler#createViewResource to locate the physical resource.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="viewExists" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:277</id>
      <description>Create an instance of Resource given the argument resourceName. The content-type of the resource is derived by passing the resourceName to jakarta.faces.context.ExternalContext#getMimeType The algorithm specified in section JSF.2.6.1.4 of the spec prose document linked in the overview summary must be executed to create the Resource. New requirements were introduced in version 2.2 of the specification. For historical reasons, this method operate correctly when the argument resourceName is of the form libraryName/resourceName, even when resourceName contains '/' characters.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2799</id>
      <description>Return the thread-safe singleton FlowHandler for this application. For implementations declaring compliance with version 2.2 of the specification, this method must never return null, even if the application has no flows. This is necessary to enable dynamic flow creation during the application's lifetime. All implementations that declare compliance with version 2.2 of the specification must implement this method. For the purpose of backward compatibility with environments that extend Application but do not override this method, an implementation is provided that returns null. Due to the decoratable nature of Application, code calling this method should always check for a null return.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getFlowHandler" return-type="jakarta.faces.flow.FlowHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2800</id>
      <description>Return the thread-safe singleton FlowHandler for this application. For implementations declaring compliance with version 2.2 of the specification, this method must never return null, even if the application has no flows. This is necessary to enable dynamic flow creation during the application's lifetime. All implementations that declare compliance with version 2.2 of the specification must implement this method. For the purpose of backward compatibility with environments that extend Application but do not override this method, an implementation is provided that returns null. Due to the decoratable nature of Application, code calling this method should always check for a null return.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="getFlowHandler" return-type="jakarta.faces.flow.FlowHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:272</id>
      <description>Return true if the user-agent requesting this resource needs an update. If the If-Modified-Since HTTP header is available for this request, its value must be consulted, as specified in Section 14.25 of IETF RFC 2616, to determine the result. Returns false if the user-agent does not need an update for this resource.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="userAgentNeedsUpdate" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2409</id>
      <description>Called by classes that implement jakarta.faces.view.facelets.FaceletHandler in their implementation of apply(). If the argument comp is new to the view, for each tag attribute declared to be in the pass through attribute namespace, set the name and value of the attribute into the pass through attributes map of the component. See UIComponent#getPassThroughAttributes(boolean) . See the VDLDocs for the namespace URI of the pass through attribute namespace. Attributes whose value is a ValueExpression must remain un-evaluated and stored in the map as ValueExpression instances.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegate</class-interface>
      <method name="apply" return-type="void">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:787</id>
      <description>Perform the following algorithm to validate the local value of this UIInput. Retrieve the submitted value with #getSubmittedValue. If this returns null, exit without further processing. (This indicates that no value was submitted for this component.) If the jakarta.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL context parameter value is true (ignoring case), and getSubmittedValue() returns a zero-length String call #setSubmittedValue, passing null as the argument and continue processing using null as the current submitted value. Convert the submitted value into a "local value" of the appropriate data type by calling #getConvertedValue. If conversion fails: Enqueue an appropriate error message by calling the addMessage() method on the FacesContext. Set the valid property on this component to false Validate the property by calling #validateValue. If the valid property of this component is still true, retrieve the previous value of the component (with getValue()), store the new local value using setValue(), and reset the submitted value to null with a call to #setSubmittedValue passing null as the argument. If the local value is different from the previous value of this component, as determined by a call to #compareValues, fire a ValueChangeEvent to be broadcast to all interested listeners. Application components implementing UIInput that wish to perform validation with logic embedded in the component should perform their own correctness checks, and then call the super.validate() method to perform the standard processing described above.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="validate" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:1099</id>
      <description>Return the input URL, after performing any rewriting needed to ensure that it will correctly identify an addressable action in the current application. Encoding the jakarta.faces.lifecycle.ClientWindow Call jakarta.faces.lifecycle.ClientWindow#isClientWindowRenderModeEnabled(jakarta.faces.context.FacesContext) . If the result is false take no further action and return the rewritten URL. If the result is true, call #getClientWindow(). If the result is non-null, call jakarta.faces.lifecycle.ClientWindow#getId() and append the id to the query string of the URL, making the necessary allowances for a pre-existing query string or no query-string. Call jakarta.faces.lifecycle.ClientWindow#getQueryURLParameters. If the result is non-null, for each parameter in the map, unconditionally add that parameter to the URL. The name of the query string parameter is given by the value of the constant jakarta.faces.render.ResponseStateManager#CLIENT_WINDOW_URL_PARAM. Servlet: This must be the value returned by the javax.servlet.http.HttpServletResponse method encodeURL(url).</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodeActionURL" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2119</id>
      <description>Take the argument state and write it into the output using the current ResponseWriter, which must be correctly positioned already. Call FacesContext#getViewRoot(). Call jakarta.faces.component.UIComponent#isTransient() returns true, take implementation specific action so that the following call to #isStateless returns true and return. Otherwise, proceed as follows. If the state is to be written out to hidden fields, the implementation must take care to make all necessary character replacements to make the Strings suitable for inclusion as an HTTP request paramater. If the state saving method for this application is jakarta.faces.application.StateManager#STATE_SAVING_METHOD_CLIENT, the implementation must encrypt the state to be saved to the client in a tamper evident manner. If the state saving method for this application is jakarta.faces.application.StateManager#STATE_SAVING_METHOD_SERVER, and the current request is an Ajax request jakarta.faces.context.PartialViewContext#isAjaxRequest returns true), use the current view state identifier if it is available (do not generate a new identifier). Write out the render kit identifier associated with this ResponseStateManager implementation with the name as the value of the String constant ResponseStateManager.RENDER_KIT_ID_PARAM. The render kit identifier must not be written if: it is the default render kit identifier as returned by jakarta.faces.application.Application#getDefaultRenderKitId() or the render kit identfier is the value of jakarta.faces.render.RenderKitFactory.HTML_BASIC_RENDER_KIT and jakarta.faces.application.Application#getDefaultRenderKitId() returns null. For backwards compatability with existing ResponseStateManager implementations, the default implementation of this method checks if the argument is an instance of SerializedView. If so, it calls through to #writeState(jakarta.faces.context.FacesContext,jakarta.faces.application.StateManager.SerializedView). If not, it expects the state to be a two element Object array. It creates an instance of SerializedView and stores the state as the treeStructure, and passes it to #writeState(jakarta.faces.context.FacesContext,jakarta.faces.application.StateManager.SerializedView). The jakarta.faces.lifecycle.ClientWindow must be written using these steps. Call jakarta.faces.context.ExternalContext#getClientWindow. If the result is null, take no further action regarding the ClientWindow. If the result is non-null, write a hidden field whose name is #CLIENT_WINDOW_PARAM and whose id is jakarta.faces.ClientWindow where is the currently configured UINamingContainer.getSeparatorChar(). is the return from UIViewRoot.getContainerClientId() on the view from whence this state originated. is a number that must be unique within this view, but must not be included in the view state. The value of the field is implementation dependent but must uniquely identify this window within the user's session.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="writeState" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:262</id>
      <description>Return a path to this resource such that, when the browser resolves it against the base URI for the view that includes the resource, and issues a GET request to the resultant fully qualified URL, the bytes of the resource are returned in response. The default implementation must implement the following algorithm. For discussion, the return result from this method will be called result. Get the context-root for this web application, not ending in slash. For discussion this will be called contextRoot. Discover if the FacesServlet is prefix or extension mapped, and the value of the mapping (including the leading '.' in the case of extension mapping). For discussion, this will be facesServletMapping. If prefix mapped, result must be result = contextRoot + '/' + facesServletMapping + ResourceHandler#RESOURCE_IDENTIFIER + '/' + #getResourceName If extension mapped, result must be result = contextRoot + ResourceHandler#RESOURCE_IDENTIFIER + #getResourceName + facesServletMapping Build up a string, called resourceMetaData which is an &amp; separated string of name=value pairs suitable for inclusion in a URL query string. If #getLibraryName returns non-null, resourceMetaData must include "ln=" + the return from #getLibraryName If there is a localePrefix for this application, as defined in ResourceHandler#LOCALE_PREFIX, resourceMetaData must include "loc=" + the localePrefix. If this resource is contained in a resource library contract, resourceMetaData must include "con=" + the name of the resource library contract. Append "?" + resourceMetaData to result. Make it portlet safe by passing the result through ViewHandler#getResourceURL.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Resource</class-interface>
      <method name="getRequestPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2804</id>
      <description>Service providers that implement this service must be called by the JSF runtime exactly once for each implementation, at startup, before any requests have been serviced. Before calling the #populateApplicationConfigurationResource method, the runtime must ensure that the Document argument is empty aside from being pre-configured to be in the proper namespace for an Application Configuration Resources file. Implementations of this service must ensure that any changes made to the argument Document conform to that schema as defined in the specification. The JSF runtime is not required to validate the Document after control returns from the service implementation, though it may do so. Ordering of Artifacts If the document is made to contain an element, as specified in the section Ordering of Artifacts in the specification prose document, the document will be prioritized accordingly. Otherwise, the runtime must place the document in the list of other Application Configuration Resources documents at the "lowest" priority, meaning any conflicts that may arise between the argument document and any other Application Configuration Resources are resolved in favor of the other document.</description>
      <package>jakarta.faces</package>
      <class-interface>ApplicationConfigurationResourceDocumentPopulator</class-interface>
      <method name="populateApplicationConfigurationResource" return-type="void">
        <parameters>
          <parameter>org.w3c.dom.Document</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2805</id>
      <description>This is a convenience method that simply calls #getPassThroughAttributes(boolean), passing true as the argument. This method must never return null.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getPassThroughAttributes" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2806</id>
      <description>This method has the same specification as #getPassThroughAttributes() except that it is allowed to return null if and only if the argument create is false and no pass through attribute data structure exists for this instance. The returned Map implementation must support all of the standard and optional Map methods, plus support the following additional requirements. The Map implementation must implement java.io.Serializable. Any attempt to add a null key or value must throw a NullPointerException. Any attempt to add a key that is not a String must throw an IllegalArgumentException.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponent</class-interface>
      <method name="getPassThroughAttributes" return-type="java.util.Map">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2808</id>
      <description>This method has the same specification as #getPassThroughAttributes() except that it is allowed to return null if and only if the argument create is false and no pass through attribute data structure exists for this instance. The returned Map implementation must support all of the standard and optional Map methods, plus support the following additional requirements. The Map implementation must implement java.io.Serializable. Any attempt to add a null key or value must throw a NullPointerException. Any attempt to add a key that is not a String must throw an IllegalArgumentException.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getPassThroughAttributes" return-type="java.util.Map">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2824</id>
      <description>A reference to the Tag for which this class represents the attributes. For compatibility with previous implementations, an implementation is provided that returns null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttribute</class-interface>
      <method name="getTag" return-type="jakarta.faces.view.facelets.Tag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2826</id>
      <description>A reference to the Tag for which this class represents the attributes. For compatibility with previous implementations, an implementation is provided that returns null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagAttributes</class-interface>
      <method name="getTag" return-type="jakarta.faces.view.facelets.Tag" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2828</id>
      <description>Set the FlowHandler instance used by the NavigationHandler to satisfy the requirements of the faces flows feature.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setFlowHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.flow.FlowHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2829</id>
      <description>if {code newHandler is {null}</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setFlowHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.flow.FlowHandler</parameter>
        </parameters>
        <throw>NullPounterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2830</id>
      <description>if this method is called after at least one request has been processed by the Lifecycle instance for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="setFlowHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.flow.FlowHandler</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2831</id>
      <description>Set the FlowHandler instance used by the NavigationHandler to satisfy the requirements of the faces flows feature.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setFlowHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.flow.FlowHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2832</id>
      <description>if {code newHandler is {null}</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setFlowHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.flow.FlowHandler</parameter>
        </parameters>
        <throw>NullPounterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2833</id>
      <description>if this method is called after at least one request has been processed by the Lifecycle instance for this application.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ApplicationWrapper</class-interface>
      <method name="setFlowHandler" return-type="void">
        <parameters>
          <parameter>jakarta.faces.flow.FlowHandler</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2834</id>
      <description>Return the NavigationCase representing the navigation that would be taken had NavigationHandler#handleNavigation been called with the same arguments or null if there is no such case. Implementations that comply the version of the specification in which this method was introduced must override this method. For compatibility with decorated implementations that comply with an earlier version of the specification, an implementation is provided that simply calls through to #getNavigationCase(jakarta.faces.context.FacesContext, java.lang.String, java.lang.String), ignoring the toFlowDocumentId parameter.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="getNavigationCase" return-type="jakarta.faces.application.NavigationCase">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2835</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandler</class-interface>
      <method name="getNavigationCase" return-type="jakarta.faces.application.NavigationCase">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2836</id>
      <description>Return the NavigationCase representing the navigation that would be taken had NavigationHandler#handleNavigation been called with the same arguments or null if there is no such case. Implementations that comply the version of the specification in which this method was introduced must override this method. For compatibility with decorated implementations that comply with an earlier version of the specification, an implementation is provided that simply calls through to #getNavigationCase(jakarta.faces.context.FacesContext, java.lang.String, java.lang.String), ignoring the toFlowDocumentId parameter.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="getNavigationCase" return-type="jakarta.faces.application.NavigationCase">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2837</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>ConfigurableNavigationHandlerWrapper</class-interface>
      <method name="getNavigationCase" return-type="jakarta.faces.application.NavigationCase">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2838</id>
      <description>If this navigation case represents a flow invocation, this property is the documentId in which the flow whose id is given by the return from #getFromOutcome() is defined. Implementations must override this method to return the value defined in the corresponding application configuration resources element. The base implementation returns the empty string.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="getToFlowDocumentId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2839</id>
      <description>Construct a new NavigationCase based on the provided arguments. See section JSF.7.4.2 for how a NavigationCase is used by the standard ConfigurableNavigationHandler</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCase</class-interface>
      <method name="NavigationCase" return-type="NavigationCase">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
          <parameter>boolean</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2840</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="equals" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2841</id>
      <description>Construct an absolute URL to this NavigationCase instance using jakarta.faces.application.ViewHandler#getActionURL on the path portion of the url.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getActionURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2842</id>
      <description>if the process of constructing the URL causes this exception to be thrown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getActionURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2843</id>
      <description>Construct an absolute URL suitable for a bookmarkable link to this NavigationCase instance using jakarta.faces.application.ViewHandler#getBookmarkableURL on the path portion of the url. This URL may include view parameters specified as metadata within the view.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getBookmarkableURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2844</id>
      <description>if the process of constructing the URL causes this exception to be thrown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getBookmarkableURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2845</id>
      <description>Evaluates the for this , if any. The expression to be evaluated is passed into the constructor as a string. When the expression is evaluated, its value must be coerced into a boolean per the normal EL coercion rules.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getCondition" return-type="java.lang.Boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2846</id>
      <description>exceptions encountered during the process of evaluating the expression or obtaining its value.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getCondition" return-type="java.lang.Boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>any</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2847</id>
      <description>Return the for this</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getFromAction" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2848</id>
      <description>Return the for this</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getFromOutcome" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2849</id>
      <description>Return the of the inside which this is nested.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getFromViewId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2850</id>
      <description>Return the parameters to be included for navigation cases requiring a redirect. If no parameters are defined, null will be returned. The keys in the Map are parameter names. For each key, the corresponding value is a List of unconverted values.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getParameters" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2851</id>
      <description>Construct an absolute URL suitable for a "redirect" to this NavigationCase instance using jakarta.faces.application.ViewHandler#getRedirectURL on the path portion of the url.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getRedirectURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2852</id>
      <description>if the process of constructing the URL causes this exception to be thrown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getRedirectURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2853</id>
      <description>Construct an absolute URL to this NavigationCase instance using jakarta.faces.application.ViewHandler#getResourceURL on the path portion of the url.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getResourceURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2854</id>
      <description>if the process of constructing the URL causes this exception to be thrown.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getResourceURL" return-type="java.net.URL">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.net.MalformedURLException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2855</id>
      <description>If this navigation case represents a flow invocation, this property is the documentId in which the flow whose id is given by the return from #getFromOutcome() is defined. Implementations must override this method to return the value defined in the corresponding application configuration resources element. The base implementation returns the empty string.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getToFlowDocumentId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2856</id>
      <description>Evaluates the for this</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getToViewId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2857</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.NavigationCase" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2858</id>
      <description>Test if this navigation case has an associated element.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="hasCondition" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2859</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="hashCode" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2860</id>
      <description>Return the value for this . This will be true if the view parametets should be encoded into the redirect URL (only applies to redirect case)</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="isIncludeViewParams" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2861</id>
      <description>Return the value for this . This will be true if the new view should be navigated to via a jakarta.faces.context.ExternalContext#redirect(String)</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="isRedirect" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2862</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="NavigationCaseWrapper" return-type="NavigationCaseWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2863</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationCaseWrapper</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2864</id>
      <description>Overloaded variant of #handleNavigation(jakarta.faces.context.FacesContext, java.lang.String, java.lang.String) that allows the caller to provide the defining document id for a flow to be entered by this navigation. For backward compatibility with decorated NavigationHandler implementations that conform to an earlier version of the specification, an implementation is provided that calls through to #handleNavigation(jakarta.faces.context.FacesContext, java.lang.String, java.lang.String), ignoring the toFlowDocumentId parameter.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandler</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2865</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandler</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2866</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandlerWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.application.NavigationHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2867</id>
      <description>Perform navigation processing based on the state information in the specified FacesContext, plus the outcome string returned by an executed application action. If the implementation class also extends ConfigurableNavigationHandler, the implementation must guarantee that the logic used in a call to ConfigurableNavigationHandler#getNavigationCase is used in this method to determine the correct navigation. This method must set the render targets (used in partial rendering) to render all invoking jakarta.faces.context.PartialViewContext#setRenderAll) if the view identifier has changed as the result of an application action (to take into account Ajax requests).</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandlerWrapper</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2868</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandlerWrapper</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2869</id>
      <description>Overloaded variant of #handleNavigation(jakarta.faces.context.FacesContext, java.lang.String, java.lang.String) that allows the caller to provide the defining document id for a flow to be entered by this navigation. For backward compatibility with decorated NavigationHandler implementations that conform to an earlier version of the specification, an implementation is provided that calls through to #handleNavigation(jakarta.faces.context.FacesContext, java.lang.String, java.lang.String), ignoring the toFlowDocumentId parameter.</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandlerWrapper</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2870</id>
      <description>if context is null</description>
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandlerWrapper</class-interface>
      <method name="handleNavigation" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2871</id>
      <description />
      <package>jakarta.faces.application</package>
      <class-interface>NavigationHandlerWrapper</class-interface>
      <method name="NavigationHandlerWrapper" return-type="NavigationHandlerWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2872</id>
      <description>Create an instance of Resource given the argument resourceName, which may contain "/" characters. The jakarta.faces.view.ViewDeclarationLanguage calls this method when it needs to load a view from a persistent store, such as a filesystem. This method is functionality equivalent to #createResource(java.lang.String), but all callsites that need to load VDL views must use this method so that classes that want to decorate the ResourceHandler in order to only affect the loading of views may do so without affecting the processing of other kinds of resources, such as scripts and stylesheets. A jakarta.faces.context.FacesContext must be present before calling this method. To preserve compatibility with prior revisions of the specification, a default implementation must be provided that calls #createResource(java.lang.String). PENDING(edburns): I think we need to put an additional check in to avoid returning false hits from this method when a viewResource happens to be named the same as one of the templates in a resource library contract. Perhaps we could set some kind of flag in the tag handler of all facelet tags that are valid for using resource library contracts (maybe just ui:composition and ui:decorate) and make it so the getResourceLibraryContracts part of this method only takes effect if that flag is set? Call FacesContext#getResourceLibraryContracts. If the result is non-null and not empty, for each value in the list, treat the value as the name of a resource library contract. If the argument resoureName exists as a resource in the resource library contract, return it. Otherwise, return the resource (not in the resource library contract), if found. Otherwise, return null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createViewResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2873</id>
      <description>if resourceName is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createViewResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2874</id>
      <description>Return true if the argument url contains the string given by the value of the constant ResourceHandler#RESOURCE_IDENTIFIER, false otherwise.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="isResourceURL" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2875</id>
      <description>if the argument url is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="isResourceURL" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2876</id>
      <description>The default behavior of this method is to call ResourceHandler#createViewResource on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="createViewResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2877</id>
      <description>The default behavior of this method is to call ResourceHandler#isResourceURL on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="isResourceURL" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2879</id>
      <description>Return whether or not the client window should be encoded into the target url.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutcomeTarget</class-interface>
      <method name="isDisableClientWindow" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2880</id>
      <description>Set whether or not the client window should be encoded into the target url.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutcomeTarget</class-interface>
      <method name="setDisableClientWindow" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2881</id>
      <description>Convenience method to reset this component's value to the un-initialized state.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIOutput</class-interface>
      <method name="resetValue" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2882</id>
      <description>Visit the clientIds and, if the component is an instance of EditableValueHolder, call its EditableValueHolder#resetValue method. Use #visitTree to do the visiting.</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIViewRoot</class-interface>
      <method name="resetValues" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2883</id>
      <description>Return the resetValues status of this behavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="isResetValues" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2884</id>
      <description>Tests whether the resetValues attribute is specified. Returns true if the resetValues attribute is specified, either as a locally set property or as a value expression.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="isResetValuesSet" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2885</id>
      <description>Set the resetValues status of this behavior.</description>
      <package>jakarta.faces.component.behavior</package>
      <class-interface>AjaxBehavior</class-interface>
      <method name="setResetValues" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2886</id>
      <description>Return the list of resource library contracts that have been calculated to be appropriate for use with this view, or null if there are no such resource library contracts. The list returned by this method must be immutable. For backward compatibility with implementations of the specification prior to when this method was introduced, an implementation is provided that returns null. Implementations compliant with the version in which this method was introduced must implement this method as specified.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getResourceLibraryContracts" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2887</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="getResourceLibraryContracts" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2888</id>
      <description>Set the resource library contracts calculated as valid to use with this view. The implementation must copy the contents of the incoming List into an immutable List for return from #getResourceLibraryContracts. If the argument is null or empty, the action taken is the same as if the argument is null: a subsequent call to getResourceLibraryContracts returns null. This method may only be called during the processing of jakarta.faces.view.ViewDeclarationLanguage#createView and during the VDL tag handler for the tag corresponding to an instance of UIViewRoot. For backward compatibility with implementations of the specification prior to when this method was introduced, an implementation is provided that takes no action. Implementations compliant with the version in which this method was introduced must implement this method as specified.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setResourceLibraryContracts" return-type="void">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2889</id>
      <description>if this method is called after this instance has been released</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContext</class-interface>
      <method name="setResourceLibraryContracts" return-type="void">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2890</id>
      <description>The default behavior of this method is to call FacesContext#getResourceLibraryContracts on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="getResourceLibraryContracts" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2891</id>
      <description>The default behavior of this method is to call FacesContext#setResourceLibraryContracts on the wrapped FacesContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FacesContextWrapper</class-interface>
      <method name="setResourceLibraryContracts" return-type="void">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2892</id>
      <description>Create (if needed) and return a Flash instance for this web application.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashFactory</class-interface>
      <method name="getFlash" return-type="jakarta.faces.context.Flash">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2893</id>
      <description>Return true if the incoming request has a parameter named by the value of #RESET_VALUES_PARAM_NAME and that value is true. To preserve backward compatibility with custom implementations that may have extended from an earlier version of this class, an implementation is provided that returns false. A compliant implementation must override this method to take the specified action.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContext</class-interface>
      <method name="isResetValues" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2894</id>
      <description>The default behavior of this method is to call PartialViewContext#isResetValues() on the wrapped PartialViewContext object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>PartialViewContextWrapper</class-interface>
      <method name="isResetValues" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2895</id>
      <description>Write a string containing the markup specific doctype. No escaping is performed. The default implementation simply calls through to #write(java.lang.String) . The implementation makes no checks if this is the correct place in the response to have a doctype, nor does it prevent the doctype from being written more than once.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeDoctype" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2896</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writeDoctype" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2897</id>
      <description>Write a string containing the markup specific preamble. No escaping is performed. The default implementation simply calls through to #write(java.lang.String) . The implementation makes no checks if this is the correct place in the response to have a preamble, nor does it prevent the preamble from being written more than once.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writePreamble" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2898</id>
      <description>if an input/output error occurs</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriter</class-interface>
      <method name="writePreamble" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2899</id>
      <description>The default behavior of this method is to call ResponseWriter#writeDoctype on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeDoctype" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2900</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writeDoctype" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2901</id>
      <description>The default behavior of this method is to call ResponseWriter#writePreamble on the wrapped ResponseWriter object.</description>
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writePreamble" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2902</id>
      <description />
      <package>jakarta.faces.context</package>
      <class-interface>ResponseWriterWrapper</class-interface>
      <method name="writePreamble" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2903</id>
      <description>Components that permit per-use disabling of the appending of the ClientWindow in generated URLs must call this method first before rendering those URLs. The caller must call #enableClientWindowRenderMode(jakarta.faces.context.FacesContext) from a finally block after rendering the URL. If #CLIENT_WINDOW_MODE_PARAM_NAME is "url" without the quotes, all generated URLs that cause a GET request must append the ClientWindow by default. This is specified as a static method because callsites need to access it without having access to an actual ClientWindow instance.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="disableClientWindowRenderMode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2904</id>
      <description>Components that permit per-use disabling of the appending of the ClientWindow in generated URLs must call this method first after rendering those URLs. If #CLIENT_WINDOW_MODE_PARAM_NAME is "url" without the quotes, all generated URLs that cause a GET request must append the ClientWindow by default. This is specified as a static method because callsites need to access it without having access to an actual ClientWindow instance.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="enableClientWindowRenderMode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2905</id>
      <description>This method will be called whenever a URL is generated by the runtime where client window related parameters need to be inserted into the URL. This guarantees custom ClientWindow implementations that they will have the opportunity to insert any additional client window specific information in any case where a URL is generated, such as the rendering of hyperlinks. The default implementation of this method returns the null.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="getQueryURLParameters" return-type="java.util.Map">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2906</id>
      <description>Methods that append the ClientWindow to generated URLs must call this method to see if they are permitted to do so. If #CLIENT_WINDOW_MODE_PARAM_NAME is "url" without the quotes, all generated URLs that cause a GET request must append the ClientWindow by default. This is specified as a static method because callsites need to access it without having access to an actual ClientWindow instance.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="isClientWindowRenderModeEnabled" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2907</id>
      <description>Convert the component generated client id to a form suitable for transmission to the client. The default implementation returns the argument clientId unchanged.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="convertClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2908</id>
      <description>if context or clientId is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="convertClientId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2909</id>
      <description>Decode any new state of the specified UIComponent from the request contained in the specified FacesContext, and store that state on the UIComponent. During decoding, events may be enqueued for later processing (by event listeners that have registered an interest), by calling queueEvent() on the associated UIComponent.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2910</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="decode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2911</id>
      <description>Render the beginning specified UIComponent to the output stream or writer associated with the response we are creating. If the conversion attempted in a previous call to getConvertedValue() for this component failed, the state information saved during execution of decode() should be used to reproduce the incorrect input.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2912</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2913</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeBegin" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2914</id>
      <description>Render the child components of this UIComponent, following the rules described for encodeBegin() to acquire the appropriate value to be rendered. This method will only be called if the rendersChildren property of this component is true.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2915</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2916</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeChildren" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2917</id>
      <description>Render the ending of the current state of the specified UIComponent, following the rules described for encodeBegin() to acquire the appropriate value to be rendered.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2918</id>
      <description>if an input/output error occurs while rendering</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2919</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="encodeEnd" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2920</id>
      <description>Attempt to convert previously stored state information into an object of the type required for this component (optionally using the registered jakarta.faces.convert.Converter for this component, if there is one). If conversion is successful, the new value should be returned from this method; if not, a ConverterException should be thrown.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="getConvertedValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2921</id>
      <description>if the submitted value cannot be converted successfully.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="getConvertedValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>jakarta.faces.convert.ConverterException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2922</id>
      <description>if context or component is null</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="getConvertedValue" return-type="java.lang.Object">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.component.UIComponent</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2923</id>
      <description>Return a flag indicating whether this Renderer is responsible for rendering the children the component it is asked to render. The default implementation returns false.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="getRendersChildren" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2924</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.render.Renderer" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2925</id>
      <description />
      <package>jakarta.faces.render</package>
      <class-interface>RendererWrapper</class-interface>
      <method name="RendererWrapper" return-type="RendererWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2926</id>
      <description>If the preceding call to #writeState(jakarta.faces.context.FacesContext, java.lang.Object) was stateless, return true. If the preceding call to writeState() was stateful, return false. Otherwise throw IllegalStateException. To preserve backward compatibility with custom implementations that may have extended from an earlier version of this class, an implementation is provided that returns false. A compliant implementation must override this method to take the specified action.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="isStateless" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2927</id>
      <description>if the argument context is null.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="isStateless" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2928</id>
      <description>if this method is invoked and the statefulness of the preceding call to #writeState(jakarta.faces.context.FacesContext, java.lang.Object) cannot be determined.</description>
      <package>jakarta.faces.render</package>
      <class-interface>ResponseStateManager</class-interface>
      <method name="isStateless" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2929</id>
      <description>Return the list of resource library contracts that will be made available for use in the view specified by the argument viewId. If no match is found, return an empty list. See section JSF.7.7.2 for the specification of the default implementation. For backward compatibility with prior implementations, an implementation is provided that returns null, but any implementation compliant with the version of the specification in which this method was introduced must implement it as specified in JSF.7.7.2.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="calculateResourceLibraryContracts" return-type="java.util.List">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2930</id>
      <description>Create a component given a ViewDeclarationLanguage specific tag library URI and tag name. The runtime must support this method operating for the Facelets VDL. Other kinds of ViewDeclarationLanguage may be supported but are not required to be supported. For backward compatibility with decorated ViewDeclrationLanguage implementations that do not override this method, a default implementation is provided that returns null. However, any implementation that is compliant with the version of the specification in which this method was introduced must implement this method.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2931</id>
      <description>if context, taglibURI, or tagName are null</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguage</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2932</id>
      <description>Return the list of resource library contracts that will be made available for use in the view specified by the argument viewId. If no match is found, return an empty list. See section JSF.7.7.2 for the specification of the default implementation. For backward compatibility with prior implementations, an implementation is provided that returns null, but any implementation compliant with the version of the specification in which this method was introduced must implement it as specified in JSF.7.7.2.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="calculateResourceLibraryContracts" return-type="java.util.List">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2933</id>
      <description>Create a component given a ViewDeclarationLanguage specific tag library URI and tag name. The runtime must support this method operating for the Facelets VDL. Other kinds of ViewDeclarationLanguage may be supported but are not required to be supported. For backward compatibility with decorated ViewDeclrationLanguage implementations that do not override this method, a default implementation is provided that returns null. However, any implementation that is compliant with the version of the specification in which this method was introduced must implement this method.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2934</id>
      <description>if context, taglibURI, or tagName are null</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewDeclarationLanguageWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2935</id>
      <description>Utility method to extract view metadata from the provided UIViewRoot.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewMetadata</class-interface>
      <method name="getViewActions" return-type="java.util.Collection">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2936</id>
      <description>Utility method to determine if the the provided UIViewRoot has metadata. The default implementation will return true if the provided UIViewRoot has a facet named UIViewRoot#METADATA_FACET_NAME and that facet has children. It will return false otherwise.</description>
      <package>jakarta.faces.view</package>
      <class-interface>ViewMetadata</class-interface>
      <method name="hasMetadata" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.component.UIViewRoot</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2937</id>
      <description>Subclasses that wish to take over the task of instantiating the UIComponent instance corresponding to this tag handler my override this method to do so. A null return from this method will cause the TagHandlerDelegate for instance to create the component instead.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentHandler</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:2938</id>
      <description>If this factory has been decorated, the implementation doing the decorating may override this method to provide access to the implementation being wrapped. A default implementation is provided that returns null.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>TagHandlerDelegateFactory</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.view.facelets.TagHandlerDelegateFactory" />
    </assertion>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- MODIFIED ASSERTIONS LISTED BELOW -->
    <!-- The original assertion is followed by the modified version -->
    <!-- of the assertion. Users must edit the file to verify -->
    <!-- that the modified assertion is correct. User should then -->
    <!-- delete the original assertion or use the style sheet -->
    <!-- that removes them automatically.  The original and modified -->
    <!-- assertions differ by their IDs, notice the original assertion -->
    <!-- now ends with "__OLD" -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JSF:JAVADOC:70</id>
      <description>Return the default ActionListener to be registered for all jakarta.faces.component.ActionSource components in this application. If not explicitly set, a default implementation must be provided that performs the functions as specified in the section titled "ActionListener Property" in the chapter titled "Application Integration" of the spec prose document. Note that the specification for the default ActionListener contiues to call for the use of a deprecated property (action) and class (MethodBinding). Unfortunately, this is necessary because the default ActionListener must continue to work with components that do not implement jakarta.faces.component.ActionSource2, and only implement jakarta.faces.component.ActionSource.</description>
      <package>jakarta.faces.application</package>
      <class-interface>Application</class-interface>
      <method name="getActionListener" return-type="jakarta.faces.event.ActionListener" />
    </assertion>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- REMOVED ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:1103</id>
      <description>if name is null</description>
      <package>jakarta.faces.context</package>
      <class-interface>ExternalContext</class-interface>
      <method name="encodeNamespace" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2655</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="FaceletFactory" return-type="FaceletFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2656</id>
      <description>Return a Facelet instance as specified by the file at the passed URI.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2657</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2658</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2659</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2660</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getMetadataFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2661</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getMetadataFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2662</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getMetadataFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2663</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getMetadataFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2664</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="getRefreshPeriod" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2666</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="FaceletFactoryWrapper" return-type="FaceletFactoryWrapper">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletFactory</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2667</id>
      <description>Return a Facelet instance as specified by the file at the passed URI.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2668</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2669</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2670</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2671</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getMetadataFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2672</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getMetadataFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2673</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getMetadataFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2674</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getMetadataFacelet" return-type="jakarta.faces.view.facelets.Facelet">
        <parameters>
          <parameter>java.net.URL</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2675</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getRefreshPeriod" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2677</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.view.facelets.FaceletFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2697</id>
      <description>Subclasses that wish to take over the task of instantiating the UIComponent instance corresponding to this tag handler my override this method to do so. A null return from this method will cause the TagHandlerDelegate for instance to create the component instead.</description>
      <package>jakarta.faces.view.facelets</package>
      <class-interface>ComponentHandler</class-interface>
      <method name="createCustomComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>jakarta.faces.view.facelets.FaceletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2698</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactory</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2699</id>
      <description />
      <package>jakarta.faces.view.facelets</package>
      <class-interface>FaceletFactoryWrapper</class-interface>
      <method name="createComponent" return-type="jakarta.faces.component.UIComponent">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2722</id>
      <description>Create an instance of Resource given the argument resourceName, which may contain "/" characters. The jakarta.faces.view.ViewDeclarationLanguage calls this method when it needs to load a view from a persistent store, such as a filesystem. This method is functionality equivalent to #createResource(java.lang.String), but all callsites that need to load VDL views must use this method so that classes that want to decorate the ResourceHandler in order to only affect the loading of views may do so without affecting the processing of other kinds of resources, such as scripts and stylesheets. A jakarta.faces.context.FacesContext must be present before calling this method. To preserve compatibility with prior revisions of the specification, a default implementation must be provided that calls #createResource(java.lang.String).</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createViewResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2723</id>
      <description>if resourceName is null.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandler</class-interface>
      <method name="createViewResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2724</id>
      <description>The default behavior of this method is to call ResourceHandler#createViewResource(String) on the wrapped ResourceHandler object.</description>
      <package>jakarta.faces.application</package>
      <class-interface>ResourceHandlerWrapper</class-interface>
      <method name="createViewResource" return-type="jakarta.faces.application.Resource">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2737</id>
      <description>Create (if needed) and return a Flash instance for this web application.</description>
      <package>jakarta.faces.context</package>
      <class-interface>FlashFactory</class-interface>
      <method name="getFlash" return-type="jakarta.faces.context.Flash">
        <parameters>
          <parameter>jakarta.faces.context.ExternalContext</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2807</id>
      <description>Return a data structure containing the attributes of this component that should be rendered directly to the output without interpretation by the jakarta.faces.render.Renderer. This method must never return . The returned implementation must support all of the standard and optional methods, plus support the following additional requirements. The implementation must implement . Any attempt to add a key or value must throw a . Any attempt to add a key that is not a must throw an .</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIComponentBase</class-interface>
      <method name="getPassThroughAttributes" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2811</id>
      <description>Components that permit per-use disabling of the appending of the ClientWindow in generated URLs must call this method first before rendering those URLs. The caller must call #enableClientWindowUrlQueryParameter(jakarta.faces.context.FacesContext) from a finally block after rendering the URL. If #CLIENT_WINDOW_MODE_PARAM_NAME is "url" without the quotes, all generated URLs that cause a GET request must append the ClientWindow by default. This is specified as a static method because callsites need to access it without having access to an actual instance.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="disableClientWindowUrlQueryParameter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2812</id>
      <description>Components that permit per-use disabling of the appending of the ClientWindow in generated URLs must call this method first after rendering those URLs. If #CLIENT_WINDOW_MODE_PARAM_NAME is "url" without the quotes, all generated URLs that cause a GET request must append the ClientWindow by default. This is specified as a static method because callsites need to access it without having access to an actual instance.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="enableClientWindowUrlQueryParameter" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2813</id>
      <description>Methods that append the ClientWindow to generated URLs must call this method to see if they are permitted to do so. If #CLIENT_WINDOW_MODE_PARAM_NAME is "url" without the quotes, all generated URLs that cause a GET request must append the ClientWindow by default. This is specified as a static method because callsites need to access it without having access to an actual instance.</description>
      <package>jakarta.faces.lifecycle</package>
      <class-interface>ClientWindow</class-interface>
      <method name="isClientWindowUrlQueryParameterEnabled" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      
      <id>JSF:JAVADOC:2878</id>
      <description>If there is a local value, return it, otherwise return the result of calling super.getVaue().</description>
      <package>jakarta.faces.component</package>
      <class-interface>UIInput</class-interface>
      <method name="getValue" return-type="java.lang.Object" />
    </assertion>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- NEW ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2939</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="Flow" return-type="Flow" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2940</id>
      <description>Obtain the current jakarta.faces.lifecycle.ClientWindow from the jakarta.faces.context.ExternalContext. Get the window's id and append "_" and the return from #getId. Return the result.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getClientWindowFlowId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.lifecycle.ClientWindow</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2941</id>
      <description>Return the immutable application unique identifier for the document in which the argument flow is defined.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getDefiningDocumentId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2942</id>
      <description>Return the MethodExpression that must be called by the runtime as the last thing that happens before exiting this flow. Any FlowScoped beans declared for this flow must remain in scope until after control returns from the method referenced by this MethodExpression.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getFinalizer" return-type="MethodExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2943</id>
      <description>Return the FlowCallNode that represents calling the targetFlow from this flow, or null if targetFlow cannot be reached from this flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getFlowCall" return-type="jakarta.faces.flow.FlowCallNode">
        <parameters>
          <parameter>jakarta.faces.flow.Flow</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2944</id>
      <description>Return an immutable data structure containing all the flow call nodes declared for this flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getFlowCalls" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2945</id>
      <description>Return the immutable id for this Flow. This must be unique within the defining document (such as an Application Configuration Resources file), but need not be unique within the entire application.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2946</id>
      <description>Return an immutable data structure containing the inbound parameters that have been declared for this flow. See FlowHandler#transition for the specification of how these parameters are used. Inbound parameters are associated with a specific flow instance, while outbound parameters are associated with a FlowCallNode that causes the transition to a new flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getInboundParameters" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2947</id>
      <description>Return the MethodExpression that must be called by the runtime immediately after activating any FlowScoped beans declared for this flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getInitializer" return-type="MethodExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2948</id>
      <description>Return an immutable data structure containing all the method call nodes declared for this flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getMethodCalls" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2949</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getNavigationCases" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2950</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getNode" return-type="jakarta.faces.flow.FlowNode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2951</id>
      <description>Return an immutable data structure containing all of the return nodes declared for this flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getReturns" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2952</id>
      <description>Return the immutable id for the default node that should be activated when this flow is entered.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getStartNodeId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2953</id>
      <description>Return an immutable data structure containing all of the switch nodes declared for this flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getSwitches" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2954</id>
      <description>Return an immutable data structure containing all of the view nodes declared for this flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Flow</class-interface>
      <method name="getViews" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2955</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowCallNode</class-interface>
      <method name="FlowCallNode" return-type="FlowCallNode" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2956</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowCallNode</class-interface>
      <method name="getCalledFlowDocumentId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2957</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowCallNode</class-interface>
      <method name="getCalledFlowId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2958</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowCallNode</class-interface>
      <method name="getOutboundParameters" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2959</id>
      <description>Add the argument Flow to the collection of Flows known to the current application. The implementation must be thread safe.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="addFlow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2960</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="addFlow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2961</id>
      <description>if there is already a flow with the same id as the argument Flow within the scope of the definingDocument.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="addFlow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2962</id>
      <description>if the id of the flow to add is null or the empty string.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="addFlow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2963</id>
      <description>if the definingDocumentId of the toAdd is null.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="addFlow" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2964</id>
      <description>Allow for flow transitions in the case of components rendered by the renderers from component-family jakarta.faces.OutcomeTarget. These transitions must happen at the front of the request processing lifecycle due to the HTTP GET based nature of such components. Therefore, this method is called from jakarta.faces.lifecycle.Lifecycle#attachWindow. Let flowId be the value in the request parameter map for the parameter whose name is given by the value of #FLOW_ID_REQUEST_PARAM_NAME. Let toFlowDocumentId be the value in the request parameter map for the paramater whose name is given by the value of #TO_FLOW_DOCUMENT_ID_REQUEST_PARAM_NAME. If toFlowDocumentId is null, take no action and return. Otherwise, let sourceFlow be the return from #getCurrentFlow(jakarta.faces.context.FacesContext). A null value indicates there is no current flow, which will be the case if this navigation is trying to enter a flow. If flowId is not null and toFlowDocumentId is not equal to the value of #NULL_FLOW, let targetFlow be the result of calling #getFlow(jakarta.faces.context.FacesContext, java.lang.String, java.lang.String), passing toFlowDocumentId and flowId as the last two arguments, respectively. If the result is non-null, let flowCallNode be the return from calling Flow#getFlowCall on the sourceFlow, passing targetFlow as the argument. Otherwise, targetFlow and flowCallNode must remain null, indicating that this is a flow return. Call FacesContext#getViewRoot() and let toViewId be the the return from calling jakarta.faces.component.UIViewRoot#getViewId on it. Call, #transition, passing the arguments gathered in the preceding algorithm.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="clientWindowTransition" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2965</id>
      <description>if context is null.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="clientWindowTransition" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2966</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="FlowHandler" return-type="FlowHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2967</id>
      <description>Return the currently active Flow for the argument FacesContext, or null if no flow is active. A Flow must always be associated with exactly one jakarta.faces.lifecycle.ClientWindow, but a ClientWindow may have multiple Flows. If #setReturnMode had been called with true as the argument before invoking this method, return the preceding flow on the stack instead of the actual current flow, or null if there is no preceding flow. Otherwise, return the current flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="getCurrentFlow" return-type="jakarta.faces.flow.Flow">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2968</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="getCurrentFlow" return-type="jakarta.faces.flow.Flow">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2969</id>
      <description>Convenience overload that calls FacesContext#getCurrentInstance() and then calls through to #getCurrentFlow(jakarta.faces.context.FacesContext).</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="getCurrentFlow" return-type="jakarta.faces.flow.Flow" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2970</id>
      <description>Return the Map that backs the #{flowScope} EL implicit object or null if no flow is currently active.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="getCurrentFlowScope" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2971</id>
      <description>Return the Flow whose id is equivalent to the argument id, within the scope of the argument definingDocument.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="getFlow" return-type="jakarta.faces.flow.Flow">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2972</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="getFlow" return-type="jakarta.faces.flow.Flow">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2973</id>
      <description>Return the last displayed viewId for the current flow, as returned by #getCurrentFlow(jakarta.faces.context.FacesContext), or null if there is no current flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="getLastDisplayedViewId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2974</id>
      <description>if context is null</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="getLastDisplayedViewId" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2975</id>
      <description>Return true if and only if the flow referenced by the argument definingDocument and id is currently active.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="isActive" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2976</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="isActive" return-type="boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2977</id>
      <description>Enable the correct handling of navigation when processing a return node. The default jakarta.faces.application.NavigationHandler specification requires calling this method with true before processing the navigation rules for the flow return, and calling this method with false, from a finally block, immediately afterward.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="setReturnMode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2978</id>
      <description>if context is null.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="setReturnMode" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>boolean</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2979</id>
      <description>Perform a transition in the flow graph for the current user's jakarta.faces.lifecycle.ClientWindow. Obtain references to the Flow instances corresponding to the origin and destination arguments. If the origin Flow is equal to the destination Flow, take no action and return null. Otherwise, if the outboundCallNode argument is non-null save aside the outbound parameters. For discussion evaluatedParams is a data structure that stores the evaluated values of any outbound parameters. It is necessary to evaluate these values before popping any flow scopes because the values may refer to scoped instances that need to be passed to the target flow, but will not be available once the new scope is activated. Save aside the outbound parameters using the following algorithm. If the outboundParameters property of outboundCallNode is non-null and not empty, and the inboundParameters property of the target flow is non-null and not empty, for each entry in the outbound parameters whose name matches an entry in the inbound parameters, evaluate the value of the parameter, and put the evaluated value into evaluatedParams under the corresponding name. Otherwise, consider evaluatedParams to be empty. If the destination Flow is a sub-flow of the origin Flow push the destination Flow onto the flow data structure and return the destination Flow. Otherwise, pop the current Flow from the flow data structure. If the destination Flow is non-null, make the destination Flow the current flow, pushing it onto the data structure. If evaluatedParams is not empty, for each entry, find the corresponding parameter in the target flow's inbound parameters and call its setValue method, passing the value from evaluatedParams.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="transition" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
          <parameter>jakarta.faces.flow.FlowCallNode</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2980</id>
      <description>if context or toViewId is null.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandler</class-interface>
      <method name="transition" return-type="void">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
          <parameter>jakarta.faces.flow.Flow</parameter>
          <parameter>jakarta.faces.flow.FlowCallNode</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2981</id>
      <description>Create the singleton instance of FlowHandler.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandlerFactory</class-interface>
      <method name="createFlowHandler" return-type="jakarta.faces.flow.FlowHandler">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2982</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandlerFactory</class-interface>
      <method name="FlowHandlerFactory" return-type="FlowHandlerFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2983</id>
      <description>Create the singleton instance of FlowHandler.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandlerFactoryWrapper</class-interface>
      <method name="createFlowHandler" return-type="jakarta.faces.flow.FlowHandler">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2984</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandlerFactoryWrapper</class-interface>
      <method name="FlowHandlerFactoryWrapper" return-type="FlowHandlerFactoryWrapper" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2985</id>
      <description>A class that implements this interface uses this method to return an instance of the class being wrapped.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowHandlerFactoryWrapper</class-interface>
      <method name="getWrapped" return-type="jakarta.faces.flow.FlowHandlerFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2986</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowNode</class-interface>
      <method name="FlowNode" return-type="FlowNode" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2987</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>FlowNode</class-interface>
      <method name="getId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2988</id>
      <description>If not empty, declare the defining document id within which the Flow referenced by #value is unique. If empty the, the runtime assumes that all flow ids are unique within the scope of the application.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowScoped</class-interface>
      <method name="definingDocumentId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2989</id>
      <description>Must be equivalent to the Flow#getId of a defined flow for this application.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>FlowScoped</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2990</id>
      <description>Return the MethodExpression to be invoked to when control passes to this node.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>MethodCallNode</class-interface>
      <method name="getMethodExpression" return-type="MethodExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2991</id>
      <description>Return the outcome to be used in the event of a null return from the method.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>MethodCallNode</class-interface>
      <method name="getOutcome" return-type="ValueExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2992</id>
      <description>Return the parameters to be passed to the method.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>MethodCallNode</class-interface>
      <method name="getParameters" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2993</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>MethodCallNode</class-interface>
      <method name="MethodCallNode" return-type="MethodCallNode" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2994</id>
      <description>Return the name of the parameter</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Parameter</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2995</id>
      <description>Return a ValueExpression for the value of the parameter. Depending on the context, this expression may only ever be evaluated in a "get" operation.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>Parameter</class-interface>
      <method name="getValue" return-type="ValueExpression" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2996</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>Parameter</class-interface>
      <method name="Parameter" return-type="Parameter" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2997</id>
      <description>Return the fromOutcome to be used when control passes to this return node.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>ReturnNode</class-interface>
      <method name="getFromOutcome" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2998</id>
      <description>if context is null.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>ReturnNode</class-interface>
      <method name="getFromOutcome" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:2999</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>ReturnNode</class-interface>
      <method name="ReturnNode" return-type="ReturnNode" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3000</id>
      <description>Return true if this case should be taken, false otherwise.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>SwitchCase</class-interface>
      <method name="getCondition" return-type="java.lang.Boolean">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3001</id>
      <description>Return the outcome to be used if #getCondition return true.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>SwitchCase</class-interface>
      <method name="getFromOutcome" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3002</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>SwitchCase</class-interface>
      <method name="SwitchCase" return-type="SwitchCase" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3003</id>
      <description>Return the cases in this switch.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>SwitchNode</class-interface>
      <method name="getCases" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3004</id>
      <description>Return the default outcome in this switch.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>SwitchNode</class-interface>
      <method name="getDefaultOutcome" return-type="java.lang.String">
        <parameters>
          <parameter>jakarta.faces.context.FacesContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3005</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>SwitchNode</class-interface>
      <method name="SwitchNode" return-type="SwitchNode" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3006</id>
      <description>Return the immutable VDL document id for this view node. This is normally the path to the VDL page that defines this view node. This must be unique within the flow.</description>
      <package>jakarta.faces.flow</package>
      <class-interface>ViewNode</class-interface>
      <method name="getVdlDocumentId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3007</id>
      <description />
      <package>jakarta.faces.flow</package>
      <class-interface>ViewNode</class-interface>
      <method name="ViewNode" return-type="ViewNode" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3008</id>
      <description>A MethodExpression that will be invoked when the flow is exited.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="finalizer" return-type="jakarta.faces.flow.builder.FlowBuilder">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3009</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="finalizer" return-type="jakarta.faces.flow.builder.FlowBuilder">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3010</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="FlowBuilder" return-type="FlowBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3011</id>
      <description>Define a flow call node. This node will cause the specified flow to be called, passing parameters if necessary.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="flowCallNode" return-type="jakarta.faces.flow.builder.FlowCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3012</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="flowCallNode" return-type="jakarta.faces.flow.builder.FlowCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3013</id>
      <description>Called as the last step in flow definition, this method must perform any implementation specific initialization and return the built Flow. If called more than one time during a given flow building process, the second and subsequent invocations must take no action and return the built flow.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="getFlow" return-type="jakarta.faces.flow.Flow" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3014</id>
      <description>if the #id method had not been called prior to this method being called.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="getFlow" return-type="jakarta.faces.flow.Flow">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3015</id>
      <description>Set the defining document id and flow id of this flow.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="id" return-type="jakarta.faces.flow.builder.FlowBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3016</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="id" return-type="jakarta.faces.flow.builder.FlowBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3017</id>
      <description>A parameter that will be populated with the value from a correspondingly named outbound parameter from another flow when this flow is entered from that flow.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="inboundParameter" return-type="jakarta.faces.flow.builder.FlowBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3018</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="inboundParameter" return-type="jakarta.faces.flow.builder.FlowBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3019</id>
      <description>A MethodExpression that will be invoked when the flow is entered.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="initializer" return-type="jakarta.faces.flow.builder.FlowBuilder">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3020</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="initializer" return-type="jakarta.faces.flow.builder.FlowBuilder">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3021</id>
      <description>Define a method call node. This node will cause the specified method to be invoked, passing parameters if necessary. The return from the method is used as the outcome for where to go next in the flow. If the method is a void method, the default outcome is used.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="methodCallNode" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3022</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="methodCallNode" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3023</id>
      <description>Define a particular combination of conditions that must match for this case to be executed, and the view id of the component tree that should be selected next.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="navigationCase" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3024</id>
      <description>Define a return node. This node will cause the specified outcome to be returned to the calling flow.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="returnNode" return-type="jakarta.faces.flow.builder.ReturnBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3025</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="returnNode" return-type="jakarta.faces.flow.builder.ReturnBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3026</id>
      <description>Define a particular list of cases that will be inspected in the order they are defined to determine where to go next in the flow graph. If none of the cases match, the outcome from the default case is chosen.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="switchNode" return-type="jakarta.faces.flow.builder.SwitchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3027</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="switchNode" return-type="jakarta.faces.flow.builder.SwitchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3028</id>
      <description>Define a view node in a flow graph.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="viewNode" return-type="jakarta.faces.flow.builder.ViewBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3029</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowBuilder</class-interface>
      <method name="viewNode" return-type="jakarta.faces.flow.builder.ViewBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3030</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowCallBuilder</class-interface>
      <method name="FlowCallBuilder" return-type="FlowCallBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3031</id>
      <description>Define the flow reference of the called flow.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowCallBuilder</class-interface>
      <method name="flowReference" return-type="jakarta.faces.flow.builder.FlowCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3032</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowCallBuilder</class-interface>
      <method name="flowReference" return-type="jakarta.faces.flow.builder.FlowCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3033</id>
      <description>Mark this node as the start node in the flow. Any other node that had been marked as the start node will no longer be the start node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowCallBuilder</class-interface>
      <method name="markAsStartNode" return-type="jakarta.faces.flow.builder.FlowCallBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3034</id>
      <description>Define an outbound parameter for the flow call.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowCallBuilder</class-interface>
      <method name="outboundParameter" return-type="jakarta.faces.flow.builder.FlowCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3035</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>FlowCallBuilder</class-interface>
      <method name="outboundParameter" return-type="jakarta.faces.flow.builder.FlowCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3036</id>
      <description>If the method is a void method, or the method returns null, this can be used to specify what value should be passed to runtime when the method returns.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="defaultOutcome" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3037</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="defaultOutcome" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3038</id>
      <description>If the method is a void method, or the method returns null, this can be used to specify what value should be passed to runtime when the method returns.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="defaultOutcome" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3039</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="defaultOutcome" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3040</id>
      <description>Set the method expression of this method call node. The method signature of the argument methodExpression must match the number and type of the parameters passed in the #parameters method.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="expression" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3041</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="expression" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>MethodExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3042</id>
      <description>Set the method expression of this method call node. The method signature of the argument methodExpression must match the number and type of the parameters passed in the #parameters method.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="expression" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3043</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="expression" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3044</id>
      <description>Mark this node as the start node in the flow. Any other node that had been marked as the start node will no longer be the start node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="markAsStartNode" return-type="jakarta.faces.flow.builder.MethodCallBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3045</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="MethodCallBuilder" return-type="MethodCallBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3046</id>
      <description>Set the parameters of the method call node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="parameters" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3047</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>MethodCallBuilder</class-interface>
      <method name="parameters" return-type="jakarta.faces.flow.builder.MethodCallBuilder">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3048</id>
      <description>Set the if of the current navigation case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="condition" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3049</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="condition" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3050</id>
      <description>Set the if of the current navigation case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="condition" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3051</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="condition" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3052</id>
      <description>Set the from-action of the current navigation case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="fromAction" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3053</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="fromAction" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3054</id>
      <description>Set the from-outcome of the current navigation case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="fromOutcome" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3055</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="fromOutcome" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3056</id>
      <description>Set the from-view-id of the current navigation case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="fromViewId" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3057</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="fromViewId" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3058</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="NavigationCaseBuilder" return-type="NavigationCaseBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3059</id>
      <description>Create a redirect within this navigation case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="redirect" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder.NavigationCaseBuilder.RedirectBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3060</id>
      <description>Set the to-flow-document-id of the current navigation case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="toFlowDocumentId" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3061</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="toFlowDocumentId" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3062</id>
      <description>Set the to-view-id of the current navigation case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="toViewId" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3063</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder</class-interface>
      <method name="toViewId" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3064</id>
      <description>Indicates the current redirect should include view parameters.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder.RedirectBuilder</class-interface>
      <method name="includeViewParams" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder.NavigationCaseBuilder.RedirectBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3065</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder.RedirectBuilder</class-interface>
      <method name="NavigationCaseBuilder.RedirectBuilder" return-type="NavigationCaseBuilder.RedirectBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3066</id>
      <description>Add a parameter to the redirect.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder.RedirectBuilder</class-interface>
      <method name="parameter" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder.NavigationCaseBuilder.RedirectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3067</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NavigationCaseBuilder.RedirectBuilder</class-interface>
      <method name="parameter" return-type="jakarta.faces.flow.builder.NavigationCaseBuilder.NavigationCaseBuilder.RedirectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3068</id>
      <description>Mark this node as the start node in the flow. Any other node that had been marked as the start node will no longer be the start node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>NodeBuilder</class-interface>
      <method name="markAsStartNode" return-type="jakarta.faces.flow.builder.NodeBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3069</id>
      <description>Set the outcome of the current return node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>ReturnBuilder</class-interface>
      <method name="fromOutcome" return-type="jakarta.faces.flow.builder.ReturnBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3070</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>ReturnBuilder</class-interface>
      <method name="fromOutcome" return-type="jakarta.faces.flow.builder.ReturnBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3071</id>
      <description>Set the outcome of the current return node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>ReturnBuilder</class-interface>
      <method name="fromOutcome" return-type="jakarta.faces.flow.builder.ReturnBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3072</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>ReturnBuilder</class-interface>
      <method name="fromOutcome" return-type="jakarta.faces.flow.builder.ReturnBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3073</id>
      <description>Mark this node as the start node in the flow. Any other node that had been marked as the start node will no longer be the start node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>ReturnBuilder</class-interface>
      <method name="markAsStartNode" return-type="jakarta.faces.flow.builder.ReturnBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3074</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>ReturnBuilder</class-interface>
      <method name="ReturnBuilder" return-type="ReturnBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3075</id>
      <description>Set the default outcome of the current switch.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchBuilder</class-interface>
      <method name="defaultOutcome" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3076</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchBuilder</class-interface>
      <method name="defaultOutcome" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3077</id>
      <description>Set the default outcome of the current switch.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchBuilder</class-interface>
      <method name="defaultOutcome" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3078</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchBuilder</class-interface>
      <method name="defaultOutcome" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3079</id>
      <description>Mark this node as the start node in the flow. Any other node that had been marked as the start node will no longer be the start node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchBuilder</class-interface>
      <method name="markAsStartNode" return-type="jakarta.faces.flow.builder.SwitchBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3080</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchBuilder</class-interface>
      <method name="SwitchBuilder" return-type="SwitchBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3081</id>
      <description>Create a switch case in the current switch.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchBuilder</class-interface>
      <method name="switchCase" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3082</id>
      <description>Set the if in the previously created switch case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchCaseBuilder</class-interface>
      <method name="condition" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3083</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchCaseBuilder</class-interface>
      <method name="condition" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder">
        <parameters>
          <parameter>ValueExpression</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3084</id>
      <description>Set the outcome in the previously created switch case.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchCaseBuilder</class-interface>
      <method name="fromOutcome" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3085</id>
      <description>if any of the parameters are null</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchCaseBuilder</class-interface>
      <method name="fromOutcome" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3086</id>
      <description>Create a new case in the current switch.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchCaseBuilder</class-interface>
      <method name="switchCase" return-type="jakarta.faces.flow.builder.SwitchCaseBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3087</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>SwitchCaseBuilder</class-interface>
      <method name="SwitchCaseBuilder" return-type="SwitchCaseBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3088</id>
      <description>Mark this node as the start node in the flow. Any other node that had been marked as the start node will no longer be the start node.</description>
      <package>jakarta.faces.flow.builder</package>
      <class-interface>ViewBuilder</class-interface>
      <method name="markAsStartNode" return-type="jakarta.faces.flow.builder.ViewBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      
      <id>JSF:JAVADOC:3089</id>
      <description />
      <package>jakarta.faces.flow.builder</package>
      <class-interface>ViewBuilder</class-interface>
      <method name="ViewBuilder" return-type="ViewBuilder" />
    </assertion>
  </assertions>
</javadoc>


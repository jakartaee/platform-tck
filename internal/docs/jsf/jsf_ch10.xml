<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2009, 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!-- =============================== Chapter 10 ============================ -->

<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Facelet pages are authored in XHTML. The runtime must support all XHTML
        pages that confirm with the XHTML-1.0-Transitional DTD, as described at
        http://www.w3.org/TR/xhtml1/#a_dtd_XHTML-1.0-Transitional
    </description>
    <location chapter="10" section="3.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The runtime must support the following syntax for making the tags in a
        tag library available for use in a Facelet page.
        &lt;html xmlns="http://www.w3.org/1999/xhtml"
                 xmlns:prefix="namespace_uri"&gt;
    </description>
    <location chapter="10" section="3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The runtime must support the following syntax for making the tags in a
        tag library available for use in a Facelet page
    </description>
    <location chapter="10" section="3.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Via declaration in the web.xml, as specified in Section11.1.3
                “Application Configuration Parameters”
            </description>
            <location chapter="10" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Via auto discovery by placing the tag library discriptor file
                within a jar on the web application classpath, naming the
                file so that it ends with “.taglib.xml”, without the quotes,
                and placing the file in the META-INF directory in the jar file
            </description>
            <location chapter="10" section="3.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
         Failure to parse, process and otherwise interpret any of the tag
         library files discovered must cause the application to fail to deploy
         and must cause an informative error message to be logged.
    </description>
    <location chapter="10" section="3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
         The runtime must support the following two ways of declaring a
         composite component library.
    </description>
    <location chapter="10" section="3.3.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                If a facelet taglibrary is declared in an XHTML page with a
                namespace starting with the string
                “http://java.sun.com/jsf/composite/” (without the quotes),
                the remainder of the namespace declaration is taken as the name
                of a resource library as described in Section2.6.1.4 “Libraries
                of Localized and Versioned Resources
            </description>
            <location chapter="10" section="3.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                the runtime must also support the &lt;composite-library-name&gt;
                element.
            </description>
            <location chapter="10" section="3.3.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
         If, during the process of building the view, the facelet runtime
         encounters an element in the page using the prefix for the namespace of
         a composite component library, the runtime must create a Resource
         instance with a library property equal to the library name derived in
         Section10.3.3.1 “Declaring a composite component library for use in a
         Facelet page”and call the variant of application.createComponent() that
         takes a Resource.
    </description>
    <location chapter="10" section="3.3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
         After causing the top level component to be instantiated, the runtime
         must create a UIComponent with component- family of jakarta.faces.Panel
         and renderer-type jakarta.faces.Group to be installed as a facet of the
         top level component under the facet name
         UIComponent.COMPOSITE_FACET_NAME.
    </description>
    <location chapter="10" section="3.3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The runtime must support the use of composite: tag library in the
        defining page pointed to by the Resource derived as specified in
        Section10.3.3.2 “Creating an instance of a top level component”
    </description>
    <location chapter="10" section="3.3.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The runtime must ensure that all UIComponent children in the composite
        component definition within the defining page are placed as children of
        the UIComponent.COMPOSITE_FACET_NAME facet of the top level facet
    </description>
    <location chapter="10" section="3.3.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The runtime must ensure that all such attributes are copied to the
        attributes map of the top level component instance in the following
        manner.
    </description>
    <location chapter="10" section="3.3.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Obtain a reference to the ExpressionFactory, for discussion
                called expressionFactory.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Let the value of the attribute in the using page be value.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                If value is “id” or “binding” without the quotes, skip to the
                next attribute.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                f the value of the attribute starts with “#{“ (without the
                quotes) call expressionFactory.createValueExpression(elContext,
                value, Object.class)
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                If the value of the attribute does not start with “#{“, call
                expressionFactory.createValueExpression(value, Object.class)
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                If there already is a key in the map for value, inspect the type
                of the value at that key. If the type is MethodExpression take
                no action.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
          If the type of the attribute is a MethodExpression, the code that
          takes the value of the attribute and creates an actual
          MethodExpression instance around it must take the following special
          action.
    </description>
    <location chapter="10" section="3.3.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Obtain a reference to the current composite component by calling
                UIComponent.getCurrentCompositeComponent().
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Look in the attribute of the component for a key under the value
                attrName.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                There must be a value and it must be of type MethodExpression.
                If either of these conditions are false allow the ensuing
                exception to be thrown.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                Call invoke() on the discovered MethodExpression, passing the
                arguments passed to our invoke() method.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The String value for identifiers specified for execute and render may be
        specified as a search expression as outlined in the JavaDocs for
        UIComponent.findComponent.The implementation must resolve these
        identifiers as specified for UIComponent.findComponent.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        A TagAttibuteException must be thrown if an “event” attribute value is
        specified that does not match the events supported by the component
        type.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The event attribute that is specified, must be one of the events
        returned from the ClientBehaviorHolder component implementation of
        ClientBehaviorHolder.getEventNames.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If an event is not specified the value returned from the component
        implementation of ClientBehaviorHolder.getDefaultEventName must be used.
        If the event is still not determined, a TagAttributeException must be
        thrown.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If an event is not specified the value returned from the component
        implementation of ClientBehaviorHolder.getDefaultEventName must be used.
        If the event is still not determined, a TagAttributeException must be
        thrown.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The "Description" tag handler must create an instance of
        jakarta.faces.component.behavior.AjaxBehavior instance using the tag
        attribute values.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        If teh "Description" tag is nested within a single ClientBehaviorHolder
        component:
    </description>
    <location chapter="10" section="4.1.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                If the event attribute is not specified, determine the event by
                calling the component’s getDefaultEventName method. If that
                returns null, throw an exception.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If the event attribute is specified, ensure that it is a valid
                event - that is one of the events contained in the Collection
                returned from getEventNames method. If it does not exist in this
                Collection, throw an exception.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Add the AjaxBehavior to the component by calling the addBehavior
                method, passing the event and AjaxBehavior instance.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        When the VDL calls for the creation of a UIComponent instance, after
        calling Application.createComponent() to instantiate the component
        instance, and after calling setRendererType() on the newly instantiated
        component instance, the following action must be taken.
    </description>
    <location chapter="10" section="5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Obtain the Renderer for this component. If no Renderer is
                present, ignore the following steps.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Call getClass() on the Renderer instance and inspect if the
                ListenerFor annotation is present. If so, inspect if the
                Renderer instance implements ComponentSystemEventListener. If
                neither of these conditions are true, ignore the following
                steps.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Obtain the value of the systemEventClass() property of the
                ListenerFor annotation on the Renderer instance.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                Call subscribeToEvent() on the UIComponent instance from which
                the Renderer instance was obtained, using the systemEventClass
                from the annotation as the second argument, and the Renderer
                instance as the third argument.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
    </sub-assertions>
</assertion>

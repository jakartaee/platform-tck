<?xml version="1.0" ?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet type="text/xsl" href='https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/javadoc_assertions-colors.xsl'?>

<javadoc>
<next-available-id>2219</next-available-id>
<previous-id>1</previous-id>
<technology>JSF</technology>
<id>JSF 2.3</id>
<name>Java Server Faces</name>
<version>2.3</version>
<assertions>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1</id>
<description>
                            Construct a new exception with no detail message or root cause.
                            
                        </description>
<package>jakarta.faces</package>
<class-interface>FacesException</class-interface>
<method name="FacesException" return-type="FacesException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2</id>
<description>
                            Construct a new exception with the specified detail message and  no root cause.
                            
                        </description>
<package>jakarta.faces</package>
<class-interface>FacesException</class-interface>
<method name="FacesException" return-type="FacesException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>3</id>
<description>
                            Construct a new exception with the specified root cause.
                              The detail  message will be set to (cause == null ? null :  cause.toString()
                        </description>
<package>jakarta.faces</package>
<class-interface>FacesException</class-interface>
<method name="FacesException" return-type="FacesException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>4</id>
<description>
                            Construct a new exception with the specified detail message and  root cause.
                            
                        </description>
<package>jakarta.faces</package>
<class-interface>FacesException</class-interface>
<method name="FacesException" return-type="FacesException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>5</id>
<description>
                            Return the cause of this exception, or null if the  cause is nonexistent or unknown.
                            
                        </description>
<package>jakarta.faces</package>
<class-interface>FacesException</class-interface>
<method name="getCause" return-type="java.lang.Throwable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>6</id>
<description>
                            Create (if necessary) and return a per-web-application instance of  the appropriate implementation class for the specified JavaServer Faces  factory class, based on the discovery algorithm described in the  class description.
                            
                        </description>
<package>jakarta.faces</package>
<class-interface>FactoryFinder</class-interface>
<method name="getFactory" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>7</id>
<description>if the web application class loader   cannot be identified</description>
<package>jakarta.faces</package>
<class-interface>FactoryFinder</class-interface>
<method name="getFactory" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.faces.FacesException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>8</id>
<description>if factoryName does not   identify a standard JavaServer Faces factory name</description>
<package>jakarta.faces</package>
<class-interface>FactoryFinder</class-interface>
<method name="getFactory" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>9</id>
<description>if there is no configured factory   implementation class for the specified factory name</description>
<package>jakarta.faces</package>
<class-interface>FactoryFinder</class-interface>
<method name="getFactory" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>10</id>
<description>if factoryname   is null</description>
<package>jakarta.faces</package>
<class-interface>FactoryFinder</class-interface>
<method name="getFactory" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>11</id>
<description>
                            Release any references to factory instances associated with the  class loader for the calling web application.
                              This method should be  called as apart of web application shutdown in a container where the  JavaServer Faces API classes are part of the container itself, rather  than being included inside the web application.
                        </description>
<package>jakarta.faces</package>
<class-interface>FactoryFinder</class-interface>
<method name="releaseFactories" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>12</id>
<description>if the web application class loader   cannot be identified</description>
<package>jakarta.faces</package>
<class-interface>FactoryFinder</class-interface>
<method name="releaseFactories" return-type="void">
<throw>jakarta.faces.FacesException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>13</id>
<description/>
<package>jakarta.faces.application</package>
<class-interface>Action</class-interface>
<method name="Action" return-type="Action"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>14</id>
<description>
                            
                            Perform the task that is encapsulated in this Action  instance, and return a String value that is a logical description  of the outcome of performing that task.
                              Exceptions encountered  during the performance of the task should be encapsulated into  appropriate return values.
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Action</class-interface>
<method name="invoke" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>15</id>
<description/>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="Application" return-type="Application"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>16</id>
<description>
                            
                            
                            Return the ActionListener that will be the default  ActionListener to be registered with relevant components  during the Reconstitute Component Tree phase of the  request processing lifecycle.
                            
                              The default implementation will  perform the following functions:    The getPhaseId() method of this listener instance      must return PhaseId.INVOKE_APPLICATION.  If the source component has a non-null action      property, return that value.  If the source component has a non-null actionRef      property, evaluate this value reference to retrieve the      corresponding object.  If there is no such corresponding object, or if this object      does not implement Action, throw an      IllegalArgumentException.  Call the invoke() method of the returned object,      and return the return value from that method call.  
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="getActionListener" return-type="jakarta.faces.event.ActionListener"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>17</id>
<description>
                            
                            
                            Return the NavigationHandler instance that will be passed  the outcome returned by any invoked Action for this  web application.
                            
                              The default implementation must provide the behavior  described in the NavigationHandler class description.
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="getNavigationHandler" return-type="jakarta.faces.application.NavigationHandler"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>18</id>
<description>
                            
                            Return the PropertyResolver instance that will be utilized  to resolve action and valus references.
                            
                              The default implementation  must provide the behavior described in the  PropertyResolver class description.
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="getPropertyResolver" return-type="jakarta.faces.el.PropertyResolver"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>19</id>
<description>
                            
                            Return a ValueBinding for the specified action or value  reference expression, which may be used to manipulate the corresponding  property value later.
                            
                            
                            
                            
                            
                            
                            
                            
                              The returned ValueBinding instance must  utilize the PropertyResolver and VariableResolver  instances registered with this Application instance at the  time that the ValueBinding instance was initially created.   For maximum performance, implementations of Application  may, but are not required to, cache ValueBinding instances  in order to avoid repeated parsing of the reference expression.  However, under no circumstances may a particular ValueBinding  instance be shared across multiple web applications.
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>20</id>
<description>if the specified ref   has invalid syntax</description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.faces.el.ReferenceSyntaxException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>21</id>
<description>if ref   is null</description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="getValueBinding" return-type="jakarta.faces.el.ValueBinding">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>22</id>
<description>
                            
                            Return the VariableResolver instance that will be utilized  to resolve action and value references.
                            
                              The default implementation  must provide the behavior described in the  VariableResolver class description.
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="getVariableResolver" return-type="jakarta.faces.el.VariableResolver"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>23</id>
<description>
                            
                            Replace the default ActionListener that will be registered  with relevant components during the Reconstitute Component Tree  phase of the requset processing lifecycle.
                              This  listener must return PhaseId.INVOKE_APPLICATION from its  getPhaseId() method.
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setActionListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>24</id>
<description>if the specified   listener does not return   PhaseId.INVOKE_APPLICATION from its   getPhaseId() method</description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setActionListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionListener</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>25</id>
<description>if listener   is null</description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setActionListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>26</id>
<description>
                            
                            
                            Set the NavigationHandler instance that will be passed  the outcome returned by any invoked Action for this  web application.
                            
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setNavigationHandler" return-type="void">
<parameters>
<parameter>jakarta.faces.application.NavigationHandler</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>27</id>
<description>if handler   is null</description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setNavigationHandler" return-type="void">
<parameters>
<parameter>jakarta.faces.application.NavigationHandler</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>28</id>
<description>
                            
                            Set the PropertyResolver instance that will be utilized  to resolve action and value references.
                            
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setPropertyResolver" return-type="void">
<parameters>
<parameter>jakarta.faces.el.PropertyResolver</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>29</id>
<description>if resolver   is null</description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setPropertyResolver" return-type="void">
<parameters>
<parameter>jakarta.faces.el.PropertyResolver</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>30</id>
<description>
                            
                            Set the VariableResolver instance that will be utilized  to resolve action and value references.
                            
                        </description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setVariableResolver" return-type="void">
<parameters>
<parameter>jakarta.faces.el.VariableResolver</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>31</id>
<description>if resolver   is null</description>
<package>jakarta.faces.application</package>
<class-interface>Application</class-interface>
<method name="setVariableResolver" return-type="void">
<parameters>
<parameter>jakarta.faces.el.VariableResolver</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>32</id>
<description/>
<package>jakarta.faces.application</package>
<class-interface>ApplicationFactory</class-interface>
<method name="ApplicationFactory" return-type="ApplicationFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>33</id>
<description>
                            
                            Create (if needed) and return an Application instance  for this web application.
                            
                        </description>
<package>jakarta.faces.application</package>
<class-interface>ApplicationFactory</class-interface>
<method name="getApplication" return-type="jakarta.faces.application.Application"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>34</id>
<description>
                            
                            Replace the Application instance that will be  returned for this web application.
                            
                        </description>
<package>jakarta.faces.application</package>
<class-interface>ApplicationFactory</class-interface>
<method name="setApplication" return-type="void">
<parameters>
<parameter>jakarta.faces.application.Application</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>35</id>
<description>
                            
                            
                            Perform navigation processing based on the state information  in the specified FacesContext, plus the outcome string  returned by an executed Action.
                            
                        </description>
<package>jakarta.faces.application</package>
<class-interface>NavigationHandler</class-interface>
<method name="handleNavigation" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>36</id>
<description>if context or   outcome is null</description>
<package>jakarta.faces.application</package>
<class-interface>NavigationHandler</class-interface>
<method name="handleNavigation" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>37</id>
<description/>
<package>jakarta.faces.application</package>
<class-interface>NavigationHandler</class-interface>
<method name="NavigationHandler" return-type="NavigationHandler"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>38</id>
<description/>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="AttributeDescriptor" return-type="AttributeDescriptor"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>39</id>
<description>
                            Return a brief description of this attribute, useful when  rendering help text in a tool, localized for the default  Locale for this instance of the Java Virtual Machine.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="getDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>40</id>
<description>
                            Return a brief description of this attribute, useful when  rendering help text in a tool, localized for the specified  Locale.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="getDescription" return-type="java.lang.String">
<parameters>
<parameter>java.util.Locale</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>41</id>
<description>if locale   is null</description>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="getDescription" return-type="java.lang.String">
<parameters>
<parameter>java.util.Locale</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>42</id>
<description>
                            Return a short displayable name of this attribute, useful in  constructing the user interface of a tool, localized for the  default Locale for this instance of the Java Virtual  Machine.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="getDisplayName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>43</id>
<description>
                            Return a short displayable name of this attribute, useful in  constructing the user interface of a tool, localized for the  specified Locale.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="getDisplayName" return-type="java.lang.String">
<parameters>
<parameter>java.util.Locale</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>44</id>
<description>if locale   is null</description>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="getDisplayName" return-type="java.lang.String">
<parameters>
<parameter>java.util.Locale</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>45</id>
<description>
                            Return the attribute name of the attribute described by this  AttributeDescriptor.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>46</id>
<description>
                            Return the Java class representing the data type of the legal  values for this attribute.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>AttributeDescriptor</class-interface>
<method name="getType" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>47</id>
<description>
                            
                            Add the specified UIComponent to the namespace of this  naming container.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>48</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>49</id>
<description>if the component identifier of   the specified component is not unique within the namespace of this   naming container</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>50</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>51</id>
<description>
                            
                            Find and return a UIComponent in this namespace, if it  is present; otherwise return null.
                            
                            
                            
                               If the argument name does not contain any UIComponent#SEPARATOR_CHAR characters, it is interpreted to be a  name in the namespace of this naming container.   If the argument name does contain UIComponent#SEPARATOR_CHAR characters, each segment between  UIComponent#SEPARATOR_CHAR is treated as a component  identifier in its own namespace, which are searched for in  child naming containers of this naming container, from left  to right.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>52</id>
<description>if name is malformed</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>53</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>54</id>
<description>
                            Generate an identifier for a component, suitable for communication  to a client.
                              The identifier returned from this method must be unique  within this namespace.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="generateClientId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>55</id>
<description>
                            
                            Remove the specified UIComponent from the namespace of  this naming container, if it is present.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>56</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>57</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainer</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>58</id>
<description>
                            
                            Add the specified UIComponent to the namespace of this  naming container.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>59</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>60</id>
<description>if the component identifier of   the specified component is not unique within the namespace of this   naming container</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>61</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>62</id>
<description>
                            
                            Find and return a UIComponent in this namespace, if it  is present; otherwise return null.
                            
                            
                            
                               If the argument name does not contain any UIComponent#SEPARATOR_CHAR characters, it is interpreted to be a  name in the namespace of this naming container.   If the argument name does contain UIComponent#SEPARATOR_CHAR characters, each segment between  UIComponent#SEPARATOR_CHAR is treated as a component  identifier in its own namespace, which are searched for in  child naming containers of this naming container, from left  to right.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>63</id>
<description>if name is malformed</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>64</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>65</id>
<description>
                            Generate an identifier for a component, suitable for communication  to a client.
                              The identifier returned from this method must be unique  within this namespace.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="generateClientId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>66</id>
<description/>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="NamingContainerSupport" return-type="NamingContainerSupport"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>67</id>
<description>
                            
                            Remove the specified UIComponent from the namespace of  this naming container, if it is present.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>68</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>69</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>NamingContainerSupport</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>70</id>
<description>
                            Return a description of this item, for use in development tools.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>SelectItem</class-interface>
<method name="getDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>71</id>
<description>
                            Return the label of this item, to be rendered visibly for the user.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>SelectItem</class-interface>
<method name="getLabel" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>72</id>
<description>
                            Return the value of this item, to be returned as a request parameter  if this item is selected by the user.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>SelectItem</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>73</id>
<description>
                            Construct a UISelectItem instance with the specified  property values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>SelectItem</class-interface>
<method name="SelectItem" return-type="SelectItem">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>74</id>
<description>
                            
                            
                            Add a new ActionListener to the set of listeners interested  in being notified when ActionEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="addActionListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>75</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="addActionListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>76</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>77</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>78</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>79</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>80</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>81</id>
<description>
                            
                            Queue an ActionEvent for processing during the next  event processing cycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="fireActionEvent" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>82</id>
<description>
                            
                            Return the literal action outcome value to be returned to the  jakarta.faces.event.ActionListener processing application level  events for this application.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="getAction" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>83</id>
<description>
                            
                            Return the action reference expression pointing at the  jakarta.faces.application.Action to be invoked, if this component  is activated by the user, during Invoke Application phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="getActionRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>84</id>
<description>
                            
                            Return the command name for this UICommand.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="getCommandName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>85</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>86</id>
<description>
                            
                            
                            Remove an existing ActionListener (if any) from the set of  listeners interested in being notified when ActionEvents  occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="removeActionListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>87</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="removeActionListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>88</id>
<description>
                            Set the literal action outcome value for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="setAction" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>89</id>
<description>
                            
                            Set the action reference expression pointing at the  jakarta.faces.application.Action to be invoked, if this component  is activated by the user, during Invoke Application phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="setActionRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>90</id>
<description>
                            
                            Set the command name for this UICommand.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="setCommandName" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>91</id>
<description>
                            
                            Create a new UICommand instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="UICommand" return-type="UICommand"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>92</id>
<description>
                            Override the default behavior and perform no model update.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>93</id>
<description>if the modelReference   property has invalid syntax for an expression</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>94</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>95</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>96</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>97</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>98</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>99</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>100</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>101</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>102</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>103</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>104</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>105</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>106</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>107</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>108</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>109</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>110</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>111</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>112</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>113</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>114</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>115</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>116</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>117</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>118</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>119</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>120</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>121</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>122</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>123</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>124</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>125</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>126</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>127</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>128</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>129</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>130</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>131</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>132</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>133</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>134</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>135</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>136</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>137</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>138</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>139</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>140</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>141</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>142</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>143</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>144</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>145</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>146</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>147</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>148</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>149</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>150</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>151</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>152</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>153</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>154</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>155</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>156</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>157</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>158</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>159</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>160</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>161</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>162</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>163</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>164</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>165</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>166</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>167</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>168</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>169</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>170</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>171</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>172</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>173</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>174</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>175</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>176</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>177</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>178</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>179</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>180</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>181</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UICommand.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>182</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>183</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>184</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>185</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>186</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>187</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>188</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>189</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>190</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>191</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>192</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>193</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>194</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>195</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>196</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>197</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>198</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>199</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>200</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>201</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>202</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>203</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>204</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>205</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>206</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>207</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>208</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>209</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>210</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>211</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>212</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>213</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>214</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>215</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>216</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>217</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>218</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>219</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>220</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>221</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>222</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>223</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>224</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>225</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>226</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>227</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>228</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>229</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>230</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>231</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>232</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>233</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>234</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>235</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>236</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>237</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>238</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>239</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>240</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>241</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>242</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>243</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>244</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>245</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>246</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>247</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>248</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>249</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>250</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>251</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>252</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>253</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>254</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>255</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>256</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>257</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>258</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>259</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>260</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>261</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>262</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>263</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>264</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>265</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>266</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>267</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>268</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>269</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>270</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>271</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>272</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>273</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>274</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>275</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>276</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponent</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>277</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>278</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>279</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>280</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>281</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>282</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>283</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>284</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>285</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>286</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>287</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>288</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>289</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>290</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>291</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>292</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>293</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>294</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>295</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>296</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>297</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>298</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>299</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>300</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>301</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>302</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>303</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>304</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>305</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>306</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>307</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>308</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>309</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>310</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>311</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>312</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>313</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>314</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>315</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>316</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>317</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>318</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>319</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>320</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>321</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>322</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>323</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>324</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>325</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>326</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>327</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>328</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>329</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>330</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>331</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>332</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>333</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>334</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>335</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>336</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>337</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>338</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>339</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>340</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>341</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>342</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>343</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>344</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>345</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>346</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>347</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>348</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>349</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>350</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>351</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>352</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>353</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>354</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>355</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>356</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>357</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>358</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>359</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>360</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>361</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>362</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>363</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>364</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>365</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>366</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>367</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>368</id>
<description/>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="UIComponentBase" return-type="UIComponentBase"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>369</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>370</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>371</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>372</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIComponentBase</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>373</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>374</id>
<description>
                            
                            Return the form name for this UIForm.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm</class-interface>
<method name="getFormName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>375</id>
<description>
                            
                            Set the form name for this UIForm.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm</class-interface>
<method name="setFormName" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>376</id>
<description>
                            
                            Create a new UIForm instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm</class-interface>
<method name="UIForm" return-type="UIForm"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>377</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>378</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>379</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>380</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>381</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>382</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>383</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>384</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>385</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>386</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>387</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>388</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>389</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>390</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>391</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>392</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>393</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>394</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>395</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>396</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>397</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>398</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>399</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>400</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>401</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>402</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>403</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>404</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>405</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>406</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>407</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>408</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>409</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>410</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>411</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>412</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>413</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>414</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>415</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>416</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>417</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>418</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>419</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>420</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>421</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>422</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>423</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>424</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>425</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>426</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>427</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>428</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>429</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>430</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>431</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>432</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>433</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>434</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>435</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>436</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>437</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>438</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>439</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>440</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>441</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>442</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>443</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>444</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>445</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>446</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>447</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>448</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>449</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>450</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>451</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>452</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>453</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>454</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>455</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>456</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>457</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>458</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>459</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>460</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>461</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>462</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>463</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>464</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>465</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>466</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>467</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>468</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>469</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>470</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIForm.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>471</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>472</id>
<description>
                            
                            Return the image URL for this UIGraphic.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic</class-interface>
<method name="getURL" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>473</id>
<description>
                            
                            Set the image URL for this UIGraphic.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic</class-interface>
<method name="setURL" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>474</id>
<description>
                            
                            Create a new UIGraphic instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic</class-interface>
<method name="UIGraphic" return-type="UIGraphic"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>475</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>476</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>477</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>478</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>479</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>480</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>481</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>482</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>483</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>484</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>485</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>486</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>487</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>488</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>489</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>490</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>491</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>492</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>493</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>494</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>495</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>496</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>497</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>498</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>499</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>500</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>501</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>502</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>503</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>504</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>505</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>506</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>507</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>508</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>509</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>510</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>511</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>512</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>513</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>514</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>515</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>516</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>517</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>518</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>519</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>520</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>521</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>522</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>523</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>524</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>525</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>526</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>527</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>528</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>529</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>530</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>531</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>532</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>533</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>534</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>535</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>536</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>537</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>538</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>539</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>540</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>541</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>542</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>543</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>544</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>545</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>546</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>547</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>548</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>549</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>550</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>551</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>552</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>553</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>554</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>555</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>556</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>557</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>558</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>559</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>560</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>561</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>562</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>563</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>564</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>565</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>566</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>567</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>568</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>569</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>570</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>571</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>572</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>573</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>574</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>575</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>576</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIGraphic.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>577</id>
<description>
                            
                            
                            Add a new ValueChangedListener to the set of listeners  interested in being notified when ValueChangedEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="addValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>578</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="addValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>579</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>580</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>581</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>582</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>583</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>584</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>585</id>
<description>
                            
                            Return the previous value of this UIInput component.
                            
                              This method should only be utilized by the decode()  method of this component, or its corresponding  jakarta.faces.render.Renderer.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="getPrevious" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>586</id>
<description>
                            
                            
                            Remove an existing ValueChangedListener (if any) from the  set of listeners interested in being notified when  ValueChangedEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="removeValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>587</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="removeValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>588</id>
<description>
                            
                            Set the previous value of this UIInput component.
                            
                              This method should only be utilized by the decode()  method of this component, or its corresponding  jakarta.faces.render.Renderer.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="setPrevious" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>589</id>
<description>
                            
                            Create a new UIInput instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="UIInput" return-type="UIInput"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>590</id>
<description>
                            
                            Perform the following algorithm to update the model data  associated with this UIInput, if any, as appropriate.
                            
                            
                            
                            
                            
                            
                            
                            
                                If the valid property of this component is      false, take no further action.  If the valueRef property of this component      is null, take no further action.  Retrieve the Application instance for this web application      from ApplicationFactory.  Ask it for a ValueBinding for the valueRef      expression.  Use the setValue() method of the      ValueBinding to update the value that the      value reference expression points at.  If the setValue() method returns successfully:            Clear the local value of this UIInput.      Set the valid property of this UIInput          to true.        If the setValue() method call fails:            Enqueue error messages by calling addMessage()          on the specified FacesContext instance.      Set the valid property of this UIInput          to false.        
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>591</id>
<description>if the valueRef   property has invalid syntax for an expression</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>592</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>593</id>
<description>
                            
                            Perform validations and, if validation is successful, and the  local value is different from the previous value, queue  a ValueChangedEvent to be processed later.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>594</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>595</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>596</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>597</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>598</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>599</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>600</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>601</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>602</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>603</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>604</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>605</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>606</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>607</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>608</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>609</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>610</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>611</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>612</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>613</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>614</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>615</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>616</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>617</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>618</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>619</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>620</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>621</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>622</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>623</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>624</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>625</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>626</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>627</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>628</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>629</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>630</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>631</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>632</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>633</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>634</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>635</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>636</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>637</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>638</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>639</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>640</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>641</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>642</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>643</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>644</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>645</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>646</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>647</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>648</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>649</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>650</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>651</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>652</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>653</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>654</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>655</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>656</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>657</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>658</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>659</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>660</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>661</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>662</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>663</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>664</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>665</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>666</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>667</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>668</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>669</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>670</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>671</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>672</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>673</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>674</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>675</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>676</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>677</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>678</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>679</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>680</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>681</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>682</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>683</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>684</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>685</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>686</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>687</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIInput.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>688</id>
<description>
                            
                            Add the specified UIComponent to the namespace of this  naming container.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>689</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>690</id>
<description>if the component identifier of   the specified component is not unique within the namespace of this   naming container</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>691</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>692</id>
<description>
                            
                            Find and return a UIComponent in this namespace, if it  is present; otherwise return null.
                            
                            
                            
                               If the argument name does not contain any UIComponent#SEPARATOR_CHAR characters, it is interpreted to be a  name in the namespace of this naming container.   If the argument name does contain UIComponent#SEPARATOR_CHAR characters, each segment between  UIComponent#SEPARATOR_CHAR is treated as a component  identifier in its own namespace, which are searched for in  child naming containers of this naming container, from left  to right.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>693</id>
<description>if name is malformed</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>694</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>695</id>
<description>
                            Generate an identifier for a component, suitable for communication  to a client.
                              The identifier returned from this method must be unique  within this namespace.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="generateClientId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>696</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>697</id>
<description>
                            
                            Remove the specified UIComponent from the namespace of  this naming container, if it is present.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>698</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>699</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>700</id>
<description/>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer</class-interface>
<method name="UINamingContainer" return-type="UINamingContainer"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>701</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>702</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>703</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>704</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>705</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>706</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>707</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>708</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>709</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>710</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>711</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>712</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>713</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>714</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>715</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>716</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>717</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>718</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>719</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>720</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>721</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>722</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>723</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>724</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>725</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>726</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>727</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>728</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>729</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>730</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>731</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>732</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>733</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>734</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>735</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>736</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>737</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>738</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>739</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>740</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>741</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>742</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>743</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>744</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>745</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>746</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>747</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>748</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>749</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>750</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>751</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>752</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>753</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>754</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>755</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>756</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>757</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>758</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>759</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>760</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>761</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>762</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>763</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>764</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>765</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>766</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>767</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>768</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>769</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>770</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>771</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>772</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>773</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>774</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>775</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>776</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>777</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>778</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>779</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>780</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>781</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>782</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>783</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>784</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>785</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>786</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>787</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>788</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>789</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>790</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>791</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>792</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>793</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>794</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UINamingContainer.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>795</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>796</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>797</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>798</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>799</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>800</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>801</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>802</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>803</id>
<description>
                            
                            Create a new UIOutput instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput</class-interface>
<method name="UIOutput" return-type="UIOutput"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>804</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>805</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>806</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>807</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>808</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>809</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>810</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>811</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>812</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>813</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>814</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>815</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>816</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>817</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>818</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>819</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>820</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>821</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>822</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>823</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>824</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>825</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>826</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>827</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>828</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>829</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>830</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>831</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>832</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>833</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>834</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>835</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>836</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>837</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>838</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>839</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>840</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>841</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>842</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>843</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>844</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>845</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>846</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>847</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>848</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>849</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>850</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>851</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>852</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>853</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>854</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>855</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>856</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>857</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>858</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>859</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>860</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>861</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>862</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>863</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>864</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>865</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>866</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>867</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>868</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>869</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>870</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>871</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>872</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>873</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>874</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>875</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>876</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>877</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>878</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>879</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>880</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>881</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>882</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>883</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>884</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>885</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>886</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>887</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>888</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>889</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>890</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>891</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>892</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>893</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>894</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>895</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>896</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>897</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIOutput.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>898</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>899</id>
<description>
                            Return true to indicate that this component takes  responsibility for rendering its children.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>900</id>
<description>
                            
                            Create a new UIPanel instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel</class-interface>
<method name="UIPanel" return-type="UIPanel"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>901</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>902</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>903</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>904</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>905</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>906</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>907</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>908</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>909</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>910</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>911</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>912</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>913</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>914</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>915</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>916</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>917</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>918</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>919</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>920</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>921</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>922</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>923</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>924</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>925</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>926</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>927</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>928</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>929</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>930</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>931</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>932</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>933</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>934</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>935</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>936</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>937</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>938</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>939</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>940</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>941</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>942</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>943</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>944</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>945</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>946</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>947</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>948</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>949</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>950</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>951</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>952</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>953</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>954</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>955</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>956</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>957</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>958</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>959</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>960</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>961</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>962</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>963</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>964</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>965</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>966</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>967</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>968</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>969</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>970</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>971</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>972</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>973</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>974</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>975</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>976</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>977</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>978</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>979</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>980</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>981</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>982</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>983</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>984</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>985</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>986</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>987</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>988</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>989</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>990</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>991</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>992</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>993</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>994</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>995</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>996</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>997</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>998</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>999</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1000</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1001</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIPanel.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1002</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1003</id>
<description>
                            Return the optional parameter name for this parameter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1004</id>
<description>
                            
                            Return true to indicate that no  jakarta.faces.render.Renderer needs to be associated  with this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1005</id>
<description>
                            Set the optional parameter name for this parameter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter</class-interface>
<method name="setName" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1006</id>
<description>
                            
                            Create a new UIParameter instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter</class-interface>
<method name="UIParameter" return-type="UIParameter"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1007</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1008</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1009</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1010</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1011</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1012</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1013</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1014</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1015</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1016</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1017</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1018</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1019</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1020</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1021</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1022</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1023</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1024</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1025</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1026</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1027</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1028</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1029</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1030</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1031</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1032</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1033</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1034</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1035</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1036</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1037</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1038</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1039</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1040</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1041</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1042</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1043</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1044</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1045</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1046</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1047</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1048</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1049</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1050</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1051</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1052</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1053</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1054</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1055</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1056</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1057</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1058</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1059</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1060</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1061</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1062</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1063</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1064</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1065</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1066</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1067</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1068</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1069</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1070</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1071</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1072</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1073</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1074</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1075</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1076</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1077</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1078</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1079</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1080</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1081</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1082</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1083</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1084</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1085</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1086</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1087</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1088</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1089</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1090</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1091</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1092</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1093</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1094</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1095</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1096</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1097</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1098</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1099</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1100</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1101</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1102</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1103</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1104</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1105</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1106</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1107</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UIParameter.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1108</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1109</id>
<description>
                            Return the local value of the selected state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean</class-interface>
<method name="isSelected" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1110</id>
<description>
                            Set the local value of the selected state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean</class-interface>
<method name="setSelected" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1111</id>
<description>
                            
                            Create a new UISelectBoolean instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean</class-interface>
<method name="UISelectBoolean" return-type="UISelectBoolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1112</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1113</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1114</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1115</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1116</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1117</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1118</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1119</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1120</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1121</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1122</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1123</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1124</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1125</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1126</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1127</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1128</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1129</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1130</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1131</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1132</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1133</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1134</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1135</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1136</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1137</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1138</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1139</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1140</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1141</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1142</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1143</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1144</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1145</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1146</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1147</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1148</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1149</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1150</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1151</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1152</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1153</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1154</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1155</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1156</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1157</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1158</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1159</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1160</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1161</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1162</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1163</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1164</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1165</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1166</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1167</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1168</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1169</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1170</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1171</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1172</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1173</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1174</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1175</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1176</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1177</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1178</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1179</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1180</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1181</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1182</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1183</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1184</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1185</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1186</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1187</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1188</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1189</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1190</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1191</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1192</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1193</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1194</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1195</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1196</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1197</id>
<description>
                            
                            
                            Add a new ValueChangedListener to the set of listeners  interested in being notified when ValueChangedEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="addValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1198</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="addValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1199</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1200</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1201</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1202</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1203</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1204</id>
<description>
                            
                            Return the previous value of this UIInput component.
                            
                              This method should only be utilized by the decode()  method of this component, or its corresponding  jakarta.faces.render.Renderer.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="getPrevious" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1205</id>
<description>
                            
                            
                            Remove an existing ValueChangedListener (if any) from the  set of listeners interested in being notified when  ValueChangedEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="removeValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1206</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="removeValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1207</id>
<description>
                            
                            Set the previous value of this UIInput component.
                            
                              This method should only be utilized by the decode()  method of this component, or its corresponding  jakarta.faces.render.Renderer.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="setPrevious" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1208</id>
<description>
                            
                            Perform the following algorithm to update the model data  associated with this UIInput, if any, as appropriate.
                            
                            
                            
                            
                            
                            
                            
                            
                                If the valid property of this component is      false, take no further action.  If the valueRef property of this component      is null, take no further action.  Retrieve the Application instance for this web application      from ApplicationFactory.  Ask it for a ValueBinding for the valueRef      expression.  Use the setValue() method of the      ValueBinding to update the value that the      value reference expression points at.  If the setValue() method returns successfully:            Clear the local value of this UIInput.      Set the valid property of this UIInput          to true.        If the setValue() method call fails:            Enqueue error messages by calling addMessage()          on the specified FacesContext instance.      Set the valid property of this UIInput          to false.        
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1209</id>
<description>if the valueRef   property has invalid syntax for an expression</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1210</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1211</id>
<description>
                            
                            Perform validations and, if validation is successful, and the  local value is different from the previous value, queue  a ValueChangedEvent to be processed later.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1212</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIInput}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1213</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1214</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1215</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1216</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1217</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1218</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1219</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1220</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectBoolean.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1221</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1222</id>
<description>
                            Return the description for this selection item.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="getItemDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1223</id>
<description>
                            Return the localized label for this selection item.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="getItemLabel" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1224</id>
<description>
                            Return the server value for this selection item.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="getItemValue" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1225</id>
<description>
                            
                            Return true to indicate that no  jakarta.faces.render.Renderer needs to be associated  with this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1226</id>
<description>
                            Set the description for this selection item.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="setItemDescription" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1227</id>
<description>
                            Set the localized label for this selection item.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="setItemLabel" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1228</id>
<description>
                            Set the server value for this selection item.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="setItemValue" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1229</id>
<description/>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem</class-interface>
<method name="UISelectItem" return-type="UISelectItem"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1230</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1231</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1232</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1233</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1234</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1235</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1236</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1237</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1238</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1239</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1240</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1241</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1242</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1243</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1244</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1245</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1246</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1247</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1248</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1249</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1250</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1251</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1252</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1253</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1254</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1255</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1256</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1257</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1258</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1259</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1260</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1261</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1262</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1263</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1264</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1265</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1266</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1267</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1268</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1269</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1270</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1271</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1272</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1273</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1274</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1275</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1276</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1277</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1278</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1279</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1280</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1281</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1282</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1283</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1284</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1285</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1286</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1287</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1288</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1289</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1290</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1291</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1292</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1293</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1294</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1295</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1296</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1297</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1298</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1299</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1300</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1301</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1302</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1303</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1304</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1305</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1306</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1307</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1308</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1309</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1310</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1311</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1312</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1313</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1314</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1315</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1316</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1317</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1318</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1319</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1320</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1321</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1322</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1323</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1324</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1325</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1326</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1327</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1328</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1329</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1330</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItem.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1331</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1332</id>
<description>
                            
                            Return true to indicate that no  jakarta.faces.render.Renderer needs to be associated  with this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1333</id>
<description/>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems</class-interface>
<method name="UISelectItems" return-type="UISelectItems"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1334</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1335</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1336</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1337</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1338</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1339</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1340</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1341</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1342</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1343</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1344</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1345</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId (or for any phase, if the  listener returns PhaseId.ANY_PHASE from its  getPhaseId() method.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1346</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1347</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1348</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1349</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1350</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1351</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1352</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1353</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1354</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1355</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1356</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1357</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1358</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1359</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1360</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1361</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1362</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1363</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1364</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1365</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1366</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1367</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1368</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1369</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1370</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1371</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1372</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1373</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1374</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1375</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1376</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1377</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1378</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1379</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1380</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1381</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1382</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1383</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1384</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1385</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1386</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1387</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1388</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1389</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1390</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1391</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1392</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1393</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1394</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1395</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1396</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1397</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1398</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1399</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1400</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1401</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1402</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1403</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1404</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1405</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1406</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1407</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1408</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1409</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1410</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1411</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1412</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1413</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1414</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1415</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1416</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1417</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1418</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1419</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1420</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1421</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1422</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1423</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1424</id>
<description>
                            
                            Update the model data associated with this UIComponent,  if any.
                            
                            
                              The default implementation in UIComponentBase does  no processing; concrete implementations of components that represent  controls that can be altered by users (such as UIInput must  provide an apppropriate implementation of this method.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1425</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1426</id>
<description>
                            Perform any correctness checks that this component wishes to perform  on itself.
                            
                            
                              This method will be called during the  Process Validations phase of the request processing  lifecycle.  If errors are encountered, appropriate Message  instances should be added to the FacesContext for the current  request, and the valid property of this UIComponent  should be set to false.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1427</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1428</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1429</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1430</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1431</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1432</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1433</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1434</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectItems.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1435</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1436</id>
<description>
                            Return the currently selected items, or null if there  are no currently selected items.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany</class-interface>
<method name="getSelectedValues" return-type="java.lang.Object[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1437</id>
<description>
                            Set the currently selected items, or null to indicate  that there are no currently selected items.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany</class-interface>
<method name="setSelectedValues" return-type="void">
<parameters>
<parameter>java.lang.Object[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1438</id>
<description>
                            
                            Create a new UISelectMany instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany</class-interface>
<method name="UISelectMany" return-type="UISelectMany"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1439</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1440</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1441</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1442</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1443</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1444</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1445</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1446</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1447</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1448</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1449</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1450</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1451</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1452</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1453</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1454</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1455</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1456</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1457</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1458</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1459</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1460</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1461</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1462</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1463</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1464</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1465</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1466</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1467</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1468</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1469</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1470</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1471</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1472</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1473</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1474</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1475</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1476</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1477</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1478</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1479</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1480</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1481</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1482</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1483</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1484</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1485</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1486</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1487</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1488</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1489</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1490</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1491</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1492</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1493</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1494</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1495</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1496</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1497</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1498</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1499</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1500</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1501</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1502</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1503</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1504</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1505</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1506</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1507</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1508</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1509</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1510</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1511</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1512</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1513</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1514</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1515</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1516</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1517</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1518</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1519</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1520</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1521</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1522</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1523</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1524</id>
<description>
                            
                            
                            Add a new ValueChangedListener to the set of listeners  interested in being notified when ValueChangedEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="addValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1525</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="addValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1526</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1527</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1528</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1529</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1530</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1531</id>
<description>
                            
                            Return the previous value of this UIInput component.
                            
                              This method should only be utilized by the decode()  method of this component, or its corresponding  jakarta.faces.render.Renderer.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="getPrevious" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1532</id>
<description>
                            
                            
                            Remove an existing ValueChangedListener (if any) from the  set of listeners interested in being notified when  ValueChangedEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="removeValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1533</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="removeValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1534</id>
<description>
                            
                            Set the previous value of this UIInput component.
                            
                              This method should only be utilized by the decode()  method of this component, or its corresponding  jakarta.faces.render.Renderer.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="setPrevious" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1535</id>
<description>
                            
                            Perform the following algorithm to update the model data  associated with this UIInput, if any, as appropriate.
                            
                            
                            
                            
                            
                            
                            
                            
                                If the valid property of this component is      false, take no further action.  If the valueRef property of this component      is null, take no further action.  Retrieve the Application instance for this web application      from ApplicationFactory.  Ask it for a ValueBinding for the valueRef      expression.  Use the setValue() method of the      ValueBinding to update the value that the      value reference expression points at.  If the setValue() method returns successfully:            Clear the local value of this UIInput.      Set the valid property of this UIInput          to true.        If the setValue() method call fails:            Enqueue error messages by calling addMessage()          on the specified FacesContext instance.      Set the valid property of this UIInput          to false.        
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1536</id>
<description>if the valueRef   property has invalid syntax for an expression</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1537</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1538</id>
<description>
                            
                            Perform validations and, if validation is successful, and the  local value is different from the previous value, queue  a ValueChangedEvent to be processed later.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1539</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIInput}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1540</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1541</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1542</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1543</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1544</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1545</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1546</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1547</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1548</id>
<description>
                            
                            Add the specified UIComponent to the namespace of this  naming container.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1549</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1550</id>
<description>if the component identifier of   the specified component is not unique within the namespace of this   naming container</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1551</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1552</id>
<description>
                            
                            Find and return a UIComponent in this namespace, if it  is present; otherwise return null.
                            
                            
                            
                               If the argument name does not contain any UIComponent#SEPARATOR_CHAR characters, it is interpreted to be a  name in the namespace of this naming container.   If the argument name does contain UIComponent#SEPARATOR_CHAR characters, each segment between  UIComponent#SEPARATOR_CHAR is treated as a component  identifier in its own namespace, which are searched for in  child naming containers of this naming container, from left  to right.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1553</id>
<description>if name is malformed</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1554</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1555</id>
<description>
                            Generate an identifier for a component, suitable for communication  to a client.
                              The identifier returned from this method must be unique  within this namespace.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="generateClientId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1556</id>
<description>
                            
                            Remove the specified UIComponent from the namespace of  this naming container, if it is present.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1557</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1558</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectMany.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1559</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1560</id>
<description>
                            Return the currently selected item, or null if there  is no currently selected item.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne</class-interface>
<method name="getSelectedValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1561</id>
<description>
                            Set the currently selected item, or null to indicate  that there is no currently selected item.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne</class-interface>
<method name="setSelectedValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1562</id>
<description>
                            
                            Create a new UISelectOne instance with default property  values.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne</class-interface>
<method name="UISelectOne" return-type="UISelectOne"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1563</id>
<description>
                            
                            Append the specified UIComponent to the end of the  child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1564</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1565</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1566</id>
<description>
                            
                            Insert the specified UIComponent at the specified  position in the child list for this component.
                               If the child to be added has a non-null and valid component  identifier, the identifier is added to the namespace of the  closest ancestor that is a naming container.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1567</id>
<description>if the component identifier   of the new component is non-null, and is not unique in the   namespace of the closest ancestor that is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1568</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt; size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1569</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addChild" return-type="void">
<parameters>
<parameter>int</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1570</id>
<description>
                            
                            Add the specified UIComponent as a facet  associated with the name specified by the facetName  argument, replacing any previous facet with that name.
                              The  newly added facet will have its parent  property set to this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1571</id>
<description>if the either of the  facetName or facet arguments are  null.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1572</id>
<description>
                            
                            
                            Add a Validator instance to the set associated with  this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1573</id>
<description>if validator   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="addValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1574</id>
<description>
                            
                            Remove all child UIComponents from the child list.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearChildren" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1575</id>
<description>
                            
                            Remove all facet UIComponents from this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearFacets" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1576</id>
<description>
                            
                            Clear any Validators that have been registered for  processing by this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="clearValidators" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1577</id>
<description>
                            
                            
                            Return true if the specified UIComponent  is a direct child of this UIComponent; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1578</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="containsChild" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1579</id>
<description>
                            
                            
                            
                            Decode the current state of this UIComponent from the  request contained in the specified FacesContext, and attempt  to convert this state information into an object of the required type  for this component (optionally using the registered  jakarta.faces.convert.Converter for this component, if there  is one.
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the valid property of this component      to true.     If conversion is not successful:    Save state information in such a way that encoding      can reproduce the previous input (even though it was syntactically      or semantically incorrect)  Add an appropriate conversion failure error message by calling      context.addMessage().  Set the valid property of this comonent      to false.     During decoding, events may be enqueued for later processing  (by event listeners who have registered an interest),  by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1580</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1581</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1582</id>
<description>
                            
                            
                            Render the beginning of the current state of this  UIComponent to the response contained in the specified  FacesContext.
                              If the conversion attempted in a previous call  to decode() for this component failed, the state  information saved during execution of decode() should be  utilized to reproduce the incorrect input.  If the conversion was  successful, or if there was no previous call to decode(),  the value to be displayed should be acquired by calling  currentValue(), and rendering the value as appropriate.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1583</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1584</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1585</id>
<description>
                            
                            
                            Render the child UIComponents of this UIComponent,  following the rules described for encodeBegin() to acquire  the appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property is true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1586</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1587</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1588</id>
<description>
                            
                            Render the ending of the current state of this  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1589</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1590</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1591</id>
<description>
                            
                            Find the UIComponent named by the specified expression,  if any is found.
                            
                            
                              This is done by locating the closest parent  UIComponent that is a NamingContainer, and  calling its findComponentInNamespace() method.   The specified expr may contain either a  component identifier, or a set of component identifiers separated  by SEPARATOR_CHAR characters.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1592</id>
<description>if expr   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="findComponent" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1593</id>
<description>
                            Return the value of the attribute with the specified name  (if any); otherwise, return null.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1594</id>
<description>if name is   null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttribute" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1595</id>
<description>
                            
                            Return an Iterator over the names of all  currently defined attributes of this UIComponent that  have a non-null value.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1596</id>
<description>
                            
                            Return the UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1597</id>
<description>if index is out of range   ((index = size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChild" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1598</id>
<description>
                            
                            Return the number of UIComponents on the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildCount" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1599</id>
<description>
                            
                            
                            Return an Iterator over the child  UIComponents of this UIComponent,  in the order of their position in the child list.
                              If this  component has no children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1600</id>
<description>
                            Return a client-side identifier for this component, generating  one if necessary.
                            
                              Generation will be delegated to the associated  jakarta.faces.render.Renderer (if there is one).
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1601</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1602</id>
<description>
                            
                            Return the identifier of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getComponentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1603</id>
<description>
                            
                            Return the converter id of the jakarta.faces.convert.Converter  that is registered for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getConverter" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1604</id>
<description>
                            
                            Return the facet UIComponent associated with the  specified name, if any.
                              Otherwise, return null.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1605</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacet" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1606</id>
<description>
                            
                            
                            Return an Iterator over the names of the facet  UIComponents of this UIComponent.
                              If  this component has no facets, an empty Iterator is  returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetNames" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1607</id>
<description>
                            
                            
                            Return an Iterator over the facet followed by child  UIComponents of this UIComponent.
                              Facets are returned in an undefined order, followed by  all the children in the order they are stored in the child list. If this  component has no facets or children, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getFacetsAndChildren" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1608</id>
<description>
                            
                            Return the parent UIComponent of this  UIComponent, if any.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getParent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1609</id>
<description>
                            
                            
                            Return the Renderer type for this UIComponent  (if any).
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1610</id>
<description>
                            Return a flag indicating whether this component is responsible  for rendering its child components.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersChildren" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1611</id>
<description>
                            Return a flag indicating whether this component has concrete  implementations of the decode() and  encodeXxx() methods, and is therefore suitable for  use in the direct implementation programming model  for rendering.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getRendersSelf" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1612</id>
<description>
                            
                            
                            Return an Iterator over the Validators  associated with this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="getValidators" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1613</id>
<description>
                            Return true if this component (and its children)  should be rendered during the Render Response phase  of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isRendered" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1614</id>
<description>
                            Return the current validity state of this component.
                              The validity  state of a component is adjusted at the following points during the  request processing lifecycle:    During the Apply Request Values phase, set to      true or false by decode(),      based on the success or failure of decoding a new local value for      this component.  During the Process Validations phase, set to      false by processValidations() if any      call to a validate() method returned      false.  During the Update Model Values phase, set to      false by updateModel() if any conversion      or update error occurred.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="isValid" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1615</id>
<description>
                            Perform the component tree processing required by the  Apply Request Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processDecodes() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the decode() method of this component.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1616</id>
<description>if an input/output error occurs during decoding</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1617</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processDecodes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1618</id>
<description>
                            Perform the component tree processing required by the  Reconstitute Component Tree phase of the request processing  lifecyc,e for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                                Call the processReconstitutes() method of all facets      and children of this UIComponent in the order determined      by a call to getFacetsAndChildren().  Call the reconstitute() method of this component.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1619</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1620</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processReconstitutes" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1621</id>
<description>
                            Perform the component tree processing required by the  Update Model Values phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                                Call the processUpdates() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  Call the updateModel() method of this component.  If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1622</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processUpdates" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1623</id>
<description>
                            Perform the component tree processing required by the  Process Validations phase of the request processing  lifecycle for all facets of this component, all children of this  component, and this component itself, as follows.
                            
                            
                            
                            
                                Call the processValidators() method of all facets      and children of this UIComponent, in the order determined      by a call to getFacetsAndChildren().  If the valid property of this component is      currently true:            Call the validate() method of each          Validator registered for this UIComponent.      Call the validate() method of this component.      Set the valid property of this component          to the result returned from the validate()          method.        If the valid property of this UIComponent      is now false, call      FacesContext.renderResponse()      to transfer control at the end of the current phase.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1624</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="processValidators" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1625</id>
<description>
                            Perform any processing required to correct the state of this  component as a result of the owning component tree having been  reconstructed during Reconstitute Component Tree phase  of the request processing lifecycle.
                              The default implementation  of this method does nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1626</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1627</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="reconstitute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1628</id>
<description>
                            Remove the child UIComponent at the specified position  in the child list for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1629</id>
<description>if the index is out of range   ((index &lt; 0) || (index &gt;= size()))</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1630</id>
<description>
                            
                            Remove the child UIComponent from the child list  for this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1631</id>
<description>if component is   not a child of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1632</id>
<description>if component is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeChild" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1633</id>
<description>
                            
                            Remove the facet UIComponent associated with the  specified name, if there is one.
                              The removed facet  will have its parent property cleared.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1634</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeFacet" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1635</id>
<description>
                            
                            
                            Remove a Validator instance from the set associated with  this UIComponent, if it was previously associated.
                              Otherwise, do nothing.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="removeValidator" return-type="void">
<parameters>
<parameter>jakarta.faces.validator.Validator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1636</id>
<description>
                            Set the new value of the attribute with the specified name,  replacing any existing value for that name.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1637</id>
<description>if name represents   a read-only property of this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1638</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1639</id>
<description>
                            
                            Set the identifier of this UIComponent.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1640</id>
<description>if componentId   is zero length or contains invalid characters</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1641</id>
<description>if componentId   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1642</id>
<description>if this  UIComponent instance is already in the tree and and  is not unique within the namespace of the closest ancestor that  is a naming container.</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setComponentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1643</id>
<description>
                            
                            Set the converter id of the jakarta.faces.convert.Converter  that is registered for this component, or null to indicate  that there is no registered Converter.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1644</id>
<description>
                            Set the parent UIComponent of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1645</id>
<description>
                            
                            Set the rendered property of this  UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1646</id>
<description>
                            
                            
                            Set the Renderer type for this UIComponent,  or null for components that render themselves.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setRendererType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1647</id>
<description>
                            Set the current validity state of this component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIComponentBase}</class-interface>
<method name="setValid" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1648</id>
<description>
                            
                            
                            Add a new ValueChangedListener to the set of listeners  interested in being notified when ValueChangedEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="addValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1649</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="addValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1650</id>
<description>
                            
                            
                            Broadcast the specified FacesEvent to all registered  event listeners who have expressed an interest in events of this  type, for the specified PhaseId.
                              The order in which  registered listeners are notified is implementation dependent.   After all interested listeners have been notified, return  false if this event does not have any listeners  interested in this event in future phases of the request processing  lifecycle.  Otherwise, return true.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1651</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1652</id>
<description>if the implementation class   of this  FacesEvent is not supported by this component</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1653</id>
<description>if PhaseId.ANY_PHASE is passed   for the phase identifier</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1654</id>
<description>if event or   phaseId is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="broadcast" return-type="boolean">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
<parameter>jakarta.faces.event.PhaseId</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1655</id>
<description>
                            
                            Return the previous value of this UIInput component.
                            
                              This method should only be utilized by the decode()  method of this component, or its corresponding  jakarta.faces.render.Renderer.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="getPrevious" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1656</id>
<description>
                            
                            
                            Remove an existing ValueChangedListener (if any) from the  set of listeners interested in being notified when  ValueChangedEvents occur.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="removeValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1657</id>
<description>if listener   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="removeValueChangedListener" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedListener</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1658</id>
<description>
                            
                            Set the previous value of this UIInput component.
                            
                              This method should only be utilized by the decode()  method of this component, or its corresponding  jakarta.faces.render.Renderer.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="setPrevious" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1659</id>
<description>
                            
                            Perform the following algorithm to update the model data  associated with this UIInput, if any, as appropriate.
                            
                            
                            
                            
                            
                            
                            
                            
                                If the valid property of this component is      false, take no further action.  If the valueRef property of this component      is null, take no further action.  Retrieve the Application instance for this web application      from ApplicationFactory.  Ask it for a ValueBinding for the valueRef      expression.  Use the setValue() method of the      ValueBinding to update the value that the      value reference expression points at.  If the setValue() method returns successfully:            Clear the local value of this UIInput.      Set the valid property of this UIInput          to true.        If the setValue() method call fails:            Enqueue error messages by calling addMessage()          on the specified FacesContext instance.      Set the valid property of this UIInput          to false.        
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1660</id>
<description>if the valueRef   property has invalid syntax for an expression</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1661</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="updateModel" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1662</id>
<description>
                            
                            Perform validations and, if validation is successful, and the  local value is different from the previous value, queue  a ValueChangedEvent to be processed later.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1663</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIInput}</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1664</id>
<description>
                            Evaluate and return the current value of this component, according  to the following algorithm.
                            
                            
                            
                            
                                If the value property has been set (containing      the local value for this component), return that; else  If the valueRef property has been set,            Retrieve the Application instance for this web          application from ApplicationFactory.      Ask it for a ValueBinding for the valueRef          expression.      Use the getValue() method of the          ValueBinding to retrieve the value that the          value reference expression points at.        Otherwise, return null.  
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1665</id>
<description>if a problem occurs evaluating   the value reference expression</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>EvaluationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1666</id>
<description>if context   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIOutput}</class-interface>
<method name="currentValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1667</id>
<description>
                            
                            Return the component type of this UIComponent.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getComponentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1668</id>
<description>
                            
                            Return the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1669</id>
<description>
                            
                            Return the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIOutput}</class-interface>
<method name="getValueRef" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1670</id>
<description>
                            
                            Set the local value of this UIInput component.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1671</id>
<description>
                            
                            Set the value reference expression for this UIInput  component, pointing at the model tier property that will be updated  or rendered.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UIOutput}</class-interface>
<method name="setValueRef" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1672</id>
<description>
                            
                            Add the specified UIComponent to the namespace of this  naming container.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1673</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1674</id>
<description>if the component identifier of   the specified component is not unique within the namespace of this   naming container</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1675</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="addComponentToNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1676</id>
<description>
                            
                            Find and return a UIComponent in this namespace, if it  is present; otherwise return null.
                            
                            
                            
                               If the argument name does not contain any UIComponent#SEPARATOR_CHAR characters, it is interpreted to be a  name in the namespace of this naming container.   If the argument name does contain UIComponent#SEPARATOR_CHAR characters, each segment between  UIComponent#SEPARATOR_CHAR is treated as a component  identifier in its own namespace, which are searched for in  child naming containers of this naming container, from left  to right.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1677</id>
<description>if name is malformed</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1678</id>
<description>if name   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="findComponentInNamespace" return-type="jakarta.faces.component.UIComponent">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1679</id>
<description>
                            Generate an identifier for a component, suitable for communication  to a client.
                              The identifier returned from this method must be unique  within this namespace.
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="generateClientId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1680</id>
<description>
                            
                            Remove the specified UIComponent from the namespace of  this naming container, if it is present.
                            
                        </description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1681</id>
<description>if the specified component   does not have a componentId</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1682</id>
<description>if component   is null</description>
<package>jakarta.faces.component</package>
<class-interface>UISelectOne.{jakarta.faces.component.UISelectBase}</class-interface>
<method name="removeComponentFromNamespace" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1683</id>
<description>
                            
                            Append a FacesEvent to the set of events that should be  processed at the end of the current phase of the request processing  lifecycle.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="addFacesEvent" return-type="void">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1684</id>
<description>if event   is null</description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="addFacesEvent" return-type="void">
<parameters>
<parameter>jakarta.faces.event.FacesEvent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1685</id>
<description>
                            
                            
                            Append a Message to the set of messages associated with  the specified UIComponent, if component is  not null.
                            
                              If component is null,  this Message is assumed to not be associated with any  specific component instance.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="addMessage" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>jakarta.faces.context.Message</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1686</id>
<description>if message   is null</description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="addMessage" return-type="void">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>jakarta.faces.context.Message</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1687</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="FacesContext" return-type="FacesContext"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1688</id>
<description>
                            
                            Return the FacesContext instance for the request that is  being processed by the current thread.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getCurrentInstance" return-type="jakarta.faces.context.FacesContext"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1689</id>
<description>
                            
                            Return an Iterator over the FacesEvents that  have been queued, in the order that they were queued.
                              The  Iterator returned by this method must support the  following functionality:    The remove() operation may be utilized by the      JSF implementation to remove the current event when it has      been completely handled.  Event handlers may add new events to the list while it is      being iterated over, by calling addFacesEvent().     If no events have been queued, an empty Iterator  must be returned.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getFacesEvents" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1690</id>
<description>
                            Return the HttpSession instance for the session  associated with the current request (if any); otherwise, return  null.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getHttpSession" return-type="HttpSession"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1691</id>
<description>
                            Return the Locale to be used in localizing the  response being created for this FacesContext.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getLocale" return-type="java.util.Locale"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1692</id>
<description>
                            
                            
                            Return the maximum severity level recorded on any Messages  that has been queued, whether or not they are associated with any  specific UIComponent.
                              If no such messages have been queued,  return a value less than Message.SEVERITY_INFO.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getMaximumSeverity" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1693</id>
<description>
                            
                            
                            Return an Iterator over the Messages that have  been queued, whether or not they are associated with any specific  UIComponent.
                              If no such messages have been queued, return an  empty Iterator.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getMessages" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1694</id>
<description>
                            
                            
                            
                            
                            Return an Iterator over the Messages that have  been queued that are associated with the specified UIComponent,  (if component is not null), or over the  Messages that have been queued that are not associated with any  specific UIComponent (if component is  null).
                              If no such messages have been queued, return an  empty Iterator.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getMessages" return-type="java.util.Iterator">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1695</id>
<description>
                            
                            Return the ResponseStream to which components should  direct their binary output.
                              Within a given response, components  can use either the ResponseStream or the ResponseWriter,  but not both.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getResponseStream" return-type="jakarta.faces.context.ResponseStream"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1696</id>
<description>
                            
                            Return the ResponseWriter to which components should  direct their character-based output.
                              Within a given response,  components can use either the ResponseStream or the ResponseWriter,  but not both.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getResponseWriter" return-type="jakarta.faces.context.ResponseWriter"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1697</id>
<description>
                            Return the ServletContext object for the web application  associated with this request.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getServletContext" return-type="ServletContext"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1698</id>
<description>
                            Return the ServletRequest object representing the  current request that is being processed.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getServletRequest" return-type="ServletRequest"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1699</id>
<description>
                            Return the ServletResponse object representing the  current response that is being rendered.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getServletResponse" return-type="ServletResponse"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1700</id>
<description>
                            
                            Return the component Tree that is associated with the  this request.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="getTree" return-type="jakarta.faces.tree.Tree"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1701</id>
<description>
                            Release any resources associated with this FacesContext  instance.
                            
                              Faces implementations may choose to pool instances in the  associated FacesContextFactory to avoid repeated object creation  and garbage collection.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="release" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1702</id>
<description>
                            Signal the JavaSerer faces implementation that, as soon as the  current phase of the request processing lifecycle has been completed,  control should be passed to the Render Response phase,  bypassing any phases that have not been executed yet.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="renderResponse" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1703</id>
<description>
                            Signal the JavaServer Faces implementation that the HTTP response  for this request has already been generated (such as an HTTP redirect),  and that the request processing lifecycle should be terminated as soon  as the current phase is completed.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="responseComplete" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1704</id>
<description>
                            Set the Locale to be used in localizing the  response being created for this FacesContext.
                              If not  set, the default Locale for our servlet container will be used.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="setLocale" return-type="void">
<parameters>
<parameter>java.util.Locale</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1705</id>
<description>
                            
                            Set the ResponseStream to which components should  direct their binary output.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="setResponseStream" return-type="void">
<parameters>
<parameter>jakarta.faces.context.ResponseStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1706</id>
<description>if responseStream   is null</description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="setResponseStream" return-type="void">
<parameters>
<parameter>jakarta.faces.context.ResponseStream</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1707</id>
<description>
                            
                            Set the ResponseWriter to which components should  direct their character-based output.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="setResponseWriter" return-type="void">
<parameters>
<parameter>jakarta.faces.context.ResponseWriter</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1708</id>
<description>if responseWriter   is null</description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="setResponseWriter" return-type="void">
<parameters>
<parameter>jakarta.faces.context.ResponseWriter</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1709</id>
<description>
                            
                            Set the component Tree that is associated with this request.
                              This method can only be called by the application handler (or a  class that the handler calls), and only during the Invoke  Application phase of the request processing lifecycle.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="setTree" return-type="void">
<parameters>
<parameter>jakarta.faces.tree.Tree</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1710</id>
<description>if this method is called more than   once without a call to release() in beween</description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="setTree" return-type="void">
<parameters>
<parameter>jakarta.faces.tree.Tree</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1711</id>
<description>if tree   is null</description>
<package>jakarta.faces.context</package>
<class-interface>FacesContext</class-interface>
<method name="setTree" return-type="void">
<parameters>
<parameter>jakarta.faces.tree.Tree</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1712</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>FacesContextFactory</class-interface>
<method name="FacesContextFactory" return-type="FacesContextFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1713</id>
<description>
                            
                            
                            Create (if needed) and return a FacesContext instance  that is initialized for the processing of the specified request  and response objects, utilizing the specified Lifecycle  instance, for this web application.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>FacesContextFactory</class-interface>
<method name="getFacesContext" return-type="jakarta.faces.context.FacesContext">
<parameters>
<parameter>ServletContext</parameter>
<parameter>ServletRequest</parameter>
<parameter>ServletResponse</parameter>
<parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1714</id>
<description>if a  FacesContext cannot be   constructed for the specified parameters</description>
<package>jakarta.faces.context</package>
<class-interface>FacesContextFactory</class-interface>
<method name="getFacesContext" return-type="jakarta.faces.context.FacesContext">
<parameters>
<parameter>ServletContext</parameter>
<parameter>ServletRequest</parameter>
<parameter>ServletResponse</parameter>
<parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
</parameters>
<throw>jakarta.faces.FacesException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1715</id>
<description>if any of the parameters   are null</description>
<package>jakarta.faces.context</package>
<class-interface>FacesContextFactory</class-interface>
<method name="getFacesContext" return-type="jakarta.faces.context.FacesContext">
<parameters>
<parameter>ServletContext</parameter>
<parameter>ServletRequest</parameter>
<parameter>ServletResponse</parameter>
<parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1716</id>
<description>
                            
                            Return the localized detail text for this Message  (if any).
                              This should be additional text that can help the user  understand the context of the problem, and offer suggestions for  approaches to correcting it.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>Message</class-interface>
<method name="getDetail" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1717</id>
<description>
                            
                            Return the severity level of this Message.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>Message</class-interface>
<method name="getSeverity" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1718</id>
<description>
                            
                            Return the localized summary text for this Message.
                              This should be the text that would normally be displayed to a user  to identify the problem that needs to be corrected.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>Message</class-interface>
<method name="getSummary" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1719</id>
<description>
                            
                            Return the localized detail text for this Message  (if any).
                              This should be additional text that can help the user  understand the context of the problem, and offer suggestions for  approaches to correcting it.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="getDetail" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1720</id>
<description>
                            
                            Return the severity level of this Message.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="getSeverity" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1721</id>
<description>
                            
                            Return the localized summary text for this Message.
                              This should be the text that would normally be displayed to a user  to identify the problem that needs to be corrected.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="getSummary" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1722</id>
<description>
                            
                            Construct a new Message with no initial values.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="MessageImpl" return-type="MessageImpl"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1723</id>
<description>
                            
                            Construct a new Message with the specified initial values.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="MessageImpl" return-type="MessageImpl">
<parameters>
<parameter>int</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1724</id>
<description>
                            Set the localized detail text.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="setDetail" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1725</id>
<description>
                            Set the severity level.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="setSeverity" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1726</id>
<description>if the specified severity level   is not one of the supported values</description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="setSeverity" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1727</id>
<description>
                            Set the localized summary text.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageImpl</class-interface>
<method name="setSummary" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1728</id>
<description>
                            
                            
                            Return a localized Message instance corresponding to the  specified parameters, or null if the specified message  identifier is not supported by the MessageResources  instance.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1729</id>
<description>if context or   messageId is null</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1730</id>
<description>
                            
                            
                            Return a localized Message instance corresponding to the  specified parameters, or null if the specified message  identifier is not supported by the MessageResources  instance.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1731</id>
<description>if context or   messageId is null</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object[]</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1732</id>
<description>
                            
                            
                            Return a localized Message instance corresponding to the  specified parameters, or null if the specified message  identifier is not supported by the MessageResources  instance.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1733</id>
<description>if context or   messageId is null</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1734</id>
<description>
                            
                            
                            Return a localized Message instance corresponding to the  specified parameters, or null if the specified message  identifier is not supported by the MessageResources  instance.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1735</id>
<description>if context or   messageId is null</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1736</id>
<description>
                            
                            
                            Return a localized Message instance corresponding to the  specified parameters, or null if the specified message  identifier is not supported by the MessageResources  instance.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1737</id>
<description>if context or   messageId is null</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1738</id>
<description>
                            
                            
                            Return a localized Message instance corresponding to the  specified parameters, or null if the specified message  identifier is not supported by the MessageResources  instance.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1739</id>
<description>if context or   messageId is null</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="getMessage" return-type="jakarta.faces.context.Message">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1740</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>MessageResources</class-interface>
<method name="MessageResources" return-type="MessageResources"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1741</id>
<description>
                            
                            
                            Register a new MessageResources instance, associated with  the specified messageResourcesId, to be supported by this  MessageResourcesFactory.
                            
                              This method may be called at  any time, and makes the corresponding MessageResources instance  available throughout the remaining lifetime of this web application.  
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResourcesFactory</class-interface>
<method name="addMessageResources" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.context.MessageResources</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1742</id>
<description>if messageResourcesId   is already registered in this MessageResourcesFactory</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResourcesFactory</class-interface>
<method name="addMessageResources" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.context.MessageResources</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1743</id>
<description>if messageResourcesId   or messageResources is null</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResourcesFactory</class-interface>
<method name="addMessageResources" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.context.MessageResources</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1744</id>
<description>
                            
                            Create (if needed) and return a MessageResources instance  for the specified message resources identifier.
                              The set of available  message resources identifiers is available via the  getMessageResourcesIds() method.   Each call to getMessageResources() for the same  messageResourcesId, from within the same web application,  must return the same MessageResources instance.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResourcesFactory</class-interface>
<method name="getMessageResources" return-type="jakarta.faces.context.MessageResources">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1745</id>
<description>if no  MessageResources   instance can be returned for the specified identifier</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResourcesFactory</class-interface>
<method name="getMessageResources" return-type="jakarta.faces.context.MessageResources">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1746</id>
<description>if messageResourcesId   is null</description>
<package>jakarta.faces.context</package>
<class-interface>MessageResourcesFactory</class-interface>
<method name="getMessageResources" return-type="jakarta.faces.context.MessageResources">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1747</id>
<description>
                            Return an Iterator over the set of message resource  identifiers supported by this factory.
                              This Iterator  must include the standard identifiers described above.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>MessageResourcesFactory</class-interface>
<method name="getMessageResourcesIds" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1748</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>MessageResourcesFactory</class-interface>
<method name="MessageResourcesFactory" return-type="MessageResourcesFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1749</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream</class-interface>
<method name="ResponseStream" return-type="ResponseStream"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1750</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1751</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="close" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1752</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="flush" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1753</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="flush" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1754</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1755</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1756</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>byte[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1757</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>byte[]</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1758</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1759</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseStream.{java.io.OutputStream}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1760</id>
<description>
                            Write whatever text should end a response.
                              If there is an open  element that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="endDocument" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1761</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="endDocument" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1762</id>
<description>
                            Write the end of an element, after closing any open element  created by a call to startElement().
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1763</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1764</id>
<description>if name   is null</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1765</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="ResponseWriter" return-type="ResponseWriter"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1766</id>
<description>
                            Write whatever text should begin a response.
                            
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="startDocument" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1767</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="startDocument" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1768</id>
<description>
                            Write the start of an element, up to and including the  element name.
                              Once this method has been called, clients can  call writeAttribute() or writeURIAttribute()  method to add attributes and corresponding values.  The starting  element will be closed (that is, the trailing '&gt;' character added)  on any subsequent call to startElement(),  writeComment(),  writeText(), endElement(), or  endDocument().
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1769</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1770</id>
<description>if name   is null</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1771</id>
<description>
                            Write an attribute name and corresponding value (after converting  that text to a String if necessary), after escaping it properly.
                              This method may only be called after a call to  startElement(), and before the opened element has been  closed.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1772</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1773</id>
<description>if this method is called when there   is no currently open element</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1774</id>
<description>if name or   value is null</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1775</id>
<description>
                            Write a comment containing the specified text, after converting  that text to a String if necessary.
                              If there is an open element  that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1776</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1777</id>
<description>if comment   is null</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1778</id>
<description>
                            Write an object (after converting it to a String, if necessary),  after escaping it properly.
                              If there is an open element  that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1779</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1780</id>
<description>if text   is null</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1781</id>
<description>
                            Write a single character, after escaping it properly.
                              If there  is an open element that has been created by a call to  startElement(), that element will be closed first.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1782</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1783</id>
<description>
                            Write text from a character array, after escaping it properly.
                              This is equivalent to calling writeText(c, 0, c.length).  If there is an open element that has been created by a call to  startElement(), that element will be closed first.  
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1784</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1785</id>
<description>if text   is null</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1786</id>
<description>
                            Write text from a character array, after escaping it properly  for this method.
                              If there is an open element that has been  created by a call to startElement(), that element  will be closed first.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1787</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1788</id>
<description>if the calculated starting or   ending position is outside the bounds of the character array</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1789</id>
<description>if text   is null</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1790</id>
<description>
                            Write a URI attribute name and corresponding value (after converting  that text to a String if necessary), after encoding it properly  (for example, '%' encoded for HTML).
                              This method may only be called after a call to  startElement(), and before the opened element has been  closed.
                        </description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1791</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1792</id>
<description>if this method is called when there   is no currently open element</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1793</id>
<description>if name or   value is null</description>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1794</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1795</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="close" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1796</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="flush" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1797</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="flush" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1798</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1799</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1800</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1801</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1802</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1803</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1804</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1805</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1806</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1807</id>
<description/>
<package>jakarta.faces.context</package>
<class-interface>ResponseWriter.{java.io.Writer}</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1808</id>
<description>
                            
                            Convert the specified string value, which is associated with  the specified UIComponent, into a model data object that  is appropriate for being stored during the Apply Request  Values phase of the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>Converter</class-interface>
<method name="getAsObject" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1809</id>
<description>if conversion cannot be successfully   performed</description>
<package>jakarta.faces.convert</package>
<class-interface>Converter</class-interface>
<method name="getAsObject" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.faces.convert.ConverterException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1810</id>
<description>if context or   component is null</description>
<package>jakarta.faces.convert</package>
<class-interface>Converter</class-interface>
<method name="getAsObject" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1811</id>
<description>
                            
                            Convert the specified model object value, which is associated with  the specified UIComponent, into a String that is suitable  for being included in the response generated during the  Render Response phase of the request processing  lifeycle.
                            
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>Converter</class-interface>
<method name="getAsString" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1812</id>
<description>if conversion cannot be successfully   performed</description>
<package>jakarta.faces.convert</package>
<class-interface>Converter</class-interface>
<method name="getAsString" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.faces.convert.ConverterException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1813</id>
<description>if context or   component is null</description>
<package>jakarta.faces.convert</package>
<class-interface>Converter</class-interface>
<method name="getAsString" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1814</id>
<description>
                            Construct a new exception with no detail message or root cause.
                            
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterException</class-interface>
<method name="ConverterException" return-type="ConverterException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1815</id>
<description>
                            Construct a new exception with the specified detail message and  no root cause.
                            
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterException</class-interface>
<method name="ConverterException" return-type="ConverterException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1816</id>
<description>
                            Construct a new exception with the specified root cause.
                              The detail  message will be set to (cause == null ? null :  cause.toString()
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterException</class-interface>
<method name="ConverterException" return-type="ConverterException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1817</id>
<description>
                            Construct a new exception with the specified detail message and  root cause.
                            
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterException</class-interface>
<method name="ConverterException" return-type="ConverterException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1818</id>
<description>
                            Return the cause of this exception, or null if the  cause is nonexistent or unknown.
                            
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterException.{jakarta.faces.FacesException}</class-interface>
<method name="getCause" return-type="java.lang.Throwable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1819</id>
<description>
                            
                            Register a new Converter instance with the specified  converterId, to be supported by this  ConverterFactory.
                            
                              This method may be called at  any time, and makes the corresponding Converter instance  available throughout the remaining lifetime of this web application.  
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="addConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.convert.Converter</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1820</id>
<description>if a  Converter with the   specified converterId has already been registered</description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="addConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.convert.Converter</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1821</id>
<description>if converterId or   converter is null</description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="addConverter" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.convert.Converter</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1822</id>
<description>
                            
                            Register a new Converter instance that knows how to perform  conversions to and from the specified object class.
                            
                              This method may be  called at any time, and makes the corresponding Converter  instance available throughout the remaining lifetime of this web  application.
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="addConverter" return-type="void">
<parameters>
<parameter>java.lang.Class</parameter>
<parameter>jakarta.faces.convert.Converter</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1823</id>
<description>if clazz or   converter is null</description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="addConverter" return-type="void">
<parameters>
<parameter>java.lang.Class</parameter>
<parameter>jakarta.faces.convert.Converter</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1824</id>
<description/>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="ConverterFactory" return-type="ConverterFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1825</id>
<description>
                            
                            Create (if needed) and return a Converter instance that  may be used to perform Object-to-String and String-to-Object conversions  for objects of the specified class.
                            
                            
                            
                              A search of the registered  Converters is performed in the following order:    An exact match on the original class.  An exact match on one of the interfaces directly implemented      by the original class, checked in the order they are returned      by Class.getInterfaces().  Recursively for each superclass of the original class:            An exact match on this superclass.      An exact match on one of the interfaces directly implemented          by this superclass.          If a Converter is discovered during the search described  above, it is returned; otherwise null is returned.   Each call to getConverter() for the same  clazz, from within the same web application,  must return the same Converter instance.
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="getConverter" return-type="jakarta.faces.convert.Converter">
<parameters>
<parameter>java.lang.Class</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1826</id>
<description>if clazz   is null</description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="getConverter" return-type="jakarta.faces.convert.Converter">
<parameters>
<parameter>java.lang.Class</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1827</id>
<description>
                            
                            Create (if needed) and return a Converter instance that  may be used to perform Object-to-String and String-to-Object  conversions for web applications based on JavaServer Faces.
                            
                            
                              The  set of available converter identifiers is available via the  getConverterIds() method.  If no Converter  has been registered for the specified converter identifier,  return null.   Each call to getConverter() for the same  converterId, from within the same web application,  must return the same Converter instance.
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="getConverter" return-type="jakarta.faces.convert.Converter">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1828</id>
<description>if converterId   is null</description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="getConverter" return-type="jakarta.faces.convert.Converter">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1829</id>
<description>
                            
                            Return an Iterator over the set of classes for  which we have registered Converters in this factory.
                            
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="getConverterClasses" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1830</id>
<description>
                            Return an Iterator over the set of converter  identifiers supported by this factory.
                            
                        </description>
<package>jakarta.faces.convert</package>
<class-interface>ConverterFactory</class-interface>
<method name="getConverterIds" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1831</id>
<description>
                            Construct a new exception with no detail message or root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>EvaluationException</class-interface>
<method name="EvaluationException" return-type="EvaluationException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1832</id>
<description>
                            Construct a new exception with the specified detail message and  no root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>EvaluationException</class-interface>
<method name="EvaluationException" return-type="EvaluationException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1833</id>
<description>
                            Construct a new exception with the specified root cause.
                              The detail  message will be set to (cause == null ? null :  cause.toString()
                        </description>
<package>jakarta.faces.el</package>
<class-interface>EvaluationException</class-interface>
<method name="EvaluationException" return-type="EvaluationException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1834</id>
<description>
                            Construct a new exception with the specified detail message and  root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>EvaluationException</class-interface>
<method name="EvaluationException" return-type="EvaluationException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1835</id>
<description>
                            Return the cause of this exception, or null if the  cause is nonexistent or unknown.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>EvaluationException.{jakarta.faces.FacesException}</class-interface>
<method name="getCause" return-type="java.lang.Throwable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1836</id>
<description>
                            Construct a new exception with no detail message or root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyNotFoundException</class-interface>
<method name="PropertyNotFoundException" return-type="PropertyNotFoundException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1837</id>
<description>
                            Construct a new exception with the specified detail message and  no root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyNotFoundException</class-interface>
<method name="PropertyNotFoundException" return-type="PropertyNotFoundException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1838</id>
<description>
                            Construct a new exception with the specified root cause.
                              The detail  message will be set to (cause == null ? null :  cause.toString()
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyNotFoundException</class-interface>
<method name="PropertyNotFoundException" return-type="PropertyNotFoundException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1839</id>
<description>
                            Construct a new exception with the specified detail message and  root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyNotFoundException</class-interface>
<method name="PropertyNotFoundException" return-type="PropertyNotFoundException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1840</id>
<description>
                            Return the cause of this exception, or null if the  cause is nonexistent or unknown.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyNotFoundException.{jakarta.faces.FacesException}</class-interface>
<method name="getCause" return-type="java.lang.Throwable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1841</id>
<description>
                            Return the java.lang.Class representing the type of  the specified property of the specified base object, if it can be  determined; otherwise return null.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1842</id>
<description>if the specified property name   does not exist</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1843</id>
<description>if base or   name is null</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1844</id>
<description>
                            Return the java.lang.Class representing the type of  value at the specified index of the specified base object, or  null if this value is null.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1845</id>
<description>if some other exception occurs</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1846</id>
<description>if thrown by the underlying   accessed to the indexed property</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1847</id>
<description>if base   is null</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1848</id>
<description>
                            Return the value of the property with the specified name from  the specified base object.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1849</id>
<description>if the specified property name   does not exist, or is not readable</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1850</id>
<description>if base or   name is null</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1851</id>
<description>
                            Return the value at the specified index of the specified  base object.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1852</id>
<description>if some other exception occurs</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1853</id>
<description>if thrown by the underlying   access to the base object</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1854</id>
<description>if base   is null</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1855</id>
<description>
                            Return true if the specified property of the specified  base object is known to be immutable; otherwise, return  false.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1856</id>
<description>if the specified property name   does not exist</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1857</id>
<description>if base or   name is null</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1858</id>
<description>
                            Return true if the value at the specified index of  the specified base object is known to be immutable; otherwise,  return false.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1859</id>
<description>if some other exception occurs</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1860</id>
<description>if thrown by the underlying   accessed to the indexed property</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1861</id>
<description>if base   is null</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1862</id>
<description/>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="PropertyResolver" return-type="PropertyResolver"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1863</id>
<description>
                            Set the specified value of the property with the specified name on  the specified base object.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1864</id>
<description>if the specified property name   does not exist, or is not writeable</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1865</id>
<description>if base or   name is null</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1866</id>
<description>
                            Set the value at the specified index of the specified  base object.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1867</id>
<description>if some other exception occurs</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1868</id>
<description>if thrown by the underlying   access to the base object</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1869</id>
<description>if base   is null</description>
<package>jakarta.faces.el</package>
<class-interface>PropertyResolver</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>int</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1870</id>
<description>
                            Construct a new exception with no detail message or root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ReferenceSyntaxException</class-interface>
<method name="ReferenceSyntaxException" return-type="ReferenceSyntaxException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1871</id>
<description>
                            Construct a new exception with the specified detail message and  no root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ReferenceSyntaxException</class-interface>
<method name="ReferenceSyntaxException" return-type="ReferenceSyntaxException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1872</id>
<description>
                            Construct a new exception with the specified root cause.
                              The detail  message will be set to (cause == null ? null :  cause.toString()
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ReferenceSyntaxException</class-interface>
<method name="ReferenceSyntaxException" return-type="ReferenceSyntaxException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1873</id>
<description>
                            Construct a new exception with the specified detail message and  root cause.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ReferenceSyntaxException</class-interface>
<method name="ReferenceSyntaxException" return-type="ReferenceSyntaxException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1874</id>
<description>
                            Return the cause of this exception, or null if the  cause is nonexistent or unknown.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ReferenceSyntaxException.{jakarta.faces.FacesException}</class-interface>
<method name="getCause" return-type="java.lang.Throwable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1875</id>
<description>
                            
                            
                            Return the type of the property represented by this  ValueBinding, relative to the specified FacesContext.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1876</id>
<description>if the specified property name   does not exist, or is not writeable</description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1877</id>
<description>if context   is null</description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="getType" return-type="java.lang.Class">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1878</id>
<description>
                            
                            
                            Return the value of the property represented by this  ValueBinding, relative to the specified FacesContext.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1879</id>
<description>if the specified property name   does not exist, or is not readable</description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1880</id>
<description>if context   is null</description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="getValue" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1881</id>
<description>
                            Return true if the specified property of the specified  property is known to be immutable; otherwise, return  false.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1882</id>
<description>if the specified property name   does not exist</description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1883</id>
<description>if context   is null</description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="isReadOnly" return-type="boolean">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1884</id>
<description>
                            
                            
                            Set the value of the property represented by this  ValueBinding, relative to the specified FacesContext.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1885</id>
<description>if the specified property name   does not exist, or is not writeable</description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.faces.el.PropertyNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1886</id>
<description>if context   is null</description>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1887</id>
<description/>
<package>jakarta.faces.el</package>
<class-interface>ValueBinding</class-interface>
<method name="ValueBinding" return-type="ValueBinding"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1888</id>
<description>
                            Resolve the specified variable name, and return the corresponding  object, if any; otherwise, return null.
                            
                        </description>
<package>jakarta.faces.el</package>
<class-interface>VariableResolver</class-interface>
<method name="resolveVariable" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1889</id>
<description>if context   or name is null</description>
<package>jakarta.faces.el</package>
<class-interface>VariableResolver</class-interface>
<method name="resolveVariable" return-type="java.lang.Object">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1890</id>
<description/>
<package>jakarta.faces.el</package>
<class-interface>VariableResolver</class-interface>
<method name="VariableResolver" return-type="VariableResolver"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1891</id>
<description/>
<package>jakarta.faces.event</package>
<class-interface>AbortProcessingException</class-interface>
<method name="AbortProcessingException" return-type="AbortProcessingException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1892</id>
<description>
                            Return the cause of this exception, or null if the  cause is nonexistent or unknown.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>AbortProcessingException.{jakarta.faces.FacesException}</class-interface>
<method name="getCause" return-type="java.lang.Throwable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1893</id>
<description>
                            Construct a new event object from the specified source component  and action command.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ActionEvent</class-interface>
<method name="ActionEvent" return-type="ActionEvent">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1894</id>
<description>
                            Return the String identifying the command that was activated.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ActionEvent</class-interface>
<method name="getActionCommand" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1895</id>
<description>
                            
                            Return the source UIComponent that sent this event.
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ActionEvent.{jakarta.faces.event.FacesEvent}</class-interface>
<method name="getComponent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1896</id>
<description>
                            
                            Invoked when the action described by the specified  ActionEvent occurs.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ActionListener</class-interface>
<method name="processAction" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1897</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.event</package>
<class-interface>ActionListener</class-interface>
<method name="processAction" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ActionEvent</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1898</id>
<description>
                            Return the identifier of the request processing phase during  which this listener is interested in processing events of  the type we are supporting.
                            
                            
                              Legal values are the singleton  instances defined by the PhaseId class.   FacesListener instances should generally return  PhaseId.ANY_PHASE to be notified about events no matter  what the current request processing phase is.
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ActionListener.{jakarta.faces.event.FacesListener}</class-interface>
<method name="getPhaseId" return-type="jakarta.faces.event.PhaseId"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1899</id>
<description>
                            Construct a new event object from the specified source component.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>FacesEvent</class-interface>
<method name="FacesEvent" return-type="FacesEvent">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1900</id>
<description>
                            
                            Return the source UIComponent that sent this event.
                        </description>
<package>jakarta.faces.event</package>
<class-interface>FacesEvent</class-interface>
<method name="getComponent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1901</id>
<description>
                            Return the identifier of the request processing phase during  which this listener is interested in processing events of  the type we are supporting.
                            
                            
                              Legal values are the singleton  instances defined by the PhaseId class.   FacesListener instances should generally return  PhaseId.ANY_PHASE to be notified about events no matter  what the current request processing phase is.
                        </description>
<package>jakarta.faces.event</package>
<class-interface>FacesListener</class-interface>
<method name="getPhaseId" return-type="jakarta.faces.event.PhaseId"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1902</id>
<description>
                            
                            Compare this PhaseId instance to the specified one.
                              Returns a negative integer, zero, or a positive integer if this  object is less than, equal to, or greater than the specified object.
                        </description>
<package>jakarta.faces.event</package>
<class-interface>PhaseId</class-interface>
<method name="compareTo" return-type="int">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1903</id>
<description>
                            
                            Return the ordinal value of this PhaseId instance.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>PhaseId</class-interface>
<method name="getOrdinal" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1904</id>
<description>
                            
                            Return a String representation of this PhaseId instance.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>PhaseId</class-interface>
<method name="toString" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1905</id>
<description>
                            
                            Return the current local value of the source UIComponent.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ValueChangedEvent</class-interface>
<method name="getNewValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1906</id>
<description>
                            
                            Return the previous local value of the source UIComponent.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ValueChangedEvent</class-interface>
<method name="getOldValue" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1907</id>
<description>
                            Construct a new event object from the specified source component,  old value, and new value.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ValueChangedEvent</class-interface>
<method name="ValueChangedEvent" return-type="ValueChangedEvent">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1908</id>
<description>
                            
                            Return the source UIComponent that sent this event.
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ValueChangedEvent.{jakarta.faces.event.FacesEvent}</class-interface>
<method name="getComponent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1909</id>
<description>
                            
                            Invoked when the value change described by the specified  ValueChangedEvent occurs.
                            
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ValueChangedListener</class-interface>
<method name="processValueChanged" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedEvent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1910</id>
<description>Signal the JavaServer Faces   implementation that no further processing on the current event   should be performed</description>
<package>jakarta.faces.event</package>
<class-interface>ValueChangedListener</class-interface>
<method name="processValueChanged" return-type="void">
<parameters>
<parameter>jakarta.faces.event.ValueChangedEvent</parameter>
</parameters>
<throw>jakarta.faces.event.AbortProcessingException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1911</id>
<description>
                            Return the identifier of the request processing phase during  which this listener is interested in processing events of  the type we are supporting.
                            
                            
                              Legal values are the singleton  instances defined by the PhaseId class.   FacesListener instances should generally return  PhaseId.ANY_PHASE to be notified about events no matter  what the current request processing phase is.
                        </description>
<package>jakarta.faces.event</package>
<class-interface>ValueChangedListener.{jakarta.faces.event.FacesListener}</class-interface>
<method name="getPhaseId" return-type="jakarta.faces.event.PhaseId"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1912</id>
<description>
                            Execute all of the phases of the request processing lifecycle,  as described in the JavaServer Faces Specification, in the specified  order.
                            
                              The processing flow can be affected (by the application,  by components, or by event listeners) by calls to the  renderResponse() or responseComplete()  methods of the FacesContext instance associated with  the current request.
                        </description>
<package>jakarta.faces.lifecycle</package>
<class-interface>Lifecycle</class-interface>
<method name="execute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1913</id>
<description>if thrown during the execution of the   request processing lifecycle</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>Lifecycle</class-interface>
<method name="execute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>jakarta.faces.FacesException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1914</id>
<description>if context   is null</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>Lifecycle</class-interface>
<method name="execute" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1915</id>
<description>
                            
                            Return the ViewHandler instance that will be utilized  during the Render Response phase of the request processing  lifecycle.
                            
                        </description>
<package>jakarta.faces.lifecycle</package>
<class-interface>Lifecycle</class-interface>
<method name="getViewHandler" return-type="jakarta.faces.lifecycle.ViewHandler"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1916</id>
<description/>
<package>jakarta.faces.lifecycle</package>
<class-interface>Lifecycle</class-interface>
<method name="Lifecycle" return-type="Lifecycle"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1917</id>
<description>
                            
                            Set the ViewHandler instance that will be utilized  during the Render Response phase of the request processing  lifecycle.
                            
                        </description>
<package>jakarta.faces.lifecycle</package>
<class-interface>Lifecycle</class-interface>
<method name="setViewHandler" return-type="void">
<parameters>
<parameter>jakarta.faces.lifecycle.ViewHandler</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1918</id>
<description>if this method is called after at least   one request has been processed by this Lifecycle instance</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>Lifecycle</class-interface>
<method name="setViewHandler" return-type="void">
<parameters>
<parameter>jakarta.faces.lifecycle.ViewHandler</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1919</id>
<description>if handler   is null</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>Lifecycle</class-interface>
<method name="setViewHandler" return-type="void">
<parameters>
<parameter>jakarta.faces.lifecycle.ViewHandler</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1920</id>
<description>
                            
                            Register a new Lifecycle instance, associated with  the specified lifecycleId, to be supported by this  LifecycleFactory.
                            
                              This method may be called at  any time, and makes the corresponding Lifecycle instance  available throughout the remaining lifetime of this web application.  
                        </description>
<package>jakarta.faces.lifecycle</package>
<class-interface>LifecycleFactory</class-interface>
<method name="addLifecycle" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1921</id>
<description>if a  Lifecycle with the   specified lifecycleId has already been registered</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>LifecycleFactory</class-interface>
<method name="addLifecycle" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1922</id>
<description>if lifecycleId   or lifecycle is null</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>LifecycleFactory</class-interface>
<method name="addLifecycle" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.lifecycle.Lifecycle</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1923</id>
<description>
                            
                            Create (if needed) and return a Lifecycle instance  for the specified lifecycle identifier.
                            
                              The set of available  lifecycle identifiers is available via the  getLifecycleIds() method.   Each call to getLifecycle() for the same  lifecycleId, from within the same web application,  must return the same Lifecycle instance.
                        </description>
<package>jakarta.faces.lifecycle</package>
<class-interface>LifecycleFactory</class-interface>
<method name="getLifecycle" return-type="jakarta.faces.lifecycle.Lifecycle">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1924</id>
<description>if no  Lifecycle instance   can be returned for the specified identifier</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>LifecycleFactory</class-interface>
<method name="getLifecycle" return-type="jakarta.faces.lifecycle.Lifecycle">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1925</id>
<description>if lifecycleId   is null</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>LifecycleFactory</class-interface>
<method name="getLifecycle" return-type="jakarta.faces.lifecycle.Lifecycle">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1926</id>
<description>
                            Return an Iterator over the set of lifecycle  identifiers supported by this factory.
                              This set must include  the value specified by LifecycleFactory.DEFAULT_LIFECYCLE.  
                        </description>
<package>jakarta.faces.lifecycle</package>
<class-interface>LifecycleFactory</class-interface>
<method name="getLifecycleIds" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1927</id>
<description/>
<package>jakarta.faces.lifecycle</package>
<class-interface>LifecycleFactory</class-interface>
<method name="LifecycleFactory" return-type="LifecycleFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1928</id>
<description>
                            
                            Perform whatever actions are required to render the response  component tree to the ServletResponse associated with  the specified FacesContext.
                            
                        </description>
<package>jakarta.faces.lifecycle</package>
<class-interface>ViewHandler</class-interface>
<method name="renderView" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1929</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>ViewHandler</class-interface>
<method name="renderView" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1930</id>
<description>if a servlet error occurs</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>ViewHandler</class-interface>
<method name="renderView" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>ServletException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1931</id>
<description>if context   is null</description>
<package>jakarta.faces.lifecycle</package>
<class-interface>ViewHandler</class-interface>
<method name="renderView" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1932</id>
<description>
                            
                            
                            
                            Decode the current state of the specified UIComponent  from the request contained in the specified FacesContext,  and attempt to convert this state information into an object of  the type required for this component (optionally using the registered  jakarta.faces.convert.Converter for this component,  if there is one).
                            
                            
                               If conversion is successful:    Save the new local value of this component by calling      setValue() and passing the new value.  Set the value property of this component      to true.     If conversion is not successful:    Save the state information (inside the component) in such a way      that encoding can reproduce the previous input      (even though it was syntactically or semantically incorrect).  Add an appropriate conversion failure error message by calling      addMessage() on the specified FacesContext.        Set the valid property of this component      to false.     During decoding, events may be enqueued for later processing  (by event listeners that have registered an interest), by calling  addFacesEvent() on the associated FacesContext.  
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1933</id>
<description>if an input/output error occurs while decoding</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1934</id>
<description>if context   or component is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="decode" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1935</id>
<description>
                            
                            Render the beginning specified UIComponent to the  output stream or writer associated with the response we are creating.
                              If the conversion attempted in a previous call to decode  for this component failed, the state information saved during execution  of decode() should be utilized to reproduce the incorrect  input.  If the conversion was successful, or if there was no previous  call to decode(), the value to be displayed should be  acquired by calling component.currentValue(), and  rendering the value as appropriate.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1936</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1937</id>
<description>if context   or component is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeBegin" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1938</id>
<description>
                            
                            Render the child components of this UIComponent, following  the rules described for encodeBegin() to acquire the  appropriate value to be rendered.
                              This method will only be called  if the rendersChildren property of this component  is true.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1939</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1940</id>
<description>if context   or component is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeChildren" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1941</id>
<description>
                            
                            Render the ending of the current state of the specified  UIComponent, following the rules described for  encodeBegin() to acquire the appropriate value  to be rendered.
                            
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1942</id>
<description>if an input/output error occurs while rendering</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1943</id>
<description>if context   or component is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="encodeEnd" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1944</id>
<description>
                            
                            Return an AttributeDescriptor for the specified attribute  name, as supported for the specified component class.
                            
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeDescriptor" return-type="jakarta.faces.component.AttributeDescriptor">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1945</id>
<description>if the specified component class   is not supported</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeDescriptor" return-type="jakarta.faces.component.AttributeDescriptor">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1946</id>
<description>if the specified attribute name   is not supported for the specified component class</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeDescriptor" return-type="jakarta.faces.component.AttributeDescriptor">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1947</id>
<description>if component or   name is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeDescriptor" return-type="jakarta.faces.component.AttributeDescriptor">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1948</id>
<description>
                            
                            Return an AttributeDescriptor for the specified attribute  name, as supported for the specified component type.
                            
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeDescriptor" return-type="jakarta.faces.component.AttributeDescriptor">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1949</id>
<description>if the specified component type   is not supported</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeDescriptor" return-type="jakarta.faces.component.AttributeDescriptor">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1950</id>
<description>if the specified attribute name   is not supported for the specified component type</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeDescriptor" return-type="jakarta.faces.component.AttributeDescriptor">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1951</id>
<description>if type or   name is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeDescriptor" return-type="jakarta.faces.component.AttributeDescriptor">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1952</id>
<description>
                            
                            Return an Iterator over the names of the supported  attributes for the specified UIComponent implementation class.
                              If no attributes are supported, an empty Iterator  is returned.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1953</id>
<description>if the specified component class   is not supported</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1954</id>
<description>if component   is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1955</id>
<description>
                            Return an Iterator over the names of the supported  attributes for the specified component type.
                              If no attributes are  supported, an empty Iterator is returned.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1956</id>
<description>if the specified component type   is not supported</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1957</id>
<description>if type   is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getAttributeNames" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1958</id>
<description>
                            Generate and return a new client-side identifier for the  specified component.
                            
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1959</id>
<description>if context   or component is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="getClientId" return-type="java.lang.String">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1960</id>
<description/>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="Renderer" return-type="Renderer"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1961</id>
<description>
                            
                            Return true if this Renderer supports  components of the specified UIComponent class.
                            
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="supportsComponentType" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1962</id>
<description>if component   is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="supportsComponentType" return-type="boolean">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1963</id>
<description>
                            Return true if this Renderer supports  components of the specified type.
                            
                              This is matched against  the type property of each UIComponent to determine  compatibility.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="supportsComponentType" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1964</id>
<description>if componentType   is null</description>
<package>jakarta.faces.render</package>
<class-interface>Renderer</class-interface>
<method name="supportsComponentType" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1965</id>
<description>
                            
                            
                            
                            Add a new UIComponent subclass to the set of component  classes registered with this RenderKit instance  and supported by its constituent Renderers.
                            
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="addComponentClass" return-type="void">
<parameters>
<parameter>java.lang.Class</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1966</id>
<description>if componentClass   is not a  UIComponent subclass</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="addComponentClass" return-type="void">
<parameters>
<parameter>java.lang.Class</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1967</id>
<description>if componentClass   is null</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="addComponentClass" return-type="void">
<parameters>
<parameter>java.lang.Class</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1968</id>
<description>
                            
                            
                            
                            Add a new Renderer instance, associated with the  specified rendererType, to the set of  Renderers registered with this RenderKit.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="addRenderer" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.render.Renderer</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1969</id>
<description>if a  Renderer with the   specified rendererType has already been registered</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="addRenderer" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.render.Renderer</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1970</id>
<description>if rendererType or   renderer is null</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="addRenderer" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.render.Renderer</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1971</id>
<description>
                            
                            
                            
                            Return an Iterator of the UIComponent  classes that are registered with this RenderKit  instance and supported by its constituent Renderers.
                              If  there are no such registered component classes, an empty  Iterator is returned.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getComponentClasses" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1972</id>
<description>
                            
                            Create (if necessary) and return a Renderer instance  with the specified renderer type.
                              Subsequent calls to this method  with the same rendererType, from the same web application,  must return the same instance.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getRenderer" return-type="jakarta.faces.render.Renderer">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1973</id>
<description>if the requested renderer type   is not supported by this  RenderKit</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getRenderer" return-type="jakarta.faces.render.Renderer">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1974</id>
<description>if rendererType   is null</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getRenderer" return-type="jakarta.faces.render.Renderer">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1975</id>
<description>
                            Return an Iterator of all the renderer types registered  with this RenderKit.
                            
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getRendererTypes" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1976</id>
<description>
                            
                            
                            Return an Iterator of the renderer types of all  Renderer instances registered with this RenderKit  that support components of the specified component type.
                            
                              If no Renderers support this component type, an empty  Iterator is returned.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getRendererTypes" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1977</id>
<description>if componentType   is null</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getRendererTypes" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1978</id>
<description>
                            
                            
                            
                            Return an Iterator of the renderer types of all  Renderer instances registered with this RenderKit  that support components of the specified UIComponent subclass.
                            
                              If no Renderers support this component class, an empty  Iterator is returned.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getRendererTypes" return-type="java.util.Iterator">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1979</id>
<description>if component   is null</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="getRendererTypes" return-type="java.util.Iterator">
<parameters>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1980</id>
<description/>
<package>jakarta.faces.render</package>
<class-interface>RenderKit</class-interface>
<method name="RenderKit" return-type="RenderKit"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1981</id>
<description>
                            
                            
                            Register a new RenderKit instance, associated with  the specified renderKitId, to be supported by this  RenderKitFactory.
                            
                              This method may be called at  any time, and makes the corresponding RenderKit instance  available throughout the remaining lifetime of this web application.  
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="addRenderKit" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.render.RenderKit</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1982</id>
<description>if a  RenderKit with the   specified renderKitId has already been registered</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="addRenderKit" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.render.RenderKit</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1983</id>
<description>if renderKitId or   renderKit is null</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="addRenderKit" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.render.RenderKit</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1984</id>
<description>
                            
                            Create (if needed) and return a RenderKit instance  for the specified render kit identifier.
                            
                              The set of available render  kit identifiers is available via the getRenderKitIds()  method.   Each call to getRenderKit() for the same  renderKitId, from within the same web application,  must return the same RenderKit instance.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1985</id>
<description>if no  RenderKit instance   can be returned for the specified identifier</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1986</id>
<description>if renderKitId   is null</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1987</id>
<description>
                            
                            
                            Create (if needed) and return a RenderKit instance  for the specified render kit identifier, possibly customized based  on dynamic characteristics of the specified FacesContext.
                              The set of available render kit identifiers is available via the  getRenderKitIds() method.
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1988</id>
<description>if no  RenderKit instance   can be returned for the specified identifier</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1989</id>
<description>if renderKitId   or context is null</description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="getRenderKit" return-type="jakarta.faces.render.RenderKit">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>jakarta.faces.context.FacesContext</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1990</id>
<description>
                            Return an Iterator over the set of render kit  identifiers supported by this factory.
                              This set must include  the value specified by RenderKitFactory.DEFAULT_RENDER_KIT.  
                        </description>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="getRenderKitIds" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1991</id>
<description/>
<package>jakarta.faces.render</package>
<class-interface>RenderKitFactory</class-interface>
<method name="RenderKitFactory" return-type="RenderKitFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1992</id>
<description>
                            
                            Return the render kit identifier of the RenderKit instance  (if any) associated with this Tree.
                            
                        </description>
<package>jakarta.faces.tree</package>
<class-interface>Tree</class-interface>
<method name="getRenderKitId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1993</id>
<description>
                            
                            Return the root node of the component tree associated with  this Tree.
                            
                        </description>
<package>jakarta.faces.tree</package>
<class-interface>Tree</class-interface>
<method name="getRoot" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1994</id>
<description>
                            
                            Return the tree identifier for this Tree.
                            
                        </description>
<package>jakarta.faces.tree</package>
<class-interface>Tree</class-interface>
<method name="getTreeId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1995</id>
<description>
                            
                            Set the render kit identifier of the  RenderKit instance  (if any) associated with this Tree.
                            
                        </description>
<package>jakarta.faces.tree</package>
<class-interface>Tree</class-interface>
<method name="setRenderKitId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1996</id>
<description/>
<package>jakarta.faces.tree</package>
<class-interface>Tree</class-interface>
<method name="Tree" return-type="Tree"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1997</id>
<description>
                            
                            
                            Create (if needed) and return a Tree that is initialized  with a root node, and whose renderKitId property is  initialized to the identifier of the default  jakarta.faces.render.RenderKit.
                            
                        </description>
<package>jakarta.faces.tree</package>
<class-interface>TreeFactory</class-interface>
<method name="getTree" return-type="jakarta.faces.tree.Tree">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1998</id>
<description>if a  Tree cannot be   constructed for the specified parameters</description>
<package>jakarta.faces.tree</package>
<class-interface>TreeFactory</class-interface>
<method name="getTree" return-type="jakarta.faces.tree.Tree">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>jakarta.faces.FacesException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1999</id>
<description>if context or   treeId is null</description>
<package>jakarta.faces.tree</package>
<class-interface>TreeFactory</class-interface>
<method name="getTree" return-type="jakarta.faces.tree.Tree">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2000</id>
<description/>
<package>jakarta.faces.tree</package>
<class-interface>TreeFactory</class-interface>
<method name="TreeFactory" return-type="TreeFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2001</id>
<description>
                            
                            Construct a Validator with no preconfigured limits.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="DoubleRangeValidator" return-type="DoubleRangeValidator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2002</id>
<description>
                            
                            Construct a Validator with the specified preconfigured  limit.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="DoubleRangeValidator" return-type="DoubleRangeValidator">
<parameters>
<parameter>double</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2003</id>
<description>
                            
                            Construct a Validator with the specified preconfigured  limits.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="DoubleRangeValidator" return-type="DoubleRangeValidator">
<parameters>
<parameter>double</parameter>
<parameter>double</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2004</id>
<description>
                            
                            Return the maximum value to be enforced by this Validator,  if isMaximumSet() returns true.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="getMaximum" return-type="double"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2005</id>
<description>
                            
                            Return the minimum value to be enforced by this Validator,  if isMinimumSet() returns true.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="getMinimum" return-type="double"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2006</id>
<description>
                            Return a flag indicating whether a maximum limit has been set.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="isMaximumSet" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2007</id>
<description>
                            Return a flag indicating whether a minimum limit has been set.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="isMinimumSet" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2008</id>
<description>
                            
                            Set the maximum value to be enforced by this Validator.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>double</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2009</id>
<description>if a specified maximum value is   less than a specified minimum value</description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>double</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2010</id>
<description>
                            
                            Set the minimum value to be enforced by this Validator.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>double</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2011</id>
<description>if a specified maximum value is   less than a specified minimum value</description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>double</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2012</id>
<description>
                            
                            
                            Perform the correctness checks implemented by this  Validator against the specified UIComponent.
                            
                            
                            
                            
                              If any violations are found:    Add zero or more Messages to the specified      FacesContext, specifying this UIComponent as      associated with the message, describing the nature of the      violation(s) encountered.  Set the valid property on the specified      UIComponent to false.  
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2013</id>
<description>if context   or component is null</description>
<package>jakarta.faces.validator</package>
<class-interface>DoubleRangeValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2014</id>
<description>
                            
                            Return the maximum length to be enforced by this Validator,  if isMaximumSet() returns true.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="getMaximum" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2015</id>
<description>
                            
                            Return the minimum length to be enforced by this Validator,  if isMinimumSet() returns true.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="getMinimum" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2016</id>
<description>
                            Return a flag indicating whether a maximum length has been set.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="isMaximumSet" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2017</id>
<description>
                            Return a flag indicating whether a minimum limit has been set.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="isMinimumSet" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2018</id>
<description>
                            
                            Construct a Validator with no preconfigured limits.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="LengthValidator" return-type="LengthValidator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2019</id>
<description>
                            
                            Construct a Validator with the specified preconfigured  limit.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="LengthValidator" return-type="LengthValidator">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2020</id>
<description>
                            
                            Construct a Validator with the specified preconfigured  limits.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="LengthValidator" return-type="LengthValidator">
<parameters>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2021</id>
<description>
                            
                            Set the maximum length to be enforced by this Validator.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2022</id>
<description>if a specified maximum value is   less than a specified minimum value</description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2023</id>
<description>
                            
                            Set the minimum length to be enforced by this Validator.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2024</id>
<description>if a specified maximum value is   less than a specified minimum value</description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2025</id>
<description>
                            
                            
                            Perform the correctness checks implemented by this  Validator against the specified UIComponent.
                            
                            
                            
                            
                              If any violations are found:    Add zero or more Messages to the specified      FacesContext, specifying this UIComponent as      associated with the message, describing the nature of the      violation(s) encountered.  Set the valid property on the specified      UIComponent to false.  
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2026</id>
<description>if context   or component is null</description>
<package>jakarta.faces.validator</package>
<class-interface>LengthValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2027</id>
<description>
                            
                            Return the maximum value to be enforced by this Validator,  if isMaximumSet() returns true.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="getMaximum" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2028</id>
<description>
                            
                            Return the minimum value to be enforced by this Validator,  if isMinimumSet() returns true.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="getMinimum" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2029</id>
<description>
                            Return a flag indicating whether a maximum limit has been set.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="isMaximumSet" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2030</id>
<description>
                            Return a flag indicating whether a minimum limit has been set.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="isMinimumSet" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2031</id>
<description>
                            
                            Construct a Validator with no preconfigured limits.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="LongRangeValidator" return-type="LongRangeValidator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2032</id>
<description>
                            
                            Construct a Validator with the specified preconfigured  limit.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="LongRangeValidator" return-type="LongRangeValidator">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2033</id>
<description>
                            
                            Construct a Validator with the specified preconfigured  limits.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="LongRangeValidator" return-type="LongRangeValidator">
<parameters>
<parameter>long</parameter>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2034</id>
<description>
                            
                            Set the maximum value to be enforced by this Validator.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2035</id>
<description>if a specified maximum value is   less than a specified minimum value</description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2036</id>
<description>
                            
                            Set the minimum value to be enforced by this Validator.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2037</id>
<description>if a specified maximum value is   less than a specified minimum value</description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>long</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2038</id>
<description>
                            
                            
                            Perform the correctness checks implemented by this  Validator against the specified UIComponent.
                            
                            
                            
                            
                              If any violations are found:    Add zero or more Messages to the specified      FacesContext, specifying this UIComponent as      associated with the message, describing the nature of the      violation(s) encountered.  Set the valid property on the specified      UIComponent to false.  
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2039</id>
<description>if context   or component is null</description>
<package>jakarta.faces.validator</package>
<class-interface>LongRangeValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2040</id>
<description/>
<package>jakarta.faces.validator</package>
<class-interface>RequiredValidator</class-interface>
<method name="RequiredValidator" return-type="RequiredValidator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2041</id>
<description>
                            
                            
                            Perform the correctness checks implemented by this  Validator against the specified UIComponent.
                            
                            
                            
                            
                              If any violations are found:    Add zero or more Messages to the specified      FacesContext, specifying this UIComponent as      associated with the message, describing the nature of the      violation(s) encountered.  Set the valid property on the specified      UIComponent to false.  
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>RequiredValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2042</id>
<description>if context   or component is null</description>
<package>jakarta.faces.validator</package>
<class-interface>RequiredValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2043</id>
<description>
                            
                            Return the maximum value to be enforced by this Validator,  if isMaximumSet() returns true.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="getMaximum" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2044</id>
<description>
                            
                            Return the minimum value to be enforced by this Validator,  if isMinimumSet() returns true.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="getMinimum" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2045</id>
<description>
                            Return a flag indicating whether a maximum limit has been set.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="isMaximumSet" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2046</id>
<description>
                            Return a flag indicating whether a minimum limit has been set.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="isMinimumSet" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2047</id>
<description>
                            
                            Set the maximum value to be enforced by this Validator.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2048</id>
<description>if a specified maximum value is   less than a specified minimum value</description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2049</id>
<description>if maximum   is null</description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="setMaximum" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2050</id>
<description>
                            
                            Set the minimum value to be enforced by this Validator.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2051</id>
<description>if a specified maximum value is   less than a specified minimum value</description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2052</id>
<description>if minimum   is null</description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="setMinimum" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2053</id>
<description>
                            
                            Construct a Validator with no preconfigured limits.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="StringRangeValidator" return-type="StringRangeValidator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2054</id>
<description>
                            
                            Construct a Validator with the specified preconfigured  limit.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="StringRangeValidator" return-type="StringRangeValidator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2055</id>
<description>
                            
                            Construct a Validator with the specified preconfigured  limits.
                            
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="StringRangeValidator" return-type="StringRangeValidator">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2056</id>
<description>
                            
                            
                            Perform the correctness checks implemented by this  Validator against the specified UIComponent.
                            
                            
                            
                            
                              If any violations are found:    Add zero or more Messages to the specified      FacesContext, specifying this UIComponent as      associated with the message, describing the nature of the      violation(s) encountered.  Set the valid property on the specified      UIComponent to false.  
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2057</id>
<description>if context   or component is null</description>
<package>jakarta.faces.validator</package>
<class-interface>StringRangeValidator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2058</id>
<description>
                            
                            
                            Perform the correctness checks implemented by this  Validator against the specified UIComponent.
                            
                            
                            
                            
                              If any violations are found:    Add zero or more Messages to the specified      FacesContext, specifying this UIComponent as      associated with the message, describing the nature of the      violation(s) encountered.  Set the valid property on the specified      UIComponent to false.  
                        </description>
<package>jakarta.faces.validator</package>
<class-interface>Validator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2059</id>
<description>if context   or component is null</description>
<package>jakarta.faces.validator</package>
<class-interface>Validator</class-interface>
<method name="validate" return-type="void">
<parameters>
<parameter>jakarta.faces.context.FacesContext</parameter>
<parameter>jakarta.faces.component.UIComponent</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2060</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>AttributeTag</class-interface>
<method name="AttributeTag" return-type="AttributeTag"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2061</id>
<description>
                            
                            
                            
                            Register the specified attribute name and value with the  UIComponent instance associated with our most immediately  surrounding FacesTag instance, if this UIComponent  does not already have a value for the specified attribute name.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>AttributeTag</class-interface>
<method name="doStartTag" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2062</id>
<description>if a JSP error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>AttributeTag</class-interface>
<method name="doStartTag" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2063</id>
<description>
                            Release references to any acquired resources.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>AttributeTag</class-interface>
<method name="release" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2064</id>
<description>
                            Set the attribute name.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>AttributeTag</class-interface>
<method name="setName" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2065</id>
<description>
                            Set the attribute value.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>AttributeTag</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2066</id>
<description>
                            Handle the ending of the nested body content for this tag.
                              The  default implementation simply calls getDoAfterBodyValue()  to retrieve the flag value to be returned.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="doAfterBody" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2067</id>
<description>if an error is encountered</description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="doAfterBody" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2068</id>
<description>
                            Prepare for evaluation of the body.
                              This method is invoked by the  JSP page implementation object after setBodyContent()  and before the first time the body is to be evaluated.  This method  will not be invoked for empty tags or for non-empty tags whose  doStartTag() method returns SKIP_BODY  or EVAL_BODY_INCLUDE.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="doInitBody" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2069</id>
<description>if an error is encountered</description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="doInitBody" return-type="void">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2070</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="FacesBodyTag" return-type="FacesBodyTag"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2071</id>
<description>
                            Return the BodyContent for this tag handler.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="getBodyContent" return-type="BodyContent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2072</id>
<description>
                            Get the JspWriter from our BodyContent.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="getPreviousOut" return-type="JspWriter"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2073</id>
<description>
                            Release any resources allocated during the execution of this  tag handler.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="release" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2074</id>
<description>
                            Set the bodyContent for this tag handler.
                              This method  is invoked by the JSP page implementation object at most once per  action invocation, before doInitiBody().  This method  will not be invoked for empty tags or for non-empty tags whose  doStartTag() method returns SKIP_BODY or  EVAL_BODY_INCLUDE.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag</class-interface>
<method name="setBodyContent" return-type="void">
<parameters>
<parameter>BodyContent</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2075</id>
<description>
                            
                            Render the ending of the UIComponent that is associated  with this tag (via the id attribute), by following these  steps.
                                If the rendersChildren property of this component is      true, call the encodeChildren() method      of the component.  Call the encodeEnd() method of the component.  Release all references to the component, and pop it from      the component stack for this response, removing the stack      if this was the outermost component.     The flag value to be returned is acquired by calling the  getDoEndValue() method, which tag subclasses may  override if they do not want the default value.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="doEndTag" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2076</id>
<description>if an error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="doEndTag" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2077</id>
<description>
                            
                            Render the beginning of the UIComponent that is associated  with this tag (via the id attribute), by following these  steps.
                            
                            
                                Ensure that an appropriate ResponseWriter is associated      with the current FacesContext.  This ensures that encoded      output from the components is routed through the      JspWriter for the current page.  Locate the component (in the component tree) corresponding      to this tag, creating a new one if necesary.  Override the attributes of the associated component with values      set in our custom tag attributes, if values for the corresponding      attributes are NOT already set on the component.        Push this component onto the stack of components corresponding to      nested component tags for the current response, creating the stack      if necessary.  Call the encodeBegin() method of the component.     The flag value to be returned is acquired by calling the  getDoStartValue() method, which tag subclasses may  override if they do not want the default value.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="doStartTag" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2078</id>
<description>if an error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="doStartTag" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2079</id>
<description>
                            
                            Return the UIComponent instance that is associated with  this tag instance.
                              This method is designed to be used by tags nested  within this tag, and only returns useful results between the  execution of doStartTag() and doEndTag()  on this tag instance.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="getComponent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2080</id>
<description>
                            Return true if we dynamically created a new component  instance during execution of this tag.
                              This method is designed to be  used by tags nested within this tag, and only returns useful results  between the execution of doStartTag() and  doEndTag() on this tag instance.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="getCreated" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2081</id>
<description>
                            Return the Tag that is the parent of this instance.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="getParent" return-type="Tag"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2082</id>
<description>
                            Return the rendererType property that selects the  Renderer to be used for encoding this component, or  null to ask the component to render itself directly.
                              Subclasses must override this method to return the appropriate value.  
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2083</id>
<description>
                            Set the component identifier for our component.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="setId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2084</id>
<description>
                            Set the PageContext of the page containing this  tag instance.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="setPageContext" return-type="void">
<parameters>
<parameter>PageContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2085</id>
<description>
                            Set the Tag that is the parent of this instance.
                              In addition, locate the closest enclosing FacesTag and  increment its numChildren counter.  Finally, save our  childIndex as  (enclosingFacesTag.numChildren - 1).
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>Tag</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2086</id>
<description>
                            Set an override for the rendered attribute.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesBodyTag.{jakarta.faces.webapp.FacesTag}</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2087</id>
<description>
                            Release all resources acquired at startup time.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="destroy" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2088</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="FacesServlet" return-type="FacesServlet"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2089</id>
<description>
                            Return the ServletConfig instance for this servlet.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="getServletConfig" return-type="ServletConfig"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2090</id>
<description>
                            Return information about this Servlet.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="getServletInfo" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2091</id>
<description>
                            Acquire the factory instances we will require.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="init" return-type="void">
<parameters>
<parameter>ServletConfig</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2092</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="init" return-type="void">
<parameters>
<parameter>ServletConfig</parameter>
</parameters>
<throw>ServletException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2093</id>
<description>
                            Process an incoming request, and create the corresponding  response, by executing the request processing lifecycle.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="service" return-type="void">
<parameters>
<parameter>ServletRequest</parameter>
<parameter>ServletResponse</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2094</id>
<description>if an input/output error occurs during processing</description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="service" return-type="void">
<parameters>
<parameter>ServletRequest</parameter>
<parameter>ServletResponse</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2095</id>
<description>if a servlet error occurs during processing</description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesServlet</class-interface>
<method name="service" return-type="void">
<parameters>
<parameter>ServletRequest</parameter>
<parameter>ServletResponse</parameter>
</parameters>
<throw>ServletException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2096</id>
<description>
                            
                            Render the ending of the UIComponent that is associated  with this tag (via the id attribute), by following these  steps.
                                If the rendersChildren property of this component is      true, call the encodeChildren() method      of the component.  Call the encodeEnd() method of the component.  Release all references to the component, and pop it from      the component stack for this response, removing the stack      if this was the outermost component.     The flag value to be returned is acquired by calling the  getDoEndValue() method, which tag subclasses may  override if they do not want the default value.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="doEndTag" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2097</id>
<description>if an error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="doEndTag" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2098</id>
<description>
                            
                            Render the beginning of the UIComponent that is associated  with this tag (via the id attribute), by following these  steps.
                            
                            
                                Ensure that an appropriate ResponseWriter is associated      with the current FacesContext.  This ensures that encoded      output from the components is routed through the      JspWriter for the current page.  Locate the component (in the component tree) corresponding      to this tag, creating a new one if necesary.  Override the attributes of the associated component with values      set in our custom tag attributes, if values for the corresponding      attributes are NOT already set on the component.        Push this component onto the stack of components corresponding to      nested component tags for the current response, creating the stack      if necessary.  Call the encodeBegin() method of the component.     The flag value to be returned is acquired by calling the  getDoStartValue() method, which tag subclasses may  override if they do not want the default value.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="doStartTag" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2099</id>
<description>if an error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="doStartTag" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2100</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="FacesTag" return-type="FacesTag"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2101</id>
<description>
                            
                            Return the UIComponent instance that is associated with  this tag instance.
                              This method is designed to be used by tags nested  within this tag, and only returns useful results between the  execution of doStartTag() and doEndTag()  on this tag instance.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="getComponent" return-type="jakarta.faces.component.UIComponent"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2102</id>
<description>
                            Return true if we dynamically created a new component  instance during execution of this tag.
                              This method is designed to be  used by tags nested within this tag, and only returns useful results  between the execution of doStartTag() and  doEndTag() on this tag instance.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="getCreated" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2103</id>
<description>
                            Return the Tag that is the parent of this instance.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="getParent" return-type="Tag"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2104</id>
<description>
                            Return the rendererType property that selects the  Renderer to be used for encoding this component, or  null to ask the component to render itself directly.
                              Subclasses must override this method to return the appropriate value.  
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="getRendererType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2105</id>
<description>
                            Release any resources allocated during the execution of this  tag handler.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="release" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2106</id>
<description>
                            Set the component identifier for our component.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="setId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2107</id>
<description>
                            Set the PageContext of the page containing this  tag instance.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="setPageContext" return-type="void">
<parameters>
<parameter>PageContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2108</id>
<description>
                            Set the Tag that is the parent of this instance.
                              In addition, locate the closest enclosing FacesTag and  increment its numChildren counter.  Finally, save our  childIndex as  (enclosingFacesTag.numChildren - 1).
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="setParent" return-type="void">
<parameters>
<parameter>Tag</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2109</id>
<description>
                            Set an override for the rendered attribute.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>FacesTag</class-interface>
<method name="setRendered" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2110</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacetTag</class-interface>
<method name="doEndTag" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2111</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacetTag</class-interface>
<method name="doEndTag" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2112</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacetTag</class-interface>
<method name="doStartTag" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2113</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacetTag</class-interface>
<method name="doStartTag" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2114</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacetTag</class-interface>
<method name="FacetTag" return-type="FacetTag"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2115</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacetTag</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2116</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacetTag</class-interface>
<method name="release" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2117</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>FacetTag</class-interface>
<method name="setName" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2118</id>
<description>
                            Close the underlying writer.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2119</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="close" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2120</id>
<description>
                            Flush the underlying writer's buffer, if any.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="flush" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2121</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="flush" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2122</id>
<description>
                            Create a JspResponseWriter that wraps the specified  PageContext.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="JspResponseWriter" return-type="JspResponseWriter">
<parameters>
<parameter>PageContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2123</id>
<description>
                            Write an array of characters.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2124</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2125</id>
<description>
                            Write a portion of an array of characters.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2126</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2127</id>
<description>
                            Write a single character from the low-order 16 bits of the  specified integer.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2128</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2129</id>
<description>
                            Write a String of characters.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2130</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2131</id>
<description>
                            Write a portion of a String of characters.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2132</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2133</id>
<description>
                            Write whatever text should end a response.
                              If there is an open  element that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endDocument" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2134</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endDocument" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2135</id>
<description>
                            Write the end of an element, after closing any open element  created by a call to startElement().
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2136</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2137</id>
<description>if name   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2138</id>
<description>
                            Write whatever text should begin a response.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startDocument" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2139</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startDocument" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2140</id>
<description>
                            Write the start of an element, up to and including the  element name.
                              Once this method has been called, clients can  call writeAttribute() or writeURIAttribute()  method to add attributes and corresponding values.  The starting  element will be closed (that is, the trailing '&gt;' character added)  on any subsequent call to startElement(),  writeComment(),  writeText(), endElement(), or  endDocument().
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2141</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2142</id>
<description>if name   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2143</id>
<description>
                            Write an attribute name and corresponding value (after converting  that text to a String if necessary), after escaping it properly.
                              This method may only be called after a call to  startElement(), and before the opened element has been  closed.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2144</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2145</id>
<description>if this method is called when there   is no currently open element</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2146</id>
<description>if name or   value is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2147</id>
<description>
                            Write a comment containing the specified text, after converting  that text to a String if necessary.
                              If there is an open element  that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2148</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2149</id>
<description>if comment   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2150</id>
<description>
                            Write an object (after converting it to a String, if necessary),  after escaping it properly.
                              If there is an open element  that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2151</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2152</id>
<description>if text   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2153</id>
<description>
                            Write a single character, after escaping it properly.
                              If there  is an open element that has been created by a call to  startElement(), that element will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2154</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2155</id>
<description>
                            Write text from a character array, after escaping it properly.
                              This is equivalent to calling writeText(c, 0, c.length).  If there is an open element that has been created by a call to  startElement(), that element will be closed first.  
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2156</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2157</id>
<description>if text   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2158</id>
<description>
                            Write text from a character array, after escaping it properly  for this method.
                              If there is an open element that has been  created by a call to startElement(), that element  will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2159</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2160</id>
<description>if the calculated starting or   ending position is outside the bounds of the character array</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2161</id>
<description>if text   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2162</id>
<description>
                            Write a URI attribute name and corresponding value (after converting  that text to a String if necessary), after encoding it properly  (for example, '%' encoded for HTML).
                              This method may only be called after a call to  startElement(), and before the opened element has been  closed.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2163</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2164</id>
<description>if this method is called when there   is no currently open element</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2165</id>
<description>if name or   value is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>JspResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2166</id>
<description>
                            Close the underlying writer.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2167</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="close" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2168</id>
<description>
                            Flush the underlying writer's buffer, if any.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="flush" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2169</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="flush" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2170</id>
<description>
                            Create a ServletResponseWriter that wraps the specified  PrintWriter.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="ServletResponseWriter" return-type="ServletResponseWriter">
<parameters>
<parameter>java.io.PrintWriter</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2171</id>
<description>
                            Write an array of characters.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2172</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2173</id>
<description>
                            Write a portion of an array of characters.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2174</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2175</id>
<description>
                            Write a single character from the low-order 16 bits of the  specified integer.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2176</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2177</id>
<description>
                            Write a String of characters.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2178</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2179</id>
<description>
                            Write a portion of a String of characters.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2180</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter</class-interface>
<method name="write" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2181</id>
<description>
                            Write whatever text should end a response.
                              If there is an open  element that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endDocument" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2182</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endDocument" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2183</id>
<description>
                            Write the end of an element, after closing any open element  created by a call to startElement().
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2184</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2185</id>
<description>if name   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="endElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2186</id>
<description>
                            Write whatever text should begin a response.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startDocument" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2187</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startDocument" return-type="void">
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2188</id>
<description>
                            Write the start of an element, up to and including the  element name.
                              Once this method has been called, clients can  call writeAttribute() or writeURIAttribute()  method to add attributes and corresponding values.  The starting  element will be closed (that is, the trailing '&gt;' character added)  on any subsequent call to startElement(),  writeComment(),  writeText(), endElement(), or  endDocument().
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2189</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2190</id>
<description>if name   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="startElement" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2191</id>
<description>
                            Write an attribute name and corresponding value (after converting  that text to a String if necessary), after escaping it properly.
                              This method may only be called after a call to  startElement(), and before the opened element has been  closed.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2192</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2193</id>
<description>if this method is called when there   is no currently open element</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2194</id>
<description>if name or   value is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2195</id>
<description>
                            Write a comment containing the specified text, after converting  that text to a String if necessary.
                              If there is an open element  that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2196</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2197</id>
<description>if comment   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeComment" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2198</id>
<description>
                            Write an object (after converting it to a String, if necessary),  after escaping it properly.
                              If there is an open element  that has been created by a call to startElement(),  that element will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2199</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2200</id>
<description>if text   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2201</id>
<description>
                            Write a single character, after escaping it properly.
                              If there  is an open element that has been created by a call to  startElement(), that element will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2202</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2203</id>
<description>
                            Write text from a character array, after escaping it properly.
                              This is equivalent to calling writeText(c, 0, c.length).  If there is an open element that has been created by a call to  startElement(), that element will be closed first.  
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2204</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2205</id>
<description>if text   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2206</id>
<description>
                            Write text from a character array, after escaping it properly  for this method.
                              If there is an open element that has been  created by a call to startElement(), that element  will be closed first.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2207</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2208</id>
<description>if the calculated starting or   ending position is outside the bounds of the character array</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.IndexOutOfBoundsException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2209</id>
<description>if text   is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeText" return-type="void">
<parameters>
<parameter>char[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2210</id>
<description>
                            Write a URI attribute name and corresponding value (after converting  that text to a String if necessary), after encoding it properly  (for example, '%' encoded for HTML).
                              This method may only be called after a call to  startElement(), and before the opened element has been  closed.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2211</id>
<description>if an input/output error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2212</id>
<description>if this method is called when there   is no currently open element</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2213</id>
<description>if name or   value is null</description>
<package>jakarta.faces.webapp</package>
<class-interface>ServletResponseWriter.{jakarta.faces.webapp.ResponseWriterBase}</class-interface>
<method name="writeURIAttribute" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.lang.NullPointerException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2214</id>
<description>
                            
                            
                            
                            
                            Create a new instance of the specified Validator  class, and register it with the UIComponent instance associated  with our most immediately surrounding FacesTag instance, if  the UIComponent instance was created by this execution of the  containing JSP page.
                            
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ValidatorTag</class-interface>
<method name="doStartTag" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2215</id>
<description>if a JSP error occurs</description>
<package>jakarta.faces.webapp</package>
<class-interface>ValidatorTag</class-interface>
<method name="doStartTag" return-type="int">
<throw>JspException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2216</id>
<description>
                            Release references to any acquired resources.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ValidatorTag</class-interface>
<method name="release" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2217</id>
<description>
                            
                            Set the fully qualified class name of the  Validator instance to be created.
                        </description>
<package>jakarta.faces.webapp</package>
<class-interface>ValidatorTag</class-interface>
<method name="setType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2218</id>
<description/>
<package>jakarta.faces.webapp</package>
<class-interface>ValidatorTag</class-interface>
<method name="ValidatorTag" return-type="ValidatorTag"/>
</assertion>
</assertions>
</javadoc>

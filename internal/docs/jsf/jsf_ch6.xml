<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2009, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!-- =============================== Chapter 6 ============================= --> 
  
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The JSF implementation must ensure that the Application instance
        for the current web application is available via this method, as
        a convenient alternative to lookup via an ApplicationFactory.
    </description>
    <location chapter="6" section="1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        Upon creation of the ELContext instance, the implementation must
        take the following action:
    </description>
    <location chapter="6" section="1.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Call the ELContext.putContext(java.lang.Class, 
                java.lang.Object) method on the instance, passing in 
                FacesContext.class and the this reference for the 
                FacesContext instance itself.
            </description>
            <location chapter="6" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" 
            defined-by="technology" status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If the Collection returned by 
                jakarta.faces.Application.getELContextListeners() is 
                non-empty, create an instance of ELContextEvent and pass 
                it to each ELContextListener instance in the Collection 
                by calling the ELContextListener.contextCreated
                (jakarta.el.ELContextEvent) method.
            </description>
            <location chapter="6" section="1.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The ExternalContext abstract class must be implemented along 
        with the FacesContext class, and must be accessible via the 
        getExternalContext method in FacesContext.
    </description>
    <location chapter="6" section="1.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The dispatch() must use a RequestDispatcher provided by the
        application context object to incorporate content from a 
        specified context-relative resource. The redirect() method must 
        cause an HTTP Redirect to be sent to the client.
    </description>
    <location chapter="6" section="1.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The getClientIdsWithMessages() method must return an Iterator 
        over the client identifiers for which at least one Message has 
        been queued. This method must be implemented so the clientIds 
        are returned in the order of calls to addMessage().
    </description>
    <location chapter="6" section="1.5"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        In some circumstances, it is possible that both renderResponse() 
        and responseComplete() might have been called for the request. 
        In this case, the JSF implementation must respect the 
        responseComplete() call (if it was made) before checking to see 
        if renderResponse() was called.
    </description>
    <location chapter="6" section="1.8"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The getCurrentInstance() method may be called by any Java class 
        in the current web application to retrieve an instance of the
        FacesContext for this request. The JSF implementation must
        ensure that this value is set correctly before 
        FacesContextFactory returns a FacesContext instance, 
        and that the value is maintained in a thread-safe manner.
    </description>
    <location chapter="6" section="1.9"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
    status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        A single instance of jakarta.faces.context.FacesContextFactory 
        must be made available to each JSF-based web application 
        running in a servlet or portlet container.
    </description>
    <location chapter="6" section="5"/>
</assertion>

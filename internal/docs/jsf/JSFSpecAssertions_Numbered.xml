<?xml version="1.0" encoding="US-ASCII"?>
<!--

    Copyright (c) 2005, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet href='https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/spec_assertions.xsl'?>

<spec>
    <next-available-id/>
    <previous-id/>
    <technology>JSF</technology>
    <id>JSF 2.0</id>
    <name>JavaServer Faces(TM)</name>
    <version>Version 2.0, Public Review 20090327</version>
    <location-names>
        <chapters>
            <chapter id="2" name="Request Processing Lifecycle">
                <sections>
                    <section id="1" name="Request Processing Lifecycle"/>
                    <section id="1.1" name="Non-Faces Request Generates Faces Response"/>
                    <section id="1.2" name="Faces Request Generates Faces Response"/>
                    <section id="1.3" name="Faces Request Generates Non-Faces Response"/>
                    <section id="2" name="Standard Request Processing Lifecycle Phases"/>
                    <section id="2.1" name="Restore View"/>
                    <section id="2.2" name="Apply Request Values"/>
                    <section id="2.3" name="Process Validations"/>
                    <section id="2.4" name="Update Model Values"/>
                    <section id="2.5" name="Invoke Application"/>
                    <section id="2.6" name="Render Response"/>
                    <section id="3" name="Common Event Processing"/>
                    <section id="4" name="Common Application Activities"/>
                    <section id="4.1" name="Acquire Faces Object References"/>
                    <section id="4.1.1" name="Acquire and Configure Lifecycle Reference"/>
                    <section id="4.1.2" name="Acquire and Configure FacesContext Reference"/>
                    <section id="4.2" name="Create And Configure A New View"/>
                    <section id="4.2.1" name="Create A New View"/>
                    <section id="4.2.2" name="Configure the Desired RenderKit"/>
                    <section id="4.2.3" name="Configure The View&#8217;s Components"/>
                    <section id="4.2.4" name="Store the new View in the FacesContext"/>
                    <section id="5" name="Concepts that impact several lifecycle phases"/>
                    <section id="5.1" name="Value Handling"/>
                    <section id="5.1.1" name="Apply Request Values Phase"/>
                    <section id="5.1.2" name="Process Validators Phase"/>
                    <section id="5.1.3" name="Executing Validation"/>
                    <section id="5.1.4" name="Update Model Values Phase"/>
                    <section id="5.2" name="Localization and Internationalization (L10N/I18N)"/>
                    <section id="5.2.1" name="Determining the active Locale"/>
                    <section id="5.2.2" name="Determining the Character Encoding"/>
                    <section id="5.2.3" name="Localized Text"/>
                    <section id="5.2.4" name="Localized Application Messages"/>
                    <section id="5.3" name="State Management"/>
                    <section id="5.3.1" name="State Management Considerations for the Custom Component Author"/>
                    <section id="5.3.2" name="State Management Considerations for the JSF Implementor"/>
                </sections>
            </chapter>
            <chapter id="3" name="User Interface Compopnent Model">
                <sections>
                    <section id="1" name="UIComponent and UIComponentBase"/>
                    <section id="1.1" name="Component Identifiers"/>
                    <section id="1.2" name="Component Type"/>
                    <section id="1.3" name="Component Family"/>
                    <section id="1.4" name="ValueExpression properties"/>
                    <section id="1.5" name="Component Bindings"/>
                    <section id="1.6" name="Client Identifiers"/>
                    <section id="1.7" name="Component Tree Manipulation"/>
                    <section id="1.8" name="Component Tree Navigation"/>
                    <section id="1.9" name="Facet Management"/>
                    <section id="1.10" name="Generic Attributes"/>
                    <section id="1.11" name="Render-Independent Properties"/>
                    <section id="1.12" name="Component Specialization Methods"/>
                    <section id="1.13" name="Lifecycle Management Methods"/>
                    <section id="1.14" name="Utility Methods"/>
                    <section id="2" name="Component Behavioral Interfaces"/>
                    <section id="2.1" name="ActionSource"/>
                    <section id="2.1.1" name="Properties"/>
                    <section id="2.1.2" name="Methods"/>
                    <section id="2.1.3" name="Events"/>
                    <section id="2.2" name="ActionSource2"/>
                    <section id="2.2.1" name="Properties"/>
                    <section id="2.2.2" name="Methods"/>
                    <section id="2.2.3" name="Events"/>
                    <section id="2.3" name="Naming Container"/>
                    <section id="2.4" name="StateHolder"/>
                    <section id="2.4.1" name="Properties"/>
                    <section id="2.4.2" name="Methods"/>
                    <section id="2.4.3" name="Events"/>
                    <section id="2.5" name="ValueHolder"/>
                    <section id="2.5.1" name="Properties"/>
                    <section id="2.5.2" name="Methods"/>
                    <section id="2.5.3" name="Events"/>
                    <section id="2.6" name="EditableValueHolder"/>
                    <section id="2.6.1" name="Properties"/>
                    <section id="2.6.2" name="Methods"/>
                    <section id="2.6.3" name="Events"/>
                    <section id="3" name="Conversion Model"/>
                    <section id="3.1" name="Overview"/>
                    <section id="3.2" name="Converter"/>
                    <section id="3.3" name="Standard Converter Implementations"/>
                    <section id="4" name="Event and Listener Model"/>
                    <section id="4.1" name="Overview"/>
                    <section id="4.2" name="Event Classes"/>
                    <section id="4.3" name="Listener Classes"/>
                    <section id="4.4" name="Phase Identifiers"/>
                    <section id="4.5" name="Listener Registration"/>
                    <section id="4.6" name="Event Queueing"/>
                    <section id="4.7" name="Event Broadcasting"/>
                    <section id="5" name="Validation Model"/>
                    <section id="5.1" name="Overview"/>
                    <section id="5.2" name="Validator Classes"/>
                    <section id="5.3" name="Validation Registration"/>
                    <section id="5.4" name="Validation Processing"/>
                    <section id="5.5" name="Standard Validator Implementations"/>
                </sections>
            </chapter>
            <chapter id="4" name="Standard User Interface Components">
                <sections>
                    <section id="1" name="Standard User Interface Components"/>
                    <section id="1.1" name="UIColumn"/>
                    <section id="1.1.1" name="Component Type"/>
                    <section id="1.1.2" name="Properties"/>
                    <section id="1.1.3" name="Methods"/>
                    <section id="1.1.4" name="Events"/>
                    <section id="1.2" name="UICommand"/>
                    <section id="1.2.1" name="Component Type"/>
                    <section id="1.2.2" name="Properties"/>
                    <section id="1.2.3" name="Methods"/>
                    <section id="1.2.4" name="Events"/>
                    <section id="1.3" name="UIData"/>
                    <section id="1.3.1" name="Component Type"/>
                    <section id="1.3.2" name="Properties"/>
                    <section id="1.3.3" name="Methods"/>
                    <section id="1.3.4" name="Events"/>
                    <section id="1.4" name="UIForm"/>
                    <section id="1.4.1" name="Component Type"/>
                    <section id="1.4.2" name="Properties"/>
                    <section id="1.4.3" name="Methods"/>
                    <section id="1.4.4" name="Events"/>
                    <section id="1.5" name="UIGraphic"/>
                    <section id="1.5.1" name="Component Type"/>
                    <section id="1.5.2" name="Properties"/>
                    <section id="1.5.3" name="Methods"/>
                    <section id="1.5.4" name="Events"/>
                    <section id="1.6" name="UIInput"/>
                    <section id="1.6.1" name="Component Type"/>
                    <section id="1.6.2" name="Properties"/>
                    <section id="1.6.3" name="Methods"/>
                    <section id="1.6.4" name="Events"/>
                    <section id="1.7" name="UIMessage"/>
                    <section id="1.7.1" name="Component Type"/>
                    <section id="1.7.2" name="Properties"/>
                    <section id="1.7.3" name="Methods"/>
                    <section id="1.7.4" name="Events"/>
                    <section id="1.8" name="UIMessages"/>
                    <section id="1.8.1" name="Component Type"/>
                    <section id="1.8.2" name="Properties"/>
                    <section id="1.8.3" name="Methods"/>
                    <section id="1.8.4" name="Events"/>
                    <section id="1.9" name="UIOutput"/>
                    <section id="1.9.1" name="Component Type"/>
                    <section id="1.9.2" name="Properties"/>
                    <section id="1.9.3" name="Methods"/>
                    <section id="1.9.4" name="Events"/>
                    <section id="1.10" name="UIPanel"/>
                    <section id="1.10.1" name="Component Type"/>
                    <section id="1.10.2" name="Properties"/>
                    <section id="1.10.3" name="Methods"/>
                    <section id="1.10.4" name="Events"/>
                    <section id="1.11" name="UIParameter"/>
                    <section id="1.11.1" name="Component Type"/>
                    <section id="1.11.2" name="Properties"/>
                    <section id="1.11.3" name="Methods"/>
                    <section id="1.11.4" name="Events"/>
                    <section id="1.12" name="UISelectBoolean"/>
                    <section id="1.12.1" name="Component Type"/>
                    <section id="1.12.2" name="Properties"/>
                    <section id="1.12.3" name="Methods"/>
                    <section id="1.12.4" name="Events"/>
                    <section id="1.13" name="UISelectItem"/>
                    <section id="1.13.1" name="Component Type"/>
                    <section id="1.13.2" name="Properties"/>
                    <section id="1.13.3" name="Methods"/>
                    <section id="1.13.4" name="Events"/>
                    <section id="1.14" name="UISelectItems"/>
                    <section id="1.14.1" name="Component Type"/>
                    <section id="1.14.2" name="Properties"/>
                    <section id="1.14.3" name="Methods"/>
                    <section id="1.14.4" name="Events"/>
                    <section id="1.15" name="UISelectMany"/>
                    <section id="1.15.1" name="Component Type"/>
                    <section id="1.15.2" name="Properties"/>
                    <section id="1.15.3" name="Methods"/>
                    <section id="1.15.4" name="Events"/>
                    <section id="1.16" name="UISelectOne"/>
                    <section id="1.16.1" name="Component Type"/>
                    <section id="1.16.2" name="Properties"/>
                    <section id="1.16.3" name="Methods"/>
                    <section id="1.16.4" name="Events"/>
                    <section id="1.17" name="UIViewRoot"/>
                    <section id="1.17.1" name="Component Type"/>
                    <section id="1.17.2" name="Properties"/>
                    <section id="1.17.3" name="Methods"/>
                    <section id="1.17.4" name="Events"/>
                    <section id="2" name="Standard UIComponent Model Beans"/>
                    <section id="2.1" name="DataModel"/>
                    <section id="2.1.1" name="Properties"/>
                    <section id="2.1.2" name="Methods"/>
                    <section id="2.1.3" name="Events"/>
                    <section id="2.1.4" name="Concrete Implementations"/>
                    <section id="2.2" name="SelectItem"/>
                    <section id="2.2.1" name="Properties"/>
                    <section id="2.2.2" name="Methods"/>
                    <section id="2.2.3" name="Events"/>
                    <section id="2.3" name="SelectItemGroup"/>
                    <section id="2.3.1" name="Properties"/>
                    <section id="2.3.2" name="Methods"/>
                    <section id="2.3.3" name="Events"/>
                </sections>
            </chapter>
            <chapter id="5" name="Expression Language">
                <sections>
                    <section id="1" name="ValueExpressions"/>
                    <section id="1.1" name="Overview"/>
                    <section id="1.2" name="ValueExpression Syntax"/>
                    <section id="1.3" name="ValueExpression Semantics"/>
                    <section id="2" name="MethodExpressions"/>
                    <section id="2.1" name="MethodExpression Syntax"/>
                    <section id="2.2" name="MethodExpression Semantics"/>
                    <section id="3" name="The Managed Bean Facility"/>
                    <section id="3.1" name="Managed Bean Configuration Example"/>
                    <section id="4" name="How Faces Leverages the Unified EL"/>
                    <section id="4.1" name="ELContext"/>
                    <section id="4.1.1" name="Lifetime, Ownership and Cardinality"/>
                    <section id="4.1.2" name="Properties"/>
                    <section id="4.1.3" name="Methods"/>
                    <section id="4.1.4" name="Events"/>
                    <section id="4.2" name="ELResolver"/>
                    <section id="4.2.1" name="Lifetime, Ownership and Cardinality"/>
                    <section id="4.2.2" name="Properties"/>
                    <section id="4.2.3" name="Methods"/>
                    <section id="4.2.4" name="Events"/>
                    <section id="4.3" name="Expression Factory"/>
                    <section id="4.3.1" name="Lifetime, Ownership and Cardinality"/>
                    <section id="4.3.2" name="Properties"/>
                    <section id="4.3.3" name="Methods"/>
                    <section id="4.3.4" name="Events"/>
                    <section id="5" name="ELResolver Instances Provided by Faces"/>
                    <section id="5.1" name="Faces ELResolver for JSP"/>
                    <section id="5.1.1" name="Faces Implicit Object ELResolver For JSP"/>
                    <section id="5.1.2" name="ManagedBean ELResolver"/>
                    <section id="5.1.3" name="ELResolvers in the application configuration resources"/>
                    <section id="5.1.4" name="VariableResolver Chain Wrapper"/>
                    <section id="5.1.5" name="PropertyResolver Chain Wrapper"/>
                    <section id="5.1.6" name="ELResolvers from Application.addELResolver()"/>
                    <section id="5.2" name="ELResolver for Faces"/>
                    <section id="5.2.1" name="Implicit Object ELResolver For Faces"/>
                    <section id="5.2.2" name="The CompositeELResolver"/>
                    <section id="5.2.3" name="ManagedBean ELResolver"/>
                    <section id="5.2.4" name="Map, List, Array, and Bean ELResolvers"/>
                    <section id="5.2.5" name="ScopedAttribute ELResolver"/>
                    <section id="6" name="Current Expression Evaluation APIs"/>
                    <section id="6.1" name="ELResolver"/>
                    <section id="6.2" name="ValueExpression"/>
                    <section id="6.3" name="MethodExpression"/>
                    <section id="6.4" name="Expression Evaluation Exceptions"/>
                    <section id="7" name="Deprecated Expression Evaluation APIs"/>
                    <section id="7.1" name="VariableResolver and the Default VariableResolver"/>
                    <section id="7.2" name="PropertyResolver and the Default PropertyResolver"/>
                    <section id="7.3" name="ValueBinding"/>
                    <section id="7.4" name="MethodBinding"/>
                    <section id="7.5" name="Expression Evaluation Exceptions"/>
                </sections>
            </chapter>
            <chapter id="6" name="Per-Request State Information">
                <sections>
                    <section id="1" name="FacesContext"/>
                    <section id="1.1" name="Application"/>
                    <section id="1.2" name="ELContext"/>
                    <section id="1.3" name="ExternalContext"/>
                    <section id="1.4" name="ViewRoot"/>
                    <section id="1.5" name="Message Queue"/>
                    <section id="1.6" name="RenderKit"/>
                    <section id="1.7" name="ResponseStream and ResponseWriter"/>
                    <section id="1.8" name="Flow Control Methods"/>
                    <section id="1.9" name="Access To The Current FacesContext Instance"/>
                    <section id="2" name="FacesMessage"/>
                    <section id="3" name="ResponseStream"/>
                    <section id="4" name="ResponseWriter"/>
                    <section id="5" name="FacesContextFactory"/>
                </sections>
            </chapter>
            <chapter id="7" name="Application Integration">
                <sections>
                    <section id="1" name="Application"/>
                    <section id="1.1" name="ActionListener Property"/>
                    <section id="1.2" name="DefaultRenderKitId Property"/>
                    <section id="1.3" name="NavigationHandler Property"/>
                    <section id="1.4" name="StateManager Property"/>
                    <section id="1.5" name="ELResolver Property"/>
                    <section id="1.6" name="ELContextListener Property"/>
                    <section id="1.7" name="ViewHandler Property"/>
                    <section id="1.8" name="Acquiring ExpressionFactory Instance"/>
                    <section id="1.9" name="Programmatically Evaluating Expressions"/>
                    <section id="1.10" name="Object Factories"/>
                    <section id="1.11" name="Internationalization Support"/>
                    <section id="2" name="ApplicationFactory"/>
                    <section id="3" name="Application Actions"/>
                    <section id="4" name="NavigationHandler"/>
                    <section id="4.1" name="Overview"/>
                    <section id="4.2" name="Default NavigationHandler Implementation"/>
                    <section id="4.3" name="Example NavigationHandler Configuration"/>
                    <section id="5" name="ViewHandler"/>
                    <section id="5.1" name="Overview"/>
                    <section id="5.2" name="Default ViewHandler Implementation"/>
                    <section id="6" name="StateManager"/>
                    <section id="6.1" name="Overview"/>
                    <section id="6.2" name="State Saving Alternatives and Implications"/>
                    <section id="6.3" name="State Saving Methods"/>
                    <section id="6.4" name="State Restoring Methods"/>
                    <section id="6.5" name="Convenience Methods"/>
                    <section id="7" name="Deprecated APIs"/>
                    <section id="7.1" name="PropertyResolver Property"/>
                    <section id="7.2" name="VariableResolver Property"/>
                    <section id="7.3" name="Acquiring ValueBinding Instances"/>
                    <section id="7.4" name="Acquiring MethodBinding Instances"/>
                    <section id="7.5" name="Object Factories"/>
                    <section id="7.6" name="StateManager"/>
                    <section id="7.7" name="ResponseStateManager"/>
                </sections>
            </chapter>
            <chapter id="8" name="Rendering Model">
                <sections>
                    <section id="1" name="RenderKit"/>
                    <section id="2" name="Renderer"/>
                    <section id="3" name="ResponseStateManager"/>
                    <section id="4" name="RenderKitFactory"/>
                    <section id="5" name="Standard HTML RenderKit Implementation"/>
                    <section id="6" name="The Concrete HTML Component Classes"/>
                </sections>
            </chapter>
            <chapter id="9" name="Integration with JSP">
                <sections>
                    <section id="1" name="UIComponent Custom Actions"/>
                    <section id="2" name="Using UIComponent Custom Actions in JSP Pages"/>
                    <section id="2.1" name="Declaring the Tag Libraries"/>
                    <section id="2.2" name="Including Components in a Page"/>
                    <section id="2.3" name="Creating Components and Overriding Attributes"/>
                    <section id="2.4" name="Deleting Components on Redisplay"/>
                    <section id="2.5" name="Representing Component Hierarchies"/>
                    <section id="2.6" name="Registering Converters, Event Listeners, and Validators"/>
                    <section id="2.7" name="Using Facets"/>
                    <section id="2.8" name="Interoperability with JSP Template Text and Other Tag Libraries"/>
                    <section id="2.9" name="Composing Pages from Multiple Sources"/>
                    <section id="3" name="UIComponent Custom Action Implementation Requirements"/>
                    <section id="3.1" name="Considerations for Custom Actions written for JavaServer Faces 1.1 and 1.0"/>
                    <section id="3.1.1" name="Past and Present Tag constraints"/>
                    <section id="3.1.2" name="Faces 1.0 and 1.1 Taglib migration story"/>
                    <section id="4" name="JSF Core Tag Library"/>
                    <section id="4.1" name="f:actionListener"/>
                    <section id="4.2" name="f:attribute"/>
                    <section id="4.3" name="f:convertDateTime"/>
                    <section id="4.4" name="f:convertNumber"/>
                    <section id="4.5" name="f:converter"/>
                    <section id="4.6" name="f:facet"/>
                    <section id="4.7" name="f:loadBundle"/>
                    <section id="4.8" name="f:param"/>
                    <section id="4.9" name="f:phaseListener"/>
                    <section id="4.10" name="f:selectItem"/>
                    <section id="4.11" name="f:selectItems"/>
                    <section id="4.12" name="f:subview"/>
                    <section id="4.13" name="f:validateDoubleRange"/>
                    <section id="4.14" name="f:validateLength"/>
                    <section id="4.15" name="f:validateLongRange"/>
                    <section id="4.16" name="f:validator"/>
                    <section id="4.17" name="f:valueChangeListener"/>
                    <section id="4.18" name="f:verbatim"/>
                    <section id="4.19" name="f:view"/>
                    <section id="5" name="Standard HTML RenderKit Tag Library"/>
                </sections>
            </chapter>
            <chapter id="10" name="Facelets and its use in Web Applications">
                <sections>
                    <section id="1" name="Non-normative Background"/>
                    <section id="1.1" name="Differences between JSP and Facelets"/>
                    <section id="1.2" name="Differences between Pre JSF 2.0 Facelets and Facelets in JSF 2.0"/>
                    <section id="2" name="Java Programming Language Specification for Facelets in JSF 2.0"/>
                    <section id="2.1" name="Specification of the ViewDeclarationLanguage Implementation for Facelets for JSF 2.0"/>
                    <section id="3" name="XHTML Specification for Facelets for JSF 2.0"/>
                    <section id="3.1" name="General Requirements"/>
                    <section id="3.2" name="Facelet Tag Library mechanism"/>
                    <section id="3.3" name="Requirements specific to composite components"/>
                    <section id="3.3.1" name="Declaring a composite component library for use in a Facelet page"/>
                    <section id="3.3.2" name="Creating an instance of a top level component"/>
                    <section id="3.3.3" name="Populating a top level component instance with children"/>
                    <section id="4" name="Non-normative Background"/>
                    <section id="4.1" name="JSF Core Tag Library"/>
                    <section id="4.1.1" name="&lt;f:ajax&gt;"/>
                    <section id="4.1.2" name="&lt;f:event&gt;"/>
                    <section id="4.1.3" name="&lt;f:metadata&gt;"/>
                    <section id="4.1.4" name="&lt;f:validateBean&gt;"/>
                    <section id="4.1.5" name="&lt;f:validateRequired&gt;"/>
                    <section id="4.2" name="Standard HTML RenderKit Tag Library"/>
                    <section id="4.3" name="Facelet Templating Tag Library"/>
                    <section id="4.4" name="Composite Component Tag Library"/>
                    <section id="4.5" name="JSTL Core and Function Tag Libraries"/>
                    <section id="5" name="Assertions relating to the construction of the view hierarchy"/>
                </sections>
            </chapter>
            <chapter id="11" name="Using JSF in Web Applications">
                <sections>
                    <section id="1" name="Web Application Deployment Descriptor"/>
                    <section id="1.1" name="Servlet Definition"/>
                    <section id="1.2" name="Servlet Mapping"/>
                    <section id="1.3" name="Application Configuration Parameters"/>
                    <section id="2" name="Included Classes and Resources"/>
                    <section id="2.1" name="Application-Specific Classes and Resources"/>
                    <section id="2.2" name="Servlet and JSP API Classes (javax.servlet.*)"/>
                    <section id="2.3" name="JSP Standard Tag Library (JSTL) API Classes (javax.servlet.jsp.jstl.*)"/>
                    <section id="2.4" name="JSP Standard Tag Library (JSTL) Implementation Classes"/>
                    <section id="2.5" name="JavaServer Faces API Classes (jakarta.faces.*)"/>
                    <section id="2.6" name="JavaServer Faces Implementation Classes"/>
                    <section id="2.6.1" name="FactoryFinder"/>
                    <section id="2.6.2" name="FacesServlet"/>
                    <section id="2.6.3" name="UIComponentELTag"/>
                    <section id="2.6.4" name="FacetTag"/>
                    <section id="2.6.5" name="ValidatorTag"/>
                    <section id="3" name="Deprecated APIs in the webapp package"/>
                    <section id="3.1" name="AttributeTag"/>
                    <section id="3.2" name="ConverterTag"/>
                    <section id="3.3" name="UIComponentBodyTag"/>
                    <section id="3.4" name="UIComponentTag"/>
                    <section id="3.5" name="ValidatorTag"/>
                    <section id="4" name="Application Configuration Resources"/>
                    <section id="4.1" name="Overview"/>
                    <section id="4.2" name="Application Startup Behavior"/>
                    <section id="4.3" name="Application Shutdown Behavior"/>
                    <section id="4.4" name="Application Configuration Resource Format"/>
                    <section id="4.5" name="Configuration Impact on JSF Runtime"/>
                    <section id="4.6" name="Delegating Implementation Support"/>
                    <section id="4.7" name="Ordering of Artifacts"/>
                    <section id="4.8" name="Example Application Configuration Resource"/>
                </sections>
            </chapter>
            <chapter id="12" name="Lifecycle Management">
                <sections>
                    <section id="12.1" name="Lifecycle"/>
                    <section id="12.2" name="PhaseEvent"/>
                    <section id="12.3" name="PhaseListener"/>
                    <section id="12.4" name="LifecycleFactory"/>
                </sections>
            </chapter>
            <chapter id="13" name="Ajax Integration ">
                <sections>
                    <section id="13.1" name="JavaScript Resource"/>
                    <section id="13.1.1" name="JavaScript Resource Loading"/>
                    <section id="13.1.1.1" name="The Annotation Approach"/>
                    <section id="13.1.1.2" name="The Resource API Approach"/>
                    <section id="13.1.1.3" name="The Page Declaration Language Approach"/>
                    <section id="13.2" name="JavaScript Namespacing"/>
                    <section id="13.3" name="Ajax Interaction"/>
                    <section id="13.3.1" name="Sending an Ajax Request"/>
                    <section id="13.3.2" name="Ajax Request Queueing"/>
                    <section id="13.3.3" name="Request Callback Function"/>
                    <section id="13.3.4" name="Receiving The Ajax Response"/>
                    <section id="13.3.5" name="Monitoring Events On The Client"/>
                    <section id="13.3.5.1" name="Monitoring Events For An Ajax Request"/>
                    <section id="13.3.5.2" name="Monitoring Events For All Ajax Requests"/>
                    <section id="13.3.5.3" name="Sending Events"/>
                    <section id="13.3.6" name="Handling Errors On the Client"/>
                    <section id="13.3.6.1" name="Handling Errors For An Ajax Request"/>
                    <section id="13.3.6.2" name="Handling Errors For All Ajax Requests"/>
                    <section id="13.3.6.3" name="Signaling Errors"/>
                    <section id="13.3.7" name="Handling Errors On The Server"/>
                    <section id="13.4" name="Partial View Traversal"/>
                    <section id="13.4.1" name="Partial Traversal Strategy"/>
                    <section id="13.4.2" name="Partial View Processing"/>
                    <section id="13.4.3" name="Partial View Rendering"/>
                    <section id="13.4.4" name="Sending The Response to The Client"/>
                    <section id="13.4.4.1" name="Writing The Partial Response"/>
                </sections>
            </chapter>
            <chapter id="14" name="JavaScript API">
                <sections>
                    <section id="14.1" name="Collecting and Encoding View State"/>
                    <section id="14.1.1" name="Use Case"/>
                    <section id="14.2" name="Initiating an Ajax Request"/>
                    <section id="14.2.1" name="Usage"/>
                    <section id="14.2.2" name="Keywords"/>
                    <section id="14.2.3" name="Default Values"/>
                    <section id="14.2.4" name="Request Sending Specifics"/>
                    <section id="14.2.5" name="Use Case"/>
                    <section id="14.3" name="Processing The Ajax Response"/>
                    <section id="14.4" name="Registering Callback Functions"/>
                    <section id="14.4.1" name="Request/Response Event Handling"/>
                    <section id="14.4.1.1" name="Use Case"/>
                    <section id="14.4.2" name="Error Handling"/>
                    <section id="14.4.2.1" name="Use Case"/>
                    <section id="14.5" name="Determining An Application&#8217;s Project Stage"/>
                    <section id="14.5.1" name="Use Case"/>
                    <section id="14.6" name="Script Chaining"/>
                </sections>
            </chapter>
        </chapters>
    </location-names>
    <assertions>

<!-- =============================== Chapter 2 ============================= -->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:1</id>
    <description>
        The JSF implementation must perform the following tasks during
        the Restore View phase of the request processing lifecycle:
    </description>
    <location chapter="2" section="2.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:1.1</id>
            <description>
                Examine the FacesContext instance for the current
                request. If it already contains a UIViewRoot:
            </description>
            <location chapter="2" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:1.1.1</id>
                    <description>
                        Set the locale on the UIViewRoot to the value
                        returned by getRequestLocale() method on the
                        ExternalContext for this request
                    </description>
                    <location chapter="2" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:1.1.2</id>
                    <description>
                        For each component in the component tree,
                        determine if a ValueExpression for binding is
                        present. If so, call the setValue() method on
                        this ValueExpression, passing the component
                        instance on which it was found.
                    </description>
                    <location chapter="2" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:1.1.3</id>
                    <description>
                        Take no further action during this phase, and
                        return.
                    </description>
                    <location chapter="2" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:1.2</id>
            <description>
                Derive the view identifier that corresponds to this
                request, as follows:
            </description>
            <location chapter="2" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:1.2.1</id>
                    <description>
                        If prefix mapping (such as /faces/*) is
                        used for FacesServlet, the viewId is set from
                        the extra path information of the request
                        URI.
                    </description>
                    <location chapter="2" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:1.2.2</id>
                    <description>
                        If suffix mapping (such as *.faces) is used for
                        FacesServlet, the viewId is set from the servlet
                        path information of the request URI, after
                        replacing the suffix with the value of the
                        context initialization parameter named by the
                        symbolic constant
                        ViewHandler.DEFAULT_SUFFIX_PARAM_NAME (if no
                        such context initialization parameter is
                        present, use the value of the symbolic constant
                        ViewHandler.DEFAULT_SUFIX as the replacement
                        suffix).
                    </description>
                    <location chapter="2" section="2.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:1.2.3</id>
                    <description>
                        If no view identifier can be derived, throw an
                        exception.
                    </description>
                    <location chapter="2" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:1.3</id>
            <description>
                Determine if this request is a postback or initial
                request by executing the following algorithm. Find the
                render-kit-id for the current request by calling
                calculateRenderKitId() on the Application's ViewHandler.
                Get the RenderKit's ResponseStateManager and call its
                isPostback() method, passin gthe current FacesContext
            </description>
            <location chapter="2" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:1.4</id>
            <description>
                A request that is a non-postback request must call
                FacesContext.renderResponse() to cause intervening
                phases to be skipped.
            </description>
            <location chapter="2" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:1.5</id>
            <description>
                If the request is a postback, call
                ViewHandler.restoreView() passing the FacesCOntext
                isntance for the current request and the derived view
                identifier, and returning a UIViewRoot for the restored
                view. If the return from ViewHandler.restoreView() is
                null, throw a FacesException with an appropriate error
                message.
            </description>
            <location chapter="2" section="2.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:1.5.1</id>
                    <description>
                        For each component in the component tree,
                        determine if a ValueExpression for binding is
                        present. If so, call the setValeu() method on
                        this ValueExpression, passing the component
                        instance on which it was found. Do this in a
                        parent-first fashion, calling setValue() method
                        and then traversing the children.
                    </description>
                    <location chapter="2" section="2.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:1.6</id>
            <description>
                If the request is a non-postback, call
                ViewHandler.createView(), passing the FacesContext
                instance for the current request and the derived view
                identifier.
            </description>
            <location chapter="2" section="2.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:1.7</id>
            <description>
                Store the restored or created UIViewRoot in the
                FacesContext
            </description>
            <location chapter="2" section="2.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:2</id>
    <description>
        During the Apply Request Values phase, the JSF implementation
        must call the processDecodes() method of the UIViewRoot of the
        component tree.
    </description>
    <location chapter="2" section="2.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:3</id>
    <description>
        During the decoding of request values, some components perform
        special processing:
    </description>
    <location chapter="2" section="2.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:3.1</id>
            <description>
                Components that implement ActionSource, which recognize
                that they were activated, will queue an ActionEvent.
            </description>
            <location chapter="2" section="2.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:3.1.1</id>
                    <description>
                        The event will be delivered at the end of Apply
                        Request Values phase if the immediate property
                        is true
                    </description>
                    <location chapter="2" section="2.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:3.1.2</id>
                    <description>
                        The event will be delivered at the end of Invoke
                        Application phase if the immediate property is
                        false
                    </description>
                    <location chapter="2" section="2.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:3.2</id>
            <description>
                Components that implement EditableValueHolder, and whose
                immediate property is set to true, will cause the
                conversion and validation processing that normally
                happens during Process Validations phase to occur during
                Apply Requst Values phase instead.
            </description>
            <location chapter="2" section="2.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:4</id>
    <description>
        If any of the decode() methods that were invoked, or an event
        listener that processed a queued event, called
        responseComplete() on the FacesContext instance for the current
        request, clear the remaining events from the event queue and
        terminate the lifecycle processing of the current request.
    </description>
    <location chapter="2" section="2.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:5</id>
    <description>
        If any of the decode() methods that were invoked, or an event
        listener that processed a queued event, called renderResponse()
        on the FacesContext instance for the current request, clear the
        remaining events from the event queue and terminate the
        lifecycle processing of the current request.
    </description>
    <location chapter="2" section="2.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:6</id>
    <description>
        If any of the decode() methods that were invoked, or an event
        listener that processed a queued event, did not call
        responseComplete() or renderResponse() on the FacesContext
        instance for the current request, the implementation must
        proceed to the Process Validations phase.
    </description>
    <location chapter="2" section="2.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:7</id>
    <description>
        During the Process Validations phase of the request processing
        lifecycle, the JSF implementation must call the
        processValidators() method of the UIViewRoot of the tree.
    </description>
    <location chapter="2" section="2.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:8</id>
    <description>
        If any of the validate() methods that were invoked, or an event 
        listener that processed a queued event, called renderResponse() 
        on the FacesContext instance for the current request, clear the
        remaining events from the event queue and transfer control to
        the Render Response phase of the request processing lifecycle.
        Otherwise, control must proceed to the Update Model Values 
        phase.
    </description>
    <location chapter="2" section="2.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:9</id>
    <description>
        During the Update Model Values phase, the JSF implementation
        must call the processUpdates() method of the UIViewRoot
        component of the tree.
    </description>
    <location chapter="2" section="2.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:10</id>
    <description>
        If any of the updateModel() methods that was invoked, 
        or an event listener that processed a queued event, called 
        renderResponse() on the FacesContext instance for the current 
        request, clear the remaining events from the event queue and 
        transfer control to the Render Response phase of the request 
        processing lifecycle. Otherwise, control must proceed to the
        Invoke Application phase.
    </description>
    <location chapter="2" section="2.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:11</id>
    <description>
        The implementation must ensure that the processApplication() 
        method of the UIViewRoot instance is called.
    </description>
    <location chapter="2" section="2.5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:11.1</id>
            <description>
                The default behavior of this method will be to broadcast
                any queued events that specify a phase identifier of
                PhaseId.INVOKE_APPLICATION.
            </description>
            <location chapter="2" section="2.5"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:12</id>
    <description>
        During the Render Response phase All JSF implementations
        must conform to the following requirements.             
    </description>
    <location chapter="2" section="2.6"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:12.1</id>
            <description>
                JSF implementations must provide a default ViewHandler
                implementation that performs a 
                RequestDispatcher.forward() call to a web application
                resource whose context-relative path is equal to the
                view identifier of the component tree
            </description>
            <location chapter="2" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:12.2</id>
            <description>
                During the rendering process, additional components may 
                be added to the component tree based on information 
                available to the ViewHandler implementation. However, 
                before adding a new component, the ViewHandler 
                implementation must first check for the existence of the
                corresponding component in the component tree. If the
                component already exists (perhaps because a previous
                phase has pre-created one or more components), the 
                existing component&#8217;s properties and attributes must be 
                utilized.
            </description>
            <location chapter="2" section="2.6"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:12.3</id>
            <description>
                Under no circumstances should a component be selected 
                for rendering when its parent component, or any of its 
                ancestors in the component tree, has its rendersChildren
                property set to true. In such cases, the parent or 
                ancestor component must render the content of this child
                component when the parent or ancestor was selected.
            </description>
            <location chapter="2" section="2.6"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:13</id>
    <description>
        For each queued event, the broadcast() method of the source
        UIComponent must be called to broadcast the event to all event
        listeners who have registered an interest, on this source
        component for events of the specified type, after which the
        event is removed from the event queue.
    </description>
    <location chapter="2" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:14</id>
    <description>
        It is also possible for event listeners to cause additional
        events to be enqueued for processing during the current phase
        of the request processing lifecycle. Such events must be
        broadcast in the order they were enqueued, after all originally
        queued events have been broadcast, before the lifecycle
        management method returns.
    </description>
    <location chapter="2" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:15</id>
    <description>
        The UIViewRoot instance returned by the createView() method must
        minimally contain a single UIViewRoot provided by the JSF
        implementation, which must encapsulate any 
        implementation-specific component management that is required.
    </description>
    <location chapter="2" section="4.2.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:16</id>
    <description>
        The caller of ViewHandler.createView() must cause the
        FacesContext to be populated with the new UIViewRoot.
    </description>
    <location chapter="2" section="4.2.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:17</id>
    <description>
        The default ViewHandler must call calculateRenderKitId() on
        itself and set the result into the UIViewRoot&#8217;s renderKitId
        property.
    </description>
    <location chapter="2" section="4.2.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:18</id>
    <description>
        Once the view has been created and configured, the FacesContext
        instance for this request must be made aware of it by calling
        setViewRoot().
    </description>
    <location chapter="2" section="4.2.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:19</id>
    <description>
        The create ViewHandler&#8217;s createView() method must cause the
        active Locale to be determined by looking at the user&#8217;s
        preferences combined with the application&#8217;s stated supported
        locales.
    </description>
    <location chapter="2" section="5.2.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:20</id>
    <description>
        At the beginning of the render-response phase, the ViewHandler
        must ensure that the response Locale is set to be that of the
        UIViewRoot, for example by calling ServletResponse.setLocale()
        when running in the servlet environment.
    </description>
    <location chapter="2" section="5.2.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:21</id>
    <description>
        At the end of the render-response phase, the ViewHandler must 
        store the response character encoding used by the underlying 
        response object (e.g., the servlet or portlet response) in the 
        session (if and only if a session already exists) under a well 
        known, implementation-dependent key  
    </description>
    <location chapter="2" section="5.2.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:21.1</id>
            <description>
                On a subsequent postback, before any of the 
                ExternalContext methods for accessing request
                parameters are invoked, the ViewHandler must examine the
                Content-Type header to read the charset attribute and
                use its value to set it as the request encoding for the
                underlying request object. If the Content-Type header
                doesn't contain a charset attribute, the encoding
                previously stored in the session (if and only if a
                session already exists), must be used to set the
                encoding for the underlying request object.
            </description>
            <location chapter="2" section="5.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:21.2</id>
            <description>
                If no character encoding is found, the request encoding
                must be left unmodified.
            </description>
            <location chapter="2" section="5.2.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:22</id>
    <description>
        A JSF implementation must provide a jakarta.faces.Messages
        ResourceBundle containing all of the necessary keys for the
        standard messages.
    </description>
    <location chapter="2" section="5.2.4"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.1</id>
            <description>
                jakarta.faces.component.UIInput.CONVERSION -- 
                {0}: Conversion error occurred
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.2</id>
            <description>
                jakarta.faces.component.UIInput.REQUIRED -- 
                {0}: Validation Error: Value is required
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.3</id>
            <description>
                jakarta.faces.component.UIInput.UPDATE -- 
                {0}: An error occurred when processing your submitted 
                information
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.4</id>
            <description>
                jakarta.faces.component.UISelectOne.INVALID -- 
                {0}: Validation Error: Value is not valid
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.5</id>
            <description>
                jakarta.faces.component.UISelectMany.INVALID -- 
                {0}: Validation Error: Value is not valid
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.6</id>
            <description>
                jakarta.faces.converter.BigDecimalConverter.DECIMAL={2}: 
                ''{0}'' must be a signed decimal number.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.7</id>
            <description>
                jakarta.faces.converter.BigDecimalConverter.DECIMAL_detail
                ={2}: ''{0}'' must be asigned decimal number consisting
                of zero or more digits, that may be followed by a
                decimal point and fraction. Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.8</id>
            <description>
                jakarta.faces.converter.BigIntegerConverter.BIGINTEGER
                ={2}: ''{0}'' must be a number consisting of one or more
                digits.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.9</id>
            <description>
                jakarta.faces.converter.BigIntegerConverter.BIGINTEGER_
                detail={2}: ''{0}'' must be a number consisting of one
                or more digits. Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.10</id>
            <description>
                jakarta.faces.converter.BooleanConverter.BOOLEAN={1}:
                ''{0}'' must be 'true' or 'false'.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.11</id>
            <description>
                jakarta.faces.converter.BooleanConverter.BOOLEAN_detail
                ={1}: ''{0}'' must be 'true' or 'false'. Any value other
                than 'true' will evaluate to 'false'. 
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.12</id>
            <description>
                jakarta.faces.converter.ByteConverter.BYTE={2}: ''{0}''
                must be a number between 0 and 255.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.13</id>
            <description>
                jakarta.faces.converter.ByteConverter.BYTE_detail={2}:
                ''{0}'' must be a number between 0 and 255. Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.14</id>
            <description>
                jakarta.faces.converter.CharacterConverter.CHARACTER={1}:
                ''{0}'' must be a valid character.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.15</id>
            <description>
                jakarta.faces.converter.CharacterConverter.CHARACTER_
                detail={1}: ''{0}'' must be a valid ASCII character.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.16</id>
            <description>
                jakarta.faces.converter.DateTimeConverter.DATE={2}: 
                ''{0}'' could not be understood as a date.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.17</id>
            <description>
                jakarta.faces.converter.DateTimeConverter.DATE_detail={2}:
                ''{0}'' could not be understood as a date. Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.18</id>
            <description>
                jakarta.faces.converter.DateTimeConverter.TIME={2}: 
                ''{0}'' could not be understood as a time.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.19</id>
            <description>
                jakarta.faces.converter.DateTimeConverter.TIME_detail={2}: 
                ''{0}'' could not be understood as a time. Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.20</id>
            <description>
                jakarta.faces.converter.DateTimeConverter.DATETIME={2}: 
                ''{0}'' could not be understood as a date and time.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.21</id>
            <description>
                jakarta.faces.converter.DateTimeConverter.DATETIME_detail=
                {2}: ''{0}'' could not be understood as a date and time. 
                Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.22</id>
            <description>
                jakarta.faces.converter.DateTimeConverter.PATTERN_TYPE=
                {1}: A 'pattern' or 'type' attribute must be specified 
                to convert the value ''{0}''.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.23</id>
            <description>
                jakarta.faces.converter.DoubleConverter.DOUBLE={2}: 
                ''{0}'' must be a number consisting of one or more
                digits.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.24</id>
            <description>
                jakarta.faces.converter.DoubleConverter.DOUBLE_detail={2}:
                ''{0}'' must be a number between 4.9E-324 and
                1.7976931348623157E308 Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.25</id>
            <description>
                jakarta.faces.converter.EnumConverter.ENUM={2}: ''{0}'' 
                must be convertible to an enum.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.26</id>
            <description>
                jakarta.faces.converter.EnumConverter.ENUM_detail={2}: 
                ''{0}'' must be convertible to an enum from the enum 
                that contains the constant ''{1}''.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.27</id>
            <description>
                jakarta.faces.converter.EnumConverter.ENUM_NO_CLASS={1}:
                ''{0}'' must be convertible to an enum from the enum, 
                but no enum class provided.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.28</id>
            <description>
                jakarta.faces.converter.EnumConverter.ENUM_NO_CLASS_detail
                ={1}: ''{0}'' must be convertible to an enum from the 
                enum, but no enum class provided.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.29</id>
            <description>
                jakarta.faces.converter.FloatConverter.FLOAT={2}: ''{0}'' 
                must be a number consisting of one or more digits.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.30</id>
            <description>
                jakarta.faces.converter.FloatConverter.FLOAT_detail={2}:
                ''{0}'' must be a number between 1.4E-45 and 
                3.4028235E38 Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.31</id>
            <description>
                jakarta.faces.converter.IntegerConverter.INTEGER={2}:
                ''{0}'' must be a number consisting of one or more
                digits.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.32</id>
            <description>
                jakarta.faces.converter.IntegerConverter.INTEGER_detail=
                {2}: ''{0}'' must be a number between -2147483648
                and 2147483647 Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.33</id>
            <description>
                jakarta.faces.converter.LongConverter.LONG={2}: ''{0}'' 
                must be a number consisting of one or more digits.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.34</id>
            <description>
                jakarta.faces.converter.LongConverter.LONG_detail={2}: 
                ''{0}'' must be a number between -9223372036854775808 
                to 9223372036854775807 Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.35</id>
            <description>
                jakarta.faces.converter.NumberConverter.CURRENCY={2}: 
                ''{0}'' could not be understood as a currency value.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.36</id>
            <description>
                jakarta.faces.converter.NumberConverter.CURRENCY_detail=
                {2}: ''{0}'' could not be understood as a currency value. 
                Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.37</id>
            <description>
                jakarta.faces.converter.NumberConverter.PERCENT={2}: 
                ''{0}'' could not be understood as a percentage.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.38</id>
            <description>
                jakarta.faces.converter.NumberConverter.PERCENT_detail=
                {2}: ''{0}'' could not be understood as a percentage. 
                Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.39</id>
            <description>
                jakarta.faces.converter.NumberConverter.NUMBER={2}: 
                ''{0}'' is not a number.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.40</id>
            <description>
                jakarta.faces.converter.NumberConverter.NUMBER_detail={2}:
                ''{0}'' is not a number. Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.41</id>
            <description>
                jakarta.faces.converter.NumberConverter.PATTERN={2}: 
                ''{0}'' is not a number pattern.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.42</id>
            <description>
                jakarta.faces.converter.NumberConverter.PATTERN_detail=
                {2}: ''{0}'' is not a number pattern. Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.43</id>
            <description>
                jakarta.faces.converter.ShortConverter.SHORT={2}: ''{0}'' 
                must be a number consisting of one or more digits.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.44</id>
            <description>
                jakarta.faces.converter.ShortConverter.SHORT_detail={2}: 
                ''{0}'' must be a number between -32768 and 32767 
                Example: {1}
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.45</id>
            <description>
                jakarta.faces.converter.STRING={1}: Could not convert 
                ''{0}'' to a string.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.46</id>
            <description>
                jakarta.faces.validator.DoubleRangeValidator.MAXIMUM -- 
                {1}: Validation Error: Value is greater than allowable 
                maximum of &#8216;&#8217;{0}&#8217;&#8217;
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.47</id>
            <description>
                jakarta.faces.validator.DoubleRangeValidator.MINIMUM -- 
                {1}: Validation Error: Value is less than allowable 
                minimum of &#8216;&#8217;{0}&#8217;&#8217;
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.48</id>
            <description>
                jakarta.faces.validator.DoubleRangeValidator.NOT_IN_RANGE 
                -- {2}: Validation Error: Specified attribute is not 
                between the expected values of {0} and {1}.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.49</id>
            <description>
                jakarta.faces.validator.DoubleRangeValidator.TYPE -- {0}: 
                Validation Error: Value is not of the correct type
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.50</id>
            <description>
                jakarta.faces.validator.LengthValidator.MAXIMUM -- {1}: 
                Validation Error: Value is greater than allowable 
                maximum of &#8216;&#8217;{0}&#8217;&#8217;
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.51</id>
            <description>
                jakarta.faces.validator.LengthValidator.MINIMUM -- {1}: 
                Validation Error: Value is less than allowable minimum
                of &#8216;&#8217;{0}&#8217;&#8217;
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.52</id>
            <description>
                jakarta.faces.validator.LongRangeValidator.MAXIMUM -- 
                {1}: Validation Error: Value is greater than allowable
                maximum of &#8216;&#8217;{0}&#8217;&#8217;
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.53</id>
            <description>
                jakarta.faces.validator.LongRangeValidator.MINIMUM -- {1}:
                Validation Error Value is less than allowable minimum of
                &#8216;&#8217;{0}&#8217;&#8217;
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.54</id>
            <description>
                jakarta.faces.validator.LongRangeValidator.NOT_IN_RANGE=
                {2}: Validation Error: Specified attribute is not
                between the expected values of {0} and {1}.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:22.55</id>
            <description>
                jakarta.faces.validator.LongRangeValidator.TYPE -- {0}:
                Validation Error: Value is not of the correct type
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:23</id>
    <description>
        These ResourceBundle keys must be used to look up the necessary
        values to create a localized FacesMessage instance. Note that
        the value of the summary and detail keys in the ResourceBundle
        may contain parameter substitution tokens, which must be
        substituted with the appropriate values using 
        java.text.MessageFormat.   
    </description>
    <location chapter="2" section="5.2.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:24</id>
    <description>
        The following algorithm must be used to create a FacesMessage
        instance given a message key.
    </description>
    <location chapter="2" section="5.2.4"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:24.1</id>
            <description>
                Call getMessageBundle() on the Application instance for 
                this web application, to determine if the application 
                has defined a resource bundle name. If so, load that
                ResourceBundle and look for the message there.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:24.2</id>
            <description>
                If not there, look in the jakarta.faces.Messages 
                resource bundle.
            </description>
            <location chapter="2" section="5.2.4"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:25</id>
    <description>
        A custom component that extends UIComponent directly, and does
        not extend any of the standard components must implement 
        StateHolder manually.
    </description>
    <location chapter="2" section="5.3.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:26</id>
    <description>
        A custom component that does extend from one of the standard 
        components and maintains its own state, in addition to the state
        maintained by the superclass must take special care to implement
        StateHolder correctly. Notably, calls to saveState() must not 
        alter the state in any way.
    </description>
    <location chapter="2" section="5.3.1"/>
</assertion>


<!-- =============================== Chapter 3 ============================= -->      
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:27</id>
    <description>
        Every User Interface component may be named by a component 
        identifier, which (if utilized) must be unique among the 
        components that share a common naming container parent in a 
        component tree.
    </description>
    <location chapter="3" section="1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:28</id>
    <description>
        Component identifiers must conform to the following rules:
    </description>
    <location chapter="3" section="1.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:28.1</id>
            <description>
                They must start with a letter (as defined by the 
                Character.isLetter() method).
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:28.2</id>
            <description>
                Subsequent characters may be letters (as defined by the 
                Character.isLetter() method), digits as defined by the 
                Character.isDigit() method, dashes (&#8216;-&#8217;), and 
                underscores (&#8216;_&#8217;).
            </description>
            <location chapter="3" section="1.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:29</id>
    <description>
        The implementation of setValueExpression must detemine if the 
        expression is a literal by calling 
        ValueExpression.isLiteralText() on the expression argument.
    </description>
    <location chapter="3" section="1.4"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:29.1</id>
            <description>
                If the expression argument is literal text, then 
                ValueExpression.getValue() must be called on the 
                expression argument.
            </description>
            <location chapter="3" section="1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:29.2</id>
            <description>
                The result must be used as the value argument, along 
                with the name argument to this component
                getAttributes().put(name,value) method call.
            </description>
            <location chapter="3" section="1.4"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:30</id>
    <description>
        For the standard component classes defined by this 
        specification, all attributes, and all properties other than id
        and parent, are value expression enabled.
    </description>
    <location chapter="3" section="1.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:31</id>
    <description>
        The specified ValueExpression must point to a read-write 
        JavaBeans property of type UIComponent(or appropriate subclass).
        Such a component binding is used at two different times 
        during the processing of a Faces Request:
    </description>
    <location chapter="3" section="1.5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:31.1</id>
            <description>
                When a component instance is first created (typically by 
                virtue of being referenced by a UIComponentELTag in a 
                JSP page), the JSF implementation will retrieve the
                ValueExpression for the name binding, and call 
                getValue() on it. 
            </description>
            <location chapter="3" section="1.5"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:31.1.1</id>
                    <description>
                        If this call returns a non-null UIComponent 
                        value (because the JavaBean programmatically 
                        instantiated and configured a component 
                        already), that instance will be added to the 
                        component tree that is being created. 
                    </description>
                    <location chapter="3" section="1.5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:31.1.2</id>
                    <description>
                        If the call returns null, a new component
                        instance will be created, added to the component 
                        tree, and setValue() will be called on the 
                        ValueBinding (which will cause the property on 
                        the JavaBean to be set to the newly created 
                        component instance).
                    </description>
                    <location chapter="3" section="1.5"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:31.2</id>
            <description>
                When a component tree is recreated during the Restore 
                View phase of the request processing lifecycle, for each 
                component that has a ValueExpression associated with the
                name &#8220;binding&#8221;, setValue() will be called on it, passing
                the recreated component instance.
            </description>
            <location chapter="3" section="1.5"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:32</id>
    <description>
        The UIComponent.getChildren() method returns a mutable List.
        The returned List implementation must support all of the 
        required and optional methods of the List interface, as well as
        update the parent property of children that are added and 
        removed, as described in the Javadocs for this method.    
    </description>
    <location chapter="3" section="1.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:33</id>
    <description>
        If there are no children, the getChildCount() method must 
        return 0. 
    </description>
    <location chapter="3" section="1.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:34</id>
    <description>
        The getChildCount() must not cause the creation of a child 
        component list, so it is preferred over calling 
        getChildren().size() when there are no children.
    </description>
    <location chapter="3" section="1.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:35</id>
    <description>
        The Map returned by getAttributes() must also support 
        attribute-property transparency, which operates as follows:
    </description>
    <location chapter="3" section="1.10"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:35.1</id>
            <description> 
                When the get() method is called, if the specified 
                attribute name matches the name of a readable JavaBeans 
                property on the component implementation class, the 
                value returned will be acquired by calling the 
                appropriate property getter method, and wrapping Java
                primitive values (such as int) in their corresponding 
                wrapper classes (such as java.lang.Integer) if
                necessary. If the specified attribute name does not 
                match the name of a readable JavaBeans property on the 
                component implementation class, consult the internal 
                data-structure to in which generic attributes are 
                stored. If no entry exists in the internal 
                data-structure, see if there is a ValueExpression for 
                this attribute name by calling getValueExpression(), 
                passing the attribute name as the key. If a 
                ValueExpression exists, call getValue() on it, returning
                the result. If an ELException is thrown wrap it in a 
                FacesException and re-throw it.
            </description>
            <location chapter="3" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:35.2</id>
            <description>
                When the put() method is called, if the specified 
                attribute name matches the name of a writable JavaBeans
                property on the component implementation class, the 
                appropriate property setter method will be called. If
                the specified attribute name does not match the name of
                a writable JavaBeans property, simply put the value in
                the data-structure for generic attributes.
            </description>
            <location chapter="3" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:35.3</id>
            <description>
                When the remove() method is called, if the specified 
                attribute name matches the name of a JavaBeans property 
                on the component, an IllegalArgumentException must be
                thrown.
            </description>
            <location chapter="3" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:35.4</id>
            <description>
                When the containsKey() method is called, if the 
                specified attribute name matches the name of a JavaBeans
                property, return false. Otherwise, return true if and 
                only if the specified attribute name exists in the 
                internal data-structure for the generic attributes.
            </description>
            <location chapter="3" section="1.10"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:36</id>
    <description>
        The following converter id values must be registered to create
        instances of the specified Converter implementation classes:
    </description>
    <location chapter="3" section="1.10"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.1</id>
            <description>
                jakarta.faces.BigDecimal -- An instance of
                jakarta.faces.convert.BigDecimalConverter (or a subclass 
                of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.2</id>
            <description>
                jakarta.faces.BigInteger -- An instance of
                jakarta.faces.convert.BigIntegerConverter (or a subclass 
                of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.3</id>
            <description>
                jakarta.faces.Boolean -- An instance of
                jakarta.faces.convert.BooleanConverter (or a subclass 
                of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.4</id>
            <description>
                jakarta.faces.Byte -- An instance of 
                jakarta.faces.convert.ByteConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.5</id>
            <description>
                jakarta.faces.Character -- An instance of
                jakarta.faces.convert.CharacterConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.6</id>
            <description>
                jakarta.faces.DateTime -- An instance of
                jakarta.faces.convert.DateTimeConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.7</id>
            <description>
                jakarta.faces.Double -- An instance of
                jakarta.faces.convert.DoubleConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.8</id>
            <description>
                jakarta.faces.Float -- An instance of
                jakarta.faces.convert.FloatConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.9</id>
            <description>
                jakarta.faces.Integer -- An instance of
                jakarta.faces.convert.IntegerConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.10</id>
            <description>
                jakarta.faces.Long -- An instance of 
                jakarta.faces.convert.LongConverter (or a subclass of this
                class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.11</id>
            <description>
                jakarta.faces.Number -- An instance of
                jakarta.faces.convert.NumberConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:36.12</id>
            <description>
                jakarta.faces.Short -- An instance of
                jakarta.faces.convert.ShortConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:37</id>
    <description>
        A JSF implementation must register converters for all of the
        following classes using the by-type registration mechanism:
    </description>
    <location chapter="3" section="3.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.1</id>
            <description>
                java.math.BigDecimal, and java.math.BigDecimal.TYPE --
                An instance of jakarta.faces.convert.BigDecimalConverter 
                (or a subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.2</id>
            <description>
                java.math.BigInteger, and java.math.BigInteger.TYPE -- 
                An instance of jakarta.faces.convert.BigIntegerConverter 
                (or a subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.3</id>
            <description>
                java.lang.Boolean, and java.lang.Boolean.TYPE -- An 
                instance of jakarta.faces.convert.BooleanConverter 
                (or a subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.4</id>
            <description>
                java.lang.Byte, and java.lang.Byte.TYPE -- An instance 
                of jakarta.faces.convert.ByteConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.5</id>
            <description>
                java.lang.Character, and java.lang.Character.TYPE -- An 
                instance of jakarta.faces.convert.CharacterConverter 
                (or a subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.6</id>
            <description>
                java.lang.Double, and java.lang.Double.TYPE -- An 
                instance of jakarta.faces.convert.DoubleConverter (or a 
                subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.7</id>
            <description>
                java.lang.Float, and java.lang.Float.TYPE -- An instance
                of jakarta.faces.convert.FloatConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.8</id>
            <description>
                java.lang.Integer, and java.lang.Integer.TYPE -- An 
                instance of jakarta.faces.convert.IntegerConverter (or a 
                subclass of this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.9</id>
            <description>
                java.lang.Long, and java.lang.Long.TYPE -- An instance 
                of jakarta.faces.convert.LongConverter (or a subclass of 
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.10</id>
            <description>
                java.lang.Short, and java.lang.Short.TYPE -- An instance
                of jakarta.faces.convert.ShortConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:37.11</id>
            <description>
                java.lang.Enum, and java.lang.Enum.TYPE -- An instance 
                of jakarta.faces.convert.EnumConverter (or a subclass of
                this class).
            </description>
            <location chapter="3" section="3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:38</id>
    <description>
        A compliant implementation must allow the registration of a 
        converter for class java.lang.String and java.lang.String.TYPE 
        that will be used to convert values for these types.
    </description>
    <location chapter="3" section="3.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:39</id>
    <description>
        A concrete UIComponent subclass that emits events of a 
        particular type must include public methods to register and 
        deregister a listener implementation.
    </description>
    <location chapter="3" section="4.5"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:40</id>
    <description>
        The following standard Validator implementations (in the
        jakarta.faces.validator package) are provided:
    </description>
    <location chapter="3" section="5.5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:40.1</id>
            <description>
                DoubleRangeValidator&#8212;Checks the local value of a 
                component, which must be of any numeric type, against 
                specified maximum and/or minimum values. Standard
                identifier is &#8220;jakarta.faces.DoubleRange&#8221;.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:40.2</id>
            <description>
                LengthValidator&#8212;Checks the length (i.e. number of 
                characters) of the local value of a component, which 
                must be of type String, against maximum and/or minimum 
                values. Standard identifier is &#8220;jakarta.faces.Length&#8221;.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:40.3</id>
            <description>
                LongRangeValidator&#8212;Checks the local value of a 
                component, which must be of any numeric type convertible
                to long, against maximum and/or minimum values. Standard
                identifier is &#8220;jakarta.faces.LongRange&#8221;.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:40.4</id>
            <description>
                MethodExpressionValidator&#8212;Wraps a MethodExpression and 
                interprets it as pointing to a method that performs 
                validation. Any exception thrown when the expression
                is invoked is wrapped in a ValidatorException in similar 
                fashion as the above validators.
            </description>
            <location chapter="3" section="4.5"/>
        </assertion>
    </sub-assertions>
</assertion>
        

<!-- =============================== Chapter 4 ============================= -->   
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:41</id>
    <description>
        The implementation for each standard UIComponent class
        must specify two public static final String constant values:
    </description>
    <location chapter="4" section="1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:41.1</id>
            <description>
                COMPONENT_TYPE -- The standard component type identifier
                under which the corresponding component class is 
                registered with the Application object for this 
                application. This value may be used as a parameter to 
                the createComponent() method.
            </description>
            <location chapter="4" section="1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:41.2</id>
            <description>
                COMPONENT_FAMILY -- The standard component family 
                identifier used to select an appropriate Renderer for 
                this component.
            </description>
            <location chapter="4" section="1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:42</id>
    <description>
        UIColumn specializes the behavior of render-independent
        properties inherited from the parent class as follows:
    </description>
    <location chapter="4" section="1.1.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:42.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Column&#8221;.
            </description>
            <location chapter="4" section="1.1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:42.2</id>
            <description>
                The default value of the rendererType property must be 
                set to null.
            </description>
            <location chapter="4" section="1.1.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:43</id>
    <description>
        UICommand components specialize the behavior of 
        renderindependent properties inherited from the parent class as 
        follows:
    </description>
    <location chapter="4" section="1.2.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:43.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Command&#8221;.
            </description>
            <location chapter="4" section="1.2.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:43.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Button&#8221;.
            </description>
            <location chapter="4" section="1.2.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:44</id>
    <description>
        UIData specializes the behavior of render-independent properties
        inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.3.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:44.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Data&#8221;.
            </description>
            <location chapter="4" section="1.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:44.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Table&#8221;.
            </description>
            <location chapter="4" section="1.3.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:45</id>
    <description>
        A DataModel wrapper instance must automatically be provided by 
        the JSF implementation if the current value is of one of the 
        following types:
    </description>
    <location chapter="4" section="1.3.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:45.1</id>
            <description>
                java.util.List
            </description>
            <location chapter="4" section="1.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:45.2</id>
            <description>
                Array of java.util.Object
            </description>
            <location chapter="4" section="1.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:45.3</id>
            <description>
                java.sql.ResultSet (which therefore also supports 
                javax.sql.RowSet)
            </description>
            <location chapter="4" section="1.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:45.4</id>
            <description>
                javax.servlet.jsp.jstl.sql.Result
            </description>
            <location chapter="4" section="1.3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:45.5</id>
            <description>
                Any other Java object is wrapped by a DataModel instance 
                with a single row
            </description>
            <location chapter="4" section="1.3.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:46</id>
    <description>
        UIData specializes the behavior of the processDecodes(), 
        processValidators(), and processUpdates() methods inherited from
        its parent as follows:
    </description>
    <location chapter="4" section="1.3.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:46.1</id>
            <description>
                For each of these methods, the UIData implementation 
                must iterate over each row in the underlying data model, 
                starting with the row identified by the first property, 
                for the number of rows indicated by the rows property, 
                by calling the setRowIndex() method.
            </description>
            <location chapter="4" section="1.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:46.2</id>
            <description>
                When iteration is complete, set the rowIndex property of 
                this component, and of the underlying DataModel, to 
                zero, and remove any request attribute exposed via the
                var property.
            </description>
            <location chapter="4" section="1.3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:47</id>
    <description>
        The encodeEnd() method of the renderer for UIForm must call 
        ViewHandler.writeState() before writing out the markup for the 
        closing tag of the form.
    </description>
    <location chapter="4" section="1.4.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:48</id>
    <description>
        UIForm specializes the behavior of render-independent properties
        inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.4.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:48.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Form&#8221;.
            </description>
            <location chapter="4" section="1.4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:48.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Form&#8221;.
            </description>
            <location chapter="4" section="1.4.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:49</id>
    <description>
        The setSubmitted() method of each UIForm instance in the view 
        must be called during the Apply Request Values phase of the 
        request processing lifecycle, during the processing performed by
        the UIComponent.decode() method.  If this UIForm instance 
        represents the form actually being submitted on this request, 
        the parameter must be set to true; otherwise, it must be set to 
        false. 
    </description>
    <location chapter="4" section="1.4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:50</id>
    <description>
        The value of a UIForm's submitted property must not be saved as 
        part of its state.
    </description>
    <location chapter="4" section="1.4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:51</id>
    <description>
        The saveState() method of UIForm must call setSubmitted(false) 
        before calling super.saveState().
    </description>
    <location chapter="4" section="1.4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:52</id>
    <description>
        Override the parent method to ensure that children of this 
        UIForm instance in the view have the form&#8217;s clientId prepended 
        to their clientIds if and only if the form&#8217;s prependId property 
        is true.
    </description>
    <location chapter="4" section="1.4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:53</id>
    <description>
        UIGraphic specializes the behavior of render-independent
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:53.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Graphic&#8221;.
            </description>
            <location chapter="4" section="1.5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:53.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Image&#8221;.
            </description>
            <location chapter="4" section="1.5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:54</id>
    <description>
        UIInput specializes the behavior of render-independent 
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.6.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:54.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Input&#8221;.
            </description>
            <location chapter="4" section="1.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:54.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Text&#8221;.
            </description>
            <location chapter="4" section="1.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:54.3</id>
            <description>
                The Converter specified by the converter property (if 
                any) must also be used to perform String-&gt;Object 
                conversions during decoding.
            </description>
            <location chapter="4" section="1.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:54.4</id>
            <description>
                If the value property has an associated ValueExpression, 
                the setValue() method of that ValueExpression will be 
                called during the Update Model Values phase of the
                request processing lifecycle to push the local value of
                the component back to the corresponding model bean 
                property.
            </description>
            <location chapter="4" section="1.6.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:55</id>
    <description>
        UIMessage specializes the behavior of render-independent
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.7.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:55.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Message&#8221;.
            </description>
            <location chapter="4" section="1.7.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:55.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Message&#8221;.
            </description>
            <location chapter="4" section="1.7.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:56</id>
    <description>
        UIOutput specializes the behavior of render-independent
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.9.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:56.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Output&#8221;.
            </description>
            <location chapter="4" section="1.9.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:56.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Text&#8221;.
            </description>
            <location chapter="4" section="1.9.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:57</id>
    <description>
        UIPanel specializes the behavior of render-independent
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.10.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:57.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Panel&#8221;.
            </description>
            <location chapter="4" section="1.10.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:57.2</id>
            <description>
                The default value of the rendererType property must be 
                set to null.
            </description>
            <location chapter="4" section="1.10.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:58</id>
    <description>
        UIParameter specializes the behavior of renderindependent
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.11.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:58.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.Parameter&#8221;.
            </description>
            <location chapter="4" section="1.11.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:58.2</id>
            <description>
                The default value of the rendererType property must be 
                set to null.
            </description>
            <location chapter="4" section="1.11.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:59</id>
    <description>
        UISelectBoolean specializes the behavior of render-independent 
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.12.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:59.1</id>
            <description>
                The default value of the family property must be set to
                &#8220;jakarta.faces.SelectBoolean&#8221;.
            </description>
            <location chapter="4" section="1.12.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:59.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Checkbox&#8221;.
            </description>
            <location chapter="4" section="1.12.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:60</id>
    <description>
        UISelectItem specializes the behavior of renderindependent
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.13.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:60.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.SelectItem&#8221;.
            </description>
            <location chapter="4" section="1.13.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:60.2</id>
            <description>
                The default value of the rendererType property must be 
                set to null.
            </description>
            <location chapter="4" section="1.13.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:60.3</id>
            <description>
                If the value property is non-null, it must contain a 
                SelectItem instance used to configure the selection item
                specified by this component.
            </description>
            <location chapter="4" section="1.13.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:60.4</id>
            <description>
                If the value property is a value expression, it must 
                point at a SelectItem instance used to configure the 
                selection item specified by this component.
            </description>
            <location chapter="4" section="1.13.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:60.5</id>
            <description>
                If the value property is null, and there is no 
                corresponding value expression, the itemDescription, 
                itemDisabled, itemLabel and itemValue properties must be
                used to construct a new SelectItem representing the 
                selection item specified by this component.
            </description>
            <location chapter="4" section="1.13.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:61</id>
    <description>
        UISelectItems specializes the behavior of renderindependent
        properties inherited
    </description>
    <location chapter="4" section="1.14.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:61.1</id>
            <description>
                The default value of the family property must be set to
                &#8220;jakarta.faces.SelectItems&#8221;.
            </description>
            <location chapter="4" section="1.14.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:61.2</id>
            <description>
                The default value of the rendererType property must be 
                set to null.
            </description>
            <location chapter="4" section="1.14.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:61.3</id>
            <description>
                If the value property (or the value returned by a value 
                expression associated with the value property) is 
                non-null, it must contain a SelectItem bean, an array of
                SelectItem beans, a Collection of SelectItem beans, or a 
                Map, where each map entry is used to construct a 
                SelectItem bean with the key as the label property of 
                the bean, and the value as the value property of the
                bean (which must be of the same basic type as the value 
                of the parent component&#8217;s value).
            </description>
            <location chapter="4" section="1.14.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:62</id>
    <description>
        UISelectMany must provide a specialized validate() method which 
        ensures that any decoded values are valid options (from the
        nested UISelectItem and UISelectItems children).
    </description>
    <location chapter="4" section="1.15.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:63</id>
    <description>
        UISelectOne specializes the behavior of renderindependent
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.16.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:63.1</id>
            <description>
                The default value of the family property must be set to
                &#8220;jakarta.faces.SelectOne&#8221;.
            </description>
            <location chapter="4" section="1.16.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:63.2</id>
            <description>
                The default value of the rendererType property must be 
                set to &#8220;jakarta.faces.Menu&#8221;.
            </description>
            <location chapter="4" section="1.16.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:64</id>
    <description>
        UISelectOne must provide a specialized validate() method which 
        ensures that any decoded value is a valid option (from the 
        nested UISelectItem and UISelectItems children).
    </description>
    <location chapter="4" section="1.16.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:65</id>
    <description>
        UIViewRoot specializes the behavior of render-independent
        properties inherited from the parent component as follows:
    </description>
    <location chapter="4" section="1.17.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:65.1</id>
            <description>
                The default value of the family property must be set to 
                &#8220;jakarta.faces.ViewRoot&#8221;.
            </description>
            <location chapter="4" section="1.17.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:65.2</id>
            <description>
                The default value of the rendererType property must be 
                set to null.
            </description>
            <location chapter="4" section="1.17.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:66</id>
    <description>
        The JSF implementation must provide concrete implementations of
        DataModel (in the jakarta.faces.model package) for the following 
        data wrapping scenarios:
    </description>
    <location chapter="4" section="2.1.4"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:66.1</id>
            <description>
                ArrayDataModel -- Wrap an array of Java objects.
            </description>
            <location chapter="4" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:66.2</id>
            <description>
                ListDataModel -- Wrap a java.util.List of Java objects.
            </description>
            <location chapter="4" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:66.3</id>
            <description>
                ResultDataModel -- Wrap an object of type 
                javax.servlet.jsp.jstl.sql.Result (the query results 
                from JSTL&#8217;s SQL tag library)
            </description>
            <location chapter="4" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:66.4</id>
            <description>
                ResultSetDataModel -- Wrap an object of type 
                java.sql.ResultSet (which therefore means that
                javax.sql.RowSet instances are also supported).
            </description>
            <location chapter="4" section="2.1.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:66.5</id>
            <description>
                ScalarDataModel -- Wrap a single Java object in what 
                appears to be a one-row data set.
            </description>
            <location chapter="4" section="2.1.4"/>
        </assertion>
    </sub-assertions>
</assertion>
        

<!-- =============================== Chapter 5 ============================= --> 

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:67</id>
    <description>
        It is an error to specify a managed bean class that does not 
        exist, or that cannot be instantiated with a public, zero-args 
        constructor.
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:68</id>
    <description>
        It is an error to specify a &lt;property-name&gt; element for a 
        property that does not exist, or does not have a public setter
        method, on the specified managed bean class.
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:69</id>
    <description>
        It is an error to specify a value element that cannot be 
        converted to the type required by a managed property, or that, 
        when evaluated, results in a value that cannot be converted to 
        the type required by a managed property.
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:70</id>
    <description>
        If the type of the property referenced by the 
        &lt;managed-property&gt; element is a Java enum, the contents of 
        the &lt;value&gt; element must be a String that yields a valid 
        return from java.lang.Enum.valueOf(PROPERTY_CLASS, VALUE) where
        PROPERTY_CLASS is the java.lang.Class for the property and VALUE 
        is the contents of &lt;value&gt; element in the application 
        configuration resource. If any exception is thrown from 
        Enum.valueOf() it is an error.
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:71</id>
    <description>
        It is an error for a managed bean created through The Managed 
        Bean Creation Facility to have a property that points at an 
        object stored in a scope with a (potentially) shorter life span. 
        Specifically, this means, for an object created with the
        specified &lt;managed-bean-scope&gt;, then &lt;value&gt; 
        evaluations can only point at created objects with the specified
        managed bean scope:
        
        &#9632; none -- none
        &#9632; application -- none, application
        &#9632; session -- none, application, session
        &#9632; request -- none, application, session, request
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:72</id>
    <description>
        Data accessed via an implicit object is also defined to be in a 
        scope. The following implicit objects are considered to be in 
        request scope:
        
        &#9632; cookie
        &#9632; facesContext
        &#9632; header
        &#9632; headerValues
        &#9632; param
        &#9632; paramValues
        &#9632; request
        &#9632; requestScope
        &#9632; view
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:73</id>
    <description>
        The only implicit objects in session scope are session and 
        sessionScope.
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:74</id>
    <description>
        The following implicit objects are considered to be in 
        application scope:
        
        &#9632; application
        &#9632; applicationScope
        &#9632; initParam
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:75</id>
    <description>
        It is an error to configure cyclic references between managed 
        beans.
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:76</id>
    <description>
        Managed bean names must conform to the syntax of a Java language 
        identifier.
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:77</id>
    <description>
        &lt;null-value/&gt; -- An empty element indicating that this property
        must be explicitly initialized to null. This element is not allowed if 
        the underlying property is of a Java primitive type.
    </description>
    <location chapter="5" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:78</id>
    <description>
        Each &lt;managed-property&gt; element contains the following elements 
        used to configure the execution of the corresponding property setter 
        call:
    </description>
    <location chapter="5" section="3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:78.1</id>
            <description>
                &lt;property-name&gt; -- The property name of the property to be
                configured. 
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:78.2</id>
            <description>
                &lt;map-entries&gt; -- A set of key/value pairs used to 
                initialize the contents of a property of type java.util.Map.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:78.3</id>
            <description>
                &lt;null-value/&gt; -- An empty element indicating that this 
                property must be explicitly initialized to null. This element is 
                not allowed if the underlying property is of a Java primitive
                type.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:78.4</id>
            <description>
                &lt;value&gt; -- A String value that will have any leading and 
                trailing spaces stripped, and then be converted  prior to
                setting it to this value.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:78.5</id>
            <description>
                &lt;list-entries&gt; -- A set of values used to initialize the 
                contents of a property of type array or java.util.List.          
            </description>
            <location chapter="5" section="3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:79</id>
    <description>
        The initialization of bean properties from &lt;map-entries&gt; elements 
        must adhere to the following algorithm:
    </description>
    <location chapter="5" section="3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:79.1</id>
            <description>
                Call the property getter. If the getter returns null or doesn't 
                exist, create a java.util.HashMap, otherwise
                use the returned java.util.Map.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:79.2</id>
            <description>
                Add all entries defined by nested &lt;map-entry&gt; elements in
                the order they are listed, converting key values defined by 
                nested &lt;key&gt; elements to the type defined by &lt;keyclass&gt;
                and entry values defined by nested &lt;value&gt; elements to the 
                type defined by &lt;value-class&gt;.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:79.3</id>
            <description>
                If a value is given as a value expression, evaluate the 
                reference and store the result, converting to &lt;value-class&gt; 
                if necessary. If &lt;key-class&gt; and/or &lt;value-class&gt; 
                are not defined, use java.lang.String. Add null for each
                &lt;null-value&gt; element.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:79.4</id>
            <description>
                If a new java.util.Map was created, set the property by calling 
                the setter method, or log an error if there is no setter method.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:80</id>
    <description>
        The initialization of bean properties from &lt;list-entries&gt; elements
        must adhere to the following algorithm:
    </description>
    <location chapter="5" section="3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:80.1</id>
            <description>
                Call the property getter, If the getter returns null or doesn't
                exist, create a java.util.ArrayList, otherwise use the returned 
                Object (an array or a java.util.List).
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:80.2</id>
            <description>
                add all elements defined by nested &lt;value&gt; elements in the
                order they are listed, converting values defined by nested
                &lt;value&gt; elements to the type defined by &lt;value-class&gt;.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:80.3</id>
            <description>
                If a value is given as a value expression, evaluate the 
                reference and store the result, converting to &lt;valueclass&gt;
                if necessary. If a &lt;value-class&gt; is not defined, use the 
                value as-is (i.e., as a java.lang.String). Add null for each 
                &lt;null-value&gt; element.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:80.4</id>
            <description>
                If an array was returned, create a java.util.ArrayList and copy 
                all elements from the returned array to the new List, wrapping 
                elements of a primitive type.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:80.5</id>
            <description>
                If a new java.util.List was created, and the property is of type
                List, set the property by calling the setter method, or log an 
                error if there is no setter method.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:80.6</id>
            <description>
                If a new java.util.List was created, and the property is a java 
                array, convert the List into an array of the property type, and 
                set it by calling the setter method, or log an error if there is
                no setter method.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:80.7</id>
            <description>
                If a new java.util.List was created, convert the List
                to an array of the proper type for the property and set the 
                property by calling the setter method, or log an error if there 
                is no setter method.
            </description>
            <location chapter="5" section="3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:81</id>
    <description>
        Here is a summary of the valid injection annotations one may use
        in a managed bean.
        
        @Resource
        @Resources
        @EJB
        @EJBs
        @WebServiceRef
        @WebServiceRefs
        @PersistenceContext
        @PersistenceContexts
        @PersistenceUnit
        @PersistenceUnits
    </description>
    <location chapter="5" section="4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:82</id>
    <description>
        JSF implementations running in a Java EE 5 compliant container must 
        support attaching the @PostConstruct and @PreDestroy annotations to aid 
        in awareness of the managedbean lifecycle.
    </description>
    <location chapter="5" section="4.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:82.1</id>
            <description>
                Methods on managed beans declared to be in request, session, or 
                application scope, annotated with @PostConstruct, must be called
                by the JSF implementation after resource injection is performed 
                (if any) but before the bean is placed into scope.
            </description>
            <location chapter="5" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:82.2</id>
            <description>
                If the method throws an unchecked exception, the JSF 
                implementation must not put the managed-bean into service and 
                further methods on that managed bean instance must not be 
                called.
            </description>
            <location chapter="5" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:82.3</id>
            <description>
                Methods on managed beans declared to be in request, session, or 
                application scope, annotated with @PreDestroy, must be called by
                the JSF implementation before the bean is removed from its scope
                or before the scope itself is destroyed, whichever comes first.
                This annotation must be supported in all cases where the above 
                @PostConstruct annotation is supported.
            </description>
            <location chapter="5" section="4.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:82.4</id>
            <description>
                If the method throws an unchecked exception, the JSF 
                implementation may log it, but the exception must not otherwise 
                alter the execution.
            </description>
            <location chapter="5" section="4.1"/>
        </assertion>
    </sub-assertions>
</assertion>
        

<!-- =============================== Chapter 6 ============================= --> 
  
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:83</id>
    <description>
        The JSF implementation must ensure that the Application instance
        for the current web application is available via this method, as
        a convenient alternative to lookup via an ApplicationFactory.
    </description>
    <location chapter="6" section="1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:84</id>
    <description>
        Upon creation of the ELContext instance, the implementation must
        take the following action:
    </description>
    <location chapter="6" section="1.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:84.1</id>
            <description>
                Call the ELContext.putContext(java.lang.Class, 
                java.lang.Object) method on the instance, passing in 
                FacesContext.class and the this reference for the 
                FacesContext instance itself.
            </description>
            <location chapter="6" section="1.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:84.2</id>
            <description>
                If the Collection returned by 
                jakarta.faces.Application.getELContextListeners() is 
                non-empty, create an instance of ELContextEvent and pass 
                it to each ELContextListener instance in the Collection 
                by calling the ELContextListener.contextCreated
                (jakarta.el.ELContextEvent) method.
            </description>
            <location chapter="6" section="1.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:85</id>
    <description>
        The ExternalContext abstract class must be implemented along 
        with the FacesContext class, and must be accessible via the 
        getExternalContext method in FacesContext.
    </description>
    <location chapter="6" section="1.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:86</id>
    <description>
        The dispatch() must use a RequestDispatcher provided by the
        application context object to incorporate content from a 
        specified context-relative resource. The redirect() method must 
        cause an HTTP Redirect to be sent to the client.
    </description>
    <location chapter="6" section="1.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:87</id>
    <description>
        The getClientIdsWithMessages() method must return an Iterator 
        over the client identifiers for which at least one Message has 
        been queued. This method must be implemented so the clientIds 
        are returned in the order of calls to addMessage().
    </description>
    <location chapter="6" section="1.5"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:88</id>
    <description>
        In some circumstances, it is possible that both renderResponse() 
        and responseComplete() might have been called for the request. 
        In this case, the JSF implementation must respect the 
        responseComplete() call (if it was made) before checking to see 
        if renderResponse() was called.
    </description>
    <location chapter="6" section="1.8"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:89</id>
    <description>
        The getCurrentInstance() method may be called by any Java class 
        in the current web application to retrieve an instance of the
        FacesContext for this request. The JSF implementation must
        ensure that this value is set correctly before 
        FacesContextFactory returns a FacesContext instance, 
        and that the value is maintained in a thread-safe manner.
    </description>
    <location chapter="6" section="1.9"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:90</id>
    <description>
        A single instance of jakarta.faces.context.FacesContextFactory 
        must be made available to each JSF-based web application 
        running in a servlet or portlet container.
    </description>
    <location chapter="6" section="5"/>
</assertion>
        
<!-- =============================== Chapter 7 ============================= --> 

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:91</id>
    <description>
        The JSF implementation must provide a default implementation 
        ActionListener that performs the following functions:
    </description>
    <location chapter="7" section="1.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:91.1</id>
            <description>
                The processAction() method must call 
                FacesContext.renderResponse() in order to bypass any 
                intervening lifecycle phases, once the method returns.
            </description>
            <location chapter="7" section="1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>JSF:SPEC:91.2</id>
            <description>
                The processAction() method must next determine the 
                logical outcome of this event, as follows:
            </description>
            <location chapter="7" section="1.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:91.2.1</id>
                    <description>
                        If the originating component has a non-null 
                        action property, retrieve the MethodBinding and 
                        call invoke() to perform the application-
                        specified processing in this action method. If 
                        the method returns non-null, call toString() on 
                        the result and use the value returned as the 
                        logical outcome.
                    </description>
                    <location chapter="7" section="1.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:91.2.2</id>
                    <description>
                        The default logical outcome is null.
                    </description>
                    <location chapter="7" section="1.1"/>
                </assertion>
            </sub-assertions>       
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:92</id>
    <description>
        If a call is made to setViewHandler() after the first time the
        Render Response phase has executed, the call must be ignored by 
        the implementation.
    </description>
    <location chapter="7" section="1.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:93</id>
    <description>
        The default implementation simply returns the ExpressionFactory 
        from the JSP container by calling JspFactory.getDefaultFactory()
        .getJspApplicationContext(servletContext)
        .getExpressionFactory().
    </description>
    <location chapter="7" section="1.8"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:94</id>
    <description>
        The "public UIComponent createComponent(ValueExpression
        componentExpression, FacesContext context, 
        String componentType);" method has the following behavior:
    </description>
    <location chapter="7" section="1.10"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:94.1</id>
            <description>
                Call the getValue() method on the specified 
                ValueExpression, in the context of the specified 
                FacesContext. If this results in a non-null UIComponent 
                instance, return it as the value of this method.
            </description>
            <location chapter="7" section="1.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:94.2</id>
            <description>
                If the getValue() call did not return a component 
                instance, create a new component instance of the 
                specified component type, pass the new component to the
                setValue() method of the specified ValueExpression, and 
                return it.
            </description>
            <location chapter="7" section="1.10"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:95</id>
    <description>
        The default NavigationHandler implementation must behave as if
        it were performing the following algorithm (although optimized 
        implementation techniques may be utilized):
    </description>
    <location chapter="7" section="4.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:95.1</id>
            <description>
                If the logical outcome value passed to the 
                handleNavigation() method is null, do not scan for 
                matching rules. This is an indication that the current 
                view should be redisplayed.
            </description>
            <location chapter="7" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:95.2</id>
            <description>
                Find a &lt;navigation-rule&gt; element for which the 
                view identifier (of the view in the FacesContext 
                instance for the current request) matches the 
                &lt;from-view-id&gt; matching pattern of the 
                &lt;navigation-rule&gt;. Rule instances are considered 
                in the following order:
            </description>
            <location chapter="7" section="4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:95.2.1</id>
                    <description>
                        An exact match of the view identifier against a 
                        &lt;from-view-id&gt; pattern that does not end with an 
                        asterisk (&#8220;*&#8221;) character.
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:95.2.2</id>
                    <description>
                        For &lt;from-view-id&gt; patterns that end with an 
                        asterisk, an exact match on characters preceding the 
                        asterisk against the prefix of the view id. If the 
                        patterns for multiple navigation rules match, pick the 
                        longest matching prefix first.
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:95.2.3</id>
                    <description>
                        If there is a &lt;navigation-rule&gt; with a 
                        &lt;from-view-id&gt; pattern of only an asterisk3, it 
                        matches any view identifier.
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:95.3</id>
            <description>
                From the &lt;avigation-case&gt; elements nested within the 
                matching &lt;navigationrule&gt; element, locate a matching 
                navigation case by matching the &lt;from-action&gt; and 
                &lt;from-outcome&gt; values against the corresponding parameter 
                values passed in to the handleNavigation() method. Navigation 
                cases are checked in the following order:
            </description>
            <location chapter="7" section="4.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:95.3.1</id>
                    <description>
                        Cases specifying both a &lt;from-action&gt; value and a 
                        &lt;from-outcome&gt; value are matched against the 
                        action expression and outcome parameters passed to the
                        handleNavigation() method (both parameters must be not 
                        null, and both must be equal to the corresponding 
                        condition values, in order to match).
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:95.3.2</id>
                    <description>
                        Cases that specify only a &lt;from-outcome&gt; value are 
                        matched against the outcome parameter passed to the 
                        handleNavigation() method (which must be not null,
                        and equal to the corresponding condition value, to 
                        match).
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:95.3.3</id>
                    <description>
                        Cases that specify only a &lt;from-action&gt; value are 
                        matched against the action expression parameter passed 
                        to the handleNavigation() method (which must be not 
                        null, and equal to the corresponding condition value, to 
                        match).
                    </description>
                    <location chapter="7" section="4.2"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:95.4</id>
            <description>
                If a matching &lt;navigation-case&gt; element was located, and 
                the &lt;redirect/&gt; element was not specified in this 
                &lt;navigation-case&gt; (or the application is running in a 
                Portlet environment, where redirects are not possible), use the 
                &lt;to-view-id&gt; element of the matching case to request a new
                UIViewRoot instance from the ViewHandler instance for this 
                application, and pass it to the setViewRoot() method of the 
                FacesContext instance for the current request. Then, exit the 
                algorithm.
            </description>
            <location chapter="7" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:95.5</id>
            <description>
                If a matching &lt;navigation-case&gt; element was located, the 
                &lt;redirect/&gt; element was specified in this 
                &lt;navigation-case&gt;, and the application is not running in a
                Portlet environment, use the &lt;to-view-id&gt; element of the 
                matching case to construct a context-relative path that 
                corresponds to that view id, cause the current response to
                perform an HTTP redirect to this path, and call 
                responseComplete() on the FacesContext instance for the current 
                request.
            </description>
            <location chapter="7" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:95.6</id>
            <description>
                If no matching &lt;navigation-case&gt; element was located, 
                return to Step 1 and find the next matching 
                &lt;navigation-rule&gt; element (if any). If there are no more 
                matching rule elements, return without changing the current 
                view.
            </description>
            <location chapter="7" section="4.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:96</id>
    <description>
        The calculateCharacterEncoding() method must fulfill the following 
        responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:96.1</id>
            <description>
                Examine the Content-Type request header. If it has a charset 
                parameter extract it and return it.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:96.2</id>
            <description>
                If not, test for the existence of a session by calling 
                getSession(false) on the ExternalContext for this FacesContext. 
                If the session is non-null, look in the Map returned by the 
                getSessionMap() method of the ExternalContext for a value under 
                the key given by the value of the symbolic constant
                jakarta.faces.application.ViewHandler.CHARACTER_ENCODING_KEY. If a
                value is found, convert it to a String and return it.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:97</id>
    <description>
        The calculateLocale() method must fulfill the following 
        responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:97.1</id>
            <description>
                Attempt to match one of the locales returned by the getLocales() 
                method of the ExternalContext instance for this request, against 
                the supported locales for this application as defined in the 
                application configuration resources. Matching is performed by 
                the algorithm described in Section JSTL.8.3.2 of the JSTL 
                Specification. If a match is found, return the corresponding 
                Locale object.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:97.2</id>
            <description>
                Otherwise, if the application has specified a default locale in 
                the application configuration resources, return the 
                corresponding Locale object.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:97.3</id>
            <description>
                Otherwise, return the value returned by calling 
                Locale.getDefault().
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:98</id>
    <description>
        The calculateRenderKitId() method must fulfill the following 
        responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:98.1</id>
            <description>
                Return the value of the request parameter named by the symbolic 
                constant ResponseStateManager.RENDER_KIT_ID_PARAM if it is not 
                null.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:98.2</id>
            <description>
                Otherwise, return the value returned by
                Application.getDefaultRenderKitId() if it is not null.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:98.3</id>
            <description>
                Otherwise, return the value specified by the symbolic constant
                RenderKitFactory.HTML_BASIC_RENDER_KIT.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:99</id>
    <description>
        The createView() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>JSF:SPEC:99.1</id>
            <description>
                Calculate the viewId that corresponds to this request, as 
                follows:
            </description>
            <location chapter="7" section="5.2"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:99.1.1</id>
                    <description>
                        If prefix mapping (such as &#8220;/faces/*&#8221;) is used for 
                        FacesServlet, the viewId is set from the extra path 
                        information of the request URI.
                    </description>
                    <location chapter="7" section="5.2"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:99.1.2</id>
                    <description>
                        If suffix mapping (such as &#8220;*.faces&#8221;) is used for 
                        FacesServlet, the viewId is set from the servlet path 
                        information of the request URI, after replacing the 
                        suffix with the value of the context initialization 
                        parameter named by the symbolic constant
                        ViewHandler.DEFAULT_SUFFIX_PARAM_NAME (if no such 
                        context initialization parameter is present, use the 
                        value of the symbolic constant
                        ViewHandler.DEFAULT_SUFFIX as the replacement suffix).
                    </description>
                    <location chapter="7" section="5.2"/>
                </assertion> 
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:99.2</id>
            <description>
                If no viewId could be identified, or the viewId is exactly equal 
                to the servlet mapping, call the redirect() method of the 
                ExternalContext instance for this request, passing the context 
                path of this web application.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:99.3</id>
            <description>
                Create a new UIViewRoot object instance
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:99.4</id>
            <description>
                Conditionally copy the renderKitId and locale from any current 
                view for the current request (as described in the Javadocs for 
                createView()).
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:99.5</id>
            <description>
                Return the newly created UIViewRoot.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:100</id>
    <description>
        The getActionURL() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:100.1</id>
            <description>
                If the specified viewId does not start with a &#8220;/&#8221;, throw
                IllegalArgumentException.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:100.2</id>
            <description>
                If prefix mapping (such as &#8220;/faces/*&#8221;) is used for FacesServlet, 
                prepend the context path of the current application, and the 
                specified prefix, to the specified viewId and return the 
                completed value. For example &#8220;/cardemo/faces/chooseLocale.jsp&#8221;.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:100.3</id>
            <description>
                If suffix mapping (such as &#8220;*.faces&#8221;) is used for FacesServlet, 
                and the specified viewId ends with the specified suffix, 
                replacing the suffix with the value specified by the context 
                initialization parameter named by the symbolic constant
                ViewHandler.DEFAULT_SUFFIX_NAME (if no such context 
                initialization parameter is present, use the value of the 
                symbolic constant ViewHandler.DEFAULT_SUFFIX as the replacement 
                suffix), prefix this value with the context path for the current 
                web application, and return the result. For example
                &#8220;/cardemo/chooseLocale.faces&#8221;
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:101</id>
    <description>
        The getResourceURL() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:101.1</id>
            <description>
                If the specified path starts with a &#8220;/&#8221;, prefix it with the 
                context path for the current web application, and return the 
                result.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:101.2</id>
            <description>
                Otherwise, return the specified path value unchanged.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:102</id>
    <description>
        The initView() method must fulfill the following responsibilities:
        Call calculateCharacterEncoding(). If the result is non-null pass the 
        result to the setRequestCharacterEncoding() method of the 
        ExternalContext for this FacesContext.
    </description>
    <location chapter="7" section="5.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:103</id>
    <description>
        The renderView() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.1</id>
            <description>
                If the current request is a ServletRequest, call the set() 
                method of the javax.servlet.jsp.jstl.core.Config class, passing 
                the current ServletRequest, the symbolic constant 
                Config.FMT_LOCALE, and the locale property of the specfied 
                UIViewRoot. This configures JSTL with the application&#8217;s
                preferred locale for rendering this response.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.2</id>
            <description>
                Update the JSTL locale attribute in request scope so that JSTL 
                picks up the new locale from the UIViewRoot.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.3</id>
            <description>
                Create a wrapper around the current response from the 
                ExternalContext and set it as the new response in the 
                ExternalContext.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.4</id>
            <description>
                Execute the JSP page to build the view by treating the viewId as
                a context-relative path(starting with a slash character), by 
                passing it to the dispatch() method of the ExternalContext 
                associated with this request.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.5</id>
            <description>
                Restore the original response into the ExternalContext.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.6</id>
            <description>
                If the FacesContext has a non-null ResponseWriter create a new 
                writer using its cloneWithWriter() method, passing the 
                response&#8217;s Writer as the argument.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.7</id>
            <description>
                Set the new ResponseWriter into the FacesContext, saving the
                old one aside.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.8</id>
            <description>
                Call saveView() on the StateManager for this application, saving
                the result in a thread-safe manner for use in the writeState() 
                method of ViewHandler.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.9</id>
            <description>
                Call startDocument() on the ResponseWriter.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.10</id>
            <description>
                Call encodeAll() on the UIViewRoot.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.11</id>
            <description>
                Output any content in the wrapped response from above to the
                response, removing the wrapped response from the thread-safe 
                storage.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.12</id>
            <description>
                Call endDocument() on the ResponseWriter.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:103.13</id>
            <description>
                If the old ResponseWriter was not null, place the old 
                ResponseWriter back into the FacesContext.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:104</id>
    <description>
        The restoreView() method must fulfill the following responsibilities:
    </description>
    <location chapter="7" section="5.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:104.1</id>
            <description>
                Calculate the viewId that corresponds to this request using the 
                &#8220;The ViewId derivation algorithm&#8221;.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:104.2</id>
            <description>
                If no viewId could be identified, return null.
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:104.3</id>
            <description>
                Call the restoreView() method of the associated StateManager, 
                passing the FacesContext instance for the current request and 
                the calculated viewId, and return the returned UIViewRoot, 
                which may be null
            </description>
            <location chapter="7" section="5.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:105</id>
    <description>
        The writeState() method must Obtain the saved state stored in a 
        thread-safe manner during the invocation of renderView() and pass it to 
        the writeState() method of the StateManager for this application.
    </description>
    <location chapter="7" section="5.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:106</id>
    <description>
        The "public Object saveView(FacesContext context)" method causes the 
        tree structure and component state of the view contained in the argument 
        FacesContext to be collected, stored, and returned in a java.lang.Object
        instance that must implement java.io.Serializable. If null is returned 
        from this method, there is no state tosave.
    </description>
    <location chapter="7" section="6.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:107</id>
    <description>
        The "public boolean isSavingStateInClient(FacesContext context)" method
        will Return true if and only if the value of the ServletContext init 
        parameter named by the value of the constant 
        StateManager.STATE_SAVING_METHOD_PARAM_NAME is equal to the value of the
        constant STATE_SAVING_METHOD_CLIENT. Return false otherwise.
    </description>
    <location chapter="7" section="6.5"/>
</assertion>
        

<!-- =============================== Chapter 8 ============================= --> 

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:108</id>
    <description>
        A JSF implementation must provide a default RenderKit instance 
        (named by the render kit identifier associated with the String constant
        RenderKitFactory.HTML_BASIC_RENDER_KIT) that is utilized if no other 
        RenderKit is selected.
    </description>
    <location chapter="8" section="1.0"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:109</id>
    <description>
        The RenderKit must support a value for the contentTypeList argument that 
        comes straight from the Accept HTTP header, and therefore requires
        parsing according to the specification of the Accept header.
    </description>
    <location chapter="8" section="1.0"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:110</id>
    <description>
        The "getState(FacesContext context)" implementation must inspect the 
        current request and return the component tree state Object passed to it 
        on a previous invocation of writeState().
    </description>
    <location chapter="8" section="3.0"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:111</id>
    <description>
        The ResponseStateManager.RENDER_KIT_ID_PARAM identifier must not be 
        written if:
    </description>
    <location chapter="8" section="3.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:111.1</id>
            <description>
                it is the default render kit identifier as returned by
                Application.getDefaultRenderKitId().
            </description>
            <location chapter="8" section="3.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:111.2</id>
            <description>
                the render kit identifier is the value of
                RenderKitFactory.HTML_BASIC_RENDER_KIT and
                Application.getDefaultRenderKitId() returns null.
            </description>
            <location chapter="8" section="3.0"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:112</id>
    <description>
        A single instance of jakarta.faces.render.RenderKitFactory must be made 
        available to each JSFbased web application running in a servlet or 
        portlet container.
    </description>
    <location chapter="8" section="4.0"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:113</id>
    <description>
        Every JSF implementation must provide a RenderKit instance for a default 
        render kit identifier that is designated by the String constant
        RenderKitFactory.HTML_BASIC_RENDER_KIT.
    </description>
    <location chapter="8" section="4.0"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:114</id>
    <description>
        The returned Iterator from getRenderKitIds() must include the value 
        specified by RenderKitFactory.HTML_BASIC_RENDER_KIT.
    </description>
    <location chapter="8" section="4.0"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:115</id>
    <description>
        As with the standard components in the jakarta.faces.component package, 
        each HTML component implementation class must define a static public 
        final String constant named COMPONENT_TYPE, whose value is &#8220;jakarta.faces.&#8221; 
        concatenated with the class name.
    </description>
    <location chapter="8" section="5.0"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:116</id>
    <description>
        HTML components, must not define a COMPONENT_FAMILY constant, or
        override the getFamily() method they inherit from their superclass.
    </description>
    <location chapter="8" section="5.0"/>
</assertion>
        

<!-- =============================== Chapter 9 ============================= --> 

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:117</id>
    <description>
        All JSF implementations must provide a tag library containing core
        actions (described below) that are independent of a particular 
        RenderKit.The corresponding tag library descriptor must meet the 
        following requirements:
    </description>
    <location chapter="9" section="4.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:117.1</id>
            <description>
                Must declare a tag library version (tlib-version) value of 1.2.
            </description>
            <location chapter="9" section="4.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:117.2</id>
            <description>
                Must declare a URI (uri) value of http://java.sun.com/jsf/core.
            </description>
            <location chapter="9" section="4.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:117.3</id>
            <description>
                Must be included in the META-INF directory of a JAR file 
                containing the corresponding implementation classes, suitable 
                for inclusion with a web application, such that the tag library 
                descriptor will be located automatically by the algorithm 
                described in Section 7.3 of the JavaServer Pages Specification 
                (version 2.1).
            </description>
            <location chapter="9" section="4.0"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:118</id>
    <description>
        If the f:actionListener tag is not nested inside a UIComponent custom 
        action, or the UIComponent implementation class does not correctly 
        implement ActionSource, or the specified listener class does not 
        implement jakarta.faces.event.ActionListener, throw a JspException.
    </description>
    <location chapter="9" section="4.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:119</id>
    <description>
        If the f:convertDateTime tag is not nested inside a UIComponent custom 
        action, or the UIComponent implementation class does not correctly 
        implement ValueHolder, throw a JspException
    </description>
    <location chapter="9" section="4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:120</id>
    <description>
        The implementation class for f:convertDateTime must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:120.1</id>
            <description>
                Must extend jakarta.faces.webapp.ConverterTag.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:120.2</id>
            <description>
                createConverter() method must, if binding is non-null,
                call getValue() on it to obtain a reference to the
                Converter instance. If there is no exception thrown, and 
                binding.getValue() returned a non-null object that implements 
                jakarta.faces.convert.Converter, it must then cast the returned 
                instance to jakarta.faces.convert.DateTimeConverter and configure 
                its properties based on the specified attributes for this custom 
                action, and return the configured instance. 
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:120.3</id>
            <description>
                If the createConverter()method has an exception thrown, rethrow 
                the exception as a JspException.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:120.4</id>
            <description>
                If dateStyle is specified but timeStyle is not specified, 
                default to date.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:120.5</id>
            <description>
                If dateStyle is not specified but timeStyle is specified, 
                default to time.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:120.6</id>
            <description>
                If both dateStyle and timeStyle are specified, default to both.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:121</id>
    <description>
        If the f:convertNumber tag is not nested inside a UIComponent custom 
        action, or the UIComponent implementation class does not correctly 
        implement ValueHolder, throw a JspException.
    </description>
    <location chapter="9" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:122</id>
    <description>
        The implementation class for the f:convertNumber action must meet the 
        following requirements:
    </description>
    <location chapter="9" section="4.4"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:122.1</id>
            <description>
                Must extend jakarta.faces.webapp.ConverterTag.
            </description>
            <location chapter="9" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:122.2</id>
            <description>
                The createConverter() method, If binding is non-null, call 
                binding.getValue() to obtain a reference to the Converter 
                instance. If there is no exception thrown, and 
                binding.getValue() returned a non-null object that implements 
                jakarta.faces.convert.Converter, it must then cast the returned 
                instance to jakarta.faces.convert.NumberConverter and configure 
                its properties based on the specified attributes for this custom 
                action, and return the configured instance. 
            </description>
            <location chapter="9" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:122.3</id>
            <description>
                If there was an exception thrown, rethrow the exception as a
                JspException.
            </description>
            <location chapter="9" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:122.4</id>
            <description>
                Call the createConverter() method of the Application 
                instance for this application, passing converter id 
                &#8220;jakarta.faces.Number&#8221;. If the binding attribute was also set, 
                store the converter instance by calling binding.setValue(). It 
                must then cast the returned instance to 
                jakarta.faces.convert.NumberConverter and configure its properties
                based on the specified attributes for this custom action, and 
                return the configured instance.
            </description>
            <location chapter="9" section="4.4"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:123</id>
    <description>
        If this tag is not nested inside a UIComponent custom action, or the
        UIComponent implementation class does not correctly implement
        ValueHolder, throw a JspException.
    </description>
    <location chapter="9" section="4.5"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:124</id>
    <description>
        The implementation class for f:converter action must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:124.1</id>
            <description>
                Must extend jakarta.faces.webapp.ConverterJspTag.
            </description>
            <location chapter="9" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:124.2</id>
            <description>
                The createConverter() method must, If binding is non-null, call 
                binding.getValue() to obtain a reference to the Converter 
                instance. If there is no exception thrown, and 
                binding.getValue() returned a non-null object that implements 
                jakarta.faces.convert.Converter, register it by calling 
                setConverter(). If there was an exception thrown, rethrow 
                the exception as a JspException.
            </description>
            <location chapter="9" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:124.3</id>
            <description>
                Use the converterId attribute if the converter instance could 
                not be created from the binding attribute. If the converterId 
                attribute is set, call the createConverter() method of the 
                Application instance for this application, passing converter id
                specified by their converterId attribute. If the binding 
                attribute was also set, store the converter instance by calling 
                binding.setValue(). Register the converter instance by calling 
                setConverter(). If there was an exception thrown, rethrow the 
                exception as a JspException.
            </description>
            <location chapter="9" section="4.5"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:125</id>
    <description>
        f:facet tag must be nested inside a UIComponent custom action.
        Exactly one UIComponent custom action must be nested inside this custom action
        (although the nested component custom action could itself have nested children).
    </description>
    <location chapter="9" section="4.6"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:126</id>
    <description>
        Exactly one UIComponent custom action must be nested inside this custom 
        action(although the nested component custom action could itself have 
        nested children).
    </description>
    <location chapter="9" section="4.6"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:127</id>
    <description>
        The implementation class of the f:facet tag must be, or extend, 
        jakarta.faces.webapp.FacetTag.
    </description>
    <location chapter="9" section="4.6"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:128</id>
    <description>
        f:loadBundle tag must be nested inside an f:view tag custom action.
    </description>
    <location chapter="9" section="4.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:129</id>
    <description>
        f:param tag must be nested inside a UIComponent custom action.
    </description>
    <location chapter="9" section="4.8"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:130</id>
    <description>
        The implementation class for f:param tag this action must meet the 
        following requirements:
    </description>
    <location chapter="9" section="4.8"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:130.1</id>
            <description>
                Must extend jakarta.faces.UIComponentELTag.
            </description>
            <location chapter="9" section="4.8"/>
        </assertion>  
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:130.2</id>
            <description>
                The getComponentType() method must return &#8220;Parameter&#8221;.
            </description>
            <location chapter="9" section="4.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:130.3</id>
            <description>
                The getRendererType() method must return null.
            </description>
            <location chapter="8" section="4.8"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:131</id>
    <description>
        f:phaseListener tag must be nested inside a UIViewRoot custom action.
    </description>
    <location chapter="9" section="4.9"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:132</id>
    <description>
        The specified listener class for f:phaseListener must implement 
        jakarta.faces.event.PhaseListener.
    </description>
    <location chapter="9" section="4.9"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:133</id>
    <description>
        type and/or binding must be specified for the phaseListener impl.
    </description>
    <location chapter="9" section="4.9"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:134</id>
    <description>
        f:selectItem must be nested inside a UIComponent custom action
        that creates a UISelectMany or UISelectOne component instance.
    </description>
    <location chapter="9" section="4.10"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:135</id>
    <description>
        The implementation class for this action must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.10"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:135.1</id>
            <description>
                Must extend jakarta.faces.UIComponentELTag.
            </description>
            <location chapter="9" section="4.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:135.2</id>
            <description>
                The getComponentType() method must return &#8220;SelectItem&#8221;.
            </description>
            <location chapter="9" section="4.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:135.3</id>
            <description>
                The getRendererType() method must return null.
            </description>
            <location chapter="9" section="4.10"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:136</id>
    <description>
        Must be nested inside a UIComponent custom action that creates a 
        UISelectMany or UISelectOne component instance.
    </description>
    <location chapter="9" section="4.11"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:137</id>
    <description>
        The implementation class for the f:selectItems action must meet
        the following requirements:
    </description>
    <location chapter="9" section="4.11"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:137.1</id>
            <description>
                Must extend jakarta.faces.UIComponentELTag.
            </description>
            <location chapter="9" section="4.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:137.2</id>
            <description>
                The getComponentType() method must return 
                &#8220;jakarta.faces.SelectItems&#8221;.
            </description>
            <location chapter="9" section="4.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:137.3</id>
            <description>
                The getRendererType() method must return null.
            </description>
            <location chapter="9" section="4.11"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:138</id>
    <description>
        f:setPropertyActionListener must be nested inside a UIComponent custom 
        action.
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:139</id>
    <description>
        The corresponding UIComponent implementation class for 
        f:setPropertyActionListener must implement ActionSource, and therefore 
        define a public addActionListener() method that accepts an 
        ActionListener parameter.        
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:140</id>
    <description>
        The tag implementation must only create and register the ActionListener 
        instance the first time the component for this tag is created
    </description>
    <location chapter="" section=""/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:141</id>
    <description>
        When the listener executes, call getValue() on the "value" 
        ValueExpression. Pass the result to a call to setValue() on the "target"
        ValueExpression
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:142</id>
    <description>
        This tag creates no output to the page currently being created. It is 
        used solely for the side effect of ActionListener creation and addition.
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:143</id>
    <description>
        If this tag is not nested inside a UIComponent custom action, or the 
        UIComponent implementation class does not correctly implement 
        ActionSource, or the specified listener class does not implement
        jakarta.faces.event.ActionListener, throw a JspException.
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:144</id>
    <description>
        f:subview must be nested inside a f:view custom action although this 
        custom action might be in a page that is including the page containing
        the f:subview custom action.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:145</id>
    <description>
        f:subview must not contain an f:view custom action.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:146</id>
    <description>
        f:subview must have an id attribute whose value is unique within the 
        scope of the parent naming container.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:147</id>
    <description>
        The implementation class for f:subview must extend 
        jakarta.faces.UIComponentELTag.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:148</id>
    <description>
        The implementation class's getComponentType() method must return
        &#8220;NamingContainer&#8221;.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:149</id>
    <description>
        The implementation class's getRendererType() method must return null.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:150</id>
    <description>
        If the f:validateDoubleRange tag is not nested inside a UIComponent
        custom action, or the UIComponent implementation class does not 
        correctly implement EditableValueHolder throw a JspException.
    </description>
    <location chapter="9" section="4.14"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:151</id>
    <description>
        The implementation class for the f:validateDoubleRange action must meet
        the following requirements:
    </description>
    <location chapter="9" section="4.14"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:151.1</id>
            <description>
                Must extend jakarta.faces.webapp.ValidatorTag.
            </description>
            <location chapter="9" section="4.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:151.2</id>
            <description>
                The createValidator() method must, If binding is non-null, 
                create a ValueBinding by invoking 
                Application.createValueExpression() with binding as the 
                expression argument, and Validator.class as the expectedType 
                argument.
            </description>
            <location chapter="9" section="4.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:151.3</id>
            <description>
                use the validatorId if the validator instance could not be 
                created from the binding attribute.
            </description>
            <location chapter="9" section="4.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:151.4</id>
            <description>
                If there is an exception thrown, rethrow the exception as a
                JspException.
            </description>
            <location chapter="9" section="4.14"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:152</id>
    <description>
        If the f:validateLength tag is not nested inside a UIComponent custom 
        action, or the UIComponent implementation class does not correctly
        implement EditableValueHolder, throw a JspException.
    </description>
    <location chapter="9" section="4.15"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:153</id>
    <description>
        The implementation class for this action must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.15"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:153.1</id>
            <description>
                Must extend jakarta.faces.webapp.ValidatorTag.
            </description>
            <location chapter="9" section="4.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:153.2</id>
            <description>
                If binding is non-null, create a ValueExpression by invoking
                Application.createValueExpression() with binding as the 
                expression argument, and Validator.          
            </description>
            <location chapter="9" section="4.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:153.3</id>
            <description>
                Use the validatorId if the validator instance could not be 
                created from the binding attribute. Call the createValidator() 
                method of the Application instance for this application,
            </description>
            <location chapter="9" section="4.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:153.4</id>
            <description>
                If there was an exception thrown, rethrow the exception
                as a JspException.          
            </description>
            <location chapter="9" section="4.15"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:154</id>
    <description>
        f:validateLongRange must be nested inside a EditableValueHolder custom 
        action whose value is (or is convertible to) a long.
    </description>
    <location chapter="9" section="4.16"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:155</id>
    <description>
        f:validateLongRange must specify either the maximum attribute, the 
        minimum attribute, or both.
    </description>
    <location chapter="9" section="4.16"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:156</id>
    <description>
        For f:validateLongRange if both limits are specified, the maximum limit 
        must be greater than the minimum limit.
    </description>
    <location chapter="9" section="4.16"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:157</id>
    <description>
        If the f:validateLongRange tag is not nested inside a UIComponent custom
        action, or the UIComponent implementation class does not correctly 
        implement EditableValueHolder, throw a JspException
    </description>
    <location chapter="9" section="4.16"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:158</id>
    <description>
        The implementation class for the f:validateLongRange action must meet 
        the following requirements:
    </description>
    <location chapter="9" section="4.16"/>
    <sub-assertions>        
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:158.1</id>
            <description>
                Must extend jakarta.faces.webapp.ValidatorTag.
            </description>
            <location chapter="9" section="4.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:158.2</id>
            <description>
                The createValidator() method must, if binding is non-null,
                create a ValueExpression by invoking
                Application.createValueExpression() with binding as the 
                expression argument, and Validator.
            </description>
            <location chapter="9" section="4.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:158.3</id>
            <description>
                The createValidator() method must, use the validatorId if the
                validator instance could not be created from the binding 
                attribute.
            </description>
            <location chapter="9" section="4.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:158.4</id>
            <description>
                If there is an exception thrown, rethrow the exception as a
                JspException
            </description>
            <location chapter="9" section="4.16"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:159</id>
    <description>
        f:validator tag must be nested inside a UIComponent custom action whose 
        component class implements EditableValueHolder.
    </description>
    <location chapter="9" section="4.17"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:160</id>
    <description>
        validatorId and/or binding must be specified.
    </description>
    <location chapter="9" section="4.17"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:161</id>
    <description>
        If the f:validator tag is not nested inside a UIComponent custom action, 
        or the UIComponent implementation class does not correctly implement
        EditableValueHolder throw a JspException.
    </description>
    <location chapter="9" section="4.17"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:162</id>
    <description>
        The implementation class for the f:validator action must meet the 
        following requirements:
    </description>
    <location chapter="9" section="4.17"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:162.1</id>
            <description>
                Must extend jakarta.faces.webapp.ValidatorJspTag.
            </description>
            <location chapter="9" section="4.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:162.2</id>
            <description>
                The createValidator() method must, if binding is non-null, 
                call binding.getValue() to obtain a reference to the
                Validator instance.
            </description>
            <location chapter="9" section="4.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:162.3</id>
            <description>
                The createValidator() method must, use the validatorId attribute 
                if the validator instance could not be created from the binding 
                attribute.
            </description>
            <location chapter="9" section="4.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:162.4</id>
            <description>
                The createValidator() method must, If there was an exception 
                thrown, rethrow the exception as a JspException.
            </description>
            <location chapter="9" section="4.17"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:163</id>
    <description>
        f:valueChangeListener must be nested inside a UIComponent custom action.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:164</id>
    <description>
        The corresponding UIComponent implementation class for 
        f:valueChangeListener must implement EditableValueHolder, and therefore 
        define a public  addValueChangeListener() method that accepts an 
        ValueChangeListener parameter.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:165</id>
    <description>
        The specified listener class for f:valueChangeListener must implement 
        jakarta.faces.event.ValueChangeListener.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:166</id>
    <description>
        type and/or binding must be specified.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:167</id>
    <description>
        If this tag is not nested inside a UIComponent custom action, or the
        UIComponent implementation class does not correctly implement
        EditableValueHolder, or the specified listener class does not implement
        jakarta.faces.event.ValueChangeListener, throw a JspException.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:168</id>
    <description>
        f:verbatim must be implemented as a UIComponentBodyTag.
    </description>
    <location chapter="9" section="4.19"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:169</id>
    <description>
        The rendererType property for the f:verbatim tag's UIOutput component
        must be set to &#8220;jakarta.faces.Text&#8221;
    </description>
    <location chapter="9" section="4.19"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:170</id>
    <description>
        The f:verbatim tag's transient property must be set to true.
    </description>
    <location chapter="9" section="4.19"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:171</id>
    <description>
        The value (or value binding, if it is an expression) of the escape 
        attribute must be passed on to the renderer as the value the escape 
        attribute on the UIOutput component.
    </description>
    <location chapter="9" section="4.19"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:172</id>
    <description>
        Any JSP-created response using actions from the JSF Core Tag Library, 
        as well as actions extending jakarta.faces.webapp.UIComponentELTag from 
        other tag libraries, must be nested inside an occurrence of the 
        f:view action.
    </description>
    <location chapter="9" section="4.20"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:173</id>
    <description>
        The implementation class for the f:view action must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.20"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:173.1</id>
            <description>
                Must extend jakarta.faces.UIComponentBodyTag.
            </description>
            <location chapter="9" section="4.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:173.2</id>
            <description>
                The getComponentType() method must return &#8220;ViewRoot&#8221;.
            </description>
            <location chapter="9" section="4.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:173.3</id>
            <description>
                The getRendererType() method must return null.
            </description>
            <location chapter="9" section="4.20"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:174</id>
    <description>
        The tag library descriptor for this tag library must meet the following
        requirements:
    </description>
    <location chapter="9" section="5.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:174.1</id>
            <description>
                Must declare a tag library version (tlib-version) value of 
                1.2.          
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:174.2</id>
            <description>
                Must declare a URI tag value of 
                http://java.sun.com/jsf/html.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:174.3</id>
            <description>
                Must be included in the META-INF directory of a JAR file 
                containing the corresponding implementation classes, suitable 
                for inclusion with a web application, such that the tag library
                descriptor will be located automatically by the algorithm
                described in Section 7.3  of the JavaServer Pages Specification
                (version 1.2).
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:175</id>
    <description>
        The custom actions defined in this tag library must specify the
        following return values for the getComponentType() and getRendererType()
        methods, respectively:
    </description>
    <location chapter="9" section="5.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.1</id>
            <description>
                Action column: 
                getComponentType()- returns jakarta.faces.Column
                getRendererType()- returns (null)*
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.2</id>
            <description>
                Action commandButton:
                getComponentType()- returns jakarta.faces.HtmlCommandButton
                getRendererType()- returns jakarta.faces.Button
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.3</id>
            <description>
                Action commandLink:
                getComponentType()- returns jakarta.faces.HtmlCommandLink
                getRendererType()- returns jakarta.faces.Link
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.4</id>
            <description>
                Action dataTable:
                getComponentType()- returns jakarta.faces.HtmlDataTable
                getRendererType()- returns jakarta.faces.Table
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.5</id>
            <description>
                Action form:
                getComponentType()- returns jakarta.faces.HtmlForm
                getRendererType()- returns jakarta.faces.Form
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.6</id>
            <description>
                Action graphicImage:
                getComponentType()- returns jakarta.faces.HtmlGraphicImage
                getRendererType()- returns jakarta.faces.Image
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.7</id>
            <description>
                Action inputHidden:
                getComponentType()- returns jakarta.faces.HtmlInputHidden
                getRendererType()- returns jakarta.faces.Hidden
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.8</id>
            <description>
                Action inputSecret:
                getComponentType()- returns jakarta.faces.HtmlInputSecret
                getRendererType()- returns jakarta.faces.Secret
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.9</id>
            <description>
                Action inputSecret:
                getComponentType()- returns jakarta.faces.HtmlInputSecret
                getRendererType()- returns jakarta.faces.Secret
            </description>
            <location chapter="" section=""/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.10</id>
            <description>
                Action inputText:
                getComponentType()- returns jakarta.faces.HtmlInputText
                getRendererType()- returns jakarta.faces.Text
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.11</id>
            <description>
                Action inputTextarea:
                getComponentType()- returns jakarta.faces.HtmlInputTextarea
                getRendererType()- returns jakarta.faces.Textarea
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.12</id>
            <description>
                Action message:
                getComponentType()- returns jakarta.faces.HtmlMessage
                getRendererType()- returns jakarta.faces.Message
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.13</id>
            <description>
                Action messages:
                getComponentType()- returns jakarta.faces.HtmlMessages
                getRendererType()- returns jakarta.faces.Messages
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.14</id>
            <description>
                Action outputFormat:
                getComponentType()- returns jakarta.faces.HtmlOutputFormat
                getRendererType()- returns jakarta.faces.Format
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.15</id>
            <description>
                Action outputLabel:
                getComponentType()- returns jakarta.faces.HtmlOutputLabel
                getRendererType()- returns jakarta.faces.Label
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.16</id>
            <description>
                Action outputLink:
                getComponentType()- returns jakarta.faces.HtmlOutputLink
                getRendererType()- returns jakarta.faces.Link
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.17</id>
            <description>
                Action outputText:
                getComponentType()- returns jakarta.faces.HtmlOutputText
                getRendererType()- returns jakarta.faces.Text
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.18</id>
            <description>
                Action panelGrid:
                getComponentType()- returns jakarta.faces.HtmlPanelGrid
                getRendererType()- returns jakarta.faces.Grid
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.19</id>
            <description>
                Action panelGroup:
                getComponentType()- returns jakarta.faces.HtmlPanelGroup
                getRendererType()- returns jakarta.faces.Group
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.20</id>
            <description>
                Action selectBooleanCheckbox:
                getComponentType()- 
                returns jakarta.faces.HtmlSelectBooleanCheckbox
                getRendererType()- returns jakarta.faces.Checkbox
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.21</id>
            <description>
                Action selectManyListbox:
                getComponentType()- returns jakarta.faces.HtmlSelectManyListbox
                getRendererType()- returns jakarta.faces.Listbox
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.22</id>
            <description>
                Action selectManyMenu:
                getComponentType()- returns jakarta.faces.HtmlSelectManyMenu
                getRendererType()- returns jakarta.faces.Menu
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.23</id>
            <description>
                Action selectOneListbox:
                getComponentType()- returns jakarta.faces.HtmlSelectOneListbox
                getRendererType()- returns jakarta.faces.Listbox
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.24</id>
            <description>
                Action selectOneMenu:
                getComponentType()- returns jakarta.faces.HtmlSelectOneMenu
                getRendererType()- returns jakarta.faces.Menu
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:175.25</id>
            <description>
                Action selectOneRadio:
                getComponentType()- returns jakarta.faces.HtmlSelectOneRadio
                getRendererType()- returns jakarta.faces.Radio
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>        
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:176</id>
    <description>
        The tag library descriptor for this tag library (and the corresponding 
        tag handler implementation classes) must meet the following
        requirements:
    </description>
    <location chapter="9" section="5.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:176.1</id>
            <description>
                The attributes for the tags, both in the TLD and in the 
                associated tag handlers, must conform exactly to the type, name, 
                and description given in the TLDDocs for the
                html_basic tag library.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:176.2</id>
            <description>
                If the type of the attribute is jakarta.el.MethodExpression, the 
                TLD for the attribute must contain a &lt;deferred-method&gt; 
                with a nested &lt;method-signature&gt;, inside of which is the
                method signature for that MethodExpression, as given in the 
                TLDDocs. The JavaBeans setter method in the tag handler for the 
                tag must  be of type jakarta.el.MethodExpression.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:176.3</id>
            <description>
                Any attributes listed in the TLDDocs with a request-time value 
                of true must specify an &lt;rtexprvalue&gt; of true in the TLD.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:176.4</id>
            <description>
                The following action must be taken to handle the value of the 
                converter property. If isLiteralText() on the converter property
                returns true, get the value of the property and treat it as a 
                converterId by passing it as the argument to the 
                createConverter() method of the Application instance for this 
                webapp, then pass the created Converter to the setConverter() 
                method of the component for this tag. If isLiteralText() on the 
                converter property returns false, call setValueExpression() on 
                the component, passing &#8220;converter&#8221; as the name of the
                ValueExpression and the ValueExpression instance as the value.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:176.5</id>
            <description>
                For a non-null action attribute on custom actions related to 
                ActionSource2 components (commandButton, commandLink), the 
                setProperties() method of the tag handler implementation class 
                must pass the value of the action attribtue, which is a 
                MethodExpression, to the component&#8217;s setActionExpression()
                method.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:176.6</id>
            <description>
                For other non-null attributes that correspond to 
                MethodExpression attributes on the underlying components 
                (actionListener, validator, valueChangeListener), the 
                setProperties() method of the tag handler implementation class 
                must store that instance as the value of the corresponding 
                component property.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:176.7</id>
            <description>
                For any non-null id, scope, or var attribute, the 
                setProperties() method of the tag handler implementation class
                must simply set the value of the corresponding component 
                attribute.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:176.8</id>
            <description>
                For all other non-null attributes, the setProperties() of the 
                tag handler implementation class method must, if the 
                attribute.isLiteralText() returns true, set the corresponding
                attribute on the underlying component (after performing any
                necessary type conversion). Otherwise, call the 
                setValueExpression() method on the underlying component,
                passing the attribute name and the ValueExpression&#8216; instance as 
                parameters.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
    </sub-assertions>
</assertion>
        
<!-- =============================== Chapter 10 ============================ -->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:177</id>
    <description>
        Facelet pages are authored in XHTML. The runtime must support all XHTML
        pages that confirm with the XHTML-1.0-Transitional DTD, as described at
        http://www.w3.org/TR/xhtml1/#a_dtd_XHTML-1.0-Transitional
    </description>
    <location chapter="10" section="3.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:178</id>
    <description>
        The runtime must support the following syntax for making the tags in a
        tag library available for use in a Facelet page.
        &lt;html xmlns="http://www.w3.org/1999/xhtml"
                 xmlns:prefix="namespace_uri"&gt;
    </description>
    <location chapter="10" section="3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:179</id>
    <description>
        The runtime must support the following syntax for making the tags in a
        tag library available for use in a Facelet page
    </description>
    <location chapter="10" section="3.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:179.1</id>
            <description>
                Via declaration in the web.xml, as specified in Section11.1.3
                &#8220;Application Configuration Parameters&#8221;
            </description>
            <location chapter="10" section="3.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:179.2</id>
            <description>
                Via auto discovery by placing the tag library discriptor file
                within a jar on the web application classpath, naming the
                file so that it ends with &#8220;.taglib.xml&#8221;, without the quotes,
                and placing the file in the META-INF directory in the jar file
            </description>
            <location chapter="10" section="3.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:180</id>
    <description>
         Failure to parse, process and otherwise interpret any of the tag
         library files discovered must cause the application to fail to deploy
         and must cause an informative error message to be logged.
    </description>
    <location chapter="10" section="3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:181</id>
    <description>
         The runtime must support the following two ways of declaring a
         composite component library.
    </description>
    <location chapter="10" section="3.3.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:181.1</id>
            <description>
                If a facelet taglibrary is declared in an XHTML page with a
                namespace starting with the string
                &#8220;http://java.sun.com/jsf/composite/&#8221; (without the quotes),
                the remainder of the namespace declaration is taken as the name
                of a resource library as described in Section2.6.1.4 &#8220;Libraries
                of Localized and Versioned Resources
            </description>
            <location chapter="10" section="3.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:181.2</id>
            <description>
                the runtime must also support the &lt;composite-library-name&gt;
                element.
            </description>
            <location chapter="10" section="3.3.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:182</id>
    <description>
         If, during the process of building the view, the facelet runtime
         encounters an element in the page using the prefix for the namespace of
         a composite component library, the runtime must create a Resource
         instance with a library property equal to the library name derived in
         Section10.3.3.1 &#8220;Declaring a composite component library for use in a
         Facelet page&#8221;and call the variant of application.createComponent() that
         takes a Resource.
    </description>
    <location chapter="10" section="3.3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:183</id>
    <description>
         After causing the top level component to be instantiated, the runtime
         must create a UIComponent with component- family of jakarta.faces.Panel
         and renderer-type jakarta.faces.Group to be installed as a facet of the
         top level component under the facet name
         UIComponent.COMPOSITE_FACET_NAME.
    </description>
    <location chapter="10" section="3.3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:184</id>
    <description>
        The runtime must support the use of composite: tag library in the
        defining page pointed to by the Resource derived as specified in
        Section10.3.3.2 &#8220;Creating an instance of a top level component&#8221;
    </description>
    <location chapter="10" section="3.3.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:185</id>
    <description>
        The runtime must ensure that all UIComponent children in the composite
        component definition within the defining page are placed as children of
        the UIComponent.COMPOSITE_FACET_NAME facet of the top level facet
    </description>
    <location chapter="10" section="3.3.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:186</id>
    <description>
        The runtime must ensure that all such attributes are copied to the
        attributes map of the top level component instance in the following
        manner.
    </description>
    <location chapter="10" section="3.3.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:186.1</id>
            <description>
                Obtain a reference to the ExpressionFactory, for discussion
                called expressionFactory.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:186.2</id>
            <description>
                Let the value of the attribute in the using page be value.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:186.3</id>
            <description>
                If value is &#8220;id&#8221; or &#8220;binding&#8221; without the quotes, skip to the
                next attribute.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:186.4</id>
            <description>
                f the value of the attribute starts with &#8220;#{&#8220; (without the
                quotes) call expressionFactory.createValueExpression(elContext,
                value, Object.class)
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:186.5</id>
            <description>
                If the value of the attribute does not start with &#8220;#{&#8220;, call
                expressionFactory.createValueExpression(value, Object.class)
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:186.6</id>
            <description>
                If there already is a key in the map for value, inspect the type
                of the value at that key. If the type is MethodExpression take
                no action.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:187</id>
    <description>
          If the type of the attribute is a MethodExpression, the code that
          takes the value of the attribute and creates an actual
          MethodExpression instance around it must take the following special
          action.
    </description>
    <location chapter="10" section="3.3.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:187.1</id>
            <description>
                Obtain a reference to the current composite component by calling
                UIComponent.getCurrentCompositeComponent().
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:187.2</id>
            <description>
                Look in the attribute of the component for a key under the value
                attrName.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:187.3</id>
            <description>
                There must be a value and it must be of type MethodExpression.
                If either of these conditions are false allow the ensuing
                exception to be thrown.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:187.4</id>
            <description>
                Call invoke() on the discovered MethodExpression, passing the
                arguments passed to our invoke() method.
            </description>
            <location chapter="10" section="3.3.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:188</id>
    <description>
        The String value for identifiers specified for execute and render may be
        specified as a search expression as outlined in the JavaDocs for
        UIComponent.findComponent.The implementation must resolve these
        identifiers as specified for UIComponent.findComponent.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:189</id>
    <description>
        A TagAttibuteException must be thrown if an &#8220;event&#8221; attribute value is
        specified that does not match the events supported by the component
        type.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:190</id>
    <description>
        The event attribute that is specified, must be one of the events
        returned from the ClientBehaviorHolder component implementation of
        ClientBehaviorHolder.getEventNames.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:191</id>
    <description>
        If an event is not specified the value returned from the component
        implementation of ClientBehaviorHolder.getDefaultEventName must be used.
        If the event is still not determined, a TagAttributeException must be
        thrown.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:192</id>
    <description>
        If an event is not specified the value returned from the component
        implementation of ClientBehaviorHolder.getDefaultEventName must be used.
        If the event is still not determined, a TagAttributeException must be
        thrown.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:193</id>
    <description>
        The "Description" tag handler must create an instance of
        jakarta.faces.component.behavior.AjaxBehavior instance using the tag
        attribute values.
    </description>
    <location chapter="10" section="4.1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:194</id>
    <description>
        If teh "Description" tag is nested within a single ClientBehaviorHolder
        component:
    </description>
    <location chapter="10" section="4.1.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:194.1</id>
            <description>
                If the event attribute is not specified, determine the event by
                calling the component&#8217;s getDefaultEventName method. If that
                returns null, throw an exception.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:194.2</id>
            <description>
                If the event attribute is specified, ensure that it is a valid
                event - that is one of the events contained in the Collection
                returned from getEventNames method. If it does not exist in this
                Collection, throw an exception.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:194.3</id>
            <description>
                Add the AjaxBehavior to the component by calling the addBehavior
                method, passing the event and AjaxBehavior instance.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:195</id>
    <description>
        When the VDL calls for the creation of a UIComponent instance, after
        calling Application.createComponent() to instantiate the component
        instance, and after calling setRendererType() on the newly instantiated
        component instance, the following action must be taken.
    </description>
    <location chapter="10" section="5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:195.1</id>
            <description>
                Obtain the Renderer for this component. If no Renderer is
                present, ignore the following steps.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:195.2</id>
            <description>
                Call getClass() on the Renderer instance and inspect if the
                ListenerFor annotation is present. If so, inspect if the
                Renderer instance implements ComponentSystemEventListener. If
                neither of these conditions are true, ignore the following
                steps.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:195.3</id>
            <description>
                Obtain the value of the systemEventClass() property of the
                ListenerFor annotation on the Renderer instance.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:195.4</id>
            <description>
                Call subscribeToEvent() on the UIComponent instance from which
                the Renderer instance was obtained, using the systemEventClass
                from the annotation as the second argument, and the Renderer
                instance as the third argument.
            </description>
            <location chapter="10" section="4.1.1"/>
        </assertion>
    </sub-assertions>
</assertion>
        

<!-- =============================== Chapter 11 ============================ -->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:196</id>
    <description>
        This servlet must be defined, in the deployment descriptor of an
        application that wishes to employ this portable mechanism.
        The servlet name, denoted as faces-servlet-name above, may be any
        desired value; however, the same value must be used as teh servlet-name
        in the servlet mapping.
    </description>
    <location chapter="11" section="1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:197</id>
    <description>
        JSF implementations must support web application that define a 
        &lt;servlet-mapping&gt; that maps any valid url-pattern to the
        FacesServlet.
    </description>
    <location chapter="11" section="1.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:198</id>
    <description>
        JSF implementations are required to support the following application
        configuration parameter names:
    </description>
    <location chapter="11" section="1.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.1</id>
            <description>
                jakarta.faces.CONFIG_FILES -- Comma-delimited list of 
                context-relative resource paths under which the JSF 
                implementation will look for application configuration
                resources  before loading a configuration resource named 
                &#8220;/WEB-INF/faces-config.xml&#8221;
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.2</id>
            <description>
                jakarta.faces.DEFAULT_SUFFIX -- The default suffix for 
                extension-mapped resources that contain JSF components. If not 
                specified, the default value &#8220;.jsp&#8221; must be used.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.3</id>
            <description>
                jakarta.faces.FACELETS_SUFFIX -- Allow the web application to
                define an alternate suffix for Facelet based XHTML pages
                containing JSF content. See the javadocs for the symbolic
                constant ViewHandler.FACELETS_SUFFIX_PARAM_NAME for the
                complete specification.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.4</id>
            <description>
                jakarta.faces.LIFECYCLE_ID -- Lifecycle identifier of the 
                Lifecycle instance to be used when processing JSF requests for 
                this web application. If not specified, the JSF default 
                instance, identified by LifecycleFactory.DEFAULT_LIFECYCLE, must 
                be used.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.5</id>
            <description>
                jakarta.faces.STATE_SAVING_METHOD -- The location where state 
                information is saved. Valid values are &#8220;server&#8221; (typically saved 
                in HttpSession) and &#8220;client (typically saved as a hidden field 
                in the subsequent form submit). If not specified, the default 
                value &#8220;server&#8221; must be used.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.6</id>
            <description>
                jakarta.faces.PARTIAL_STATE_SAVING --The ServletContext init
                parameter consulted by the runtime to determine if the partial
                state saving mechanism should be used. If undefined, the runtime
                must determine the version level of the application.
            </description>
            <location chapter="11" section="1.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:198.6.1</id>
                    <description>
                        For applications versioned at 1.2 and under, the runtime
                        must not use the partial state saving mechanism.
                    </description>
                    <location chapter="11" section="1.3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:198.6.2</id>
                    <description>
                        For applications versioned at 2.0 and above, the runtime
                        must use the partial state saving mechanism.
                    </description>
                    <location chapter="11" section="1.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.7</id>
            <description>
                jakarta.faces.FULL_STATE_SAVING_VIEW_IDS -- The runtime must
                interpret the value of this parameter as a comma separated list
                of view IDs, each of which must have their state saved using the
                state saving mechanism specified in JSF 1.2.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.8</id>
            <description>
                jakarta.faces.PROJECT_STAGE -- A human readable string describing
                where this particular JSF application is in the software
                development lifecycle.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.9</id>
            <description>
                jakarta.faces.DISABLE_FACELET_JSF_VIEWHANDLER -- If this param is
                set, and calling toLowerCase().equals("true") on a String
                representation of its value returns true, the default
                ViewHandler must behave as specified in the latest 1.2 version
                of this specification.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.10</id>
            <description>
                jakarta.faces.FACELETS_LIBRARIES -- If this param is set, the
                runtime must interpret it as a semicolon (;) separated list of
                paths, starting with &#8220;/&#8221; (without the quotes).
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.11</id>
            <description>
                jakarta.faces.FACELETS_VIEW_MAPPINGS -- If this param is set, the
                runtime must interpret it as a semicolon (;) separated list of
                strings that is used to forcibly declare that certain pages in
                the application must be interpreted as using Facelets,
                regardless of their extension.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.12</id>
            <description>
                jakarta.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL --
                If this param is set, and calling toLowerCase().equals("true")
                on a String representation of its value returns true, any
                implementation of UIInput.validate() must take the following
                additional action. context parameter value is true (ignoring
                case), and UIInput.getSubmittedValue() returns a zero-length
                String call UIInput.setSubmittedValue(null) and continue
                processing using null as the current submitted value
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.13</id>
            <description>
                jakarta.faces.DATETIMECONVERTER_DEFAULT_TIMEZONE_IS_SYSTEM_TIMEZO
                NE -- If this param is set, and calling toLowerCase().equals(
                "true") on a String representation of its value returns true,
                Application.createConverter() must guarantee that the default
                for the timezone of all jakarta.faces.convert.DateTimeConverter
                instances must be equal to TimeZone.getDefault() instead of
                &#8220;GMT&#8221;.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.14</id>
            <description>
                jakarta.faces.VALIDATE_EMPTY_FIELDS -- If this param is set, and
                calling toLowerCase().equals("true") on a String representation
                of its value returns true, all submitted fields will be
                validated
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:198.15</id>
            <description>
                jakarta.faces.validator.DISABLE_DEFAULT_BEAN_VALIDATOR -- If this
                param is set, and calling toLowerCase().equals("true") on a
                String representation of its value returns true, the runtime
                must not automatically add the validator with validator-id equal
                to the value of the symbolic constant
                jakarta.faces.validator.VALIDATOR_ID to the list of default
                validators.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:199</id>
    <description>
        JSF implementations must also include implementations of the several 
        factory classes. In order to be dynamically instantiated according to 
        the algorithm defined above, the factory implementation class must 
        include a public, no-arguments constructor.
    </description>
    <location chapter="11" section="2.6.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:200</id>
    <description>
        jakarta.faces.FactoryFinder implements the standard discovery algorithm
        for all factory objects specified in the JavaServer Faces APIs.
        For a given factory class name, a corresponding implementation class is
        searched for based on the following algorithm. Items are listed in order
        of decreasing search precedence:
    </description>
    <location chapter="11" section="2.6.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:200.1</id>
            <description>
                If a default JavaServer Faces configuration file
                (/WEB-INF/faces-config.xml) is bundled into the web application,
                and it contains a factory entry of the given factory class name,
                that factory class is used.
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:200.2</id>
            <description>
                If the JavaServer Faces configuration resource(s) named by the
                jakarta.faces.CONFIG_FILES ServletContext init parameter (if any)
                contain any factory entries of the given factory class name,
                those factories are used, with the last one taking precedence.
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:200.3</id>
            <description>
                If there are any META-INF/faces-config.xml resources bundled any
                JAR files in the web ServletContext&#8217;s resource paths, the
                factory entries of the given factory class name in those files
                are used, with the last one taking precedence.
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:200.4</id>
            <description>
                If a META-INF/services/{factory-class-name} resource is visible
                to the web application class loader for the calling application
                (typically as a result of being present in the manifest of a
                JAR file), its first line is read and assumed to be the name of
                the factory implementation class to use.
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:200.5</id>
            <description>
                If none of the above steps yield a match, the JavaServer Faces
                implementation specific class is used. 
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:201</id>
    <description>
        For each of the public static final String fields on the class
        FactoryFinder whose field names end with the string &#8220;_FACTORY&#8221;
        (without the quotes), the implementation must provide an implementation
        of the corresponding Factory class using the algorithm described earlier
        in this section.
    </description>
    <location chapter="11" section="2.6.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:202</id>
    <description>
        The FacesServlet implementation class must also declare two static
        public final String constants whose value is a context initialization 
        parameter that affects the behavior of the servlet
    </description>
    <location chapter="11" section="2.6.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:202.1</id>
            <description>
                CONFIG_FILES_ATTR -- the context initialization attribute that 
                may optionally contain a comma-delimited list of context 
                relative resources (in addition to /WEB-INF/facesconfig. xml 
                which is always processed if it is present) to be processed. 
                The value of this constant must be &#8220;jakarta.faces.CONFIG_FILES&#8221;.
            </description>
            <location chapter="11" section="2.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:202.2</id>
            <description>
                LIFECYCLE_ID_ATTR -- the lifecycle identifier of the Lifecycle 
                instance to be used for processing requests to this application,
                if an instance other than the default is required. The value of 
                this constant must be &#8220;jakarta.faces.LIFECYCLE_ID&#8221;.
            </description>
            <location chapter="11" section="2.6.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:203</id>
    <description>
        UIComponentELTag is an implementation of 
        javax.servlet.jsp.tagext.BodyTag, and must be the base class for any JSP
        custom action that corresponds to a JSF UIComponent.
    </description>
    <location chapter="11" section="2.6.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:204</id>
    <description>
        The faces implementation must now provide the attributetag class.
    </description>
    <location chapter="11" section="3.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:205</id>
    <description>
        the JSF implementation must process zero or more application 
        configuration resources, located according to the following algorithm:
    </description>
    <location chapter="11" section="4.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:205.1</id>
            <description>
                Search for all resources named &#8220;META-INF/faces-config.xml&#8221; in the
                ServletContext resource paths for this web application, and load 
                each as a JSF configuration resource (in reverse order of the 
                order in which they are returned by getResources() on the 
                current Thread&#8217;s ContextClassLoader).
            </description>
            <location chapter="11" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:205.2</id>
            <description>
                Check for the existence of a context initialization parameter 
                named jakarta.faces.CONFIG_FILES. If it exists, treat it as a 
                comma-delimited list of context relative resource paths 
                (starting with a &#8220;/&#8221;), and load each of the specfied resources.
            </description>
            <location chapter="11" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:205.3</id>
            <description>
                Check for the existence of a web application configuration 
                resource named &#8220;/WEBINF/faces-config.xml&#8221;, and load it if the 
                resource exists.
            </description>
            <location chapter="11" section="4.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:206</id>
    <description>
        The runtime must publish the
        jakarta.faces.event.PostConstructApplicationEvent immediately after all
        application configuration resources have been processed.
    </description>
    <location chapter="11" section="4.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:207</id>
    <description>
        XML parsing errors detected during the loading of an application
        resource file are fatal to application startup, and must cause the 
        application to not be made available by the container. 
    </description>
    <location chapter="11" section="4.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:208</id>
    <description>
        JSF implementations that are part of a Java EE technology compliant
        implementation are required to validate the application resource file 
        against the XML schema for structural correctness. The validation is not
        required for JSF implementations that are not part of a Java EE 
        technology-compliant implementation.
    </description>
    <location chapter="11" section="4.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:209</id>
    <description>
        Application configuration resources must conform to the XML schema
        shown in Appendix 1.1. In addition, they must include the following 
        schema declaration.
    </description>
    <location chapter="11" section="4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:210</id>
    <description>
        Application configuration resources that are written to run on JSF 2.0
        must include the following schema declaration...
    </description>
    <location chapter="11" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:211</id>
    <description>
        Application configuration resources that are written to run on JSF 1.2
        must include the following schema declaration...
    </description>
    <location chapter="11" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:212</id>
    <description>
        Application configuration resources that are written to run on JSF 1.1
        must include the following schema declaration...
    </description>
    <location chapter="11" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:213</id>
    <description>
        Application configuration resources that are written to run on JSF 1.0
        must include the following schema declaration...
    </description>
    <location chapter="11" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:214</id>
    <description>
        The runtime must support the decorator design pattern as specified
        below for the following artifacts.
    </description>
    <location chapter="11" section="4.6"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:215</id>
    <description>
        If an &lt;name&gt; element is present, it must be considered for the
        ordering of decoratable artifacts (unless the duplicate name exception
        applies, as described below).
    </description>
    <location chapter="11" section="4.7"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:215.1</id>
            <description>
                Absolute ordering: an &lt;absolute-ordering&gt; element in the
                applicationFacesConfig
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:215.2</id>
            <description>
                Relative ordering: an &lt;ordering&gt; element within a file in
                the applicationConfigurationResources
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:216</id>
    <description>
        The preceding example illustrates some, but not all, of the following
        principles.
    </description>
    <location chapter="11" section="4.7"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:216.1</id>
            <description>
                &lt;before&gt; means the document must be ordered before the
                document with the name matching the name specified within the
                nested &lt;name&gt; element.
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:216.2</id>
            <description>
                &lt;after&gt; means the document must be ordered after the
                document with the name matching the name specified within the
                nested &lt;name&gt; element.
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>JSF:SPEC:216.3</id>
            <description>
                There is a special element &lt;others /&gt; which may be included
                zero or one time within the &lt;before&gt; or &lt;after&gt; element,
                or zero or one time directly within the &lt;absolute-ordering&gt;
                element. The &lt;others /&gt; element must be handled as follows.
            </description>
            <location chapter="11" section="4.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:216.3.1</id>
                    <description>
                        If the &lt;before&gt; element contains a nested
                        &lt;others /&gt;, the document will be moved to the
                        beginning of the list of sorted documents.
                    </description>
                    <location chapter="11" section="4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:216.3.2</id>
                    <description>
                        If the &lt;after&gt; element contains a nested
                        &lt;others /&gt;, the document will be moved to the end of
                        the list of sorted documents.
                    </description>
                    <location chapter="11" section="4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:216.3.3</id>
                    <description>
                        Within a &lt;before&gt; or &lt;after&gt; element, if an
                        &lt;tothers /&gt; element is present, but is not the only
                        &lt;name&gt; element within its parent element, the other
                        elements within that parent must be considered in the
                        ordering process.
                    </description>
                    <location chapter="11" section="4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:216.3.4</id>
                    <description>
                        If the &lt;others /&gt; element appears directly within
                        the &lt;absolute-ordering&gt; element, the runtime must
                        ensure that any application configuration resources in
                        applicationConfigurationResources not explicitly named
                        in the &lt;absolute-ordering&gt; section are included at
                        that point in the processing order.
                    </description>
                    <location chapter="11" section="4.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:216.4</id>
            <description>
               If a faces-config file does not have an &lt;ordering&gt; or
               &lt;absolute-ordering&gt; element the artifacts are assumed to not
               have any ordering dependency.
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>JSF:SPEC:216.5</id>
            <description>
               If the runtime discovers circular references, an informative
               message must be logged, and the application must fail to deploy.
               Again, one course of action the user may take is to use absolute
               ordering in the applicationFacesConfig.
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:217</id>
    <description>
        If the &lt;faces-config&gt;&gt; element in the WEB-INF/faces-config.xml file
        contains metadata-complete attribute whose value is &#8220;true&#8221;, the
        implementation must not perform annotation scanning on any classes
        except for those classes provided by the implementation itself.
    </description>
    <location chapter="11" section="5.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:218</id>
    <description>
        If the runtime discovers a conflict between an entry in the Application
        Configuration Resources and an annotation, the entry in the Application
        Configuration Resources takes precedence.
    </description>
    <location chapter="11" section="5.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:219</id>
    <description>
        All classes in WEB-INF/classes must be scanned.
    </description>
    <location chapter="11" section="5.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:220</id>
    <description>
        For every jar in the application's WEB-INF/lib directory, if the jar
        contains a &#8220;META-INF/faces-config.xml&#8221; file or a file that matches the
        regular expression &#8220;META-INF/.*faces-config.xml&#8221; (even an empty one),
        all classes in that jar must be scanned.
    </description>
    <location chapter="11" section="5.1"/>
</assertion>

        
<!-- =============================== Chapter 12 ============================ -->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:221</id>
    <description>
        Upon receipt of each JSF-destined request to this web application,
        the JSF implementation must acquire a reference to the Lifecycle
        instance for this web application, and call its execute() and render()
        methods to perform the request processing lifecycle.
    </description>
    <location chapter="12" section="1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:222</id>
    <description>
        Any exceptions thrown during the beforePhase() listeners must be caught
        and published to the ExceptionHandler.
    </description>
    <location chapter="12" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:223</id>
    <description>
        Any exceptions thrown during the execution of the actual lifecycle
        phase, that reach the runtime code that implements the JSF lifecycle
        phase, must be caught and and published to the ExceptionHandler
    </description>
    <location chapter="12" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:224</id>
    <description>
       Any exceptions thrown during the afterPhase() liseteners must be caught
       and published to the ExceptionHandler.
    </description>
    <location chapter="12" section="3"/>
</assertion>
        

<!-- =============================== Chapter 13 ============================ -->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:225</id>
    <description>
       There must be a single JavaScript resource that exists with the resource
       identifier jsf.js
    </description>
    <location chapter="13" section="1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:226</id>
    <description>
       The jsf.js must exist under the resource library jakarta.faces, following
       the conventions in Section 2.6 &#8220;Resource Handling&#8221;.
    </description>
    <location chapter="13" section="1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:227</id>
    <description>
       If the OpenAjax library is available, libraries must register themselves
       using OpenAjax.registerLibrary() at the time when the JavaScript files
       are fetched and parsed by the browser&#8217;s JavaScript engine.
    </description>
    <location chapter="13" section="2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:228</id>
    <description>
      Any implementation that intends to use the JavaServer Faces 2.0 JavaScript
      API must define a top level JavaScript object name jsf, whose type is a
      JavaScript associative array. Within that top level JavaScript object,
      found in the OpenAjax Hub, there must be a property named ajax..
    </description>
    <location chapter="13" section="2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:229</id>
    <description>
       All Ajax requests must be put into a client side request queue before
       they are sent to the server to ensure Ajax requests are processed in the
       order they are sent.
    </description>
    <location chapter="13" section="3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:230</id>
    <description>
       After a request is sent, the Ajax request callback function must remove
       the request from the queue (also known as dequeuing). If the request
       completed successfully, it must be removed from the queue. If there was
       an error, the client must be notified, but the request must still be
       removed from the queue
    </description>
    <location chapter="13" section="3.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:231</id>
    <description>
       The Ajax request callback function is called when the Ajax
       request/response interaction is complete. This function must perform the
       following actions:
    </description>
    <location chapter="13" section="3.3.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:231.1</id>
            <description>
                If the return status is &gt;= 200 and &lt; 300, send a &#8220;complete&#8221;
                event following Section13.3.5.3 &#8220;Sending Events&#8221;.
            </description>
            <location chapter="13" section="3.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:231.2</id>
            <description>
                If the return status is outside the range mentioned above, send
                a &#8220;complete&#8221; event following Section13.3.5.3 &#8220;Sending Events&#8221;.
            </description>
            <location chapter="13" section="3.3.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
            <id>JSF:SPEC:231.3</id>
            <description>
                Regardless of whether the request completed successfully or not:
            </description>
            <location chapter="13" section="3.3.1"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:231.3.1</id>
                    <description>
                        remove the completed requests (Ajax readystate 4) from
                        the request queue (dequeue) - specifically the requests
                        that have been on the queue the longest.
                    </description>
                    <location chapter="13" section="3.3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
                    <id>JSF:SPEC:231.3.2</id>
                    <description>
                        find the next oldest unprocessed (Ajax readystate 0)
                        request on the queue, and send it. The implementation
                        must ensure that the request that is sent does not enter
                        the queue again.
                    </description>
                    <location chapter="13" section="3.3.1"/>
                </assertion>
            </sub-assertions>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:232</id>
    <description>
        The implementation of jsf.ajax.response must handle the response as
        outlined in the JavaScript documentation for jsf.ajax.response. The
        elements in the response must be processed in the
        order they appear in the response.
    </description>
    <location chapter="13" section="3.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:233</id>
    <description>
        The implementation must ensure the JavaScript function that is
        registered for an Ajax request must be called in accordance with the
        events outlined in SectionTABLE14-3 &#8220;Events&#8221;.
    </description>
    <location chapter="13" section="3.5.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:234</id>
    <description>
        The implementation must send events to the runtime as follows:
    </description>
    <location chapter="13" section="3.5.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:234.1</id>
            <description>
                Construct a data payload for events using the properties
                described in SectionTABLE14-4 &#8220;Event Data Payload&#8221;
            </description>
            <location chapter="13" section="3.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:234.2</id>
            <description>
                If an event handler function was registered with the &#8220;onevent&#8221;
                attribute (Section13.3.5.1 &#8220;Monitoring Events For An Ajax
                Request&#8221;) call it passing the data payload.
            </description>
            <location chapter="13" section="3.5.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:234.3</id>
            <description>
                If any event handling functions were registered with the
                &#8220;addOnEvent&#8221; function (Section13.3.5.2 &#8220;Monitoring Events
                For All Ajax Requests&#8221;) call them passing the data payload.
            </description>
            <location chapter="13" section="3.5.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:235</id>
    <description>
        The implementation must ensure the JavaScript function that is
        registered for an Ajax request must be called in accordance when the
        request status code from the server is as outlined in SectionTABLE14-5
        &#8220;Errors&#8221;.
    </description>
    <location chapter="13" section="3.6.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:236</id>
    <description>
        The implementation must ensure the JavaScript function that is
        registered must be called in accordance with the errors outlined in
        SectionTABLE14-5 &#8220;Errors&#8221;.
    </description>
    <location chapter="13" section="3.6.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:237</id>
    <description>
        The implementation must signal errors to the runtime as follows:
    </description>
    <location chapter="13" section="3.6.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:237.1</id>
            <description>
                Construct a data payload for errors using the properties
                described in SectionTABLE14-6 &#8220;Error Data Payload&#8221;.
            </description>
            <location chapter="13" section="3.6.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:237.2</id>
            <description>
                If an error handler function was registered with the &#8220;onerror&#8221;
                attribute (Section13.3.6.1 &#8220;Handling Errors For An Ajax
                Request&#8221;) call it passing the data payload.
            </description>
            <location chapter="13" section="3.6.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:237.3</id>
            <description>
                If any error handling functions were registered with the
                &#8220;addOnError&#8221; function (Section13.3.6.2 &#8220;Handling Errors For All
                Ajax Requests&#8221;) call them passing the data payload.
            </description>
            <location chapter="13" section="3.6.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:237.4</id>
            <description>
                If the project stage is &#8220;development&#8221; (see Section14.5
                &#8220;Determining An Application&#8217;s Project Stage&#8221;) use JavaScript
                &#8220;alert&#8221; to signal the error(s).
            </description>
            <location chapter="13" section="3.6.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:238</id>
    <description>
        JavaServer Faces Ajax frameworks must ensure exception information is
        written to the response in the format:
    </description>
    <location chapter="13" section="3.7"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:238.1</id>
            <description>
                Extract the &#8220;class&#8221; from the &#8220;Throwable&#8221; object and write that
                as the contents of error-name in the response.
            </description>
            <location chapter="13" section="3.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:238.2</id>
            <description>
                Extract the &#8220;cause&#8221; from the &#8220;Throwable&#8221; object if it is
                available and write that as the contents of error-message in the
                response. If &#8220;cause&#8221; is not available, write the string returned
                from &#8220;Throwable.getMessage()&#8221;.
            </description>
            <location chapter="13" section="3.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:238.3</id>
            <description>
                Implementations must ensure that an ExceptionHandler suitable
                for writing exceptions to the partial response is installed if
                the current request required an Ajax response
                (PartialViewContext.isAjaxRequest() returns true).
            </description>
            <location chapter="13" section="3.7"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:239</id>
    <description>
        The UIViewRoot processDecodes, processValidators and processUpdates
        methods must determine if the request is a partial request using the
        FacesContext.isPartialRequest() method.
    </description>
    <location chapter="13" section="4.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:240</id>
    <description>
        The UIViewRoot getRendersChildren and encodeChildren methods must
        determine if the request is an Ajax request using the
        FacesContext.isAjaxRequest() method.
    </description>
    <location chapter="13" section="4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:241</id>
    <description>
    Implementations must adhere to the response format as specified in the
    JavaScript docs for jsf.ajax.response.
    </description>
    <location chapter="13" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:242</id>
    <description>
    Implementations must adhere to the response format as specified in the
    JavaScript docs for jsf.ajax.response.
    </description>
    <location chapter="13" section="4.4"/>
</assertion>


<!-- =============================== Chapter 14 ============================ -->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
    <id>JSF:SPEC:243</id>
    <description>
        The jsf.ajax.request function is responsible for sending an Ajax request
        to the server. The requirements for this function are as follows:
    </description>
    <location chapter="14" section="2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:243.1</id>
            <description>
               The request must be sent asynchronously
            </description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:243.2</id>
            <description>
                The request must be sent with method type POST
            </description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:243.3</id>
            <description>
                The request URL will be the form action attribute
            </description>
            <location chapter="14" section="2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
            <id>JSF:SPEC:243.4</id>
            <description>
                All requests will be queued with the use of a client side
                request queue to help ensure request ordering
            </description>
            <location chapter="14" section="2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:244</id>
    <description>
        It must be a DOM element object or a string identifier for a DOM
        element.
    </description>
    <location chapter="14" section="2.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:245</id>
    <description>
        The request header must be set with the name Faces-Request and the value
        partial/ajax.
    </description>
    <location chapter="14" section="2.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:246</id>
    <description>
        The specifics details of this function&#8217;s operation must follow the
        jsf.ajax.response JavaScript documentation.
    </description>
    <location chapter="14" section="3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
    <id>JSF:SPEC:247</id>
    <description>
        This function must return the constant representing the current state of
        the running application in a typical product development lifecycle. The
        returned value must be the value returned from the server side method
        jakarta.faces.application.Application.getProjectStage()
    </description>
    <location chapter="14" section="5"/>
</assertion>
    </assertions>
</spec>

<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2009, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!-- =============================== Chapter 11 ============================ -->

<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        This servlet must be defined, in the deployment descriptor of an
        application that wishes to employ this portable mechanism.
        The servlet name, denoted as faces-servlet-name above, may be any
        desired value; however, the same value must be used as teh servlet-name
        in the servlet mapping.
    </description>
    <location chapter="11" section="1.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        JSF implementations must support web application that define a 
        &lt;servlet-mapping&gt; that maps any valid url-pattern to the
        FacesServlet.
    </description>
    <location chapter="11" section="1.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        JSF implementations are required to support the following application
        configuration parameter names:
    </description>
    <location chapter="11" section="1.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                jakarta.faces.CONFIG_FILES -- Comma-delimited list of 
                context-relative resource paths under which the JSF 
                implementation will look for application configuration
                resources  before loading a configuration resource named 
                “/WEB-INF/faces-config.xml”
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                jakarta.faces.DEFAULT_SUFFIX -- The default suffix for 
                extension-mapped resources that contain JSF components. If not 
                specified, the default value “.jsp” must be used.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                jakarta.faces.FACELETS_SUFFIX -- Allow the web application to
                define an alternate suffix for Facelet based XHTML pages
                containing JSF content. See the javadocs for the symbolic
                constant ViewHandler.FACELETS_SUFFIX_PARAM_NAME for the
                complete specification.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                jakarta.faces.LIFECYCLE_ID -- Lifecycle identifier of the 
                Lifecycle instance to be used when processing JSF requests for 
                this web application. If not specified, the JSF default 
                instance, identified by LifecycleFactory.DEFAULT_LIFECYCLE, must 
                be used.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                jakarta.faces.STATE_SAVING_METHOD -- The location where state 
                information is saved. Valid values are “server” (typically saved 
                in HttpSession) and “client (typically saved as a hidden field 
                in the subsequent form submit). If not specified, the default 
                value “server” must be used.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                jakarta.faces.PARTIAL_STATE_SAVING --The ServletContext init
                parameter consulted by the runtime to determine if the partial
                state saving mechanism should be used. If undefined, the runtime
                must determine the version level of the application.
            </description>
            <location chapter="11" section="1.3"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>__NUMBER__.6.1</id>
                    <description>
                        For applications versioned at 1.2 and under, the runtime
                        must not use the partial state saving mechanism.
                    </description>
                    <location chapter="11" section="1.3"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>__NUMBER__.6.2</id>
                    <description>
                        For applications versioned at 2.0 and above, the runtime
                        must use the partial state saving mechanism.
                    </description>
                    <location chapter="11" section="1.3"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.7</id>
            <description>
                jakarta.faces.FULL_STATE_SAVING_VIEW_IDS -- The runtime must
                interpret the value of this parameter as a comma separated list
                of view IDs, each of which must have their state saved using the
                state saving mechanism specified in JSF 1.2.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.8</id>
            <description>
                jakarta.faces.PROJECT_STAGE -- A human readable string describing
                where this particular JSF application is in the software
                development lifecycle.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.9</id>
            <description>
                jakarta.faces.DISABLE_FACELET_JSF_VIEWHANDLER -- If this param is
                set, and calling toLowerCase().equals("true") on a String
                representation of its value returns true, the default
                ViewHandler must behave as specified in the latest 1.2 version
                of this specification.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.10</id>
            <description>
                jakarta.faces.FACELETS_LIBRARIES -- If this param is set, the
                runtime must interpret it as a semicolon (;) separated list of
                paths, starting with “/” (without the quotes).
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.11</id>
            <description>
                jakarta.faces.FACELETS_VIEW_MAPPINGS -- If this param is set, the
                runtime must interpret it as a semicolon (;) separated list of
                strings that is used to forcibly declare that certain pages in
                the application must be interpreted as using Facelets,
                regardless of their extension.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.12</id>
            <description>
                jakarta.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL --
                If this param is set, and calling toLowerCase().equals("true")
                on a String representation of its value returns true, any
                implementation of UIInput.validate() must take the following
                additional action. context parameter value is true (ignoring
                case), and UIInput.getSubmittedValue() returns a zero-length
                String call UIInput.setSubmittedValue(null) and continue
                processing using null as the current submitted value
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.13</id>
            <description>
                jakarta.faces.DATETIMECONVERTER_DEFAULT_TIMEZONE_IS_SYSTEM_TIMEZO
                NE -- If this param is set, and calling toLowerCase().equals(
                "true") on a String representation of its value returns true,
                Application.createConverter() must guarantee that the default
                for the timezone of all jakarta.faces.convert.DateTimeConverter
                instances must be equal to TimeZone.getDefault() instead of
                “GMT”.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.14</id>
            <description>
                jakarta.faces.VALIDATE_EMPTY_FIELDS -- If this param is set, and
                calling toLowerCase().equals("true") on a String representation
                of its value returns true, all submitted fields will be
                validated
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.15</id>
            <description>
                jakarta.faces.validator.DISABLE_DEFAULT_BEAN_VALIDATOR -- If this
                param is set, and calling toLowerCase().equals("true") on a
                String representation of its value returns true, the runtime
                must not automatically add the validator with validator-id equal
                to the value of the symbolic constant
                jakarta.faces.validator.VALIDATOR_ID to the list of default
                validators.
            </description>
            <location chapter="11" section="1.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        JSF implementations must also include implementations of the several 
        factory classes. In order to be dynamically instantiated according to 
        the algorithm defined above, the factory implementation class must 
        include a public, no-arguments constructor.
    </description>
    <location chapter="11" section="2.6.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        jakarta.faces.FactoryFinder implements the standard discovery algorithm
        for all factory objects specified in the JavaServer Faces APIs.
        For a given factory class name, a corresponding implementation class is
        searched for based on the following algorithm. Items are listed in order
        of decreasing search precedence:
    </description>
    <location chapter="11" section="2.6.1"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                If a default JavaServer Faces configuration file
                (/WEB-INF/faces-config.xml) is bundled into the web application,
                and it contains a factory entry of the given factory class name,
                that factory class is used.
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If the JavaServer Faces configuration resource(s) named by the
                jakarta.faces.CONFIG_FILES ServletContext init parameter (if any)
                contain any factory entries of the given factory class name,
                those factories are used, with the last one taking precedence.
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                If there are any META-INF/faces-config.xml resources bundled any
                JAR files in the web ServletContext’s resource paths, the
                factory entries of the given factory class name in those files
                are used, with the last one taking precedence.
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                If a META-INF/services/{factory-class-name} resource is visible
                to the web application class loader for the calling application
                (typically as a result of being present in the manifest of a
                JAR file), its first line is read and assumed to be the name of
                the factory implementation class to use.
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                If none of the above steps yield a match, the JavaServer Faces
                implementation specific class is used. 
            </description>
            <location chapter="11" section="2.6.1"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        For each of the public static final String fields on the class
        FactoryFinder whose field names end with the string “_FACTORY”
        (without the quotes), the implementation must provide an implementation
        of the corresponding Factory class using the algorithm described earlier
        in this section.
    </description>
    <location chapter="11" section="2.6.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The FacesServlet implementation class must also declare two static
        public final String constants whose value is a context initialization 
        parameter that affects the behavior of the servlet
    </description>
    <location chapter="11" section="2.6.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                CONFIG_FILES_ATTR -- the context initialization attribute that 
                may optionally contain a comma-delimited list of context 
                relative resources (in addition to /WEB-INF/facesconfig. xml 
                which is always processed if it is present) to be processed. 
                The value of this constant must be “jakarta.faces.CONFIG_FILES”.
            </description>
            <location chapter="11" section="2.6.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                LIFECYCLE_ID_ATTR -- the lifecycle identifier of the Lifecycle 
                instance to be used for processing requests to this application,
                if an instance other than the default is required. The value of 
                this constant must be “jakarta.faces.LIFECYCLE_ID”.
            </description>
            <location chapter="11" section="2.6.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        UIComponentELTag is an implementation of 
        javax.servlet.jsp.tagext.BodyTag, and must be the base class for any JSP
        custom action that corresponds to a JSF UIComponent.
    </description>
    <location chapter="11" section="2.6.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The faces implementation must now provide the attributetag class.
    </description>
    <location chapter="11" section="3.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        the JSF implementation must process zero or more application 
        configuration resources, located according to the following algorithm:
    </description>
    <location chapter="11" section="4.2"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Search for all resources named “META-INF/faces-config.xml” in the
                ServletContext resource paths for this web application, and load 
                each as a JSF configuration resource (in reverse order of the 
                order in which they are returned by getResources() on the 
                current Thread’s ContextClassLoader).
            </description>
            <location chapter="11" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Check for the existence of a context initialization parameter 
                named jakarta.faces.CONFIG_FILES. If it exists, treat it as a 
                comma-delimited list of context relative resource paths 
                (starting with a “/”), and load each of the specfied resources.
            </description>
            <location chapter="11" section="4.2"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Check for the existence of a web application configuration 
                resource named “/WEBINF/faces-config.xml”, and load it if the 
                resource exists.
            </description>
            <location chapter="11" section="4.2"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The runtime must publish the
        jakarta.faces.event.PostConstructApplicationEvent immediately after all
        application configuration resources have been processed.
    </description>
    <location chapter="11" section="4.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        XML parsing errors detected during the loading of an application
        resource file are fatal to application startup, and must cause the 
        application to not be made available by the container. 
    </description>
    <location chapter="11" section="4.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        JSF implementations that are part of a Java EE technology compliant
        implementation are required to validate the application resource file 
        against the XML schema for structural correctness. The validation is not
        required for JSF implementations that are not part of a Java EE 
        technology-compliant implementation.
    </description>
    <location chapter="11" section="4.2"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Application configuration resources must conform to the XML schema
        shown in Appendix 1.1. In addition, they must include the following 
        schema declaration.
    </description>
    <location chapter="11" section="4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Application configuration resources that are written to run on JSF 2.0
        must include the following schema declaration...
    </description>
    <location chapter="11" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Application configuration resources that are written to run on JSF 1.2
        must include the following schema declaration...
    </description>
    <location chapter="11" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Application configuration resources that are written to run on JSF 1.1
        must include the following schema declaration...
    </description>
    <location chapter="11" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Application configuration resources that are written to run on JSF 1.0
        must include the following schema declaration...
    </description>
    <location chapter="11" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The runtime must support the decorator design pattern as specified
        below for the following artifacts.
    </description>
    <location chapter="11" section="4.6"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        If an &lt;name&gt; element is present, it must be considered for the
        ordering of decoratable artifacts (unless the duplicate name exception
        applies, as described below).
    </description>
    <location chapter="11" section="4.7"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Absolute ordering: an &lt;absolute-ordering&gt; element in the
                applicationFacesConfig
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Relative ordering: an &lt;ordering&gt; element within a file in
                the applicationConfigurationResources
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The preceding example illustrates some, but not all, of the following
        principles.
    </description>
    <location chapter="11" section="4.7"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                &lt;before&gt; means the document must be ordered before the
                document with the name matching the name specified within the
                nested &lt;name&gt; element.
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                &lt;after&gt; means the document must be ordered after the
                document with the name matching the name specified within the
                nested &lt;name&gt; element.
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
            <id>__NUMBER__.3</id>
            <description>
                There is a special element &lt;others /&gt; which may be included
                zero or one time within the &lt;before&gt; or &lt;after&gt; element,
                or zero or one time directly within the &lt;absolute-ordering&gt;
                element. The &lt;others /&gt; element must be handled as follows.
            </description>
            <location chapter="11" section="4.7"/>
            <sub-assertions>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>__NUMBER__.3.1</id>
                    <description>
                        If the &lt;before&gt; element contains a nested
                        &lt;others /&gt;, the document will be moved to the
                        beginning of the list of sorted documents.
                    </description>
                    <location chapter="11" section="4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>__NUMBER__.3.2</id>
                    <description>
                        If the &lt;after&gt; element contains a nested
                        &lt;others /&gt;, the document will be moved to the end of
                        the list of sorted documents.
                    </description>
                    <location chapter="11" section="4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>__NUMBER__.3.3</id>
                    <description>
                        Within a &lt;before&gt; or &lt;after&gt; element, if an
                        &lt;tothers /&gt; element is present, but is not the only
                        &lt;name&gt; element within its parent element, the other
                        elements within that parent must be considered in the
                        ordering process.
                    </description>
                    <location chapter="11" section="4.7"/>
                </assertion>
                <assertion required="true" impl-spec="false"
                           defined-by="technology" status="active"
                           testable="true">
                    <id>__NUMBER__.3.4</id>
                    <description>
                        If the &lt;others /&gt; element appears directly within
                        the &lt;absolute-ordering&gt; element, the runtime must
                        ensure that any application configuration resources in
                        applicationConfigurationResources not explicitly named
                        in the &lt;absolute-ordering&gt; section are included at
                        that point in the processing order.
                    </description>
                    <location chapter="11" section="4.7"/>
                </assertion>
            </sub-assertions>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
               If a faces-config file does not have an &lt;ordering&gt; or
               &lt;absolute-ordering&gt; element the artifacts are assumed to not
               have any ordering dependency.
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
            <id>__NUMBER__.5</id>
            <description>
               If the runtime discovers circular references, an informative
               message must be logged, and the application must fail to deploy.
               Again, one course of action the user may take is to use absolute
               ordering in the applicationFacesConfig.
            </description>
            <location chapter="11" section="4.7"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the &lt;faces-config>&gt; element in the WEB-INF/faces-config.xml file
        contains metadata-complete attribute whose value is “true”, the
        implementation must not perform annotation scanning on any classes
        except for those classes provided by the implementation itself.
    </description>
    <location chapter="11" section="5.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the runtime discovers a conflict between an entry in the Application
        Configuration Resources and an annotation, the entry in the Application
        Configuration Resources takes precedence.
    </description>
    <location chapter="11" section="5.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        All classes in WEB-INF/classes must be scanned.
    </description>
    <location chapter="11" section="5.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        For every jar in the application's WEB-INF/lib directory, if the jar
        contains a “META-INF/faces-config.xml” file or a file that matches the
        regular expression “META-INF/.*faces-config.xml” (even an empty one),
        all classes in that jar must be scanned.
    </description>
    <location chapter="11" section="5.1"/>
</assertion>

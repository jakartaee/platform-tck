<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2009, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!-- =============================== Chapter 9 ============================= --> 

<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        All JSF implementations must provide a tag library containing core
        actions (described below) that are independent of a particular 
        RenderKit.The corresponding tag library descriptor must meet the 
        following requirements:
    </description>
    <location chapter="9" section="4.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must declare a tag library version (tlib-version) value of 1.2.
            </description>
            <location chapter="9" section="4.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Must declare a URI (uri) value of http://java.sun.com/jsf/core.
            </description>
            <location chapter="9" section="4.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Must be included in the META-INF directory of a JAR file 
                containing the corresponding implementation classes, suitable 
                for inclusion with a web application, such that the tag library 
                descriptor will be located automatically by the algorithm 
                described in Section 7.3 of the JavaServer Pages Specification 
                (version 2.1).
            </description>
            <location chapter="9" section="4.0"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the f:actionListener tag is not nested inside a UIComponent custom 
        action, or the UIComponent implementation class does not correctly 
        implement ActionSource, or the specified listener class does not 
        implement javax.faces.event.ActionListener, throw a JspException.
    </description>
    <location chapter="9" section="4.1"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the f:convertDateTime tag is not nested inside a UIComponent custom 
        action, or the UIComponent implementation class does not correctly 
        implement ValueHolder, throw a JspException
    </description>
    <location chapter="9" section="4.3"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for f:convertDateTime must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.3"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.webapp.ConverterTag.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                createConverter() method must, if binding is non-null,
                call getValue() on it to obtain a reference to the
                Converter instance. If there is no exception thrown, and 
                binding.getValue() returned a non-null object that implements 
                javax.faces.convert.Converter, it must then cast the returned 
                instance to javax.faces.convert.DateTimeConverter and configure 
                its properties based on the specified attributes for this custom 
                action, and return the configured instance. 
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                If the createConverter()method has an exception thrown, rethrow 
                the exception as a JspException.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                If dateStyle is specified but timeStyle is not specified, 
                default to date.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                If dateStyle is not specified but timeStyle is specified, 
                default to time.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                If both dateStyle and timeStyle are specified, default to both.
            </description>
            <location chapter="9" section="4.3"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the f:convertNumber tag is not nested inside a UIComponent custom 
        action, or the UIComponent implementation class does not correctly 
        implement ValueHolder, throw a JspException.
    </description>
    <location chapter="9" section="4.4"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for the f:convertNumber action must meet the 
        following requirements:
    </description>
    <location chapter="9" section="4.4"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.webapp.ConverterTag.
            </description>
            <location chapter="9" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The createConverter() method, If binding is non-null, call 
                binding.getValue() to obtain a reference to the Converter 
                instance. If there is no exception thrown, and 
                binding.getValue() returned a non-null object that implements 
                javax.faces.convert.Converter, it must then cast the returned 
                instance to javax.faces.convert.NumberConverter and configure 
                its properties based on the specified attributes for this custom 
                action, and return the configured instance. 
            </description>
            <location chapter="9" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                If there was an exception thrown, rethrow the exception as a
                JspException.
            </description>
            <location chapter="9" section="4.4"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                Call the createConverter() method of the Application 
                instance for this application, passing converter id 
                “javax.faces.Number”. If the binding attribute was also set, 
                store the converter instance by calling binding.setValue(). It 
                must then cast the returned instance to 
                javax.faces.convert.NumberConverter and configure its properties
                based on the specified attributes for this custom action, and 
                return the configured instance.
            </description>
            <location chapter="9" section="4.4"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If this tag is not nested inside a UIComponent custom action, or the
        UIComponent implementation class does not correctly implement
        ValueHolder, throw a JspException.
    </description>
    <location chapter="9" section="4.5"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for f:converter action must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.5"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.webapp.ConverterJspTag.
            </description>
            <location chapter="9" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The createConverter() method must, If binding is non-null, call 
                binding.getValue() to obtain a reference to the Converter 
                instance. If there is no exception thrown, and 
                binding.getValue() returned a non-null object that implements 
                javax.faces.convert.Converter, register it by calling 
                setConverter(). If there was an exception thrown, rethrow 
                the exception as a JspException.
            </description>
            <location chapter="9" section="4.5"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Use the converterId attribute if the converter instance could 
                not be created from the binding attribute. If the converterId 
                attribute is set, call the createConverter() method of the 
                Application instance for this application, passing converter id
                specified by their converterId attribute. If the binding 
                attribute was also set, store the converter instance by calling 
                binding.setValue(). Register the converter instance by calling 
                setConverter(). If there was an exception thrown, rethrow the 
                exception as a JspException.
            </description>
            <location chapter="9" section="4.5"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:facet tag must be nested inside a UIComponent custom action.
        Exactly one UIComponent custom action must be nested inside this custom action
        (although the nested component custom action could itself have nested children).
    </description>
    <location chapter="9" section="4.6"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Exactly one UIComponent custom action must be nested inside this custom 
        action(although the nested component custom action could itself have 
        nested children).
    </description>
    <location chapter="9" section="4.6"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The implementation class of the f:facet tag must be, or extend, 
        javax.faces.webapp.FacetTag.
    </description>
    <location chapter="9" section="4.6"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:loadBundle tag must be nested inside an f:view tag custom action.
    </description>
    <location chapter="9" section="4.7"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:param tag must be nested inside a UIComponent custom action.
    </description>
    <location chapter="9" section="4.8"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The implementation class for f:param tag this action must meet the 
        following requirements:
    </description>
    <location chapter="9" section="4.8"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.UIComponentELTag.
            </description>
            <location chapter="9" section="4.8"/>
        </assertion>  
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The getComponentType() method must return “Parameter”.
            </description>
            <location chapter="9" section="4.8"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                The getRendererType() method must return null.
            </description>
            <location chapter="8" section="4.8"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:phaseListener tag must be nested inside a UIViewRoot custom action.
    </description>
    <location chapter="9" section="4.9"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The specified listener class for f:phaseListener must implement 
        javax.faces.event.PhaseListener.
    </description>
    <location chapter="9" section="4.9"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        type and/or binding must be specified for the phaseListener impl.
    </description>
    <location chapter="9" section="4.9"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:selectItem must be nested inside a UIComponent custom action
        that creates a UISelectMany or UISelectOne component instance.
    </description>
    <location chapter="9" section="4.10"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for this action must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.10"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.UIComponentELTag.
            </description>
            <location chapter="9" section="4.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The getComponentType() method must return “SelectItem”.
            </description>
            <location chapter="9" section="4.10"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                The getRendererType() method must return null.
            </description>
            <location chapter="9" section="4.10"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Must be nested inside a UIComponent custom action that creates a 
        UISelectMany or UISelectOne component instance.
    </description>
    <location chapter="9" section="4.11"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The implementation class for the f:selectItems action must meet
        the following requirements:
    </description>
    <location chapter="9" section="4.11"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.UIComponentELTag.
            </description>
            <location chapter="9" section="4.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The getComponentType() method must return 
                “javax.faces.SelectItems”.
            </description>
            <location chapter="9" section="4.11"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                The getRendererType() method must return null.
            </description>
            <location chapter="9" section="4.11"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:setPropertyActionListener must be nested inside a UIComponent custom 
        action.
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The corresponding UIComponent implementation class for 
        f:setPropertyActionListener must implement ActionSource, and therefore 
        define a public addActionListener() method that accepts an 
        ActionListener parameter.        
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The tag implementation must only create and register the ActionListener 
        instance the first time the component for this tag is created
    </description>
    <location chapter="" section=""/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        When the listener executes, call getValue() on the "value" 
        ValueExpression. Pass the result to a call to setValue() on the "target"
        ValueExpression
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        This tag creates no output to the page currently being created. It is 
        used solely for the side effect of ActionListener creation and addition.
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If this tag is not nested inside a UIComponent custom action, or the 
        UIComponent implementation class does not correctly implement 
        ActionSource, or the specified listener class does not implement
        javax.faces.event.ActionListener, throw a JspException.
    </description>
    <location chapter="9" section="4.12"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:subview must be nested inside a f:view custom action although this 
        custom action might be in a page that is including the page containing
        the f:subview custom action.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:subview must not contain an f:view custom action.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:subview must have an id attribute whose value is unique within the 
        scope of the parent naming container.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The implementation class for f:subview must extend 
        javax.faces.UIComponentELTag.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The implementation class's getComponentType() method must return
        “NamingContainer”.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The implementation class's getRendererType() method must return null.
    </description>
    <location chapter="9" section="4.13"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the f:validateDoubleRange tag is not nested inside a UIComponent
        custom action, or the UIComponent implementation class does not 
        correctly implement EditableValueHolder throw a JspException.
    </description>
    <location chapter="9" section="4.14"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for the f:validateDoubleRange action must meet
        the following requirements:
    </description>
    <location chapter="9" section="4.14"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.webapp.ValidatorTag.
            </description>
            <location chapter="9" section="4.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The createValidator() method must, If binding is non-null, 
                create a ValueBinding by invoking 
                Application.createValueExpression() with binding as the 
                expression argument, and Validator.class as the expectedType 
                argument.
            </description>
            <location chapter="9" section="4.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                use the validatorId if the validator instance could not be 
                created from the binding attribute.
            </description>
            <location chapter="9" section="4.14"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                If there is an exception thrown, rethrow the exception as a
                JspException.
            </description>
            <location chapter="9" section="4.14"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the f:validateLength tag is not nested inside a UIComponent custom 
        action, or the UIComponent implementation class does not correctly
        implement EditableValueHolder, throw a JspException.
    </description>
    <location chapter="9" section="4.15"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for this action must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.15"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.webapp.ValidatorTag.
            </description>
            <location chapter="9" section="4.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If binding is non-null, create a ValueExpression by invoking
                Application.createValueExpression() with binding as the 
                expression argument, and Validator.          
            </description>
            <location chapter="9" section="4.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__</id>
            <description>
                Use the validatorId if the validator instance could not be 
                created from the binding attribute. Call the createValidator() 
                method of the Application instance for this application,
            </description>
            <location chapter="9" section="4.15"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__</id>
            <description>
                If there was an exception thrown, rethrow the exception
                as a JspException.          
            </description>
            <location chapter="9" section="4.15"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:validateLongRange must be nested inside a EditableValueHolder custom 
        action whose value is (or is convertible to) a long.
    </description>
    <location chapter="9" section="4.16"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:validateLongRange must specify either the maximum attribute, the 
        minimum attribute, or both.
    </description>
    <location chapter="9" section="4.16"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        For f:validateLongRange if both limits are specified, the maximum limit 
        must be greater than the minimum limit.
    </description>
    <location chapter="9" section="4.16"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the f:validateLongRange tag is not nested inside a UIComponent custom
        action, or the UIComponent implementation class does not correctly 
        implement EditableValueHolder, throw a JspException
    </description>
    <location chapter="9" section="4.16"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for the f:validateLongRange action must meet 
        the following requirements:
    </description>
    <location chapter="9" section="4.16"/>
    <sub-assertions>        
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.webapp.ValidatorTag.
            </description>
            <location chapter="9" section="4.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The createValidator() method must, if binding is non-null,
                create a ValueExpression by invoking
                Application.createValueExpression() with binding as the 
                expression argument, and Validator.
            </description>
            <location chapter="9" section="4.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                The createValidator() method must, use the validatorId if the
                validator instance could not be created from the binding 
                attribute.
            </description>
            <location chapter="9" section="4.16"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                If there is an exception thrown, rethrow the exception as a
                JspException
            </description>
            <location chapter="9" section="4.16"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:validator tag must be nested inside a UIComponent custom action whose 
        component class implements EditableValueHolder.
    </description>
    <location chapter="9" section="4.17"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        validatorId and/or binding must be specified.
    </description>
    <location chapter="9" section="4.17"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If the f:validator tag is not nested inside a UIComponent custom action, 
        or the UIComponent implementation class does not correctly implement
        EditableValueHolder throw a JspException.
    </description>
    <location chapter="9" section="4.17"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for the f:validator action must meet the 
        following requirements:
    </description>
    <location chapter="9" section="4.17"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.webapp.ValidatorJspTag.
            </description>
            <location chapter="9" section="4.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The createValidator() method must, if binding is non-null, 
                call binding.getValue() to obtain a reference to the
                Validator instance.
            </description>
            <location chapter="9" section="4.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                The createValidator() method must, use the validatorId attribute 
                if the validator instance could not be created from the binding 
                attribute.
            </description>
            <location chapter="9" section="4.17"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                The createValidator() method must, If there was an exception 
                thrown, rethrow the exception as a JspException.
            </description>
            <location chapter="9" section="4.17"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:valueChangeListener must be nested inside a UIComponent custom action.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The corresponding UIComponent implementation class for 
        f:valueChangeListener must implement EditableValueHolder, and therefore 
        define a public  addValueChangeListener() method that accepts an 
        ValueChangeListener parameter.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The specified listener class for f:valueChangeListener must implement 
        javax.faces.event.ValueChangeListener.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        type and/or binding must be specified.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        If this tag is not nested inside a UIComponent custom action, or the
        UIComponent implementation class does not correctly implement
        EditableValueHolder, or the specified listener class does not implement
        javax.faces.event.ValueChangeListener, throw a JspException.
    </description>
    <location chapter="9" section="4.18"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        f:verbatim must be implemented as a UIComponentBodyTag.
    </description>
    <location chapter="9" section="4.19"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The rendererType property for the f:verbatim tag's UIOutput component
        must be set to “javax.faces.Text”
    </description>
    <location chapter="9" section="4.19"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The f:verbatim tag's transient property must be set to true.
    </description>
    <location chapter="9" section="4.19"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The value (or value binding, if it is an expression) of the escape 
        attribute must be passed on to the renderer as the value the escape 
        attribute on the UIOutput component.
    </description>
    <location chapter="9" section="4.19"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        Any JSP-created response using actions from the JSF Core Tag Library, 
        as well as actions extending javax.faces.webapp.UIComponentELTag from 
        other tag libraries, must be nested inside an occurrence of the 
        f:view action.
    </description>
    <location chapter="9" section="4.20"/>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The implementation class for the f:view action must meet the following 
        requirements:
    </description>
    <location chapter="9" section="4.20"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must extend javax.faces.UIComponentBodyTag.
            </description>
            <location chapter="9" section="4.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                The getComponentType() method must return “ViewRoot”.
            </description>
            <location chapter="9" section="4.20"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                The getRendererType() method must return null.
            </description>
            <location chapter="9" section="4.20"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="false">
    <id>__NUMBER__</id>
    <description>
        The tag library descriptor for this tag library must meet the following
        requirements:
    </description>
    <location chapter="9" section="5.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Must declare a tag library version (tlib-version) value of 
                1.2.          
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Must declare a URI tag value of 
                http://java.sun.com/jsf/html.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Must be included in the META-INF directory of a JAR file 
                containing the corresponding implementation classes, suitable 
                for inclusion with a web application, such that the tag library
                descriptor will be located automatically by the algorithm
                described in Section 7.3  of the JavaServer Pages Specification
                (version 1.2).
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The custom actions defined in this tag library must specify the
        following return values for the getComponentType() and getRendererType()
        methods, respectively:
    </description>
    <location chapter="9" section="5.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                Action column: 
                getComponentType()- returns javax.faces.Column
                getRendererType()- returns (null)*
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                Action commandButton:
                getComponentType()- returns javax.faces.HtmlCommandButton
                getRendererType()- returns javax.faces.Button
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Action commandLink:
                getComponentType()- returns javax.faces.HtmlCommandLink
                getRendererType()- returns javax.faces.Link
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                Action dataTable:
                getComponentType()- returns javax.faces.HtmlDataTable
                getRendererType()- returns javax.faces.Table
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                Action form:
                getComponentType()- returns javax.faces.HtmlForm
                getRendererType()- returns javax.faces.Form
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                Action graphicImage:
                getComponentType()- returns javax.faces.HtmlGraphicImage
                getRendererType()- returns javax.faces.Image
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.7</id>
            <description>
                Action inputHidden:
                getComponentType()- returns javax.faces.HtmlInputHidden
                getRendererType()- returns javax.faces.Hidden
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.8</id>
            <description>
                Action inputSecret:
                getComponentType()- returns javax.faces.HtmlInputSecret
                getRendererType()- returns javax.faces.Secret
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.9</id>
            <description>
                Action inputSecret:
                getComponentType()- returns javax.faces.HtmlInputSecret
                getRendererType()- returns javax.faces.Secret
            </description>
            <location chapter="" section=""/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.10</id>
            <description>
                Action inputText:
                getComponentType()- returns javax.faces.HtmlInputText
                getRendererType()- returns javax.faces.Text
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.11</id>
            <description>
                Action inputTextarea:
                getComponentType()- returns javax.faces.HtmlInputTextarea
                getRendererType()- returns javax.faces.Textarea
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.12</id>
            <description>
                Action message:
                getComponentType()- returns javax.faces.HtmlMessage
                getRendererType()- returns javax.faces.Message
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.13</id>
            <description>
                Action messages:
                getComponentType()- returns javax.faces.HtmlMessages
                getRendererType()- returns javax.faces.Messages
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.14</id>
            <description>
                Action outputFormat:
                getComponentType()- returns javax.faces.HtmlOutputFormat
                getRendererType()- returns javax.faces.Format
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.15</id>
            <description>
                Action outputLabel:
                getComponentType()- returns javax.faces.HtmlOutputLabel
                getRendererType()- returns javax.faces.Label
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.16</id>
            <description>
                Action outputLink:
                getComponentType()- returns javax.faces.HtmlOutputLink
                getRendererType()- returns javax.faces.Link
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.17</id>
            <description>
                Action outputText:
                getComponentType()- returns javax.faces.HtmlOutputText
                getRendererType()- returns javax.faces.Text
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.18</id>
            <description>
                Action panelGrid:
                getComponentType()- returns javax.faces.HtmlPanelGrid
                getRendererType()- returns javax.faces.Grid
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.19</id>
            <description>
                Action panelGroup:
                getComponentType()- returns javax.faces.HtmlPanelGroup
                getRendererType()- returns javax.faces.Group
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.20</id>
            <description>
                Action selectBooleanCheckbox:
                getComponentType()- 
                returns javax.faces.HtmlSelectBooleanCheckbox
                getRendererType()- returns javax.faces.Checkbox
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.21</id>
            <description>
                Action selectManyListbox:
                getComponentType()- returns javax.faces.HtmlSelectManyListbox
                getRendererType()- returns javax.faces.Listbox
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.22</id>
            <description>
                Action selectManyMenu:
                getComponentType()- returns javax.faces.HtmlSelectManyMenu
                getRendererType()- returns javax.faces.Menu
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.23</id>
            <description>
                Action selectOneListbox:
                getComponentType()- returns javax.faces.HtmlSelectOneListbox
                getRendererType()- returns javax.faces.Listbox
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.24</id>
            <description>
                Action selectOneMenu:
                getComponentType()- returns javax.faces.HtmlSelectOneMenu
                getRendererType()- returns javax.faces.Menu
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.25</id>
            <description>
                Action selectOneRadio:
                getComponentType()- returns javax.faces.HtmlSelectOneRadio
                getRendererType()- returns javax.faces.Radio
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>        
    </sub-assertions>
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology"
           status="active" testable="true">
    <id>__NUMBER__</id>
    <description>
        The tag library descriptor for this tag library (and the corresponding 
        tag handler implementation classes) must meet the following
        requirements:
    </description>
    <location chapter="9" section="5.0"/>
    <sub-assertions>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.1</id>
            <description>
                The attributes for the tags, both in the TLD and in the 
                associated tag handlers, must conform exactly to the type, name, 
                and description given in the TLDDocs for the
                html_basic tag library.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.2</id>
            <description>
                If the type of the attribute is jakarta.el.MethodExpression, the 
                TLD for the attribute must contain a &lt;deferred-method&gt; 
                with a nested &lt;method-signature&gt;, inside of which is the
                method signature for that MethodExpression, as given in the 
                TLDDocs. The JavaBeans setter method in the tag handler for the 
                tag must  be of type jakarta.el.MethodExpression.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.3</id>
            <description>
                Any attributes listed in the TLDDocs with a request-time value 
                of true must specify an &lt;rtexprvalue&gt; of true in the TLD.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.4</id>
            <description>
                The following action must be taken to handle the value of the 
                converter property. If isLiteralText() on the converter property
                returns true, get the value of the property and treat it as a 
                converterId by passing it as the argument to the 
                createConverter() method of the Application instance for this 
                webapp, then pass the created Converter to the setConverter() 
                method of the component for this tag. If isLiteralText() on the 
                converter property returns false, call setValueExpression() on 
                the component, passing “converter” as the name of the
                ValueExpression and the ValueExpression instance as the value.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.5</id>
            <description>
                For a non-null action attribute on custom actions related to 
                ActionSource2 components (commandButton, commandLink), the 
                setProperties() method of the tag handler implementation class 
                must pass the value of the action attribtue, which is a 
                MethodExpression, to the component’s setActionExpression()
                method.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.6</id>
            <description>
                For other non-null attributes that correspond to 
                MethodExpression attributes on the underlying components 
                (actionListener, validator, valueChangeListener), the 
                setProperties() method of the tag handler implementation class 
                must store that instance as the value of the corresponding 
                component property.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.7</id>
            <description>
                For any non-null id, scope, or var attribute, the 
                setProperties() method of the tag handler implementation class
                must simply set the value of the corresponding component 
                attribute.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
        <assertion required="true" impl-spec="false" defined-by="technology"
                   status="active" testable="true">
            <id>__NUMBER__.8</id>
            <description>
                For all other non-null attributes, the setProperties() of the 
                tag handler implementation class method must, if the 
                attribute.isLiteralText() returns true, set the corresponding
                attribute on the underlying component (after performing any
                necessary type conversion). Otherwise, call the 
                setValueExpression() method on the underlying component,
                passing the attribute name and the ValueExpression‘ instance as 
                parameters.
            </description>
            <location chapter="9" section="5.0"/>
        </assertion>
    </sub-assertions>
</assertion>

<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
    <package name="jakarta.xml.soap">
        <classes>
            <class modifiers="public abstract" name="SOAPPart">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>The container for the SOAP-specific portion of a SOAPMessage  object.</lead>
                    <detail> All messages are required to have a SOAP part, so when a  SOAPMessage object is created, it will automatically  have a SOAPPart object.   A SOAPPart object is a MIME part and has the MIME headers  Content-Id, Content-Location, and Content-Type.  Because the value of  Content-Type must be &quot;text/xml&quot;, a SOAPPart object automatically  has a MIME header of Content-Type with its value set to &quot;text/xml&quot;.  The value must be &quot;text/xml&quot; because content in the SOAP part of a  message must be in XML format.  Content that is not of type &quot;text/xml&quot;  must be in an AttachmentPart object rather than in the  SOAPPart object.    When a message is sent, its SOAP part must have the MIME header Content-Type  set to &quot;text/xml&quot;. Or, from the other perspective, the SOAP part of any  message that is received must have the MIME header Content-Type with a  value of &quot;text/xml&quot;.    A client can access the SOAPPart object of a  SOAPMessage object by  calling the method SOAPMessage.getSOAPPart. The  following  line of code, in which message is a  SOAPMessage object, retrieves the SOAP part of a message.      SOAPPart soapPart = message.getSOAPPart();      A SOAPPart object contains a SOAPEnvelope object,  which in turn contains a SOAPBody object and a  SOAPHeader object.  The SOAPPart method getEnvelope can be used  to retrieve the SOAPEnvelope object.  </detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public abstract" name="getEnvelope">
                        <comment>
                            <lead>Gets the SOAPEnvelope object associated with this  SOAPPart object.</lead>
                            <detail> Once the SOAP envelope is obtained, it  can be used to get its contents.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPEnvelope">
                            <comment>the SOAPEnvelope object for this            SOAPPart object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getContentId">
                        <comment>
                            <lead>Retrieves the value of the MIME header whose name is &quot;Content-Id&quot;.</lead>
                            <see class="SOAPPart" member="setContentId" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the value of the MIME header          named &quot;Content-Id&quot;</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getContentLocation">
                        <comment>
                            <lead>Retrieves the value of the MIME header whose name is &quot;Content-Location&quot;.</lead>
                            <see class="SOAPPart" member="setContentLocation" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the value of the MIME header whose           name is &quot;Content-Location&quot;</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setContentId">
                        <comment>
                            <lead>Sets the value of the MIME header named &quot;Content-Id&quot;  to the given String.</lead>
                            <see class="SOAPPart" member="getContentId" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="contentId" package="java.lang" type="String">
                                <comment>a String giving the value of the MIME         header &quot;Content-Id&quot;</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="setContentLocation">
                        <comment>
                            <lead>Sets the value of the MIME header &quot;Content-Location&quot;  to the given String.</lead>
                            <see class="SOAPPart" member="getContentLocation" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="contentLocation" package="java.lang" type="String">
                                <comment>a String giving the value         of the MIME         header &quot;Content-Location&quot;</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="removeMimeHeader">
                        <comment>
                            <lead>Removes all MIME headers that match the given name.</lead>
                        </comment>
                        <parameters>
                            <parameter name="header" package="java.lang" type="String">
                                <comment>a String giving the name of the MIME header(s) to                be removed</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="removeAllMimeHeaders">
                        <comment>
                            <lead>Removes all the MimeHeader objects for this  SOAPEnvelope object.</lead>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getMimeHeader">
                        <comment>
                            <lead>Gets all the values of the MimeHeader object  in this SOAPPart object that  is identified by the given String.</lead>
                            <see class="SOAPPart" member="setMimeHeader" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>the name of the header; example: &quot;Content-Type&quot;</comment>
                            </parameter>
                        </parameters>
                        <returns dimension="[]" package="java.lang" type="String">
                            <comment>a String array giving all the values for the          specified header</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="setMimeHeader">
                        <comment>
                            <lead>Changes the first header entry that matches the given header name  so that its value is the given value, adding a new header with the  given name and value if no  existing header is a match.</lead>
                            <detail> If there is a match, this method clears  all existing values for the first header that matches and sets the  given value instead. If more than one header has  the given name, this method removes all of the matching headers after  the first one.    Note that RFC822 headers can contain only US-ASCII characters.</detail>
                            <see class="SOAPPart" member="getMimeHeader" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>a String giving the header name                   for which to search</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String giving the value to be set.                   This value will be substituted for the current value(s)                   of the first header that is a match if there is one.                   If there is no match, this value will be the value for                   a new MimeHeader object.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="addMimeHeader">
                        <comment>
                            <lead>Creates a MimeHeader object with the specified  name and value and adds it to this SOAPPart object.</lead>
                            <detail>  If a MimeHeader with the specified name already  exists, this method adds the specified value to the already  existing value(s).    Note that RFC822 headers can contain only US-ASCII characters.</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>a String giving the header name</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String giving the value to be set                   or added</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getAllMimeHeaders">
                        <comment>
                            <lead>Retrieves all the headers for this SOAPPart object  as an iterator over the MimeHeader objects.</lead>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object with all of the Mime           headers for this SOAPPart object</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getMatchingMimeHeaders">
                        <comment>
                            <lead>Retrieves all MimeHeader objects that match a name in  the given array.</lead>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="names" package="java.lang" type="String">
                                <comment>a String array with the name(s) of the         MIME headers to be returned</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>all of the MIME headers that match one of the names in the            given array, returned as an Iterator object</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getNonMatchingMimeHeaders">
                        <comment>
                            <lead>Retrieves all MimeHeader objects whose name does  not match a name in the given array.</lead>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="names" package="java.lang" type="String">
                                <comment>a String array with the name(s) of the         MIME headers not to be returned</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>all of the MIME headers in this SOAPPart object           except those that match one of the names in the            given array.  The nonmatching MIME headers are returned as an            Iterator object.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="setContent">
                        <comment>
                            <lead>Sets the content of the SOAPEnvelope object with the data   from the given Source object.</lead>
                            <detail> This Source   must contain a valid SOAP document.</detail>
                            <see class="SOAPPart" member="getContent" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="source" package="javax.xml.transform" type="Source">
                                <comment>the javax.xml.transform.Source object with the         data to be set</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a problem in setting the source</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="getContent">
                        <comment>
                            <lead>Returns the content of the SOAPEnvelope as a JAXP Source  object.</lead>
                            <see class="SOAPPart" member="setContent" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="javax.xml.transform" type="Source">
                            <comment>the content as a javax.xml.transform.Source object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the implementation cannot convert                           the specified Source object</throw>
                        </throws>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="SOAPMessage">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>The root class for all SOAP messages.</lead>
                    <detail> As transmitted on the &quot;wire&quot;, a SOAP  message is an XML document or a MIME message whose first body part is an  XML/SOAP document.    A SOAPMessage object consists of a SOAP part and optionally  one or more attachment parts. The SOAP part for a SOAPMessage  object is a SOAPPart object, which contains information used  for message routing and identification, and which can contain  application-specific content. All data in the SOAP Part of a message must be  in XML format.    A new SOAPMessage object contains the following by default:      A SOAPPart object    A SOAPEnvelope object    A SOAPBody object    A SOAPHeader object    The SOAP part of a message can be retrieved by calling the method SOAPMessage.getSOAPPart().  The SOAPEnvelope object is retrieved from the SOAPPart  object, and the SOAPEnvelope object is used to retrieve the  SOAPBody and SOAPHeader objects.         SOAPPart sp = message.getSOAPPart();      SOAPEnvelope se = sp.getEnvelope();      SOAPBody sb = se.getBody();      SOAPHeader sh = se.getHeader();       In addition to the mandatory SOAPPart object, a SOAPMessage  object may contain zero or more AttachmentPart objects, each  of which contains application-specific data. The SOAPMessage  interface provides methods for creating AttachmentPart  objects and also for adding them to a SOAPMessage object. A  party that has received a SOAPMessage object can examine its  contents by retrieving individual attachment parts.    Unlike the rest of a SOAP message, an attachment is not required to be in  XML format and can therefore be anything from simple text to an image file.  Consequently, any message content that is not in XML format must be in an  AttachmentPart object.    A MessageFactory object may create SOAPMessage  objects with behavior that is specialized to a particular implementation or  application of SAAJ. For instance, a MessageFactory object  may produce SOAPMessage objects that conform to a particular  Profile such as ebXML. In this case a MessageFactory object  might produce SOAPMessage objects that are initialized with  ebXML headers.    In order to ensure backward source compatibility, methods that are added to  this class after version 1.1 of the SAAJ specification are all concrete  instead of abstract and they all have default implementations. Unless  otherwise noted in the JavaDocs for those methods the default  implementations simply throw an UnsupportedOperationException  and the SAAJ implementation code must override them with methods that  provide the specified behavior. Legacy client code does not have this  restriction, however, so long as there is no claim made that it conforms to  some later version of the specification than it was originally written for.  A legacy class that extends the SOAPMessage class can be compiled and/or run  against succeeding versions of the SAAJ API without modification. If such a  class was correctly implemented then it will continue to behave correctly  relative to the version of the specification against which it was written.</detail>
                    <see class="MessageFactory" package="jakarta.xml.soap"/>
                    <see class="AttachmentPart" package="jakarta.xml.soap"/>
                </comment>
                <fields>
                    <field modifiers="public static final" name="CHARACTER_SET_ENCODING" package="java.lang" type="String">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Specifies the character type encoding for the SOAP Message.</lead>
                            <detail> Valid values  include &quot;utf-8&quot; and &quot;utf-16&quot;. See vendor documentation for additional  supported values. The default is &quot;utf-8&quot;.</detail>
                            <see class="SOAPMessage" member="setProperty(String, Object)" package="jakarta.xml.soap"/>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="WRITE_XML_DECLARATION" package="java.lang" type="String">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Specifies whether the SOAP Message will contain an XML declaration when  it is sent.</lead>
                            <detail> The only valid values are &quot;true&quot; and &quot;false&quot;. The default is  &quot;false&quot;.</detail>
                            <see class="SOAPMessage" member="setProperty(String, Object)" package="jakarta.xml.soap"/>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public abstract" name="setContentDescription">
                        <comment>
                            <lead>Sets the description of this SOAPMessage object&apos;s  content with the given description.</lead>
                            <see class="SOAPMessage" member="getContentDescription" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="description" package="java.lang" type="String">
                                <comment>a String describing the content of this          message</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getContentDescription">
                        <comment>
                            <lead>Retrieves a description of this SOAPMessage object&apos;s  content.</lead>
                            <see class="SOAPMessage" member="setContentDescription" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String describing the content of this          message or null if no description has been set</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getSOAPPart">
                        <comment>
                            <lead>Gets the SOAP part of this SOAPMessage object.</lead>
                            <detail>    SOAPMessage object contains one or more attachments, the  SOAP Part must be the first MIME body part in the message.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPPart">
                            <comment>the SOAPPart object for this SOAPMessage          object</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getSOAPBody">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Gets the SOAP Body contained in this SOAPMessage object.</lead>
                            <detail/>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPBody">
                            <comment>the SOAPBody object contained by this SOAPMessage          object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the SOAP Body does not exist or cannot be retrieved</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getSOAPHeader">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Gets the SOAP Header contained in this SOAPMessage  object.</lead>
                            <detail/>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPHeader">
                            <comment>the SOAPHeader object contained by this SOAPMessage          object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the SOAP Header does not exist or cannot be retrieved</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="removeAllAttachments">
                        <comment>
                            <lead>Removes all AttachmentPart objects that have been added  to this SOAPMessage object.</lead>
                            <detail>    This method does not touch the SOAP part.</detail>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="countAttachments">
                        <comment>
                            <lead>Gets a count of the number of attachments in this message.</lead>
                            <detail> This count  does not include the SOAP part.</detail>
                        </comment>
                        <returns type="int">
                            <comment>the number of AttachmentPart objects that are          part of this SOAPMessage object</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getAttachments">
                        <comment>
                            <lead>Retrieves all the AttachmentPart objects that are part of  this SOAPMessage object.</lead>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an iterator over all the attachments in this message</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getAttachments">
                        <comment>
                            <lead>Retrieves all the AttachmentPart objects that have header  entries that match the specified headers.</lead>
                            <detail> Note that a returned  attachment could have headers in addition to those specified.</detail>
                        </comment>
                        <parameters>
                            <parameter name="headers" package="jakarta.xml.soap" type="MimeHeaders">
                                <comment>a MimeHeaders object containing the MIME            headers for which to search</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>an iterator over all attachments that have a header that matches          one of the given headers</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="removeAttachments">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Removes all the AttachmentPart objects that have header  entries that match the specified headers.</lead>
                            <detail> Note that the removed  attachment could have headers in addition to those specified.</detail>
                        </comment>
                        <parameters>
                            <parameter name="headers" package="jakarta.xml.soap" type="MimeHeaders">
                                <comment>a MimeHeaders object containing the MIME            headers for which to search</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getAttachment">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns an AttachmentPart object that is associated with an  attachment that is referenced by this SOAPElement or  null if no such attachment exists.</lead>
                            <see/>
                            <see/>
                            <see/>
                            <detail> References can be made  via an href attribute as described in  SOAP Messages with Attachments,  or via a single Text child node containing a URI as  described in the WS-I Attachments Profile 1.0 for elements of schema  type ref:swaRef(ref:swaRef).  These two mechanisms must be supported.  The support for references via href attribute also implies that  this method should also be supported on an element that is an  xop:Include element (  XOP).  other reference mechanisms may be supported by individual  implementations of this standard. Contact your vendor for details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="element" package="jakarta.xml.soap" type="SOAPElement">
                                <comment>The SOAPElement containing the reference to an Attachment</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="AttachmentPart">
                            <comment>the referenced AttachmentPart or null if no such           AttachmentPart exists or no reference can be           found in this SOAPElement.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in the attempt to access the           attachment</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="addAttachmentPart">
                        <comment>
                            <lead>Adds the given AttachmentPart object to this SOAPMessage  object.</lead>
                            <detail> An AttachmentPart object must be created before  it can be added to a message.</detail>
                        </comment>
                        <parameters>
                            <parameter name="AttachmentPart" package="jakarta.xml.soap" type="AttachmentPart">
                                <comment>an AttachmentPart object that is to become part            of this SOAPMessage object</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="createAttachmentPart">
                        <comment>
                            <lead>Creates a new empty AttachmentPart object.</lead>
                            <detail> Note that the  method addAttachmentPart must be called with this new  AttachmentPart object as the parameter in order for it to  become an attachment to this SOAPMessage object.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="AttachmentPart">
                            <comment>a new AttachmentPart object that can be populated          and added to this SOAPMessage object</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createAttachmentPart">
                        <comment>
                            <lead>Creates an AttachmentPart object and populates it using  the given DataHandler object.</lead>
                            <see/>
                            <see/>
                        </comment>
                        <parameters>
                            <parameter name="dataHandler" type="DataHandler">
                                <comment>the jakarta.activation.DataHandler object that            will generate the content for this SOAPMessage            object</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="AttachmentPart">
                            <comment>a new AttachmentPart object that contains data          generated by the given DataHandler object</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getMimeHeaders">
                        <comment>
                            <lead>Returns all the transport-specific MIME headers for this SOAPMessage  object in a transport-independent fashion.</lead>
                        </comment>
                        <returns package="jakarta.xml.soap" type="MimeHeaders">
                            <comment>a MimeHeaders object containing the MimeHeader          objects</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createAttachmentPart">
                        <comment>
                            <lead>Creates an AttachmentPart object and populates it with  the specified data of the specified content type.</lead>
                            <detail> The type of the  Object should correspond to the value given for the  Content-Type.</detail>
                            <see/>
                            <see/>
                        </comment>
                        <parameters>
                            <parameter name="content" package="java.lang" type="Object">
                                <comment>an Object containing the content for the            AttachmentPart object to be created</comment>
                            </parameter>
                            <parameter name="contentType" package="java.lang" type="String">
                                <comment>a String object giving the type of content;            examples are &quot;text/xml&quot;, &quot;text/plain&quot;, and &quot;image/jpeg&quot;</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="AttachmentPart">
                            <comment>a new AttachmentPart object that contains the          given data</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="saveChanges">
                        <comment>
                            <lead>Updates this SOAPMessage object with all the changes that  have been made to it.</lead>
                            <see class="SOAPMessage" member="writeTo(OutputStream)" package="jakarta.xml.soap"/>
                            <detail> This method is called automatically when  SOAPMessage#writeTo(OutputStream) is  called. However, if  changes are made to a message that was received or to one that has  already been sent, the method saveChanges needs to be  called explicitly in order to save the changes. The method saveChanges  also generates any changes that can be read back (for example, a  MessageId in profiles that support a message id). All MIME headers in a  message that is created for sending purposes are guaranteed to have  valid values only after saveChanges has been called.    In addition, this method marks the point at which the data from all  constituent AttachmentPart objects are pulled into the  message.  </detail>
                        </comment>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException"/>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="saveRequired">
                        <comment>
                            <lead>Indicates whether this SOAPMessage object needs to have  the method saveChanges called on it.</lead>
                        </comment>
                        <returns type="boolean">
                            <comment>true if saveChanges needs to be          called; false otherwise.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="writeTo">
                        <comment>
                            <lead>Writes this SOAPMessage object to the given output  stream.</lead>
                            <detail> The externalization format is as defined by the SOAP 1.1 with  Attachments specification.    If there are no attachments, just an XML stream is written out. For  those messages that have attachments, writeTo writes a  MIME-encoded byte stream.    Note that this method does not write the transport-specific MIME Headers   of the Message</detail>
                        </comment>
                        <parameters>
                            <parameter name="out" package="java.io" type="OutputStream">
                                <comment>the OutputStream object to which this SOAPMessage            object will be written</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was a problem in externalizing this SOAP message</throw>
                            <throw name="java.io.IOException">if an I/O error occurs</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="setProperty">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Associates the specified value with the specified property.</lead>
                            <see class="SOAPMessage" member="WRITE_XML_DECLARATION" package="jakarta.xml.soap"/>
                            <see class="SOAPMessage" member="CHARACTER_SET_ENCODING" package="jakarta.xml.soap"/>
                            <detail> If there was  already a value associated with this property, the old value is  replaced.    The valid property names include  SOAPMessage#WRITE_XML_DECLARATION  and  SOAPMessage#CHARACTER_SET_ENCODING. All of these standard SAAJ  properties are prefixed by &quot;jakarta.xml.soap&quot;. Vendors may also add  implementation specific properties. These properties must be prefixed  with package names that are unique to the vendor.    Setting the property WRITE_XML_DECLARATION to &quot;true&quot;  will cause an XML Declaration to be written out at the start of the SOAP  message. The default value of &quot;false&quot; suppresses this declaration.    The property CHARACTER_SET_ENCODING defaults to the value  &quot;utf-8&quot; which causes the SOAP message to be encoded using  UTF-8. Setting CHARACTER_SET_ENCODING to &quot;utf-16&quot;  causes the SOAP message to be encoded using UTF-16.    Some implementations may allow encodings in addition to UTF-8 and  UTF-16. Refer to your vendor&apos;s documentation for details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="property" package="java.lang" type="String">
                                <comment>the property with which the specified value is to be            associated.</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="Object">
                                <comment>the value to be associated with the specified property</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the property name is not recognized.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getProperty">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Retrieves value of the specified property.</lead>
                        </comment>
                        <parameters>
                            <parameter name="property" package="java.lang" type="String">
                                <comment>the name of the property to retrieve</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>the value associated with the named property or null          if no such property exists.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the property name is not recognized.</throw>
                        </throws>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="SOAPFactory">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>SOAPFactory is a factory for creating various objects  that exist in the SOAP XML tree.</lead>
                    <see class="SOAPHeaderElement" package="jakarta.xml.soap"/>
                    <see class="SOAPBodyElement" package="jakarta.xml.soap"/>
                    <see class="SOAPEnvelope" package="jakarta.xml.soap"/>
                    <see class="SOAPElement" package="jakarta.xml.soap"/>
                    <detail>   SOAPFactory can be  used to create XML fragments that will eventually end up in the  SOAP part. These fragments can be inserted as children of the  SOAPHeaderElement or SOAPBodyElement or  SOAPEnvelope or other SOAPElement objects.   SOAPFactory also has methods to create  jakarta.xml.soap.Detail objects as well as  java.xml.soap.Name objects.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="createElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a SOAPElement object from an existing DOM   Element.</lead>
                            <detail> If the DOM Element that is passed in  as an argument is already a SOAPElement then this method   must return it unmodified without any further work. Otherwise, a new  SOAPElement is created and a deep copy is made of the   domElement argument. The concrete type of the return value  will depend on the name of the domElement argument. If any  part of the tree rooted in domElement violates SOAP rules, a   SOAPException will be thrown.</detail>
                        </comment>
                        <parameters>
                            <parameter name="domElement" package="org.w3c.dom" type="Element">
                                <comment>- the Element to be copied.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>a new SOAPElement that is a copy of domElement.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createElement">
                        <comment>
                            <lead>Creates a SOAPElement object initialized with the  given Name object.</lead>
                            <detail> The concrete type of the return value  will depend on the name given to the new SOAPElement. For   instance, a new SOAPElement with the name   &quot;{http://www.w3.org/2003/05/soap-envelope}Envelope&quot; would cause a   SOAPEnvelope that supports SOAP 1.2 behavior to be created.</detail>
                            <see class="SOAPFactory" member="createElement(javax.xml.namespace.QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object with the XML name for              the new element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was          created</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="createElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a SOAPElement object initialized with the  given QName object.</lead>
                            <detail> The concrete type of the return value  will depend on the name given to the new SOAPElement. For   instance, a new SOAPElement with the name   &quot;{http://www.w3.org/2003/05/soap-envelope}Envelope&quot; would cause a   SOAPEnvelope that supports SOAP 1.2 behavior to be created.</detail>
                            <see class="SOAPFactory" member="createElement(Name)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>a QName object with the XML name for              the new element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was          created</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createElement">
                        <comment>
                            <lead>Creates a SOAPElement object initialized with the  given local name.</lead>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name for              the new element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was          created</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createElement">
                        <comment>
                            <lead>Creates a new SOAPElement object with the given  local name, prefix and uri.</lead>
                            <detail> The concrete type of the return value  will depend on the name given to the new SOAPElement. For   instance, a new SOAPElement with the name   &quot;{http://www.w3.org/2003/05/soap-envelope}Envelope&quot; would cause a   SOAPEnvelope that supports SOAP 1.2 behavior to be created.</detail>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name                   for the new element</comment>
                            </parameter>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>the prefix for this SOAPElement</comment>
                            </parameter>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>a String giving the URI of the             namespace to which the new element belongs</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createDetail">
                        <comment>
                            <lead>Creates a new Detail object which serves as a container  for DetailEntry objects.</lead>
                            <detail>    This factory method creates Detail objects for use in  situations where it is not practical to use the SOAPFault  abstraction.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="Detail">
                            <comment>a Detail object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createFault">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new SOAPFault object initialized with the given reasonText   and faultCode</lead>
                        </comment>
                        <parameters>
                            <parameter name="reasonText" package="java.lang" type="String">
                                <comment>the ReasonText/FaultString for the fault</comment>
                            </parameter>
                            <parameter name="faultCode" package="javax.xml.namespace" type="QName">
                                <comment>the FaultCode for the fault</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPFault">
                            <comment>a SOAPFault object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createFault">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new default SOAPFault object</lead>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPFault">
                            <comment>a SOAPFault object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createName">
                        <comment>
                            <lead>Creates a new Name object initialized with the  given local name, namespace prefix, and namespace URI.</lead>
                            <detail>    This factory method creates Name objects for use in  situations where it is not practical to use the SOAPEnvelope  abstraction.</detail>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name</comment>
                            </parameter>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>a String giving the prefix of the namespace</comment>
                            </parameter>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>a String giving the URI of the namespace</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="Name">
                            <comment>a Name object initialized with the given          local name, namespace prefix, and namespace URI</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createName">
                        <comment>
                            <lead>Creates a new Name object initialized with the  given local name.</lead>
                            <detail>    This factory method creates Name objects for use in  situations where it is not practical to use the SOAPEnvelope  abstraction.</detail>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="Name">
                            <comment>a Name object initialized with the given          local name</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public static" name="newInstance">
                        <comment>
                            <lead>Creates a new SOAPFactory object that is an instance of  the default implementation (SOAP 1.1),   This method uses the following ordered lookup procedure to determine the SOAPFactory implementation class to load:      Use the jakarta.xml.soap.SOAPFactory system property.</lead>
                            <detail>    Use the properties file &quot;lib/jaxm.properties&quot; in the JRE directory. This configuration file is in standard  java.util.Properties format and contains the fully qualified name of the implementation class with the key being the  system property defined above.    Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API  will look for a classname in the file META-INF/services/jakarta.xml.soap.SOAPFactory in jars available to the runtime.    Use the SAAJMetaFactory instance to locate the SOAPFactory implementation class.  </detail>
                            <see class="SAAJMetaFactory" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPFactory">
                            <comment>a new instance of a SOAPFactory</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error creating the             default SOAPFactory</throw>
                        </throws>
                    </method>
                    <method modifiers="public static" name="newInstance">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new SOAPFactory object that is an instance of  the specified implementation, this method uses the SAAJMetaFactory to   locate the implementation class and create the SOAPFactory instance.</lead>
                            <see class="SAAJMetaFactory" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="protocol" package="java.lang" type="String">
                                <comment>a string constant representing the protocol of the                    specified SOAP factory implementation. May be                    either DYNAMIC_SOAP_PROTOCOL,                    DEFAULT_SOAP_PROTOCOL (which is the same                    as) SOAP_1_1_PROTOCOL, or                    SOAP_1_2_PROTOCOL.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPFactory">
                            <comment>a new instance of a SOAPFactory</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error creating the             specified SOAPFactory</throw>
                        </throws>
                    </method>
                </methods>
            </class>
            <class modifiers="public" name="SOAPException">
                <extends name="Exception" package="java.lang"/>
                <superclasses>
                    <superclass name="Throwable" package="java.lang"/>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <comment>
                    <lead>An exception that signals that a SOAP exception has occurred.</lead>
                    <detail> A  SOAPException object may contain a String  that gives the reason for the exception, an embedded  Throwable object, or both. This class provides methods  for retrieving reason messages and for retrieving the embedded  Throwable object.    Typical reasons for throwing a SOAPException  object are problems such as difficulty setting a header, not being  able to send a message, and not being able to get a connection with  the provider.  Reasons for embedding a Throwable  object include problems such as input/output errors or a parsing  problem, such as an error in parsing a header.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a SOAPException object with no  reason or embedded Throwable object.</lead>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a SOAPException object with the given  String as the reason for the exception being thrown.</lead>
                        </comment>
                        <parameters>
                            <parameter name="reason" package="java.lang" type="String">
                                <comment>a description of what caused the exception</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a SOAPException object with the given  String as the reason for the exception being thrown  and the given Throwable object as an embedded  exception.</lead>
                        </comment>
                        <parameters>
                            <parameter name="reason" package="java.lang" type="String">
                                <comment>a description of what caused the exception</comment>
                            </parameter>
                            <parameter name="cause" package="java.lang" type="Throwable">
                                <comment>a Throwable object that is to         be embedded in this SOAPException object</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a SOAPException object initialized  with the given Throwable object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="cause" package="java.lang" type="Throwable"/>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getMessage">
                        <comment>
                            <lead>Returns the detail message for this SOAPException  object.</lead>
                            <detail>    If there is an embedded Throwable object, and if the  SOAPException object has no detail message of its  own, this method will return the detail message from the embedded  Throwable object.</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the error or warning message for this          SOAPException or, if it has none, the          message of the embedded Throwable object,          if there is one</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getCause">
                        <comment>
                            <lead>Returns the Throwable object embedded in this  SOAPException if there is one.</lead>
                            <detail> Otherwise, this method  returns null.</detail>
                        </comment>
                        <returns package="java.lang" type="Throwable">
                            <comment>the embedded Throwable object or null          if there is none</comment>
                        </returns>
                    </method>
                    <method modifiers="public synchronized" name="initCause">
                        <comment>
                            <lead>Initializes the cause field of this SOAPException  object with the given Throwable object.</lead>
                            <see class="SOAPException" member="SOAPException(Throwable)" package="jakarta.xml.soap"/>
                            <see class="SOAPException" member="SOAPException(String,Throwable)" package="jakarta.xml.soap"/>
                            <detail>    This method can be called at most once.  It is generally called from  within the constructor or immediately after the constructor has  returned a new SOAPException object.  If this SOAPException object was created with the  constructor #SOAPException(Throwable) or  #SOAPException(String,Throwable), meaning that its  cause field already has a value, this method cannot be  called even once.</detail>
                        </comment>
                        <parameters>
                            <parameter name="cause" package="java.lang" type="Throwable">
                                <comment>the Throwable object that caused this          SOAPException object to be thrown.  The value of this          parameter is saved for later retrieval by the           #getCause() method.  A null value is          permitted and indicates that the cause is nonexistent or          unknown.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Throwable">
                            <comment>a reference to this SOAPException instance</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public" name="SOAPElementFactory">
                <extends name="Object" package="java.lang"/>
                <deprecated>- Use &lt;code&gt;jakarta.xml.soap.SOAPFactory&lt;/code&gt; for creating SOAPElements.</deprecated>
                <comment>
                    <lead>SOAPElementFactory is a factory for XML fragments that  will eventually end up in the SOAP part.</lead>
                    <detail> These fragments  can be inserted as children of the SOAPHeader or  SOAPBody or SOAPEnvelope.   Elements created using this factory do not have the properties  of an element that lives inside a SOAP header document. These  elements are copied into the XML document tree when they are  inserted.</detail>
                    <see class="SOAPFactory" package="jakarta.xml.soap"/>
                </comment>
                <methods>
                    <method modifiers="public" name="create">
                        <deprecated>Use  jakarta.xml.soap.SOAPFactory.createElement(jakarta.xml.soap.Name)  instead</deprecated>
                        <comment>
                            <lead>Create a SOAPElement object initialized with the  given Name object.</lead>
                            <see class="SOAPFactory" member="createElement(jakarta.xml.soap.Name)" package="jakarta.xml.soap"/>
                            <see class="SOAPFactory" member="createElement(javax.xml.namespace.QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object with the XML name for              the new element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was          created</comment>
                        </returns>
                        <deprecated>true</deprecated>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPElement object</throw>
                        </throws>
                        <deprecated>true</deprecated>
                    </method>
                    <method modifiers="public" name="create">
                        <deprecated>Use  jakarta.xml.soap.SOAPFactory.createElement(String localName) instead</deprecated>
                        <comment>
                            <lead>Create a SOAPElement object initialized with the  given local name.</lead>
                            <see class="SOAPFactory" member="createElement(java.lang.String)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name for              the new element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was          created</comment>
                        </returns>
                        <deprecated>true</deprecated>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPElement object</throw>
                        </throws>
                        <deprecated>true</deprecated>
                    </method>
                    <method modifiers="public" name="create">
                        <deprecated>Use  jakarta.xml.soap.SOAPFactory.createElement(String localName,                       String prefix,                       String uri)  instead</deprecated>
                        <comment>
                            <lead>Create a new SOAPElement object with the given  local name, prefix and uri.</lead>
                            <see class="SOAPFactory" member="createElement(java.lang.String, java.lang.String, java.lang.String)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name                   for the new element</comment>
                            </parameter>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>the prefix for this SOAPElement</comment>
                            </parameter>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>a String giving the URI of the             namespace to which the new element belongs</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement"/>
                        <deprecated>true</deprecated>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPElement object</throw>
                        </throws>
                        <deprecated>true</deprecated>
                    </method>
                    <method modifiers="public static" name="newInstance">
                        <comment>
                            <lead>Creates a new instance of SOAPElementFactory.</lead>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPElementFactory">
                            <comment>a new instance of a SOAPElementFactory</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error creating the             default SOAPElementFactory</throw>
                        </throws>
                        <deprecated>true</deprecated>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="SOAPConnection">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>A point-to-point connection that a client can use for sending messages  directly to a remote party (represented by a URL, for instance).</lead>
                    <see class="SOAPConnectionFactory" package="jakarta.xml.soap"/>
                    <detail>    The SOAPConnection class is optional. Some implementations may  not implement this interface in which case the call to  SOAPConnectionFactory.newInstance() (see below) will  throw an UnsupportedOperationException.    A client can obtain a SOAPConnection object using a  SOAPConnectionFactory object as in the following example:         SOAPConnectionFactory factory = SOAPConnectionFactory.newInstance();       SOAPConnection con = factory.createConnection();    A SOAPConnection object can be used to send messages  directly to a URL following the request/response paradigm.  That is,  messages are sent using the method call, which sends the  message and then waits until it gets a reply.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public abstract" name="call">
                        <comment>
                            <lead>Sends the given message to the specified endpoint and blocks until  it has returned the response.</lead>
                        </comment>
                        <parameters>
                            <parameter name="request" package="jakarta.xml.soap" type="SOAPMessage">
                                <comment>the SOAPMessage object to be sent</comment>
                            </parameter>
                            <parameter name="to" package="java.lang" type="Object">
                                <comment>an Object that identifies          where the message should be sent. It is required to          support Objects of type          java.lang.String,          java.net.URL, and when JAXM is present          javax.xml.messaging.URLEndpoint</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPMessage">
                            <comment>the SOAPMessage object that is the response to the          message that was sent</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="get">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Gets a message from a specific endpoint and blocks until it receives,</lead>
                        </comment>
                        <parameters>
                            <parameter name="to" package="java.lang" type="Object">
                                <comment>an Object that identifies where                   the request should be sent. Objects of type                  java.lang.String and                  java.net.URL must be supported.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPMessage">
                            <comment>the SOAPMessage object that is the response to the                   get message request</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="close">
                        <comment>
                            <lead>Closes this SOAPConnection object.</lead>
                        </comment>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                </methods>
            </class>
            <class modifiers="public" name="SAAJResult">
                <extends name="DOMResult" package="javax.xml.transform.dom"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <author>XWS-Security Development Team</author>
                <since>SAAJ 1.3</since>
                <comment>
                    <lead>Acts as a holder for the results of a JAXP transformation or a JAXB   marshalling, in the form of a SAAJ tree.</lead>
                    <see class="SAAJResult" member="getResult()" package="jakarta.xml.soap"/>
                    <see class="DOMResult" member="getNode()" package="javax.xml.transform.dom"/>
                    <detail> These results should be accessed  by using the #getResult() method. The DOMResult#getNode()  method should be avoided in almost all cases.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a SAAJResult that will present results in the form  of a SAAJ tree that supports the default (SOAP 1.1) protocol.</lead>
                            <see class="DOMResult" member="getNode()" package="javax.xml.transform.dom"/>
                            <detail>     This kind of SAAJResult is meant for use in situations where the   results will be used as a parameter to a method that takes a parameter   whose type, such as SOAPElement, is drawn from the SAAJ   API. When used in a transformation, the results are populated into the   SOAPPart of a SOAPMessage that is created internally.  The SOAPPart returned by DOMResult#getNode()   is not guaranteed to be well-formed.</detail>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a SAAJResult that will present results in the form  of a SAAJ tree that supports the specified protocol.</lead>
                            <see class="DOMResult" member="getNode()" package="javax.xml.transform.dom"/>
                            <detail> The   DYNAMIC_SOAP_PROTOCOL is ambiguous in this context and will  cause this constructor to throw an UnsupportedOperationException.     This kind of SAAJResult is meant for use in situations where the   results will be used as a parameter to a method that takes a parameter   whose type, such as SOAPElement, is drawn from the SAAJ   API. When used in a transformation the results are populated into the   SOAPPart of a SOAPMessage that is created   internally. The SOAPPart returned by DOMResult#getNode()   is not guaranteed to be well-formed.</detail>
                        </comment>
                        <parameters>
                            <parameter name="protocol" package="java.lang" type="String">
                                <comment>- the name of the SOAP protocol that the resulting SAAJ                        tree should support</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a SAAJResult that will write the results into the  SOAPPart of the supplied SOAPMessage.</lead>
                            <detail>   In the normal case these results will be written using DOM APIs and,   as a result, the finished SOAPPart will not be guaranteed   to be well-formed unless the data used to create it is also well formed.   When used in a transformation the validity of the SOAPMessage   after the transformation can be guaranteed only by means outside SAAJ   specification.</detail>
                        </comment>
                        <parameters>
                            <parameter name="message" package="jakarta.xml.soap" type="SOAPMessage">
                                <comment>- the message whose SOAPPart will be                    populated as a result of some transformation or                    marshalling operation</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a SAAJResult that will write the results as a   child node of the SOAPElement specified.</lead>
                            <detail> In the normal  case these results will be written using DOM APIs and as a result may  invalidate the structure of the SAAJ tree. This kind of   SAAJResult should only be used when the validity of the  incoming data can be guaranteed by means outside of the SAAJ   specification.</detail>
                        </comment>
                        <parameters>
                            <parameter name="rootNode" package="jakarta.xml.soap" type="SOAPElement">
                                <comment>- the root to which the results will be appended</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getResult">
                        <comment/>
                        <returns package="jakarta.xml.soap" type="Node">
                            <comment>the resulting Tree that was created under the specified root Node.</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="SAAJMetaFactory">
                <extends name="Object" package="java.lang"/>
                <author>SAAJ RI Development Team</author>
                <since>SAAJ 1.3</since>
                <comment>
                    <lead>The access point for the implementation classes of the factories defined in the  SAAJ API.</lead>
                    <detail> All of the newInstance methods defined on factories in   SAAJ 1.3 defer to instances of this class to do the actual object creation.   The implementations of newInstance() methods (in SOAPFactory and MessageFactory)  that existed in SAAJ 1.2 have been updated to also delegate to the SAAJMetaFactory when the SAAJ 1.2  defined lookup fails to locate the Factory implementation class name.       SAAJMetaFactory is a service provider interface. There are no public methods on this  class.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="protected">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="protected abstract" name="newMessageFactory">
                        <comment>
                            <lead>Creates a MessageFactory object for   the given String protocol.</lead>
                            <see class="SOAPConstants" member="SOAP_1_1_PROTOCOL" package="jakarta.xml.soap"/>
                            <see class="SOAPConstants" member="SOAP_1_2_PROTOCOL" package="jakarta.xml.soap"/>
                            <see class="SOAPConstants" member="DYNAMIC_SOAP_PROTOCOL" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="protocol" package="java.lang" type="String">
                                <comment>a String indicating the protocol</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="MessageFactory"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             MessageFactory</throw>
                        </throws>
                    </method>
                    <method modifiers="protected abstract" name="newSOAPFactory">
                        <comment>
                            <lead>Creates a SOAPFactory object for   the given String protocol.</lead>
                            <see class="SOAPConstants" member="SOAP_1_1_PROTOCOL" package="jakarta.xml.soap"/>
                            <see class="SOAPConstants" member="SOAP_1_2_PROTOCOL" package="jakarta.xml.soap"/>
                            <see class="SOAPConstants" member="DYNAMIC_SOAP_PROTOCOL" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="protocol" package="java.lang" type="String">
                                <comment>a String indicating the protocol</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPFactory"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the             SOAPFactory</throw>
                        </throws>
                    </method>
                </methods>
            </class>
            <class modifiers="public" name="MimeHeaders">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>A container for MimeHeader objects, which represent  the MIME headers present in a MIME part of a message.</lead>
                    <detail>   This class is used primarily when an application wants to  retrieve specific attachments based on certain MIME headers and  values. This class will most likely be used by implementations of  AttachmentPart and other MIME dependent parts of the SAAJ  API.</detail>
                    <see class="SOAPMessage" member="getAttachments" package="jakarta.xml.soap"/>
                    <see class="AttachmentPart" package="jakarta.xml.soap"/>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a default MimeHeaders object initialized with  an empty Vector object.</lead>
                        </comment>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getHeader">
                        <comment>
                            <lead>Returns all of the values for the specified header as an array of  String objects.</lead>
                            <see class="MimeHeaders" member="setHeader" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>the name of the header for which values will be returned</comment>
                            </parameter>
                        </parameters>
                        <returns dimension="[]" package="java.lang" type="String">
                            <comment>a String array with all of the values for the          specified header</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setHeader">
                        <comment>
                            <lead>Replaces the current value of the first header entry whose name matches  the given name with the given value, adding a new header if no existing header  name matches.</lead>
                            <detail> This method also removes all matching headers after the first one.    Note that RFC822 headers can contain only US-ASCII characters.</detail>
                            <see class="MimeHeaders" member="getHeader" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>a String with the name of the header for           which to search</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String with the value that will replace the           current value of the specified header</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="addHeader">
                        <comment>
                            <lead>Adds a MimeHeader object with the specified name and value  to this MimeHeaders object&apos;s list of headers.</lead>
                            <detail>    Note that RFC822 headers can contain only US-ASCII characters.</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>a String with the name of the header to           be added</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String with the value of the header to           be added</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="removeHeader">
                        <comment>
                            <lead>Remove all MimeHeader objects whose name matches the  given name.</lead>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>a String with the name of the header for           which to search</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="removeAllHeaders">
                        <comment>
                            <lead>Removes all the header entries from this MimeHeaders object.</lead>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getAllHeaders">
                        <comment>
                            <lead>Returns all the MimeHeaders in this MimeHeaders object.</lead>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over this MimeHeaders           object&apos;s list of MimeHeader objects</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getMatchingHeaders">
                        <comment>
                            <lead>Returns all the MimeHeader objects whose name matches  a name in the given array of names.</lead>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="names" package="java.lang" type="String">
                                <comment>an array of String objects with the names          for which to search</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over the MimeHeader           objects whose name matches one of the names in the given list</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getNonMatchingHeaders">
                        <comment>
                            <lead>Returns all of the MimeHeader objects whose name does not  match a name in the given array of names.</lead>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="names" package="java.lang" type="String">
                                <comment>an array of String objects with the names          for which to search</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over the MimeHeader           objects whose name does not match one of the names in the given list</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public" name="MimeHeader">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>An object that stores a MIME header name and its value.</lead>
                    <detail> One or more  MimeHeader objects may be contained in a MimeHeaders  object.</detail>
                    <see class="MimeHeaders" package="jakarta.xml.soap"/>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a MimeHeader object initialized with the given  name and value.</lead>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>a String giving the name of the header</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String giving the value of the header</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getName">
                        <comment>
                            <lead>Returns the name of this MimeHeader object.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the name of the header as a String</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getValue">
                        <comment>
                            <lead>Returns the value of this MimeHeader object.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the value of the header as a String</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="MessageFactory">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>A factory for creating SOAPMessage objects.</lead>
                    <detail>    A SAAJ client can create a MessageFactory object  using the method newInstance, as shown in the following  lines of code.          MessageFactory mf = MessageFactory.newInstance();        MessageFactory mf12 = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);      All MessageFactory objects, regardless of how they are  created, will produce SOAPMessage objects that  have the following elements by default:     A SOAPPart object   A SOAPEnvelope object   A SOAPBody object   A SOAPHeader object    In some cases, specialized MessageFactory objects may be obtained that produce messages   prepopulated with additional entries in the SOAPHeader object and the    SOAPBody object.   The content of a new SOAPMessage object depends on which of the two  MessageFactory methods is used to create it.     createMessage()        This is the method clients would normally use to create a request message.   createMessage(MimeHeaders, java.io.InputStream) -- message has        content from the InputStream object and headers from the        MimeHeaders object          This method can be used internally by a service implementation to         create a message that is a response to a request.  </detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public static" name="newInstance">
                        <comment>
                            <lead>Creates a new MessageFactory object that is an instance  of the default implementation (SOAP 1.1),   This method uses the following ordered lookup procedure to determine the MessageFactory implementation class to load:      Use the jakarta.xml.soap.MessageFactory system property.</lead>
                            <detail>    Use the properties file &quot;lib/jaxm.properties&quot; in the JRE directory. This configuration file is in standard  java.util.Properties format and contains the fully qualified name of the implementation class with the key being the  system property defined above.    Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API  will look for a classname in the file META-INF/services/jakarta.xml.soap.MessageFactory in jars available to the runtime.    Use the SAAJMetaFactory instance to locate the MessageFactory implementation class.  </detail>
                            <see class="SAAJMetaFactory" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="jakarta.xml.soap" type="MessageFactory">
                            <comment>a new instance of a MessageFactory</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in creating the             default implementation of the             MessageFactory.</throw>
                        </throws>
                    </method>
                    <method modifiers="public static" name="newInstance">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new MessageFactory object that is an instance  of the specified implementation.</lead>
                            <detail>  May be a dynamic message factory,  a SOAP 1.1 message factory, or a SOAP 1.2 message factory. A dynamic  message factory creates messages based on the MIME headers specified  as arguments to the createMessage method.   This method uses the SAAJMetaFactory to locate the implementation class   and create the MessageFactory instance.</detail>
                            <see class="SAAJMetaFactory" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="protocol" package="java.lang" type="String">
                                <comment>a string constant representing the class of the                    specified message factory implementation. May be                    either DYNAMIC_SOAP_PROTOCOL,                    DEFAULT_SOAP_PROTOCOL (which is the same                    as) SOAP_1_1_PROTOCOL, or                    SOAP_1_2_PROTOCOL.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="MessageFactory">
                            <comment>a new instance of a MessageFactory</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in creating the             specified implementation of  MessageFactory.</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createMessage">
                        <comment>
                            <lead>Creates a new SOAPMessage object with the default  SOAPPart, SOAPEnvelope, SOAPBody,  and SOAPHeader objects.</lead>
                            <detail> Profile-specific message factories  can choose to prepopulate the SOAPMessage object with  profile-specific headers.    Content can be added to this message&apos;s SOAPPart object, and  the message can be sent &quot;as is&quot; when a message containing only a SOAP part  is sufficient. Otherwise, the SOAPMessage object needs  to create one or more AttachmentPart objects and  add them to itself. Any content that is not in XML format must be  in an AttachmentPart object.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPMessage">
                            <comment>a new SOAPMessage object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createMessage">
                        <comment>
                            <lead>Internalizes the contents of the given InputStream object into a  new SOAPMessage object and returns the SOAPMessage  object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="headers" package="jakarta.xml.soap" type="MimeHeaders">
                                <comment>the transport-specific headers passed to the         message in a transport-independent fashion for creation of the         message</comment>
                            </parameter>
                            <parameter name="in" package="java.io" type="InputStream">
                                <comment>the InputStream object that contains the data            for a message</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPMessage">
                            <comment>a new SOAPMessage object containing the data from          the given InputStream object</comment>
                        </returns>
                        <throws>
                            <throw name="java.io.IOException">if there is a problem in reading data from             the input stream</throw>
                            <throw name="jakarta.xml.soap.SOAPException">may be thrown if the message is invalid</throw>
                        </throws>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="AttachmentPart">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>A single attachment to a SOAPMessage object.</lead>
                    <detail> A SOAPMessage  object may contain zero, one, or many AttachmentPart objects.  Each AttachmentPart object consists of two parts,  application-specific content and associated MIME headers. The  MIME headers consists of name/value pairs that can be used to  identify and describe the content.    An AttachmentPart object must conform to certain standards.    It must conform to       MIME [RFC2045] standards  It MUST contain content  The header portion MUST include the following header:       Content-Type        This header identifies the type of data in the content of an        AttachmentPart object and MUST conform to [RFC2045].        The following is an example of a Content-Type header:                Content-Type:  application/xml                The following line of code, in which ap is an        AttachmentPart object, sets the header shown in         the previous example.                ap.setMimeHeader(&quot;Content-Type&quot;, &quot;application/xml&quot;);                   There are no restrictions on the content portion of an   AttachmentPart object. The content may be anything from a  simple plain text object to a complex XML document or image file.     An AttachmentPart object is created with the method  SOAPMessage.createAttachmentPart. After setting its MIME headers,   the AttachmentPart object is added to the message  that created it with the method SOAPMessage.addAttachmentPart.     The following code fragment, in which m is a  SOAPMessage object and contentStringl is a  String, creates an instance of AttachmentPart,  sets the AttachmentPart object with some content and   header information, and adds the AttachmentPart object to   the SOAPMessage object.         AttachmentPart ap1 = m.createAttachmentPart();      ap1.setContent(contentString1, &quot;text/plain&quot;);      m.addAttachmentPart(ap1);        The following code fragment creates and adds a second   AttachmentPart instance to the same message. jpegData   is a binary byte buffer representing the jpeg file.        AttachmentPart ap2 = m.createAttachmentPart();      byte[] jpegData =  ...;      ap2.setContent(new ByteArrayInputStream(jpegData), &quot;image/jpeg&quot;);      m.addAttachmentPart(ap2);      The getContent method retrieves the contents and header from   an AttachmentPart object. Depending on the  DataContentHandler objects present, the returned  Object can either be a typed Java object corresponding  to the MIME type or an InputStream object that contains the  content as bytes.        String content1 = ap1.getContent();      java.io.InputStream content2 = ap2.getContent();     The method clearContent removes all the content from an  AttachmentPart object but does not affect its header information.        ap1.clearContent();  </detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public abstract" name="getSize">
                        <comment>
                            <lead>Returns the number of bytes in this AttachmentPart  object.</lead>
                        </comment>
                        <returns type="int">
                            <comment>the size of this AttachmentPart object in bytes          or -1 if the size cannot be determined</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the content of this attachment is             corrupted of if there was an exception while trying             to determine the size.</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="clearContent">
                        <comment>
                            <lead>Clears out the content of this AttachmentPart object.</lead>
                            <detail>  The MIME header portion is left untouched.</detail>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getContent">
                        <comment>
                            <lead>Gets the content of this AttachmentPart object as a Java  object.</lead>
                            <detail> The type of the returned Java object depends on (1) the  DataContentHandler object that is used to interpret the bytes  and (2) the Content-Type given in the header.    For the MIME content types &quot;text/plain&quot;, &quot;text/html&quot; and &quot;text/xml&quot;, the  DataContentHandler object does the conversions to and   from the Java types corresponding to the MIME types.  For other MIME types,the DataContentHandler object   can return an InputStream object that contains the content data  as raw bytes.    A SAAJ-compliant implementation must, as a minimum, return a  java.lang.String object corresponding to any content  stream with a Content-Type value of  text/plain, a  javax.xml.transform.stream.StreamSource object corresponding to a  content stream with a Content-Type value of  text/xml, a java.awt.Image object  corresponding to a content stream with a  Content-Type value of image/gif or  image/jpeg.  For those content types that an   installed DataContentHandler object does not understand, the  DataContentHandler object is required to return a  java.io.InputStream object with the raw bytes.</detail>
                        </comment>
                        <returns package="java.lang" type="Object">
                            <comment>a Java object with the content of this AttachmentPart          object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is no content set into this             AttachmentPart object or if there was a data             transformation error</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="getRawContent">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Gets the content of this AttachmentPart object as an   InputStream as if a call had been made to getContent and no  DataContentHandler had been registered for the   content-type of this AttachmentPart.</lead>
                            <see class="AttachmentPart" member="getRawContentBytes" package="jakarta.xml.soap"/>
                            <detail>   Note that reading from the returned InputStream would result in consuming   the data in the stream. It is the responsibility of the caller to reset  the InputStream appropriately before calling a Subsequent API. If a copy  of the raw attachment content is required then the #getRawContentBytes API   should be used instead.</detail>
                            <see class="AttachmentPart" member="getRawContentBytes" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.io" type="InputStream">
                            <comment>an InputStream from which the raw data contained by       the AttachmentPart can be accessed.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is no content set into this        AttachmentPart object or if there was a data        transformation error.</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="getRawContentBytes">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Gets the content of this AttachmentPart object as a   byte[] array as if a call had been made to getContent and no  DataContentHandler had been registered for the   content-type of this AttachmentPart.</lead>
                        </comment>
                        <returns dimension="[]" type="byte">
                            <comment>a byte[] array containing the raw data of the        AttachmentPart.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is no content set into this        AttachmentPart object or if there was a data        transformation error.</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="getBase64Content">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns an InputStream which can be used to obtain the   content of AttachmentPart  as Base64 encoded   character data, this method would base64 encode the raw bytes   of the attachment and return.</lead>
                        </comment>
                        <returns package="java.io" type="InputStream">
                            <comment>an InputStream from which the Base64 encoded        AttachmentPart can be read.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is no content set into this        AttachmentPart object or if there was a data        transformation error.</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="setContent">
                        <comment>
                            <lead>Sets the content of this attachment part to that of the given   Object and sets the value of the Content-Type  header to the given type.</lead>
                            <detail> The type of the  Object should correspond to the value given for the  Content-Type. This depends on the particular  set of DataContentHandler objects in use.</detail>
                            <see class="AttachmentPart" member="getContent" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="object" package="java.lang" type="Object">
                                <comment>the Java object that makes up the content for                this attachment part</comment>
                            </parameter>
                            <parameter name="contentType" package="java.lang" type="String">
                                <comment>the MIME string that specifies the type of                   the content</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="setRawContent">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Sets the content of this attachment part to that contained by the  InputStream content and sets the value of the  Content-Type header to the value contained in   contentType.</lead>
                            <detail>     A subsequent call to getSize() may not be an exact measure    of the content size.</detail>
                        </comment>
                        <parameters>
                            <parameter name="content" package="java.io" type="InputStream">
                                <comment>the raw data to add to the attachment part</comment>
                            </parameter>
                            <parameter name="contentType" package="java.lang" type="String">
                                <comment>the value to set into the Content-Type   header</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if an there is an error in setting the content</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="setRawContentBytes">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Sets the content of this attachment part to that contained by the  byte[] array content and sets the value of the  Content-Type header to the value contained in   contentType.</lead>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="content" type="byte">
                                <comment>the raw data to add to the attachment part</comment>
                            </parameter>
                            <parameter name="offset" type="int">
                                <comment>the offset in the byte array of the content</comment>
                            </parameter>
                            <parameter name="len" type="int">
                                <comment>the number of bytes that form the content</comment>
                            </parameter>
                            <parameter name="contentType" package="java.lang" type="String">
                                <comment>the value to set into the Content-Type   header</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if an there is an error in setting the content   or content is null</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="setBase64Content">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Sets the content of this attachment part from the Base64 source  InputStream  and sets the value of the  Content-Type header to the value contained in   contentType, This method would first decode the base64   input and write the resulting raw bytes to the attachment.</lead>
                            <detail>      A subsequent call to getSize() may not be an exact measure    of the content size.</detail>
                        </comment>
                        <parameters>
                            <parameter name="content" package="java.io" type="InputStream">
                                <comment>the base64 encoded data to add to the attachment part</comment>
                            </parameter>
                            <parameter name="contentType" package="java.lang" type="String">
                                <comment>the value to set into the Content-Type   header</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if an there is an error in setting the content</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="getDataHandler">
                        <comment>
                            <lead>Gets the DataHandler object for this AttachmentPart  object.</lead>
                        </comment>
                        <returns type="DataHandler">
                            <comment>the DataHandler object associated with this          AttachmentPart object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is no data in  this AttachmentPart object</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="setDataHandler">
                        <comment>
                            <lead>Sets the given DataHandler object as the data handler  for this AttachmentPart object.</lead>
                            <detail> Typically, on an incoming  message, the data handler is automatically set. When  a message is being created and populated with content, the  setDataHandler method can be used to get data from  various data sources into the message.</detail>
                        </comment>
                        <parameters>
                            <parameter name="dataHandler" type="DataHandler">
                                <comment>the DataHandler object to be set</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getContentId">
                        <comment>
                            <lead>Gets the value of the MIME header whose name is &quot;Content-ID&quot;.</lead>
                            <see class="AttachmentPart" member="setContentId" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the value of the           &quot;Content-ID&quot; header or null if there           is none</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getContentLocation">
                        <comment>
                            <lead>Gets the value of the MIME header whose name is &quot;Content-Location&quot;.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the value of the           &quot;Content-Location&quot; header or null if there           is none</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getContentType">
                        <comment>
                            <lead>Gets the value of the MIME header whose name is &quot;Content-Type&quot;.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the value of the           &quot;Content-Type&quot; header or null if there           is none</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setContentId">
                        <comment>
                            <lead>Sets the MIME header whose name is &quot;Content-ID&quot; with the given value.</lead>
                            <see class="AttachmentPart" member="getContentId" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="contentId" package="java.lang" type="String">
                                <comment>a String giving the value of the           &quot;Content-ID&quot; header</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="setContentLocation">
                        <comment>
                            <lead>Sets the MIME header whose name is &quot;Content-Location&quot; with the given value.</lead>
                        </comment>
                        <parameters>
                            <parameter name="contentLocation" package="java.lang" type="String">
                                <comment>a String giving the value of the           &quot;Content-Location&quot; header</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="setContentType">
                        <comment>
                            <lead>Sets the MIME header whose name is &quot;Content-Type&quot; with the given value.</lead>
                        </comment>
                        <parameters>
                            <parameter name="contentType" package="java.lang" type="String">
                                <comment>a String giving the value of the           &quot;Content-Type&quot; header</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="removeMimeHeader">
                        <comment>
                            <lead>Removes all MIME headers that match the given name.</lead>
                        </comment>
                        <parameters>
                            <parameter name="header" package="java.lang" type="String">
                                <comment>the string name of the MIME header/s to                be removed</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="removeAllMimeHeaders">
                        <comment>
                            <lead>Removes all the MIME header entries.</lead>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getMimeHeader">
                        <comment>
                            <lead>Gets all the values of the header identified by the given  String.</lead>
                            <see class="AttachmentPart" member="setMimeHeader" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>the name of the header; example: &quot;Content-Type&quot;</comment>
                            </parameter>
                        </parameters>
                        <returns dimension="[]" package="java.lang" type="String">
                            <comment>a String array giving the value for the          specified header</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="setMimeHeader">
                        <comment>
                            <lead>Changes the first header entry that matches the given name  to the given value, adding a new header if no existing header  matches.</lead>
                            <detail> This method also removes all matching headers but the first.    Note that RFC822 headers can only contain US-ASCII characters.</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>a String giving the name of the header                    for which to search</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String giving the value to be set for                   the header whose name matches the given name</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="addMimeHeader">
                        <comment>
                            <lead>Adds a MIME header with the specified name and value to this  AttachmentPart object.</lead>
                            <detail>    Note that RFC822 headers can contain only US-ASCII characters.</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>a String giving the name of the header                    to be added</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String giving the value of the header                    to be added</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getAllMimeHeaders">
                        <comment>
                            <lead>Retrieves all the headers for this AttachmentPart object  as an iterator over the MimeHeader objects.</lead>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object with all of the Mime           headers for this AttachmentPart object</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getMatchingMimeHeaders">
                        <comment>
                            <lead>Retrieves all MimeHeader objects that match a name in  the given array.</lead>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="names" package="java.lang" type="String">
                                <comment>a String array with the name(s) of the         MIME headers to be returned</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>all of the MIME headers that match one of the names in the            given array as an Iterator object</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getNonMatchingMimeHeaders">
                        <comment>
                            <lead>Retrieves all MimeHeader objects whose name does  not match a name in the given array.</lead>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="names" package="java.lang" type="String">
                                <comment>a String array with the name(s) of the         MIME headers not to be returned</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>all of the MIME headers in this AttachmentPart object           except those that match one of the names in the            given array.  The nonmatching MIME headers are returned as an             Iterator object.</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="SOAPConnectionFactory">
                <extends name="Object" package="java.lang"/>
                <comment>
                    <lead>A factory for creating SOAPConnection objects.</lead>
                    <see class="SOAPConnection" package="jakarta.xml.soap"/>
                    <detail> Implementation of this class  is optional. If SOAPConnectionFactory.newInstance() throws an   UnsupportedOperationException then the implementation does not support the  SAAJ communication infrastructure. Otherwise SOAPConnection objects  can be created by calling createConnection() on the newly  created SOAPConnectionFactory object.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public static" name="newInstance">
                        <comment>
                            <lead>Creates an instance of the default  SOAPConnectionFactory object.</lead>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPConnectionFactory">
                            <comment>a new instance of a default          SOAPConnectionFactory object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error creating the             SOAPConnectionFactory</throw>
                            <throw name="java.lang.UnsupportedOperationException">if newInstance is not  supported.</throw>
                        </throws>
                    </method>
                    <method modifiers="public abstract" name="createConnection">
                        <comment>
                            <lead>Create a new SOAPConnection.</lead>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPConnection">
                            <comment>the new SOAPConnection object.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an exception creating the  SOAPConnection object.</throw>
                        </throws>
                    </method>
                </methods>
            </class>
        </classes>
        <interfaces>
            <interface modifiers="public " name="SOAPHeaderElement">
                <extends name="SOAPElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>An object representing the contents in the SOAP header part of the  SOAP envelope.</lead>
                    <detail>  The immediate children of a SOAPHeader object can  be represented only as SOAPHeaderElement objects.    A SOAPHeaderElement object can have other  SOAPElement objects as its children.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="setActor">
                        <comment>
                            <lead>Sets the actor associated with this SOAPHeaderElement  object to the specified actor.</lead>
                            <see class="SOAPHeaderElement" member="setRole(String)" package="jakarta.xml.soap"/>
                            <detail> The default value of an actor is:           SOAPConstants.URI_SOAP_ACTOR_NEXT    If this SOAPHeaderElement supports SOAP 1.2 then this call is  equivalent to #setRole(String)</detail>
                            <see class="SOAPHeaderElement" member="getActor" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="actorURI" package="java.lang" type="String">
                                <comment>a String giving the URI of the actor            to set</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="setRole">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Sets the Role associated with this SOAPHeaderElement  object to the specified Role.</lead>
                        </comment>
                        <parameters>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>- the URI of the Role</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in setting the role</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getActor">
                        <comment>
                            <lead>Returns the uri of the actor attribute of this  SOAPHeaderElement.</lead>
                            <see class="SOAPHeaderElement" member="getRole()" package="jakarta.xml.soap"/>
                            <detail>   If this SOAPHeaderElement supports SOAP 1.2 then this call is  equivalent to #getRole()</detail>
                            <see class="SOAPHeaderElement" member="setActor" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the URI of the actor</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getRole">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns the value of the Role attribute of this  SOAPHeaderElement.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the URI of the Role</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setMustUnderstand">
                        <comment>
                            <lead>Sets the mustUnderstand attribute for this SOAPHeaderElement  object to be either true or false.</lead>
                            <detail>    If the mustUnderstand attribute is on, the actor who receives the  SOAPHeaderElement must process it correctly. This  ensures, for example, that if the SOAPHeaderElement  object modifies the message, that the message is being modified correctly.</detail>
                            <see class="SOAPHeaderElement" member="getMustUnderstand" package="jakarta.xml.soap"/>
                            <see class="SOAPHeaderElement" member="setRelay" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="mustUnderstand" type="boolean">
                                <comment>true to set the mustUnderstand         attribute to true; false to set it to false</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getMustUnderstand">
                        <comment>
                            <lead>Returns the boolean value of the mustUnderstand attribute for this  SOAPHeaderElement.</lead>
                        </comment>
                        <returns type="boolean">
                            <comment>true if the mustUnderstand attribute of this         SOAPHeaderElement object is turned on; false          otherwise</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setRelay">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Sets the relay attribute for this SOAPHeaderElement to be   either true or false.</lead>
                            <detail>    The SOAP relay attribute is set to true to indicate that the SOAP header   block must be relayed by any node that is targeted by the header block   but not actually process it. This attribute is ignored on header blocks  whose mustUnderstand attribute is set to true or that are targeted at   the ultimate reciever (which is the default). The default value of this   attribute is false.</detail>
                            <see class="SOAPHeaderElement" member="setMustUnderstand" package="jakarta.xml.soap"/>
                            <see class="SOAPHeaderElement" member="getRelay" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="relay" type="boolean">
                                <comment>the new value of the relay attribute</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a problem in setting the   relay attribute.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getRelay">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns the boolean value of the relay attribute for this   SOAPHeaderElement</lead>
                            <see class="SOAPHeaderElement" member="getMustUnderstand" package="jakarta.xml.soap"/>
                            <see class="SOAPHeaderElement" member="setRelay" package="jakarta.xml.soap"/>
                        </comment>
                        <returns type="boolean">
                            <comment>true if the relay attribute is turned on;   false otherwise</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="SOAPHeader">
                <extends name="SOAPElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>A representation of the SOAP header  element.</lead>
                    <detail> A SOAP header element consists of XML data that affects  the way the application-specific content is processed by the message  provider. For example, transaction semantics, authentication information,  and so on, can be specified as the content of a SOAPHeader  object.    A SOAPEnvelope object contains an empty  SOAPHeader object by default. If the SOAPHeader  object, which is optional, is not needed, it can be retrieved and deleted  with the following line of code. The variable se is a  SOAPEnvelope object.         se.getHeader().detachNode();     A SOAPHeader object is created with the SOAPEnvelope  method addHeader. This method, which creates a new header and adds it  to the envelope, may be called only after the existing header has been removed.          se.getHeader().detachNode();       SOAPHeader sh = se.addHeader();      A SOAPHeader object can have only SOAPHeaderElement  objects as its immediate children. The method addHeaderElement  creates a new HeaderElement object and adds it to the  SOAPHeader object. In the following line of code, the  argument to the method addHeaderElement is a Name  object that is the name for the new HeaderElement object.         SOAPHeaderElement shElement = sh.addHeaderElement(name);  </detail>
                    <see class="SOAPHeaderElement" package="jakarta.xml.soap"/>
                </comment>
                <methods>
                    <method modifiers="public" name="addHeaderElement">
                        <comment>
                            <lead>Creates a new SOAPHeaderElement object initialized with the  specified name and adds it to this SOAPHeader object.</lead>
                            <see class="SOAPHeader" member="addHeaderElement(javax.xml.namespace.QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object with the name of the new         SOAPHeaderElement object</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPHeaderElement">
                            <comment>the new SOAPHeaderElement object that was           inserted into this SOAPHeader object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addHeaderElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new SOAPHeaderElement object initialized with the  specified qname and adds it to this SOAPHeader object.</lead>
                            <see class="SOAPHeader" member="addHeaderElement(Name)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>a QName object with the qname of the new         SOAPHeaderElement object</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPHeaderElement">
                            <comment>the new SOAPHeaderElement object that was           inserted into this SOAPHeader object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="examineMustUnderstandHeaderElements">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object  that have the specified actor and that have a MustUnderstand attribute  whose value is equivalent to true.</lead>
                            <detail>    In SOAP 1.2 the env:actor attribute is replaced by the env:role   attribute, but with essentially the same semantics.</detail>
                            <see class="SOAPHeader" member="examineHeaderElements" package="jakarta.xml.soap"/>
                            <see class="SOAPHeader" member="extractHeaderElements" package="jakarta.xml.soap"/>
                            <see class="SOAPConstants" member="URI_SOAP_ACTOR_NEXT" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="actor" package="java.lang" type="String">
                                <comment>a String giving the URI of the actor / role         for which to search</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over all the          SOAPHeaderElement objects that contain the specified           actor / role and are marked as MustUnderstand</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="examineHeaderElements">
                        <comment>
                            <lead>Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object  that have the specified actor.</lead>
                            <detail>   An actor is a global attribute that indicates the intermediate  parties that should process a message before it reaches its ultimate  receiver. An actor receives the message and processes it before sending  it on to the next actor. The default actor is the ultimate intended  recipient for the message, so if no actor attribute is included in a  SOAPHeader object, it is sent to the ultimate receiver  along with the message body.    In SOAP 1.2 the env:actor attribute is replaced by the env:role   attribute, but with essentially the same semantics.</detail>
                            <see class="SOAPHeader" member="extractHeaderElements" package="jakarta.xml.soap"/>
                            <see class="SOAPConstants" member="URI_SOAP_ACTOR_NEXT" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="actor" package="java.lang" type="String">
                                <comment>a String giving the URI of the actor / role         for which to search</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over all the          SOAPHeaderElement objects that contain the specified           actor / role</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="extractHeaderElements">
                        <comment>
                            <lead>Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object  that have the specified actor and detaches them  from this SOAPHeader object.</lead>
                            <detail>    This method allows an actor to process the parts of the  SOAPHeader object that apply to it and to remove  them before passing the message on to the next actor.    In SOAP 1.2 the env:actor attribute is replaced by the env:role   attribute, but with essentially the same semantics.</detail>
                            <see class="SOAPHeader" member="examineHeaderElements" package="jakarta.xml.soap"/>
                            <see class="SOAPConstants" member="URI_SOAP_ACTOR_NEXT" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="actor" package="java.lang" type="String">
                                <comment>a String giving the URI of the actor / role         for which to search</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over all the          SOAPHeaderElement objects that contain the specified           actor / role</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="addNotUnderstoodHeaderElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new NotUnderstood SOAPHeaderElement object initialized  with the specified name and adds it to this SOAPHeader object.</lead>
                            <detail>  This operation is supported only by SOAP 1.2.</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="javax.xml.namespace" type="QName">
                                <comment>a QName object with the name of the         SOAPHeaderElement object that was not understood.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPHeaderElement">
                            <comment>the new SOAPHeaderElement object that was           inserted into this SOAPHeader object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addUpgradeHeaderElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new Upgrade SOAPHeaderElement object initialized  with the specified List of supported SOAP URIs and adds it to this  SOAPHeader object.</lead>
                            <detail>  This operation is supported on both SOAP 1.1 and SOAP 1.2 header.</detail>
                        </comment>
                        <parameters>
                            <parameter name="supportedSOAPURIs" package="java.util" type="Iterator">
                                <comment>an Iterator object with the URIs of SOAP           versions supported.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPHeaderElement">
                            <comment>the new SOAPHeaderElement object that was           inserted into this SOAPHeader object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addUpgradeHeaderElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new Upgrade SOAPHeaderElement object initialized  with the specified array of supported SOAP URIs and adds it to this  SOAPHeader object.</lead>
                            <detail>  This operation is supported on both SOAP 1.1 and SOAP 1.2 header.</detail>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="supportedSoapUris" package="java.lang" type="String">
                                <comment>an array of the URIs of SOAP versions supported.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPHeaderElement">
                            <comment>the new SOAPHeaderElement object that was           inserted into this SOAPHeader object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addUpgradeHeaderElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new Upgrade SOAPHeaderElement object initialized  with the specified supported SOAP URI and adds it to this  SOAPHeader object.</lead>
                            <detail>  This operation is supported on both SOAP 1.1 and SOAP 1.2 header.</detail>
                        </comment>
                        <parameters>
                            <parameter name="supportedSoapUri" package="java.lang" type="String">
                                <comment>the URI of SOAP the version that is supported.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPHeaderElement">
                            <comment>the new SOAPHeaderElement object that was           inserted into this SOAPHeader object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="examineAllHeaderElements">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object.</lead>
                            <see class="SOAPHeader" member="extractAllHeaderElements" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over all the           SOAPHeaderElement objects contained by this           SOAPHeader</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="extractAllHeaderElements">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object and detaches them  from this SOAPHeader object.</lead>
                            <see class="SOAPHeader" member="examineAllHeaderElements" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over all the           SOAPHeaderElement objects contained by this           SOAPHeader</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="SOAPFaultElement">
                <extends name="SOAPElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>A representation of the contents in   a SOAPFault object.</lead>
                    <detail>  The Detail interface  is a SOAPFaultElement.    Content is added to a SOAPFaultElement using the  SOAPElement method addTextNode.</detail>
                </comment>
            </interface>
            <interface modifiers="public " name="SOAPFault">
                <extends name="SOAPBodyElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>An element in the SOAPBody object that contains  error and/or status information.</lead>
                    <detail> This information may relate to  errors in the SOAPMessage object or to problems  that are not related to the content in the message itself. Problems  not related to the message itself are generally errors in  processing, such as the inability to communicate with an upstream  server.    Depending on the protocol specified while creating the   MessageFactory instance,  a SOAPFault has   sub-elements as defined in the SOAP 1.1/SOAP 1.2 specification.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="setFaultCode">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Sets this SOAPFault object with the given fault code.</lead>
                            <see class="SOAPFault" member="setFaultCode(String)" package="jakarta.xml.soap"/>
                            <detail>    Fault codes, which give information about the fault, are defined  in the SOAP 1.1 specification. A fault code is mandatory and must  be of type Name. This method provides a convenient  way to set a fault code. For example,     SOAPEnvelope se = ...;  // Create a qualified name in the SOAP namespace with a localName  // of &quot;Client&quot;. Note that prefix parameter is optional and is null  // here which causes the implementation to use an appropriate prefix.  Name qname = se.createName(&quot;Client&quot;, null,                             SOAPConstants.URI_NS_SOAP_ENVELOPE);  SOAPFault fault = ...;  fault.setFaultCode(qname);    It is preferable to use this method over #setFaultCode(String).</detail>
                            <see class="SOAPFault" member="getFaultCodeAsName" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultCodeQName" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object giving the fault  code to be set. It must be namespace qualified.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in adding the             faultcode element to the underlying XML tree.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="setFaultCode">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Sets this SOAPFault object with the given fault code.</lead>
                            <see class="SOAPFault" member="setFaultCode(Name)" package="jakarta.xml.soap"/>
                            <detail>   It is preferable to use this method over #setFaultCode(Name).</detail>
                            <see class="SOAPFault" member="getFaultCodeAsQName" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="setFaultCode(Name)" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="getFaultCodeAsQName()" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultCodeQName" package="javax.xml.namespace" type="QName">
                                <comment>a QName object giving the fault  code to be set. It must be namespace qualified.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in adding the             faultcode element to the underlying XML tree.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="setFaultCode">
                        <comment>
                            <lead>Sets this SOAPFault object with the give fault code.</lead>
                            <see class="SOAPFault" member="setFaultCode(Name)" package="jakarta.xml.soap"/>
                            <detail>    Fault codes, which given information about the fault, are defined in  the SOAP 1.1 specification. This element is mandatory in SOAP 1.1.  Because the fault code is required to be a QName it is preferable to  use the #setFaultCode(Name) form of this method.</detail>
                            <see class="SOAPFault" member="setFaultCode(Name)" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="getFaultCode" package="jakarta.xml.soap"/>
                            <see class="SOAPElement" member="addNamespaceDeclaration" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultCode" package="java.lang" type="String">
                                <comment>a String giving the fault code to be set.          It must be of the form &quot;prefix:localName&quot; where the prefix has          been defined in a namespace declaration.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in adding the             faultCode to the underlying XML tree.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultCodeAsName">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Gets the mandatory SOAP 1.1 fault code for this  SOAPFault object as a SAAJ Name object.</lead>
                            <detail>  The SOAP 1.1 specification requires the value of the &quot;faultcode&quot;  element to be of type QName. This method returns the content of the  element as a QName in the form of a SAAJ Name object. This method  should be used instead of the getFaultCode method since  it allows applications to easily access the namespace name without  additional parsing.</detail>
                            <see class="SOAPFault" member="setFaultCode(Name)" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="jakarta.xml.soap" type="Name">
                            <comment>a Name representing the faultcode</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getFaultCodeAsQName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Gets the fault code for this  SOAPFault object as a QName object.</lead>
                            <see class="SOAPFault" member="setFaultCode(QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="javax.xml.namespace" type="QName">
                            <comment>a QName representing the faultcode</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getFaultSubcodes">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Gets the fault code for this SOAPFault object.</lead>
                            <detail>  Gets the Subcodes for this SOAPFault as an iterator over   QNames.</detail>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator that accesses a sequence of        QNames. This Iterator should not support       the optional remove method. The order in which the        Subcodes are returned reflects the hierarchy of Subcodes present        in the fault from top to bottom.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="removeAllFaultSubcodes">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Removes any Subcodes that may be contained by this   SOAPFault.</lead>
                            <detail> Subsequent calls to   getFaultSubcodes will return an empty iterator until a call  to appendFaultSubcode is made.</detail>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="appendFaultSubcode">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Adds a Subcode to the end of the sequence of Subcodes contained by this  SOAPFault.</lead>
                            <detail> Subcodes, which were introduced in SOAP 1.2, are   represented by a recursive sequence of subelements rooted in the  mandatory Code subelement of a SOAP Fault.</detail>
                        </comment>
                        <parameters>
                            <parameter name="subcode" package="javax.xml.namespace" type="QName">
                                <comment>a QName containing the Value of the Subcode.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in setting the Subcode</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultCode">
                        <comment>
                            <lead>Gets the fault code for this SOAPFault object.</lead>
                            <see class="SOAPFault" member="getFaultCodeAsName" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="setFaultCode" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String with the fault code</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setFaultActor">
                        <comment>
                            <lead>Sets this SOAPFault object with the given fault actor.</lead>
                            <see class="SOAPFault" member="setFaultRole(String)" package="jakarta.xml.soap"/>
                            <detail>    The fault actor is the recipient in the message path who caused the  fault to happen.    If this SOAPFault supports SOAP 1.2 then this call is  equivalent to #setFaultRole(String)</detail>
                            <see class="SOAPFault" member="getFaultActor" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultActor" package="java.lang" type="String">
                                <comment>a String identifying the actor that         caused this SOAPFault object</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in adding the             faultActor to the underlying XML tree.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultActor">
                        <comment>
                            <lead>Gets the fault actor for this SOAPFault object.</lead>
                            <see class="SOAPFault" member="getFaultRole()" package="jakarta.xml.soap"/>
                            <detail>    If this SOAPFault supports SOAP 1.2 then this call is  equivalent to #getFaultRole()</detail>
                            <see class="SOAPFault" member="setFaultActor" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the actor in the message path          that caused this SOAPFault object</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setFaultString">
                        <comment>
                            <lead>Sets the fault string for this SOAPFault object  to the given string.</lead>
                            <detail>    If this  SOAPFault is part of a message that supports SOAP 1.2 then  this call is equivalent to:          addFaultReasonText(faultString, Locale.getDefault());  </detail>
                            <see class="SOAPFault" member="getFaultString" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultString" package="java.lang" type="String">
                                <comment>a String giving an explanation of         the fault</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in adding the             faultString to the underlying XML tree.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="setFaultString">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Sets the fault string for this SOAPFault object  to the given string and localized to the given locale.</lead>
                            <detail>    If this  SOAPFault is part of a message that supports SOAP 1.2 then  this call is equivalent to:          addFaultReasonText(faultString, locale);  </detail>
                            <see class="SOAPFault" member="getFaultString" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultString" package="java.lang" type="String">
                                <comment>a String giving an explanation of          the fault</comment>
                            </parameter>
                            <parameter name="locale" package="java.util" type="Locale">
                                <comment>a  java.util.Locale Locale object indicating          the native language of the faultString</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in adding the             faultString to the underlying XML tree.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultString">
                        <comment>
                            <lead>Gets the fault string for this SOAPFault object.</lead>
                            <detail>     If this  SOAPFault is part of a message that supports SOAP 1.2 then  this call is equivalent to:        String reason = null;     try {         reason = (String) getFaultReasonTexts().next();     } catch (SOAPException e) {}     return reason;  </detail>
                            <see class="SOAPFault" member="setFaultString(String)" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="setFaultString(String, Locale)" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving an explanation of         the fault</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getFaultStringLocale">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Gets the locale of the fault string for this SOAPFault   object.</lead>
                            <detail>     If this  SOAPFault is part of a message that supports SOAP 1.2 then  this call is equivalent to:        Locale locale = null;     try {         locale = (Locale) getFaultReasonLocales().next();     } catch (SOAPException e) {}     return locale;  </detail>
                            <see class="SOAPFault" member="setFaultString(String, Locale)" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.util" type="Locale">
                            <comment>a Locale object indicating the native language of           the fault string or null if no locale was specified</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="hasDetail">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns true if this SOAPFault has a Detail  subelement and false otherwise.</lead>
                            <detail> Equivalent to   (getDetail()!=null).</detail>
                        </comment>
                        <returns type="boolean">
                            <comment>true if this SOAPFault has a Detail  subelement and false otherwise.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getDetail">
                        <comment>
                            <lead>Returns the optional detail element for this SOAPFault  object.</lead>
                            <detail>    A Detail object carries application-specific error  information, the scope of the error information is restricted to   faults in the SOAPBodyElement objects if this is a   SOAP 1.1 Fault.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="Detail">
                            <comment>a Detail object with application-specific          error information if present, null otherwise</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="addDetail">
                        <comment>
                            <lead>Creates an optional Detail object and sets it as the  Detail object for this SOAPFault  object.</lead>
                            <detail>    It is illegal to add a detail when the fault already  contains a detail. Therefore, this method should be called  only after the existing detail has been removed.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="Detail">
                            <comment>the new Detail object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if this             SOAPFault object already contains a             valid Detail object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultReasonLocales">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns an Iterator over a distinct sequence of   Locales for which there are associated Reason Text items.</lead>
                            <detail>   Any of these Locales can be used in a call to   getFaultReasonText in order to obtain a localized version  of the Reason Text string.</detail>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator over a sequence of Locale       objects for which there are associated Reason Text items.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in retrieving   the  fault Reason locales.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultReasonTexts">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns an Iterator over a sequence of   String objects containing all of the Reason Text items for  this SOAPFault.</lead>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator over env:Fault/env:Reason/env:Text items.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in retrieving   the  fault Reason texts.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultReasonText">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns the Reason Text associated with the given Locale.</lead>
                            <detail>   If more than one such Reason Text exists the first matching Text is   returned</detail>
                            <see class="SOAPFault" member="getFaultString" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="locale" package="java.util" type="Locale">
                                <comment>-- the Locale for which a localized        Reason Text is desired</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="String">
                            <comment>the Reason Text associated with locale</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in retrieving   the  fault Reason text for the specified locale .</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addFaultReasonText">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Appends or replaces a Reason Text item containing the specified  text message and an xml:lang derived from   locale.</lead>
                            <detail> If a Reason Text item with this   xml:lang already exists its text value will be replaced  with text.   The locale parameter should not be null    Code sample:     SOAPFault fault = ...;  fault.addFaultReasonText(&quot;Version Mismatch&quot;, Locale.ENGLISH);  </detail>
                        </comment>
                        <parameters>
                            <parameter name="text" package="java.lang" type="String">
                                <comment>-- reason message string</comment>
                            </parameter>
                            <parameter name="locale" package="java.util" type="Locale">
                                <comment>-- Locale object representing the locale of the message</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in adding the Reason text  or the locale passed was null.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultNode">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns the optional Node element value for this  SOAPFault object.</lead>
                            <detail> The Node element is  optional in SOAP 1.2.</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>Content of the env:Fault/env:Node element as a String  or null if none</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setFaultNode">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates or replaces any existing Node element value for  this SOAPFault object.</lead>
                            <detail> The Node element  is optional in SOAP 1.2.</detail>
                        </comment>
                        <parameters>
                            <parameter name="uri" package="java.lang" type="String"/>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in setting the             Node for this  SOAPFault object.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getFaultRole">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns the optional Role element value for this  SOAPFault object.</lead>
                            <detail> The Role element is  optional in SOAP 1.2.</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>Content of the env:Fault/env:Role element as a String  or null if none</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setFaultRole">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates or replaces any existing Role element value for  this SOAPFault object.</lead>
                            <detail> The Role element  is optional in SOAP 1.2.</detail>
                        </comment>
                        <parameters>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>- the URI of the Role</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in setting the             Role for this  SOAPFault object.</throw>
                        </throws>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="SOAPEnvelope">
                <extends name="SOAPElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>The container for the SOAPHeader and SOAPBody portions of a  SOAPPart object.</lead>
                    <detail> By default, a SOAPMessage  object is created with a SOAPPart object that has a  SOAPEnvelope object. The SOAPEnvelope object  by default has an empty SOAPBody object and an empty  SOAPHeader object.  The SOAPBody object is  required, and the SOAPHeader object, though  optional, is used in the majority of cases. If the  SOAPHeader object is not needed, it can be deleted,  which is shown later.    A client can access the SOAPHeader and SOAPBody  objects by calling the methods SOAPEnvelope.getHeader and  SOAPEnvelope.getBody. The  following  lines of code use these two methods after starting with  the SOAPMessage  object message to get the SOAPPart object sp,  which is then used to get the SOAPEnvelope object se.         SOAPPart sp = message.getSOAPPart();      SOAPEnvelope se = sp.getEnvelope();      SOAPHeader sh = se.getHeader();      SOAPBody sb = se.getBody();      It is possible to change the body or header of a SOAPEnvelope  object by retrieving the current one, deleting it, and then adding  a new body or header. The jakarta.xml.soap.Node method  deleteNode deletes the XML element (node) on which it is  called.  For example, the following line of code deletes the  SOAPBody object that is retrieved by the method getBody.         se.getBody().detachNode();    To create a SOAPHeader object to replace the one that was removed,  a client uses  the method SOAPEnvelope.addHeader, which creates a new header and  adds it to the SOAPEnvelope object. Similarly, the method  addBody creates a new SOAPBody object and adds  it to the SOAPEnvelope object. The following code fragment  retrieves the current header, removes it, and adds a new one. Then  it retrieves the current body, removes it, and adds a new one.         SOAPPart sp = message.getSOAPPart();      SOAPEnvelope se = sp.getEnvelope();      se.getHeader().detachNode();      SOAPHeader sh = se.addHeader();      se.getBody().detachNode();      SOAPBody sb = se.addBody();    It is an error to add a SOAPBody or SOAPHeader  object if one already exists.    The SOAPEnvelope interface provides three methods for creating  Name objects. One method creates Name objects with  a local name, a namespace prefix, and a namesapce URI. The second method creates  Name objects with a local name and a namespace prefix, and the third  creates Name objects with just a local name.  The following line of  code, in which se is a SOAPEnvelope object, creates a new  Name object with all three.        Name name = se.createName(&quot;GetLastTradePrice&quot;, &quot;WOMBAT&quot;,                                 &quot;http://www.wombat.org/trader&quot;);  </detail>
                </comment>
                <methods>
                    <method modifiers="public" name="createName">
                        <comment>
                            <lead>Creates a new Name object initialized with the  given local name, namespace prefix, and namespace URI.</lead>
                            <detail>    This factory method creates Name objects for use in  the SOAP/XML document.</detail>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name</comment>
                            </parameter>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>a String giving the prefix of the namespace</comment>
                            </parameter>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>a String giving the URI of the namespace</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="Name">
                            <comment>a Name object initialized with the given          local name, namespace prefix, and namespace URI</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="createName">
                        <comment>
                            <lead>Creates a new Name object initialized with the  given local name.</lead>
                            <detail>    This factory method creates Name objects for use in  the SOAP/XML document.</detail>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="Name">
                            <comment>a Name object initialized with the given          local name</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getHeader">
                        <comment>
                            <lead>Returns the SOAPHeader object for  this SOAPEnvelope object.</lead>
                            <detail>    A new SOAPMessage object is by default created with a  SOAPEnvelope object that contains an empty  SOAPHeader object.  As a result, the method  getHeader will always return a SOAPHeader  object unless the header has been removed and a new one has not  been added.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPHeader">
                            <comment>the SOAPHeader object or null if          there is none</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a problem obtaining the             SOAPHeader object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getBody">
                        <comment>
                            <lead>Returns the SOAPBody object associated with this  SOAPEnvelope object.</lead>
                            <detail>    A new SOAPMessage object is by default created with a  SOAPEnvelope object that contains an empty  SOAPBody object.  As a result, the method  getBody will always return a SOAPBody  object unless the body has been removed and a new one has not  been added.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPBody">
                            <comment>the SOAPBody object for this          SOAPEnvelope object or null          if there is none</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a problem obtaining the             SOAPBody object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addHeader">
                        <comment>
                            <lead>Creates a SOAPHeader object and sets it as the  SOAPHeader object for this SOAPEnvelope  object.</lead>
                            <detail>    It is illegal to add a header when the envelope already  contains a header.  Therefore, this method should be called  only after the existing header has been removed.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPHeader">
                            <comment>the new SOAPHeader object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if this             SOAPEnvelope object already contains a             valid SOAPHeader object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addBody">
                        <comment>
                            <lead>Creates a SOAPBody object and sets it as the  SOAPBody object for this SOAPEnvelope  object.</lead>
                            <detail>    It is illegal to add a body when the envelope already  contains a body. Therefore, this method should be called  only after the existing body has been removed.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPBody">
                            <comment>the new SOAPBody object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if this             SOAPEnvelope object already contains a             valid SOAPBody object</throw>
                        </throws>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="SOAPElement">
                <extends name="Node" package="jakarta.xml.soap"/>
                <comment>
                    <lead>An object representing an element of a SOAP message that is allowed but not  specifically prescribed by a SOAP specification.</lead>
                    <see class="SOAPElement" member="getChildElements()" package="jakarta.xml.soap"/>
                    <see/>
                    <detail> This interface serves as the  base interface for those objects that are specifically prescribed by a SOAP  specification.    Methods in this interface that are required to return SAAJ specific objects  may &quot;silently&quot; replace nodes in the tree as required to successfully return  objects of the correct type. See #getChildElements() and   jakarta.xml.soap  for details.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="addChildElement">
                        <comment>
                            <lead>Creates a new SOAPElement object initialized with the  given Name object and adds the new element to this  SOAPElement object.</lead>
                            <detail>    This method may be deprecated in a future release of SAAJ in favor of   addChildElement(javax.xml.namespace.QName)</detail>
                            <see class="SOAPElement" member="addChildElement(javax.xml.namespace.QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object with the XML name for the         new element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was created</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the                           SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addChildElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new SOAPElement object initialized with the given   QName object and adds the new element to this SOAPElement   object.</lead>
                            <detail> The  namespace, localname and prefix of the new   SOAPElement are all taken  from the qname argument.</detail>
                            <see class="SOAPElement" member="addChildElement(Name)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>a QName object with the XML name for the         new element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was created</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the                           SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addChildElement">
                        <comment>
                            <lead>Creates a new SOAPElement object initialized with the  specified local name and adds the new element to this  SOAPElement object.</lead>
                            <detail>    The new  SOAPElement inherits any in-scope default namespace.</detail>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name for           the element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was created</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the                           SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addChildElement">
                        <comment>
                            <lead>Creates a new SOAPElement object initialized with the  specified local name and prefix and adds the new element to this  SOAPElement object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name for         the new element</comment>
                            </parameter>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>a String giving the namespace prefix for         the new element</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was created</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the prefix is not valid in the          context of this SOAPElement or  if there is an error in creating the                           SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addChildElement">
                        <comment>
                            <lead>Creates a new SOAPElement object initialized with the  specified local name, prefix, and URI and adds the new element to this  SOAPElement object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String giving the local name for         the new element</comment>
                            </parameter>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>a String giving the namespace prefix for         the new element</comment>
                            </parameter>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>a String giving the URI of the namespace         to which the new element belongs</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the new SOAPElement object that was created</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the                           SOAPElement object</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addChildElement">
                        <comment>
                            <lead>Add a SOAPElement as a child of this  SOAPElement instance.</lead>
                            <detail> The SOAPElement  is expected to be created by a  SOAPFactory. Callers should not rely on the  element instance being added as is into the XML  tree. Implementations could end up copying the content  of the SOAPElement passed into an instance of  a different SOAPElement implementation. For  instance if addChildElement() is called on a  SOAPHeader, element will be copied  into an instance of a SOAPHeaderElement.   The fragment rooted in element is either added  as a whole or not at all, if there was an error.   The fragment rooted in element cannot contain  elements named &quot;Envelope&quot;, &quot;Header&quot; or &quot;Body&quot; and in the SOAP  namespace. Any namespace prefixes present in the fragment  should be fully resolved using appropriate namespace  declarations within the fragment itself.</detail>
                        </comment>
                        <parameters>
                            <parameter name="element" package="jakarta.xml.soap" type="SOAPElement">
                                <comment>the SOAPElement to be added as a                 new child</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>an instance representing the new SOAP element that was          actually added to the tree.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there was an error in adding this                           element as a child</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="removeContents">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Detaches all children of this SOAPElement.</lead>
                            <detail>    This method is useful for rolling back the construction of partially   completed SOAPHeaders and SOAPBodys in   preparation for sending a fault when an error condition is detected. It   is also useful for recycling portions of a document within a SOAP   message.</detail>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="addTextNode">
                        <comment>
                            <lead>Creates a new Text object initialized with the given  String and adds it to this SOAPElement object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="text" package="java.lang" type="String">
                                <comment>a String object with the textual content to be added</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the SOAPElement object into which          the new Text object was inserted</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the                     new Text object or if it is not legal to                       attach it as a child to this                        SOAPElement</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addAttribute">
                        <comment>
                            <lead>Adds an attribute with the specified name and value to this  SOAPElement object.</lead>
                            <see class="SOAPElement" member="addAttribute(javax.xml.namespace.QName, String)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object with the name of the attribute</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String giving the value of the attribute</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the SOAPElement object into which the attribute was          inserted</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the                           Attribute, or it is invalid to set                                  an attribute with Name                                   name on this SOAPElement.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addAttribute">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Adds an attribute with the specified name and value to this  SOAPElement object.</lead>
                            <see class="SOAPElement" member="addAttribute(Name, String)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>a QName object with the name of the attribute</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>a String giving the value of the attribute</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the SOAPElement object into which the attribute was          inserted</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the                           Attribute, or it is invalid to set                                 an attribute with QName                                  qname on this SOAPElement.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addNamespaceDeclaration">
                        <comment>
                            <lead>Adds a namespace declaration with the specified prefix and URI to this  SOAPElement object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>a String giving the prefix of the namespace</comment>
                            </parameter>
                            <parameter name="uri" package="java.lang" type="String">
                                <comment>a String giving the uri of the namespace</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the SOAPElement object into which this           namespace declaration was inserted.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is an error in creating the                           namespace</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getAttributeValue">
                        <comment>
                            <lead>Returns the value of the attribute with the specified name.</lead>
                            <see class="SOAPElement" member="getAttributeValue(javax.xml.namespace.QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object with the name of the attribute</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the value of the specified          attribute, Null if there is no such attribute</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getAttributeValue">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns the value of the attribute with the specified qname.</lead>
                            <see class="SOAPElement" member="getAttributeValue(Name)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>a QName object with the qname of the attribute</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the value of the specified          attribute, Null if there is no such attribute</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getAllAttributes">
                        <comment>
                            <lead>Returns an Iterator over all of the attribute   Name objects in this  SOAPElement object.</lead>
                            <detail> The iterator can be used to get  the attribute names, which can then be passed to the method  getAttributeValue to retrieve the value of each  attribute.</detail>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an iterator over the names of the attributes</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getNamespaceURI">
                        <comment>
                            <lead>Returns the URI of the namespace that has the given prefix.</lead>
                        </comment>
                        <parameters>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>a String giving the prefix of the namespace         for which to search</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="String">
                            <comment>a String with the uri of the namespace that has         the given prefix</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getNamespacePrefixes">
                        <comment>
                            <lead>Returns an Iterator over the namespace prefix  Strings declared by this element.</lead>
                            <detail> The prefixes returned by  this iterator can be passed to the method  getNamespaceURI to retrieve the URI of each namespace.</detail>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an iterator over the namespace prefixes in this          SOAPElement object</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getVisibleNamespacePrefixes">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Returns an Iterator over the namespace prefix  Strings visible to this element.</lead>
                            <detail> The prefixes returned by  this iterator can be passed to the method  getNamespaceURI to retrieve the URI of each namespace.</detail>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an iterator over the namespace prefixes are within scope of this          SOAPElement object</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createQName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a QName whose namespace URI is the one associated  with the parameter, prefix, in the context of this  SOAPElement.</lead>
                            <detail> The remaining elements of the new   QName are taken directly from the parameters,   localName and prefix.</detail>
                        </comment>
                        <parameters>
                            <parameter name="localName" package="java.lang" type="String">
                                <comment>a String containing the local part of the name.</comment>
                            </parameter>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>a String containing the prefix for the name.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.namespace" type="QName">
                            <comment>a QName with the specified localName           and prefix, and with a namespace that is associated           with the prefix in the context of this            SOAPElement. This namespace will be the same as           the one that would be returned by             #getNamespaceURI(String) if it were given            prefix as it&apos;s parameter.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the QName cannot be created.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getElementName">
                        <comment>
                            <lead>Returns the name of this SOAPElement object.</lead>
                        </comment>
                        <returns package="jakarta.xml.soap" type="Name">
                            <comment>a Name object with the name of this          SOAPElement object</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getElementQName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Returns the qname of this SOAPElement object.</lead>
                            <see class="SOAPElement" member="getElementName()" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="javax.xml.namespace" type="QName">
                            <comment>a QName object with the qname of this          SOAPElement object</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setElementQName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Changes the name of this Element to newName if   possible.</lead>
                            <detail> SOAP Defined elements such as SOAPEnvelope, SOAPHeader, SOAPBody   etc. cannot have their names changed using this method. Any attempt to do   so will result in a  SOAPException being thrown.   Callers should not rely on the element instance being renamed as is.   Implementations could end up copying the content of the   SOAPElement to a renamed instance.</detail>
                        </comment>
                        <parameters>
                            <parameter name="newName" package="javax.xml.namespace" type="QName">
                                <comment>the new name for the Element.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>The renamed Node</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if changing the name of this Element                           is not allowed.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="removeAttribute">
                        <comment>
                            <lead>Removes the attribute with the specified name.</lead>
                            <see class="SOAPElement" member="removeAttribute(javax.xml.namespace.QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>the Name object with the name of the         attribute to be removed</comment>
                            </parameter>
                        </parameters>
                        <returns type="boolean">
                            <comment>true if the attribute was          removed successfully; false if it was not</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="removeAttribute">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Removes the attribute with the specified qname.</lead>
                            <see class="SOAPElement" member="removeAttribute(Name)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>the QName object with the qname of the         attribute to be removed</comment>
                            </parameter>
                        </parameters>
                        <returns type="boolean">
                            <comment>true if the attribute was          removed successfully; false if it was not</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="removeNamespaceDeclaration">
                        <comment>
                            <lead>Removes the namespace declaration corresponding to the given prefix.</lead>
                        </comment>
                        <parameters>
                            <parameter name="prefix" package="java.lang" type="String">
                                <comment>a String giving the prefix for which         to search</comment>
                            </parameter>
                        </parameters>
                        <returns type="boolean">
                            <comment>true if the namespace declaration was          removed successfully; false if it was not</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getChildElements">
                        <comment>
                            <see class="Node" package="jakarta.xml.soap"/>
                            <lead>Returns an Iterator over all the immediate child  Nodes of this element.</lead>
                            <see/>
                            <detail> This includes jakarta.xml.soap.Text  objects as well as SOAPElement objects.    Calling this method may cause child Element,   SOAPElement and org.w3c.dom.Text nodes to be   replaced by SOAPElement, SOAPHeaderElement,   SOAPBodyElement or jakarta.xml.soap.Text nodes as  appropriate for the type of this parent node. As a result the calling   application must treat any existing references to these child nodes that   have been obtained through DOM APIs as invalid and either discard them or  refresh them with the values returned by this Iterator. This   behavior can be avoided by calling the equivalent DOM APIs. See  jakarta.xml.soap  for more details.</detail>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an iterator with the content of this SOAPElement          object</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getChildElements">
                        <comment>
                            <see class="Node" package="jakarta.xml.soap"/>
                            <lead>Returns an Iterator over all the immediate child  Nodes of this element with the specified name.</lead>
                            <see/>
                            <detail> All of these   children will be SOAPElement nodes.    Calling this method may cause child Element,   SOAPElement and org.w3c.dom.Text nodes to be   replaced by SOAPElement, SOAPHeaderElement,   SOAPBodyElement or jakarta.xml.soap.Text nodes as  appropriate for the type of this parent node. As a result the calling   application must treat any existing references to these child nodes that   have been obtained through DOM APIs as invalid and either discard them or  refresh them with the values returned by this Iterator. This   behavior can be avoided by calling the equivalent DOM APIs. See  jakarta.xml.soap  for more details.</detail>
                            <see class="SOAPElement" member="getChildElements(javax.xml.namespace.QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object with the name of the child         elements to be returned</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over all the elements          in this SOAPElement object with the          specified name</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getChildElements">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <see class="Node" package="jakarta.xml.soap"/>
                            <lead>Returns an Iterator over all the immediate child  Nodes of this element with the specified qname.</lead>
                            <see/>
                            <detail> All of these   children will be SOAPElement nodes.    Calling this method may cause child Element,   SOAPElement and org.w3c.dom.Text nodes to be   replaced by SOAPElement, SOAPHeaderElement,   SOAPBodyElement or jakarta.xml.soap.Text nodes as  appropriate for the type of this parent node. As a result the calling   application must treat any existing references to these child nodes that   have been obtained through DOM APIs as invalid and either discard them or  refresh them with the values returned by this Iterator. This   behavior can be avoided by calling the equivalent DOM APIs. See  jakarta.xml.soap  for more details.</detail>
                            <see class="SOAPElement" member="getChildElements(Name)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>a QName object with the qname of the child         elements to be returned</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over all the elements          in this SOAPElement object with the          specified qname</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setEncodingStyle">
                        <comment>
                            <lead>Sets the encoding style for this SOAPElement object  to one specified.</lead>
                            <see class="SOAPElement" member="getEncodingStyle" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="encodingStyle" package="java.lang" type="String">
                                <comment>a String giving the encoding style</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if setting the encodingStyle is invalid for this SOAPElement.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getEncodingStyle">
                        <comment>
                            <lead>Returns the encoding style for this SOAPElement object.</lead>
                            <see class="SOAPElement" member="setEncodingStyle" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String giving the encoding style</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Text">
                <extends name="Node" package="jakarta.xml.soap"/>
                <comment>
                    <lead>A representation of a node whose value is text.</lead>
                    <detail>  A Text object  may represent text that is content or text that is a comment.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="isComment">
                        <comment>
                            <lead>Retrieves whether this Text object represents a comment.</lead>
                        </comment>
                        <returns type="boolean">
                            <comment>true if this Text object is a          comment; false otherwise</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="SOAPConstants">
                <comment>
                    <lead>The definition of constants pertaining to the SOAP protocol.</lead>
                </comment>
                <fields>
                    <field modifiers="public static final" name="DYNAMIC_SOAP_PROTOCOL" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Used to create MessageFactory instances that create  SOAPMessages whose concrete type is based on the  Content-Type MIME header passed to the  createMessage method.</lead>
                            <detail> If no Content-Type  header is passed then the createMessage may throw an  IllegalArgumentException or, in the case of the no  argument version of createMessage, an  UnsupportedOperationException.</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_1_1_PROTOCOL" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Used to create MessageFactory instances that create  SOAPMessages whose behavior supports the SOAP 1.1  specification.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_1_2_PROTOCOL" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Used to create MessageFactory instances that create  SOAPMessages whose behavior supports the SOAP 1.2  specification</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="DEFAULT_SOAP_PROTOCOL" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The default protocol: SOAP 1.1 for backwards compatibility.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_NS_SOAP_1_1_ENVELOPE" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The namespace identifier for the SOAP 1.1 envelope.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_NS_SOAP_1_2_ENVELOPE" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The namespace identifier for the SOAP 1.2 envelope.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_NS_SOAP_ENVELOPE" package="java.lang" type="String">
                        <comment>
                            <lead>The namespace identifier for the SOAP 1.1 envelope, All SOAPElements in this   namespace are defined by the SOAP 1.1 specification.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_NS_SOAP_ENCODING" package="java.lang" type="String">
                        <comment>
                            <lead>The namespace identifier for the SOAP 1.1 encoding.</lead>
                            <detail>  An attribute named encodingStyle in the  URI_NS_SOAP_ENVELOPE namespace and set to the value  URI_NS_SOAP_ENCODING can be added to an element to indicate  that it is encoded using the rules in section 5 of the SOAP 1.1  specification.</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_NS_SOAP_1_2_ENCODING" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The namespace identifier for the SOAP 1.2 encoding.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_1_1_CONTENT_TYPE" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The media type  of the Content-Type MIME header in SOAP 1.1.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_1_2_CONTENT_TYPE" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The media type  of the Content-Type MIME header in SOAP 1.2.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_SOAP_ACTOR_NEXT" package="java.lang" type="String">
                        <comment>
                            <lead>The URI identifying the next application processing a SOAP request as the intended  actor for a SOAP 1.1 header entry (see section 4.2.2 of the SOAP 1.1 specification).</lead>
                            <see class="SOAPHeader" member="examineMustUnderstandHeaderElements(String)" package="jakarta.xml.soap"/>
                            <see class="SOAPHeader" member="examineHeaderElements(String)" package="jakarta.xml.soap"/>
                            <see class="SOAPHeader" member="extractHeaderElements(String)" package="jakarta.xml.soap"/>
                            <detail>    This value can be passed to  SOAPHeader#examineMustUnderstandHeaderElements(String),  SOAPHeader#examineHeaderElements(String) and  SOAPHeader#extractHeaderElements(String)</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_SOAP_1_2_ROLE_NEXT" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The URI identifying the next application processing a SOAP request as the intended  role for a SOAP 1.2 header entry (see section 2.2 of part 1 of the SOAP 1.2  specification).</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_SOAP_1_2_ROLE_NONE" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The URI specifying the role None in SOAP 1.2.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The URI identifying the ultimate receiver of the SOAP 1.2 message.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_ENV_PREFIX" package="java.lang" type="String">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>The default namespace prefix for http://www.w3.org/2003/05/soap-envelope</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_VERSIONMISMATCH_FAULT" package="javax.xml.namespace" type="QName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>SOAP 1.2 VersionMismatch Fault</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_MUSTUNDERSTAND_FAULT" package="javax.xml.namespace" type="QName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>SOAP 1.2 MustUnderstand Fault</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_DATAENCODINGUNKNOWN_FAULT" package="javax.xml.namespace" type="QName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>SOAP 1.2 DataEncodingUnknown Fault</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_SENDER_FAULT" package="javax.xml.namespace" type="QName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>SOAP 1.2 Sender Fault</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP_RECEIVER_FAULT" package="javax.xml.namespace" type="QName">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>SOAP 1.2 Receiver Fault</lead>
                        </comment>
                    </field>
                </fields>
            </interface>
            <interface modifiers="public " name="SOAPBodyElement">
                <extends name="SOAPElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>A SOAPBodyElement object represents the contents in   a SOAPBody object.</lead>
                    <detail>  The SOAPFault interface  is a SOAPBodyElement object that has been defined.    A new SOAPBodyElement object can be created and added  to a SOAPBody object with the SOAPBody  method addBodyElement. In the following line of code,  sb is a SOAPBody object, and   myName is a Name object.       SOAPBodyElement sbe = sb.addBodyElement(myName);  </detail>
                </comment>
            </interface>
            <interface modifiers="public " name="SOAPBody">
                <extends name="SOAPElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>An object that represents the contents of the SOAP body  element in a SOAP message.</lead>
                    <detail> A SOAP body element consists of XML data  that affects the way the application-specific content is processed.    A SOAPBody object contains SOAPBodyElement  objects, which have the content for the SOAP body.  A SOAPFault object, which carries status and/or  error information, is an example of a SOAPBodyElement object.</detail>
                    <see class="SOAPFault" package="jakarta.xml.soap"/>
                </comment>
                <methods>
                    <method modifiers="public" name="addFault">
                        <comment>
                            <lead>Creates a new SOAPFault object and adds it to  this SOAPBody object.</lead>
                            <detail> The new SOAPFault will  have default values set for the mandatory child elements. The type of   the SOAPFault will be a SOAP 1.1 or a SOAP 1.2 SOAPFault   depending on the protocol specified while creating the   MessageFactory instance.     A SOAPBody may contain at most one SOAPFault  child element.</detail>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPFault">
                            <comment>the new SOAPFault object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addFault">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Creates a new SOAPFault object and adds it to  this SOAPBody object.</lead>
                            <detail> The type of the   SOAPFault will be a SOAP 1.1  or a SOAP 1.2   SOAPFault depending on the protocol  specified while creating the MessageFactory instance.    For SOAP 1.2 the faultCode parameter is the value of the   Fault/Code/Value element  and the faultString parameter   is the value of the Fault/Reason/Text element. For SOAP 1.1   the faultCode parameter is the value of the faultcode   element and the faultString parameter is the value of the faultstring   element.     A SOAPBody may contain at most one SOAPFault  child element.</detail>
                            <see class="SOAPFault" member="setFaultCode" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="setFaultString" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultCode" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object giving the fault          code to be set; must be one of the fault codes defined in the Version           of SOAP specification in use</comment>
                            </parameter>
                            <parameter name="faultString" package="java.lang" type="String">
                                <comment>a String giving an explanation of          the fault</comment>
                            </parameter>
                            <parameter name="locale" package="java.util" type="Locale">
                                <comment>a  java.util.Locale object indicating          the native language of the faultString</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPFault">
                            <comment>the new SOAPFault object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addFault">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new SOAPFault object and adds it to this   SOAPBody object.</lead>
                            <detail> The type of the SOAPFault   will be a SOAP 1.1 or a SOAP 1.2 SOAPFault depending on   the protocol specified while creating the MessageFactory   instance.    For SOAP 1.2 the faultCode parameter is the value of the   Fault/Code/Value element  and the faultString parameter   is the value of the Fault/Reason/Text element. For SOAP 1.1   the faultCode parameter is the value of the faultcode   element and the faultString parameter is the value of the faultstring   element.     A SOAPBody may contain at most one SOAPFault  child element.</detail>
                            <see class="SOAPFault" member="setFaultCode" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="setFaultString" package="jakarta.xml.soap"/>
                            <see class="SOAPBody" member="addFault(Name faultCode, String faultString, Locale locale)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultCode" package="javax.xml.namespace" type="QName">
                                <comment>a QName object giving the fault code to be             set; must be one of the fault codes defined in the version             of SOAP specification in use.</comment>
                            </parameter>
                            <parameter name="faultString" package="java.lang" type="String">
                                <comment>a String giving an explanation of the fault</comment>
                            </parameter>
                            <parameter name="locale" package="java.util" type="Locale">
                                <comment>a  java.util.Locale Locale object indicating the             native language of the faultString</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPFault">
                            <comment>the new SOAPFault object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addFault">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>Creates a new  SOAPFault object and adds it to this   SOAPBody object.</lead>
                            <detail> The type of the SOAPFault  will be a SOAP 1.1 or a SOAP 1.2 SOAPFault depending on  the protocol specified while creating the MessageFactory  instance.    For SOAP 1.2 the faultCode parameter is the value of the   Fault/Code/Value element  and the faultString parameter   is the value of the Fault/Reason/Text element. For SOAP 1.1   the faultCode parameter is the value of the faultcode   element and the faultString parameter is the value of the faultstring   element.     In case of a SOAP 1.2 fault, the default value for the mandatory xml:lang   attribute on the Fault/Reason/Text element will be set to  java.util.Locale.getDefault()    A SOAPBody may contain at most one SOAPFault  child element.</detail>
                            <see class="SOAPFault" member="setFaultCode" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="setFaultString" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultCode" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object giving the fault code to be set;             must be one of the fault codes defined in the version of SOAP             specification in use</comment>
                            </parameter>
                            <parameter name="faultString" package="java.lang" type="String">
                                <comment>a String giving an explanation of the fault</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPFault">
                            <comment>the new SOAPFault object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addFault">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new SOAPFault object and adds it to this SOAPBody  object.</lead>
                            <detail> The type of the SOAPFault  will be a SOAP 1.1 or a SOAP 1.2 SOAPFault depending on  the protocol specified while creating the MessageFactory  instance.    For SOAP 1.2 the faultCode parameter is the value of the   Fault/Code/Value element  and the faultString parameter   is the value of the Fault/Reason/Text element. For SOAP 1.1   the faultCode parameter is the value of the faultcode   element and the faultString parameter is the value of the faultstring   element.     In case of a SOAP 1.2 fault, the default value for the mandatory xml:lang   attribute on the Fault/Reason/Text element will be set to  java.util.Locale.getDefault()    A SOAPBody may contain at most one SOAPFault  child element</detail>
                            <see class="SOAPFault" member="setFaultCode" package="jakarta.xml.soap"/>
                            <see class="SOAPFault" member="setFaultString" package="jakarta.xml.soap"/>
                            <see class="SOAPBody" member="addFault(Name faultCode, String faultString)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="faultCode" package="javax.xml.namespace" type="QName">
                                <comment>a QName object giving the fault code to be             set; must be one of the fault codes defined in the version              of  SOAP specification in use</comment>
                            </parameter>
                            <parameter name="faultString" package="java.lang" type="String">
                                <comment>a String giving an explanation of the fault</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPFault">
                            <comment>the new SOAPFault object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a SOAP error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="hasFault">
                        <comment>
                            <lead>Indicates whether a SOAPFault object exists in this  SOAPBody object.</lead>
                        </comment>
                        <returns type="boolean">
                            <comment>true if a SOAPFault object exists          in this SOAPBody object; false          otherwise</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getFault">
                        <comment>
                            <lead>Returns the SOAPFault object in this SOAPBody  object.</lead>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPFault">
                            <comment>the SOAPFault object in this SOAPBody          object if present, null otherwise.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="addBodyElement">
                        <comment>
                            <lead>Creates a new SOAPBodyElement object with the specified  name and adds it to this SOAPBody object.</lead>
                            <see class="SOAPBody" member="addBodyElement(javax.xml.namespace.QName)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object with the name for the new SOAPBodyElement             object</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPBodyElement">
                            <comment>the new SOAPBodyElement object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addBodyElement">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new SOAPBodyElement object with the specified  QName and adds it to this SOAPBody object.</lead>
                            <see class="SOAPBody" member="addBodyElement(Name)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>a QName object with the qname for the new             SOAPBodyElement object</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPBodyElement">
                            <comment>the new SOAPBodyElement object</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if a SOAP error occurs</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addDocument">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <see class="Document" package="org.w3c.dom"/>
                            <lead>Adds the root node of the DOM org.w3c.dom.Document  to this SOAPBody object.</lead>
                            <detail>    Calling this method invalidates the document parameter.  The client application should discard all references to this Document  and its contents upon calling addDocument. The behavior  of an application that continues to use such references is undefined.</detail>
                        </comment>
                        <parameters>
                            <parameter name="document" package="org.w3c.dom" type="Document">
                                <comment>the Document object whose root node will be             added to this SOAPBody.</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="SOAPBodyElement">
                            <comment>the SOAPBodyElement that represents the root node          that was added.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if the Document cannot be added</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="extractContentAsDocument">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <see class="Document" package="org.w3c.dom"/>
                            <lead>Creates a new DOM org.w3c.dom.Document and sets  the first child of this SOAPBody as it&apos;s document  element.</lead>
                            <detail> The child SOAPElement is removed as part of the  process.</detail>
                        </comment>
                        <returns package="org.w3c.dom" type="Document">
                            <comment>the  org.w3c.dom.Document representation          of the SOAPBody content.</comment>
                        </returns>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is not exactly one child SOAPElement of the                SOAPBody.</throw>
                        </throws>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Node">
                <extends name="Node" package="org.w3c.dom"/>
                <comment>
                    <lead>A representation of a node (element) in an XML document.</lead>
                    <detail>  This interface extnends the standard DOM Node interface with methods for   getting and setting the value of a node, for  getting and setting the parent of a node, and for removing a node.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="getValue">
                        <comment>
                            <lead>Returns the value of this node if this is a Text node or the  value of the immediate child of this node otherwise.</lead>
                            <detail>  If there is an immediate child of this Node that it is a   Text node then it&apos;s value will be returned. If there is  more than one Text node then the value of the first   Text Node will be returned.  Otherwise null is returned.</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a String with the text of this node if this is a           Text node or the text contained by the first            immediate child of this Node object that is a            Text object if such a child exists;           null otherwise.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setValue">
                        <since>SAAJ 1.2</since>
                        <comment>
                            <lead>If this is a Text node then this method will set its value,   otherwise it sets the value of  the immediate (Text) child of this node.</lead>
                            <detail>  The value of the immediate child of this node can be set only if, there is  one child node and that node is a Text node, or if  there are no children in which case a child Text node will be   created.</detail>
                        </comment>
                        <parameters>
                            <parameter name="value" package="java.lang" type="String"/>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="setParentElement">
                        <comment>
                            <lead>Sets the parent of this Node object to the given  SOAPElement object.</lead>
                            <see class="Node" member="getParentElement" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="parent" package="jakarta.xml.soap" type="SOAPElement">
                                <comment>the SOAPElement object to be set as        the parent of this Node object</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">if there is a problem in setting the                           parent to the given element</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getParentElement">
                        <comment>
                            <lead>Returns the parent element of this Node object.</lead>
                            <detail>  This method can throw an UnsupportedOperationException  if the tree is not kept in memory.</detail>
                            <see class="Node" member="setParentElement" package="jakarta.xml.soap"/>
                        </comment>
                        <returns package="jakarta.xml.soap" type="SOAPElement">
                            <comment>the SOAPElement object that is the parent of          this Node object or null if this          Node object is root</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="detachNode">
                        <comment>
                            <lead>Removes this Node object from the tree.</lead>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="recycleNode">
                        <comment>
                            <lead>Notifies the implementation that this Node  object is no longer being used by the application and that the  implementation is free to reuse this object for nodes that may  be created later.</lead>
                            <detail>    Calling the method recycleNode implies that the method  detachNode has been called previously.</detail>
                        </comment>
                        <returns type="void"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Name">
                <comment>
                    <lead>A representation of an XML name.</lead>
                    <detail>  This interface provides methods for  getting the local and namespace-qualified names and also for getting the  prefix associated with the namespace for the name. It is also possible   to get the URI of the namespace.    The following is an example of a namespace declaration in an element.          (&quot;xmlns&quot; stands for &quot;XML namespace&quot;.)  The following   shows what the methods in the Name interface will return.     getQualifiedName will return &quot;prefix:LocalName&quot; =       &quot;WOMBAT:GetLastTradePrice&quot;   getURI will return &quot;http://www.wombat.org/trader&quot;   getLocalName will return &quot;GetLastTracePrice&quot;   getPrefix will return &quot;WOMBAT&quot;      XML namespaces are used to disambiguate SOAP identifiers from  application-specific identifiers.    Name objects are created using the method  SOAPEnvelope.createName, which has two versions.  One method creates Name objects with  a local name, a namespace prefix, and a namespace URI.    and the second creates Name objects with just a local name.    The following line of  code, in which se is a SOAPEnvelope object, creates a new  Name object with all three.        Name name = se.createName(&quot;GetLastTradePrice&quot;, &quot;WOMBAT&quot;,                                 &quot;http://www.wombat.org/trader&quot;);    The following line of code gives an example of how a Name object  can be used. The variable element is a SOAPElement object.  This code creates a new SOAPElement object with the given name and  adds it to element.        element.addChildElement(name);      The Name interface may be deprecated in a future release of SAAJ  in favor of javax.xml.namespace.QName</detail>
                    <see class="SOAPEnvelope" member="createName(String, String, String)" package="jakarta.xml.soap"/>
                    <see class="SOAPFactory" member="createName(String, String, String)" package="jakarta.xml.soap"/>
                </comment>
                <methods>
                    <method modifiers="public" name="getLocalName">
                        <comment>
                            <lead>Gets the local name part of the XML name that this Name  object represents.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>a string giving the local name</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getQualifiedName">
                        <comment>
                            <lead>Gets the namespace-qualified name of the XML name that this   Name object represents.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the namespace-qualified name as a string</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getPrefix">
                        <comment>
                            <lead>Returns the prefix that was specified when this Name object  was initialized.</lead>
                            <detail> This prefix is associated with the namespace for the XML  name that this Name object represents.</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the prefix as a string</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getURI">
                        <comment>
                            <lead>Returns the URI of the namespace for the XML  name that this Name object represents.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the URI as a string</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="DetailEntry">
                <extends name="SOAPElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>The content for a Detail object, giving details for  a SOAPFault object.</lead>
                    <detail>  A DetailEntry object,  which carries information about errors related to the SOAPBody  object that contains it, is application-specific.</detail>
                </comment>
            </interface>
            <interface modifiers="public " name="Detail">
                <extends name="SOAPFaultElement" package="jakarta.xml.soap"/>
                <comment>
                    <lead>A container for DetailEntry objects.</lead>
                    <detail> DetailEntry  objects give detailed error information that is application-specific and  related to the SOAPBody object that contains it.   A Detail object, which is part of a SOAPFault  object, can be retrieved using the method SOAPFault.getDetail.  The Detail interface provides two methods. One creates a new  DetailEntry object and also automatically adds it to  the Detail object. The second method gets a list of the  DetailEntry objects contained in a Detail  object.    The following code fragment, in which sf is a SOAPFault  object, gets its Detail object (d), adds a new  DetailEntry object to d, and then gets a list of all the  DetailEntry objects in d. The code also creates a  Name object to pass to the method addDetailEntry.  The variable se, used to create the Name object,  is a SOAPEnvelope object.       Detail d = sf.getDetail();     Name name = se.createName(&quot;GetLastTradePrice&quot;, &quot;WOMBAT&quot;,                                 &quot;http://www.wombat.org/trader&quot;);     d.addDetailEntry(name);     Iterator it = d.getDetailEntries();  </detail>
                </comment>
                <methods>
                    <method modifiers="public" name="addDetailEntry">
                        <comment>
                            <lead>Creates a new DetailEntry object with the given  name and adds it to this Detail object.</lead>
                            <see class="Detail" member="addDetailEntry(QName qname)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="name" package="jakarta.xml.soap" type="Name">
                                <comment>a Name object identifying the          new DetailEntry object</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="DetailEntry"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">thrown when there is a problem in adding a  DetailEntry object to this Detail object.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="addDetailEntry">
                        <since>SAAJ 1.3</since>
                        <comment>
                            <lead>Creates a new DetailEntry object with the given  QName and adds it to this Detail object.</lead>
                            <detail> This method  is the preferred over the one using Name.</detail>
                            <see class="Detail" member="addDetailEntry(Name name)" package="jakarta.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="qname" package="javax.xml.namespace" type="QName">
                                <comment>a QName object identifying the          new DetailEntry object</comment>
                            </parameter>
                        </parameters>
                        <returns package="jakarta.xml.soap" type="DetailEntry"/>
                        <throws>
                            <throw name="jakarta.xml.soap.SOAPException">thrown when there is a problem in adding a  DetailEntry object to this Detail object.</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getDetailEntries">
                        <comment>
                            <lead>Gets an Iterator over all of the DetailEntrys in this Detail object.</lead>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>an Iterator object over the DetailEntry              objects in this Detail object</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
        </interfaces>
    </package>
</javadoc>

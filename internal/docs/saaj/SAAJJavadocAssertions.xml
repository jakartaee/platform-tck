<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
<next-available-id>324</next-available-id>
<previous-id>1</previous-id>
<technology>SAAJ</technology>
<id>SAAJ</id>
<name>SOAP With Attachments API for Java(TM)</name>
<version>1.3</version>
<assertions>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:1</id>
<description>
                            Adds a MIME header with the specified name and value to this  AttachmentPart object.
                                Note that RFC822 headers can contain only US-ASCII characters.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="addMimeHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:2</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="AttachmentPart" return-type="AttachmentPart"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:3</id>
<description>
                            Clears out the content of this AttachmentPart object.
                              The MIME header portion is left untouched.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="clearContent" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:4</id>
<description>
                            Retrieves all the headers for this AttachmentPart object  as an iterator over the MimeHeader objects.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getAllMimeHeaders" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:5</id>
<description>
                            Returns an InputStream which can be used to obtain the   content of AttachmentPart  as Base64 encoded   character data, this method would base64 encode the raw bytes   of the attachment and return.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getBase64Content" return-type="java.io.InputStream"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:6</id>
<description>if there is no content set into this        AttachmentPart object or if there was a data        transformation error.</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getBase64Content" return-type="java.io.InputStream">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:7</id>
<description>
                            Gets the content of this AttachmentPart object as a Java  object.
                             The type of the returned Java object depends on (1) the  DataContentHandler object that is used to interpret the bytes  and (2) the Content-Type given in the header.    For the MIME content types "text/plain", "text/html" and "text/xml", the  DataContentHandler object does the conversions to and   from the Java types corresponding to the MIME types.  For other MIME types,the DataContentHandler object   can return an InputStream object that contains the content data  as raw bytes.    A SAAJ-compliant implementation must, as a minimum, return a  java.lang.String object corresponding to any content  stream with a Content-Type value of  text/plain, a  javax.xml.transform.stream.StreamSource object corresponding to a  content stream with a Content-Type value of  text/xml, a java.awt.Image object  corresponding to a content stream with a  Content-Type value of image/gif or  image/jpeg.  For those content types that an   installed DataContentHandler object does not understand, the  DataContentHandler object is required to return a  java.io.InputStream object with the raw bytes.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getContent" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:8</id>
<description>if there is no content set into this             AttachmentPart object or if there was a data             transformation error</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getContent" return-type="java.lang.Object">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:9</id>
<description>
                            Gets the value of the MIME header whose name is "Content-ID".
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getContentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:10</id>
<description>
                            Gets the value of the MIME header whose name is "Content-Location".
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getContentLocation" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:11</id>
<description>
                            Gets the value of the MIME header whose name is "Content-Type".
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getContentType" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:12</id>
<description>
                            Gets the DataHandler object for this AttachmentPart  object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getDataHandler" return-type="DataHandler"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:13</id>
<description>if there is no data in  this AttachmentPart object</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getDataHandler" return-type="DataHandler">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:14</id>
<description>
                            Retrieves all MimeHeader objects that match a name in  the given array.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getMatchingMimeHeaders" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:15</id>
<description>
                            Gets all the values of the header identified by the given  String.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getMimeHeader" return-type="java.lang.String[]">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:16</id>
<description>
                            Retrieves all MimeHeader objects whose name does  not match a name in the given array.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getNonMatchingMimeHeaders" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:17</id>
<description>
                            Gets the content of this AttachmentPart object as an   InputStream as if a call had been made to getContent and no  DataContentHandler had been registered for the   content-type of this AttachmentPart.
                            
                               Note that reading from the returned InputStream would result in consuming   the data in the stream. It is the responsibility of the caller to reset  the InputStream appropriately before calling a Subsequent API. If a copy  of the raw attachment content is required then the #getRawContentBytes API   should be used instead.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getRawContent" return-type="java.io.InputStream"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:18</id>
<description>if there is no content set into this        AttachmentPart object or if there was a data        transformation error.</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getRawContent" return-type="java.io.InputStream">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:19</id>
<description>
                            Gets the content of this AttachmentPart object as a   byte[] array as if a call had been made to getContent and no  DataContentHandler had been registered for the   content-type of this AttachmentPart.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getRawContentBytes" return-type="byte[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:20</id>
<description>if there is no content set into this        AttachmentPart object or if there was a data        transformation error.</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getRawContentBytes" return-type="byte[]">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:21</id>
<description>
                            Returns the number of bytes in this AttachmentPart  object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getSize" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:22</id>
<description>if the content of this attachment is             corrupted of if there was an exception while trying             to determine the size.</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="getSize" return-type="int">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:23</id>
<description>
                            Removes all the MIME header entries.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="removeAllMimeHeaders" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:24</id>
<description>
                            Removes all MIME headers that match the given name.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="removeMimeHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:25</id>
<description>
                            Sets the content of this attachment part from the Base64 source  InputStream  and sets the value of the  Content-Type header to the value contained in   contentType, This method would first decode the base64   input and write the resulting raw bytes to the attachment.
                                  A subsequent call to getSize() may not be an exact measure    of the content size.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setBase64Content" return-type="void">
<parameters>
<parameter>java.io.InputStream</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:26</id>
<description>if an there is an error in setting the content</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setBase64Content" return-type="void">
<parameters>
<parameter>java.io.InputStream</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:27</id>
<description>
                            Sets the content of this attachment part to that of the given   Object and sets the value of the Content-Type  header to the given type.
                             The type of the  Object should correspond to the value given for the  Content-Type. This depends on the particular  set of DataContentHandler objects in use.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setContent" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:28</id>
<description>
                            Sets the MIME header whose name is "Content-ID" with the given value.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setContentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:29</id>
<description>
                            Sets the MIME header whose name is "Content-Location" with the given value.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setContentLocation" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:30</id>
<description>
                            Sets the MIME header whose name is "Content-Type" with the given value.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setContentType" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:31</id>
<description>
                            Sets the given DataHandler object as the data handler  for this AttachmentPart object.
                             Typically, on an incoming  message, the data handler is automatically set. When  a message is being created and populated with content, the  setDataHandler method can be used to get data from  various data sources into the message.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setDataHandler" return-type="void">
<parameters>
<parameter>DataHandler</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:32</id>
<description>
                            Changes the first header entry that matches the given name  to the given value, adding a new header if no existing header  matches.
                             This method also removes all matching headers but the first.    Note that RFC822 headers can only contain US-ASCII characters.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setMimeHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:33</id>
<description>
                            Sets the content of this attachment part to that contained by the  InputStream content and sets the value of the  Content-Type header to the value contained in   contentType.
                                 A subsequent call to getSize() may not be an exact measure    of the content size.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setRawContent" return-type="void">
<parameters>
<parameter>java.io.InputStream</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:34</id>
<description>if an there is an error in setting the content</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setRawContent" return-type="void">
<parameters>
<parameter>java.io.InputStream</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:35</id>
<description>
                            Sets the content of this attachment part to that contained by the  byte[] array content and sets the value of the  Content-Type header to the value contained in   contentType.
                        </description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setRawContentBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:36</id>
<description>if an there is an error in setting the content   or content is null</description>
<package>javax.xml.soap</package>
<class-interface>AttachmentPart</class-interface>
<method name="setRawContentBytes" return-type="void">
<parameters>
<parameter>byte[]</parameter>
<parameter>int</parameter>
<parameter>int</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:37</id>
<description>
                            Creates a new DetailEntry object with the given  name and adds it to this Detail object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>Detail</class-interface>
<method name="addDetailEntry" return-type="javax.xml.soap.DetailEntry">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:38</id>
<description>thrown when there is a problem in adding a  DetailEntry object to this Detail object.</description>
<package>javax.xml.soap</package>
<class-interface>Detail</class-interface>
<method name="addDetailEntry" return-type="javax.xml.soap.DetailEntry">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:39</id>
<description>
                            Creates a new DetailEntry object with the given  QName and adds it to this Detail object.
                             This method  is the preferred over the one using Name.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>Detail</class-interface>
<method name="addDetailEntry" return-type="javax.xml.soap.DetailEntry">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:40</id>
<description>thrown when there is a problem in adding a  DetailEntry object to this Detail object.</description>
<package>javax.xml.soap</package>
<class-interface>Detail</class-interface>
<method name="addDetailEntry" return-type="javax.xml.soap.DetailEntry">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:41</id>
<description>
                            Gets an Iterator over all of the DetailEntrys in this Detail object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Detail</class-interface>
<method name="getDetailEntries" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:42</id>
<description>
                            Creates a new SOAPMessage object with the default  SOAPPart, SOAPEnvelope, SOAPBody,  and SOAPHeader objects.
                             Profile-specific message factories  can choose to prepopulate the SOAPMessage object with  profile-specific headers.    Content can be added to this message's SOAPPart object, and  the message can be sent "as is" when a message containing only a SOAP part  is sufficient. Otherwise, the SOAPMessage object needs  to create one or more AttachmentPart objects and  add them to itself. Any content that is not in XML format must be  in an AttachmentPart object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="createMessage" return-type="javax.xml.soap.SOAPMessage"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:43</id>
<description>if a SOAP error occurs</description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="createMessage" return-type="javax.xml.soap.SOAPMessage">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:44</id>
<description>
                            Internalizes the contents of the given InputStream object into a  new SOAPMessage object and returns the SOAPMessage  object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="createMessage" return-type="javax.xml.soap.SOAPMessage">
<parameters>
<parameter>javax.xml.soap.MimeHeaders</parameter>
<parameter>java.io.InputStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:45</id>
<description>if there is a problem in reading data from             the input stream</description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="createMessage" return-type="javax.xml.soap.SOAPMessage">
<parameters>
<parameter>javax.xml.soap.MimeHeaders</parameter>
<parameter>java.io.InputStream</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:46</id>
<description>may be thrown if the message is invalid</description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="createMessage" return-type="javax.xml.soap.SOAPMessage">
<parameters>
<parameter>javax.xml.soap.MimeHeaders</parameter>
<parameter>java.io.InputStream</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:47</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="MessageFactory" return-type="MessageFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:48</id>
<description>
                            Creates a new MessageFactory object that is an instance  of the default implementation (SOAP 1.1),   This method uses the following ordered lookup procedure to determine the MessageFactory implementation class to load:      Use the javax.xml.soap.MessageFactory system property.
                                Use the properties file "lib/jaxm.properties" in the JRE directory. This configuration file is in standard  java.util.Properties format and contains the fully qualified name of the implementation class with the key being the  system property defined above.    Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API  will look for a classname in the file META-INF/services/javax.xml.soap.MessageFactory in jars available to the runtime.    Use the SAAJMetaFactory instance to locate the MessageFactory implementation class.  
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.MessageFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:49</id>
<description>if there was an error in creating the             default implementation of the             MessageFactory.</description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.MessageFactory">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:50</id>
<description>
                            Creates a new MessageFactory object that is an instance  of the specified implementation.
                              May be a dynamic message factory,  a SOAP 1.1 message factory, or a SOAP 1.2 message factory. A dynamic  message factory creates messages based on the MIME headers specified  as arguments to the createMessage method.   This method uses the SAAJMetaFactory to locate the implementation class   and create the MessageFactory instance.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.MessageFactory">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:51</id>
<description>if there was an error in creating the             specified implementation of  MessageFactory.</description>
<package>javax.xml.soap</package>
<class-interface>MessageFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.MessageFactory">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:52</id>
<description>
                            Returns the name of this MimeHeader object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeader</class-interface>
<method name="getName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:53</id>
<description>
                            Returns the value of this MimeHeader object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeader</class-interface>
<method name="getValue" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:54</id>
<description>
                            Constructs a MimeHeader object initialized with the given  name and value.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeader</class-interface>
<method name="MimeHeader" return-type="MimeHeader">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:55</id>
<description>
                            Adds a MimeHeader object with the specified name and value  to this MimeHeaders object's list of headers.
                                Note that RFC822 headers can contain only US-ASCII characters.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="addHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:56</id>
<description>
                            Returns all the MimeHeaders in this MimeHeaders object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="getAllHeaders" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:57</id>
<description>
                            Returns all of the values for the specified header as an array of  String objects.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="getHeader" return-type="java.lang.String[]">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:58</id>
<description>
                            Returns all the MimeHeader objects whose name matches  a name in the given array of names.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="getMatchingHeaders" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:59</id>
<description>
                            Returns all of the MimeHeader objects whose name does not  match a name in the given array of names.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="getNonMatchingHeaders" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:60</id>
<description>
                            Constructs a default MimeHeaders object initialized with  an empty Vector object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="MimeHeaders" return-type="MimeHeaders"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:61</id>
<description>
                            Removes all the header entries from this MimeHeaders object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="removeAllHeaders" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:62</id>
<description>
                            Remove all MimeHeader objects whose name matches the  given name.
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="removeHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:63</id>
<description>
                            Replaces the current value of the first header entry whose name matches  the given name with the given value, adding a new header if no existing header  name matches.
                             This method also removes all matching headers after the first one.    Note that RFC822 headers can contain only US-ASCII characters.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>MimeHeaders</class-interface>
<method name="setHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:64</id>
<description>
                            Gets the local name part of the XML name that this Name  object represents.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Name</class-interface>
<method name="getLocalName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:65</id>
<description>
                            Returns the prefix that was specified when this Name object  was initialized.
                             This prefix is associated with the namespace for the XML  name that this Name object represents.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Name</class-interface>
<method name="getPrefix" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:66</id>
<description>
                            Gets the namespace-qualified name of the XML name that this   Name object represents.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Name</class-interface>
<method name="getQualifiedName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:67</id>
<description>
                            Returns the URI of the namespace for the XML  name that this Name object represents.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Name</class-interface>
<method name="getURI" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:68</id>
<description>
                            Removes this Node object from the tree.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Node</class-interface>
<method name="detachNode" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:69</id>
<description>
                            Returns the parent element of this Node object.
                              This method can throw an UnsupportedOperationException  if the tree is not kept in memory.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>Node</class-interface>
<method name="getParentElement" return-type="javax.xml.soap.SOAPElement"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:70</id>
<description>
                            Returns the value of this node if this is a Text node or the  value of the immediate child of this node otherwise.
                              If there is an immediate child of this Node that it is a   Text node then it's value will be returned. If there is  more than one Text node then the value of the first   Text Node will be returned.  Otherwise null is returned.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Node</class-interface>
<method name="getValue" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:71</id>
<description>
                            Notifies the implementation that this Node  object is no longer being used by the application and that the  implementation is free to reuse this object for nodes that may  be created later.
                                Calling the method recycleNode implies that the method  detachNode has been called previously.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Node</class-interface>
<method name="recycleNode" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:72</id>
<description>
                            Sets the parent of this Node object to the given  SOAPElement object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>Node</class-interface>
<method name="setParentElement" return-type="void">
<parameters>
<parameter>javax.xml.soap.SOAPElement</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:73</id>
<description>if there is a problem in setting the                           parent to the given element</description>
<package>javax.xml.soap</package>
<class-interface>Node</class-interface>
<method name="setParentElement" return-type="void">
<parameters>
<parameter>javax.xml.soap.SOAPElement</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:74</id>
<description>
                            If this is a Text node then this method will set its value,   otherwise it sets the value of  the immediate (Text) child of this node.
                              The value of the immediate child of this node can be set only if, there is  one child node and that node is a Text node, or if  there are no children in which case a child Text node will be   created.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Node</class-interface>
<method name="setValue" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:75</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>SAAJResult</class-interface>
<method name="getResult" return-type="javax.xml.soap.Node"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:76</id>
<description>
                            Creates a SAAJResult that will present results in the form  of a SAAJ tree that supports the default (SOAP 1.1) protocol.
                            
                                 This kind of SAAJResult is meant for use in situations where the   results will be used as a parameter to a method that takes a parameter   whose type, such as SOAPElement, is drawn from the SAAJ   API. When used in a transformation, the results are populated into the   SOAPPart of a SOAPMessage that is created internally.  The SOAPPart returned by DOMResult#getNode()   is not guaranteed to be well-formed.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SAAJResult</class-interface>
<method name="SAAJResult" return-type="SAAJResult"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:77</id>
<description>
                            Creates a SAAJResult that will present results in the form  of a SAAJ tree that supports the specified protocol.
                            
                             The   DYNAMIC_SOAP_PROTOCOL is ambiguous in this context and will  cause this constructor to throw an UnsupportedOperationException.     This kind of SAAJResult is meant for use in situations where the   results will be used as a parameter to a method that takes a parameter   whose type, such as SOAPElement, is drawn from the SAAJ   API. When used in a transformation the results are populated into the   SOAPPart of a SOAPMessage that is created   internally. The SOAPPart returned by DOMResult#getNode()   is not guaranteed to be well-formed.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SAAJResult</class-interface>
<method name="SAAJResult" return-type="SAAJResult">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:78</id>
<description>
                            Creates a SAAJResult that will write the results into the  SOAPPart of the supplied SOAPMessage.
                               In the normal case these results will be written using DOM APIs and,   as a result, the finished SOAPPart will not be guaranteed   to be well-formed unless the data used to create it is also well formed.   When used in a transformation the validity of the SOAPMessage   after the transformation can be guaranteed only by means outside SAAJ   specification.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SAAJResult</class-interface>
<method name="SAAJResult" return-type="SAAJResult">
<parameters>
<parameter>javax.xml.soap.SOAPMessage</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:79</id>
<description>
                            Creates a SAAJResult that will write the results as a   child node of the SOAPElement specified.
                             In the normal  case these results will be written using DOM APIs and as a result may  invalidate the structure of the SAAJ tree. This kind of   SAAJResult should only be used when the validity of the  incoming data can be guaranteed by means outside of the SAAJ   specification.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SAAJResult</class-interface>
<method name="SAAJResult" return-type="SAAJResult">
<parameters>
<parameter>javax.xml.soap.SOAPElement</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:80</id>
<description>
                            Creates a new SOAPBodyElement object with the specified  name and adds it to this SOAPBody object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addBodyElement" return-type="javax.xml.soap.SOAPBodyElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:81</id>
<description>if a SOAP error occurs</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addBodyElement" return-type="javax.xml.soap.SOAPBodyElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:82</id>
<description>
                            Creates a new SOAPBodyElement object with the specified  QName and adds it to this SOAPBody object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addBodyElement" return-type="javax.xml.soap.SOAPBodyElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:83</id>
<description>if a SOAP error occurs</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addBodyElement" return-type="javax.xml.soap.SOAPBodyElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:84</id>
<description>
                            
                            Adds the root node of the DOM org.w3c.dom.Document  to this SOAPBody object.
                                Calling this method invalidates the document parameter.  The client application should discard all references to this Document  and its contents upon calling addDocument. The behavior  of an application that continues to use such references is undefined.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addDocument" return-type="javax.xml.soap.SOAPBodyElement">
<parameters>
<parameter>org.w3c.dom.Document</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:85</id>
<description>if the Document cannot be added</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addDocument" return-type="javax.xml.soap.SOAPBodyElement">
<parameters>
<parameter>org.w3c.dom.Document</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:86</id>
<description>
                            Creates a new SOAPFault object and adds it to  this SOAPBody object.
                             The new SOAPFault will  have default values set for the mandatory child elements. The type of   the SOAPFault will be a SOAP 1.1 or a SOAP 1.2 SOAPFault   depending on the protocol specified while creating the   MessageFactory instance.     A SOAPBody may contain at most one SOAPFault  child element.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:87</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:88</id>
<description>
                            Creates a new SOAPFault object and adds it to  this SOAPBody object.
                             The type of the   SOAPFault will be a SOAP 1.1  or a SOAP 1.2   SOAPFault depending on the protocol  specified while creating the MessageFactory instance.    For SOAP 1.2 the faultCode parameter is the value of the   Fault/Code/Value element  and the faultString parameter   is the value of the Fault/Reason/Text element. For SOAP 1.1   the faultCode parameter is the value of the faultcode   element and the faultString parameter is the value of the faultstring   element.     A SOAPBody may contain at most one SOAPFault  child element.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.util.Locale</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:89</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.util.Locale</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:90</id>
<description>
                            Creates a new SOAPFault object and adds it to this   SOAPBody object.
                             The type of the SOAPFault   will be a SOAP 1.1 or a SOAP 1.2 SOAPFault depending on   the protocol specified while creating the MessageFactory   instance.    For SOAP 1.2 the faultCode parameter is the value of the   Fault/Code/Value element  and the faultString parameter   is the value of the Fault/Reason/Text element. For SOAP 1.1   the faultCode parameter is the value of the faultcode   element and the faultString parameter is the value of the faultstring   element.     A SOAPBody may contain at most one SOAPFault  child element.
                            
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.util.Locale</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:91</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.util.Locale</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:92</id>
<description>
                            Creates a new  SOAPFault object and adds it to this   SOAPBody object.
                             The type of the SOAPFault  will be a SOAP 1.1 or a SOAP 1.2 SOAPFault depending on  the protocol specified while creating the MessageFactory  instance.    For SOAP 1.2 the faultCode parameter is the value of the   Fault/Code/Value element  and the faultString parameter   is the value of the Fault/Reason/Text element. For SOAP 1.1   the faultCode parameter is the value of the faultcode   element and the faultString parameter is the value of the faultstring   element.     In case of a SOAP 1.2 fault, the default value for the mandatory xml:lang   attribute on the Fault/Reason/Text element will be set to  java.util.Locale.getDefault()    A SOAPBody may contain at most one SOAPFault  child element.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:93</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:94</id>
<description>
                            Creates a new SOAPFault object and adds it to this SOAPBody  object.
                             The type of the SOAPFault  will be a SOAP 1.1 or a SOAP 1.2 SOAPFault depending on  the protocol specified while creating the MessageFactory  instance.    For SOAP 1.2 the faultCode parameter is the value of the   Fault/Code/Value element  and the faultString parameter   is the value of the Fault/Reason/Text element. For SOAP 1.1   the faultCode parameter is the value of the faultcode   element and the faultString parameter is the value of the faultstring   element.     In case of a SOAP 1.2 fault, the default value for the mandatory xml:lang   attribute on the Fault/Reason/Text element will be set to  java.util.Locale.getDefault()    A SOAPBody may contain at most one SOAPFault  child element
                            
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:95</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="addFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:96</id>
<description>
                            
                            Creates a new DOM org.w3c.dom.Document and sets  the first child of this SOAPBody as it's document  element.
                             The child SOAPElement is removed as part of the  process.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="extractContentAsDocument" return-type="org.w3c.dom.Document"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:97</id>
<description>if there is not exactly one child SOAPElement of the                SOAPBody.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="extractContentAsDocument" return-type="org.w3c.dom.Document">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:98</id>
<description>
                            Returns the SOAPFault object in this SOAPBody  object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="getFault" return-type="javax.xml.soap.SOAPFault"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:99</id>
<description>
                            Indicates whether a SOAPFault object exists in this  SOAPBody object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPBody</class-interface>
<method name="hasFault" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:100</id>
<description>
                            Sends the given message to the specified endpoint and blocks until  it has returned the response.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnection</class-interface>
<method name="call" return-type="javax.xml.soap.SOAPMessage">
<parameters>
<parameter>javax.xml.soap.SOAPMessage</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:101</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnection</class-interface>
<method name="call" return-type="javax.xml.soap.SOAPMessage">
<parameters>
<parameter>javax.xml.soap.SOAPMessage</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:102</id>
<description>
                            Closes this SOAPConnection object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnection</class-interface>
<method name="close" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:103</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnection</class-interface>
<method name="close" return-type="void">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:104</id>
<description>
                            Gets a message from a specific endpoint and blocks until it receives,
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnection</class-interface>
<method name="get" return-type="javax.xml.soap.SOAPMessage">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:105</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnection</class-interface>
<method name="get" return-type="javax.xml.soap.SOAPMessage">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:106</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>SOAPConnection</class-interface>
<method name="SOAPConnection" return-type="SOAPConnection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:107</id>
<description>
                            Create a new SOAPConnection.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnectionFactory</class-interface>
<method name="createConnection" return-type="javax.xml.soap.SOAPConnection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:108</id>
<description>if there was an exception creating the  SOAPConnection object.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnectionFactory</class-interface>
<method name="createConnection" return-type="javax.xml.soap.SOAPConnection">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:109</id>
<description>
                            Creates an instance of the default  SOAPConnectionFactory object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnectionFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPConnectionFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:110</id>
<description>if there was an error creating the             SOAPConnectionFactory</description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnectionFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPConnectionFactory">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:111</id>
<description>if newInstance is not  supported.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPConnectionFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPConnectionFactory">
<throw>java.lang.UnsupportedOperationException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:112</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>SOAPConnectionFactory</class-interface>
<method name="SOAPConnectionFactory" return-type="SOAPConnectionFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:113</id>
<description>
                            Adds an attribute with the specified name and value to this  SOAPElement object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addAttribute" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:114</id>
<description>if there is an error in creating the                           Attribute, or it is invalid to set                                  an attribute with Name                                   name on this SOAPElement.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addAttribute" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:115</id>
<description>
                            Adds an attribute with the specified name and value to this  SOAPElement object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addAttribute" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:116</id>
<description>if there is an error in creating the                           Attribute, or it is invalid to set                                 an attribute with QName                                  qname on this SOAPElement.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addAttribute" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:117</id>
<description>
                            Creates a new SOAPElement object initialized with the  given Name object and adds the new element to this  SOAPElement object.
                                This method may be deprecated in a future release of SAAJ in favor of   addChildElement(javax.xml.namespace.QName)
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:118</id>
<description>if there is an error in creating the                           SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:119</id>
<description>
                            Creates a new SOAPElement object initialized with the given   QName object and adds the new element to this SOAPElement   object.
                             The  namespace, localname and prefix of the new   SOAPElement are all taken  from the qname argument.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:120</id>
<description>if there is an error in creating the                           SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:121</id>
<description>
                            Creates a new SOAPElement object initialized with the  specified local name and adds the new element to this  SOAPElement object.
                                The new  SOAPElement inherits any in-scope default namespace.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:122</id>
<description>if there is an error in creating the                           SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:123</id>
<description>
                            Creates a new SOAPElement object initialized with the  specified local name and prefix and adds the new element to this  SOAPElement object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:124</id>
<description>if the prefix is not valid in the          context of this SOAPElement or  if there is an error in creating the                           SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:125</id>
<description>
                            Creates a new SOAPElement object initialized with the  specified local name, prefix, and URI and adds the new element to this  SOAPElement object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:126</id>
<description>if there is an error in creating the                           SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:127</id>
<description>
                            Add a SOAPElement as a child of this  SOAPElement instance.
                             The SOAPElement  is expected to be created by a  SOAPFactory. Callers should not rely on the  element instance being added as is into the XML  tree. Implementations could end up copying the content  of the SOAPElement passed into an instance of  a different SOAPElement implementation. For  instance if addChildElement() is called on a  SOAPHeader, element will be copied  into an instance of a SOAPHeaderElement.   The fragment rooted in element is either added  as a whole or not at all, if there was an error.   The fragment rooted in element cannot contain  elements named "Envelope", "Header" or "Body" and in the SOAP  namespace. Any namespace prefixes present in the fragment  should be fully resolved using appropriate namespace  declarations within the fragment itself.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.SOAPElement</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:128</id>
<description>if there was an error in adding this                           element as a child</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addChildElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.SOAPElement</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:129</id>
<description>
                            Adds a namespace declaration with the specified prefix and URI to this  SOAPElement object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addNamespaceDeclaration" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:130</id>
<description>if there is an error in creating the                           namespace</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addNamespaceDeclaration" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:131</id>
<description>
                            Creates a new Text object initialized with the given  String and adds it to this SOAPElement object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addTextNode" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:132</id>
<description>if there is an error in creating the                     new Text object or if it is not legal to                       attach it as a child to this                        SOAPElement</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="addTextNode" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:133</id>
<description>
                            Creates a QName whose namespace URI is the one associated  with the parameter, prefix, in the context of this  SOAPElement.
                             The remaining elements of the new   QName are taken directly from the parameters,   localName and prefix.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="createQName" return-type="javax.xml.namespace.QName">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:134</id>
<description>if the QName cannot be created.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="createQName" return-type="javax.xml.namespace.QName">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:135</id>
<description>
                            Returns an Iterator over all of the attribute   Name objects in this  SOAPElement object.
                             The iterator can be used to get  the attribute names, which can then be passed to the method  getAttributeValue to retrieve the value of each  attribute.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getAllAttributes" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:136</id>
<description>
                            Returns the value of the attribute with the specified name.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getAttributeValue" return-type="java.lang.String">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:137</id>
<description>
                            Returns the value of the attribute with the specified qname.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getAttributeValue" return-type="java.lang.String">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:138</id>
<description>
                            
                            Returns an Iterator over all the immediate child  Nodes of this element.
                            
                             This includes javax.xml.soap.Text  objects as well as SOAPElement objects.    Calling this method may cause child Element,   SOAPElement and org.w3c.dom.Text nodes to be   replaced by SOAPElement, SOAPHeaderElement,   SOAPBodyElement or javax.xml.soap.Text nodes as  appropriate for the type of this parent node. As a result the calling   application must treat any existing references to these child nodes that   have been obtained through DOM APIs as invalid and either discard them or  refresh them with the values returned by this Iterator. This   behavior can be avoided by calling the equivalent DOM APIs. See  javax.xml.soap  for more details.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getChildElements" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:139</id>
<description>
                            
                            Returns an Iterator over all the immediate child  Nodes of this element with the specified name.
                            
                             All of these   children will be SOAPElement nodes.    Calling this method may cause child Element,   SOAPElement and org.w3c.dom.Text nodes to be   replaced by SOAPElement, SOAPHeaderElement,   SOAPBodyElement or javax.xml.soap.Text nodes as  appropriate for the type of this parent node. As a result the calling   application must treat any existing references to these child nodes that   have been obtained through DOM APIs as invalid and either discard them or  refresh them with the values returned by this Iterator. This   behavior can be avoided by calling the equivalent DOM APIs. See  javax.xml.soap  for more details.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getChildElements" return-type="java.util.Iterator">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:140</id>
<description>
                            
                            Returns an Iterator over all the immediate child  Nodes of this element with the specified qname.
                            
                             All of these   children will be SOAPElement nodes.    Calling this method may cause child Element,   SOAPElement and org.w3c.dom.Text nodes to be   replaced by SOAPElement, SOAPHeaderElement,   SOAPBodyElement or javax.xml.soap.Text nodes as  appropriate for the type of this parent node. As a result the calling   application must treat any existing references to these child nodes that   have been obtained through DOM APIs as invalid and either discard them or  refresh them with the values returned by this Iterator. This   behavior can be avoided by calling the equivalent DOM APIs. See  javax.xml.soap  for more details.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getChildElements" return-type="java.util.Iterator">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:141</id>
<description>
                            Returns the name of this SOAPElement object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getElementName" return-type="javax.xml.soap.Name"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:142</id>
<description>
                            Returns the qname of this SOAPElement object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getElementQName" return-type="javax.xml.namespace.QName"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:143</id>
<description>
                            Returns the encoding style for this SOAPElement object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getEncodingStyle" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:144</id>
<description>
                            Returns an Iterator over the namespace prefix  Strings declared by this element.
                             The prefixes returned by  this iterator can be passed to the method  getNamespaceURI to retrieve the URI of each namespace.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getNamespacePrefixes" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:145</id>
<description>
                            Returns the URI of the namespace that has the given prefix.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getNamespaceURI" return-type="java.lang.String">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:146</id>
<description>
                            Returns an Iterator over the namespace prefix  Strings visible to this element.
                             The prefixes returned by  this iterator can be passed to the method  getNamespaceURI to retrieve the URI of each namespace.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="getVisibleNamespacePrefixes" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:147</id>
<description>
                            Removes the attribute with the specified name.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="removeAttribute" return-type="boolean">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:148</id>
<description>
                            Removes the attribute with the specified qname.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="removeAttribute" return-type="boolean">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:149</id>
<description>
                            Detaches all children of this SOAPElement.
                                This method is useful for rolling back the construction of partially   completed SOAPHeaders and SOAPBodys in   preparation for sending a fault when an error condition is detected. It   is also useful for recycling portions of a document within a SOAP   message.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="removeContents" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:150</id>
<description>
                            Removes the namespace declaration corresponding to the given prefix.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="removeNamespaceDeclaration" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:151</id>
<description>
                            Changes the name of this Element to newName if   possible.
                             SOAP Defined elements such as SOAPEnvelope, SOAPHeader, SOAPBody   etc. cannot have their names changed using this method. Any attempt to do   so will result in a  SOAPException being thrown.   Callers should not rely on the element instance being renamed as is.   Implementations could end up copying the content of the   SOAPElement to a renamed instance.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="setElementQName" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:152</id>
<description>if changing the name of this Element                           is not allowed.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="setElementQName" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:153</id>
<description>
                            Sets the encoding style for this SOAPElement object  to one specified.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="setEncodingStyle" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:154</id>
<description>if setting the encodingStyle is invalid for this SOAPElement.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElement</class-interface>
<method name="setEncodingStyle" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>SAAJ:JAVADOC:155</id>
<description>
                            Create a SOAPElement object initialized with the  given Name object.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElementFactory</class-interface>
<method name="create" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>SAAJ:JAVADOC:156</id>
<description>if there is an error in creating the             SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElementFactory</class-interface>
<method name="create" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>SAAJ:JAVADOC:157</id>
<description>
                            Create a SOAPElement object initialized with the  given local name.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElementFactory</class-interface>
<method name="create" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>SAAJ:JAVADOC:158</id>
<description>if there is an error in creating the             SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElementFactory</class-interface>
<method name="create" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>SAAJ:JAVADOC:159</id>
<description>
                            Create a new SOAPElement object with the given  local name, prefix and uri.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElementFactory</class-interface>
<method name="create" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>SAAJ:JAVADOC:160</id>
<description>if there is an error in creating the             SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElementFactory</class-interface>
<method name="create" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>SAAJ:JAVADOC:161</id>
<description>
                            Creates a new instance of SOAPElementFactory.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPElementFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPElementFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>SAAJ:JAVADOC:162</id>
<description>if there was an error creating the             default SOAPElementFactory</description>
<package>javax.xml.soap</package>
<class-interface>SOAPElementFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPElementFactory">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:163</id>
<description>
                            Creates a SOAPBody object and sets it as the  SOAPBody object for this SOAPEnvelope  object.
                                It is illegal to add a body when the envelope already  contains a body. Therefore, this method should be called  only after the existing body has been removed.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="addBody" return-type="javax.xml.soap.SOAPBody"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:164</id>
<description>if this             SOAPEnvelope object already contains a             valid SOAPBody object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="addBody" return-type="javax.xml.soap.SOAPBody">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:165</id>
<description>
                            Creates a SOAPHeader object and sets it as the  SOAPHeader object for this SOAPEnvelope  object.
                                It is illegal to add a header when the envelope already  contains a header.  Therefore, this method should be called  only after the existing header has been removed.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="addHeader" return-type="javax.xml.soap.SOAPHeader"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:166</id>
<description>if this             SOAPEnvelope object already contains a             valid SOAPHeader object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="addHeader" return-type="javax.xml.soap.SOAPHeader">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:167</id>
<description>
                            Creates a new Name object initialized with the  given local name, namespace prefix, and namespace URI.
                                This factory method creates Name objects for use in  the SOAP/XML document.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="createName" return-type="javax.xml.soap.Name">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:168</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="createName" return-type="javax.xml.soap.Name">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:169</id>
<description>
                            Creates a new Name object initialized with the  given local name.
                                This factory method creates Name objects for use in  the SOAP/XML document.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="createName" return-type="javax.xml.soap.Name">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:170</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="createName" return-type="javax.xml.soap.Name">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:171</id>
<description>
                            Returns the SOAPBody object associated with this  SOAPEnvelope object.
                                A new SOAPMessage object is by default created with a  SOAPEnvelope object that contains an empty  SOAPBody object.  As a result, the method  getBody will always return a SOAPBody  object unless the body has been removed and a new one has not  been added.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="getBody" return-type="javax.xml.soap.SOAPBody"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:172</id>
<description>if there is a problem obtaining the             SOAPBody object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="getBody" return-type="javax.xml.soap.SOAPBody">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:173</id>
<description>
                            Returns the SOAPHeader object for  this SOAPEnvelope object.
                                A new SOAPMessage object is by default created with a  SOAPEnvelope object that contains an empty  SOAPHeader object.  As a result, the method  getHeader will always return a SOAPHeader  object unless the header has been removed and a new one has not  been added.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="getHeader" return-type="javax.xml.soap.SOAPHeader"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:174</id>
<description>if there is a problem obtaining the             SOAPHeader object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPEnvelope</class-interface>
<method name="getHeader" return-type="javax.xml.soap.SOAPHeader">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:175</id>
<description>
                            Returns the Throwable object embedded in this  SOAPException if there is one.
                             Otherwise, this method  returns null.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPException</class-interface>
<method name="getCause" return-type="java.lang.Throwable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:176</id>
<description>
                            Returns the detail message for this SOAPException  object.
                                If there is an embedded Throwable object, and if the  SOAPException object has no detail message of its  own, this method will return the detail message from the embedded  Throwable object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPException</class-interface>
<method name="getMessage" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:177</id>
<description>
                            Initializes the cause field of this SOAPException  object with the given Throwable object.
                            
                            
                                This method can be called at most once.  It is generally called from  within the constructor or immediately after the constructor has  returned a new SOAPException object.  If this SOAPException object was created with the  constructor #SOAPException(Throwable) or  #SOAPException(String,Throwable), meaning that its  cause field already has a value, this method cannot be  called even once.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPException</class-interface>
<method name="initCause" return-type="java.lang.Throwable">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:178</id>
<description>
                            Constructs a SOAPException object with no  reason or embedded Throwable object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPException</class-interface>
<method name="SOAPException" return-type="SOAPException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:179</id>
<description>
                            Constructs a SOAPException object with the given  String as the reason for the exception being thrown.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPException</class-interface>
<method name="SOAPException" return-type="SOAPException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:180</id>
<description>
                            Constructs a SOAPException object with the given  String as the reason for the exception being thrown  and the given Throwable object as an embedded  exception.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPException</class-interface>
<method name="SOAPException" return-type="SOAPException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:181</id>
<description>
                            Constructs a SOAPException object initialized  with the given Throwable object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPException</class-interface>
<method name="SOAPException" return-type="SOAPException">
<parameters>
<parameter>java.lang.Throwable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:182</id>
<description>
                            Creates a new Detail object which serves as a container  for DetailEntry objects.
                                This factory method creates Detail objects for use in  situations where it is not practical to use the SOAPFault  abstraction.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createDetail" return-type="javax.xml.soap.Detail"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:183</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createDetail" return-type="javax.xml.soap.Detail">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:184</id>
<description>
                            Creates a SOAPElement object from an existing DOM   Element.
                             If the DOM Element that is passed in  as an argument is already a SOAPElement then this method   must return it unmodified without any further work. Otherwise, a new  SOAPElement is created and a deep copy is made of the   domElement argument. The concrete type of the return value  will depend on the name of the domElement argument. If any  part of the tree rooted in domElement violates SOAP rules, a   SOAPException will be thrown.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>org.w3c.dom.Element</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:185</id>
<description>if there is an error in creating the             SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>org.w3c.dom.Element</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:186</id>
<description>
                            Creates a SOAPElement object initialized with the  given Name object.
                             The concrete type of the return value  will depend on the name given to the new SOAPElement. For   instance, a new SOAPElement with the name   "{http://www.w3.org/2003/05/soap-envelope}Envelope" would cause a   SOAPEnvelope that supports SOAP 1.2 behavior to be created.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:187</id>
<description>if there is an error in creating the             SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:188</id>
<description>
                            Creates a SOAPElement object initialized with the  given QName object.
                             The concrete type of the return value  will depend on the name given to the new SOAPElement. For   instance, a new SOAPElement with the name   "{http://www.w3.org/2003/05/soap-envelope}Envelope" would cause a   SOAPEnvelope that supports SOAP 1.2 behavior to be created.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:189</id>
<description>if there is an error in creating the             SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:190</id>
<description>
                            Creates a SOAPElement object initialized with the  given local name.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:191</id>
<description>if there is an error in creating the             SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:192</id>
<description>
                            Creates a new SOAPElement object with the given  local name, prefix and uri.
                             The concrete type of the return value  will depend on the name given to the new SOAPElement. For   instance, a new SOAPElement with the name   "{http://www.w3.org/2003/05/soap-envelope}Envelope" would cause a   SOAPEnvelope that supports SOAP 1.2 behavior to be created.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:193</id>
<description>if there is an error in creating the             SOAPElement object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createElement" return-type="javax.xml.soap.SOAPElement">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:194</id>
<description>
                            Creates a new SOAPFault object initialized with the given reasonText   and faultCode
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:195</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createFault" return-type="javax.xml.soap.SOAPFault">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:196</id>
<description>
                            Creates a new default SOAPFault object
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createFault" return-type="javax.xml.soap.SOAPFault"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:197</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createFault" return-type="javax.xml.soap.SOAPFault">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:198</id>
<description>
                            Creates a new Name object initialized with the  given local name, namespace prefix, and namespace URI.
                                This factory method creates Name objects for use in  situations where it is not practical to use the SOAPEnvelope  abstraction.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createName" return-type="javax.xml.soap.Name">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:199</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createName" return-type="javax.xml.soap.Name">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:200</id>
<description>
                            Creates a new Name object initialized with the  given local name.
                                This factory method creates Name objects for use in  situations where it is not practical to use the SOAPEnvelope  abstraction.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createName" return-type="javax.xml.soap.Name">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:201</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="createName" return-type="javax.xml.soap.Name">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:202</id>
<description>
                            Creates a new SOAPFactory object that is an instance of  the default implementation (SOAP 1.1),   This method uses the following ordered lookup procedure to determine the SOAPFactory implementation class to load:      Use the javax.xml.soap.SOAPFactory system property.
                                Use the properties file "lib/jaxm.properties" in the JRE directory. This configuration file is in standard  java.util.Properties format and contains the fully qualified name of the implementation class with the key being the  system property defined above.    Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API  will look for a classname in the file META-INF/services/javax.xml.soap.SOAPFactory in jars available to the runtime.    Use the SAAJMetaFactory instance to locate the SOAPFactory implementation class.  
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:203</id>
<description>if there was an error creating the             default SOAPFactory</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPFactory">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:204</id>
<description>
                            Creates a new SOAPFactory object that is an instance of  the specified implementation, this method uses the SAAJMetaFactory to   locate the implementation class and create the SOAPFactory instance.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPFactory">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:205</id>
<description>if there was an error creating the             specified SOAPFactory</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="newInstance" return-type="javax.xml.soap.SOAPFactory">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:206</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>SOAPFactory</class-interface>
<method name="SOAPFactory" return-type="SOAPFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:207</id>
<description>
                            Creates an optional Detail object and sets it as the  Detail object for this SOAPFault  object.
                                It is illegal to add a detail when the fault already  contains a detail. Therefore, this method should be called  only after the existing detail has been removed.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="addDetail" return-type="javax.xml.soap.Detail"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:208</id>
<description>if this             SOAPFault object already contains a             valid Detail object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="addDetail" return-type="javax.xml.soap.Detail">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:209</id>
<description>
                            Appends or replaces a Reason Text item containing the specified  text message and an xml:lang derived from   locale.
                             If a Reason Text item with this   xml:lang already exists its text value will be replaced  with text.   The locale parameter should not be null    Code sample:     SOAPFault fault = ...;  fault.addFaultReasonText("Version Mismatch", Locale.ENGLISH);  
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="addFaultReasonText" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.util.Locale</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:210</id>
<description>if there was an error in adding the Reason text  or the locale passed was null.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="addFaultReasonText" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.util.Locale</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:211</id>
<description>
                            Adds a Subcode to the end of the sequence of Subcodes contained by this  SOAPFault.
                             Subcodes, which were introduced in SOAP 1.2, are   represented by a recursive sequence of subelements rooted in the  mandatory Code subelement of a SOAP Fault.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="appendFaultSubcode" return-type="void">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:212</id>
<description>if there was an error in setting the Subcode</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="appendFaultSubcode" return-type="void">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:213</id>
<description>
                            Returns the optional detail element for this SOAPFault  object.
                                A Detail object carries application-specific error  information, the scope of the error information is restricted to   faults in the SOAPBodyElement objects if this is a   SOAP 1.1 Fault.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getDetail" return-type="javax.xml.soap.Detail"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:214</id>
<description>
                            Gets the fault actor for this SOAPFault object.
                            
                                If this SOAPFault supports SOAP 1.2 then this call is  equivalent to #getFaultRole()
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultActor" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:215</id>
<description>
                            Gets the fault code for this SOAPFault object.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultCode" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:216</id>
<description>
                            Gets the mandatory SOAP 1.1 fault code for this  SOAPFault object as a SAAJ Name object.
                              The SOAP 1.1 specification requires the value of the "faultcode"  element to be of type QName. This method returns the content of the  element as a QName in the form of a SAAJ Name object. This method  should be used instead of the getFaultCode method since  it allows applications to easily access the namespace name without  additional parsing.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultCodeAsName" return-type="javax.xml.soap.Name"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:217</id>
<description>
                            Gets the fault code for this  SOAPFault object as a QName object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultCodeAsQName" return-type="javax.xml.namespace.QName"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:218</id>
<description>
                            Returns the optional Node element value for this  SOAPFault object.
                             The Node element is  optional in SOAP 1.2.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultNode" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:219</id>
<description>
                            Returns an Iterator over a distinct sequence of   Locales for which there are associated Reason Text items.
                               Any of these Locales can be used in a call to   getFaultReasonText in order to obtain a localized version  of the Reason Text string.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultReasonLocales" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:220</id>
<description>if there was an error in retrieving   the  fault Reason locales.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultReasonLocales" return-type="java.util.Iterator">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:221</id>
<description>
                            Returns the Reason Text associated with the given Locale.
                               If more than one such Reason Text exists the first matching Text is   returned
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultReasonText" return-type="java.lang.String">
<parameters>
<parameter>java.util.Locale</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:222</id>
<description>if there was an error in retrieving   the  fault Reason text for the specified locale .</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultReasonText" return-type="java.lang.String">
<parameters>
<parameter>java.util.Locale</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:223</id>
<description>
                            Returns an Iterator over a sequence of   String objects containing all of the Reason Text items for  this SOAPFault.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultReasonTexts" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:224</id>
<description>if there was an error in retrieving   the  fault Reason texts.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultReasonTexts" return-type="java.util.Iterator">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:225</id>
<description>
                            Returns the optional Role element value for this  SOAPFault object.
                             The Role element is  optional in SOAP 1.2.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultRole" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:226</id>
<description>
                            Gets the fault string for this SOAPFault object.
                                 If this  SOAPFault is part of a message that supports SOAP 1.2 then  this call is equivalent to:        String reason = null;     try {         reason = (String) getFaultReasonTexts().next();     } catch (SOAPException e) {}     return reason;  
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultString" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:227</id>
<description>
                            Gets the locale of the fault string for this SOAPFault   object.
                                 If this  SOAPFault is part of a message that supports SOAP 1.2 then  this call is equivalent to:        Locale locale = null;     try {         locale = (Locale) getFaultReasonLocales().next();     } catch (SOAPException e) {}     return locale;  
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultStringLocale" return-type="java.util.Locale"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:228</id>
<description>
                            Gets the fault code for this SOAPFault object.
                              Gets the Subcodes for this SOAPFault as an iterator over   QNames.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="getFaultSubcodes" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:229</id>
<description>
                            Returns true if this SOAPFault has a Detail  subelement and false otherwise.
                             Equivalent to   (getDetail()!=null).
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="hasDetail" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:230</id>
<description>
                            Removes any Subcodes that may be contained by this   SOAPFault.
                             Subsequent calls to   getFaultSubcodes will return an empty iterator until a call  to appendFaultSubcode is made.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="removeAllFaultSubcodes" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:231</id>
<description>
                            Sets this SOAPFault object with the given fault actor.
                            
                                The fault actor is the recipient in the message path who caused the  fault to happen.    If this SOAPFault supports SOAP 1.2 then this call is  equivalent to #setFaultRole(String)
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultActor" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:232</id>
<description>if there was an error in adding the             faultActor to the underlying XML tree.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultActor" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:233</id>
<description>
                            Sets this SOAPFault object with the given fault code.
                            
                                Fault codes, which give information about the fault, are defined  in the SOAP 1.1 specification. A fault code is mandatory and must  be of type Name. This method provides a convenient  way to set a fault code. For example,     SOAPEnvelope se = ...;  // Create a qualified name in the SOAP namespace with a localName  // of "Client". Note that prefix parameter is optional and is null  // here which causes the implementation to use an appropriate prefix.  Name qname = se.createName("Client", null,                             SOAPConstants.URI_NS_SOAP_ENVELOPE);  SOAPFault fault = ...;  fault.setFaultCode(qname);    It is preferable to use this method over #setFaultCode(String).
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultCode" return-type="void">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:234</id>
<description>if there was an error in adding the             faultcode element to the underlying XML tree.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultCode" return-type="void">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:235</id>
<description>
                            Sets this SOAPFault object with the given fault code.
                            
                               It is preferable to use this method over #setFaultCode(Name).
                            
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultCode" return-type="void">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:236</id>
<description>if there was an error in adding the             faultcode element to the underlying XML tree.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultCode" return-type="void">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:237</id>
<description>
                            Sets this SOAPFault object with the give fault code.
                            
                                Fault codes, which given information about the fault, are defined in  the SOAP 1.1 specification. This element is mandatory in SOAP 1.1.  Because the fault code is required to be a QName it is preferable to  use the #setFaultCode(Name) form of this method.
                            
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultCode" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:238</id>
<description>if there was an error in adding the             faultCode to the underlying XML tree.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultCode" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:239</id>
<description>
                            Creates or replaces any existing Node element value for  this SOAPFault object.
                             The Node element  is optional in SOAP 1.2.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultNode" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:240</id>
<description>if there was an error in setting the             Node for this  SOAPFault object.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultNode" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:241</id>
<description>
                            Creates or replaces any existing Role element value for  this SOAPFault object.
                             The Role element  is optional in SOAP 1.2.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultRole" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:242</id>
<description>if there was an error in setting the             Role for this  SOAPFault object.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultRole" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:243</id>
<description>
                            Sets the fault string for this SOAPFault object  to the given string.
                                If this  SOAPFault is part of a message that supports SOAP 1.2 then  this call is equivalent to:          addFaultReasonText(faultString, Locale.getDefault());  
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultString" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:244</id>
<description>if there was an error in adding the             faultString to the underlying XML tree.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultString" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:245</id>
<description>
                            Sets the fault string for this SOAPFault object  to the given string and localized to the given locale.
                                If this  SOAPFault is part of a message that supports SOAP 1.2 then  this call is equivalent to:          addFaultReasonText(faultString, locale);  
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultString" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.util.Locale</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:246</id>
<description>if there was an error in adding the             faultString to the underlying XML tree.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPFault</class-interface>
<method name="setFaultString" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.util.Locale</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:247</id>
<description>
                            Creates a new SOAPHeaderElement object initialized with the  specified name and adds it to this SOAPHeader object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:248</id>
<description>if a SOAP error occurs</description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>javax.xml.soap.Name</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:249</id>
<description>
                            Creates a new SOAPHeaderElement object initialized with the  specified qname and adds it to this SOAPHeader object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:250</id>
<description>if a SOAP error occurs</description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:251</id>
<description>
                            Creates a new NotUnderstood SOAPHeaderElement object initialized  with the specified name and adds it to this SOAPHeader object.
                              This operation is supported only by SOAP 1.2.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addNotUnderstoodHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:252</id>
<description>if a SOAP error occurs.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addNotUnderstoodHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>javax.xml.namespace.QName</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:253</id>
<description>
                            Creates a new Upgrade SOAPHeaderElement object initialized  with the specified List of supported SOAP URIs and adds it to this  SOAPHeader object.
                              This operation is supported on both SOAP 1.1 and SOAP 1.2 header.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addUpgradeHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>java.util.Iterator</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:254</id>
<description>if a SOAP error occurs.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addUpgradeHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>java.util.Iterator</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:255</id>
<description>
                            Creates a new Upgrade SOAPHeaderElement object initialized  with the specified array of supported SOAP URIs and adds it to this  SOAPHeader object.
                              This operation is supported on both SOAP 1.1 and SOAP 1.2 header.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addUpgradeHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:256</id>
<description>if a SOAP error occurs.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addUpgradeHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>java.lang.String[]</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:257</id>
<description>
                            Creates a new Upgrade SOAPHeaderElement object initialized  with the specified supported SOAP URI and adds it to this  SOAPHeader object.
                              This operation is supported on both SOAP 1.1 and SOAP 1.2 header.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addUpgradeHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:258</id>
<description>if a SOAP error occurs.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="addUpgradeHeaderElement" return-type="javax.xml.soap.SOAPHeaderElement">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:259</id>
<description>
                            Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="examineAllHeaderElements" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:260</id>
<description>
                            Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object  that have the specified actor.
                               An actor is a global attribute that indicates the intermediate  parties that should process a message before it reaches its ultimate  receiver. An actor receives the message and processes it before sending  it on to the next actor. The default actor is the ultimate intended  recipient for the message, so if no actor attribute is included in a  SOAPHeader object, it is sent to the ultimate receiver  along with the message body.    In SOAP 1.2 the env:actor attribute is replaced by the env:role   attribute, but with essentially the same semantics.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="examineHeaderElements" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:261</id>
<description>
                            Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object  that have the specified actor and that have a MustUnderstand attribute  whose value is equivalent to true.
                                In SOAP 1.2 the env:actor attribute is replaced by the env:role   attribute, but with essentially the same semantics.
                            
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="examineMustUnderstandHeaderElements" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:262</id>
<description>
                            Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object and detaches them  from this SOAPHeader object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="extractAllHeaderElements" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:263</id>
<description>
                            Returns an Iterator over all the SOAPHeaderElement objects  in this SOAPHeader object  that have the specified actor and detaches them  from this SOAPHeader object.
                                This method allows an actor to process the parts of the  SOAPHeader object that apply to it and to remove  them before passing the message on to the next actor.    In SOAP 1.2 the env:actor attribute is replaced by the env:role   attribute, but with essentially the same semantics.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeader</class-interface>
<method name="extractHeaderElements" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:264</id>
<description>
                            Returns the uri of the actor attribute of this  SOAPHeaderElement.
                            
                               If this SOAPHeaderElement supports SOAP 1.2 then this call is  equivalent to #getRole()
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="getActor" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:265</id>
<description>
                            Returns the boolean value of the mustUnderstand attribute for this  SOAPHeaderElement.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="getMustUnderstand" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:266</id>
<description>
                            Returns the boolean value of the relay attribute for this   SOAPHeaderElement
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="getRelay" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:267</id>
<description>
                            Returns the value of the Role attribute of this  SOAPHeaderElement.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="getRole" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:268</id>
<description>
                            Sets the actor associated with this SOAPHeaderElement  object to the specified actor.
                            
                             The default value of an actor is:           SOAPConstants.URI_SOAP_ACTOR_NEXT    If this SOAPHeaderElement supports SOAP 1.2 then this call is  equivalent to #setRole(String)
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="setActor" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:269</id>
<description>
                            Sets the mustUnderstand attribute for this SOAPHeaderElement  object to be either true or false.
                                If the mustUnderstand attribute is on, the actor who receives the  SOAPHeaderElement must process it correctly. This  ensures, for example, that if the SOAPHeaderElement  object modifies the message, that the message is being modified correctly.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="setMustUnderstand" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:270</id>
<description>
                            Sets the relay attribute for this SOAPHeaderElement to be   either true or false.
                                The SOAP relay attribute is set to true to indicate that the SOAP header   block must be relayed by any node that is targeted by the header block   but not actually process it. This attribute is ignored on header blocks  whose mustUnderstand attribute is set to true or that are targeted at   the ultimate reciever (which is the default). The default value of this   attribute is false.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="setRelay" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:271</id>
<description>if there is a problem in setting the   relay attribute.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="setRelay" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:272</id>
<description>
                            Sets the Role associated with this SOAPHeaderElement  object to the specified Role.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="setRole" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:273</id>
<description>if there is an error in setting the role</description>
<package>javax.xml.soap</package>
<class-interface>SOAPHeaderElement</class-interface>
<method name="setRole" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:274</id>
<description>
                            Adds the given AttachmentPart object to this SOAPMessage  object.
                             An AttachmentPart object must be created before  it can be added to a message.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="addAttachmentPart" return-type="void">
<parameters>
<parameter>javax.xml.soap.AttachmentPart</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:275</id>
<description>
                            Gets a count of the number of attachments in this message.
                             This count  does not include the SOAP part.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="countAttachments" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:276</id>
<description>
                            Creates a new empty AttachmentPart object.
                             Note that the  method addAttachmentPart must be called with this new  AttachmentPart object as the parameter in order for it to  become an attachment to this SOAPMessage object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="createAttachmentPart" return-type="javax.xml.soap.AttachmentPart"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:277</id>
<description>
                            Creates an AttachmentPart object and populates it using  the given DataHandler object.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="createAttachmentPart" return-type="javax.xml.soap.AttachmentPart">
<parameters>
<parameter>DataHandler</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:278</id>
<description>
                            Creates an AttachmentPart object and populates it with  the specified data of the specified content type.
                             The type of the  Object should correspond to the value given for the  Content-Type.
                            
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="createAttachmentPart" return-type="javax.xml.soap.AttachmentPart">
<parameters>
<parameter>java.lang.Object</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:279</id>
<description>
                            Returns an AttachmentPart object that is associated with an  attachment that is referenced by this SOAPElement or  null if no such attachment exists.
                            
                            
                            
                             References can be made  via an href attribute as described in  SOAP Messages with Attachments,  or via a single Text child node containing a URI as  described in the WS-I Attachments Profile 1.0 for elements of schema  type ref:swaRef(ref:swaRef).  These two mechanisms must be supported.  The support for references via href attribute also implies that  this method should also be supported on an element that is an  xop:Include element (  XOP).  other reference mechanisms may be supported by individual  implementations of this standard. Contact your vendor for details.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getAttachment" return-type="javax.xml.soap.AttachmentPart">
<parameters>
<parameter>javax.xml.soap.SOAPElement</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:280</id>
<description>if there is an error in the attempt to access the           attachment</description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getAttachment" return-type="javax.xml.soap.AttachmentPart">
<parameters>
<parameter>javax.xml.soap.SOAPElement</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:281</id>
<description>
                            Retrieves all the AttachmentPart objects that are part of  this SOAPMessage object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getAttachments" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:282</id>
<description>
                            Retrieves all the AttachmentPart objects that have header  entries that match the specified headers.
                             Note that a returned  attachment could have headers in addition to those specified.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getAttachments" return-type="java.util.Iterator">
<parameters>
<parameter>javax.xml.soap.MimeHeaders</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:283</id>
<description>
                            Retrieves a description of this SOAPMessage object's  content.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getContentDescription" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:284</id>
<description>
                            Returns all the transport-specific MIME headers for this SOAPMessage  object in a transport-independent fashion.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getMimeHeaders" return-type="javax.xml.soap.MimeHeaders"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:285</id>
<description>
                            Retrieves value of the specified property.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getProperty" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:286</id>
<description>if the property name is not recognized.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getProperty" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:287</id>
<description>
                            Gets the SOAP Body contained in this SOAPMessage object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getSOAPBody" return-type="javax.xml.soap.SOAPBody"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:288</id>
<description>if the SOAP Body does not exist or cannot be retrieved</description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getSOAPBody" return-type="javax.xml.soap.SOAPBody">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:289</id>
<description>
                            Gets the SOAP Header contained in this SOAPMessage  object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getSOAPHeader" return-type="javax.xml.soap.SOAPHeader"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:290</id>
<description>if the SOAP Header does not exist or cannot be retrieved</description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getSOAPHeader" return-type="javax.xml.soap.SOAPHeader">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:291</id>
<description>
                            Gets the SOAP part of this SOAPMessage object.
                                SOAPMessage object contains one or more attachments, the  SOAP Part must be the first MIME body part in the message.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="getSOAPPart" return-type="javax.xml.soap.SOAPPart"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:292</id>
<description>
                            Removes all AttachmentPart objects that have been added  to this SOAPMessage object.
                                This method does not touch the SOAP part.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="removeAllAttachments" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:293</id>
<description>
                            Removes all the AttachmentPart objects that have header  entries that match the specified headers.
                             Note that the removed  attachment could have headers in addition to those specified.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="removeAttachments" return-type="void">
<parameters>
<parameter>javax.xml.soap.MimeHeaders</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:294</id>
<description>
                            Updates this SOAPMessage object with all the changes that  have been made to it.
                            
                             This method is called automatically when  SOAPMessage#writeTo(OutputStream) is  called. However, if  changes are made to a message that was received or to one that has  already been sent, the method saveChanges needs to be  called explicitly in order to save the changes. The method saveChanges  also generates any changes that can be read back (for example, a  MessageId in profiles that support a message id). All MIME headers in a  message that is created for sending purposes are guaranteed to have  valid values only after saveChanges has been called.    In addition, this method marks the point at which the data from all  constituent AttachmentPart objects are pulled into the  message.  
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="saveChanges" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:295</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="saveChanges" return-type="void">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:296</id>
<description>
                            Indicates whether this SOAPMessage object needs to have  the method saveChanges called on it.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="saveRequired" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:297</id>
<description>
                            Sets the description of this SOAPMessage object's  content with the given description.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="setContentDescription" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:298</id>
<description>
                            Associates the specified value with the specified property.
                            
                            
                             If there was  already a value associated with this property, the old value is  replaced.    The valid property names include  SOAPMessage#WRITE_XML_DECLARATION  and  SOAPMessage#CHARACTER_SET_ENCODING. All of these standard SAAJ  properties are prefixed by "javax.xml.soap". Vendors may also add  implementation specific properties. These properties must be prefixed  with package names that are unique to the vendor.    Setting the property WRITE_XML_DECLARATION to "true"  will cause an XML Declaration to be written out at the start of the SOAP  message. The default value of "false" suppresses this declaration.    The property CHARACTER_SET_ENCODING defaults to the value  "utf-8" which causes the SOAP message to be encoded using  UTF-8. Setting CHARACTER_SET_ENCODING to "utf-16"  causes the SOAP message to be encoded using UTF-16.    Some implementations may allow encodings in addition to UTF-8 and  UTF-16. Refer to your vendor's documentation for details.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="setProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:299</id>
<description>if the property name is not recognized.</description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="setProperty" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:300</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="SOAPMessage" return-type="SOAPMessage"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:301</id>
<description>
                            Writes this SOAPMessage object to the given output  stream.
                             The externalization format is as defined by the SOAP 1.1 with  Attachments specification.    If there are no attachments, just an XML stream is written out. For  those messages that have attachments, writeTo writes a  MIME-encoded byte stream.    Note that this method does not write the transport-specific MIME Headers   of the Message
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="writeTo" return-type="void">
<parameters>
<parameter>java.io.OutputStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:302</id>
<description>if there was a problem in externalizing this SOAP message</description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="writeTo" return-type="void">
<parameters>
<parameter>java.io.OutputStream</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:303</id>
<description>if an I/O error occurs</description>
<package>javax.xml.soap</package>
<class-interface>SOAPMessage</class-interface>
<method name="writeTo" return-type="void">
<parameters>
<parameter>java.io.OutputStream</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:304</id>
<description>
                            Creates a MimeHeader object with the specified  name and value and adds it to this SOAPPart object.
                              If a MimeHeader with the specified name already  exists, this method adds the specified value to the already  existing value(s).    Note that RFC822 headers can contain only US-ASCII characters.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="addMimeHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:305</id>
<description>
                            Retrieves all the headers for this SOAPPart object  as an iterator over the MimeHeader objects.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getAllMimeHeaders" return-type="java.util.Iterator"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:306</id>
<description>
                            Returns the content of the SOAPEnvelope as a JAXP Source  object.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getContent" return-type="javax.xml.transform.Source"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:307</id>
<description>if the implementation cannot convert                           the specified Source object</description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getContent" return-type="javax.xml.transform.Source">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:308</id>
<description>
                            Retrieves the value of the MIME header whose name is "Content-Id".
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getContentId" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:309</id>
<description>
                            Retrieves the value of the MIME header whose name is "Content-Location".
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getContentLocation" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:310</id>
<description>
                            Gets the SOAPEnvelope object associated with this  SOAPPart object.
                             Once the SOAP envelope is obtained, it  can be used to get its contents.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getEnvelope" return-type="javax.xml.soap.SOAPEnvelope"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:311</id>
<description>if there is a SOAP error</description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getEnvelope" return-type="javax.xml.soap.SOAPEnvelope">
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:312</id>
<description>
                            Retrieves all MimeHeader objects that match a name in  the given array.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getMatchingMimeHeaders" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:313</id>
<description>
                            Gets all the values of the MimeHeader object  in this SOAPPart object that  is identified by the given String.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getMimeHeader" return-type="java.lang.String[]">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:314</id>
<description>
                            Retrieves all MimeHeader objects whose name does  not match a name in the given array.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="getNonMatchingMimeHeaders" return-type="java.util.Iterator">
<parameters>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:315</id>
<description>
                            Removes all the MimeHeader objects for this  SOAPEnvelope object.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="removeAllMimeHeaders" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:316</id>
<description>
                            Removes all MIME headers that match the given name.
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="removeMimeHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:317</id>
<description>
                            Sets the content of the SOAPEnvelope object with the data   from the given Source object.
                             This Source   must contain a valid SOAP document.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="setContent" return-type="void">
<parameters>
<parameter>javax.xml.transform.Source</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:318</id>
<description>if there is a problem in setting the source</description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="setContent" return-type="void">
<parameters>
<parameter>javax.xml.transform.Source</parameter>
</parameters>
<throw>javax.xml.soap.SOAPException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:319</id>
<description>
                            Sets the value of the MIME header named "Content-Id"  to the given String.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="setContentId" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:320</id>
<description>
                            Sets the value of the MIME header "Content-Location"  to the given String.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="setContentLocation" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:321</id>
<description>
                            Changes the first header entry that matches the given header name  so that its value is the given value, adding a new header with the  given name and value if no  existing header is a match.
                             If there is a match, this method clears  all existing values for the first header that matches and sets the  given value instead. If more than one header has  the given name, this method removes all of the matching headers after  the first one.    Note that RFC822 headers can contain only US-ASCII characters.
                            
                        </description>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="setMimeHeader" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:322</id>
<description/>
<package>javax.xml.soap</package>
<class-interface>SOAPPart</class-interface>
<method name="SOAPPart" return-type="SOAPPart"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>SAAJ:JAVADOC:323</id>
<description>
                            Retrieves whether this Text object represents a comment.
                        </description>
<package>javax.xml.soap</package>
<class-interface>Text</class-interface>
<method name="isComment" return-type="boolean"/>
</assertion>
</assertions>
</javadoc>

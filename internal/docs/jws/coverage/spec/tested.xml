<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<spec>
  <next-available-id>7000</next-available-id>
  <previous-id>0</previous-id>
  <technology>JWS</technology>
  <id>JWS</id>
  <name>Web Services Metadata for the JavaTM Platform</name>
  <version>2.0</version>
  <location>
    <chapters />
    <chapter id="3" name="Server Programming Model">
      <sections>
        <section id="3" name="Web Method" />
        <section id="2" name="Service Endpoint Interface" />
        <section id="1" name="Service Implementation Bean" />
      </sections>
    </chapter>
    <chapter id="5" name="Java Mapping To XML/WSDL">
      <sections>
        <section id="3" name="Web Method Mapping" />
        <section id="2" name="Web Service Class Mapping" />
        <section id="1" name="Service Endpoint Interface" />
      </sections>
    </chapter>
    <chapter id="4" name="Web Services Metadata">
      <sections>
        <section id="3" name="Annotation: javax.jws.Oneway" />
        <section id="4.3" name="Example" />
        <section id="6.2" name="Annotation Type Definition" />
        <section id="1.3" name="Example" />
        <section id="3.2" name="Annotation Type Definition" />
        <section id="5.1" name="Description" />
        <section id="2.1" name="Description" />
        <section id="1" name="Annotation: javax.jws.WebService" />
        <section id="6" name="Annotation: javax.jws.HandlerChain" />
        <section id="1.1" name="Description" />
        <section id="5" name="Annotation: javax.jws.WebResult" />
        <section id="2.3" name="Example" />
        <section id="4" name="Annotation: javax.jws.WebParam" />
        <section id="1.2" name="Annotation Type Definition" />
        <section id="2.2" name="Annotation Type Definition" />
        <section id="7" name="Annotation: javax.jws.SOAPBinding" />
        <section id="2" name="Annotation: javax.jws.WebMethod" />
        <section id="7.1" name="Description" />
        <section id="6.1" name="Description" />
        <section id="3.3" name="Example" />
        <section id="7.2" name="Annotation Type Definition" />
        <section id="4.1" name="Description" />
        <section id="5.3" name="Example" />
        <section id="3.1" name="Description" />
        <section id="7.3" name="Example" />
        <section id="4.2" name="Annotation Type Definition" />
        <section id="6.3" name="Example" />
        <section id="5.2" name="Annotation Type Definition" />
      </sections>
    </chapter>
    <chapter id="6" name="SOAP Binding">
      <sections>
        <section id="1.1" name="RPC Operation Style" />
        <section id="1.2.1" name="Document Bare Style" />
        <section id="1.2" name="Document Operation Style" />
        <section id="1" name="Operation Modes" />
      </sections>
    </chapter>
  </location>
  <assertions>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3001</id>
      <description>The implementation bean MUST be an outer public class, MUST NOT be final, and MUST NOT be abstract.</description>
      <location chapter="3" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3002</id>
      <description>The implementation bean MUST have a default public constructor.</description>
      <location chapter="3" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3004</id>
      <description>The implementation bean MUST include a @WebService class-level annotation, indicating that it implements a Web Service.  More information on the @WebService annotation may be found in 4.1Annotation: javax.jws.WebService.</description>
      <location chapter="3" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3005</id>
      <description>The implementation bean MAY reference a service endpoint interface by using the @WebService.endpointInterface annotation.  If the implementation bean references a service endpoint interface, it MUST implement all the methods on the service endpoint interface.  If the implementation bean references a service endpoint interface, that service endpoint interface is used to determine the abstract WSDL contract (portType and bindings).  In this case, the service implementation bean MUST NOT include any JSR-181 annotations other than @WebService(endpointInterface and serviceName atrtributes only) and @HandlerChain..  More information on the @WebService.endpointInterface attribute may be found in 4.1 Annotation: javax.jws.WebService.</description>
      <location chapter="3" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3006</id>
      <description>If the implementation bean does not implement a service endpoint interface and there are no @WebMethod annotations in the implementation bean (excluding @WebMethod annotations used to exclude inherited @WebMethods), all public methods other than those inherited from java.lang.Object will be exposed as Web Service operations, subject to the inheritance rules specified in Common Annotations for the Java Platform [12], section 2.1.</description>
      <location chapter="3" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3007</id>
      <description>The service endpoint interface MUST be an outer public interface.</description>
      <location chapter="3" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3009</id>
      <description>The service endpoint interface MUST include a @WebService annotation, indicating that it is defining the contract for a Web Service.</description>
      <location chapter="3" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3010</id>
      <description>All of the methods on the service endpoint interface are mapped to WSDL operations (including methods inherited from super-interfaces), regardless of whether they include a @WebMethod annotation.  A method MAY include a @WebMethod annotation to customize the mapping to WSDL, but is not REQUIRED to do so.</description>
      <location chapter="3" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3012</id>
      <description>The service endpoint interface MUST NOT include the JSR-181 annotation elements portName, serviceName and endpointInterface of the annotation @WebService.</description>
      <location chapter="3" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3013</id>
      <description>The method MUST be public.</description>
      <location chapter="3" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>3014</id>
      <description>The method's parameters, return value, and exceptions MUST follow the rules defined in JAX-WS 2.0 [5], section 3.6).</description>
      <location chapter="3" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>5001</id>
      <description>The wsdl:definitions targetNamespace maps to the value of the @WebService.targetNamespace member-value.</description>
      <location chapter="5" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>5002</id>
      <description>The local name of the wsdl:portType maps to the value of the @WebService.name member-value.</description>
      <location chapter="5" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>5003</id>
      <description>The local name of the wsdl:service maps to the value of the @WebService.serviceName member-value.</description>
      <location chapter="5" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>5005</id>
      <description>The local name of the wsdl:port maps to the value of the @WebService.portName member-value.</description>
      <location chapter="5" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>5008</id>
      <description>Each exposed web method in a JSR-181 annotated class or interface is mapped to a wsdl:operation on the class/interface WSDL portType.  The wsdl:operation local name maps to the value of the @WebMethod.operationName member-value, if present.  If not present, the wsdl:operation local name is mapped from the name of the Java method according to the rules defined in JAX-WS 2.0 [5], section 3.5.</description>
      <location chapter="5" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>5009</id>
      <description>The mapped wsdl:operation contains both wsdl:input and wsdl:output elements, unless the method is annotated as @Oneway.  @Oneway methods have only a wsdl:input element.</description>
      <location chapter="5" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>5010</id>
      <description>Java types used as method parameters, return values, and exceptions are mapped according to the rules defined in JAX-WS 2.0 [5], section 3.6.</description>
      <location chapter="5" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6001</id>
      <description>In a RPC Style Webservice : The @WebParam.mode annotation determines the messages in which a particular parameter appears.  IN parameters appear as parts in the input message, OUT parameters appear as parts in the output message, and INOUT parameters appear as parts in both messages.</description>
      <location chapter="6" section="1.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6002</id>
      <description>In a RPC Style Webservice : The order of parameters in the method signature determines the order of the parts in the input and output message.  The return value is the first part in the output message.</description>
      <location chapter="6" section="1.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6003</id>
      <description>In a RPC Style Webservice : JSR-181 implementations MUST support both the "wrapped" and "bare" styles of document / literal operation.  The developer may specify which of these styles is in effect for a particular operation by using the @SOAPBinding.parameterStyle annotation.</description>
      <location chapter="6" section="1.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6004</id>
      <description>In the "doc wrapped" operation style, the input and output messages contain a single part which refers (via the element attribute) to a global element declaration (the wrapper) of complexType defined using the xsd:sequence compositor.  The global element declaration for the input message has a local name equal to @WebMethod.operationName.  The global element declaration for the output message (if it exists) has a local name equal to @WebMethod.operationName + "Response".  Both global element declarations appear in the @WebService.targetNamespace.</description>
      <location chapter="6" section="1.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6005</id>
      <description>In a Doc Wrapped Webservice : Non-header method parameters and return values map to child elements of the global element declarations defined for the method.  The order of parameters in the parameter list determines the order in which the equivalent child elements appear in the operation's global element declarations.</description>
      <location chapter="6" section="1.2.1" />
    </assertion>
    <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
      <id>6006</id>
      <description>In a Doc Wrapped Webservice : The @WebParam.name and @WebParam.targetNamespace attributes determine the QName of a parameter's child element, while the @WebResult.name and @WebResult.targetNamespace annotations determines the QName of the return value's child element.  The schema type for each child element is derived from the type of the Java parameter or return value, as described in section 5 Java Mapping To XML/WSDL.</description>
      <location chapter="6" section="1.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6007</id>
      <description>In the "bare" operation style, the input and output messages contain a single part which refers (via the element attribute) to an element that is mapped from the method parameter and return value.  The QName of the input body element is determined by the values of the @WebParam.name and @WebParam.targetNamespace annotations on the method parameter, and the QName of the output body element is determined by the values of the @WebResult.name and @WebResult.targetNamespace annotations.  The schema types for the input and output body elements are derived from the types of the Java parameter or return values, as described in section 5 Java Mapping To XML/WSDL.</description>
      <location chapter="6" section="1.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6008</id>
      <description>In a Doc Bare Webservice : If the operation is marked @Oneway, it MUST have a void return value, a single non-header parameter marked as IN and zero or more header parameters.The mapped wsdl:operation contains both wsdl:input and wsdl:output elements, unless the method is annotated as @Oneway.</description>
      <location chapter="6" section="1.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6009</id>
      <description>In a Doc Bare Webservice : If the operation is not marked @Oneway, A non-header parameter marked as IN, a non-header parameter marked as OUT, a void return value and zero or more header parameters..</description>
      <location chapter="6" section="1.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6010</id>
      <description>In a Doc Bare Webservice : If the operation is not marked @Oneway, 	A single non-header parameters marked as IN_OUT, a void return value and zero or more header parameters.</description>
      <location chapter="6" section="1.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6011</id>
      <description>Every document "bare" operation on the Web Service MUST take and return Java types that map to distinct elements, or the developer MUST use the @WebParam and @WebResult annotations to explicitly specify the QNames of the input and output XML elements for each operation.</description>
      <location chapter="6" section="1.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6012</id>
      <description>Parameters annotated with the @WebParam.header attribute map to SOAP headers instead of elements in the SOAP body.  Header parameters appear as parts in the operation's input message, output message, or both depending on the value of the @WebParam.mode attribute.  Header parameters are included as soap:header elements in the appropriate wsdl:input and wsdl:output sections of the binding operation.  Headers are always literal.  The @WebParam.name and @WebParam.targetNamespace annotations determine the QName of the XML element representing the header.</description>
      <location chapter="6" section="2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>6013</id>
      <description>Results annotated with the @WebResult.header attribute map to SOAP headers instead of elements in the SOAP body.  Header results appear as parts in the operation's output message.  Header results are included as soap:header elements in the appropriate wsdl:output sections of the binding operation.  Headers are always literal.  The @WebResult.name and @WebResult.targetNamespace annotations determine the QName of the XML element representing the header.  This QName must be unique within all headers of the method.</description>
      <location chapter="6" section="2" />
    </assertion>
  </assertions>
</spec>


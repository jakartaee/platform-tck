<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
<next-available-id>60</next-available-id>
<previous-id>1</previous-id>
<technology>JACC</technology>
<id>JACC</id>
<name>Java Authorization Contract for Containers</name>
<version>1.5</version>
<assertions>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>1</id>
<description>                            
							Creates a new EJBMethodPermission with the specified name and actions.                            
							    The name contains the value of the ejb-name element corresponding  to an EJB in the application's deployment descriptor.    The actions contains a methodSpec. The syntax of the actions parameter  is defined as follows:               methodNameSpec ::= methodName | emptyString             methodInterface ::= Home | LocalHome | Remote | Local | ServiceEndpoint             methodInterfaceSpec ::= methodInterface | emptyString             methodParams ::= typeName | methodParams comma typeName             methodParamsSpec ::= emptyString | methodParams             methodSpec ::= null |                    methodNameSpec |                    methodNameSpec comma methodInterface |                    methodNameSpec comma methodInterfaceSpec comma methodParamsSpec      A null or empty string methodSpec indicates that the permission applies  to all methods of the EJB. A methodSpec with a methodNameSpec of the  empty string matches all methods of the EJB that match the  methodInterface and methodParams elements of the methodSpec.    A methodSpec with a methodInterfaceSpec of the empty string matches  all methods of the EJB that match the methodNameSpec and methodParams  elements of the methodSpec.    A methodSpec without a methodParamsSpec matches all methods  of the EJB that match the methodNameSpec and methodInterface elements  of the methodSpec.    Each typeName appearing in methodParams must be the fully-qualified  Java type name of a parameter of the target method. The  order of the typeNames in methodParams must match  the order of occurence of the corresponding parameters  in the method signature of the target method(s). A methodSpec with  an empty methodParamsSpec matches all 0 argument methods of the  EJB that match the methodNameSpec and methodInterfaceSpec elements of  the methodSpec.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBMethodPermission</class-interface>
<method name="EJBMethodPermission" return-type="EJBMethodPermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>2</id>
<description>                            
							Creates a new EJBMethodPermission with name corresponding to  the EJBName and actions composed from methodName, methodInterface,  and methodParams.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBMethodPermission</class-interface>
<method name="EJBMethodPermission" return-type="EJBMethodPermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>3</id>
<description>                            
							Creates a new EJBMethodPermission with name corresponding to the  EJBName and actions composed from methodInterface, and the  Method object.                            
							    A container uses this constructor prior to checking if a caller  has permission to call the method of an EJB.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBMethodPermission</class-interface>
<method name="EJBMethodPermission" return-type="EJBMethodPermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
<parameter>java.lang.reflect.Method</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>4</id>
<description>                            
							Checks two EJBMethodPermission objects for equality.                            
							  EJBMethodPermission objects are equivalent if they have case sensitive  equivalent name and actions values.    Two Permission objects, P1 and P2, are equivalent if and only if  P1.implies(P2) AND P2.implies(P1).                          
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBMethodPermission</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>5</id>
<description>                            
							Returns a String containing a canonical representation of the actions  of this EJBMethodPermission.                            
							 The Canonical form of an EJBMethodPermission  is described by the following syntax description.         methodNameSpec ::= methodName | emptyString        methodInterface ::= Home | LocalHome | Remote | Local | ServiceEndpoint        methodInterfaceSpec ::= methodInterface | emptyString        methodParams ::= typeName | methodParams comma typeName        methodParamsSpec ::= emptyString | methodParams        methodSpec ::= null |               methodNameSpec |               methodNameSpec comma methodInterface |               methodNameSpec comma methodInterfaceSpec comma methodParamsSpec                          
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBMethodPermission</class-interface>
<method name="getActions" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>6</id>
<description>                            
							Returns the hash code value for this EJBMethodPermission.                            
							 The properties  of the returned hash code must be as follows:      During the lifetime of a Java application, the hashCode method       must return the same integer value every time it is called on a       EJBMethodPermission object. The value returned by hashCode for a       particular EJBMethodPermission need not remain consistent from       one execution of an application to another.   If two EJBMethodPermission objects are equal according to the       equals method, then calling the hashCode method on each of the two       Permission objects must produce the same integer result (within an       application).                            
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBMethodPermission</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>7</id>
<description>                            
							Determines if the argument Permission is implied by this  EJBMethodPermission.                            
							 For this to be the case,      The argument must be an instanceof EJBMethodPermission   with name equivalent to that of this EJBMethodPermission, and   the methods to which the argument permission applies (as defined       in its actions) must be a subset of the methods to which this       EJBMethodPermission applies (as defined in its actions)    The name and actions comparisons described above are case sensitive.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBMethodPermission</class-interface>
<method name="implies" return-type="boolean">
<parameters>
<parameter>java.security.Permission</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>8</id>
<description>                            
							Creates a new EJBRoleRefPermission with the specified name and actions.                        
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBRoleRefPermission</class-interface>
<method name="EJBRoleRefPermission" return-type="EJBRoleRefPermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>9</id>
<description>                            
							Checks two EJBRoleRefPermission objects for equality.                            
							  EJBRoleRefPermission objects are equivalent if they have case  equivalent name and actions values.    Two Permission objects, P1 and P2, are equivalent if and only if  P1.implies(P2) AND P2.implies(P1).                          
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBRoleRefPermission</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>10</id>
<description>                            
							Returns a canonical String representation of the actions of this  EJBRoleRefPermission.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBRoleRefPermission</class-interface>
<method name="getActions" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>11</id>
<description>                            
							Returns the hash code value for this EJBRoleRefPermission.                            
							 The properties  of the returned hash code must be as follows:      During the lifetime of a Java application, the hashCode method        must return the same integer value, every time it is called on a        EJBRoleRefPermission object. The value returned by hashCode for a       particular EJBRoleRefPermission need not remain consistent from        one execution of an application to another.   If two EJBRoleRefPermission objects are equal according to the        equals method, then calling the hashCode method on each of the two        Permission objects must produce the same integer result (within an       application).                            
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBRoleRefPermission</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>12</id>
<description>                            
							Determines if the argument Permission is implied by this  EJBRoleRefPermission.                            
							 For this to be the case,      The argument must be an instanceof EJBRoleRefPermission   with name equivalent to that of this EJBRoleRefPermission, and    with the role reference equivalent to that of this  EJBRoleRefPermission applies.    The name and actions comparisons described above are case sensitive.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>EJBRoleRefPermission</class-interface>
<method name="implies" return-type="boolean">
<parameters>
<parameter>java.security.Permission</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>13</id>
<description>                            
							Used to add excluded policy statements to this PolicyConfiguration.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="addToExcludedPolicy" return-type="void">
<parameters>
<parameter>java.security.PermissionCollection</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>14</id>
<description>                            
							Used to add a single excluded policy statement to this  PolicyConfiguration.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="addToExcludedPolicy" return-type="void">
<parameters>
<parameter>java.security.Permission</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>15</id>
<description>                            
							Used to add permissions to a named role in this PolicyConfiguration.                            
							  If the named Role does not exist in the PolicyConfiguration, it is  created as a result of the call to this function.    It is the job of the Policy provider to ensure that all the permissions  added to a role are granted to principals mapped to the role.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="addToRole" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.security.PermissionCollection</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>16</id>
<description>                            
							Used to add a single permission to a named role in this  PolicyConfiguration.                            
							  If the named Role does not exist in the PolicyConfiguration, it is  created as a result of the call to this function.    It is the job of the Policy provider to ensure that all the permissions  added to a role are granted to principals mapped to the role.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="addToRole" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.security.Permission</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>17</id>
<description>                            
							Used to add unchecked policy statements to this PolicyConfiguration.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="addToUncheckedPolicy" return-type="void">
<parameters>
<parameter>java.security.PermissionCollection</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>18</id>
<description>                            
							Used to add a single unchecked policy statement to this  PolicyConfiguration.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="addToUncheckedPolicy" return-type="void">
<parameters>
<parameter>java.security.Permission</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>19</id>
<description>                            
							Causes all policy statements to be deleted from this PolicyConfiguration  and sets its internal state such that any additional operations  attempted on the PolicyConfiguration will be rejected and cause an   UnsupportedOperationException to be thrown.                            
							   This operation has no affect on any linked PolicyConfigurations  other than removing any links involving the deleted PolicyConfiguration.                        
						</description>

<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="commit" return-type="void">
<parameters>
<parameter></parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>20</id>
<description>                            

   This method is used to set to inService the state of the policy context whose interface is this Policy-
   Configuration Object. Only those policy contexts whose state is inService will be included in the policy
   contexts processed by the Policy.refresh method. A policy context whose state is inService may be
   returned to the open state by calling the getPolicyConfiguration method of the PolicyConfiguration factory
   with the policy context identifier of the policy context.
   When the state of a policy context is inService, calling any method other than commit, delete, get-
   ContextID, or inService on its PolicyConfiguration Object will cause an UnsupportedOperationException
   to be thrown.

</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="delete" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>21</id>
<description>                            
							This method returns this object's policy context identifier.                        
						</description>

<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="getContextID" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>22</id>
<description>                            
							Creates a relationship between this configuration and another  such that they share the same principal-to-role mappings.                            
							  PolicyConfigurations are linked to apply a common principal-to-role  mapping to multiple seperately manageable PolicyConfigurations,  as is required when an application is composed of multiple  modules.    Note that the policy statements which comprise a role, or comprise  the excluded or unchecked policy collections in a PolicyConfiguration  are unaffected by the configuration being linked to another.                          
						</description>

<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="inService" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>23</id>
<description>                           
       This method is used to determine if the policy context whose interface is this PolicyConfiguration Object is
       in the inService state.

	</description>

<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="linkConfiguration" return-type="void">
<parameters>
<parameter>javax.security.jacc.PolicyConfiguration</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>24</id>
<description>                            
							Used to remove any excluded policy statements from this  PolicyConfiguration.                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="removeExcludedPolicy" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>25</id>
<description>                            
							Used to remove a role and all its permissions from this  PolicyConfiguration.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="removeRole" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>26</id>
<description>                            
							Used to remove any unchecked policy statements from this   PolicyConfiguration.                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfiguration</class-interface>
<method name="removeUncheckedPolicy" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>27</id>
<description>                            
							This method determines if a PolicyConfiguration with  policy context identifier equivalent to the argument contextID,  already exists in the Policy provider associated with the factory.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfigurationFactory</class-interface>
<method name="contains" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>28</id>
<description>                            
							This method is used to obtain an instance of the provider specific  class that implements the PolicyConfiguration interface and that  corresponds to one policy configuration within a provider.                            
							  The methods of the PolicyConfiguration interface are used to  define the policy statements of the associated policy configuration.    For a given value of policy context identifier, this method  must always return the same instance of PolicyConfiguration  and there must be at most one actual instance of a  PolicyConfiguration with a given policy context identifier (during a  process context).                          
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfigurationFactory</class-interface>
<method name="getPolicyConfiguration" return-type="javax.security.jacc.PolicyConfiguration">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>29</id>
<description>                            
							This static method uses a system property to find and instantiate  (via a public constructor) a provider specific factory implementation  class.                            
							 The name of the provider specific factory implementation class is  obtained from the value of the system property,        javax.security.jacc.PolicyConfigurationFactory.provider                          
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfigurationFactory</class-interface>
<method name="getPolicyConfigurationFactory" return-type="javax.security.jacc.PolicyConfigurationFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>30</id>
<description>when the class named by the system property could not be found  including because the value of the system property has not been set.</description>
<package>javax.security.jacc</package>
<class-interface>PolicyConfigurationFactory</class-interface>
<method name="getPolicyConfigurationFactory" return-type="javax.security.jacc.PolicyConfigurationFactory">
<throw>java.lang.ClassNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>31</id>
<description/>

<package>javax.security.jacc</package>
<class-interface>PolicyConfigurationFactory</class-interface>
<method name="PolicyConfigurationFactory" return-type="PolicyConfigurationFactory"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>32</id>
<description>                            
							Authorization protected method that may be used by a   Policy provider to activate the  PolicyContextHandler registered to the context object key  and cause it to return the corresponding policy context object from  the container.                            
							 When a handler is  activated by this method, it passes to the handler the context  object key and the handler data associated with the calling thread.                        
						</description>

<package>javax.security.jacc</package>
<class-interface>PolicyConfigurationFactory</class-interface>
<method name="inService" return-type="boolean"/>
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>33</id>
<description>                            

</description>


<package>javax.security.jacc</package>
<class-interface>PolicyContext</class-interface>
<method name="getContext" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>34</id>
<description>                            
							This static method returns the value of the policy context identifier  associated with the thread on which the accessor is called.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyContext</class-interface>
<method name="getContextID" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>35</id>
<description>                            
							This method may be used to obtain the keys that identify the  container specific context handlers registered by the container.                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyContext</class-interface>
<method name="getHandlerKeys" return-type="java.util.Set"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>36</id>
<description>                            
							Authorization protected method used to register a container specific  PolicyContext handler.                            
							 A handler may be registered  to handle multiple keys, but at any time, at most one handler may be  registered for a key.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyContext</class-interface>
<method name="registerHandler" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>javax.security.jacc.PolicyContextHandler</parameter>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>37</id>
<description>                            
							Authorization protected method used to modify the value of the   policy context identifier associated with the thread on which   this method is called.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyContext</class-interface>
<method name="setContextID" return-type="void">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>38</id>
<description>                            
							Authorization protected method that may be used to associate a   thread-scoped handler data object with the PolicyContext.                            
							   The handler data object will be made available to handlers,   where it can serve to supply or bind the handler to invocation  scoped state within the container.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyContext</class-interface>
<method name="setHandlerData" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>39</id>
<description>                            
							This public method is used by the PolicyContext class to  activate the handler and obtain from it the the context object  identified by the (case-sensitive) key.                            
							 In addition to the key,  the handler will be activated with the handler data value associated  within the PolicyContext class  with the thread on which the call to this method is made.    Note that the policy context identifier associated with a thread   is available to the handler by calling PolicyContext.getContextID().                           
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyContextHandler</class-interface>
<method name="getContext" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>40</id>
<description>                            
							This public method returns the keys identifying the context objects  supported by the handler.                            
							 The value of each key supported by a handler  must be a non-null String value.                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyContextHandler</class-interface>
<method name="getKeys" return-type="java.lang.String[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>41</id>
<description>                            
							This public method returns a boolean result indicating whether or  not the handler supports the context object identified by the  (case-sensitive) key value.                        
						</description>
<package>javax.security.jacc</package>
<class-interface>PolicyContextHandler</class-interface>
<method name="supports" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>42</id>
<description>                            
							Determines whether this WebResourcePermission is less than, equal to,  or greater than the specified object, and returns a negative integer,  zero, or a positive integer respectively.                            
							  The behavior of this method must conform to the specification of the  CompareTo method of interface Comparable.    This method is used to sort WebResourcePermissions  according to  Servlet's path matching rules, and as necessary  to implement best match for Servlet constraint selection and  enforcement.    WebResourcePermissions are sorted first by URL Pattern type.   The sorting by URL Pattern type is done such that   exact patterns (those not ending with * or /, or beginning with  *.) sort less than path prefix patterns (those ending with /*),  path prefix patterns sort less than extension patterns  (those beginning with *.), and such that extension patterns sort less  than the universal pattern /). Path prefix patterns are sorted first  by pattern depth; with deeper patterns sorting less than shallower  patterns. Same depth path prefix patterns are sorted by case  sensitive lexical comparison of the same depth nodes, beginning with  the root node, and continuing until a difference is found. Within pattern  types other than path prefix patterns, same type patterns are sorted  to case sensitive lexical order. Additional sorting by actions of  pattern equivalent permissions is optional.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebResourcePermission</class-interface>
<method name="compareTo" return-type="int">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>43</id>
<description>                            
							Checks two WebResourcePermission objects for equality.                            
							  WebResourcePermission objects are equivalent if they have case  equivalent name and actions values.    Two Permission objects, P1 and P2, are equivalent if and only if  P1.implies(P2) AND P2.implies(P1).                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebResourcePermission</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>44</id>
<description>                            
							Returns a canonical String representation of the actions of this  WebResourcePermission.                            
							 WebResourcePermission actions are canonicalized by  sorting the HTTP methods into lexical order.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebResourcePermission</class-interface>
<method name="getActions" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>45</id>
<description>                            
							Returns the hash code value for this WebResourcePermission.                            
							 The  properties of the returned hash code must be as follows:      During the lifetime of a Java application, the hashCode method       must return the same integer value, every time it is called on a       WebResourcePermission object. The value returned by hashCode for a       particular WebResourcePermission need not remain consistent from       one execution of an application to another.   If two WebResourcePermission objects are equal according to the       equals method, then calling the hashCode method on each of the two       Permission objects must produce the same integer result (within an       application).                            
						</description>
<package>javax.security.jacc</package>
<class-interface>WebResourcePermission</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>46</id>
<description>                            
							Determines if the argument Permission is implied by this  WebResourcePermission.                            
							 For this to be the case,      The argument must be an instanceof WebResourcePermission   with name matched by this WebResourcePermission (according to       the  servlet matching rules), and   the HTTP methods to which the argument permission applies       (as defined in its actions) must be a subset of the HTTP methods       to which this WebResourcePermission applies (as defined in its       actions).      The servlet matching  rules are used to determine if the name of this WebResourcePermission  matches the name of the argument permission. The names match if the  values of the URL pattern portions of their names are related as  follows:      their URL patterns are lexically equivalent, or   the URL pattern of this WebResourcePermission is a path-prefix       pattern (that is, it ends with /*), and the path-prefix pattern       (minus the last 2 characters) is an exact match for a prefix of       the URL pattern of the argument permission, or   the URL pattern of this WebResourcePermission is an extension       pattern (that is, it begins with *.) and the substring of the       extension pattern beginning with the . and extending to the end       of the pattern, is an exact match for the end of the URL pattern       of the argument permission.   the URL pattern of this WebResourcePermission is the special       pattern containing only the default character / (may be more       than one /) which matches all other URL patterns.      All of the comparisons described above are case sensitive.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebResourcePermission</class-interface>
<method name="implies" return-type="boolean">
<parameters>
<parameter>java.security.Permission</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>47</id>
<description>                            
							Creates a new WebResourcePermission with the specified name and actions.                            
							    The name contains a URL Pattern (as   defined in the Java Servlet Specification).   The URLPattern identifies the web resources to  which the permission applies.    The actions parameter contains a comma seperated list of HTTP methods.  The syntax of the actions parameter is defined as follows:             HTTPMethod ::= GET | POST | PUT | DELETE | HEAD |                    OPTIONS | TRACE                      HTTPMethodList ::= HTTPMethod | HTTPMethodList comma HTTPMethod             HTTPMethodSpec ::= null | HTTPMethodList    If duplicates occur in the HTTPMethodSpec   they must be eliminated by the permission constructor.    A null or empty string HTTPMethodSpec indicates that the permission  applies to all HTTP methods at the resources identified by the URL  pattern.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebResourcePermission</class-interface>
<method name="WebResourcePermission" return-type="WebResourcePermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>48</id>
<description>                            
							Creates a new WebResourcePermission with name corresponding  to the URLPattern, and actions composed from the array of HTTP  methods.                        
						</description>
<package>javax.security.jacc</package>
<class-interface>WebResourcePermission</class-interface>
<method name="WebResourcePermission" return-type="WebResourcePermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>49</id>
<description>                            
							Creates a new WebResourcePermission from the HttpServletRequest  object.                            
							 A container uses this constructor prior to checking if  a caller has permission to perform a servlet request.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebResourcePermission</class-interface>
<method name="WebResourcePermission" return-type="WebResourcePermission">
<parameters>
<parameter>HttpServletRequest</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>50</id>
<description>                            
							Checks two WebRoleRefPermission objects for equality.                            
							  WebRoleRefPermission objects are equivalent if they have case  equivalent name and actions values.    Two Permission objects, P1 and P2, are equivalent if and only if  P1.implies(P2) AND P2.implies(P1).    The name and actions comparisons described above are case sensitive.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebRoleRefPermission</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>51</id>
<description>                            
							Returns a canonical String representation of the actions of this  WebRoleRefPermission.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>WebRoleRefPermission</class-interface>
<method name="getActions" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>52</id>
<description>                            
							Returns the hash code value for this WebRoleRefPermission.                            
							 The  properties of the returned hash code must be as follows:      During the lifetime of an Java application, the hashCode method       must return the same integer value, every time it is called on a       WebRoleRefPermission object. The value returned by hashCode for a       particular WebRoleRefPermission need not remain consistent from       one execution of an application to another.   If two WebRoleRefPermission objects are equal according to the       equals method, then calling the hashCode method on each of the two       Permission objects must produce the same integer result (within an       application).                            
						</description>
<package>javax.security.jacc</package>
<class-interface>WebRoleRefPermission</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>53</id>
<description>                            
							Determines if the argument Permission is implied by this  WebRoleRefPermission.                            
							 For this to be the case,      The argument must be an instanceof WebRoleRefPermission   with name equivalent to this WebRoleRefPermission, and   with role reference equivalent to this WebRoleRefPermission  (as defined in their  actions).      The comparisons described above are case sensitive.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebRoleRefPermission</class-interface>
<method name="implies" return-type="boolean">
<parameters>
<parameter>java.security.Permission</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>54</id>
<description>                            
							Creates a new WebRoleRefPermission with the specified name and actions.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>WebRoleRefPermission</class-interface>
<method name="WebRoleRefPermission" return-type="WebRoleRefPermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>55</id>
<description>                            
							Determines whether this WebUserDataPermission is less than, equal to,  or greater than the specified object, and returns a negative integer,  zero, or a positive integer respectively.                            
							  The behavior of this method must conform to the specification of the  CompareTo method of interface Comparable.    This method is used to sort WebUserDataPermissions  according to Servlet's path matching rules, and as necessary  to implement best match for Servlet constraint selection and  enforcement.    WebUserDataPermissions are sorted first by URL Pattern type.   The sorting by URL Pattern type is done such that   exact patterns (those not ending with * or /, or beginning with  *.) sort less than path prefix patterns (those ending with /*),  path prefix patterns sort less than extension patterns  (those beginning with *.), and such that extension patterns sort less  than the universal pattern /). Path prefix patterns are sorted first  by pattern depth; with deeper patterns sorting less than shallower  patterns. Same depth path prefix patterns are sorted by case  sensitive lexical comparison of the same depth nodes, beginning with  the root node, and continuing until a difference is found. Within pattern  types other than path prefix patterns, same type patterns are sorted  to case sensitive lexical order. Additional sorting by actions of  pattern equivalent permissions is optional.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebUserDataPermission</class-interface>
<method name="compareTo" return-type="int">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>56</id>
<description>                            
							Checks two WebUserDataPermission objects for equality.                            
							  WebUserDataPermission objects are equivalent if they have  case equivalent name and actions values.    Two Permission objects, P1 and P2, are equivalent if and only if  P1.implies(P2) AND P2.implies(P1).                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebUserDataPermission</class-interface>
<method name="equals" return-type="boolean">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>57</id>
<description>                            
							Returns a canonical String representation of the actions of this  WebUserDataPermission.                            
							 WebUserDataPermission actions are canonicalized by  sorting the HTTP methods and transport Types into lexical order.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebUserDataPermission</class-interface>
<method name="getActions" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>58</id>
<description>                            
							Returns the hash code value for this WebUserDataPermission.                            
							 The  properties of the returned hash code must be as follows:      During the lifetime of an Java application, the hashCode method       shall return the same integer value every time it is called on a       WebUserDataPermission object. The value returned by hashCode for a       particular EJBMethod permission need not remain consistent from       one execution of an application to another.   If two WebUserDataPermission objects are equal according to the       equals method, then calling the hashCode method on each of the two       Permission objects must produce the same integer result (within an       application).                            
						</description>
<package>javax.security.jacc</package>
<class-interface>WebUserDataPermission</class-interface>
<method name="hashCode" return-type="int"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>59</id>
<description>                            
							Determines if the argument Permission is implied by this  WebUserDataPermission.                            
							 For this to be the case,      The argument must be an instanceof WebUserDataPermission   with name matched by this WebUserDataPermission (according to       the  servlet matching rules), and   the HTTP methods to which the argument permission applies       (as defined in its actions) must be a subset of the HTTP methods       to which this WebUserDataPermission applies (as defined in its       actions), and   the transport types to which the argument permission applies       (as defined in its actions) must be a subset of the Transport types       to which this WebUserDataPermission applies (as defined in its       actions).      The servlet matching  rules are used to determine if the name of this WebUserDataPermission  matches the name of the argument permission. The names match if the  values of the URL pattern portions of their names are related as  follows:      their URL patterns are lexically equivalent, or   the URL pattern of this WebUserDataPermission is a path-prefix       pattern (that is, it ends with /*), and the path-prefix pattern       (minus the last 2 characters) is an exact match for a prefix of       the URL pattern of the argument permission, or   the URL pattern of this WebUserDataPermission is an extension       pattern (that is, it begins with *.) and the substring of the       extension pattern beginning with the . and extending to the end       of the pattern, is an exact match for the end of the URL pattern       of the argument permission.   the URL pattern of this WebUserDataPermission is the special       pattern containing only the default character / (there may be       more than one /) which matches all other URL patterns.      All of the comparisons described above are case sensitive.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebUserDataPermission</class-interface>
<method name="implies" return-type="boolean">
<parameters>
<parameter>java.security.Permission</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>60</id>
<description>                            
							Creates a new WebUserDataPermission with the specified name and actions.                            
							    The name contains a URL Pattern (as   defined in the Java Servlet Specification).   The URL Pattern identifies the web resources  to which the permission applies.    The actions parameter contains a comma separated list of HTTP methods  followed by a comma separated list of transport protection types.  The syntax of the actions parameter is defined as follows:              HTTPMethod ::= Get | POST | PUT | DELETE | HEAD | OPTIONS | TRACE  
     HTTPMethodList ::= HTTPMethod | HTTPMethodList comma HTTPMethod            
     HTTPMethodSpec ::= emptyString | HTTPMethodList            
     transportType ::= CLEAR | INTEGRAL | CONFIDENTIAL | UNCONSTRAINED    
     transportTypeList ::= transportType | transportTypeList comma transportType            
     transportTypeSpec ::= emptyString | transportTypeList            
     actions ::= null | HTTPMethodSpec | HTTPMethodSpec colon transportTypeSpec    

If duplicates occur in either the HTTPMethodSpec or transportTypeSpec,  they must be eliminated by the permission constructor.    An empty string HTTPMethodSpec is a shorthand for a List  containing all the possible HTTP methods.    An empty string transportTypeSpec is a shorthand for a  TransportTypeList containing the transportType value UNCONSTRAINED.    A transportType of UNCONSTRAINED indicates that the associated  HTTP methods at the web resources identified by the URL pattern may  be accessed over any transport. The transportType UNCONSTRAINED  is overridden by any other transportType associated with an equivalent  URLPattern.  
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>WebUserDataPermission</class-interface>
<method name="WebUserDataPermission" return-type="WebUserDataPermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>61</id>
<description>                            
							Creates a new WebUserDataPermission with name corresponding to the  URLPattern, and actions composed from the array of HTTP methods   and the array of transport types.                            
							                        
						</description>
<package>javax.security.jacc</package>
<class-interface>WebUserDataPermission</class-interface>
<method name="WebUserDataPermission" return-type="WebUserDataPermission">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.String[]</parameter>
<parameter>java.lang.String[]</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>62</id>
<description>                            
							Creates a new WebUserDataPermission from the HttpServletRequest  object.                            
							 A container uses this constructor prior to checking if  a caller has permission to perform a servlet request.                          
						</description>
<package>javax.security.jacc</package>
<class-interface>WebUserDataPermission</class-interface>
<method name="WebUserDataPermission" return-type="WebUserDataPermission">
<parameters>
<parameter>HttpServletRequest</parameter>
</parameters>
</method>
</assertion>
</assertions>
</javadoc>

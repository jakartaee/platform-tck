<?xml version="1.0"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet type="text/xsl" href="https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/spec_assertions.xsl"?>
<spec>
   <next-available-id>299</next-available-id>

   <previous-id>1</previous-id>

   <technology>JAXR</technology>

   <id>JAXR</id>

   <name>Java API for XML Registries</name>

   <version>1.0</version>

   <location-names>
      <chapters>
         <chapter id="2" name="Overview">
            <sections>
               <section id="10.1.3" name="Declaration of Capability Level by a JAXR Provider" />

               <section id="10.2" name="Level 0 Profile" />

               <section id="10.3" name="Level 1 Profile" />

               <section id="11" name="Capability Levels and Registry Standards" />
            </sections>
         </chapter>

         <chapter id="3" name="Architecture">
            <sections>
               <section id="2" name="Interface Connection" />

               <section id="3" name="Interface RegistryService" />
            </sections>
         </chapter>

         <chapter id="4" name="Information Model">
            <sections>
               <section id="1.2" name="Organization" />

               <section id="1.3" name="Service" />

               <section id="1.4" name="Service Binding" />

               <section id="1.5" name="SpecificationLink" />

               <section id="1.6" name="ClassificationScheme" />

               <section id="1.8" name="Concept" />

               <section id="1.9" name="Association" />

               <section id="1.10" name="RegistryPackage" />

               <section id="1.11" name="ExternalIdentifier" />

               <section id="1.12" name="ExternalLink" />

               <section id="1.13" name="Slot" />

               <section id="1.14" name="ExtensibleObject" />

               <section id="1.15" name="AuditableEvent" />

               <section id="1.16" name="User" />

               <section id="1.17" name="PostalAddress" />

               <section id="2.1" name="RegistryEntry Interface" />

               <section id="2.2" name="ExtrinsicObject Interface" />

               <section id="3" name="Internationalization (I18N) Support" />

               <section id="3.1" name="Interface InternationalString" />

               <section id="3.2" name="Interface LocalizedString" />

               <section id="4" name="RegistryAudit Trail" />
            </sections>
         </chapter>

         <chapter id="5" name="Classification of Registry Objects">
            <sections>
               <section id="1" name="Interface Classification" />

               <section id="2" name="Interface ClassificationScheme" />

               <section id="4" name="Interface Concept" />

               <section id="5" name="Interface Classification" />

               <section id="6" name="External Classification" />

               <section id="8" name="Context-sensitive Classification" />
            </sections>
         </chapter>

         <chapter id="6" name="Association of Registry Objects">
            <sections>
               <section id="0" name=" " />

               <section id="3" name="Association Types " />

               <section id="4" name="Intramural Association" />

               <section id="5" name="Extramural Association" />

               <section id="6.2" name="Confirmation of Extramural Association" />

               <section id="7" name="Visibility of Unconfirmed Association" />

               <section id="8" name="Possible Confirmation States" />
            </sections>
         </chapter>

         <chapter id="7" name="Connection Management">
            <sections>
               <section id="1" name="Looking Up a ConnectionFactory " />

               <section id="1.1" name="Looking Up a ConnectionFactory in JNDI" />

               <section id="1.2" name="Looking Up a ConnectionFactory without JNDI" />

               <section id="2" name="Setting Connection Properties on ConnectionFactory" />

               <section id="2.1.1" name="Standard Connection Properties" />

               <section id="3" name="Creating a JAXR Connection" />

               <section id="4" name="Synchronous Connections" />

               <section id="5" name="Asynchronous Connections" />

               <section id="5.1" name="JAXRResponse and Futures Design Pattern" />

               <section id="6" name="Security Credentials Specification" />

               <section id="7.1" name="Creating a Federated Connection" />

               <section id="7.1.1" name="Connection Configuration" />

               <section id="8" name="Concurrent Connections" />

               <section id="9" name="Using a Connection to Access the Registry" />

               <section id="10" name="Closing a Connection" />
            </sections>
         </chapter>

         <chapter id="8" name="Life Cycle Management">
            <sections>
               <section id="0" name=" " />

               <section id="1" name="Unique Key Assignment" />

               <section id="2.1" name="Requests, Responses and Exception Handling" />

               <section id="2.2" name="Creating Objects Using Factory Methods" />

               <section id="2.3" name="Saving Objects" />

               <section id="2.3.1" name="Interface BulkResponse" />

               <section id="2.3.2" name="Interface SaveException" />

               <section id="2.3.3" name="Implicit Saving of Objects" />

               <section id="2.4" name="Updating Objectse" />

               <section id="2.5" name="Deleting Objects" />

               <section id="2.5.1" name="Interface DeleteExceptions" />

               <section id="2.6" name="Deprecating Objects" />

               <section id="2.7" name="Un-Deprecating Objects" />

               <section id="3" name="Interface BusinessLifeCycleManagers" />

               <section id="3.1" name="Save Methods" />

               <section id="3.2" name="Delete Methods" />

               <section id="4" name="Life Cycle Management and Federated Connections" />
            </sections>
         </chapter>

         <chapter id="9" name="Query Management">
            <sections>
               <section id="0" name="Query Management" />

               <section id="1" name="Interface QueryManager" />

               <section id="2" name="Interface BusinessQueryManager" />

               <section id="2.1" name="Find Methods" />

               <section id="2.1.1" name="Collection Parameters" />

               <section id="2.1.2" name="Interface FindExceptions" />

               <section id="2.2" name="Canonical Paths Syntax for Concepts" />

               <section id="3" name="Interface DeclarativeQueryManager" />

               <section id="3.1" name="Interface Query" />

               <section id="3.2" name="Creating a Query" />

               <section id="3.3" name="Executing a Query" />

               <section id="4" name="SQL Query Syntax" />

               <section id="4.1" name="SQL Query Syntax Binding To Information Model" />

               <section id="5" name="OASIS ebXML Registry Filter Query Syntax" />

               <section id="6" name="Query Result" />

               <section id="7" name="Federated Queries" />
            </sections>
         </chapter>

         <chapter id="10" name="Security Architecture">
            <sections>
               <section id="1" name="Integrity" />

               <section id="2" name="Confidentiality" />

               <section id="3" name="Authentication" />

               <section id="3.1" name="Authentication Methods" />

               <section id="4" name="Authorization" />

               <section id="5.2" name="Method Connection.setCredentials" />
            </sections>
         </chapter>

         <chapter id="A" name="Pre-defined Enumerations">
            <sections>
               <section id="1" name="Identification of Pre-defined Enumerations" />

               <section id="2" name="Enumeration ObjectType" />

               <section id="3" name="Enumeration PhoneType" />

               <section id="4" name="Enumeration AssociationType" />

               <section id="5" name="Enumeration URLType" />

               <section id="6" name="Enumeration PostalAddressAttributes" />
            </sections>
         </chapter>

         <chapter id="B" name="Semantic Equivalence of JAXR Concepts">
            <sections>
               <section id="0" name=" " />
            </sections>
         </chapter>

         <chapter id="D" name="JAXR Mapping To UDDI">
            <sections>
               <section id="4" name="Mapping of JAXR Attributes to UDDI " />
            </sections>
         </chapter>
      </chapters>
   </location-names>

   <assertions>
      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>1</id>

         <description>A JAXR provider must declare the capability level for its implementation of the JAXR API.</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>2</id>

         <description>If a JAXR provider declares support for a specific capability level then it implicitly declares support for lower capability levels.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Will be testable when level 1 provider is requirement</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>3</id>

         <description>A JAXR provider must implement the functionality described by the JAXR API for each method that is assigned a capability level that is less than or equal to the capability level declared by the JAXR provider.</description>

         <location chapter="2" section="10.1.3" />

         <comment>This is implicitly tested.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>4</id>

         <description>A JAXR provider must implement all methods that are assigned a capability level that is greater than the capability level declared by the JAXR provider, to throw an UnsupportedCapabilityException.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>5</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for BusinessQueryManager findRegistryPackages</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>6</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for DeclarativeQueryManager createQuery</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>7</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for DeclarativeQueryManager executeQuery</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>8</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for LifeCycleManager createExtrinsicObject</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>9</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for LifeCycleManager createPersonName</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>10</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for LifeCycleManager createRegistryPackage(java.lang.String name)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>11</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for LifeCycleManager createRegistryPackage(InternationalString name)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>12</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for LifeCycleManager deprecateObjects(java.util.Collection keys)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>13</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for LifeCycleManager unDeprecateObjects(java.util.Collection keys)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>14</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Query getType()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>15</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Query toString()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>16</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for QueryManager getRegistryObject(java.lang.String id)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>17</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for QueryManager getRegistryObjects(java.util.Collection objectKeys)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>18</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryService getDeclarativeQueryManager()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>19</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for AuditableEvent getUser()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>20</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for AuditableEvent getTimestamp()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>21</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for AuditableEvent getEventType()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>22</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for AuditableEvent getRegistryObject()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>23</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for ClassificationScheme getValueType()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>24</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for ClassificationScheme setValueType(int valueType)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>25</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for ExtrinsicObject getMimeType()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>26</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for ExtrinsicObject getRepositoryItem()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>27</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for ExtrinsicObject isOpaque()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>28</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for ExtrinsicObject setMimeType(java.lang.String mimeType)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>29</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for ExtrinsicObject setOpaque(boolean isOpaque)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>30</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for ExtrinsicObject setRepositoryItem(javax.activation.DataHandler repositoryItem)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>31</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization getPostalAddress()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>32</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization setPostalAddress(PostalAddress address)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>33</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization addChildOrganization(Organization organization)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>34</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization addChildOrganizations(java.util.Collection organization)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>35</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization removeChildOrganization(Organization organization)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>36</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization removeChildOrganizations(java.util.Collection organization)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>37</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization getChildOrganizationCount()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>38</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization getChildOrganizations()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>39</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization getDescendantOrganizations()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>40</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization getParentOrganization()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>41</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Organization getRootOrganization()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>42</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for PersonName getLastName()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>43</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for PersonName setLastName(java.lang.String lastName)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>44</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for PersonName getFirstName()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>45</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for PersonName setFirstName(java.lang.String firstName)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>46</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for PersonName getMiddleName()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>47</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for PersonName setMiddleName(java.lang.String middleName)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>48</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryEntry getExpiration()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>49</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryEntry getStability()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>50</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryEntry getStatus()</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>51</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryEntry setExpiration(java.util.Date date)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>52</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryEntry setStability(int stability)</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>53</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryObject getAuditTrail()


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>54</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryObject getAssociatedObjects()


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>55</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryObject getObjectType()


 .</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>56</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryObject getRegistryPackages()


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>57</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryPackage addRegistryObject(RegistryObject registryObject)
.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>58</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryPackage addRegistryObjects(java.util.Collection registryObjects)
.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>59</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryPackage getRegistryObjects()
.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>60</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryPackage removeRegistryObject(RegistryObject registryObject)
.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>61</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for RegistryPackage removeRegistryObjects(java.util.Collection registryObjects)
.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>62</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for TelephoneNumber getCountryCode()


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>63</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for TelephoneNumber getAreaCode()


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>64</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for TelephoneNumber getExtension()


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>65</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for TelephoneNumber getUrl()


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>66</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for TelephoneNumber setCountryCode(java.lang.String countryCode)


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>67</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for TelephoneNumber setAreaCode(java.lang.String areaCode)


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>68</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for TelephoneNumber setExtension(java.lang.String extension)


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>69</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for TelephoneNumber setUrl(java.lang.String url)


.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>70</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for User getUrl()

 
.</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>71</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for User  setUrl(java.net.URL url)


.</description>

         <location chapter="2" section="10.1.3" />

      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>72</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Versionable getMajorVersion()  
.</description>

         <location chapter="2" section="10.1.3" />

      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>73</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Versionable getMinorVersion()
</description>

         <location chapter="2" section="10.1.3" />

      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>74</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Versionable getUserVersion()
</description>

         <location chapter="2" section="10.1.3" />

      </assertion>
      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>75</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Versionable setMajorVersion(int majorVersion) 
</description>

         <location chapter="2" section="10.1.3" />

         <comment>Multiple tests for this.</comment>
      </assertion>
      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>76</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Versionable setMinorVersion(int minorVersion) 
 </description>

         <location chapter="2" section="10.1.3" />

      </assertion>
      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>77</id>

         <description>Level 0 Providers must throw UnsupportedCapabilityException for Versionable setUserVersion(java.lang.String userVersion)
</description>

         <location chapter="2" section="10.1.3" />

      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>78</id>

         <description>A JAXR provider must never implement any other behavior for methods assigned a greater than the capability level declared by the JAXR provider.</description>

         <location chapter="2" section="10.1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>79</id>

         <description>Support for the level 0 profile is required to be supported by all JAXR providers..</description>

         <location chapter="2" section="10.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>80</id>

         <description>Support for the level 1 profile is optional for JAXR providers.</description>

         <location chapter="2" section="10.3" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>81</id>

         <description>Support for the Level 1 profile also implies full support for the Level 0 profile.</description>

         <location chapter="2" section="10.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>9</id>

         <description>JAXR providers for UDDI must be level 0 compliant.</description>

         <location chapter="2" section="11" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>10</id>

         <description>JAXR providers for ebXML must be level 1 compliant.</description>

         <location chapter="2" section="10.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>11</id>

         <description>A client must create a JAXR Connection to a registry provider using an appropriate JAXR provider in order to employ the services of that registry using the JAXR API.</description>

         <location chapter="3" section="2" />
      </assertion>

      <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>12</id>

         <description>The client uses the JAXR ConnectionFactory interface to create a Connection.</description>

         <location chapter="3" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>13</id>

         <description>The Connection interface provides various setter methods (e.g. setSynchronous, setCredentials) that allow the JAXR client to dynamically alter its state, context, and preferences with the JAXR provider at any time.</description>

         <location chapter="3" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>14</id>

         <description>The RegistryService interface (pointed to by block arrow in Figure 6) is the principal interface implemented by a JAXR provider. A registry client can get this interface from its Connection to a JAXR provider.</description>

         <location chapter="3" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>15</id>

         <description>The RegistryService interface provides the getter methods that are used by the client to discover various capability-specific interfaces implemented by the JAXR provider.</description>

         <location chapter="3" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>16</id>

         <description>It also provides a getCapabilityProfile method that allows the JAXR client to access the capability profile that describes the capabilities supported by the JAXR provider.</description>

         <location chapter="3" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>82</id>

         <description>Organization instances are RegistryObjects that provide information on organizations such as a Submitting Organization.</description>

         <location chapter="4" section="1.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>83</id>

         <description>Each Organization instance may have a reference to a parent Organization.</description>

         <location chapter="4" section="1.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>84</id>

         <description>An Organization may have a set of Service instances.</description>

         <location chapter="4" section="1.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>85</id>

         <description>Service instances are RegistryObjects that provide information on services (e.g. web services) offered by an Organization.</description>

         <location chapter="4" section="1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>86</id>

         <description>A Service may have a set of ServiceBinding instances.</description>

         <location chapter="4" section="1.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>87</id>

         <description>ServiceBinding instances are RegistryObjects that represent technical information on a specific way to access a specific interface offered by a Service instance.</description>

         <location chapter="4" section="1.4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>88</id>

         <description>A ServiceBinding may have a set of SpecificationLink instances.</description>

         <location chapter="4" section="1.4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>89</id>

         <description>A SpecificationLink provides the linkage between a ServiceBinding and one of its technical specifications that describes how to use the service using the ServiceBinding.</description>

         <location chapter="4" section="1.5" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>90</id>

         <description>A ClassificationScheme instance represents a taxonomy that may be used to classify or categorize RegistryObject instances.</description>

         <location chapter="4" section="1.6" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>91</id>

         <description>Concepts may be used to define the hierarchical tree structure and detailed elements of a classification scheme as described earlier in section 4.1.6. The root of the tree structure is defined by the ClassificationScheme instance while descendent nodes in the tree structure are Concept instances.</description>

         <location chapter="4" section="1.8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>92</id>

         <description>Concepts may be used to define extensible enumerations for use in values for certain attributes (e.g. objectType attribute in RegistryObject).</description>

         <location chapter="4" section="1.8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>93</id>

         <description>Concepts may be used to serve as a proxy for content that is external to a level 0 registry by providing a unique ID for the external content.</description>

         <location chapter="4" section="1.8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>94</id>

         <description>Concepts may be used to define namespaces for external identifiers such as DUNS.</description>

         <location chapter="4" section="1.8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>95</id>

         <description>Association instances are used to define many-to-many associations between objects in the information model.</description>

         <location chapter="4" section="1.9" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>96</id>

         <description>RegistryPackage instances are used to group logically related RegistryObjects together.</description>

         <location chapter="4" section="1.10" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>97</id>

         <description>A RegistryPackage may contain any number of RegistryObjects.</description>

         <location chapter="4" section="1.10" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>98</id>

         <description>RegistryObject may be a member of any number of RegistryPackages.</description>

         <location chapter="4" section="1.10" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>99</id>

         <description>ExternalIdentifier instances provide identification information to a RegistryObject.</description>

         <location chapter="4" section="1.11" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>100</id>

         <description>ExternalLink instances provide a link to content that is managed outside the Registry using a URI to the external content.</description>

         <location chapter="4" section="1.12" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>101</id>

         <description>RegistryObject may be associated with any number of ExternalLinks.</description>

         <location chapter="4" section="1.12" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>102</id>

         <description>If the HTTP URL is found to be invalid or inaccessible, the JAXR provider must throw 972 an InvalidRequestException.</description>

         <location chapter="4" section="1.12" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>103</id>

         <description>Slot instances provide a dynamic way to add arbitrary attributes to RegistryObject instances at run-time.</description>

         <location chapter="4" section="1.13" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>104</id>

         <description>The interface ExtensibleObject is extended by most interfaces in the JAXR information model. It provides methods that allow the addition, deletion and lookup of Slot instances.</description>

         <location chapter="4" section="1.14" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>105</id>

         <description>AuditableEvent instances are RegistryObjects that are used to provide an audit trail for RegistryObjects.</description>

         <location chapter="4" section="1.15" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>106</id>

         <description>User instances are RegistryObjects that are used to provide information about registered users within the registry.</description>

         <location chapter="4" section="1.16" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>107</id>

         <description>PostalAddress defines attributes of a postal address. Currently, it is used to provide address information for a User and an Organization.</description>

         <location chapter="4" section="1.17" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>108</id>

         <description>The RegistryEntry interface is a base interface for such interfaces in the model that require additional metadata beyond what is provided by the relatively lighter- weight and more fine-grained RegistryObject interface.</description>

         <location chapter="4" section="2.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>109</id>

         <description>ExtrinsicObject instances provide metadata for a repository item (e.g. a WSDL document or an XML schema document) about which the registry has no prior knowledge.</description>

         <location chapter="4" section="2.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>110</id>

         <description>An ExtrinsicObject instance is required for each repository item.</description>

         <location chapter="4" section="2.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>111</id>

         <description>Some information model classes have String attributes that are I18N capable and may be localized into multiple native languages. Examples include the name and description attributes of the RegistryObject interface as defined by the set/getName and set/getDescription methods of the RegistryObject interface.</description>

         <location chapter="4" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>112</id>

         <description>The InternationalString interface provides set/get methods for adding or getting locale specific String values for the InternationalString instance.</description>

         <location chapter="4" section="3.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>113</id>

         <description>Each LocalizedString instance has a Locale, a character set name and a String value.</description>

         <location chapter="4" section="3.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>114</id>

         <description>The getAuditTrail method of a RegistryObject returns an ordered Collection of AuditableEvents.</description>

         <location chapter="4" section="4" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>115</id>

         <description>AuditableEvents include a timestamp for the event.</description>

         <location chapter="4" section="4" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>116</id>

         <description>Each AuditableEvent has a reference to a User instance that identifies the specific user that performed the action that resulted in an AuditableEvent.</description>

         <location chapter="4" section="4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>117</id>

         <description>A RegistryObject may be classified along multiple dimensions by adding zero or more Classification instances to the RegistryObject.</description>

         <location chapter="5" section="1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>118</id>

         <description>The ClassificationScheme interface is used to represent taxonomies that may be used to provide taxonomy values that can be used to classify or categorize RegistryObject instances.</description>

         <location chapter="5" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>119</id>

         <description>A Classification instance uses a ClassificationScheme instance to identify the taxonomy used to classify its RegistryObject.</description>

         <location chapter="5" section="4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>120</id>

         <description>Concept instances are used to define tree structures where the root of the tree is a ClassificationScheme instance and each node in the tree is a Concept instance.</description>

         <location chapter="5" section="4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>121</id>

         <description>Two Concepts may be defined as being equivalent as described in Appendix B.</description>

         <location chapter="5" section="5" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>122</id>

         <description>A client may call the setConcept method on a Classification and define a reference to a Concept instance from the Classification instance in order for that Classification to use an internal taxonomy.</description>

         <location chapter="5" section="5" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>123</id>

         <description>A client may call the setValue method on a Classification and define a unique value that logically represents a taxonomy element within the taxonomy whose structure is defined externally.</description>

         <location chapter="5" section="6" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>124</id>

         <description>A client may call the setClassificationScheme for external Classifications to define the ClassificationScheme that represents the external taxonomy.</description>

         <location chapter="5" section="6" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>125</id>

         <description>Thus, in order to support the possibility of Classification within multiple contexts, a Classification may itself be classified by any number of Classifications that bind the first Classification to Concepts that provide the missing contexts.</description>

         <location chapter="5" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>126</id>

         <description>Classify a RegistryObject, by submitting an internal or external Classification.</description>

         <location chapter="5" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>127</id>

         <description>Classify a RegistryObject along multiple facets, by submitting multiple classifications.</description>

         <location chapter="5" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>128</id>

         <description>Qualify a classification submitted for a RegistryObject, by the contexts in which it is being classified.</description>

         <location chapter="5" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>129</id>

         <description>A RegistryObject instance may be associated with zero or more RegistryObject instances. The information model defines an Association interface, an instance of which may be used to associate any two RegistryObject instances.</description>

         <location chapter="6" section="0" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>130</id>

         <description>Each Association must have an associationType attribute that identifies the type of that association. The associationType attribute is a reference to an enumeration Concept as defined by the extensible ClassificationScheme defined in A.4.</description>

         <location chapter="6" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>131</id>

         <description>A common use case for the Association interface is when a User u creates an Association a between two RegistryObjects o1 and o2 where association a and RegistryObjects o1 and o2 are objects that were created by the same User u. This is the simplest use case where the association is between two objects that are owned by same User that is defining the Association. Such associations are referred to as intramural associations.</description>

         <location chapter="6" section="4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>132</id>

         <description>In this use case the Association is being defined where either or both objects that are being associated are owned by a User different from the User defining the Association. Such associations are referred to as extramural associations.</description>

         <location chapter="6" section="5" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>133</id>

         <description>The Association interface provides a convenience method called isExtramural that returns true if the Association instance is an extramural Association.</description>

         <location chapter="6" section="5" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>134</id>

         <description>Extramural associations may be viewed as a unilateral assertion that may not be viewed as truth until it has been confirmed by the other (extramural) parties (Users u2 and u3 in example in section 6.5). The confirm method on the Association interface may be called by the extramural parties that own the sourceObject or targetObject.</description>

         <location chapter="6" section="6.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>135</id>

         <description>In order for a caller to find the Associations that it needs to confirm, it can use the findAssociations method of the BusinessQueryManager interface.</description>

         <location chapter="6" section="7" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>136</id>

         <description>The Assocation is confirmed neither by the owner of the sourceObject nor is it confirmed by the owner of the targetObject</description>

         <location chapter="6" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>137</id>

         <description>The Association is confirmed by the owner of the sourceObject but it is not confirmed by the owner of the targetObject.</description>

         <location chapter="6" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>138</id>

         <description>The Association is not confirmed by the owner of the sourceObject but it is confirmed by the owner of the targetObject.</description>

         <location chapter="6" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>139</id>

         <description>The Association is confirmed by the owner of the sourceObject and it is confirmed by the owner of the targetObject.</description>

         <location chapter="6" section="8" />
      </assertion>

      <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>140</id>

         <description>A JAXR ConnectionFactory object is configured in a provider-specific way to create connections with registry providers.</description>

         <location chapter="7" section="1" />
      </assertion>

      <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>141</id>

         <description>The preferred way for a client to look up a JAXR ConnectionFactory is within Java Naming and Directory InterfaceTM (JNDI).</description>

         <location chapter="7" section="1.1" />
      </assertion>

      <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>142</id>

         <description>The newInstance methods return a JAXR ConnectionFactory. The client may indicate which factory class should be instantiated by the newInstance method by defining the system property javax.xml.registry.ConnectionFactoryClass.</description>

         <location chapter="7" section="1.2" />
      </assertion>

      <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>143</id>

         <description>In the event that this property is not set, the JAXR provider must return a default ConnectionFactory instance.</description>

         <location chapter="7" section="1.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>144</id>

         <description>Once a ConnectionFactory is available to the client, the client may configure the ConnectionFactory with a Properties object by calling the setProperties method on ConnectionFactory. Standard properties are defined by the JAXR API.</description>

         <location chapter="7" section="2" />
      </assertion>

      <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>145</id>

         <description>Provider-specific properties are defined by a specific JAXR provider.</description>

         <location chapter="7" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>146</id>

         <description>Connection configuration properties must be qualified by a package name.</description>

         <location chapter="7" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>147</id>

         <description>The following table describes those connection properties that are standardized by this specification. javax.xml.registry.queryManagerURL - URL to the query manager service within the target registry provider.</description>

         <location chapter="7" section="2.1.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>148</id>

         <description>The following table describes those connection properties that are standardized by this specification. javax.xml.registry.lifeCycleManagerURL URL to the life cycle manager service within the target registry provider. If unspecified then must default to value of the queryManagerURL described above.</description>

         <location chapter="7" section="2.1.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>149</id>

         <description>If unspecified then must default to value of the queryManagerURL described above</description>

         <location chapter="7" section="2.1.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>150</id>

         <description>The following table describes those connection properties that are standardized by this specification. javax.xml.registry. semanticEquivalence - Allows specification of semantic equivalences as described in Appendix B.</description>

         <location chapter="7" section="2.1.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>151</id>

         <description>The following table describes those connection properties that are standardized by this specification.javax.xml.registry. security. authenticationMethod - Provides a hint to the JAXR provider on the authentication method to be used when authenticating with the registry provider.</description>

         <location chapter="7" section="2.1.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>152</id>

         <description>The following table describes those connection properties that are standardized by this specification. javax.xml.registry.uddi.maxRows Specifies the maximum number of rows to be returned for find operations. This property is specific for UDDI providers.</description>

         <location chapter="7" section="2.1.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>153</id>

         <description>To create a Connection to a registry provider, a client uses the createConnection method of a JAXR providers ConnectionFactory.</description>

         <location chapter="7" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>154</id>

         <description>The createConnection method must check that the javax.xml.registry queryManagerURL described above is defined. If it is not defined, then it must throw an InvalidRequestException.</description>

         <location chapter="7" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>155</id>

         <description>The JAXR client uses the setSynchronous method on a Connection to dynamically alter whether it receives responses and exceptions from the JAXR provider synchronously or not. The JAXR provider must use this communication preference when processing requests on behalf of that client.</description>

         <location chapter="7" section="4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>156</id>

         <description>If the communication preference is synchronous, the JAXR provider must process each request method call completely in a synchronous manner before it returns a non-null JAXRResponse (or a sub-interface) instance that contains the response to the request.</description>

         <location chapter="7" section="4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>157</id>

         <description>The JAXR client may indicate an asynchronous communication mode by calling the setSynchronous method on a Connection with a false parameter.</description>

         <location chapter="7" section="5" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>158</id>

         <description>If the communication preference is asynchronous then each request method call returns a non-null JAXRResponse (or a sub-interface) immediately.</description>

         <location chapter="7" section="5" />

         <comment>Asynchronous support is not required in j2ee container.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>159</id>

         <description>For an asynchronous request, a JAXRProvider will immediately give the client back a JAXRResponse instance even though its value is not available. Internally, the JAXRProvider will allocate a globally unique request ID that must be a DCE 128 bit UUID.</description>

         <location chapter="7" section="5.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>160</id>

         <description>This request ID is available to the client via the getRequestId method on JAXRResponse.</description>

         <location chapter="7" section="5.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>161</id>

         <description>The JAXRProvider must maintain the mapping between request IDs and JAXRResponse instances so that when a reply arrives at some time in the future from the registry provider, it can find the corresponding JAXRResponse instance and delivers the reply to the instance.</description>

         <location chapter="7" section="5.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>162</id>

         <description>If a client attempts to read a value from a JAXRResponse that is not yet available, the JAXR provider must cause the caller to be blocked.</description>

         <location chapter="7" section="5.1" />

         <comment>Testable? It may be problematic to test this across various implementations.</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>163</id>

         <description>The availability of the value may be polled by getStatus method which must return STATUS_UNAVAILABLE when invoked on a JAXRResponse with a undefined value.</description>

         <location chapter="7" section="5.1" />

         <comment>testing across various implementations could be problematic</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>164</id>

         <description>In addition an isAvailable method on JAXRResponse is also provided as a convenience. The isAvailable method on JAXRResponse return true or false depending upon whether the value is available or not.</description>

         <location chapter="7" section="5.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>165</id>

         <description>The JAXR client uses the setCredentials method to dynamically alter its security credentials.</description>

         <location chapter="7" section="6" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>166</id>

         <description>The JAXR provider must use the credentials defined in the Connection instance at any given time when processing client requests.</description>

         <location chapter="7" section="6" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>167</id>

         <description>To create a federated connection to multiple registry providers, a client uses the createFederatedConnection method of a JAXR providers ConnectionFactory.</description>

         <location chapter="7" section="7.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>168</id>

         <description>The client must specify a Collection of Connection instances to the createFederatedConnection method. These connections may be primitive connections or federated connections.</description>

         <location chapter="7" section="7.1.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>169</id>

         <description>A single JAXR client may concurrently maintain multiple connections. Each non- federated connection uses a single JAXR provider to access a single registry provider.</description>

         <location chapter="7" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>170</id>

         <description>Collectively, these connections may concurrently access multiple registry providers.</description>

         <location chapter="7" section="8" />

         <comment>Testable? Well, given multiple registries this certainly is testable. But we only have one registry! What to do?</comment>
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>171</id>

         <description>Connection implementations must be thread-safe implementations.</description>

         <location chapter="7" section="8" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>172</id>

         <description>Access the lifecycle management functionality of the JAXR provider to create, update and delete objects in the target registry provider.</description>

         <location chapter="7" section="9" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>173</id>

         <description>Access the query management functionality of the JAXR provider to find and retrieve objects from the target registry provider.</description>

         <location chapter="7" section="9" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>174</id>

         <description>A client closes a Connection by calling the close method on it.</description>

         <location chapter="7" section="10" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>175</id>

         <description>Life cycle management requests are privileged operations and require authentication and authorization.</description>

         <location chapter="8" section="0" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>176</id>

         <description>This key is usually generated by the registry provider. Some registry providers, such as ebXML Registry providers, optionally allow the submitter to specify this unique key.</description>

         <location chapter="8" section="1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>177</id>

         <description>A JAXR provider must ignore client- supplied keys if any of the above conditions are not met. In this case, the registry provider is expected to generate the unique key.</description>

         <location chapter="8" section="1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>178</id>

         <description>The LifeCycleManager interface provides several methods that allow clients to make lifecycle requests with the target registry. - deleteObjects</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>179</id>

         <description>The LifeCycleManager interface provides several methods that allow clients to make lifecycle requests with the target registry. - deprecateObjects</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>180</id>

         <description>The LifeCycleManager interface provides several methods that allow clients to make lifecycle requests with the target registry. - saveObjects</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>181</id>

         <description>The LifeCycleManager interface provides several methods that allow clients to make lifecycle requests with the target registry. - unDeprecateObjects</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>182</id>

         <description>deleteObjects returns a BulkResponse</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>183</id>

         <description>deprecateObjects returns a BulkResponse</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>184</id>

         <description>saveObjects returns a BulkResponse</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>185</id>

         <description>unDeprecateObjects returns a BulkResponse</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>186</id>

         <description>If the JAXR provider detects an error in a client request prior to contacting the target registry provider, then the JAXR provider must throw a JAXRException.</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>187</id>

         <description>The JAXR provider must not catch run-time exceptions such as NullPointerException, since they are indicative of a programming error in the JAXR client. Instead, the JAXR provider should catch errors in a client request before they lead to potential run-time Exceptions (e.g. NullPointerException). In such cases, the JAXR provider must throw a JAXRException</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>188</id>

         <description>However, if the error is detected by the target registry provider, then the RegistryException is included within the BulkResponse instances Collection of RegistryExceptions.</description>

         <location chapter="8" section="2.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>189</id>

         <description>The LifeCycleManager interface has several factory methods that follow the naming pattern create""&lt;""interface""&gt;"" where ""&lt;""interface""&gt;"" represents the name of an interface in the javax.xml.registry.infomodel package. These factory methods are used by clients to create different types of objects defined by the information model.</description>

         <location chapter="8" section="2.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>190</id>

         <description>There is also a generic factory method called createObject which allows clients to create any type of information model object.</description>

         <location chapter="8" section="2.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>191</id>

         <description>An object created using a factory method initially only exists in memory. It is not saved in a registry provider until it is saved explicitly. The LifeCycleManager interface provides a saveObjects method for this purpose.</description>

         <location chapter="8" section="2.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>192</id>

         <description>The saveObjects method is used to create or update metadata and content. create</description>

         <location chapter="8" section="2.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>193</id>

         <description>The saveObjects method is used to create or update metadata and content. - update</description>

         <location chapter="8" section="2.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>194</id>

         <description>This method saves a heterogeneous Collection of objects that are instances of RegistryObject sub -interfaces.</description>

         <location chapter="8" section="2.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>195</id>

         <description>Each such object in the collection is stored into the registry.</description>

         <location chapter="8" section="2.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>196</id>

         <description>Implementations must traverse object references from the object being saved and save them implicitly.</description>

         <location chapter="8" section="2.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>197</id>

         <description>The BulkResponse instance contains a Collection of keys that are accessed via the getCollection method.</description>

         <location chapter="8" section="2.3.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>198</id>

         <description>In event of a partial success where only a subset of objects were saved successfully, the getStatus method of the BulkResponse must return JAXRResponse.STATUS_WARNING.</description>

         <location chapter="8" section="2.3.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>199</id>

         <description>In this case, a Collection of SaveException instances is included in the BulkResponse instance. The SaveExceptions provide information on each error that prevented some objects in the save method Collection not to be saved successfully.</description>

         <location chapter="8" section="2.3.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>200</id>

         <description>Note that the SaveExceptions are returned as part of the BulkResponse instead of being thrown, in order to allow the BulkResponse to be returned despite the exception.</description>

         <location chapter="8" section="2.3.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>201</id>

         <description>A JAXR provider must traverse object references from the object being saved and save them implicitly. For example, if the client saves an Organization explicitly, then the JAXR provider must implicitly save any Classifications, Associations, ExternalIdentifiers, Services, ServiceBindings etc., that are reachable from the Organization being saved.</description>

         <location chapter="8" section="2.3.3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>202</id>

         <description>An object that is created and subsequently saved to the target registry provider may be updated by modifying the object in memory and saving the object again using save methods such as saveObjects. The LifeCycleManager interface does not provide update methods that are distinct and separate from save methods.</description>

         <location chapter="8" section="2.4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>203</id>

         <description>An object that is created and subsequently saved to the target registry provider may be deleted from the target registry using a delete method of LifeCycleManager such as deleteObjects.</description>

         <location chapter="8" section="2.5" />
      </assertion>

      <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>204</id>

         <description>An attempt to remove a RegistryObject while it is still the target of references may result in an InvalidRequestException that is returned within the BulkResponse, if the registry provider enforces such deletion constraints.</description>

         <location chapter="8" section="2.5" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>205</id>

         <description>This exception is used in the event of failure or partial success during a delete operation. A Collection of instances of this exception is returned in the BulkResponse for a delete method invocation if delete exceptions are encountered.</description>

         <location chapter="8" section="2.5.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>206</id>

         <description>An object that is created and subsequently saved to the target registry provider may be deprecated from the target registry using a deprecate method of LifeCycleManager such as deprecateObjects.</description>

         <location chapter="8" section="2.6" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>207</id>

         <description>Once an object is deprecated, the JAXR provider must not allow any new references (e.g. new Associations, Classifications and ExternalLinks) to that object to be submitted.</description>

         <location chapter="8" section="2.6" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>208</id>

         <description>If a client makes an API call that results in a new reference to a deprecated object, the JAXR provider must throw a java.lang.IllegalStateException within a JAXRException.</description>

         <location chapter="8" section="2.6" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>209</id>

         <description>However, existing references to a deprecated object continue to function normally.</description>

         <location chapter="8" section="2.6" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>210</id>

         <description>The unDeprecateObjects method is used to un-deprecate previously deprecated RegistryObject instances.</description>

         <location chapter="8" section="2.7" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>211</id>

         <description>Once an object is un-deprecated, the JAXR provider must again allow new references (e.g. new Associations, Classifications and ExternalLinks) to that object to be submitted.</description>

         <location chapter="8" section="2.7" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>212</id>

         <description>The BusinessLifeCycleManager interface provides the ability to explicitly submit, update or delete instances of the most important high-level interfaces in the information model.</description>

         <location chapter="8" section="2.1" />
      </assertion>


      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>225</id>

         <description>If the Collection contains an object whose type does not match the save method, the implementation must throw an UnexpectedObjectException.</description>

         <location chapter="8" section="3.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>226</id>

         <description>The save methods of BusinessQueryManager are a convenience for those who prefer an explicit API. Calling a save method of BusinessQueryManager should have the same effect as calling the saveObjects method in LifeCycleManager.</description>

         <location chapter="8" section="3.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>227</id>

         <description>If the Collection contains a key whose object type does not match the delete method, the implementation must throw an UnexpectedObjectException.</description>

         <location chapter="8" section="3.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>228</id>

         <description>The delete methods of BusinessQueryManager are a convenience for those who prefer an explicit API. Calling a delete method of BusinessQueryManager should have the same effect as calling the deleteObjects method in LifeCycleManager.</description>

         <location chapter="8" section="3.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>229</id>

         <description>The getLifeCycleManager and getBusinessLifeCycleManager methods of RegistryService from a FederatedConnection must throw UnsupportedCapabilityException.</description>

         <location chapter="8" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>230</id>

         <description>Query management interfaces are designed for use by any non-privileged registry user</description>

         <location chapter="9" section="0" />
      </assertion>


      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>237</id>

         <description>findQualifiers - Is a Collection of find qualifiers as defined by the FindQualifier interface. It specifies qualifiers that effect string matching, sorting, and boolean predicate logic etc.</description>

         <location chapter="9" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>238</id>

         <description>namePatterns - Is a Collection that may consist of either String or LocalizedString objects. Each String, or value within a LocalizedString, is a partial or full name pattern with wildcard searching as specified by the SQL-92 LIKE specification. Unless otherwise specified in findQualifiers, this is a Logical OR and a match on any name qualifies as a match for this criteria.</description>

         <location chapter="9" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>239</id>

         <description>classifications - Is a Collection of Classifications that classify the object. This is analogous to catgegoryBag in UDDI. Unless otherwise specified in findQualifiers, this is a Logical AND and requires a match on ALL specified Classifications to qualify as a match for this criteria.</description>

         <location chapter="9" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>240</id>

         <description>A transient Classification may be created by the programmer using LifeCycleManager.createClassification to use in this Collection.</description>

         <location chapter="9" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>241</id>

         <description>specifications - Is a Collection of RegistryObjects that represent (proxy) a tecnical specification. This is analogous to tModelBag in UDDI. Unless otherwise specified in findQualifiers, this is a Logical AND and requires a match on ALL specified Specifications to qualify as a match for this criteria.</description>

         <location chapter="9" section="0" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>242</id>

         <description>externalIdentifiers - Is a Collection of ExternalIdentifiers that provide an external identifier for the object using an identification scheme such as DUNS. This is analogous to identifierBag in UDDI. Unless otherwise specified in findQualifiers, this is a Logical AND and requires a match on ALL specified Classifications to qualify as a match for this criteria.</description>

         <location chapter="9" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>243</id>

         <description>A transient ExternalIdentifier may be created by the programmer using LifeCycleManager.createExternalIdentifier to use in this Collection.</description>

         <location chapter="9" section="0" />
      </assertion>


      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>253</id>

         <description>Any Collection parameters that are Collections of objects are homogeneous collection of objects of the appropriate type. If the Collection contains an object whose type is unexpected, the implementation must throw an UnexpectedObjectException.</description>

         <location chapter="9" section="2.1.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>254</id>

         <description>This exception is used in the event of failure or partial success during a find operation. A Collection of instances of this exception is returned in the BulkResponse for a find method invocation if FindExceptions are encountered.</description>

         <location chapter="9" section="2.1.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>255</id>

         <description>In the findConceptByPath method, the desired Concept may be indicated via a canonical representation that uniquely identifies the absolute path leading from the ClassificationScheme to that Concept.</description>

         <location chapter="9" section="2.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>256</id>

         <description>Interface DeclarativeQueryManager provides a more flexible generic API that provides the ability to perform ad hoc queries using a declarative query language syntax. Currently the only declarati ve syntaxes supported are SQL-92 and OASIS ebXML Registry Filter Queries.</description>

         <location chapter="9" section="0" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>257</id>

         <description>If the target registry does not support SQL queries then methods calls on DeclarativeQueryManager should throw UnsupportedCapabilityException.</description>

         <location chapter="9" section="3" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>258</id>

         <description>Query createQuery(int queryType, java.lang.String queryString) Creates a Query object given a queryType (e.g. SQL) and a String that represents a query in the syntax appropriate for queryType.</description>

         <location chapter="9" section="3" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>259</id>

         <description>BulkResponse executeQuery(Query query) Execute a query as specified by query paramater.</description>

         <location chapter="9" section="3" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>260</id>

         <description>The Query interface encapsulates a query in a declarative query language. Currently a Query can only be defined using an SQL-92 syntax or the OASIS ebXML Registry query syntax.</description>

         <location chapter="9" section="3.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>261</id>

         <description>int getType() Gets the type of Query (e.g. SQL).</description>

         <location chapter="9" section="3.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>263</id>

         <description>A JAXR client must first create a Query object to encapsula te their query in a supported declarative query syntax such as SQL. This is done by calling the createQuery factory method on the DeclarativeQueryManager.</description>

         <location chapter="9" section="3.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>264</id>

         <description>A JAXR provider may optionally perform client side validation of the SQL query syntax and throw an InvalidRequestException when an invalid query is specified.</description>

         <location chapter="9" section="3.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>265</id>

         <description>In the absence of such validation, it is expected that the Registry provider will detect the error in which case a RegistryException will be returned in the BulkResponse.</description>

         <location chapter="9" section="3.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>266</id>

         <description>A JAXR client executes a declarative query as encapsulated by a Query instance by invoking the executeQuery method of the DeclarativeQueryManager giving it the Query object as parameter.</description>

         <location chapter="9" section="3.3" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>267</id>

         <description>The syntax for the SQL Query is defined by a stylized use of a proper subset of the SELECT statement of Entry level SQL defined by ISO/IEC 9075:1992, Database Language SQL [SQL], extended to include sql invoked routines (also known as stored procedures) as specified in ISO/IEC 9075-4 [SQL-PSM].</description>

         <location chapter="9" section="4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>268</id>

         <description>The SQL Queries are defined based upon the query syntax defined in [RIM] and a relational schema that is an algorithmic binding to the information model as described in the section titled SQL Query Syntax Binding To [RIM] in [RIM].</description>

         <location chapter="9" section="4.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>269</id>

         <description>The [ebRS] specification defines the filter query syntax for OASIS ebXML Registry. This syntax is an XML syntax defined by an XML Schema.</description>

         <location chapter="9" section="5" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>270</id>

         <description>The executeQuery method returns a BulkResponse that contains a homogeneous collection of objects.</description>

         <location chapter="9" section="6" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>271</id>

         <description>A client may issue a federated query against multiple registry providers as if they are a single logical registry provider. Federated query capability is an optional feature of a JAXR provider for version 1.0. 1948</description>

         <location chapter="9" section="7" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>272</id>

         <description>All Level 1 JAXR providers must be capable of sending signed requests to the registry provider and receiving signed responses from the 1961 registry provider.</description>

         <location chapter="10" section="1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>273</id>

         <description>To ensure the confidentiality of a JAXR request to the target registry provider, all JAXR providers (Level 0 and above) must be able to use SSL to communicate with a registry that is accessible over the HTTPS protocol.</description>

         <location chapter="10" section="2" />
      </assertion>

      <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>274</id>

         <description>Level 1 JAXR providers may be capable of sending encrypted requests to the registry provider and receiving encrypted responses from the registry provider.</description>

         <location chapter="10" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>275</id>

         <description>in UDDI, authentication is needed only on requests that use the UDDI publishing API to submit, update, or delete content.</description>

         <location chapter="10" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>276</id>

         <description>A JAXR client may specify a particular authentication method using the javax.xml.registry.security.authenticationMethod connection property.</description>

         <location chapter="10" section="3.1" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>277</id>

         <description>If the provider does not support the specified authentication method then it must throw UnsupportedCapabilityException during the ConnectionFactory.createConnection call.</description>

         <location chapter="10" section="3.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>278</id>

         <description>The following authentication methods have been defined as normative authentication methods:MS_PASSPORT is the Microsoft Passport authentication mechanism.</description>

         <location chapter="10" section="3.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>279</id>

         <description>The following authentication methods have been defined as normative authentication methods:UDDI_GET_AUTHTOKEN is the get_AuthToken protocol defined by [UDDI_API2].</description>

         <location chapter="10" section="3.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>280</id>

         <description>The following authentication methods have been defined as normative authentication methods: HTTP_BASIC is the HTTP basic authentication as specified in RFC2068.</description>

         <location chapter="10" section="3.1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>281</id>

         <description>The following authentication methods have been defined as normative authentication methods:CLIENT_CERTIFICATE</description>

         <location chapter="10" section="3.1" />
      </assertion>

      <assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>282</id>

         <description>The registry provider may perform authorization checks in a registry provider-specific manner and report any authorization errors. The JAXR provider must map any such registry provider-specific errors to a JAXRException and deliver it to the client.</description>

         <location chapter="10" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>284</id>

         <description>A JAXR provider must support credentials in the form of either a digital certificate and private key or a username and password combination.</description>

         <location chapter="10" section="5.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>285</id>

         <description>When a JAXR client specifies a digital certificate as a credential, it must do so using an instance of the javax.security.auth.x500. X500PrivateCredential class as defined by the JAAS API.</description>

         <location chapter="10" section="5.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>286</id>

         <description>When a JAXR client specifies a username and password combination as a credential, it must do so using an instance of the java.net.PasswordAuthentication class.</description>

         <location chapter="10" section="5.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>287</id>

         <description>A JAXR provider must be able to use the appropriate credential from the credentials set for the Connection by the last setCredentials call and authenticate with the registry provider in a provider-specific manner.</description>

         <location chapter="10" section="5.2" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>288</id>

         <description>If a client dynamically changes their credentials, it does not have any impact on the pre-existing RegistryService instance within that Connection. Nor does it have any impact on any information model objects created within that Connection.</description>

         <location chapter="10" section="5.2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>289</id>

         <description>A client may identify the ClassificationScheme for a pre-defined enumeration using the name of the ClassificationScheme in the en_US locale.</description>

         <location chapter="A" section="1" />
      </assertion>

      <assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>290</id>

         <description>The ObjectType enumeration is used in the getObjectType method of RegistryObject.</description>

         <location chapter="A" section="2" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>291</id>

         <description>Enumeration PhoneType - This enumeration is used in the getPhoneType method of TelephoneNumber.</description>

         <location chapter="A" section="3" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>292</id>

         <description>Enumeration AssociationType - This enumeration is used in the getAssociationType method of Association.</description>

         <location chapter="A" section="4" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>293</id>

         <description>Enumeration URLType - This enumeration is used in classifying a ServiceBinding according to the type of access point it supports.</description>

         <location chapter="A" section="5" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>294</id>

         <description>Enumeration PostalAddressAttributes - This enumeration is used to provide a mapping from the attributes of the PostalAddress class to a ny user-defined taxonomy.</description>

         <location chapter="A" section="6" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>295</id>

         <description>A JAXR provider must allow a client to define semantic equivalences on a per connection basis using the javax.xml.registry.semanticEquivalence connection property.</description>

         <location chapter="B" section="0" />
      </assertion>

      <assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
         <id>296</id>

         <description>A JAXR provider may provide the ability to define the concept equivalences in a provider specific manner as global defaults for the provider.</description>

         <location chapter="B" section="0" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
         <id>297</id>

         <description>A JAXR provider must ignore any concept equivalence properties that were invalid for some reason (e.g. id specified was not to a Concept). In such cases the JAXR provider should emit a suitable warning to the user.</description>

         <location chapter="B" section="0" />
      </assertion>

      <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
         <id>298</id>

         <description>A JAXR provider for UDDI must throw an UnsupportedCapabilityException when a client attempts to call a setter method for an attribute that has no mapping in UDDI (e.g. RegistryEntry.setMajorVersion).</description>

         <location chapter="D" section="4" />
      </assertion>

   </assertions>
</spec>


<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
  <next-available-id>281</next-available-id>
  <previous-id>207</previous-id>
  <technology>JAXWS</technology>
  <id>JAXWS</id>
  <name>Java(TM) API for XML Web Services</name>
  <version>2.2</version>
  <assertions>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- UNMODIFIED ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:1</id>
      <description>Called when the response to an asynchronous operation is available.</description>
      <package>javax.xml.ws</package>
      <class-interface>AsyncHandler</class-interface>
      <method name="handleResponse" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.Response</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:2</id>
      <description>Gets a copy of the handler chain for a protocol binding instance. If the returned chain is modified a call to setHandlerChain is required to configure the binding instance with the new chain.</description>
      <package>javax.xml.ws</package>
      <class-interface>Binding</class-interface>
      <method name="getHandlerChain" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:3</id>
      <description>Sets the handler chain for the protocol binding instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Binding</class-interface>
      <method name="setHandlerChain" return-type="void">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:4</id>
      <description>Get the Binding for this binding provider.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingProvider</class-interface>
      <method name="getBinding" return-type="javax.xml.ws.Binding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:5</id>
      <description>Get the context that is used to initialize the message context for request messages. Modifications to the request context do not affect the message context of either synchronous or asynchronous operations that have already been started.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingProvider</class-interface>
      <method name="getRequestContext" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:6</id>
      <description>Get the context that resulted from processing a response message. The returned context is for the most recently completed synchronous operation. Subsequent synchronous operation invocations overwrite the response context. Asynchronous operations return their response context via the Response interface.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingProvider</class-interface>
      <method name="getResponseContext" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:7</id>
      <description>A binding identifier (a URI). If not specified, the default is the SOAP 1.1 / HTTP binding. See the SOAPBinding and HTTPBinding for the definition of the standard binding identifiers.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingType</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:8</id>
      <description>Invoke a service operation synchronously. The client is responsible for ensuring that the msg object when marshalled is formed according to the requirements of the protocol binding in use.</description>
      <package>javax.xml.ws</package>
      <class-interface>Dispatch</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:9</id>
      <description>Invoke a service operation asynchronously. The method returns without waiting for the response to the operation invocation, the results of the operation are obtained by polling the returned Response. The client is responsible for ensuring that the msg object when marshalled is formed according to the requirements of the protocol binding in use.</description>
      <package>javax.xml.ws</package>
      <class-interface>Dispatch</class-interface>
      <method name="invokeAsync" return-type="javax.xml.ws.Response">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:10</id>
      <description>Invoke a service operation asynchronously. The method returns without waiting for the response to the operation invocation, the results of the operation are communicated to the client via the passed in handler. The client is responsible for ensuring that the msg object when marshalled is formed according to the requirements of the protocol binding in use.</description>
      <package>javax.xml.ws</package>
      <class-interface>Dispatch</class-interface>
      <method name="invokeAsync" return-type="java.util.concurrent.Future">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.xml.ws.AsyncHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:11</id>
      <description>Invokes a service operation using the one-way interaction mode. The operation invocation is logically non-blocking, subject to the capabilities of the underlying protocol, no results are returned. When the protocol in use is SOAP/HTTP, this method MUST block until an HTTP response code has been received or an error occurs. The client is responsible for ensuring that the msg object when marshalled is formed according to the requirements of the protocol binding in use.</description>
      <package>javax.xml.ws</package>
      <class-interface>Dispatch</class-interface>
      <method name="invokeOneWay" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:12</id>
      <description>Creates an endpoint with the specified implementor object. If there is a binding specified via a BindingType annotation then it MUST be used else a default of SOAP 1.1 / HTTP binding MUST be used. The newly created endpoint may be published by calling one of the javax.xml.ws.Endpoint#publish(String) and javax.xml.ws.Endpoint#publish(Object) methods.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="create" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:13</id>
      <description>Creates an endpoint with the specified binding type and implementor object. The newly created endpoint may be published by calling one of the javax.xml.ws.Endpoint#publish(String) and javax.xml.ws.Endpoint#publish(Object) methods.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="create" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:14</id>
      <description />
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="Endpoint" return-type="Endpoint" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:15</id>
      <description>Returns the binding for this endpoint.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="getBinding" return-type="javax.xml.ws.Binding" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:16</id>
      <description>Returns the executor for this Endpointinstance. The executor is used to dispatch an incoming request to the implementor object.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="getExecutor" return-type="java.util.concurrent.Executor" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:17</id>
      <description>Returns the implementation object for this endpoint.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="getImplementor" return-type="java.lang.Object" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:18</id>
      <description>Returns a list of metadata documents for the service.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="getMetadata" return-type="java.util.List" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:19</id>
      <description>Returns the property bag for this Endpoint instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="getProperties" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:20</id>
      <description>Returns true if the endpoint is in the published state.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="isPublished" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:21</id>
      <description>Publishes this endpoint at the given address. The necessary server infrastructure will be created and configured by the JAX-WS implementation using some default configuration. In order to get more control over the server configuration, please use the javax.xml.ws.Endpoint#publish(Object) method instead.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="publish" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:23</id>
      <description>Publishes this endpoint at the provided server context. A server context encapsulates the server infrastructure and addressing information for a particular transport. For a call to this method to succeed, the server context passed as an argument to it MUST be compatible with the endpoint's binding.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="publish" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:24</id>
      <description>Sets the executor for this Endpoint instance. The executor is used to dispatch an incoming request to the implementor object. If this Endpoint is published using the publish(Object) method and the specified server context defines its own threading behavior, the executor may be ignored.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="setExecutor" return-type="void">
        <parameters>
          <parameter>java.util.concurrent.Executor</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:25</id>
      <description>Sets the metadata for this endpoint.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="setMetadata" return-type="void">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:26</id>
      <description>Sets the property bag for this Endpoint instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="setProperties" return-type="void">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:28</id>
      <description>Creates a new holder with a null value.</description>
      <package>javax.xml.ws</package>
      <class-interface>Holder</class-interface>
      <method name="Holder" return-type="Holder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:29</id>
      <description>Create a new holder with the specified value.</description>
      <package>javax.xml.ws</package>
      <class-interface>Holder</class-interface>
      <method name="Holder" return-type="Holder">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:30</id>
      <description>Gets the message payload as an XML source, may be called multiple times on the same LogicalMessage instance, always returns a new Source that may be used to retrieve the entire message payload. If the returned Source is an instance of DOMSource, then modifications to the encapsulated DOM tree change the message payload in-place, there is no need to susequently call setPayload. Other types of Source provide only read access to the message payload.</description>
      <package>javax.xml.ws</package>
      <class-interface>LogicalMessage</class-interface>
      <method name="getPayload" return-type="javax.xml.transform.Source" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:31</id>
      <description>Gets the message payload as a JAXB object. Note that there is no connection between the returned object and the message payload, changes to the payload require calling setPayload.</description>
      <package>javax.xml.ws</package>
      <class-interface>LogicalMessage</class-interface>
      <method name="getPayload" return-type="java.lang.Object">
        <parameters>
          <parameter>JAXBContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:32</id>
      <description>Sets the message payload</description>
      <package>javax.xml.ws</package>
      <class-interface>LogicalMessage</class-interface>
      <method name="setPayload" return-type="void">
        <parameters>
          <parameter>javax.xml.transform.Source</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:33</id>
      <description>Sets the message payload</description>
      <package>javax.xml.ws</package>
      <class-interface>LogicalMessage</class-interface>
      <method name="setPayload" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>JAXBContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:34</id>
      <description>Constructs a new protocol exception with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to Throwable.initCause(java.lang.Throwable).</description>
      <package>javax.xml.ws</package>
      <class-interface>ProtocolException</class-interface>
      <method name="ProtocolException" return-type="ProtocolException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:35</id>
      <description>Constructs a new protocol exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to Throwable.initCause(java.lang.Throwable).</description>
      <package>javax.xml.ws</package>
      <class-interface>ProtocolException</class-interface>
      <method name="ProtocolException" return-type="ProtocolException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:36</id>
      <description>Constructs a new runtime exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this runtime exception's detail message.</description>
      <package>javax.xml.ws</package>
      <class-interface>ProtocolException</class-interface>
      <method name="ProtocolException" return-type="ProtocolException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:37</id>
      <description>Constructs a new runtime exception with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause). This constructor is useful for runtime exceptions that are little more than wrappers for other throwables.</description>
      <package>javax.xml.ws</package>
      <class-interface>ProtocolException</class-interface>
      <method name="ProtocolException" return-type="ProtocolException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:38</id>
      <description>Invokes an operation occording to the contents of the request message.</description>
      <package>javax.xml.ws</package>
      <class-interface>Provider</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:39</id>
      <description>Request wrapper bean name.</description>
      <package>javax.xml.ws</package>
      <class-interface>RequestWrapper</class-interface>
      <method name="className" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:42</id>
      <description>Gets the contained response context.</description>
      <package>javax.xml.ws</package>
      <class-interface>Response</class-interface>
      <method name="getContext" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:43</id>
      <description>Response wrapper bean name.</description>
      <package>javax.xml.ws</package>
      <class-interface>ResponseWrapper</class-interface>
      <method name="className" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:46</id>
      <description>Creates a new port for the service. Ports created in this way contain no WSDL port type information and can only be used for creating Dispatchinstances.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="addPort" return-type="void">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:50</id>
      <description>Returns the executor for this Serviceinstance. The executor is used for all asynchronous invocations that require callbacks.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getExecutor" return-type="java.util.concurrent.Executor" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:51</id>
      <description>Returns the configured handler resolver.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getHandlerResolver" return-type="javax.xml.ws.handler.HandlerResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:52</id>
      <description>The getPort method returns a proxy. A service client uses this proxy to invoke operations on the target service endpoint. The serviceEndpointInterface specifies the service endpoint interface that is supported by the created dynamic proxy instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:53</id>
      <description>The getPort method returns a proxy. The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly. The returned proxy should not be reconfigured by the client.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:54</id>
      <description>Returns an Iterator for the list of QNames of service endpoints grouped by this service</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getPorts" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:55</id>
      <description>Gets the name of this service.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getServiceName" return-type="javax.xml.namespace.QName" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:56</id>
      <description>Gets the location of the WSDL document for this Service.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getWSDLDocumentLocation" return-type="java.net.URL" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:57</id>
      <description>Sets the executor for this Service instance. The executor is used for all asynchronous invocations that require callbacks.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="setExecutor" return-type="void">
        <parameters>
          <parameter>java.util.concurrent.Executor</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:58</id>
      <description>Sets the HandlerResolver for this Service instance. The handler resolver, if present, will be called once for each proxy or dispatch instance that is created, and the handler chain returned by the resolver will be set on the instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="setHandlerResolver" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.handler.HandlerResolver</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:59</id>
      <description />
      <package>javax.xml.ws</package>
      <class-interface>Service.Mode</class-interface>
      <method name="valueOf" return-type="javax.xml.ws.Service.Service.Mode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:60</id>
      <description />
      <package>javax.xml.ws</package>
      <class-interface>Service.Mode</class-interface>
      <method name="values" return-type="javax.xml.ws.Service.Service.Mode[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:61</id>
      <description>Service mode. PAYLOAD indicates that the Provider implementation wishes to work with protocol message payloads only. MESSAGE indicates that the Provider implementation wishes to work with entire protocol messages.</description>
      <package>javax.xml.ws</package>
      <class-interface>ServiceMode</class-interface>
      <method name="value" return-type="javax.xml.ws.Service.Service.Mode" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:62</id>
      <description>The local name of the endpoint.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebEndpoint</class-interface>
      <method name="name" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:63</id>
      <description>Fault bean name.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebFault</class-interface>
      <method name="faultBean" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:66</id>
      <description>The local name of the Web service.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceClient</class-interface>
      <method name="name" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:67</id>
      <description>The namespace for the Web service.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceClient</class-interface>
      <method name="targetNamespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:68</id>
      <description>The location of the WSDL document for the service (a URL).</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceClient</class-interface>
      <method name="wsdlLocation" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:69</id>
      <description>Returns the MessageContext for the request being served at the time this method is called. Only properties with APPLICATION scope will be visible to the application.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceContext</class-interface>
      <method name="getMessageContext" return-type="javax.xml.ws.handler.MessageContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:70</id>
      <description>Returns the Principal that identifies the sender of the request currently being serviced. If the sender has not been authenticated, the method returns null.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceContext</class-interface>
      <method name="getUserPrincipal" return-type="java.security.Principal" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:71</id>
      <description>Returns a boolean indicating whether the authenticated user is included in the specified logical role. If the user has not been authenticated, the method returns false.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceContext</class-interface>
      <method name="isUserInRole" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:72</id>
      <description>Constructs a new exception with null as its detail message. The cause is not initialized.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceException</class-interface>
      <method name="WebServiceException" return-type="WebServiceException" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:73</id>
      <description>Constructs a new exception with the specified detail message. The cause is not initialized.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceException</class-interface>
      <method name="WebServiceException" return-type="WebServiceException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:74</id>
      <description>Constructs a new exception with the specified detail message and cause.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceException</class-interface>
      <method name="WebServiceException" return-type="WebServiceException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:75</id>
      <description>Constructs a new WebServiceException with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause).</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceException</class-interface>
      <method name="WebServiceException" return-type="WebServiceException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:76</id>
      <description>Creates a new permission with the specified name.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServicePermission</class-interface>
      <method name="WebServicePermission" return-type="WebServicePermission">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:77</id>
      <description>Creates a new permission with the specified name and actions. The actions parameter is currently unused and it should be null.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServicePermission</class-interface>
      <method name="WebServicePermission" return-type="WebServicePermission">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:78</id>
      <description>Port name.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceProvider</class-interface>
      <method name="portName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:79</id>
      <description>Service name.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceProvider</class-interface>
      <method name="serviceName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:80</id>
      <description>Target namespace for the service</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceProvider</class-interface>
      <method name="targetNamespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:81</id>
      <description>Location of the WSDL description for the service.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceProvider</class-interface>
      <method name="wsdlLocation" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:82</id>
      <description>A product specific name that this resource should be mapped to. The name of this resource, as defined by the name element or defaulted, is a name that is local to the application component using the resource. (It's a name in the JNDI java:comp/env namespace.) Many application servers provide a way to map these local names to names of resources known to the application server. This mapped name is often a global JNDI name, but may be a name of any form. Application servers are not required to support any particular form or type of mapped name, nor the ability to use mapped names. The mapped name is product-dependent and often installation-dependent. No use of a mapped name is portable.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceRef</class-interface>
      <method name="mappedName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:83</id>
      <description>The JNDI name of the resource. For field annotations, the default is the field name. For method annotations, the default is the JavaBeans property name corresponding to the method. For class annotations, there is no default and this MUST be specified.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceRef</class-interface>
      <method name="name" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:84</id>
      <description>The Java type of the resource. For field annotations, the default is the type of the field. For method annotations, the default is the type of the JavaBeans property. For class annotations, there is no default and this MUST be specified.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceRef</class-interface>
      <method name="type" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:85</id>
      <description>The service class, always a type extending javax.xml.ws.Service. This element MUST be specified whenever the type of the reference is a service endpoint interface.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceRef</class-interface>
      <method name="value" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:86</id>
      <description>A URL pointing to the WSDL document for the web service. If not specified, the WSDL location specified by annotations on the resource type is used instead.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceRef</class-interface>
      <method name="wsdlLocation" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:87</id>
      <description>Called at the conclusion of a message exchange pattern just prior to the JAX-WS runtime disptaching a message, fault or exception. Refer to the description of the handler framework in the JAX-WS specification for full details.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>Handler</class-interface>
      <method name="close" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.handler.MessageContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:88</id>
      <description>The handleFault method is invoked for fault message processing. Refer to the description of the handler framework in the JAX-WS specification for full details.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>Handler</class-interface>
      <method name="handleFault" return-type="boolean">
        <parameters>
          <parameter>javax.xml.ws.handler.MessageContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:89</id>
      <description>The handleMessage method is invoked for normal processing of inbound and outbound messages. Refer to the description of the handler framework in the JAX-WS specification for full details.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>Handler</class-interface>
      <method name="handleMessage" return-type="boolean">
        <parameters>
          <parameter>javax.xml.ws.handler.MessageContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:90</id>
      <description>Gets the handler chain for the specified port.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>HandlerResolver</class-interface>
      <method name="getHandlerChain" return-type="java.util.List">
        <parameters>
          <parameter>javax.xml.ws.handler.PortInfo</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:91</id>
      <description>Gets the message from this message context</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>LogicalMessageContext</class-interface>
      <method name="getMessage" return-type="javax.xml.ws.LogicalMessage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:92</id>
      <description>Gets the scope of a property.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>MessageContext</class-interface>
      <method name="getScope" return-type="javax.xml.ws.handler.MessageContext.MessageContext.Scope">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:93</id>
      <description>Sets the scope of a property.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>MessageContext</class-interface>
      <method name="setScope" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.xml.ws.handler.MessageContext.MessageContext.Scope</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:94</id>
      <description />
      <package>javax.xml.ws.handler</package>
      <class-interface>MessageContext.Scope</class-interface>
      <method name="valueOf" return-type="javax.xml.ws.handler.MessageContext.MessageContext.Scope">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:95</id>
      <description />
      <package>javax.xml.ws.handler</package>
      <class-interface>MessageContext.Scope</class-interface>
      <method name="values" return-type="javax.xml.ws.handler.MessageContext.MessageContext.Scope[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:96</id>
      <description>Gets the URI identifying the binding used by the port being accessed.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>PortInfo</class-interface>
      <method name="getBindingID" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:97</id>
      <description>Gets the qualified name of the WSDL port being accessed.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>PortInfo</class-interface>
      <method name="getPortName" return-type="javax.xml.namespace.QName" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:98</id>
      <description>Gets the qualified name of the WSDL service name containing the port being accessed.</description>
      <package>javax.xml.ws.handler</package>
      <class-interface>PortInfo</class-interface>
      <method name="getServiceName" return-type="javax.xml.namespace.QName" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:99</id>
      <description>Gets the header blocks that can be processed by this Handler instance.</description>
      <package>javax.xml.ws.handler.soap</package>
      <class-interface>SOAPHandler</class-interface>
      <method name="getHeaders" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:100</id>
      <description>Gets headers that have a particular qualified name from the message in the message context. Note that a SOAP message can contain multiple headers with the same qualified name.</description>
      <package>javax.xml.ws.handler.soap</package>
      <class-interface>SOAPMessageContext</class-interface>
      <method name="getHeaders" return-type="java.lang.Object[]">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>JAXBContext</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:101</id>
      <description>Gets the SOAPMessage from this message context. Modifications to the returned SOAPMessage change the message in-place, there is no need to susequently call setMessage.</description>
      <package>javax.xml.ws.handler.soap</package>
      <class-interface>SOAPMessageContext</class-interface>
      <method name="getMessage" return-type="SOAPMessage" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:103</id>
      <description>Sets the SOAPMessage in this message context</description>
      <package>javax.xml.ws.handler.soap</package>
      <class-interface>SOAPMessageContext</class-interface>
      <method name="setMessage" return-type="void">
        <parameters>
          <parameter>SOAPMessage</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:104</id>
      <description>Gets the HTTP status code.</description>
      <package>javax.xml.ws.http</package>
      <class-interface>HTTPException</class-interface>
      <method name="getStatusCode" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:105</id>
      <description>Constructor for the HTTPException</description>
      <package>javax.xml.ws.http</package>
      <class-interface>HTTPException</class-interface>
      <method name="HTTPException" return-type="HTTPException">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:106</id>
      <description>Gets the SAAJ MessageFactory instance used by this SOAP binding.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>SOAPBinding</class-interface>
      <method name="getMessageFactory" return-type="MessageFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:107</id>
      <description>Gets the roles played by the SOAP binding instance.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>SOAPBinding</class-interface>
      <method name="getRoles" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:108</id>
      <description>Gets the SAAJ SOAPFactory instance used by this SOAP binding.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>SOAPBinding</class-interface>
      <method name="getSOAPFactory" return-type="SOAPFactory" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:109</id>
      <description>Returns true if the use of MTOM is enabled.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>SOAPBinding</class-interface>
      <method name="isMTOMEnabled" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:110</id>
      <description>Enables or disables use of MTOM.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>SOAPBinding</class-interface>
      <method name="setMTOMEnabled" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:111</id>
      <description>Sets the roles played by the SOAP binding instance.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>SOAPBinding</class-interface>
      <method name="setRoles" return-type="void">
        <parameters>
          <parameter>java.util.Set</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:112</id>
      <description>Gets the embedded SOAPFault instance.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>SOAPFaultException</class-interface>
      <method name="getFault" return-type="javax.xml.soap.javax.xml.soap.SOAPFault" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:113</id>
      <description>Constructor for SOAPFaultException</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>SOAPFaultException</class-interface>
      <method name="SOAPFaultException" return-type="SOAPFaultException">
        <parameters>
          <parameter>SOAPFault</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:114</id>
      <description>Creates and publishes an endpoint object with the specified address and implementation object.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createAndPublishEndpoint" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:115</id>
      <description>Creates an endpoint object with the provided binding and implementation object.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createEndpoint" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:116</id>
      <description>Creates a service delegate object.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createServiceDelegate" return-type="javax.xml.ws.spi.ServiceDelegate">
        <parameters>
          <parameter>java.net.URL</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:117</id>
      <description>Creates a new provider object. The algorithm used to locate the provider subclass to use consists of the following steps: If a resource with the name of META-INF/services/javax.xml.ws.spi.Provider exists, then its first line, if present, is used as the UTF-8 encoded name of the implementation class. If the $java.home/lib/jaxws.properties file exists and it is readable by the java.util.Properties.load(InputStream) method and it contains an entry whose key is javax.xml.ws.spi.Provider, then the value of that entry is used as the name of the implementation class. If a system property with the name javax.xml.ws.spi.Provider is defined, then its value is used as the name of the implementation class. Finally, a default implementation class name is used.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="provider" return-type="javax.xml.ws.spi.Provider" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:118</id>
      <description>Creates a new port for the service. Ports created in this way contain no WSDL port type information and can only be used for creating Dispatchinstances.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="addPort" return-type="void">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:120</id>
      <description>Returns the executor for this Serviceinstance. The executor is used for all asynchronous invocations that require callbacks.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getExecutor" return-type="java.util.concurrent.Executor" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:121</id>
      <description>Returns the configured handler resolver.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getHandlerResolver" return-type="javax.xml.ws.handler.HandlerResolver" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:122</id>
      <description>The getPort method returns a proxy. A service client uses this proxy to invoke operations on the target service endpoint. The serviceEndpointInterface specifies the service endpoint interface that is supported by the created dynamic proxy instance.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:123</id>
      <description>The getPort method returns a proxy. The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly. The returned proxy should not be reconfigured by the client.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:124</id>
      <description>Returns an Iterator for the list of QNames of service endpoints grouped by this service</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getPorts" return-type="java.util.Iterator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:125</id>
      <description>Gets the name of this service.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getServiceName" return-type="javax.xml.namespace.QName" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:126</id>
      <description>Gets the location of the WSDL document for this Service.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getWSDLDocumentLocation" return-type="java.net.URL" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:127</id>
      <description>Sets the executor for this Service instance. The executor is used for all asynchronous invocations that require callbacks.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="setExecutor" return-type="void">
        <parameters>
          <parameter>java.util.concurrent.Executor</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:128</id>
      <description>Sets the HandlerResolver for this Service instance. The handler resolver, if present, will be called once for each proxy or dispatch instance that is created, and the handler chain returned by the resolver will be set on the instance.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="setHandlerResolver" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.handler.HandlerResolver</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:129</id>
      <description>Array used for multiple web service reference declarations.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceRefs</class-interface>
      <method name="value" return-type="javax.xml.ws.WebServiceRef[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:133</id>
      <description>Get the URI for this binding instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Binding</class-interface>
      <method name="getBindingID" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:141</id>
      <description>Factory method to read an EndpointReference from the infoset contained in eprInfoset. This method delegates to the vendor specific implementation of the javax.xml.ws.spi.Provider#readEndpointReference method.</description>
      <package>javax.xml.ws</package>
      <class-interface>EndpointReference</class-interface>
      <method name="readFrom" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>javax.xml.transform.Source</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:142</id>
      <description>write this EndpointReference to the specified infoset format</description>
      <package>javax.xml.ws</package>
      <class-interface>EndpointReference</class-interface>
      <method name="writeTo" return-type="void">
        <parameters>
          <parameter>javax.xml.transform.Result</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:143</id>
      <description>Name of the exception class</description>
      <package>javax.xml.ws</package>
      <class-interface>FaultAction</class-interface>
      <method name="className" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:150</id>
      <description />
      <package>javax.xml.ws</package>
      <class-interface>RespectBindingFeature</class-interface>
      <method name="getID" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:155</id>
      <description>The getPort method returns a proxy. A service client uses this proxy to invoke operations on the target service endpoint. The serviceEndpointInterface specifies the service endpoint interface that is supported by the created dynamic proxy instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:156</id>
      <description>The getPort method returns a proxy. The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly. The returned proxy should not be reconfigured by the client.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:160</id>
      <description>Get the unique identifier for this WebServiceFeature.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceFeature</class-interface>
      <method name="getID" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:161</id>
      <description>Returns true if this feature is enabled.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceFeature</class-interface>
      <method name="isEnabled" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:166</id>
      <description />
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="getID" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:169</id>
      <description />
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOMFeature</class-interface>
      <method name="getID" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:170</id>
      <description>Gets the threshold value used to determine when binary data should be sent as an attachment.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOMFeature</class-interface>
      <method name="getThreshold" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:171</id>
      <description>Create an MTOMFeature. The instance created will be enabled.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOMFeature</class-interface>
      <method name="MTOMFeature" return-type="MTOMFeature" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:172</id>
      <description>Creates an MTOMFeature.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOMFeature</class-interface>
      <method name="MTOMFeature" return-type="MTOMFeature">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:173</id>
      <description>Creates an MTOMFeature. The instance created will be enabled.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOMFeature</class-interface>
      <method name="MTOMFeature" return-type="MTOMFeature">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:174</id>
      <description>Creates an MTOMFeature.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOMFeature</class-interface>
      <method name="MTOMFeature" return-type="MTOMFeature">
        <parameters>
          <parameter>boolean</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:178</id>
      <description>read an EndpointReference from the infoset contained in eprInfoset.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="readEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>javax.xml.transform.Source</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:181</id>
      <description>The getPort method returns a proxy. A service client uses this proxy to invoke operations on the target service endpoint. The serviceEndpointInterface specifies the service endpoint interface that is supported by the created dynamic proxy instance.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:183</id>
      <description>The getPort method returns a proxy. The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly. The returned proxy should not be reconfigured by the client.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:185</id>
      <description />
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReference</class-interface>
      <method name="writeTo" return-type="void">
        <parameters>
          <parameter>javax.xml.transform.Result</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:188</id>
      <description>Displays EPR infoset for debugging convenience.</description>
      <package>javax.xml.ws</package>
      <class-interface>EndpointReference</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:189</id>
      <description>Specifies if this feature is enabled or disabled.</description>
      <package>javax.xml.ws</package>
      <class-interface>RespectBinding</class-interface>
      <method name="enabled" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:192</id>
      <description>Specifies if this feature is enabled or disabled.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOM</class-interface>
      <method name="enabled" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:193</id>
      <description>Property for MTOM threshold value. When MTOM is enabled, binary data above this size in bytes will be XOP encoded or sent as attachment. The value of this property MUST always be &gt;= 0. Default value is 0.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOM</class-interface>
      <method name="threshold" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:195</id>
      <description>Factory method to create a W3CEndpointReference. This method can be used to create a W3CEndpointReference for any endpoint by specifying the address property along with any other desired properties. This method can also be used to create a W3CEndpointReference for an endpoint that is published by the same Java EE application. To do so the address property can be provided or this method can automatically determine the address of an endpoint that is published by the same Java EE application and is identified by the serviceName and portName propeties. If the address is null and the serviceName and portName do not identify an endpoint published by the same Java EE application, a javax.lang.IllegalStateException MUST be thrown.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createW3CEndpointReference" return-type="javax.xml.ws.wsaddressing.W3CEndpointReference">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.util.List</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:196</id>
      <description>The WebServiceFeature bean that is associated with the WebServiceFeature annotation</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>WebServiceFeatureAnnotation</class-interface>
      <method name="bean" return-type="java.lang.Class" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:197</id>
      <description>Unique identifier for the WebServiceFeature. This identifier MUST be unique across all implementations of JAX-WS.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>WebServiceFeatureAnnotation</class-interface>
      <method name="id" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:198</id>
      <description>Sets the address to the W3CEndpointReference instance's wsa:Address. The address MUST be set to a non-null value when building a W3CEndpointReference for a web service endpoint that is not published by the same Java EE application or when running on Java SE.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="address" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:201</id>
      <description>Adds the metadataElement to the W3CEndpointReference instance's wsa:Metadata element.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="metadata" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>org.w3c.dom.Element</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:202</id>
      <description>Adds the referenceParameter to the W3CEndpointReference instance wsa:ReferenceParameters element.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="referenceParameter" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>org.w3c.dom.Element</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:204</id>
      <description>Creates a new W3CEndpointReferenceBuilder instance.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="W3CEndpointReferenceBuilder" return-type="W3CEndpointReferenceBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:206</id>
      <description>Builds a W3CEndpointReference from the accumulated properties set on this W3CEndpointReferenceBuilder instance. This method can be used to create a W3CEndpointReference for any endpoint by specifying the address property along with any other desired properties. This method can also be used to create a W3CEndpointReference for an endpoint that is published by the same Java EE application. This method can automatically determine the address of an endpoint published by the same Java EE application that is identified by the serviceName and endpointName properties. If the address is null and the serviceName and endpointName do not identify an endpoint published by the same Java EE application, a java.lang.IllegalStateException MUST be thrown.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="build" return-type="javax.xml.ws.wsaddressing.W3CEndpointReference" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:22</id>
      <description>Creates and publishes an endpoint for the specified implementor object at the given address. The necessary server infrastructure will be created and configured by the JAX-WS implementation using some default configuration. In order to get more control over the server configuration, please use the javax.xml.ws.Endpoint#create(String,Object) and javax.xml.ws.Endpoint#publish(Object) methods instead.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="publish" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:27</id>
      <description>Stops publishing this endpoint. If the endpoint is not in a published state, this method has no effect.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="stop" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:40</id>
      <description>Element's local name.</description>
      <package>javax.xml.ws</package>
      <class-interface>RequestWrapper</class-interface>
      <method name="localName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:41</id>
      <description>Element's namespace name.</description>
      <package>javax.xml.ws</package>
      <class-interface>RequestWrapper</class-interface>
      <method name="targetNamespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:44</id>
      <description>Element's local name.</description>
      <package>javax.xml.ws</package>
      <class-interface>ResponseWrapper</class-interface>
      <method name="localName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:45</id>
      <description>Element's namespace name.</description>
      <package>javax.xml.ws</package>
      <class-interface>ResponseWrapper</class-interface>
      <method name="targetNamespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:47</id>
      <description>Creates a Service instance. The specified WSDL document location and service qualified name MUST uniquely identify a wsdl:service element.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="create" return-type="javax.xml.ws.Service">
        <parameters>
          <parameter>java.net.URL</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:48</id>
      <description>Creates a Service instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="create" return-type="javax.xml.ws.Service">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:64</id>
      <description>Element's local name.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebFault</class-interface>
      <method name="name" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:65</id>
      <description>Element's namespace name.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebFault</class-interface>
      <method name="targetNamespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:102</id>
      <description>Gets the SOAP actor roles associated with an execution of the handler chain. Note that SOAP actor roles apply to the SOAP node and are managed using javax.xml.ws.soap.SOAPBinding#setRoles and javax.xml.ws.soap.SOAPBinding#getRoles. Handler instances in the handler chain use this information about the SOAP actor roles to process the SOAP header blocks. Note that the SOAP actor roles are invariant during the processing of SOAP message through the handler chain.</description>
      <package>javax.xml.ws.handler.soap</package>
      <class-interface>SOAPMessageContext</class-interface>
      <method name="getRoles" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:119</id>
      <description>Creates a Dispatch instance for use with objects of the user's choosing.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:130</id>
      <description>Explicit value of the WS-Addressing Action message addressing property for the fault message(s) of the operation. Each exception that is mapped to a fault and requires an explicit WS-Addressing Action message addressing property, needs to be specified as a value in this property using FaultAction annotation.</description>
      <package>javax.xml.ws</package>
      <class-interface>Action</class-interface>
      <method name="fault" return-type="javax.xml.ws.FaultAction[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:131</id>
      <description>Explicit value of the WS-Addressing Action message addressing property for the input message of the operation.</description>
      <package>javax.xml.ws</package>
      <class-interface>Action</class-interface>
      <method name="input" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:132</id>
      <description>Explicit value of the WS-Addressing Action message addressing property for the output message of the operation.</description>
      <package>javax.xml.ws</package>
      <class-interface>Action</class-interface>
      <method name="output" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:137</id>
      <description>Returns the EndpointReference associated with this Endpoint instance. If the Binding for this bindingProvider is either SOAP1.1/HTTP or SOAP1.2/HTTP, then a W3CEndpointReference MUST be returned.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="getEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>org.w3c.dom.Element[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:138</id>
      <description>Returns the EndpointReference associated with this Endpoint instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="getEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>org.w3c.dom.Element[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:140</id>
      <description>The getPort method returns a proxy. If there are any reference parameters in the EndpointReference instance, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy. The EndpointReference instance specifies the endpoint that will be invoked by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly from the WSDL Metadata from this EndpointReference or from annotations on the serviceEndpointInterface. For this method to successfully return a proxy, WSDL metadata MUST be available and the EndpointReference instance MUST contain an implementation understood serviceName metadata. Because this port is not created from a Service object, handlers will not automatically be configured, and the HandlerResolver and Executor cannot be get or set for this port. The BindingProvider().getBinding().setHandlerChain() method can be used to manually configure handlers for this port.</description>
      <package>javax.xml.ws</package>
      <class-interface>EndpointReference</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:144</id>
      <description>Value of WS-Addressing Action message addressing property for the exception</description>
      <package>javax.xml.ws</package>
      <class-interface>FaultAction</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:151</id>
      <description>Creates an RespectBindingFeature. The instance created will be enabled.</description>
      <package>javax.xml.ws</package>
      <class-interface>RespectBindingFeature</class-interface>
      <method name="RespectBindingFeature" return-type="RespectBindingFeature" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:152</id>
      <description>Creates an RespectBindingFeature</description>
      <package>javax.xml.ws</package>
      <class-interface>RespectBindingFeature</class-interface>
      <method name="RespectBindingFeature" return-type="RespectBindingFeature">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:157</id>
      <description>The getPort method returns a proxy. The parameter endpointReference specifies the endpoint that will be invoked by the returned proxy. If there are any reference parameters in the endpointReference, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The endpointReference's address MUST be used for invocations on the endpoint. The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly from the WSDL associated with this Service instance or from the metadata from the endpointReference. If this Service instance has a WSDL and the endpointReference metadata also has a WSDL, then the WSDL from this instance MUST be used. If this Service instance does not have a WSDL and the endpointReference does have a WSDL, then the WSDL from the endpointReference MAY be used. The returned proxy should not be reconfigured by the client. If this Service instance has a known proxy port that matches the information contained in the WSDL, then that proxy is returned, otherwise a WebServiceException is thrown. Calling this method has the same behavior as the following port = service.getPort(portName, serviceEndpointInterface); where the portName is retrieved from the metadata of the endpointReference or from the serviceEndpointInterface and the WSDL associated with this Service instance.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.xml.ws.EndpointReference</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:158</id>
      <description>Returns the EndpointReference for this endpoint. If the Binding for this bindingProvider is either SOAP1.1/HTTP or SOAP1.2/HTTP, then a W3CEndpointReference MUST be returned.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceContext</class-interface>
      <method name="getEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>org.w3c.dom.Element[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:159</id>
      <description>Returns the EndpointReference associated with this endpoint.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebServiceContext</class-interface>
      <method name="getEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>org.w3c.dom.Element[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:177</id>
      <description>The getPort method returns a proxy. If there are any reference parameters in the endpointReference, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy. The parameter endpointReference specifies the endpoint that will be invoked by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly from the WSDL metadata of the serviceEndpointInterface and the EndpointReference. For this method to successfully return a proxy, WSDL metadata MUST be available and the endpointReference MUST contain an implementation understood serviceName metadata.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.xml.ws.EndpointReference</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:179</id>
      <description>Creates a Dispatch instance for use with objects of the user's choosing.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:180</id>
      <description>Creates a Dispatch instance for use with objects of the user's choosing. If there are any reference parameters in the endpointReference, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The endpointReference's address MUST be used for invocations on the endpoint. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the dispatch accordingly from the WSDL associated with this Service instance or from the metadata from the endpointReference. If this Service instance has a WSDL and the endpointReference also has a WSDL in its metadata, then the WSDL from this instance MUST be used. If this Service instance does not have a WSDL and the endpointReference does have a WSDL, then the WSDL from the endpointReference MAY be used. An implementation MUST be able to retrieve the portName from the endpointReference metadata. This method behaves the same as calling dispatch = service.createDispatch(portName, type, mode, features); where the portName is retrieved from the WSDL or EndpointReference metadata.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.ws.EndpointReference</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:182</id>
      <description>The getPort method returns a proxy. The parameter endpointReference specifies the endpoint that will be invoked by the returned proxy. If there are any reference parameters in the endpointReference, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The endpointReference's address MUST be used for invocations on the endpoint. The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly from the WSDL associated with this Service instance or from the metadata from the endpointReference. If this Service instance has a WSDL and the endpointReference metadata also has a WSDL, then the WSDL from this instance MUST be used. If this Service instance does not have a WSDL and the endpointReference does have a WSDL, then the WSDL from the endpointReference MAY be used. The returned proxy should not be reconfigured by the client. If this Service instance has a known proxy port that matches the information contained in the WSDL, then that proxy is returned, otherwise a WebServiceException is thrown. Calling this method has the same behavior as the following port = service.getPort(portName, serviceEndpointInterface); where the portName is retrieved from the metadata of the endpointReference or from the serviceEndpointInterface and the WSDL associated with this Service instance.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="getPort" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.xml.ws.EndpointReference</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:184</id>
      <description>Creates an EPR from infoset representation</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReference</class-interface>
      <method name="W3CEndpointReference" return-type="W3CEndpointReference">
        <parameters>
          <parameter>javax.xml.transform.Source</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:186</id>
      <description>Returns the EndpointReference associated with this BindingProvider instance. If the Binding for this bindingProvider is either SOAP1.1/HTTP or SOAP1.2/HTTP, then a W3CEndpointReference MUST be returned.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingProvider</class-interface>
      <method name="getEndpointReference" return-type="javax.xml.ws.EndpointReference" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:187</id>
      <description>Returns the EndpointReference associated with this BindingProvider instance. The instance returned will be of type clazz.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingProvider</class-interface>
      <method name="getEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- MODIFIED ASSERTIONS LISTED BELOW -->
    <!-- The original assertion is followed by the modified version -->
    <!-- of the assertion. Users must edit the file to verify -->
    <!-- that the modified assertion is correct. User should then -->
    <!-- delete the original assertion or use the style sheet -->
    <!-- that removes them automatically.  The original and modified -->
    <!-- assertions differ by their IDs, notice the original assertion -->
    <!-- now ends with "__OLD" -->
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:163__OLD</id>
      <description>Create an AddressingFeature. The instance created will be enabled.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="AddressingFeature" return-type="AddressingFeature" />
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:163</id>
      <description>Creates and configures an AddressingFeature with the use of addressing requirements. The created feature enables ws-addressing i.e. supports ws-addressing but doesn't require its use. It is also configured to accept all the response types.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="AddressingFeature" return-type="AddressingFeature" />
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:164__OLD</id>
      <description>Create an AddressingFeature</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="AddressingFeature" return-type="AddressingFeature">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:164</id>
      <description>Creates and configures an AddressingFeature with the use of addressing requirements. If enabled is true, it enables ws-addressing i.e. supports ws-addressing but doesn't require its use. It also configures to accept all the response types.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="AddressingFeature" return-type="AddressingFeature">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:165__OLD</id>
      <description>Create an AddressingFeature</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="AddressingFeature" return-type="AddressingFeature">
        <parameters>
          <parameter>boolean</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:165</id>
      <description>Creates and configures an AddressingFeature with the use of addressing requirements. If enabled and required are true, it enables ws-addressing and requires its use. It also configures to accept all the response types.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="AddressingFeature" return-type="AddressingFeature">
        <parameters>
          <parameter>boolean</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:190__OLD</id>
      <description>Specifies if this feature is enabled or disabled.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>Addressing</class-interface>
      <method name="enabled" return-type="boolean" />
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:190</id>
      <description>Specifies if this feature is enabled or disabled. If enabled, it means the endpoint supports WS-Addressing but does not require its use. Corresponding 3.1.1 Addressing Assertion must be generated in the generated WSDL.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>Addressing</class-interface>
      <method name="enabled" return-type="boolean" />
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:49__OLD</id>
      <description>Creates a Dispatch instance for use with objects of the user's choosing.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:49</id>
      <description>Creates a Dispatch instance for use with objects of the client's choosing.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:153__OLD</id>
      <description>Creates a Dispatch instance for use with objects of the user's choosing.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:153</id>
      <description>Creates a Dispatch instance for use with objects of the client's choosing.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:154__OLD</id>
      <description>Creates a Dispatch instance for use with objects of the user's choosing. If there are any reference parameters in the endpointReference, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The endpointReference's address MUST be used for invocations on the endpoint. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the dispatch accordingly from the WSDL associated with this Service instance or from the metadata from the endpointReference. If this Service instance has a WSDL and the endpointReference also has a WSDL in its metadata, then the WSDL from this instance MUST be used. If this Service instance does not have a WSDL and the endpointReference does have a WSDL, then the WSDL from the endpointReference MAY be used. An implementation MUST be able to retrieve the portName from the endpointReference metadata. This method behaves the same as calling dispatch = service.createDispatch(portName, type, mode, features); where the portName is retrieved from the WSDL or EndpointReference metadata.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.ws.EndpointReference</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:154</id>
      <description>Creates a Dispatch instance for use with objects of the client's choosing. If there are any reference parameters in the endpointReference, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The endpointReference's address MUST be used for invocations on the endpoint. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the dispatch accordingly from the WSDL associated with this Service instance or from the metadata from the endpointReference. If this Service instance has a WSDL and the endpointReference also has a WSDL in its metadata, then the WSDL from this instance MUST be used. If this Service instance does not have a WSDL and the endpointReference does have a WSDL, then the WSDL from the endpointReference MAY be used. An implementation MUST be able to retrieve the portName from the endpointReference metadata. This method behaves the same as calling dispatch = service.createDispatch(portName, type, mode, features); where the portName is retrieved from the WSDL or EndpointReference metadata.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.ws.EndpointReference</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:167__OLD</id>
      <description>Gets the boolean value used to determine if WS-Addressing headers MUST be present on incoming messages. This property only has meaning on the endpoint, and has no affect when used on the client.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="isRequired" return-type="boolean" />
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:167</id>
      <description>If addressing is enabled, this property determines whether the endpoint requires WS-Addressing. If required is true, WS-Addressing headers MUST be present on incoming and outgoing messages.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="isRequired" return-type="boolean" />
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:191__OLD</id>
      <description>Property to determine if WS-Addressing headers MUST be present on incoming messages.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>Addressing</class-interface>
      <method name="required" return-type="boolean" />
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:191</id>
      <description>If addressing is enabled, this property determines whether the endpoint requires WS-Addressing. If required is true, the endpoint requires WS-Addressing and WS-Addressing headers MUST be present on incoming messages. A corresponding 3.1.1 Addressing Assertion must be generated in the WSDL.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>Addressing</class-interface>
      <method name="required" return-type="boolean" />
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:200__OLD</id>
      <description>Sets the endpointName of the endpoint to be targeted by the returned W3CEndpointRefernce. This method can only be called after the #serviceName method has been called.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="endpointName" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:200</id>
      <description>Sets the endpointName as wsam:ServiceName/@EndpointName in the wsa:Metadata element. This method can only be called after the #serviceName method has been called. See 2.1 Referencing WSDL Metadata from an EPR for more details.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="endpointName" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:203__OLD</id>
      <description>Sets the serviceName of the endpoint to be targeted by the returned W3CEndpointReference.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="serviceName" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:203</id>
      <description>Sets the serviceName as the wsam:ServiceName element in the wsa:Metadata element. See 2.1 Referencing WSDL Metadata from an EPR for more details.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="serviceName" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** ORIGINAL ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:205__OLD</id>
      <description>Sets the wsdlDocumentLocation associated with the targeted W3CEndpointReference.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="wsdlDocumentLocation" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ****** MODIFIED ASSERTION ****** -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>JAXWS:JAVADOC:205</id>
      <description>Sets the wsdlDocumentLocation that will be referenced as wsa:Metadata/@wsdli:wsdlLocation. The namespace name for the wsdli:wsdlLocation's value can be taken from the WSDL itself. See 2.1 Referencing WSDL Metadata from an EPR for more details.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="wsdlDocumentLocation" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- REMOVED ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:134</id>
      <description>Returns the EndpointReference associated with this BindingProvider instance. If the Binding for this bindingProvider is either SOAP1.1/HTTP or SOAP1.2/HTTP, then a W3CEndpointReference MUST be returned. If the returned EndpointReference is a W3CEndpointReference it MUST contain the embedded WSDL in the wsa:Metadata element if there is an associated WSDL. It MUST also contain wsaw:ServiceName element and the wsaw:EndpointName attribute on the wsaw:ServiceName. The wsaw:InterfaceName MAY also be present. See WS-Addressing - WSDL 1.0.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingProvider</class-interface>
      <method name="getEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>org.w3c.dom.Element[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:135</id>
      <description>Returns the EndpointReference associated with this BindingProvider instance. The instance returned will be of type clazz. If the returned EndpointReference is a W3CEndpointReference it MUST contain the embedded WSDL in the wsa:Metadata element if there is an associated WSDL. It MUST also contain wsaw:ServiceName element and the wsaw:EndpointName attribute on the wsaw:ServiceName. The wsaw:InterfaceName MAY also be present. See WS-Addressing - WSDL 1.0.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingProvider</class-interface>
      <method name="getEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>org.w3c.dom.Element[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:136</id>
      <description>An array of Features to enable/disable on the specified binding. If not specified, features will be enabled/disabled based on their own rules. Refer to the documentation of the feature to determine when it will be automatically enabled. See the SOAPBinding for the definition of the standard feature identifiers.</description>
      <package>javax.xml.ws</package>
      <class-interface>BindingType</class-interface>
      <method name="features" return-type="javax.xml.ws.Feature[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:139</id>
      <description />
      <package>javax.xml.ws</package>
      <class-interface>EndpointReference</class-interface>
      <method name="EndpointReference" return-type="EndpointReference" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:145</id>
      <description>Specifies if the features is enabled or disabled.</description>
      <package>javax.xml.ws</package>
      <class-interface>Feature</class-interface>
      <method name="enabled" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:146</id>
      <description>Parameters for the specified feature. Each feature may take any number of parameters to customize the use of the feature.</description>
      <package>javax.xml.ws</package>
      <class-interface>Feature</class-interface>
      <method name="parameters" return-type="javax.xml.ws.FeatureParameter[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:147</id>
      <description>The unique identifier of feature to enable or disable;</description>
      <package>javax.xml.ws</package>
      <class-interface>Feature</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:148</id>
      <description>The name of the feature parameter;</description>
      <package>javax.xml.ws</package>
      <class-interface>FeatureParameter</class-interface>
      <method name="name" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:149</id>
      <description>The value of parameter.</description>
      <package>javax.xml.ws</package>
      <class-interface>FeatureParameter</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:162</id>
      <description />
      <package>javax.xml.ws</package>
      <class-interface>WebServiceFeature</class-interface>
      <method name="WebServiceFeature" return-type="WebServiceFeature" />
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:168</id>
      <description>Set the boolean value used to set the required attribute on wsaw:UsingAddressing element in the WSDL.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="setRequired" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:175</id>
      <description>Set the threshold value used to determine when binary data should be XOP encoded.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>MTOMFeature</class-interface>
      <method name="setThreshold" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:176</id>
      <description>Creates an endpoint object with the provided binding, features and implementation object.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createEndpoint" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String[]</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:194</id>
      <description>Create an EndpointReference for serviceName service and portName port from the WSDL wsdlDocumentLocation. The instance returned will be of type clazz and contain the referenceParameters reference parameters. This method delegates to the vendor specific implementation of the javax.xml.ws.spi.Provider#createEndpointReference(Class, javax.xml.namespace.QName, javax.xml.namespace.QName, javax.xml.transform.Source, org.w3c.dom.Element...) method.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createEndpointReference" return-type="javax.xml.ws.EndpointReference">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.transform.Source</parameter>
          <parameter>org.w3c.dom.Element[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:199</id>
      <description>Creates a W3CEndpointReference from the accumulated properties set on this W3CEndpointReferenceBuilder instance. This method can be used to create a W3CEndpointReference for any endpoint by specifying the address property along with any other desired properties. This method can also be used to create a W3CEndpointReference for an endpoint that is co-hosted within the same Java EE application. This method can automatically determine the address of the co-hosted endpoint that is identified by the serviceName and endpointName propeties. If the address is null and the serviceName and endpointName do not identify an endpoint co-hosted within the same Java EE application, a javax.lang.IllegalStateException MAY be thrown.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="createW3CEndpointReference" return-type="javax.xml.ws.wsaddressing.W3CEndpointReference" />
    </assertion>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- NEW ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:207</id>
      <description>Creates an endpoint with the specified implementor object and web service features. If there is a binding specified via a BindingType annotation then it MUST be used else a default of SOAP 1.1 / HTTP binding MUST be used. The newly created endpoint may be published by calling one of the javax.xml.ws.Endpoint#publish(String) and javax.xml.ws.Endpoint#publish(Object) methods.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="create" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:208</id>
      <description>Creates an endpoint with the specified binding type, implementor object, and web service features. The newly created endpoint may be published by calling one of the javax.xml.ws.Endpoint#publish(String) and javax.xml.ws.Endpoint#publish(Object) methods.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="create" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:209</id>
      <description>Creates and publishes an endpoint for the specified implementor object at the given address. The created endpoint is configured with the web service features. The necessary server infrastructure will be created and configured by the JAX-WS implementation using some default configuration. In order to get more control over the server configuration, please use the javax.xml.ws.Endpoint#create(String,Object) and javax.xml.ws.Endpoint#publish(Object) methods instead.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="publish" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:210</id>
      <description>Publishes this endpoint at the provided server context. A server context encapsulates the server infrastructure and addressing information for a particular transport. For a call to this method to succeed, the server context passed as an argument to it MUST be compatible with the endpoint's binding. This is meant for container developers to publish the the endpoints portably and not intended for the end developers.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="publish" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.spi.http.HttpContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:211</id>
      <description>By settng a EndpointContext, JAX-WS runtime knows about addresses of other endpoints in an application. If multiple endpoints share different ports of a WSDL, then the multiple port addresses are patched when the WSDL is accessed. This needs to be set before publishing the endpoints.</description>
      <package>javax.xml.ws</package>
      <class-interface>Endpoint</class-interface>
      <method name="setEndpointContext" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.EndpointContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:212</id>
      <description />
      <package>javax.xml.ws</package>
      <class-interface>EndpointContext</class-interface>
      <method name="EndpointContext" return-type="EndpointContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:213</id>
      <description>This gives list of endpoints in an application. For e.g in servlet container, a war file may contain multiple endpoints.</description>
      <package>javax.xml.ws</package>
      <class-interface>EndpointContext</class-interface>
      <method name="getEndpoints" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:214</id>
      <description>wsdl:part name for the wrapper</description>
      <package>javax.xml.ws</package>
      <class-interface>RequestWrapper</class-interface>
      <method name="partName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:215</id>
      <description>wsdl:part name for the wrapper</description>
      <package>javax.xml.ws</package>
      <class-interface>ResponseWrapper</class-interface>
      <method name="partName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:216</id>
      <description>Creates a Service instance. The created instance is configured with the web service features. The specified WSDL document location and service qualified name MUST uniquely identify a wsdl:service element.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="create" return-type="javax.xml.ws.Service">
        <parameters>
          <parameter>java.net.URL</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:217</id>
      <description>Creates a Service instance. The created instance is configured with the web service features.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="create" return-type="javax.xml.ws.Service">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:218</id>
      <description>Creates a Dispatch instance for use with JAXB generated objects.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.bind.JAXBContext</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:219</id>
      <description>Creates a Dispatch instance for use with JAXB generated objects.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.bind.JAXBContext</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:220</id>
      <description>Creates a Dispatch instance for use with JAXB generated objects. If there are any reference parameters in the endpointReference, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The endpointReference's address MUST be used for invocations on the endpoint. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the dispatch accordingly from the WSDL associated with this Service instance or from the metadata from the endpointReference. If this Service instance has a WSDL and the endpointReference also has a WSDL in its metadata, then the WSDL from this instance MUST be used. If this Service instance does not have a WSDL and the endpointReference does have a WSDL, then the WSDL from the endpointReference MAY be used. An implementation MUST be able to retrieve the portName from the endpointReference metadata. This method behavies the same as calling dispatch = service.createDispatch(portName, context, mode, features); where the portName is retrieved from the WSDL or endpointReference metadata.</description>
      <package>javax.xml.ws</package>
      <class-interface>Service</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.ws.EndpointReference</parameter>
          <parameter>javax.xml.bind.JAXBContext</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:221</id>
      <description>wsdl:Message's name. Default name is the exception's class name.</description>
      <package>javax.xml.ws</package>
      <class-interface>WebFault</class-interface>
      <method name="messageName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:222</id>
      <description>If addressing is enabled, this property determines whether endpoint requires the use of anonymous responses, or non-anonymous responses, or all. Responses#ALL supports all response types and this is the default value. Responses#ANONYMOUS requires the use of only anonymous responses. It will result into wsam:AnonymousResponses nested assertion as specified in 3.1.2 AnonymousResponses Assertion in the generated WSDL. Responses#NON_ANONYMOUS requires the use of only non-anonymous responses. It will result into wsam:NonAnonymousResponses nested assertion as specified in 3.1.3 NonAnonymousResponses Assertion in the generated WSDL.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>Addressing</class-interface>
      <method name="responses" return-type="javax.xml.ws.soap.AddressingFeature.AddressingFeature.Responses" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:223</id>
      <description>Creates and configures an AddressingFeature with the use of addressing requirements. If enabled and required are true, it enables ws-addressing and requires its use. Also, the response types can be configured using responses parameter.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="AddressingFeature" return-type="AddressingFeature">
        <parameters>
          <parameter>boolean</parameter>
          <parameter>boolean</parameter>
          <parameter>javax.xml.ws.soap.AddressingFeature.AddressingFeature.Responses</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:224</id>
      <description>If addressing is enabled, this property determines whether endpoint requires the use of anonymous responses, or non-anonymous responses, or all responses.</description>
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature</class-interface>
      <method name="getResponses" return-type="javax.xml.ws.soap.AddressingFeature.AddressingFeature.Responses" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:225</id>
      <description />
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature.Responses</class-interface>
      <method name="valueOf" return-type="javax.xml.ws.soap.AddressingFeature.AddressingFeature.Responses">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:226</id>
      <description />
      <package>javax.xml.ws.soap</package>
      <class-interface>AddressingFeature.Responses</class-interface>
      <method name="values" return-type="javax.xml.ws.soap.AddressingFeature.AddressingFeature.Responses[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:227</id>
      <description>JAX-WS runtimes calls this method to ask container to inject WebServiceContext on the endpoint instance. The WebServiceContext object uses thread-local information to return the correct information during the actual endpoint invocation regardless of how many threads are concurrently being used to serve requests.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="inject" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.WebServiceContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:228</id>
      <description>if the injection done by reflection API throws this exception</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="inject" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.WebServiceContext</parameter>
        </parameters>
        <throw>java.lang.IllegalAccessException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:229</id>
      <description>if the injection done by reflection API throws this exception</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="inject" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.WebServiceContext</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:230</id>
      <description>if the injection done by reflection API throws this exception</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="inject" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.WebServiceContext</parameter>
        </parameters>
        <throw>java.lang.reflect.InvocationTargetException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:231</id>
      <description>JAX-WS runtime calls this method to do the actual web service invocation on endpoint instance. The injected WebServiceContext.getMessageContext() gives the correct information for this invocation.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.reflect.Method</parameter>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:232</id>
      <description>if the invocation done by reflection API throws this exception</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.reflect.Method</parameter>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
        <throw>java.lang.IllegalAccessException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:233</id>
      <description>if the invocation done by reflection API throws this exception</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.reflect.Method</parameter>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:234</id>
      <description>if the invocation done by reflection API throws this exception</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="invoke" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.reflect.Method</parameter>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
        <throw>java.lang.reflect.InvocationTargetException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:235</id>
      <description />
      <package>javax.xml.ws.spi</package>
      <class-interface>Invoker</class-interface>
      <method name="Invoker" return-type="Invoker" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:236</id>
      <description>Creates and publishes an endpoint object with the specified address, implementation object and web service features. Provider implementations must override the default implementation.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createAndPublishEndpoint" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:237</id>
      <description>Creates an endpoint object with the provided binding, implementation object and web service features. Provider implementations must override the default implementation.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createEndpoint" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:238</id>
      <description>Creates an endpoint object with the provided binding, implementation class, invoker and web service features. Containers typically use this to create Endpoint objects. Provider implementations must override the default implementation.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createEndpoint" return-type="javax.xml.ws.Endpoint">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.spi.Invoker</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:239</id>
      <description>Creates a service delegate object.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createServiceDelegate" return-type="javax.xml.ws.spi.ServiceDelegate">
        <parameters>
          <parameter>java.net.URL</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:240</id>
      <description>Factory method to create a W3CEndpointReference. Using this method, a W3CEndpointReference instance can be created with extension elements, and attributes. Provider implementations must override the default implementation. This method can be used to create a W3CEndpointReference for any endpoint by specifying the address property along with any other desired properties. This method can also be used to create a W3CEndpointReference for an endpoint that is published by the same Java EE application. To do so the address property can be provided or this method can automatically determine the address of an endpoint that is published by the same Java EE application and is identified by the serviceName and portName propeties. If the address is null and the serviceName and portName do not identify an endpoint published by the same Java EE application, a javax.lang.IllegalStateException MUST be thrown.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>Provider</class-interface>
      <method name="createW3CEndpointReference" return-type="javax.xml.ws.wsaddressing.W3CEndpointReference">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.util.List</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.List</parameter>
          <parameter>java.util.List</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:241</id>
      <description>Creates a Dispatch instance for use with JAXB generated objects.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.bind.JAXBContext</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:242</id>
      <description>Creates a Dispatch instance for use with JAXB generated objects.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>javax.xml.bind.JAXBContext</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:243</id>
      <description>Creates a Dispatch instance for use with JAXB generated objects. If there are any reference parameters in the endpointReference, then those reference parameters MUST appear as SOAP headers, indicating them to be reference parameters, on all messages sent to the endpoint. The endpointReference's address MUST be used for invocations on the endpoint. In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the dispatch accordingly from the WSDL associated with this Service instance or from the metadata from the endpointReference. If this Service instance has a WSDL and the endpointReference also has a WSDL in its metadata, then the WSDL from this instance MUST be used. If this Service instance does not have a WSDL and the endpointReference does have a WSDL, then the WSDL from the endpointReference MAY be used. An implementation MUST be able to retrieve the portName from the endpointReference metadata. This method behavies the same as calling dispatch = service.createDispatch(portName, context, mode, features); where the portName is retrieved from the WSDL or endpointReference metadata.</description>
      <package>javax.xml.ws.spi</package>
      <class-interface>ServiceDelegate</class-interface>
      <method name="createDispatch" return-type="javax.xml.ws.Dispatch">
        <parameters>
          <parameter>javax.xml.ws.EndpointReference</parameter>
          <parameter>javax.xml.bind.JAXBContext</parameter>
          <parameter>javax.xml.ws.Service.Service.Mode</parameter>
          <parameter>javax.xml.ws.WebServiceFeature[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:244</id>
      <description>Returns an attribute value for container's configuration and other data that can be used by jax-ws runtime.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpContext</class-interface>
      <method name="getAttribute" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:245</id>
      <description>Returns all attribute names for container's configuration and other data that can be used by jax-ws runtime.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpContext</class-interface>
      <method name="getAttributeNames" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:246</id>
      <description>Returns the path for this context. This path uniquely identifies an endpoint inside an application and the path is relative to application's context path. Container should give this path based on how it matches request URIs to this HttpContext object. For servlet container, this is typically a url-pattern for an endpoint. Endpoint's address for this context can be computed as follows: HttpExchange exch = ...; String endpointAddress = exch.getScheme() + "://" + exch.getLocalAddress().getHostName() + ":" + exch.getLocalAddress().getPort() + exch.getContextPath() + getPath();</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpContext</class-interface>
      <method name="getPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:247</id>
      <description />
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpContext</class-interface>
      <method name="HttpContext" return-type="HttpContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:248</id>
      <description>JAX-WS runtime sets its handler during Endpoint#publish(HttpContext) to handle HTTP requests for this context. Container or its extensions use this handler to process the requests.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpContext</class-interface>
      <method name="setHandler" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.spi.http.HttpHandler</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:249</id>
      <description>Adds a response header with the given name and value. This method allows a response header to have multiple values. This is a convenience method to add a response header(instead of using the {link #getResponseHeaders()}).</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="addResponseHeader" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:250</id>
      <description>This must be called to end an exchange. Container takes care of closing request and response streams. This must be called so that the container can free or reuse underlying resources.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="close" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:251</id>
      <description>if any i/o error</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="close" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:252</id>
      <description>Returns an attribute that is associated with this HttpExchange. JAX-WS handlers and endpoints may then access the attribute via MessageContext. Servlet containers must expose MessageContext#SERVLET_CONTEXT, MessageContext#SERVLET_REQUEST, and MessageContext#SERVLET_RESPONSE as attributes. If the request has been received by the container using HTTPS, the following information must be exposed as attributes. These attributes are #REQUEST_CIPHER_SUITE, and #REQUEST_KEY_SIZE. If there is a SSL certificate associated with the request, it must be exposed using #REQUEST_X509CERTIFICATE</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getAttribute" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:253</id>
      <description>Gives all the attribute names that are associated with this HttpExchange.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getAttributeNames" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:254</id>
      <description>Returns the context path of all the endpoints in an application. This path is the portion of the request URI that indicates the context of the request. The context path always comes first in a request URI. The path starts with a "/" character but does not end with a "/" character. If this method returns "", the request is for default context. The container does not decode this string. Context path is used in computing the endpoint address. See HttpContext#getPath</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getContextPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:255</id>
      <description>Returns a HttpContext for this exchange. Container matches the request with the associated Endpoint's HttpContext</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getHttpContext" return-type="javax.xml.ws.spi.http.HttpContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:256</id>
      <description>Returns the unresolved local address on which the request was received.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getLocalAddress" return-type="java.net.InetSocketAddress" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:257</id>
      <description>Returns the extra path information that follows the web service path but precedes the query string in the request URI and will start with a "/" character. This can be used for MessageContext#PATH_INFO</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getPathInfo" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:258</id>
      <description>Returns the protocol string from the request in the form protocol/majorVersion.minorVersion. For example, "HTTP/1.1"</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getProtocol" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:259</id>
      <description>Returns the query string that is contained in the request URI after the path. This can be used for MessageContext#QUERY_STRING</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getQueryString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:260</id>
      <description>Returns the unresolved address of the remote entity invoking this request.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getRemoteAddress" return-type="java.net.InetSocketAddress" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:261</id>
      <description>Returns a stream from which the request body can be read. Multiple calls to this method will return the same stream.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getRequestBody" return-type="java.io.InputStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:262</id>
      <description>if any i/o error during request processing</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getRequestBody" return-type="java.io.InputStream">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:263</id>
      <description>Returns the value of the specified request header. If the request did not include a header of the specified name, this method returns null. If there are multiple headers with the same name, this method returns the first header in the request. The header name is case-insensitive. This is a convienence method to get a header (instead of using the #getRequestHeaders).</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getRequestHeader" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:264</id>
      <description>Returns an immutable Map containing the HTTP headers that were included with this request. The keys in this Map will be the header names, while the values will be a List of Strings containing each value that was included (either for a header that was listed several times, or one that accepts a comma-delimited list of values on a single line). In either of these cases, the values for the header name will be presented in the order that they were included in the request. The keys in Map are case-insensitive.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getRequestHeaders" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:265</id>
      <description>Get the HTTP request method</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getRequestMethod" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:266</id>
      <description>Returns the part of the request's URI from the protocol name up to the query string in the first line of the HTTP request. Container doesn't decode this string.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getRequestURI" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:267</id>
      <description>Returns a stream to which the response body must be written. #setStatus) must be called prior to calling this method. Multiple calls to this method (for the same exchange) will return the same stream.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getResponseBody" return-type="java.io.OutputStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:268</id>
      <description>if any i/o error during response processing</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getResponseBody" return-type="java.io.OutputStream">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:269</id>
      <description>Returns a mutable Map into which the HTTP response headers can be stored and which will be transmitted as part of this response. The keys in the Map will be the header names, while the values must be a List of Strings containing each value that should be included multiple times (in the order that they should be included). The keys in Map are case-insensitive.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getResponseHeaders" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:270</id>
      <description>Returns the name of the scheme used to make this request, for example: http, or https.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getScheme" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:271</id>
      <description>Returns the Principal that represents the authenticated user for this HttpExchange.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="getUserPrincipal" return-type="java.security.Principal" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:272</id>
      <description />
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="HttpExchange" return-type="HttpExchange" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:273</id>
      <description>Indicates whether an authenticated user is included in the specified logical "role".</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="isUserInRole" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:274</id>
      <description>Sets the HTTP status code for the response. This method must be called prior to calling #getResponseBody.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpExchange</class-interface>
      <method name="setStatus" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:275</id>
      <description>Handles a given request and generates an appropriate response. See HttpExchange for a description of the steps involved in handling an exchange. Container invokes this method when it receives an incoming request.</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpHandler</class-interface>
      <method name="handle" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.spi.http.HttpExchange</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:276</id>
      <description>when an I/O error happens during request handling</description>
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpHandler</class-interface>
      <method name="handle" return-type="void">
        <parameters>
          <parameter>javax.xml.ws.spi.http.HttpExchange</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:277</id>
      <description />
      <package>javax.xml.ws.spi.http</package>
      <class-interface>HttpHandler</class-interface>
      <method name="HttpHandler" return-type="HttpHandler" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:278</id>
      <description>Adds an extension attribute to the W3CEndpointReference instance's wsa:EndpointReference element.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="attribute" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:279</id>
      <description>Adds an extension element to the W3CEndpointReference instance's wsa:EndpointReference element.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="element" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>org.w3c.dom.Element</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <modified />
      <id>JAXWS:JAVADOC:280</id>
      <description>Sets the interfaceName as the wsam:InterfaceName element in the wsa:Metadata element. See 2.1 Referencing WSDL Metadata from an EPR for more details.</description>
      <package>javax.xml.ws.wsaddressing</package>
      <class-interface>W3CEndpointReferenceBuilder</class-interface>
      <method name="interfaceName" return-type="javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder">
        <parameters>
          <parameter>javax.xml.namespace.QName</parameter>
        </parameters>
      </method>
    </assertion>
  </assertions>
</javadoc>


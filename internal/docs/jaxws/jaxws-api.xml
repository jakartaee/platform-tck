<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
    <package name="javax.xml.ws">
        <classes>
            <class modifiers="public final" name="WebServicePermission">
                <extends name="BasicPermission" package="java.security"/>
                <superclasses>
                    <superclass name="Permission" package="java.security"/>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <comment>
                    <lead>This class defines web service permissions.</lead>
                    <detail>    Web service Permissions are identified by name (also referred to as  a &quot;target name&quot;) alone. There are no actions associated  with them.    The following permission target name is defined:        publishEndpoint      The publishEndpoint permission allows publishing a  web service endpoint using the publish methods  defined by the javax.xml.ws.Endpoint class.</detail>
                    <see class="Endpoint" package="javax.xml.ws"/>
                    <see class="BasicPermission" package="java.security"/>
                    <see class="Permission" package="java.security"/>
                    <see class="Permissions" package="java.security"/>
                    <see class="SecurityManager" package="java.lang"/>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates a new permission with the specified name.</lead>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>the name of the WebServicePermission</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates a new permission with the specified name and actions.</lead>
                            <detail>   The actions parameter is currently unused and  it should be null.</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>the name of the WebServicePermission</comment>
                            </parameter>
                            <parameter name="actions" package="java.lang" type="String">
                                <comment>should be null</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
            </class>
            <class modifiers="public abstract" name="WebServiceFeature">
                <extends name="Object" package="java.lang"/>
                <since>2.1</since>
                <comment>
                    <lead>A WebServiceFeature is used to represent a feature that can be   enabled or disabled for a web service.</lead>
                    <detail>      The JAX-WS specification will define some standard features and  JAX-WS implementors are free to define additional features if  necessary.  Vendor specific features may not be portable so   caution should be used when using them. Each Feature definition   MUST define a public static final String ID   that can be used in the Feature annotation to refer   to the feature. This ID MUST be unique across all features  of all vendors.  When defining a vendor specific feature ID,  use a vendor specific namespace in the ID string.</detail>
                    <see class="RespectBindingFeature" package="javax.xml.ws"/>
                    <see class="AddressingFeature" package="javax.xml.ws.soap"/>
                    <see class="MTOMFeature" package="javax.xml.ws.soap"/>
                </comment>
                <fields>
                    <field modifiers="protected" name="enabled" type="boolean">
                        <comment>
                            <lead>Specifies if the feature is enabled or disabled</lead>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="protected">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public abstract" name="getID">
                        <comment>
                            <lead>Get the unique identifier for this WebServiceFeature.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the unique identifier for this feature.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="isEnabled">
                        <comment>
                            <lead>Returns true if this feature is enabled.</lead>
                        </comment>
                        <returns type="boolean">
                            <comment>true if and only if the feature is enabled .</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public" name="WebServiceException">
                <extends name="RuntimeException" package="java.lang"/>
                <superclasses>
                    <superclass name="Exception" package="java.lang"/>
                    <superclass name="Throwable" package="java.lang"/>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The WebServiceException class is the base    exception class for all JAX-WS API runtime exceptions.</lead>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new exception with null as its    detail message.</lead>
                            <detail> The cause is not initialized.</detail>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new exception with the specified detail    message.</lead>
                            <detail>  The cause is not initialized.</detail>
                        </comment>
                        <parameters>
                            <parameter name="message" package="java.lang" type="String">
                                <comment>The detail message which is later                   retrieved using the getMessage method</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new exception with the specified detail    message and cause.</lead>
                        </comment>
                        <parameters>
                            <parameter name="message" package="java.lang" type="String">
                                <comment>The detail message which is later retrieved                  using the getMessage method</comment>
                            </parameter>
                            <parameter name="cause" package="java.lang" type="Throwable">
                                <comment>The cause which is saved for the later                  retrieval throw by the getCause method</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new WebServiceException with the specified cause   and a detail message of (cause==null ? null :    cause.toString()) (which typically contains the    class and detail message of cause).</lead>
                        </comment>
                        <parameters>
                            <parameter name="cause" package="java.lang" type="Throwable">
                                <comment>The cause which is saved for the later                  retrieval throw by the getCause method.                  (A null value is permitted, and                  indicates that the cause is nonexistent or                unknown.)</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
            </class>
            <class modifiers="public" name="Service">
                <extends name="Object" package="java.lang"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Service objects provide the client view of a Web service.</lead>
                    <see class="Dispatch" package="javax.xml.ws"/>
                    <detail>  Service acts as a factory of the following:    Proxies for a target service endpoint.  Instances of javax.xml.ws.Dispatch for      dynamic message-oriented invocation of a remote      operation.     The ports available on a service can be enumerated using the  getPorts method. Alternatively, you can pass a  service endpoint interface to the unary getPort method  and let the runtime select a compatible port.   Handler chains for all the objects created by a Service  can be set by means of a HandlerResolver.   An Executor may be set on the service in order  to gain better control over the threads used to dispatch asynchronous  callbacks. For instance, thread pooling with certain parameters  can be enabled by creating a ThreadPoolExecutor and  registering it with the service.</detail>
                    <see class="Provider" package="javax.xml.ws.spi"/>
                    <see class="HandlerResolver" package="javax.xml.ws.handler"/>
                    <see class="Executor" package="java.util.concurrent"/>
                </comment>
                <constructors>
                    <constructor modifiers="protected">
                        <comment/>
                        <parameters>
                            <parameter name="wsdlDocumentLocation" package="java.net" type="URL"/>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName"/>
                        </parameters>
                    </constructor>
                    <constructor modifiers="protected">
                        <comment/>
                        <parameters>
                            <parameter name="wsdlDocumentLocation" package="java.net" type="URL"/>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName"/>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature"/>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getPort">
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> A service client  uses this proxy to invoke operations on the target  service endpoint. The serviceEndpointInterface  specifies the service endpoint interface that is supported by  the created dynamic proxy instance.</detail>
                            <see class="Proxy" package="java.lang.reflect"/>
                            <see class="InvocationHandler" package="java.lang.reflect"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name of the service endpoint in                   the WSDL service description.</comment>
                            </parameter>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface                   supported by the dynamic proxy instance.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object Proxy instance that                 supports the specified service endpoint                 interface.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getPort">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> A service client  uses this proxy to invoke operations on the target  service endpoint. The serviceEndpointInterface  specifies the service endpoint interface that is supported by  the created dynamic proxy instance.</detail>
                            <see class="Proxy" package="java.lang.reflect"/>
                            <see class="InvocationHandler" package="java.lang.reflect"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name of the service endpoint in                   the WSDL service description.</comment>
                            </parameter>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface                   supported by the dynamic proxy instance.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object Proxy instance that                 supports the specified service endpoint                 interface.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getPort">
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> The parameter  serviceEndpointInterface specifies the service  endpoint interface that is supported by the returned proxy.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the proxy accordingly.  The returned proxy should not be reconfigured by the client.</detail>
                        </comment>
                        <parameters>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object instance that supports the                   specified service endpoint interface.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getPort">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> The parameter  serviceEndpointInterface specifies the service  endpoint interface that is supported by the returned proxy.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the proxy accordingly.  The returned proxy should not be reconfigured by the client.</detail>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object instance that supports the                   specified service endpoint interface.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getPort">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail>  The parameter endpointReference specifies the  endpoint that will be invoked by the returned proxy.  If there  are any reference parameters in the   endpointReference, then those reference  parameters MUST appear as SOAP headers, indicating them to be  reference parameters, on all messages sent to the endpoint.  The endpointReference&apos;s address MUST be used  for invocations on the endpoint.  The parameter serviceEndpointInterface specifies  the service endpoint interface that is supported by the   returned proxy.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the proxy accordingly from  the WSDL associated with this Service instance or  from the metadata from the endpointReference.  If this Service instance has a WSDL and   the endpointReference metadata   also has a WSDL, then the WSDL from this instance MUST be used.  If this Service instance does not have a WSDL and  the endpointReference does have a WSDL, then the   WSDL from the endpointReference MAY be used.  The returned proxy should not be reconfigured by the client.  If this Service instance has a known proxy   port that matches the information contained in   the WSDL,  then that proxy is returned, otherwise a WebServiceException  is thrown.    Calling this method has the same behavior as the following    port = service.getPort(portName, serviceEndpointInterface);    where the portName is retrieved from the   metadata of the endpointReference or from the   serviceEndpointInterface and the WSDL  associated with this Service instance.</detail>
                        </comment>
                        <parameters>
                            <parameter name="endpointReference" package="javax.xml.ws" type="EndpointReference">
                                <comment>The EndpointReference  for the target service endpoint that will be invoked by the  returned proxy.</comment>
                            </parameter>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object Proxy instance that supports the                   specified service endpoint interface.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="addPort">
                        <comment>
                            <lead>Creates a new port for the service.</lead>
                            <detail> Ports created in this way contain  no WSDL port type information and can only be used for creating  Dispatchinstances.</detail>
                            <see class="SOAPBinding" member="SOAP11HTTP_BINDING" package="javax.xml.ws.soap"/>
                            <see class="SOAPBinding" member="SOAP12HTTP_BINDING" package="javax.xml.ws.soap"/>
                            <see class="HTTPBinding" member="HTTP_BINDING" package="javax.xml.ws.http"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint.</comment>
                            </parameter>
                            <parameter name="bindingId" package="java.lang" type="String">
                                <comment>A String identifier of a binding.</comment>
                            </parameter>
                            <parameter name="endpointAddress" package="java.lang" type="String">
                                <comment>Address of the target service endpoint as a URI.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="createDispatch">
                        <comment>
                            <lead>Creates a Dispatch instance for use with objects of  the client&apos;s choosing.</lead>
                            <see class="Source" package="javax.xml.transform"/>
                            <see class="SOAPMessage" package="javax.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="type" package="java.lang" type="Class">
                                <comment>The class of object used for messages or message  payloads. Implementations are required to support  javax.xml.transform.Source, javax.xml.soap.SOAPMessage  and javax.activation.DataSource, depending on  the binding in use.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the client will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the client will work with  SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE  when type is SOAPMessage.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createDispatch">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Creates a Dispatch instance for use with objects of  the client&apos;s choosing.</lead>
                            <see class="Source" package="javax.xml.transform"/>
                            <see class="SOAPMessage" package="javax.xml.soap"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="type" package="java.lang" type="Class">
                                <comment>The class of object used for messages or message  payloads. Implementations are required to support  javax.xml.transform.Source and javax.xml.soap.SOAPMessage.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the client will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the client will work with  SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE  when type is SOAPMessage.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createDispatch">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Creates a Dispatch instance for use with objects of  the client&apos;s choosing.</lead>
                            <detail> If there  are any reference parameters in the   endpointReference, then those reference  parameters MUST appear as SOAP headers, indicating them to be  reference parameters, on all messages sent to the endpoint.  The endpointReference&apos;s address MUST be used  for invocations on the endpoint.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the dispatch accordingly from  the WSDL associated with this Service instance or  from the metadata from the endpointReference.  If this Service instance has a WSDL and   the endpointReference  also has a WSDL in its metadata, then the WSDL from this instance MUST be used.  If this Service instance does not have a WSDL and  the endpointReference does have a WSDL, then the   WSDL from the endpointReference MAY be used.       An implementation MUST be able to retrieve the portName from the  endpointReference metadata.    This method behaves the same as calling    dispatch = service.createDispatch(portName, type, mode, features);    where the portName is retrieved from the   WSDL or EndpointReference metadata.</detail>
                            <see class="Source" package="javax.xml.transform"/>
                            <see class="SOAPMessage" package="javax.xml.soap"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="endpointReference" package="javax.xml.ws" type="EndpointReference">
                                <comment>The EndpointReference  for the target service endpoint that will be invoked by the  returned Dispatch object.</comment>
                            </parameter>
                            <parameter name="type" package="java.lang" type="Class">
                                <comment>The class of object used to messages or message  payloads. Implementations are required to support  javax.xml.transform.Source and javax.xml.soap.SOAPMessage.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the client will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the client will work with  SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE  when type is SOAPMessage.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>An array of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createDispatch">
                        <comment>
                            <lead>Creates a Dispatch instance for use with JAXB  generated objects.</lead>
                            <see class="JAXBContext" package="javax.xml.bind"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXB context used to marshall and unmarshall  messages or message payloads.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the client will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the client will work with  SOAP messages or the contents of a SOAP body.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createDispatch">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Creates a Dispatch instance for use with JAXB  generated objects.</lead>
                            <see class="JAXBContext" package="javax.xml.bind"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXB context used to marshall and unmarshall  messages or message payloads.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the client will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the client will work with  SOAP messages or the contents of a SOAP body.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createDispatch">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Creates a Dispatch instance for use with JAXB  generated objects.</lead>
                            <detail> If there  are any reference parameters in the   endpointReference, then those reference  parameters MUST appear as SOAP headers, indicating them to be  reference parameters, on all messages sent to the endpoint.  The endpointReference&apos;s address MUST be used  for invocations on the endpoint.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the dispatch accordingly from  the WSDL associated with this Service instance or  from the metadata from the endpointReference.  If this Service instance has a WSDL and   the endpointReference  also has a WSDL in its metadata, then the WSDL from this instance  MUST be used.  If this Service instance does not have a WSDL and  the endpointReference does have a WSDL, then the   WSDL from the endpointReference MAY be used.        An implementation MUST be able to retrieve the portName from the  endpointReference metadata.     This method behavies the same as calling    dispatch = service.createDispatch(portName, context, mode, features);    where the portName is retrieved from the   WSDL or endpointReference metadata.</detail>
                            <see class="JAXBContext" package="javax.xml.bind"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="endpointReference" package="javax.xml.ws" type="EndpointReference">
                                <comment>The EndpointReference  for the target service endpoint that will be invoked by the  returned Dispatch object.</comment>
                            </parameter>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXB context used to marshall and unmarshall  messages or message payloads.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the client will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the client will work with  SOAP messages or the contents of a SOAP body.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>An array of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getServiceName">
                        <comment>
                            <lead>Gets the name of this service.</lead>
                        </comment>
                        <returns package="javax.xml.namespace" type="QName">
                            <comment>Qualified name of this service</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getPorts">
                        <comment>
                            <lead>Returns an Iterator for the list of  QNames of service endpoints grouped by this  service</lead>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>Returns java.util.Iterator with elements          of type javax.xml.namespace.QName.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getWSDLDocumentLocation">
                        <comment>
                            <lead>Gets the location of the WSDL document for this Service.</lead>
                        </comment>
                        <returns package="java.net" type="URL">
                            <comment>URL for the location of the WSDL document for          this service.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getHandlerResolver">
                        <comment>
                            <lead>Returns the configured handler resolver.</lead>
                        </comment>
                        <returns package="javax.xml.ws.handler" type="HandlerResolver">
                            <comment>HandlerResolver The HandlerResolver being          used by this Service instance, or null          if there isn&apos;t one.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setHandlerResolver">
                        <comment>
                            <lead>Sets the HandlerResolver for this Service  instance.</lead>
                            <detail>    The handler resolver, if present, will be called once for each  proxy or dispatch instance that is created, and the handler chain  returned by the resolver will be set on the instance.</detail>
                            <see class="HandlerResolver" package="javax.xml.ws.handler"/>
                        </comment>
                        <parameters>
                            <parameter name="handlerResolver" package="javax.xml.ws.handler" type="HandlerResolver">
                                <comment>The HandlerResolver to use         for all subsequently created proxy/dispatch objects.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getExecutor">
                        <comment>
                            <lead>Returns the executor for this Serviceinstance.</lead>
                            <detail>   The executor is used for all asynchronous invocations that  require callbacks.</detail>
                            <see class="Executor" package="java.util.concurrent"/>
                        </comment>
                        <returns package="java.util.concurrent" type="Executor">
                            <comment>The java.util.concurrent.Executor to be          used to invoke a callback.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setExecutor">
                        <comment>
                            <lead>Sets the executor for this Service instance.</lead>
                            <detail>   The executor is used for all asynchronous invocations that  require callbacks.</detail>
                            <see class="Executor" package="java.util.concurrent"/>
                        </comment>
                        <parameters>
                            <parameter name="executor" package="java.util.concurrent" type="Executor">
                                <comment>The java.util.concurrent.Executor         to be used to invoke a callback.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public static" name="create">
                        <comment>
                            <lead>Creates a Service instance.</lead>
                            <detail>   The specified WSDL document location and service qualified name MUST  uniquely identify a wsdl:service element.</detail>
                        </comment>
                        <parameters>
                            <parameter name="wsdlDocumentLocation" package="java.net" type="URL">
                                <comment>URL for the WSDL document location                              for the service</comment>
                            </parameter>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>QName for the service</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Service"/>
                    </method>
                    <method modifiers="public static" name="create">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>Creates a Service instance.</lead>
                            <detail>   The specified WSDL document location and service qualified name MUST  uniquely identify a wsdl:service element.</detail>
                        </comment>
                        <parameters>
                            <parameter name="wsdlDocumentLocation" package="java.net" type="URL">
                                <comment>URL for the WSDL document location                              for the service</comment>
                            </parameter>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>QName for the service</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>Web Service features that must be configured on         the service. If the provider doesn&apos;t understand a feature,         it must throw a WebServiceException.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Service"/>
                    </method>
                    <method modifiers="public static" name="create">
                        <comment>
                            <lead>Creates a Service instance.</lead>
                        </comment>
                        <parameters>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>QName for the service</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Service"/>
                    </method>
                    <method modifiers="public static" name="create">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>Creates a Service instance.</lead>
                        </comment>
                        <parameters>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>QName for the service</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>Web Service features that must be configured on         the service. If the provider doesn&apos;t understand a feature,         it must throw a WebServiceException.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Service"/>
                    </method>
                </methods>
            </class>
            <class modifiers="public static final" name="Service.Mode">
                <extends name="Enum" package="java.lang"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <comment>
                    <lead>The orientation of a dynamic client or service.</lead>
                    <detail> MESSAGE provides  access to entire protocol message, PAYLOAD to protocol message  payload only.</detail>
                </comment>
                <fields>
                    <field modifiers="public static final" name="MESSAGE" package="javax.xml.ws.Service" type="Service.Mode">
                        <comment/>
                    </field>
                    <field modifiers="public static final" name="PAYLOAD" package="javax.xml.ws.Service" type="Service.Mode">
                        <comment/>
                    </field>
                </fields>
                <methods>
                    <method modifiers="public static" name="values">
                        <comment/>
                        <returns dimension="[]" package="javax.xml.ws.Service" type="Service.Mode"/>
                    </method>
                    <method modifiers="public static" name="valueOf">
                        <comment/>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String"/>
                        </parameters>
                        <returns package="javax.xml.ws.Service" type="Service.Mode"/>
                    </method>
                </methods>
            </class>
            <class modifiers="public final" name="RespectBindingFeature">
                <extends name="WebServiceFeature" package="javax.xml.ws"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>This feature clarifies the use of the wsdl:binding  in a JAX-WS runtime.</lead>
                    <see class="WebServiceFeature" package="javax.xml.ws"/>
                    <see class="WebServiceException" package="javax.xml.ws"/>
                    <see class="WebServiceException" package="javax.xml.ws"/>
                    <detail>    This feature is only useful with web services that have an  associated WSDL. Enabling this feature requires that a JAX-WS  implementation inspect the wsdl:binding for an  endpoint at runtime to make sure that all wsdl:extensions  that have the required attribute set to true  are understood and are being used.    The following describes the affects of this feature with respect  to be enabled or disabled:      ENABLED: In this Mode, a JAX-WS runtime MUST assure that all   required wsdl:binding extensions are either understood     and used by the runtime, or explicitly disabled by the web service   application. A web service can disable a particular   extension if there is a corresponding WebServiceFeature or annotation.   Similarly, a web service client can disable   particular extension using the corresponding WebServiceFeature while   creating a proxy or Dispatch instance.   The runtime MUST also make sure that binding of    SEI parameters/return values respect the wsdl:binding.   With this feature enabled, if a required (wsdl:required=&quot;true&quot;)   wsdl:binding extension is in the WSDL and it is not   supported by a JAX-WS runtime and it has not    been explicitly turned off by the web service developer, then   that JAX-WS runtime MUST behave appropriately based on whether it is    on the client or server:        Client: runtime MUST throw a    WebServiceException no sooner than when one of the methods   above is invoked but no later than the first invocation of an endpoint   operation.      Server: throw a WebServiceException and the endpoint MUST fail to deploy       DISABLED: In this Mode, an implementation may choose whether   to inspect the wsdl:binding or not and to what degree   the wsdl:binding will be inspected.  For example,   one implementation may choose to behave as if this feature is enabled,   another implementation may only choose to verify the SEI&apos;s    parameter/return type bindings.  </detail>
                    <see class="AddressingFeature" package="javax.xml.ws.soap"/>
                </comment>
                <fields>
                    <field modifiers="public static final" name="ID" package="java.lang" type="String">
                        <comment>
                            <lead>Constant value identifying the RespectBindingFeature</lead>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates an RespectBindingFeature.</lead>
                            <detail>  The instance created will be enabled.</detail>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates an RespectBindingFeature</lead>
                        </comment>
                        <parameters>
                            <parameter name="enabled" type="boolean">
                                <comment>specifies whether this feature should  be enabled or not.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getID">
                        <comment>
                            <lead/>
                            <detail/>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </class>
            <class modifiers="public" name="ProtocolException">
                <extends name="WebServiceException" package="javax.xml.ws"/>
                <superclasses>
                    <superclass name="RuntimeException" package="java.lang"/>
                    <superclass name="Exception" package="java.lang"/>
                    <superclass name="Throwable" package="java.lang"/>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The ProtocolException class is a   base class for exceptions related to a specific protocol binding.</lead>
                    <detail> Subclasses   are used to communicate protocol level fault information to clients and may   be used on the server to control the protocol specific fault representation.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new protocol exception with null as its detail message.</lead>
                            <detail> The  cause is not initialized, and may subsequently be initialized by a call  to Throwable.initCause(java.lang.Throwable).</detail>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new protocol exception with the specified detail message.</lead>
                            <detail>  The cause is not initialized, and may subsequently be initialized by a  call to Throwable.initCause(java.lang.Throwable).</detail>
                        </comment>
                        <parameters>
                            <parameter name="message" package="java.lang" type="String">
                                <comment>the detail message. The detail message is saved for later    retrieval by the Throwable.getMessage() method.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new runtime exception with the specified detail message and  cause.</lead>
                            <detail>   Note that the detail message associated with  cause is not automatically  incorporated in  this runtime exception&apos;s detail message.</detail>
                        </comment>
                        <parameters>
                            <parameter name="message" package="java.lang" type="String">
                                <comment>the detail message (which is saved for later retrieval  by    the Throwable.getMessage() method).</comment>
                            </parameter>
                            <parameter name="cause" package="java.lang" type="Throwable">
                                <comment>the cause (which is saved for later retrieval by the  Throwable.getCause() method). (A null value is  permitted, and indicates  that the cause is nonexistent or  unknown.)</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructs a new runtime exception with the specified cause and a  detail  message of (cause==null ? null : cause.toString())  (which typically  contains the class and detail message of  cause).</lead>
                            <detail> This constructor is  useful for runtime exceptions  that are little more than wrappers for  other throwables.</detail>
                        </comment>
                        <parameters>
                            <parameter name="cause" package="java.lang" type="Throwable">
                                <comment>the cause (which is saved for later retrieval by the  Throwable.getCause() method). (A null value is  permitted, and indicates  that the cause is nonexistent or  unknown.)</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
            </class>
            <class modifiers="public final" name="Holder">
                <extends name="Object" package="java.lang"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Holds a value of type T.</lead>
                </comment>
                <fields>
                    <field modifiers="public" name="value" package="java.lang" type="Object">
                        <comment>
                            <lead>The value contained in the holder.</lead>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates a new holder with a null value.</lead>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Create a new holder with the specified value.</lead>
                        </comment>
                        <parameters>
                            <parameter name="value" package="java.lang" type="Object">
                                <comment>The value to be stored in the holder.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
            </class>
            <class modifiers="public abstract" name="EndpointReference">
                <extends name="Object" package="java.lang"/>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>This class represents an WS-Addressing EndpointReference  which is a remote reference to a web service endpoint.</lead>
                    <see class="Service" package="javax.xml.ws"/>
                    <see class="Endpoint" package="javax.xml.ws"/>
                    <see class="BindingProvider" package="javax.xml.ws"/>
                    <see class="W3CEndpointReference" package="javax.xml.ws.wsaddressing"/>
                    <see class="EndpointReference" member="writeTo" package="javax.xml.ws"/>
                    <see class="W3CEndpointReference" package="javax.xml.ws.wsaddressing"/>
                    <detail>   See   Web Services Addressing 1.0 - Core   for more information on WS-Addressing EndpointReferences.      This class is immutable as the typical web service developer  need not be concerned with its contents.  The web service  developer should use this class strictly as a mechanism to   reference a remote web service endpoint. See the Service APIs   that clients can use to that utilize an EndpointReference.   See the javax.xml.ws.Endpoint, and   javax.xml.ws.BindingProvider APIs on how   EndpointReferences can be created for published   endpoints.    Concrete implementations of this class will represent  an EndpointReference for a particular version of Addressing.  For example the W3CEndpointReference is for use  with W3C Web Services Addressing 1.0 - Core Recommendation.   If JAX-WS implementors need to support different versions  of addressing, they should write their own   EndpointReference subclass for that version.  This will allow a JAX-WS implementation to create  vendor specific EndpointReferences that that  vendor can use to flag a different version of  addressing.    Web service developers that wish to pass or return   EndpointReferences in Java methods in an  SEI should use  concrete instances of an EndpointReference such  as the W3CEndpointReference.  This way the   schema mapped from the SEI will be more descriptive of the  type of endpoint reference being passed.    JAX-WS implementors are expected to extract the XML infoset  from an EndpointReferece using the   EndpointReference#writeTo  method.    JAXB will bind this class to xs:anyType. If a better binding  is desired, web services developers should use a concrete  subclass such as W3CEndpointReference.</detail>
                    <see class="W3CEndpointReference" package="javax.xml.ws.wsaddressing"/>
                    <see class="Service" package="javax.xml.ws"/>
                </comment>
                <constructors>
                    <constructor modifiers="protected">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public static" name="readFrom">
                        <comment>
                            <lead>Factory method to read an EndpointReference from the infoset contained in  eprInfoset.</lead>
                            <see class="Provider" member="readEndpointReference" package="javax.xml.ws.spi"/>
                            <detail> This method delegates to the vendor specific  implementation of the javax.xml.ws.spi.Provider#readEndpointReference method.</detail>
                        </comment>
                        <parameters>
                            <parameter name="eprInfoset" package="javax.xml.transform" type="Source">
                                <comment>The EndpointReference infoset to be unmarshalled</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="EndpointReference">
                            <comment>the EndpointReference unmarshalled from eprInfoset     never null</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="writeTo">
                        <comment>
                            <lead>write this EndpointReference to the specified infoset format</lead>
                        </comment>
                        <parameters>
                            <parameter name="result" package="javax.xml.transform" type="Result">
                                <comment>for writing infoset</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getPort">
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> If there  are any reference parameters in the   EndpointReference instance, then those reference  parameters MUST appear as SOAP headers, indicating them to be  reference parameters, on all messages sent to the endpoint.  The parameter  serviceEndpointInterface specifies  the service endpoint interface that is supported by the  returned proxy.  The EndpointReference instance specifies the  endpoint that will be invoked by the returned proxy.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the proxy accordingly from  the WSDL Metadata from this EndpointReference or from  annotations on the serviceEndpointInterface.  For this method  to successfully return a proxy, WSDL metadata MUST be available and the  EndpointReference instance MUST contain an implementation understood  serviceName metadata.    Because this port is not created from a Service object, handlers   will not automatically be configured, and the HandlerResolver   and Executor cannot be get or set for this port. The   BindingProvider().getBinding().setHandlerChain()  method can be used to manually configure handlers for this port.</detail>
                            <see class="Proxy" package="java.lang.reflect"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>An array of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object Proxy instance that supports the                   specified service endpoint interface</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="toString">
                        <comment>
                            <lead>Displays EPR infoset for debugging convenience.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="Endpoint">
                <extends name="Object" package="java.lang"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>A Web service endpoint.</lead>
                    <detail>   Endpoints are created using the static methods defined in this  class. An endpoint is always tied to one Binding  and one implementor, both set at endpoint creation time.   An endpoint is either in a published or an unpublished state.  The publish methods can be used to start publishing  an endpoint, at which point it starts accepting incoming requests.  Conversely, the stop method can be used to stop  accepting incoming requests and take the endpoint down.  Once stopped, an endpoint cannot be published again.   An Executor may be set on the endpoint in order  to gain better control over the threads used to dispatch incoming  requests. For instance, thread pooling with certain parameters  can be enabled by creating a ThreadPoolExecutor and  registering it with the endpoint.   Handler chains can be set using the contained Binding.   An endpoint may have a list of metadata documents, such as WSDL  and XMLSchema documents, bound to it. At publishing time, the  JAX-WS implementation will try to reuse as much of that metadata  as possible instead of generating new ones based on the annotations  present on the implementor.</detail>
                    <see class="Binding" package="javax.xml.ws"/>
                    <see class="BindingType" package="javax.xml.ws"/>
                    <see class="SOAPBinding" package="javax.xml.ws.soap"/>
                    <see class="Executor" package="java.util.concurrent"/>
                </comment>
                <fields>
                    <field modifiers="public static final" name="WSDL_SERVICE" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: name of WSDL service.</lead>
                            <detail>   Type: javax.xml.namespace.QName</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="WSDL_PORT" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: name of WSDL port.</lead>
                            <detail>   Type: javax.xml.namespace.QName</detail>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public static" name="create">
                        <comment>
                            <lead>Creates an endpoint with the specified implementor object.</lead>
                            <see class="Endpoint" member="publish(String)" package="javax.xml.ws"/>
                            <see class="Endpoint" member="publish(Object)" package="javax.xml.ws"/>
                            <detail> If there is  a binding specified via a BindingType annotation then it MUST be used else  a default of SOAP 1.1 / HTTP binding MUST be used.    The newly created endpoint may be published by calling  one of the javax.xml.ws.Endpoint#publish(String) and  javax.xml.ws.Endpoint#publish(Object) methods.</detail>
                        </comment>
                        <parameters>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>The endpoint implementor.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public static" name="create">
                        <since>2.2</since>
                        <comment>
                            <lead>Creates an endpoint with the specified implementor object and web  service features.</lead>
                            <see class="Endpoint" member="publish(String)" package="javax.xml.ws"/>
                            <see class="Endpoint" member="publish(Object)" package="javax.xml.ws"/>
                            <detail> If there is a binding specified via a BindingType  annotation then it MUST be used else a default of SOAP 1.1 / HTTP  binding MUST be used.    The newly created endpoint may be published by calling  one of the javax.xml.ws.Endpoint#publish(String) and  javax.xml.ws.Endpoint#publish(Object) methods.</detail>
                        </comment>
                        <parameters>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>The endpoint implementor.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the         endpoint. Supported features not in the features          parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public static" name="create">
                        <comment>
                            <lead>Creates an endpoint with the specified binding type and  implementor object.</lead>
                            <see class="Endpoint" member="publish(String)" package="javax.xml.ws"/>
                            <see class="Endpoint" member="publish(Object)" package="javax.xml.ws"/>
                            <detail>    The newly created endpoint may be published by calling  one of the javax.xml.ws.Endpoint#publish(String) and  javax.xml.ws.Endpoint#publish(Object) methods.</detail>
                        </comment>
                        <parameters>
                            <parameter name="bindingId" package="java.lang" type="String">
                                <comment>A URI specifying the binding to use. If the bindingID is  null and no binding is specified via a BindingType  annotation then a default SOAP 1.1 / HTTP binding MUST be used.</comment>
                            </parameter>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>The endpoint implementor.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public static" name="create">
                        <since>2.2</since>
                        <comment>
                            <lead>Creates an endpoint with the specified binding type,  implementor object, and web service features.</lead>
                            <see class="Endpoint" member="publish(String)" package="javax.xml.ws"/>
                            <see class="Endpoint" member="publish(Object)" package="javax.xml.ws"/>
                            <detail>    The newly created endpoint may be published by calling  one of the javax.xml.ws.Endpoint#publish(String) and  javax.xml.ws.Endpoint#publish(Object) methods.</detail>
                        </comment>
                        <parameters>
                            <parameter name="bindingId" package="java.lang" type="String">
                                <comment>A URI specifying the binding to use. If the bindingID is  null and no binding is specified via a BindingType  annotation then a default SOAP 1.1 / HTTP binding MUST be used.</comment>
                            </parameter>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>The endpoint implementor.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the         endpoint. Supported features not in the features          parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getBinding">
                        <comment>
                            <lead>Returns the binding for this endpoint.</lead>
                        </comment>
                        <returns package="javax.xml.ws" type="Binding">
                            <comment>The binding for this endpoint</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getImplementor">
                        <comment>
                            <lead>Returns the implementation object for this endpoint.</lead>
                        </comment>
                        <returns package="java.lang" type="Object">
                            <comment>The implementor for this endpoint</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="publish">
                        <comment>
                            <lead>Publishes this endpoint at the given address.</lead>
                            <see class="Endpoint" member="publish(Object)" package="javax.xml.ws"/>
                            <detail>  The necessary server infrastructure will be created and  configured by the JAX-WS implementation using some default configuration.  In order to get more control over the server configuration, please  use the javax.xml.ws.Endpoint#publish(Object) method instead.</detail>
                        </comment>
                        <parameters>
                            <parameter name="address" package="java.lang" type="String">
                                <comment>A URI specifying the address to use. The address         MUST be compatible with the binding specified at the         time the endpoint was created.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public static" name="publish">
                        <comment>
                            <lead>Creates and publishes an endpoint for the specified implementor  object at the given address.</lead>
                            <see class="Endpoint" member="create(String,Object)" package="javax.xml.ws"/>
                            <see class="Endpoint" member="publish(Object)" package="javax.xml.ws"/>
                            <detail>    The necessary server infrastructure will be created and  configured by the JAX-WS implementation using some default configuration.   In order to get more control over the server configuration, please  use the javax.xml.ws.Endpoint#create(String,Object) and  javax.xml.ws.Endpoint#publish(Object) methods instead.</detail>
                        </comment>
                        <parameters>
                            <parameter name="address" package="java.lang" type="String">
                                <comment>A URI specifying the address and transport/protocol         to use. A http: URI MUST result in the SOAP 1.1/HTTP         binding being used. Implementations may support other         URI schemes.</comment>
                            </parameter>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>The endpoint implementor.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public static" name="publish">
                        <since>2.2</since>
                        <comment>
                            <lead>Creates and publishes an endpoint for the specified implementor  object at the given address.</lead>
                            <see class="Endpoint" member="create(String,Object)" package="javax.xml.ws"/>
                            <see class="Endpoint" member="publish(Object)" package="javax.xml.ws"/>
                            <detail> The created endpoint is configured  with the web service features.    The necessary server infrastructure will be created and  configured by the JAX-WS implementation using some default configuration.   In order to get more control over the server configuration, please  use the javax.xml.ws.Endpoint#create(String,Object) and  javax.xml.ws.Endpoint#publish(Object) methods instead.</detail>
                        </comment>
                        <parameters>
                            <parameter name="address" package="java.lang" type="String">
                                <comment>A URI specifying the address and transport/protocol         to use. A http: URI MUST result in the SOAP 1.1/HTTP         binding being used. Implementations may support other         URI schemes.</comment>
                            </parameter>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>The endpoint implementor.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the         endpoint. Supported features not in the features          parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="publish">
                        <comment>
                            <lead>Publishes this endpoint at the provided server context.</lead>
                            <detail>  A server context encapsulates the server infrastructure  and addressing information for a particular transport.  For a call to this method to succeed, the server context  passed as an argument to it MUST be compatible with the  endpoint&apos;s binding.</detail>
                        </comment>
                        <parameters>
                            <parameter name="serverContext" package="java.lang" type="Object">
                                <comment>An object representing a server            context to be used for publishing the endpoint.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="publish">
                        <since>2.2</since>
                        <comment>
                            <lead>Publishes this endpoint at the provided server context.</lead>
                            <detail>  A server context encapsulates the server infrastructure  and addressing information for a particular transport.  For a call to this method to succeed, the server context  passed as an argument to it MUST be compatible with the  endpoint&apos;s binding.     This is meant for container developers to publish the  the endpoints portably and not intended for the end  developers.</detail>
                        </comment>
                        <parameters>
                            <parameter name="serverContext" package="javax.xml.ws.spi.http" type="HttpContext">
                                <comment>An object representing a server            context to be used for publishing the endpoint.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="stop">
                        <comment>
                            <lead>Stops publishing this endpoint.</lead>
                            <detail>   If the endpoint is not in a published state, this method  has no effect.</detail>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="isPublished">
                        <comment>
                            <lead>Returns true if the endpoint is in the published state.</lead>
                        </comment>
                        <returns type="boolean">
                            <comment>true if the endpoint is in the published state.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getMetadata">
                        <comment>
                            <lead>Returns a list of metadata documents for the service.</lead>
                        </comment>
                        <returns package="java.util" type="List">
                            <comment>List A list of metadata documents for the service</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="setMetadata">
                        <comment>
                            <lead>Sets the metadata for this endpoint.</lead>
                        </comment>
                        <parameters>
                            <parameter name="metadata" package="java.util" type="List">
                                <comment>A list of XML document sources containing            metadata information for the endpoint (e.g.            WSDL or XML Schema documents)</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getExecutor">
                        <comment>
                            <lead>Returns the executor for this Endpointinstance.</lead>
                            <detail>   The executor is used to dispatch an incoming request to  the implementor object.</detail>
                            <see class="Executor" package="java.util.concurrent"/>
                        </comment>
                        <returns package="java.util.concurrent" type="Executor">
                            <comment>The java.util.concurrent.Executor to be          used to dispatch a request.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="setExecutor">
                        <comment>
                            <lead>Sets the executor for this Endpoint instance.</lead>
                            <detail>   The executor is used to dispatch an incoming request to  the implementor object.   If this Endpoint is published using the  publish(Object) method and the specified server  context defines its own threading behavior, the executor  may be ignored.</detail>
                            <see class="Executor" package="java.util.concurrent"/>
                        </comment>
                        <parameters>
                            <parameter name="executor" package="java.util.concurrent" type="Executor">
                                <comment>The java.util.concurrent.Executor         to be used to dispatch a request.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getProperties">
                        <comment>
                            <lead>Returns the property bag for this Endpoint instance.</lead>
                        </comment>
                        <returns package="java.util" type="Map">
                            <comment>Map The property bag          associated with this instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="setProperties">
                        <comment>
                            <lead>Sets the property bag for this Endpoint instance.</lead>
                        </comment>
                        <parameters>
                            <parameter name="properties" package="java.util" type="Map">
                                <comment>The property bag associated with         this instance.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getEndpointReference">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Returns the EndpointReference associated with  this Endpoint instance.</lead>
                            <detail>    If the Binding for this bindingProvider is  either SOAP1.1/HTTP or SOAP1.2/HTTP, then a  W3CEndpointReference MUST be returned.</detail>
                            <see class="W3CEndpointReference" package="javax.xml.ws.wsaddressing"/>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="referenceParameters" package="org.w3c.dom" type="Element">
                                <comment>Reference parameters to be associated with the  returned EndpointReference instance.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="EndpointReference">
                            <comment>EndpointReference of this Endpoint instance.  If the returned EndpointReference is of type  W3CEndpointReference then it MUST contain the  the specified referenceParameters.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getEndpointReference">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Returns the EndpointReference associated with  this Endpoint instance.</lead>
                        </comment>
                        <parameters>
                            <parameter name="clazz" package="java.lang" type="Class">
                                <comment>Specifies the type of EndpointReference  that MUST be returned.</comment>
                            </parameter>
                            <parameter dimension="[]" name="referenceParameters" package="org.w3c.dom" type="Element">
                                <comment>Reference parameters to be associated with the  returned EndpointReference instance.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="EndpointReference">
                            <comment>EndpointReference of type clazz of this   Endpoint instance.  If the returned EndpointReference is of type  W3CEndpointReference then it MUST contain the  the specified referenceParameters.</comment>
                        </returns>
                    </method>
                </methods>
            </class>
        </classes>
        <interfaces>
            <interface modifiers="public " name="WebServiceRefs">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>2.0</since>
                <comment>
                    <lead>The WebServiceRefs annotation allows  multiple web service references to be declared at the  class level.</lead>
                    <see class="WebServiceFeatureAnnotation" package="javax.xml.ws.spi"/>
                    <see class="Addressing" package="javax.xml.ws.soap"/>
                    <see class="Addressing" package="javax.xml.ws.soap"/>
                    <detail>WebServiceFeatureAnnotation annotations  (for example, Addressing)  can be used in conjunction with WebServiceRefs.  It has no affect when an enclosed WebServiceRef  that is used to specify a generated service class. But when  it is used with an enclosed WebServiceRef that specifies  a service endpoint interface (SEI), the injected SEI proxy  MUST be configured with the annotation&apos;s web service feature.      For example, in the code below, the StockQuoteProvider proxy MUST  have WS-Addressing enabled as specifed by the Addressing  annotation.  However, the StockQuoteService service object will be   unaffected by the Addressing annotation.          &amp;#64;Addressing     &amp;#64;WebServiceRefs({&amp;#64;WebServiceRef(name=&quot;service/stockquoteservice&quot;, value=StockQuoteService.class),                      &amp;#64;WebServiceRef(name=&quot;service/stockquoteprovider&quot;, type=StockQuoteProvider.class, value=StockQuoteService.class})     public class MyClient {         void init() {             Context ic = new InitialContext();             StockQuoteService service = (StockQuoteService) ic.lookup(&quot;java:comp/env/service/stockquoteservice&quot;);             StockQuoteProvider port = (StockQuoteProvider) ic.lookup(&quot;java:comp/env/service/stockquoteprovider&quot;);             ...        }        ...     }    </detail>
                    <see class="WebServiceRef" package="javax.xml.ws"/>
                </comment>
                <methods>
                    <method modifiers="public" name="value">
                        <comment>
                            <lead>Array used for multiple web service reference declarations.</lead>
                        </comment>
                        <returns dimension="[]" package="javax.xml.ws" type="WebServiceRef"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="WebServiceRef">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The WebServiceRef annotation is used to  define a reference to a web service and  (optionally) an injection target for it.</lead>
                    <see class="WebServiceFeatureAnnotation" package="javax.xml.ws.spi"/>
                    <see class="Addressing" package="javax.xml.ws.soap"/>
                    <see class="Addressing" package="javax.xml.ws.soap"/>
                    <detail>   Web service references are resources in the Java EE 5 sense.    WebServiceFeatureAnnotation annotations  (for example, Addressing)  can be used in conjunction with WebServiceRef.  It has no affect when a WebServiceRef is used  to specify a generated service class. But when  it is used with a WebServiceRef that specifies  a service endpoint interface (SEI), the injected SEI proxy  MUST be configured with the annotation&apos;s web service feature.     For example, in the code below, the injected   StockQuoteProvider proxy MUST  have WS-Addressing enabled as specifed by the  Addressing  annotation.          public class MyClient {        &amp;#64;Addressing        &amp;#64;WebServiceRef(StockQuoteService.class)        private StockQuoteProvider stockQuoteProvider;        ...     }    </detail>
                    <see/>
                    <see class="WebServiceFeatureAnnotation" package="javax.xml.ws.spi"/>
                </comment>
                <methods>
                    <method modifiers="public" name="name">
                        <comment>
                            <lead>The JNDI name of the resource.</lead>
                            <detail>  For field annotations,  the default is the field name.  For method annotations,  the default is the JavaBeans property name corresponding  to the method.  For class annotations, there is no default  and this MUST be specified.</detail>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="type">
                        <comment>
                            <lead>The Java type of the resource.</lead>
                            <detail>  For field annotations,  the default is the type of the field.  For method annotations,  the default is the type of the JavaBeans property.  For class annotations, there is no default and this MUST be  specified.</detail>
                        </comment>
                        <returns package="java.lang" type="Class"/>
                    </method>
                    <method modifiers="public" name="mappedName">
                        <comment>
                            <lead>A product specific name that this resource should be mapped to.</lead>
                            <detail>  The name of this resource, as defined by the name  element or defaulted, is a name that is local to the application  component using the resource.  (It&apos;s a name in the JNDI  java:comp/env namespace.)  Many application servers  provide a way to map these local names to names of resources  known to the application server.  This mapped name is often a  global JNDI name, but may be a name of any form.    Application servers are not required to support any particular  form or type of mapped name, nor the ability to use mapped names.  The mapped name is product-dependent and often installation-dependent.  No use of a mapped name is portable.</detail>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="value">
                        <comment>
                            <lead>The service class, always a type extending  javax.xml.ws.Service.</lead>
                            <detail> This element MUST be specified  whenever the type of the reference is a service endpoint interface.</detail>
                        </comment>
                        <returns package="java.lang" type="Class"/>
                    </method>
                    <method modifiers="public" name="wsdlLocation">
                        <comment>
                            <lead>A URL pointing to the WSDL document for the web service.</lead>
                            <detail>  If not specified, the WSDL location specified by annotations  on the resource type is used instead.</detail>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="WebServiceProvider">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Used to annotate a Provider implementation class.</lead>
                    <see class="Provider" package="javax.xml.ws"/>
                </comment>
                <methods>
                    <method modifiers="public" name="wsdlLocation">
                        <comment>
                            <lead>Location of the WSDL description for the service.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="serviceName">
                        <comment>
                            <lead>Service name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="targetNamespace">
                        <comment>
                            <lead>Target namespace for the service</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="portName">
                        <comment>
                            <lead>Port name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="WebServiceContext">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>A WebServiceContext makes it possible for   a web service endpoint implementation class to access   message context and security information relative to   a request being served.</lead>
                    <detail>    Typically a WebServiceContext is injected   into an endpoint implementation class using the   Resource annotation.</detail>
                    <see/>
                </comment>
                <methods>
                    <method modifiers="public" name="getMessageContext">
                        <comment>
                            <lead>Returns the MessageContext for the request being served  at the time this method is called.</lead>
                            <detail> Only properties with  APPLICATION scope will be visible to the application.</detail>
                            <see class="MessageContext" package="javax.xml.ws.handler"/>
                            <see class="Scope" package="javax.xml.ws.handler.MessageContext"/>
                            <see class="IllegalStateException" package="java.lang"/>
                        </comment>
                        <returns package="javax.xml.ws.handler" type="MessageContext">
                            <comment>MessageContext The message context.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getUserPrincipal">
                        <comment>
                            <lead>Returns the Principal that identifies the sender  of the request currently being serviced.</lead>
                            <detail> If the  sender has not been authenticated, the method  returns null.</detail>
                            <see class="Principal" package="java.security"/>
                            <see class="IllegalStateException" package="java.lang"/>
                        </comment>
                        <returns package="java.security" type="Principal">
                            <comment>Principal The principal object.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="isUserInRole">
                        <comment>
                            <lead>Returns a boolean indicating whether the  authenticated user is included in the specified  logical role.</lead>
                            <detail> If the user has not been  authenticated, the method returns false.</detail>
                        </comment>
                        <parameters>
                            <parameter name="role" package="java.lang" type="String">
                                <comment>A String specifying the name of the role</comment>
                            </parameter>
                        </parameters>
                        <returns type="boolean">
                            <comment>a boolean indicating whether  the sender of the request belongs to a given role</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getEndpointReference">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Returns the EndpointReference for this  endpoint.</lead>
                            <see class="Binding" package="javax.xml.ws"/>
                            <detail>    If the Binding for this bindingProvider is  either SOAP1.1/HTTP or SOAP1.2/HTTP, then a  W3CEndpointReference MUST be returned.</detail>
                            <see class="W3CEndpointReference" package="javax.xml.ws.wsaddressing"/>
                        </comment>
                        <parameters>
                            <parameter dimension="[]" name="referenceParameters" package="org.w3c.dom" type="Element">
                                <comment>Reference parameters to be associated with the  returned EndpointReference instance.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="EndpointReference">
                            <comment>EndpointReference of the endpoint associated with this  WebServiceContext.     If the returned EndpointReference is of type  W3CEndpointReference then it MUST contain the  the specified referenceParameters.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getEndpointReference">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Returns the EndpointReference associated with  this endpoint.</lead>
                        </comment>
                        <parameters>
                            <parameter name="clazz" package="java.lang" type="Class">
                                <comment>The type of EndpointReference that  MUST be returned.</comment>
                            </parameter>
                            <parameter dimension="[]" name="referenceParameters" package="org.w3c.dom" type="Element">
                                <comment>Reference parameters to be associated with the  returned EndpointReference instance.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="EndpointReference">
                            <comment>EndpointReference of type clazz of the endpoint  associated with this WebServiceContext instance.  If the returned EndpointReference is of type  W3CEndpointReference then it MUST contain the  the specified referenceParameters.</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="WebServiceClient">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Used to annotate a generated service interface.</lead>
                    <detail>    The information specified in this annotation is sufficient   to uniquely identify a wsdl:service   element inside a WSDL document. This wsdl:service   element represents the Web service for which the generated   service interface provides a client view.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="name">
                        <comment>
                            <lead>The local name of the Web service.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="targetNamespace">
                        <comment>
                            <lead>The namespace for the Web service.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="wsdlLocation">
                        <comment>
                            <lead>The location of the WSDL document for the service (a URL).</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="WebFault">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Used to annotate service specific exception classes to customize   to the local and namespace name of the fault element and the name  of the fault bean.</lead>
                </comment>
                <methods>
                    <method modifiers="public" name="name">
                        <comment>
                            <lead>Element&apos;s local name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="targetNamespace">
                        <comment>
                            <lead>Element&apos;s namespace name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="faultBean">
                        <comment>
                            <lead>Fault bean name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="messageName">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>wsdl:Message&apos;s name.</lead>
                            <detail> Default name is the exception&apos;s class name.</detail>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="WebEndpoint">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Used to annotate the getPortName()   methods of a generated service interface.</lead>
                    <detail>    The information specified in this annotation is sufficient   to uniquely identify a wsdl:port element   inside a wsdl:service. The latter is   determined based on the value of the WebServiceClient   annotation on the generated service interface itself.</detail>
                    <see class="WebServiceClient" package="javax.xml.ws"/>
                </comment>
                <methods>
                    <method modifiers="public" name="name">
                        <comment>
                            <lead>The local name of the endpoint.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="ServiceMode">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <see class="Provider" package="javax.xml.ws"/>
                    <lead>Used to indicate whether a Provider implementation wishes to work  with entire protocol messages or just with protocol message payloads.</lead>
                </comment>
                <methods>
                    <method modifiers="public" name="value">
                        <comment>
                            <lead>Service mode.</lead>
                            <detail> PAYLOAD indicates that the Provider implementation  wishes to work with protocol message payloads only. MESSAGE indicates  that the Provider implementation wishes to work with entire protocol  messages.</detail>
                        </comment>
                        <returns package="javax.xml.ws.Service" type="Service.Mode"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="ResponseWrapper">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Used to annotate methods in the Service Endpoint Interface with the response   wrapper bean to be used at runtime.</lead>
                    <detail> The default value of the localName is   the operationName as defined in WebMethod annotation appended with  Response and the targetNamespace is the target namespace of the SEI.   When starting from Java this annotation is used resolve  overloading conflicts in document literal mode. Only the className  is required in this case.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="localName">
                        <comment>
                            <lead>Element&apos;s local name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="targetNamespace">
                        <comment>
                            <lead>Element&apos;s namespace name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="className">
                        <comment>
                            <lead>Response wrapper bean name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="partName">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>wsdl:part name for the wrapper</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Response">
                <extends name="Future" package="java.util.concurrent"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The Response interface provides methods used to obtain the     payload and context of a message sent in response to an operation   invocation.</lead>
                    <see class="WebServiceException" package="javax.xml.ws"/>
                    <detail>    For asynchronous operation invocations it provides additional methods   to check the status of the request. The get(...) methods may   throw the standard   set of exceptions and their cause may be a RemoteException or a     WebServiceException that represents the error that occured during the   asynchronous method invocation.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="getContext">
                        <comment>
                            <lead>Gets the contained response context.</lead>
                        </comment>
                        <returns package="java.util" type="Map">
                            <comment>The contained response context. May be null if a  response is not yet available.</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="RespectBinding">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>This feature clarifies the use of the wsdl:binding  in a JAX-WS runtime.</lead>
                    <see class="WebServiceProvider" package="javax.xml.ws"/>
                    <see class="WebServiceRef" package="javax.xml.ws"/>
                    <see class="WebServiceRefs" package="javax.xml.ws"/>
                    <see class="WebServiceFeature" package="javax.xml.ws"/>
                    <detail>    This annotation MUST only be used in conjunction the  jakarta.jws.WebService, WebServiceProvider,  WebServiceRef, or WebServiceRefs annotations.    When used with the jakarta.jws.WebService annotation this  annotation MUST only be used on the service endpoint implementation  class.    This annotation has no affect when used with   WebServiceRef annotations that are used to specify a generated  service class. When used with WebServiceRef that specifies a  service endpoint interface (SEI), the injected SEI proxy MUST  honor the values of the RespectBinding annotation.    This feature is only useful with web services that have an  associated WSDL. Enabling this feature requires that a JAX-WS  implementation inspect the wsdl:binding for an  endpoint at runtime to make sure that all wsdl:extensions  that have the required attribute set to true  are understood and are being used.    The following describes the affects of this feature with respect  to be enabled or disabled:      ENABLED: In this Mode, a JAX-WS runtime MUST assure that all   required wsdl:binding extensions are either understood   and used by the runtime, or explicitly disabled by the web service   application. A web service can disable a particular   extension if there is a corresponding WebServiceFeature or annotation.   Similarly, a web service client can disable   particular extension using the corresponding WebServiceFeature while   creating a proxy or Dispatch instance.     The runtime MUST also make sure that binding of     SEI parameters/return values respect the wsdl:binding.     With this feature enabled, if a required (wsdl:required=&quot;true&quot;)     wsdl:binding extension is in the WSDL and it is not     supported by a JAX-WS runtime and it has not     been explicitly turned off by the web service developer, then     that JAX-WS runtime MUST behave appropriately based on whether it is     on the client or server:            Client: runtime MUST throw a       WebServiceException no sooner than when one of the methods       above is invoked but no later than the first invocation of an endpoint       operation.       Server: throw a WebServiceException and the endpoint MUST fail to deploy         DISABLED: In this Mode, an implementation may choose whether   to inspect the wsdl:binding or not and to what degree   the wsdl:binding will be inspected.  For example,   one implementation may choose to behave as if this feature is enabled,   another implementation may only choose to verify the SEI&apos;s   parameter/return type bindings.  </detail>
                    <see class="RespectBindingFeature" package="javax.xml.ws"/>
                </comment>
                <methods>
                    <method modifiers="public" name="enabled">
                        <comment>
                            <lead>Specifies if this feature is enabled or disabled.</lead>
                        </comment>
                        <returns type="boolean"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="RequestWrapper">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Used to annotate methods in the Service Endpoint Interface with the request   wrapper bean to be used at runtime.</lead>
                    <detail> The default value of the localName is   the operationName, as defined in WebMethod annotation and the  targetNamespace is the target namespace of the SEI.   When starting from Java this annotation is used resolve  overloading conflicts in document literal mode. Only the className  is required in this case.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="localName">
                        <comment>
                            <lead>Element&apos;s local name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="targetNamespace">
                        <comment>
                            <lead>Element&apos;s namespace name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="className">
                        <comment>
                            <lead>Request wrapper bean name.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="partName">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>wsdl:part name for the wrapper</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Provider">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Service endpoints may implement the Provider   interface as a dynamic alternative to an SEI.</lead>
                    <detail>    Implementations are required to support Provider,   Provider and   Provider, depending on the binding   in use and the service mode.    The ServiceMode annotation can be used to control whether   the Provider instance will receive entire protocol messages   or just message payloads.</detail>
                    <see class="Source" package="javax.xml.transform"/>
                    <see class="SOAPMessage" package="javax.xml.soap"/>
                    <see class="ServiceMode" package="javax.xml.ws"/>
                </comment>
                <methods>
                    <method modifiers="public" name="invoke">
                        <comment>
                            <lead>Invokes an operation occording to the contents of the request   message.</lead>
                            <see class="MessageContext" package="javax.xml.ws.handler"/>
                            <see class="ProtocolException" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="request" package="java.lang" type="Object">
                                <comment>The request message or message payload.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>The response message or message payload. May be null if               there is no response.</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="LogicalMessage">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The LogicalMessage interface represents a   protocol agnostic XML message and contains methods that   provide access to the payload of the message.</lead>
                </comment>
                <methods>
                    <method modifiers="public" name="getPayload">
                        <comment>
                            <lead>Gets the message payload as an XML source, may be called   multiple times on the same LogicalMessage instance, always   returns a new Source that may be used to retrieve the entire   message payload.</lead>
                            <detail>    If the returned Source is an instance of    DOMSource, then   modifications to the encapsulated DOM tree change the message   payload in-place, there is no need to susequently call   setPayload. Other types of Source provide only   read access to the message payload.</detail>
                        </comment>
                        <returns package="javax.xml.transform" type="Source">
                            <comment>The contained message payload; returns null if no            payload is present in this message.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setPayload">
                        <comment>
                            <lead>Sets the message payload</lead>
                        </comment>
                        <parameters>
                            <parameter name="payload" package="javax.xml.transform" type="Source">
                                <comment>message payload</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getPayload">
                        <comment>
                            <lead>Gets the message payload as a JAXB object.</lead>
                            <detail> Note that there is no   connection between the returned object and the message payload,   changes to the payload require calling setPayload.</detail>
                        </comment>
                        <parameters>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXBContext that should be used to unmarshall           the message payload</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>The contained message payload; returns null if no            payload is present in this message</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setPayload">
                        <comment>
                            <lead>Sets the message payload</lead>
                        </comment>
                        <parameters>
                            <parameter name="payload" package="java.lang" type="Object">
                                <comment>message payload</comment>
                            </parameter>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXBContext that should be used to marshall            the payload</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="FaultAction">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.1</since>
                <comment>
                    <see class="Action" package="javax.xml.ws"/>
                    <lead>The FaultAction annotation is used inside an Action  annotation to allow an explicit association of a WS-Addressing   Action message addressing property with the fault   messages of the WSDL operation mapped from the exception class.</lead>
                    <detail>    The wsam:Action attribute value in the fault  message in the generated WSDL operation mapped for className  class is equal to the corresponding value in the FaultAction.  For the exact computation of wsam:Action values for the  fault messages, refer to the algorithm in the JAX-WS specification.     Example 1: Specify explicit values for Action message addressing  property for the input, output and fault message  if the Java method throws only one service specific exception.     &amp;#64;WebService  public class AddNumbersImpl {      &amp;#64;Action(          fault = {              &amp;#64;FaultAction(className=AddNumbersException.class, value=&quot;http://example.com/faultAction&quot;)          })      public int addNumbers(int number1, int number2)          throws AddNumbersException {          return number1 + number2;      }  }     The generated WSDL looks like:       &amp;lt;definitions targetNamespace=&quot;http://example.com/numbers&quot; ...&gt;      ...      &amp;lt;portType name=&quot;AddNumbersPortType&quot;&gt;        &amp;lt;operation name=&quot;AddNumbers&quot;&gt;          ...          &amp;lt;fault message=&quot;tns:AddNumbersException&quot; name=&quot;AddNumbersException&quot;            wsam:Action=&quot;http://example.com/faultAction&quot;/&gt;        &amp;lt;/operation&gt;      &amp;lt;/portType&gt;      ...    &amp;lt;/definitions&gt;       Example 2: Here is an example that shows if the explicit value for Action  message addressing property for the service specific exception is not present.     &amp;#64;WebService  public class AddNumbersImpl {      public int addNumbers(int number1, int number2)          throws AddNumbersException {          return number1 + number2;      }  }     The generated WSDL looks like:       &amp;lt;definitions targetNamespace=&quot;http://example.com/numbers&quot; ...&gt;      ...      &amp;lt;portType name=&quot;AddNumbersPortType&quot;&gt;        &amp;lt;operation name=&quot;AddNumbers&quot;&gt;          ...          &amp;lt;fault message=&quot;tns:addNumbersFault&quot; name=&quot;InvalidNumbers&quot;            wsam:Action=&quot;http://example.com/numbers/AddNumbersPortType/AddNumbers/Fault/AddNumbersException&quot;/&gt;        &amp;lt;/operation&gt;      &amp;lt;/portType&gt;      ...    &amp;lt;/definitions&gt;       Example 3: Here is an example that shows how to specify explicit values for Action  message addressing property if the Java method throws more than one service specific exception.     &amp;#64;WebService  public class AddNumbersImpl {      &amp;#64;Action(          fault = {              &amp;#64;FaultAction(className=AddNumbersException.class, value=&quot;http://example.com/addFaultAction&quot;)              &amp;#64;FaultAction(className=TooBigNumbersException.class, value=&quot;http://example.com/toobigFaultAction&quot;)          })      public int addNumbers(int number1, int number2)          throws AddNumbersException, TooBigNumbersException {          return number1 + number2;      }  }     The generated WSDL looks like:       &amp;lt;definitions targetNamespace=&quot;http://example.com/numbers&quot; ...&gt;      ...      &amp;lt;portType name=&quot;AddNumbersPortType&quot;&gt;        &amp;lt;operation name=&quot;AddNumbers&quot;&gt;          ...          &amp;lt;fault message=&quot;tns:addNumbersFault&quot; name=&quot;AddNumbersException&quot;            wsam:Action=&quot;http://example.com/addFaultAction&quot;/&gt;          &amp;lt;fault message=&quot;tns:tooBigNumbersFault&quot; name=&quot;TooBigNumbersException&quot;            wsam:Action=&quot;http://example.com/toobigFaultAction&quot;/&gt;        &amp;lt;/operation&gt;      &amp;lt;/portType&gt;      ...    &amp;lt;/definitions&gt;  </detail>
                </comment>
                <methods>
                    <method modifiers="public" name="className">
                        <comment>
                            <lead>Name of the exception class</lead>
                        </comment>
                        <returns package="java.lang" type="Class"/>
                    </method>
                    <method modifiers="public" name="value">
                        <comment>
                            <lead>Value of WS-Addressing Action message addressing property for the exception</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Dispatch">
                <extends name="BindingProvider" package="javax.xml.ws"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The Dispatch interface provides support    for the dynamic invocation of a service endpoint operations.</lead>
                    <detail> The   javax.xml.ws.Service   interface acts as a factory for the creation of Dispatch   instances.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="invoke">
                        <comment>
                            <lead>Invoke a service operation synchronously.</lead>
                            <detail>    The client is responsible for ensuring that the msg object  when marshalled is formed according to the requirements of the protocol  binding in use.</detail>
                        </comment>
                        <parameters>
                            <parameter name="msg" package="java.lang" type="Object">
                                <comment>An object that will form the message or payload of      the message used to invoke the operation.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>The response message or message payload to the      operation invocation.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="invokeAsync">
                        <comment>
                            <lead>Invoke a service operation asynchronously.</lead>
                            <detail>  The   method returns without waiting for the response to the operation   invocation, the results of the operation are obtained by polling the   returned Response.    The client is responsible for ensuring that the msg object   when marshalled is formed according to the requirements of the protocol  binding in use.</detail>
                        </comment>
                        <parameters>
                            <parameter name="msg" package="java.lang" type="Object">
                                <comment>An object that will form the message or payload of      the message used to invoke the operation.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Response">
                            <comment>The response message or message payload to the      operation invocation.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="invokeAsync">
                        <comment>
                            <lead>Invoke a service operation asynchronously.</lead>
                            <detail> The   method returns without waiting for the response to the operation   invocation, the results of the operation are communicated to the client   via the passed in handler.    The client is responsible for ensuring that the msg object   when marshalled is formed according to the requirements of the protocol  binding in use.</detail>
                        </comment>
                        <parameters>
                            <parameter name="msg" package="java.lang" type="Object">
                                <comment>An object that will form the message or payload of      the message used to invoke the operation.</comment>
                            </parameter>
                            <parameter name="handler" package="javax.xml.ws" type="AsyncHandler">
                                <comment>The handler object that will receive the      response to the operation invocation.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util.concurrent" type="Future">
                            <comment>A Future object that may be used to check the status      of the operation invocation. This object MUST NOT be used to try to      obtain the results of the operation - the object returned from      Future&amp;lt;?&gt;.get() is implementation dependent      and any use of it will result in non-portable behaviour.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="invokeOneWay">
                        <comment>
                            <lead>Invokes a service operation using the one-way   interaction mode.</lead>
                            <detail> The operation invocation is logically non-blocking,   subject to the capabilities of the underlying protocol, no results   are returned. When   the protocol in use is SOAP/HTTP, this method MUST block until   an HTTP response code has been received or an error occurs.    The client is responsible for ensuring that the msg object   when marshalled is formed according to the requirements of the protocol  binding in use.</detail>
                        </comment>
                        <parameters>
                            <parameter name="msg" package="java.lang" type="Object">
                                <comment>An object that will form the message or payload of      the message used to invoke the operation.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="BindingType">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The BindingType annotation is used to   specify the binding to use for a web service   endpoint implementation class.</lead>
                    <detail>      This annotation may be overriden programmatically or via   deployment descriptors, depending on the platform in use.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="value">
                        <comment>
                            <lead>A binding identifier (a URI).</lead>
                            <detail>  If not specified, the default is the SOAP 1.1 / HTTP binding.    See the SOAPBinding and HTTPBinding  for the definition of the standard binding identifiers.</detail>
                            <see class="Binding" package="javax.xml.ws"/>
                            <see class="SOAPBinding" member="SOAP11HTTP_BINDING" package="javax.xml.ws.soap"/>
                            <see class="SOAPBinding" member="SOAP12HTTP_BINDING" package="javax.xml.ws.soap"/>
                            <see class="HTTPBinding" member="HTTP_BINDING" package="javax.xml.ws.http"/>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="BindingProvider">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The BindingProvider interface provides access to the  protocol binding and associated context objects for request and  response message processing.</lead>
                    <see class="Binding" package="javax.xml.ws"/>
                </comment>
                <fields>
                    <field modifiers="public static final" name="USERNAME_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: User name for authentication.</lead>
                            <detail>  Type: java.lang.String</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="PASSWORD_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: Password for authentication.</lead>
                            <detail>  Type: java.lang.String</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="ENDPOINT_ADDRESS_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: Target service endpoint address.</lead>
                            <detail> The  URI scheme for the endpoint address specification MUST  correspond to the protocol/transport binding for the  binding in use.  Type: java.lang.String</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SESSION_MAINTAIN_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: This boolean property is used by a service  client to indicate whether or not it wants to participate in  a session with a service endpoint.</lead>
                            <detail> If this property is set to  true, the service client indicates that it wants the session  to be maintained. If set to false, the session is not maintained.  The default value for this property is false.  Type: java.lang.Boolean</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAPACTION_USE_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property for SOAPAction.</lead>
                            <detail> This boolean property    indicates whether or not the value of the   javax.xml.ws.soap.http.soapaction.uri property   is used for the value of the SOAPAction. The    default value of this property is false indicating   that the   javax.xml.ws.soap.http.soapaction.uri property  is not used for the value of the SOAPAction, however,   if WS-Addressing is enabled, the default value is   true.    Type: java.lang.Boolean</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAPACTION_URI_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property for SOAPAction.</lead>
                            <detail> Indicates the SOAPAction    URI if the javax.xml.ws.soap.http.soapaction.use    property is set to true. If WS-Addressing    is enabled, this value will also be used for the value of the    WS-Addressing Action header.  If this property is not set,   the default SOAPAction and WS-Addressing Action will be sent.   Type: java.lang.String</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="TO_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property for wsa:To.</lead>
                            <detail> If WS-Addressing  is enabled, this value will be used for the value of the  WS-Addressing To header.   Type: javax.xml.ws.EndpointReference</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="REPLYTO_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property for wsa:ReplyTo.</lead>
                            <detail> If WS-Addressing  is enabled, this value will be used for the value of the  WS-Addressing ReplyTo header.   Type: javax.xml.ws.EndpointReference</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="FAULTTO_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property for wsa:FaultTo.</lead>
                            <detail> If WS-Addressing  is enabled, this value will be used for the value of the  WS-Addressing FaultTo header.   Type: javax.xml.ws.EndpointReference</detail>
                        </comment>
                    </field>
                </fields>
                <methods>
                    <method modifiers="public" name="getRequestContext">
                        <comment>
                            <lead>Get the context that is used to initialize the message context  for request messages.</lead>
                            <detail>   Modifications to the request context do not affect the message context of  either synchronous or asynchronous operations that have already been  started.</detail>
                        </comment>
                        <returns package="java.util" type="Map">
                            <comment>The context that is used in processing request messages.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getResponseContext">
                        <comment>
                            <lead>Get the context that resulted from processing a response message.</lead>
                            <detail>   The returned context is for the most recently completed synchronous  operation. Subsequent synchronous operation invocations overwrite the  response context. Asynchronous operations return their response context  via the Response interface.</detail>
                        </comment>
                        <returns package="java.util" type="Map">
                            <comment>The context that resulted from processing the latest  response messages.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getBinding">
                        <comment>
                            <lead>Get the Binding for this binding provider.</lead>
                        </comment>
                        <returns package="javax.xml.ws" type="Binding">
                            <comment>The Binding for this binding provider.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getEndpointReference">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Returns the EndpointReference associated with  this BindingProvider instance.</lead>
                            <detail>    If the Binding for this bindingProvider is  either SOAP1.1/HTTP or SOAP1.2/HTTP, then a  W3CEndpointReference MUST be returned.</detail>
                            <see class="W3CEndpointReference" package="javax.xml.ws.wsaddressing"/>
                        </comment>
                        <returns package="javax.xml.ws" type="EndpointReference">
                            <comment>EndpointReference of the target endpoint associated with this  BindingProvider instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getEndpointReference">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Returns the EndpointReference associated with  this BindingProvider instance.</lead>
                            <detail>  The instance  returned will be of type clazz.</detail>
                        </comment>
                        <parameters>
                            <parameter name="clazz" package="java.lang" type="Class">
                                <comment>Specifies the type of EndpointReference  that MUST be returned.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="EndpointReference">
                            <comment>EndpointReference of the target endpoint associated with this  BindingProvider instance. MUST be of type  clazz.</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Binding">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The Binding interface is the base interface   for JAX-WS protocol bindings.</lead>
                </comment>
                <methods>
                    <method modifiers="public" name="getHandlerChain">
                        <comment>
                            <lead>Gets a copy of the handler chain for a protocol binding instance.</lead>
                            <detail>  If the returned chain is modified a call to setHandlerChain  is required to configure the binding instance with the new chain.</detail>
                        </comment>
                        <returns package="java.util" type="List">
                            <comment>java.util.List&amp;lt;Handler&gt; Handler chain</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setHandlerChain">
                        <comment>
                            <lead>Sets the handler chain for the protocol binding instance.</lead>
                        </comment>
                        <parameters>
                            <parameter name="chain" package="java.util" type="List">
                                <comment>A List of handler configuration entries</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getBindingID">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Get the URI for this binding instance.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>String The binding identifier for the port.     Never returns null</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="AsyncHandler">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The AsyncHandler interface is implemented by  clients that wish to receive callback notification of the completion of  service endpoint operations invoked asynchronously.</lead>
                </comment>
                <methods>
                    <method modifiers="public" name="handleResponse">
                        <comment>
                            <lead>Called when the response to an asynchronous operation is available.</lead>
                        </comment>
                        <parameters>
                            <parameter name="res" package="javax.xml.ws" type="Response">
                                <comment>The response to the operation invocation.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Action">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>The Action annotation allows explicit association of a   WS-Addressing Action message addressing property with   input, output, and   fault messages of the mapped WSDL operation.</lead>
                    <see class="FaultAction" package="javax.xml.ws"/>
                    <detail>     This annotation can be specified on each method of a service endpoint interface.  For such a method, the mapped operation in the generated WSDL&apos;s  wsam:Action attribute on the WSDL input,  output and fault messages of the WSDL operation  is based upon which attributes of the Action annotation have been specified.  For the exact computation of wsam:Action values for the messages, refer  to the algorithm in the JAX-WS specification.    Example 1: Specify explicit values for Action message addressing property  for input and output messages.      &amp;#64;WebService  public class AddNumbersImpl {      &amp;#64;Action(          input=&quot;http://example.com/inputAction&quot;,          output=&quot;http://example.com/outputAction&quot;)      public int addNumbers(int number1, int number2) {          return number1 + number2;      }  }     The generated WSDL looks like:      &amp;lt;definitions targetNamespace=&quot;http://example.com/numbers&quot; ...&gt;      ...      &amp;lt;portType name=&quot;AddNumbersPortType&quot;&gt;        &amp;lt;operation name=&quot;AddNumbers&quot;&gt;          &amp;lt;input message=&quot;tns:AddNumbersInput&quot; name=&quot;foo&quot;            wsam:Action=&quot;http://example.com/inputAction&quot;/&gt;          &amp;lt;output message=&quot;tns:AddNumbersOutput&quot; name=&quot;bar&quot;            wsam:Action=&quot;http://example.com/outputAction&quot;/&gt;        &amp;lt;/operation&gt;      &amp;lt;/portType&gt;      ...    &amp;lt;/definitions&gt;       Example 2: Specify explicit value for Action message addressing property  for only the input message. The wsam:Action values for the  WSDL output message are computed using the algorithm in the JAX-WS specification.     &amp;#64;WebService  public class AddNumbersImpl {      &amp;#64;Action(input=&quot;http://example.com/inputAction&quot;)      public int addNumbers(int number1, int number2) {          return number1 + number2;      }  }     The generated WSDL looks like:      &amp;lt;definitions targetNamespace=&quot;http://example.com/numbers&quot; ...&gt;      ...      &amp;lt;portType name=&quot;AddNumbersPortType&quot;&gt;        &amp;lt;operation name=&quot;AddNumbers&quot;&gt;          &amp;lt;input message=&quot;tns:AddNumbersInput&quot; name=&quot;foo&quot;            wsam:Action=&quot;http://example.com/inputAction&quot; /&gt;          &amp;lt;output message=&quot;tns:AddNumbersOutput&quot; name=&quot;bar&quot;            wsam:Action=&quot;http://example.com/numbers/AddNumbersPortType/AddNumbersResponse&quot;/&gt;        &amp;lt;/operation&gt;      &amp;lt;/portType&gt;      ...    &amp;lt;/definitions&gt;     It is legitimate to specify an explicit value for Action message addressing property for  output message only. In this case, wsam:Action values for the  WSDL input message are computed using the algorithm in the JAX-WS specification.     Example 3: See FaultAction annotation for an example of  how to specify an explicit value for Action message addressing property for the  fault message.</detail>
                    <see class="FaultAction" package="javax.xml.ws"/>
                </comment>
                <methods>
                    <method modifiers="public" name="input">
                        <comment>
                            <lead>Explicit value of the WS-Addressing Action message addressing property for the input  message of the operation.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="output">
                        <comment>
                            <lead>Explicit value of the WS-Addressing Action message addressing property for the output  message of the operation.</lead>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="fault">
                        <comment>
                            <lead>Explicit value of the WS-Addressing Action message addressing property for the fault  message(s) of the operation.</lead>
                            <see class="FaultAction" package="javax.xml.ws"/>
                            <detail> Each exception that is mapped to a fault and requires an explicit WS-Addressing  Action message addressing property, needs to be specified as a value in this property   using FaultAction annotation.</detail>
                        </comment>
                        <returns dimension="[]" package="javax.xml.ws" type="FaultAction"/>
                    </method>
                </methods>
            </interface>
        </interfaces>
    </package>
    <package name="javax.xml.ws.handler">
        <classes>
            <class modifiers="public static final" name="MessageContext.Scope">
                <extends name="Enum" package="java.lang"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <comment>
                    <lead>Property scope.</lead>
                    <detail> Properties scoped as APPLICATION are  visible to handlers,  client applications and service endpoints; properties scoped as  HANDLER  are only normally visible to handlers.</detail>
                </comment>
                <fields>
                    <field modifiers="public static final" name="APPLICATION" package="javax.xml.ws.handler.MessageContext" type="MessageContext.Scope">
                        <comment/>
                    </field>
                    <field modifiers="public static final" name="HANDLER" package="javax.xml.ws.handler.MessageContext" type="MessageContext.Scope">
                        <comment/>
                    </field>
                </fields>
                <methods>
                    <method modifiers="public static" name="values">
                        <comment/>
                        <returns dimension="[]" package="javax.xml.ws.handler.MessageContext" type="MessageContext.Scope"/>
                    </method>
                    <method modifiers="public static" name="valueOf">
                        <comment/>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String"/>
                        </parameters>
                        <returns package="javax.xml.ws.handler.MessageContext" type="MessageContext.Scope"/>
                    </method>
                </methods>
            </class>
        </classes>
        <interfaces>
            <interface modifiers="public " name="PortInfo">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The PortInfo interface is used by a   HandlerResolver to query information about   the port it is being asked to create a handler chain for.</lead>
                    <detail>      This interface is never implemented by an application,   only by a JAX-WS implementation.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="getServiceName">
                        <comment>
                            <lead>Gets the qualified name of the WSDL service name containing   the port being accessed.</lead>
                        </comment>
                        <returns package="javax.xml.namespace" type="QName">
                            <comment>javax.xml.namespace.QName The qualified name of the WSDL service.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getPortName">
                        <comment>
                            <lead>Gets the qualified name of the WSDL port being accessed.</lead>
                        </comment>
                        <returns package="javax.xml.namespace" type="QName">
                            <comment>javax.xml.namespace.QName The qualified name of the WSDL port.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getBindingID">
                        <comment>
                            <lead>Gets the URI identifying the binding used by the port being accessed.</lead>
                            <see class="Binding" package="javax.xml.ws"/>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>String The binding identifier for the port.</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="MessageContext">
                <extends name="Map" package="java.util"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The interface MessageContext abstracts the message  context that is processed by a handler in the handle  method.</lead>
                    <detail>   The MessageContext interface provides methods to  manage a property set. MessageContext properties  enable handlers in a handler chain to share processing related  state.</detail>
                </comment>
                <fields>
                    <field modifiers="public static final" name="MESSAGE_OUTBOUND_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: message direction, true for  outbound messages, false for inbound.</lead>
                            <detail>  Type: boolean</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="INBOUND_MESSAGE_ATTACHMENTS" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: Map of attachments to a message for the inbound  message, key is  the MIME Content-ID, value is a DataHandler.</lead>
                            <detail>  Type: java.util.Map</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="OUTBOUND_MESSAGE_ATTACHMENTS" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: Map of attachments to a message for the outbound  message, key is the MIME Content-ID, value is a DataHandler.</lead>
                            <detail>  Type: java.util.Map</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="WSDL_DESCRIPTION" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: input source for WSDL document.</lead>
                            <detail>  Type: org.xml.sax.InputSource</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="WSDL_SERVICE" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: name of WSDL service.</lead>
                            <detail>  Type: javax.xml.namespace.QName</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="WSDL_PORT" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: name of WSDL port.</lead>
                            <detail>  Type: javax.xml.namespace.QName</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="WSDL_INTERFACE" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: name of wsdl interface (2.0) or port type (1.1).</lead>
                            <detail>  Type: javax.xml.namespace.QName</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="WSDL_OPERATION" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: name of WSDL operation.</lead>
                            <detail>  Type: javax.xml.namespace.QName</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="HTTP_RESPONSE_CODE" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: HTTP response status code.</lead>
                            <detail>  Type: java.lang.Integer</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="HTTP_REQUEST_HEADERS" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: HTTP request headers.</lead>
                            <detail>  Type: java.util.Map&amp;lt;java.lang.String, java.util.List&amp;lt;java.lang.String&gt;&gt;</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="HTTP_RESPONSE_HEADERS" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: HTTP response headers.</lead>
                            <detail>  Type: java.util.Map&amp;lt;java.lang.String, java.util.List&amp;lt;java.lang.String&gt;&gt;</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="HTTP_REQUEST_METHOD" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: HTTP request method.</lead>
                            <detail>  Type: java.lang.String</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SERVLET_REQUEST" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: servlet request object.</lead>
                            <detail>  Type: javax.servlet.http.HttpServletRequest</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SERVLET_RESPONSE" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: servlet response object.</lead>
                            <detail>  Type: javax.servlet.http.HttpServletResponse</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SERVLET_CONTEXT" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: servlet context object.</lead>
                            <detail>  Type: javax.servlet.ServletContext</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="QUERY_STRING" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: Query string for request.</lead>
                            <detail>  Type: String</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="PATH_INFO" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: Request Path Info</lead>
                            <detail>  Type: String</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="REFERENCE_PARAMETERS" package="java.lang" type="String">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Standard property: WS Addressing Reference Parameters.</lead>
                            <detail>  The list MUST include all SOAP headers marked with the  wsa:IsReferenceParameter=&quot;true&quot; attribute.  Type: List</detail>
                        </comment>
                    </field>
                </fields>
                <methods>
                    <method modifiers="public" name="setScope">
                        <comment>
                            <lead>Sets the scope of a property.</lead>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>Name of the property associated with the              MessageContext</comment>
                            </parameter>
                            <parameter name="scope" package="javax.xml.ws.handler.MessageContext" type="MessageContext.Scope">
                                <comment>Desired scope of the property</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getScope">
                        <comment>
                            <lead>Gets the scope of a property.</lead>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>Name of the property</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.handler.MessageContext" type="MessageContext.Scope">
                            <comment>Scope of the property</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="LogicalMessageContext">
                <extends name="MessageContext" package="javax.xml.ws.handler"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The LogicalMessageContext interface extends    MessageContext to   provide access to a the contained message as a protocol neutral   LogicalMessage</lead>
                </comment>
                <methods>
                    <method modifiers="public" name="getMessage">
                        <comment>
                            <lead>Gets the message from this message context</lead>
                        </comment>
                        <returns package="javax.xml.ws" type="LogicalMessage">
                            <comment>The contained message; returns null if no            message is present in this message context</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="LogicalHandler">
                <extends name="Handler" package="javax.xml.ws.handler"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The LogicalHandler extends   Handler to provide typesafety for the message context parameter.</lead>
                </comment>
            </interface>
            <interface modifiers="public " name="HandlerResolver">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>HandlerResolver is an interface implemented   by an application to get control over the handler chain   set on proxy/dispatch objects at the time of their creation.</lead>
                    <detail>      A HandlerResolver may be set on a Service   using the setHandlerResolver method.     When the runtime invokes a HandlerResolver, it will   pass it a PortInfo object containing information   about the port that the proxy/dispatch object will be accessing.</detail>
                    <see class="Service" member="setHandlerResolver" package="javax.xml.ws"/>
                </comment>
                <methods>
                    <method modifiers="public" name="getHandlerChain">
                        <comment>
                            <lead>Gets the handler chain for the specified port.</lead>
                        </comment>
                        <parameters>
                            <parameter name="portInfo" package="javax.xml.ws.handler" type="PortInfo">
                                <comment>Contains information about the port being accessed.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.util" type="List">
                            <comment>java.util.List&amp;lt;Handler&gt; chain</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Handler">
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The Handler interface   is the base interface for JAX-WS handlers.</lead>
                </comment>
                <methods>
                    <method modifiers="public" name="handleMessage">
                        <comment>
                            <lead>The handleMessage method is invoked for normal processing   of inbound and outbound messages.</lead>
                            <detail> Refer to the description of the handler   framework in the JAX-WS specification for full details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="context" package="javax.xml.ws.handler" type="MessageContext">
                                <comment>the message context.</comment>
                            </parameter>
                        </parameters>
                        <returns type="boolean">
                            <comment>An indication of whether handler processing should continue for   the current message                                    Return true to continue                       processing.                  Return false to block                       processing.                   </comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="handleFault">
                        <comment>
                            <lead>The handleFault method is invoked for fault message    processing.</lead>
                            <detail>  Refer to the description of the handler   framework in the JAX-WS specification for full details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="context" package="javax.xml.ws.handler" type="MessageContext">
                                <comment>the message context</comment>
                            </parameter>
                        </parameters>
                        <returns type="boolean">
                            <comment>An indication of whether handler fault processing should continue    for the current message                                    Return true to continue                       processing.                  Return false to block                       processing.                   </comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="close">
                        <comment>
                            <lead>Called at the conclusion of a message exchange pattern just prior to  the JAX-WS runtime disptaching a message, fault or exception.</lead>
                            <detail>  Refer to  the description of the handler  framework in the JAX-WS specification for full details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="context" package="javax.xml.ws.handler" type="MessageContext">
                                <comment>the message context</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                </methods>
            </interface>
        </interfaces>
    </package>
    <package name="javax.xml.ws.handler.soap">
        <interfaces>
            <interface modifiers="public " name="SOAPMessageContext">
                <extends name="MessageContext" package="javax.xml.ws.handler"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The interface SOAPMessageContext    provides access to the SOAP message for either RPC request or    response.</lead>
                    <detail> The javax.xml.soap.SOAPMessage specifies   the standard Java API for the representation of a SOAP 1.1 message   with attachments.</detail>
                    <see class="SOAPMessage" package="javax.xml.soap"/>
                </comment>
                <methods>
                    <method modifiers="public" name="getMessage">
                        <comment>
                            <lead>Gets the SOAPMessage from this message context.</lead>
                            <detail> Modifications   to the returned SOAPMessage change the message in-place, there   is no need to susequently call setMessage.</detail>
                        </comment>
                        <returns package="javax.xml.soap" type="SOAPMessage">
                            <comment>Returns the SOAPMessage; returns null if no            SOAPMessage is present in this message context</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setMessage">
                        <comment>
                            <lead>Sets the SOAPMessage in this message context</lead>
                        </comment>
                        <parameters>
                            <parameter name="message" package="javax.xml.soap" type="SOAPMessage">
                                <comment>SOAP message</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getHeaders">
                        <comment>
                            <lead>Gets headers that have a particular qualified name from the message in the   message context.</lead>
                            <detail> Note that a SOAP message can contain multiple headers   with the same qualified name.</detail>
                        </comment>
                        <parameters>
                            <parameter name="header" package="javax.xml.namespace" type="QName">
                                <comment>The XML qualified name of the SOAP header(s).</comment>
                            </parameter>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXBContext that should be used to unmarshall the            header</comment>
                            </parameter>
                            <parameter name="allRoles" type="boolean">
                                <comment>If true then returns headers for all SOAP           roles, if false then only returns headers targetted           at the roles currently being played by this SOAP node, see           getRoles.</comment>
                            </parameter>
                        </parameters>
                        <returns dimension="[]" package="java.lang" type="Object">
                            <comment>An array of unmarshalled headers; returns an empty array if no            message is present in this message context or no headers match           the supplied qualified name.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getRoles">
                        <comment>
                            <lead>Gets the SOAP actor roles associated with an execution   of the handler chain.</lead>
                            <see class="SOAPBinding" member="setRoles" package="javax.xml.ws.soap"/>
                            <see class="SOAPBinding" member="getRoles" package="javax.xml.ws.soap"/>
                            <detail>   Note that SOAP actor roles apply to the SOAP node and   are managed using javax.xml.ws.soap.SOAPBinding#setRoles and   javax.xml.ws.soap.SOAPBinding#getRoles. Handler instances in   the handler chain use this information about the SOAP actor   roles to process the SOAP header blocks. Note that the   SOAP actor roles are invariant during the processing of   SOAP message through the handler chain.</detail>
                        </comment>
                        <returns package="java.util" type="Set">
                            <comment>Array of String for SOAP actor roles</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="SOAPHandler">
                <extends name="Handler" package="javax.xml.ws.handler"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The SOAPHandler class extends Handler   to provide typesafety for the message context parameter and add a method   to obtain access to the headers that may be processed by the handler.</lead>
                </comment>
                <methods>
                    <method modifiers="public" name="getHeaders">
                        <comment>
                            <lead>Gets the header blocks that can be processed by this Handler   instance.</lead>
                        </comment>
                        <returns package="java.util" type="Set">
                            <comment>Set of QNames of header blocks processed by this            handler instance. QName is the qualified             name of the outermost element of the Header block.</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
        </interfaces>
    </package>
    <package name="javax.xml.ws.http">
        <classes>
            <class modifiers="public" name="HTTPException">
                <extends name="ProtocolException" package="javax.xml.ws"/>
                <superclasses>
                    <superclass name="WebServiceException" package="javax.xml.ws"/>
                    <superclass name="RuntimeException" package="java.lang"/>
                    <superclass name="Exception" package="java.lang"/>
                    <superclass name="Throwable" package="java.lang"/>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The HTTPException exception represents a    XML/HTTP fault.</lead>
                    <detail>    Since there is no standard format for faults or exceptions   in XML/HTTP messaging, only the HTTP status code is captured.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructor for the HTTPException</lead>
                        </comment>
                        <parameters>
                            <parameter name="statusCode" type="int">
                                <comment>int for the HTTP status code</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getStatusCode">
                        <comment>
                            <lead>Gets the HTTP status code.</lead>
                        </comment>
                        <returns type="int">
                            <comment>HTTP status code</comment>
                        </returns>
                    </method>
                </methods>
            </class>
        </classes>
        <interfaces>
            <interface modifiers="public " name="HTTPBinding">
                <extends name="Binding" package="javax.xml.ws"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The HTTPBinding interface is an    abstraction for the XML/HTTP binding.</lead>
                </comment>
                <fields>
                    <field modifiers="public static final" name="HTTP_BINDING" package="java.lang" type="String">
                        <comment>
                            <lead>A constant representing the identity of the XML/HTTP binding.</lead>
                        </comment>
                    </field>
                </fields>
            </interface>
        </interfaces>
    </package>
    <package name="javax.xml.ws.soap">
        <classes>
            <class modifiers="public" name="SOAPFaultException">
                <extends name="ProtocolException" package="javax.xml.ws"/>
                <superclasses>
                    <superclass name="WebServiceException" package="javax.xml.ws"/>
                    <superclass name="RuntimeException" package="java.lang"/>
                    <superclass name="Exception" package="java.lang"/>
                    <superclass name="Throwable" package="java.lang"/>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The SOAPFaultException exception represents a   SOAP 1.1 or 1.2 fault.</lead>
                    <detail>    A SOAPFaultException wraps a SAAJ SOAPFault   that manages the SOAP-specific representation of faults.   The createFault method of   javax.xml.soap.SOAPFactory may be used to create an instance   of javax.xml.soap.SOAPFault for use with the   constructor. SOAPBinding contains an accessor for the   SOAPFactory used by the binding instance.    Note that the value of getFault is the only part of the   exception used when searializing a SOAP fault.    Refer to the SOAP specification for a complete   description of SOAP faults.</detail>
                    <see class="SOAPFault" package="javax.xml.soap"/>
                    <see class="SOAPBinding" member="getSOAPFactory" package="javax.xml.ws.soap"/>
                    <see class="ProtocolException" package="javax.xml.ws"/>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Constructor for SOAPFaultException</lead>
                            <see class="SOAPFactory" member="createFault" package="javax.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="fault" package="javax.xml.soap" type="SOAPFault">
                                <comment>SOAPFault representing the fault</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getFault">
                        <comment>
                            <lead>Gets the embedded SOAPFault instance.</lead>
                        </comment>
                        <returns package="javax.xml.soap" type="SOAPFault">
                            <comment>javax.xml.soap.SOAPFault SOAP           fault element</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public final" name="MTOMFeature">
                <extends name="WebServiceFeature" package="javax.xml.ws"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>This feature represents the use of MTOM with a   web service.</lead>
                    <see class="MTOMFeature" member="threshold" package="javax.xml.ws.soap"/>
                    <detail>     The following describes the affects of this feature with respect  to being enabled or disabled:      ENABLED: In this Mode, MTOM will be enabled.    DISABLED: In this Mode, MTOM will be disabled      The #threshold property can be used to set the threshold   value used to determine when binary data should be XOP encoded.</detail>
                </comment>
                <fields>
                    <field modifiers="public static final" name="ID" package="java.lang" type="String">
                        <comment>
                            <lead>Constant value identifying the MTOMFeature</lead>
                        </comment>
                    </field>
                    <field modifiers="protected" name="threshold" type="int">
                        <comment>
                            <lead>Property for MTOM threshold value.</lead>
                            <detail> This property serves as a hint when   MTOM is enabled, binary data above this size in bytes SHOULD be sent   as attachment.  The value of this property MUST always be &gt;= 0. Default value is 0.</detail>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Create an MTOMFeature.</lead>
                            <detail>  The instance created will be enabled.</detail>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates an MTOMFeature.</lead>
                        </comment>
                        <parameters>
                            <parameter name="enabled" type="boolean">
                                <comment>specifies if this feature should be enabled or not</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates an MTOMFeature.</lead>
                            <detail>  The instance created will be enabled.</detail>
                        </comment>
                        <parameters>
                            <parameter name="threshold" type="int">
                                <comment>the size in bytes that binary data SHOULD be before  being sent as an attachment.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates an MTOMFeature.</lead>
                        </comment>
                        <parameters>
                            <parameter name="enabled" type="boolean">
                                <comment>specifies if this feature should be enabled or not</comment>
                            </parameter>
                            <parameter name="threshold" type="int">
                                <comment>the size in bytes that binary data SHOULD be before  being sent as an attachment.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getID">
                        <comment>
                            <lead/>
                            <detail/>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="getThreshold">
                        <comment>
                            <lead>Gets the threshold value used to determine when binary data   should be sent as an attachment.</lead>
                        </comment>
                        <returns type="int">
                            <comment>the current threshold size in bytes</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public final" name="AddressingFeature">
                <extends name="WebServiceFeature" package="javax.xml.ws"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>This feature represents the use of WS-Addressing with either  the SOAP 1.1/HTTP or SOAP 1.2/HTTP binding.</lead>
                    <detail>  Using this feature  with any other binding is NOT required.    Enabling this feature on the client will cause the JAX-WS runtime  to include WS-Addressing headers in SOAP messages.     The following describes the effects of this feature with respect  to be enabled or disabled:      ENABLED: In this Mode, WS-Addressing will be enabled.        At runtime, WS-Addressing headers        MUST be consumed by the receiver and produced by the        sender even if the WSDL declares otherwise. The        mustUnderstand=&quot;0&quot; attribute MUST be used on the response WS-Addressing        headers. If a WSDL needs to be generated, it MUST contain a corresponding        wsam:Addressing policy assertion.    DISABLED: In this Mode, WS-Addressing will be disabled        even if an associated WSDL specifies otherwise. At runtime,        WS-Addressing headers MUST NOT be used. WS-Addressing may be explicitly        disabled to prevent a JAX-WS implementation from consuming and producing        WS-Addressing headers. If an application        has implemented WS-Addressing itself, it MUST explicitly disable this feature.         Not doing so may break compatibility with future versions of JAX-WS.      The required property determines whether the endpoint  requires WS-Addressing. If it is set true, WS-Addressing headers MUST  be present on incoming messages. By default the  required property is false.     If the web service developer has not explicitly enabled this feature,  corresponding WSDL&apos;s wsam:Addressing policy assertion is used to find  the use of WS-Addressing.  If addressing is enabled, a corresponding wsam:Addressing policy assertion  must be generated in the WSDL as per  3.1 WS-Policy Assertions</detail>
                    <see class="Addressing" package="javax.xml.ws.soap"/>
                </comment>
                <fields>
                    <field modifiers="public static final" name="ID" package="java.lang" type="String">
                        <comment>
                            <lead>Constant value identifying the AddressingFeature</lead>
                        </comment>
                    </field>
                    <field modifiers="protected final" name="required" type="boolean">
                        <comment>
                            <lead>Property for the required feature parameter.</lead>
                            <detail> When WS-Addressing   is enabled, the value of this property will be used  to specify if WS-Addressing headers MUST be present on incoming messages.  This   property only has meaning on the endpoint and has no  affect when used on the client.</detail>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Create an AddressingFeature.</lead>
                            <detail>  The instance created will be enabled.</detail>
                        </comment>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Create an AddressingFeature</lead>
                        </comment>
                        <parameters>
                            <parameter name="enabled" type="boolean">
                                <comment>specifies whether this feature should  be enabled or not.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Create an AddressingFeature</lead>
                        </comment>
                        <parameters>
                            <parameter name="enabled" type="boolean">
                                <comment>specifies whether this feature should  be enabled or not.</comment>
                            </parameter>
                            <parameter name="required" type="boolean">
                                <comment>specifies whether  WS-Addressing headers MUST be present on incoming messages. This property  only has meaning on the endpoint and has no affect when  used on the client.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Create an AddressingFeature</lead>
                        </comment>
                        <parameters>
                            <parameter name="enabled" type="boolean">
                                <comment>specifies whether this feature should  be enabled or not.</comment>
                            </parameter>
                            <parameter name="required" type="boolean">
                                <comment>specifies whether  WS-Addressing headers MUST be present on incoming messages. This property  only has meaning on the endpoint and has no affect when  used on the client.</comment>
                            </parameter>
                            <parameter name="responses" package="javax.xml.ws.soap.AddressingFeature" type="AddressingFeature.Responses">
                                <comment>specifies whether endpoint requires  the use of anonymous responses.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getID">
                        <comment>
                            <lead/>
                            <detail/>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="isRequired">
                        <comment>
                            <lead>Gets the boolean value used to determine if WS-Addressing  headers MUST be present on incoming messages.</lead>
                            <detail>  This property  only has meaning on the endpoint, and has no affect  when used on the client.</detail>
                        </comment>
                        <returns type="boolean">
                            <comment>the current required value</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getResponses">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>If addressing is enabled, this property determines if endpoint requires  the use of anonymous responses, or non-anonymous responses,  or all responses.</lead>
                            <detail/>
                        </comment>
                        <returns package="javax.xml.ws.soap.AddressingFeature" type="AddressingFeature.Responses">
                            <comment> Responses#ALL when endpoint supports all types of  responses           Responses#ANONYMOUS when endpoint requires the use of  only anonymous responses.           Responses#NON_ANONYMOUS when endpoint requires the use  of only non-anonymous responses.</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public static final" name="AddressingFeature.Responses">
                <extends name="Enum" package="java.lang"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.2</since>
                <comment>
                    <lead>If addressing is enabled, this property determines if endpoint requires  the use of only anonymous responses, or only non-anonymous responses, or all.</lead>
                    <see class="Responses" member="ALL" package="javax.xml.ws.soap.AddressingFeature"/>
                    <see class="Responses" member="ANONYMOUS" package="javax.xml.ws.soap.AddressingFeature"/>
                    <see class="Responses" member="NON_ANONYMOUS" package="javax.xml.ws.soap.AddressingFeature"/>
                    <detail>Responses#ALL supports all response types and this is the default  value.     Responses#ANONYMOUS requires the use of only anonymous  responses. It will result into wsam:AnonymousResponses nested assertion  as specified in    3.1.2 AnonymousResponses Assertion in the generated WSDL.     Responses#NON_ANONYMOUS requires the use of only non-anonymous  responses. It will result into  wsam:AnonymousResponses nested assertion as specified in    3.1.3 NonAnonymousResponses Assertion in the generated WSDL.</detail>
                </comment>
                <fields>
                    <field modifiers="public static final" name="ANONYMOUS" package="javax.xml.ws.soap.AddressingFeature" type="AddressingFeature.Responses">
                        <comment/>
                    </field>
                    <field modifiers="public static final" name="NON_ANONYMOUS" package="javax.xml.ws.soap.AddressingFeature" type="AddressingFeature.Responses">
                        <comment/>
                    </field>
                    <field modifiers="public static final" name="ALL" package="javax.xml.ws.soap.AddressingFeature" type="AddressingFeature.Responses">
                        <comment/>
                    </field>
                </fields>
                <methods>
                    <method modifiers="public static" name="values">
                        <comment/>
                        <returns dimension="[]" package="javax.xml.ws.soap.AddressingFeature" type="AddressingFeature.Responses"/>
                    </method>
                    <method modifiers="public static" name="valueOf">
                        <comment/>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String"/>
                        </parameters>
                        <returns package="javax.xml.ws.soap.AddressingFeature" type="AddressingFeature.Responses"/>
                    </method>
                </methods>
            </class>
        </classes>
        <interfaces>
            <interface modifiers="public " name="SOAPBinding">
                <extends name="Binding" package="javax.xml.ws"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>The SOAPBinding interface is an abstraction for   the SOAP binding.</lead>
                </comment>
                <fields>
                    <field modifiers="public static final" name="SOAP11HTTP_BINDING" package="java.lang" type="String">
                        <comment>
                            <lead>A constant representing the identity of the SOAP 1.1 over HTTP binding.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP12HTTP_BINDING" package="java.lang" type="String">
                        <comment>
                            <lead>A constant representing the identity of the SOAP 1.2 over HTTP binding.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP11HTTP_MTOM_BINDING" package="java.lang" type="String">
                        <comment>
                            <lead>A constant representing the identity of the SOAP 1.1 over HTTP binding  with MTOM enabled by default.</lead>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="SOAP12HTTP_MTOM_BINDING" package="java.lang" type="String">
                        <comment>
                            <lead>A constant representing the identity of the SOAP 1.2 over HTTP binding  with MTOM enabled by default.</lead>
                        </comment>
                    </field>
                </fields>
                <methods>
                    <method modifiers="public" name="getRoles">
                        <comment>
                            <lead>Gets the roles played by the SOAP binding instance.</lead>
                        </comment>
                        <returns package="java.util" type="Set">
                            <comment>Set The set of roles played by the binding instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setRoles">
                        <comment>
                            <lead>Sets the roles played by the SOAP binding instance.</lead>
                        </comment>
                        <parameters>
                            <parameter name="roles" package="java.util" type="Set">
                                <comment>The set of roles played by the binding instance.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="isMTOMEnabled">
                        <comment>
                            <lead>Returns true if the use of MTOM is enabled.</lead>
                        </comment>
                        <returns type="boolean">
                            <comment>true if and only if the use of MTOM is enabled.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setMTOMEnabled">
                        <comment>
                            <lead>Enables or disables use of MTOM.</lead>
                        </comment>
                        <parameters>
                            <parameter name="flag" type="boolean">
                                <comment>A boolean specifying whether the use of MTOM should                be enabled or disabled.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getSOAPFactory">
                        <comment>
                            <lead>Gets the SAAJ SOAPFactory instance used by this SOAP binding.</lead>
                        </comment>
                        <returns package="javax.xml.soap" type="SOAPFactory">
                            <comment>SOAPFactory instance used by this SOAP binding.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getMessageFactory">
                        <comment>
                            <lead>Gets the SAAJ MessageFactory instance used by this SOAP binding.</lead>
                        </comment>
                        <returns package="javax.xml.soap" type="MessageFactory">
                            <comment>MessageFactory instance used by this SOAP binding.</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="MTOM">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>This feature represents the use of MTOM with a   web service.</lead>
                    <see class="WebServiceProvider" package="javax.xml.ws"/>
                    <see class="WebServiceRef" package="javax.xml.ws"/>
                    <see class="WebServiceRefs" package="javax.xml.ws"/>
                    <see class="MTOM" member="threshold" package="javax.xml.ws.soap"/>
                    <detail>    This annotation MUST only be used in conjunction the  jakarta.jws.WebService, WebServiceProvider,  WebServiceRef, or WebServiceRefs annotations.    When used with the jakarta.jws.WebService annotation this  annotation MUST only be used on the service endpoint implementation  class.    This annotation has no affect when used with   WebServiceRef annotations that are used to specify a generated  service class. When used with WebServiceRef that specifies a  service endpoint interface (SEI), the injected SEI proxy MUST  honor the values of the MTOM annotation.    The following describes the affects of this feature with respect  to being enabled or disabled:      ENABLED: In this Mode, MTOM will be enabled.    DISABLED: In this Mode, MTOM will be disabled      The #threshold property can be used to set the threshold   value used to determine when binary data should be XOP encoded.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="enabled">
                        <comment>
                            <lead>Specifies if this feature is enabled or disabled.</lead>
                        </comment>
                        <returns type="boolean"/>
                    </method>
                    <method modifiers="public" name="threshold">
                        <comment>
                            <lead>Property for MTOM threshold value.</lead>
                            <detail> When MTOM is enabled, binary data above this   size in bytes will be XOP encoded or sent as attachment. The value of this property   MUST always be &gt;= 0. Default value is 0.</detail>
                        </comment>
                        <returns type="int"/>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="Addressing">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>  This feature represents the use of WS-Addressing with either  the SOAP 1.1/HTTP or SOAP 1.2/HTTP binding.</lead>
                    <see/>
                    <see class="WebServiceProvider" package="javax.xml.ws"/>
                    <see class="WebServiceRef" package="javax.xml.ws"/>
                    <see class="WebServiceRefs" package="javax.xml.ws"/>
                    <detail>  Using this feature  with any other binding is NOT required.    This annotation MUST only be used in conjunction with the  jakarta.jws.WebService, WebServiceProvider,  WebServiceRef, or WebServiceRefs annotations.    When used with the jakarta.jws.WebService annotation, this  annotation MUST only be used on the service endpoint implementation  class.    This annotation has no affect when used with   WebServiceRef, WebServiceRefs annotations that are used to specify a generated  service class. When used with WebServiceRef that specifies a  service endpoint interface (SEI), the injected SEI proxy MUST  honor the values of the Addressing annotation.     The following describes the effects of this feature with respect  to be enabled or disabled:      ENABLED: In this Mode, WS-Addressing will be enabled.        At runtime, WS-Addressing headers        MUST be consumed by the receiver and produced by the        sender even if the WSDL declares otherwise. The        mustUnderstand=&quot;0&quot; attribute MUST be used on the response WS-Addressing        headers. If a WSDL needs to be generated, it MUST contain a corresponding        wsam:Addressing policy assertion.    DISABLED: In this Mode, WS-Addressing will be disabled        even if an associated WSDL specifies otherwise. At runtime,        WS-Addressing headers MUST NOT be used. WS-Addressing may be explicitly        disabled to prevent a JAX-WS implementation from consuming and producing        WS-Addressing headers. If an application        has implemented WS-Addressing itself, it MUST explicitly disable this feature.         Not doing so may break compatibility with future versions of JAX-WS.      The required property determines whether the endpoint  requires WS-Addressing. If it is set true, WS-Addressing headers MUST  be present on incoming messages. By default the  required property is false.     If the web service developer has not explicitly enabled this feature,  corresponding WSDL&apos;s wsam:Addressing policy assertion is used to find  the use of WS-Addressing.  If addressing is enabled, a corresponding wsam:Addressing policy assertion  must be generated in the WSDL as per  3.1 WS-Policy Assertions     Example 1: Possible Policy Assertion in the generated WSDL for  &amp;#64;Addressing      &amp;lt;wsam:Addressing wsp:Optional=&quot;true&quot;&gt;      &amp;lt;wsp:Policy/&gt;    &amp;lt;/wsam:Addressing&gt;       Example 2: Possible Policy Assertion in the generated WSDL for  &amp;#64;Addressing(required=true)      &amp;lt;wsam:Addressing&gt;      &amp;lt;wsp:Policy/&gt;    &amp;lt;/wsam:Addressing&gt;       Example 3: Possible Policy Assertion in the generated WSDL for  &amp;#64;Addressing(required=true, responses=Responses.ANONYMOUS)      &amp;lt;wsam:Addressing&gt;       &amp;lt;wsp:Policy&gt;         &amp;lt;wsam:AnonymousResponses/&gt;       &amp;lt;/wsp:Policy&gt;    &amp;lt;/wsam:Addressing&gt;       See Web Services Addressing - Core,  Web Services Addressing 1.0 - SOAP Binding,  and Web Services Addressing 1.0 - Metadata  for more information on WS-Addressing.</detail>
                </comment>
                <methods>
                    <method modifiers="public" name="enabled">
                        <comment>
                            <lead>Specifies if this feature is enabled or disabled.</lead>
                            <detail> If enabled, it means the  endpoint supports WS-Addressing but does not require its use. Corresponding    3.1.1 Addressing Assertion must be generated in the generated WSDL.</detail>
                        </comment>
                        <returns type="boolean"/>
                    </method>
                    <method modifiers="public" name="required">
                        <comment>
                            <lead>If addressing is enabled, this property determines whether the endpoint  requires WS-Addressing.</lead>
                            <detail> If required is true, the endpoint requires  WS-Addressing and WS-Addressing headers MUST  be present on incoming messages. A corresponding    3.1.1 Addressing Assertion must be generated in the WSDL.</detail>
                        </comment>
                        <returns type="boolean"/>
                    </method>
                    <method modifiers="public" name="responses">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>If addressing is enabled, this property determines if endpoint requires  the use of anonymous responses, or non-anonymous responses, or all.</lead>
                            <see class="Responses" member="ALL" package="javax.xml.ws.soap.AddressingFeature"/>
                            <see class="Responses" member="ANONYMOUS" package="javax.xml.ws.soap.AddressingFeature"/>
                            <see class="Responses" member="NON_ANONYMOUS" package="javax.xml.ws.soap.AddressingFeature"/>
                            <detail>Responses#ALL supports all response types and this is the default  value.     Responses#ANONYMOUS requires the use of only anonymous  responses. It will result into wsam:AnonymousResponses nested assertion  as specified in    3.1.2 AnonymousResponses Assertion in the generated WSDL.     Responses#NON_ANONYMOUS requires the use of only non-anonymous  responses. It will result into  wsam:AnonymousResponses nested assertion as specified in    3.1.3 NonAnonymousResponses Assertion in the generated WSDL.</detail>
                        </comment>
                        <returns package="javax.xml.ws.soap.AddressingFeature" type="AddressingFeature.Responses"/>
                    </method>
                </methods>
            </interface>
        </interfaces>
    </package>
    <package name="javax.xml.ws.spi">
        <classes>
            <class modifiers="public abstract" name="ApplicationContext">
                <extends name="Object" package="java.lang"/>
                <author>Jitendra Kotamraju</author>
                <since>JAX-WS 2.2</since>
                <comment>
                    <lead>Capturs an application which may consists multiple endpoints.</lead>
                    <detail>  For example, in servlet container a war represents an application  and war may contain multiple endpoints. This context allows one  endpoint to get information about other endpoint, for example,   address. It also allows all endpoints to share any other  runtime information.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public abstract" name="getEndpoints">
                        <comment>
                            <lead>This gives list of endpoints in an application.</lead>
                            <detail> For e.g in  servlet container, a war file may contain multiple endpoints.</detail>
                        </comment>
                        <returns package="java.util" type="Set">
                            <comment>list of all endpoints in an application</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="ServiceDelegate">
                <extends name="Object" package="java.lang"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Service delegates are used internally by Service objects  to allow pluggability of JAX-WS implementations.</lead>
                    <see class="Provider" member="createServiceDelegate" package="javax.xml.ws.spi"/>
                    <detail>    Every Service object has its own delegate, created using  the javax.xml.ws.spi.Provider#createServiceDelegate method. A Service  object delegates all of its instance methods to its delegate.</detail>
                    <see class="Service" package="javax.xml.ws"/>
                    <see class="Provider" package="javax.xml.ws.spi"/>
                </comment>
                <constructors>
                    <constructor modifiers="protected">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public abstract" name="getPort">
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> A service client  uses this proxy to invoke operations on the target  service endpoint. The serviceEndpointInterface  specifies the service endpoint interface that is supported by  the created dynamic proxy instance.</detail>
                            <see class="Proxy" package="java.lang.reflect"/>
                            <see class="InvocationHandler" package="java.lang.reflect"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name of the service endpoint in                   the WSDL service description</comment>
                            </parameter>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface                   supported by the dynamic proxy</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object Proxy instance that                 supports the specified service endpoint                 interface</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getPort">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> A service client  uses this proxy to invoke operations on the target  service endpoint. The serviceEndpointInterface  specifies the service endpoint interface that is supported by  the created dynamic proxy instance.</detail>
                            <see class="Proxy" package="java.lang.reflect"/>
                            <see class="InvocationHandler" package="java.lang.reflect"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name of the service endpoint in                   the WSDL service description</comment>
                            </parameter>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface                   supported by the dynamic proxy or instance</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object Proxy instance that                 supports the specified service endpoint                 interface</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getPort">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail>  The parameter endpointReference specifies the  endpoint that will be invoked by the returned proxy.  If there  are any reference parameters in the   endpointReference, then those reference  parameters MUST appear as SOAP headers, indicating them to be  reference parameters, on all messages sent to the endpoint.  The endpointReference&apos;s address MUST be used  for invocations on the endpoint.  The parameter serviceEndpointInterface specifies  the service endpoint interface that is supported by the   returned proxy.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the proxy accordingly from  the WSDL associated with this Service instance or  from the metadata from the endpointReference.  If this Service instance has a WSDL and   the endpointReference metadata   also has a WSDL, then the WSDL from this instance MUST be used.  If this Service instance does not have a WSDL and  the endpointReference does have a WSDL, then the   WSDL from the endpointReference MAY be used.  The returned proxy should not be reconfigured by the client.  If this Service instance has a known proxy   port that matches the information contained in   the WSDL,  then that proxy is returned, otherwise a WebServiceException  is thrown.    Calling this method has the same behavior as the following    port = service.getPort(portName, serviceEndpointInterface);    where the portName is retrieved from the    metadata of the endpointReference or from the   serviceEndpointInterface and the WSDL  associated with this Service instance.</detail>
                        </comment>
                        <parameters>
                            <parameter name="endpointReference" package="javax.xml.ws" type="EndpointReference">
                                <comment>The EndpointReference  for the target service endpoint that will be invoked by the  returned proxy.</comment>
                            </parameter>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object Proxy instance that supports the                   specified service endpoint interface.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getPort">
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> The parameter  serviceEndpointInterface specifies the service  endpoint interface that is supported by the returned proxy.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the proxy accordingly.  The returned proxy should not be reconfigured by the client.</detail>
                        </comment>
                        <parameters>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object instance that supports the                   specified service endpoint interface</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getPort">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail> The parameter  serviceEndpointInterface specifies the service  endpoint interface that is supported by the returned proxy.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the proxy accordingly.  The returned proxy should not be reconfigured by the client.</detail>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>An array of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object instance that supports the                   specified service endpoint interface</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="addPort">
                        <comment>
                            <lead>Creates a new port for the service.</lead>
                            <detail> Ports created in this way contain  no WSDL port type information and can only be used for creating  Dispatchinstances.</detail>
                            <see class="SOAPBinding" member="SOAP11HTTP_BINDING" package="javax.xml.ws.soap"/>
                            <see class="SOAPBinding" member="SOAP12HTTP_BINDING" package="javax.xml.ws.soap"/>
                            <see class="HTTPBinding" member="HTTP_BINDING" package="javax.xml.ws.http"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="bindingId" package="java.lang" type="String">
                                <comment>A URI identifier of a binding.</comment>
                            </parameter>
                            <parameter name="endpointAddress" package="java.lang" type="String">
                                <comment>Address of the target service endpoint as a URI</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="createDispatch">
                        <comment>
                            <lead>Creates a Dispatch instance for use with objects of  the user&apos;s choosing.</lead>
                            <see class="Source" package="javax.xml.transform"/>
                            <see class="SOAPMessage" package="javax.xml.soap"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="type" package="java.lang" type="Class">
                                <comment>The class of object used for messages or message  payloads. Implementations are required to support  javax.xml.transform.Source and javax.xml.soap.SOAPMessage.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the user will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the user will work with  SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE  when type is SOAPMessage.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createDispatch">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Creates a Dispatch instance for use with objects of  the user&apos;s choosing.</lead>
                            <see class="Source" package="javax.xml.transform"/>
                            <see class="SOAPMessage" package="javax.xml.soap"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="type" package="java.lang" type="Class">
                                <comment>The class of object used for messages or message  payloads. Implementations are required to support  javax.xml.transform.Source and javax.xml.soap.SOAPMessage.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the user will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the user will work with  SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE  when type is SOAPMessage.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createDispatch">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Creates a Dispatch instance for use with objects of  the user&apos;s choosing.</lead>
                            <detail> If there  are any reference parameters in the   endpointReference, then those reference  parameters MUST appear as SOAP headers, indicating them to be  reference parameters, on all messages sent to the endpoint.  The endpointReference&apos;s address MUST be used  for invocations on the endpoint.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the dispatch accordingly from  the WSDL associated with this Service instance or  from the metadata from the endpointReference.  If this Service instance has a WSDL and   the endpointReference  also has a WSDL in its metadata, then the WSDL from this instance MUST be used.  If this Service instance does not have a WSDL and  the endpointReference does have a WSDL, then the   WSDL from the endpointReference MAY be used.   An implementation MUST be able to retrieve the portName from the  endpointReference metadata.      This method behaves the same as calling    dispatch = service.createDispatch(portName, type, mode, features);    where the portName is retrieved from the   WSDL or EndpointReference metadata.</detail>
                            <see class="Source" package="javax.xml.transform"/>
                            <see class="SOAPMessage" package="javax.xml.soap"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="endpointReference" package="javax.xml.ws" type="EndpointReference">
                                <comment>The EndpointReference  for the target service endpoint that will be invoked by the  returned Dispatch object.</comment>
                            </parameter>
                            <parameter name="type" package="java.lang" type="Class">
                                <comment>The class of object used to messages or message  payloads. Implementations are required to support  javax.xml.transform.Source and javax.xml.soap.SOAPMessage.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the user will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the user will work with  SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE  when type is SOAPMessage.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>An array of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createDispatch">
                        <comment>
                            <lead>Creates a Dispatch instance for use with JAXB  generated objects.</lead>
                            <see class="JAXBContext" package="javax.xml.bind"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXB context used to marshall and unmarshall  messages or message payloads.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the user will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the user will work with  SOAP messages or the contents of a SOAP body.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createDispatch">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Creates a Dispatch instance for use with JAXB  generated objects.</lead>
                            <see class="JAXBContext" package="javax.xml.bind"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name for the target service endpoint</comment>
                            </parameter>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXB context used to marshall and unmarshall  messages or message payloads.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the user will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the user will work with  SOAP messages or the contents of a SOAP body.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createDispatch">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Creates a Dispatch instance for use with JAXB  generated objects.</lead>
                            <detail> If there  are any reference parameters in the   endpointReference, then those reference  parameters MUST appear as SOAP headers, indicating them to be  reference parameters, on all messages sent to the endpoint.  The endpointReference&apos;s address MUST be used  for invocations on the endpoint.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the dispatch accordingly from  the WSDL associated with this Service instance or  from the metadata from the endpointReference.  If this Service instance has a WSDL and   the endpointReference  also has a WSDL in its metadata, then the WSDL from this instance  MUST be used.  If this Service instance does not have a WSDL and  the endpointReference does have a WSDL, then the   WSDL from the endpointReference MAY be used.        An implementation MUST be able to retrieve the portName from the  endpointReference metadata.      This method behavies the same as calling    dispatch = service.createDispatch(portName, context, mode, features);    where the portName is retrieved from the   WSDL or endpointReference metadata.</detail>
                            <see class="JAXBContext" package="javax.xml.bind"/>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="endpointReference" package="javax.xml.ws" type="EndpointReference">
                                <comment>The EndpointReference  for the target service endpoint that will be invoked by the  returned Dispatch object.</comment>
                            </parameter>
                            <parameter name="context" package="javax.xml.bind" type="JAXBContext">
                                <comment>The JAXB context used to marshall and unmarshall  messages or message payloads.</comment>
                            </parameter>
                            <parameter name="mode" package="javax.xml.ws.Service" type="Service.Mode">
                                <comment>Controls whether the created dispatch instance is message  or payload oriented, i.e. whether the user will work with complete  protocol messages or message payloads. E.g. when using the SOAP  protocol, this parameter controls whether the user will work with  SOAP messages or the contents of a SOAP body.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>An array of WebServiceFeatures to configure on the                  proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Dispatch">
                            <comment>Dispatch instance</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getServiceName">
                        <comment>
                            <lead>Gets the name of this service.</lead>
                        </comment>
                        <returns package="javax.xml.namespace" type="QName">
                            <comment>Qualified name of this service</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getPorts">
                        <comment>
                            <lead>Returns an Iterator for the list of  QNames of service endpoints grouped by this  service</lead>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>Returns java.util.Iterator with elements          of type javax.xml.namespace.QName</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getWSDLDocumentLocation">
                        <comment>
                            <lead>Gets the location of the WSDL document for this Service.</lead>
                        </comment>
                        <returns package="java.net" type="URL">
                            <comment>URL for the location of the WSDL document for          this service</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getHandlerResolver">
                        <comment>
                            <lead>Returns the configured handler resolver.</lead>
                        </comment>
                        <returns package="javax.xml.ws.handler" type="HandlerResolver">
                            <comment>HandlerResolver The HandlerResolver being          used by this Service instance, or null          if there isn&apos;t one.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="setHandlerResolver">
                        <comment>
                            <lead>Sets the HandlerResolver for this Service  instance.</lead>
                            <detail>    The handler resolver, if present, will be called once for each  proxy or dispatch instance that is created, and the handler chain  returned by the resolver will be set on the instance.</detail>
                            <see class="HandlerResolver" package="javax.xml.ws.handler"/>
                        </comment>
                        <parameters>
                            <parameter name="handlerResolver" package="javax.xml.ws.handler" type="HandlerResolver">
                                <comment>The HandlerResolver to use         for all subsequently created proxy/dispatch objects.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getExecutor">
                        <comment>
                            <lead>Returns the executor for this Serviceinstance.</lead>
                            <detail>   The executor is used for all asynchronous invocations that  require callbacks.</detail>
                            <see class="Executor" package="java.util.concurrent"/>
                        </comment>
                        <returns package="java.util.concurrent" type="Executor">
                            <comment>The java.util.concurrent.Executor to be          used to invoke a callback.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="setExecutor">
                        <comment>
                            <lead>Sets the executor for this Service instance.</lead>
                            <detail>   The executor is used for all asynchronous invocations that  require callbacks.</detail>
                            <see class="Executor" package="java.util.concurrent"/>
                        </comment>
                        <parameters>
                            <parameter name="executor" package="java.util.concurrent" type="Executor">
                                <comment>The java.util.concurrent.Executor         to be used to invoke a callback.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                </methods>
            </class>
            <class modifiers="public abstract" name="Provider">
                <extends name="Object" package="java.lang"/>
                <since>JAX-WS 2.0</since>
                <comment>
                    <lead>Service provider for ServiceDelegate and  Endpoint objects.</lead>
                    <detail/>
                </comment>
                <fields>
                    <field modifiers="public static final" name="JAXWSPROVIDER_PROPERTY" package="java.lang" type="String">
                        <comment>
                            <lead>A constant representing the property used to lookup the  name of a Provider implementation  class.</lead>
                        </comment>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="protected">
                        <comment>
                            <lead>Creates a new instance of Provider</lead>
                        </comment>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public static" name="provider">
                        <comment>
                            <lead>Creates a new provider object.</lead>
                            <detail>    The algorithm used to locate the provider subclass to use consists  of the following steps:          If a resource with the name of    META-INF/services/javax.xml.ws.spi.Provider    exists, then its first line, if present, is used as the UTF-8 encoded    name of the implementation class.        If the $java.home/lib/jaxws.properties file exists and it is readable by    the java.util.Properties.load(InputStream) method and it contains    an entry whose key is javax.xml.ws.spi.Provider, then the value of    that entry is used as the name of the implementation class.        If a system property with the name javax.xml.ws.spi.Provider    is defined, then its value is used as the name of the implementation class.        Finally, a default implementation class name is used.    </detail>
                        </comment>
                        <returns package="javax.xml.ws.spi" type="Provider"/>
                    </method>
                    <method modifiers="public abstract" name="createServiceDelegate">
                        <comment>
                            <lead>Creates a service delegate object.</lead>
                            <detail/>
                        </comment>
                        <parameters>
                            <parameter name="wsdlDocumentLocation" package="java.net" type="URL">
                                <comment>A URL pointing to the WSDL document         for the service, or null if there isn&apos;t one.</comment>
                            </parameter>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>The qualified name of the service.</comment>
                            </parameter>
                            <parameter name="serviceClass" package="java.lang" type="Class">
                                <comment>The service class, which MUST be either         javax.xml.ws.Service or a subclass thereof.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.spi" type="ServiceDelegate">
                            <comment>The newly created service delegate.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createServiceDelegate">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>Creates a service delegate object.</lead>
                            <detail/>
                        </comment>
                        <parameters>
                            <parameter name="wsdlDocumentLocation" package="java.net" type="URL">
                                <comment>A URL pointing to the WSDL document         for the service, or null if there isn&apos;t one.</comment>
                            </parameter>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>The qualified name of the service.</comment>
                            </parameter>
                            <parameter name="serviceClass" package="java.lang" type="Class">
                                <comment>The service class, which MUST be either         javax.xml.ws.Service or a subclass thereof.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>Web Service features that must be configured on         the service. If the provider doesn&apos;t understand a feature,         it must throw a WebServiceException.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.spi" type="ServiceDelegate">
                            <comment>The newly created service delegate.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createEndpoint">
                        <comment>
                            <lead>Creates an endpoint object with the provided binding and implementation  object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="bindingId" package="java.lang" type="String">
                                <comment>A URI specifying the desired binding (e.g. SOAP/HTTP)</comment>
                            </parameter>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>A service implementation object to which         incoming requests will be dispatched. The corresponding         class MUST be annotated with all the necessary Web service         annotations.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createAndPublishEndpoint">
                        <comment>
                            <lead>Creates and publishes an endpoint object with the specified  address and implementation object.</lead>
                        </comment>
                        <parameters>
                            <parameter name="address" package="java.lang" type="String">
                                <comment>A URI specifying the address and transport/protocol         to use. A http: URI MUST result in the SOAP 1.1/HTTP         binding being used. Implementations may support other         URI schemes.</comment>
                            </parameter>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>A service implementation object to which         incoming requests will be dispatched. The corresponding         class MUST be annotated with all the necessary Web service         annotations.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="readEndpointReference">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>read an EndpointReference from the infoset contained in  eprInfoset.</lead>
                        </comment>
                        <parameters>
                            <parameter name="eprInfoset" package="javax.xml.transform" type="Source">
                                <comment>infoset for EndpointReference</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="EndpointReference">
                            <comment>the EndpointReference unmarshalled from  eprInfoset.  This method never returns null.</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getPort">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>The getPort method returns a proxy.</lead>
                            <detail>  If there  are any reference parameters in the  endpointReference, then those reference  parameters MUST appear as SOAP headers, indicating them to be  reference parameters, on all messages sent to the endpoint.  The parameter  serviceEndpointInterface specifies  the service endpoint interface that is supported by the  returned proxy.  The parameter endpointReference specifies the  endpoint that will be invoked by the returned proxy.  In the implementation of this method, the JAX-WS  runtime system takes the responsibility of selecting a protocol  binding (and a port) and configuring the proxy accordingly from  the WSDL metadata of the  serviceEndpointInterface and the EndpointReference.   For this method  to successfully return a proxy, WSDL metadata MUST be available and the  endpointReference MUST contain an implementation understood  serviceName metadata.</detail>
                            <see class="WebServiceFeature" package="javax.xml.ws"/>
                        </comment>
                        <parameters>
                            <parameter name="endpointReference" package="javax.xml.ws" type="EndpointReference">
                                <comment>the EndpointReference that will  be invoked by the returned proxy.</comment>
                            </parameter>
                            <parameter name="serviceEndpointInterface" package="java.lang" type="Class">
                                <comment>Service endpoint interface</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the                 proxy.  Supported features not in the features                  parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>Object Proxy instance that supports the                   specified service endpoint interface</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="createW3CEndpointReference">
                        <since>JAX-WS 2.1</since>
                        <comment>
                            <lead>Factory method to create a W3CEndpointReference.</lead>
                            <detail>     This method can be used to create a W3CEndpointReference  for any endpoint by specifying the address property along  with any other desired properties.  This method  can also be used to create a W3CEndpointReference for  an endpoint that is published by the same Java EE application.  To do so the address property can be provided or this  method can automatically determine the address of   an endpoint that is published by the same Java EE application and is  identified by the serviceName and   portName propeties.  If the address is   null and the serviceName and   portName do not identify an endpoint published by the   same Java EE application, a  javax.lang.IllegalStateException MUST be thrown.</detail>
                        </comment>
                        <parameters>
                            <parameter name="address" package="java.lang" type="String">
                                <comment>Specifies the address of the target endpoint</comment>
                            </parameter>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name of the service in the WSDL.</comment>
                            </parameter>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name of the endpoint in the WSDL.</comment>
                            </parameter>
                            <parameter name="metadata" package="java.util" type="List">
                                <comment>A list of elements that should be added to the   W3CEndpointReference instances wsa:metadata   element.</comment>
                            </parameter>
                            <parameter name="wsdlDocumentLocation" package="java.lang" type="String">
                                <comment>URL for the WSDL document location for   the service.</comment>
                            </parameter>
                            <parameter name="referenceParameters" package="java.util" type="List">
                                <comment>Reference parameters to be associated   with the returned EndpointReference instance.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReference">
                            <comment>the W3CEndpointReference created from            serviceName, portName,           metadata, wsdlDocumentLocation            and referenceParameters. This method           never returns null.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createW3CEndpointReference">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>Factory method to create a W3CEndpointReference.</lead>
                            <detail>  Using this method, a W3CEndpointReference instance  can be created with extension elements, and attributes.  Provider implementations must override the default  implementation.     This method can be used to create a W3CEndpointReference  for any endpoint by specifying the address property along  with any other desired properties.  This method  can also be used to create a W3CEndpointReference for  an endpoint that is published by the same Java EE application.  To do so the address property can be provided or this  method can automatically determine the address of  an endpoint that is published by the same Java EE application and is  identified by the serviceName and  portName propeties.  If the address is  null and the serviceName and  portName do not identify an endpoint published by the  same Java EE application, a  javax.lang.IllegalStateException MUST be thrown.</detail>
                        </comment>
                        <parameters>
                            <parameter name="address" package="java.lang" type="String">
                                <comment>Specifies the address of the target endpoint</comment>
                            </parameter>
                            <parameter name="interfaceName" package="javax.xml.namespace" type="QName"/>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name of the service in the WSDL.</comment>
                            </parameter>
                            <parameter name="portName" package="javax.xml.namespace" type="QName">
                                <comment>Qualified name of the endpoint in the WSDL.</comment>
                            </parameter>
                            <parameter name="metadata" package="java.util" type="List">
                                <comment>A list of elements that should be added to the  W3CEndpointReference instances wsa:metadata  element.</comment>
                            </parameter>
                            <parameter name="wsdlDocumentLocation" package="java.lang" type="String">
                                <comment>URL for the WSDL document location for  the service.</comment>
                            </parameter>
                            <parameter name="referenceParameters" package="java.util" type="List">
                                <comment>Reference parameters to be associated  with the returned EndpointReference instance.</comment>
                            </parameter>
                            <parameter name="elements" package="java.util" type="List">
                                <comment>extension elements to be associated  with the returned EndpointReference instance.</comment>
                            </parameter>
                            <parameter name="attributes" package="java.util" type="Map">
                                <comment>extension attributes to be associated  with the returned EndpointReference instance.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReference">
                            <comment>the W3CEndpointReference created from           serviceName, portName,           metadata, wsdlDocumentLocation           and referenceParameters. This method           never returns null.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createAndPublishEndpoint">
                        <since>2.2</since>
                        <comment>
                            <lead>Creates and publishes an endpoint object with the specified  address, implementation object and web service features.</lead>
                            <detail>  Provider implementations must override the  default implementation.</detail>
                        </comment>
                        <parameters>
                            <parameter name="address" package="java.lang" type="String">
                                <comment>A URI specifying the address and transport/protocol         to use. A http: URI MUST result in the SOAP 1.1/HTTP         binding being used. Implementations may support other         URI schemes.</comment>
                            </parameter>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>A service implementation object to which         incoming requests will be dispatched. The corresponding         class MUST be annotated with all the necessary Web service         annotations.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the         endpoint.  Supported features not in the features          parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createEndpoint">
                        <since>2.2</since>
                        <comment>
                            <lead>Creates an endpoint object with the provided binding, implementation  object and web service features.</lead>
                            <detail> Provider implementations  must override the default implementation.</detail>
                        </comment>
                        <parameters>
                            <parameter name="bindingId" package="java.lang" type="String">
                                <comment>A URI specifying the desired binding (e.g. SOAP/HTTP)</comment>
                            </parameter>
                            <parameter name="implementor" package="java.lang" type="Object">
                                <comment>A service implementation object to which         incoming requests will be dispatched. The corresponding         class MUST be annotated with all the necessary Web service         annotations.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the         endpoint.  Supported features not in the features          parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="createEndpoint">
                        <since>2.2</since>
                        <comment>
                            <lead>Creates an endpoint object with the provided binding, implementation  class, invoker and web service features.</lead>
                            <detail> Containers typically use  this to create Endpoint objects. Provider  implementations must override the default implementation.</detail>
                        </comment>
                        <parameters>
                            <parameter name="bindingId" package="java.lang" type="String">
                                <comment>A URI specifying the desired binding (e.g. SOAP/HTTP).         Can be null.</comment>
                            </parameter>
                            <parameter name="implementorClass" package="java.lang" type="Class">
                                <comment>A service implementation class that         MUST be annotated with all the necessary Web service         annotations.</comment>
                            </parameter>
                            <parameter name="invoker" package="javax.xml.ws.spi" type="Invoker">
                                <comment>that does the actual invocation on the service instance.</comment>
                            </parameter>
                            <parameter dimension="[]" name="features" package="javax.xml.ws" type="WebServiceFeature">
                                <comment>A list of WebServiceFeatures to configure on the         endpoint.  Supported features not in the features          parameter will have their default values.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws" type="Endpoint">
                            <comment>The newly created endpoint.</comment>
                        </returns>
                    </method>
                </methods>
            </class>
        </classes>
        <interfaces>
            <interface modifiers="public " name="Invoker">
                <author>Jitendra Kotamraju</author>
                <since>JAX-WS 2.2</since>
                <comment>
                    <lead>Invoker hides the detail of calling into application endpoint  implementation.</lead>
                    <see class="Invoker" member="invoke" package="javax.xml.ws.spi"/>
                    <detail> Container hands over an implementation of Invoker  to JAX-WS runtime, and jax-ws runtime calls #invoke  for a web service invocation. Finally, Invoker does the actual  invocation of web service on endpoint instance.</detail>
                    <see class="Provider" member="createEndpoint(String, Class, Invoker, WebServiceFeature[])" package="javax.xml.ws.spi"/>
                </comment>
                <methods>
                    <method modifiers="public" name="inject">
                        <comment>
                            <lead>JAX-WS runtimes calls this method to ask container to inject  WebServiceContext on the endpoint instance.</lead>
                        </comment>
                        <parameters>
                            <parameter name="webServiceContext" package="javax.xml.ws" type="WebServiceContext">
                                <comment>a holder for MessageContext</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="java.lang.IllegalAccessException">if the injection done          by reflection API throws this exception</throw>
                            <throw name="java.lang.IllegalArgumentException">if the injection done          by reflection API throws this exception</throw>
                            <throw name="java.lang.reflect.InvocationTargetException">if the injection done          by reflection API throws this exception   TODO what about @PostConstruct, @PreDestroy. Whose responsibility  TODO to invoke them ?</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="invoke">
                        <comment>
                            <lead>JAX-WS runtime calls this method to do the actual web service  invocation on endpoint instance.</lead>
                            <see class="Method" member="invoke" package="java.lang.reflect"/>
                        </comment>
                        <parameters>
                            <parameter name="m" package="java.lang.reflect" type="Method">
                                <comment>Method to be invoked on the service</comment>
                            </parameter>
                            <parameter dimension="[]" name="args" package="java.lang" type="Object">
                                <comment>Method arguments</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>return value of the method</comment>
                        </returns>
                        <throws>
                            <throw name="java.lang.IllegalAccessException">if the invocation done          by reflection API throws this exception</throw>
                            <throw name="java.lang.IllegalArgumentException">if the invocation done          by reflection API throws this exception</throw>
                            <throw name="java.lang.reflect.InvocationTargetException">if the invocation done          by reflection API throws this exception</throw>
                        </throws>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="WebServiceFeatureAnnotation">
                <extends name="Annotation" package="java.lang.annotation"/>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>Annotation used to identify other annotations  as a WebServiceFeature.</lead>
                    <see class="WebServiceRef" package="javax.xml.ws"/>
                    <see class="WebServiceRefs" package="javax.xml.ws"/>
                    <see class="WebServiceRef" package="javax.xml.ws"/>
                    <see class="WebServiceRefs" package="javax.xml.ws"/>
                    <detail>    Each WebServiceFeature annotation annotated with  this annotation MUST contain an   enabled property of type  boolean with a default value of true.     JAX-WS defines the following  WebServiceFeature annotations (Addressing,   MTOM, RespectBinding), however, an implementation  may define vendors specific annotations for other features.    Annotations annotated with WebServiceFeatureAnnotation MUST  have the same @Target of WebServiceRef and  WebServiceRefs annotations, so that the resulting  feature annotation can be used in conjunction with the WebServiceRef  and WebServiceRefs annotations if necessary.    If a JAX-WS implementation encounters an annotation annotated  with the WebServiceFeatureAnnotation that it does not  recognize/support an error MUST be given.  </detail>
                    <see class="Addressing" package="javax.xml.ws.soap"/>
                    <see class="MTOM" package="javax.xml.ws.soap"/>
                    <see class="RespectBinding" package="javax.xml.ws"/>
                </comment>
                <methods>
                    <method modifiers="public" name="id">
                        <comment>
                            <lead>Unique identifier for the WebServiceFeature.</lead>
                            <detail>  This   identifier MUST be unique across all implementations  of JAX-WS.</detail>
                        </comment>
                        <returns package="java.lang" type="String"/>
                    </method>
                    <method modifiers="public" name="bean">
                        <comment>
                            <lead>The WebServiceFeature bean that is associated  with the WebServiceFeature annotation</lead>
                        </comment>
                        <returns package="java.lang" type="Class"/>
                    </method>
                </methods>
            </interface>
        </interfaces>
    </package>
    <package name="javax.xml.ws.spi.http">
        <classes>
            <class modifiers="public abstract" name="HttpContext">
                <extends name="Object" package="java.lang"/>
                <author>Jitendra Kotamraju</author>
                <since>JAX-WS 2.2</since>
                <comment>
                    <see class="HttpHandler" package="javax.xml.ws.spi.http"/>
                    <lead>HttpContext represents a mapping between the root URI path of a web  service to a HttpHandler which is invoked to handle requests  destined for that path on the associated container.</lead>
                    <detail>    Container provides the implementation for this and it matches  request URIs to HttpContext objects.  </detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment/>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="getHandler">
                        <comment>
                            <lead>Returns the handler that handles HTTP requests for this context.</lead>
                            <detail>  Container or its extensions use this handler to process the  received requests.</detail>
                        </comment>
                        <returns package="javax.xml.ws.spi.http" type="HttpHandler">
                            <comment>the HttpHandler for this context</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="setHandler">
                        <comment>
                            <see class="Endpoint" member="publish(HttpContext)" package="javax.xml.ws"/>
                            <lead>JAX-WS runtime sets its handler during  javax.xml.ws.Endpoint#publish(HttpContext) to handle  HTTP requests for this context.</lead>
                            <detail> Container or its extensions  use this handler to process the requests.</detail>
                        </comment>
                        <parameters>
                            <parameter name="httpHandler" package="javax.xml.ws.spi.http" type="HttpHandler">
                                <comment>the handler to set for this context</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public abstract" name="getPath">
                        <comment>
                            <lead>Returns the path for this context.</lead>
                            <detail> Container should give this  path based on how it matches request URIs to this HttpContext object.</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>this context&apos;s path</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getAttribute">
                        <comment>
                            <lead>Returns an attribute value for container&apos;s configuration  and other data that can be used by jax-ws runtime.</lead>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>attribute name</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>attribute value</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getAttributeNames">
                        <comment>
                            <lead>Returns all attribute names for container&apos;s configuration  and other data that can be used by jax-ws runtime.</lead>
                        </comment>
                        <returns package="java.util" type="Set">
                            <comment>iterator for all attribute names</comment>
                        </returns>
                    </method>
                    <method modifiers="public abstract" name="getApplicationContext">
                        <comment>
                            <lead>Returns the application context in which this http context is part of.</lead>
                        </comment>
                        <returns package="javax.xml.ws.spi" type="ApplicationContext">
                            <comment>application context in which this context is part of</comment>
                        </returns>
                    </method>
                </methods>
            </class>
        </classes>
        <interfaces>
            <interface modifiers="public " name="HttpHandler">
                <author>Jitendra Kotamraju</author>
                <since>JAX-WS 2.2</since>
                <comment>
                    <lead>A handler which is invoked to process HTTP exchanges.</lead>
                    <see class="HttpContext" package="javax.xml.ws.spi.http"/>
                    <see class="Endpoint" member="publish(HttpContext)" package="javax.xml.ws"/>
                    <detail> Each  HTTP exchange is handled by one of these handlers.     JAX-WS runtime provides the implementation for this and sets  it in HttpContext during Endpoint#publish(HttpContext) </detail>
                </comment>
                <methods>
                    <method modifiers="public" name="handle">
                        <comment>
                            <lead>Handles the given request and generate an appropriate response.</lead>
                            <see class="HttpExchange" package="javax.xml.ws.spi.http"/>
                            <detail>  See HttpExchange for a description of the steps  involved in handling an exchange. Container invokes this method  when it receives an incoming request.</detail>
                        </comment>
                        <parameters>
                            <parameter name="exchange" package="javax.xml.ws.spi.http" type="HttpExchange">
                                <comment>the exchange containing the request from the        client and used to send the response</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="java.io.IOException">when an I/O error happens during request       handling</throw>
                        </throws>
                    </method>
                </methods>
            </interface>
            <interface modifiers="public " name="HttpExchange">
                <author>Jitendra Kotamraju</author>
                <since>JAX-WS 2.2</since>
                <comment>
                    <lead>This class encapsulates a HTTP request received and a   response to be generated in one exchange.</lead>
                    <see class="HttpExchange" member="getRequestMethod()" package="javax.xml.ws.spi.http"/>
                    <see class="HttpExchange" member="getRequestHeaders()" package="javax.xml.ws.spi.http"/>
                    <see class="HttpExchange" member="getRequestBody()" package="javax.xml.ws.spi.http"/>
                    <see class="ReadableByteChannel" package="java.nio.channels"/>
                    <see class="HttpExchange" member="getResponseHeaders()" package="javax.xml.ws.spi.http"/>
                    <see class="HttpExchange" member="sendResponseHeaders(int,long)" package="javax.xml.ws.spi.http"/>
                    <see class="HttpExchange" member="getResponseBody()" package="javax.xml.ws.spi.http"/>
                    <see class="WritableByteChannel" package="java.nio.channels"/>
                    <see class="HttpExchange" member="close()" package="javax.xml.ws.spi.http"/>
                    <detail> It provides methods   for examining the request from the client, and for building and   sending the response.     The typical life-cycle of a HttpExchange is shown in the sequence  below.   #getRequestMethod() to determine the command  #getRequestHeaders() to examine the request headers (if needed)  #getRequestBody() returns a ReadableByteChannel for reading the request body.      After reading the request body, the channel is closed.  #getResponseHeaders() to set any response headers, except content-length  #sendResponseHeaders(int,long) to send the response headers. Must be called before  next step.  #getResponseBody() to get a WritableByteChannel to send the response body.       When the response body has been written, the channel must be closed to terminate the exchange.    Terminating exchanges    Exchanges are terminated when both the request Channel and response Channel are closed.  Closing the WritableByteChannel, implicitly closes the ReadableByteChannel (if it is not already closed).  However, it is recommended  to consume all the data from the ReadableByteChannel before closing it.  The convenience method #close() does all of these tasks.  Closing an exchange without consuming all of the request body is not an error  but may make the underlying TCP connection unusable for following exchanges.  The effect of failing to terminate an exchange is undefined, but will typically  result in resources failing to be freed/reused.</detail>
                </comment>
                <fields>
                    <field modifiers="public static final" name="REQUEST_CIPHER_SUITE" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: cipher suite value when the request is received over HTTPS</lead>
                            <detail>  Type: String</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="REQUEST_KEY_SIZE" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: bit size of the algorithm when the request is received over HTTPS</lead>
                            <detail>  Type: Integer</detail>
                        </comment>
                    </field>
                    <field modifiers="public static final" name="REQUEST_X509CERTIFICATE" package="java.lang" type="String">
                        <comment>
                            <lead>Standard property: A SSL certificate, if any, associated with the request</lead>
                            <detail>   Type: java.security.cert.X509Certificate[]  The order of this array is defined as being in ascending order of trust.  The first certificate in the chain is the one set by the client, the next  is the one used to authenticate the first, and so on.</detail>
                        </comment>
                    </field>
                </fields>
                <methods>
                    <method modifiers="public" name="getRequestHeaders">
                        <comment>
                            <lead>Returns an immutable Map containing the HTTP headers that were   included with this request.</lead>
                            <detail> The keys in this Map will be the header   names, while the values will be a List of Strings containing each value   that was included (either for a header that was listed several times,   or one that accepts a comma-delimited list of values on a single line).   In either of these cases, the values for the header name will be   presented in the order that they were included in the request.    The keys in Map are case-insensitive.</detail>
                        </comment>
                        <returns package="java.util" type="Map">
                            <comment>a read-only Map which can be used to access request headers</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getRequestHeader">
                        <comment>
                            <lead>Returns the value of the specified request header.</lead>
                            <detail> If the request  did not include a header of the specified name, this method returns  null. If there are multiple headers with the same name, this method  returns the first header in the request. The header name is  case-insensitive. You can use this method with any request header.</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>the name of the request header</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="String">
                            <comment>returns the value of the requested header,          or null if the request does not have a header of that name</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getResponseHeaders">
                        <comment>
                            <lead>Returns a mutable Map into which the HTTP response headers can be stored  and which will be transmitted as part of this response.</lead>
                            <detail> The keys in the   Map will be the header names, while the values must be a List of Strings  containing each value that should be included multiple times   (in the order that they should be included).    The keys in Map are case-insensitive.</detail>
                        </comment>
                        <returns package="java.util" type="Map">
                            <comment>a writable Map which can be used to set response headers.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="addHeader">
                        <comment>
                            <lead>Adds a response header with the given name and value.</lead>
                            <detail> This method allows  response headers to have multiple values.</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>the name of the header</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>the additional header value If it contains octet string,         it should be encoded according to         RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getRequestURI">
                        <comment>
                            <lead>Get the request URI</lead>
                        </comment>
                        <returns package="java.net" type="URI">
                            <comment>the request URI</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getRequestMethod">
                        <comment>
                            <lead>Get the request method</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the request method</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getHttpContext">
                        <comment>
                            <lead>Get the HttpContext for this exchange</lead>
                        </comment>
                        <returns package="javax.xml.ws.spi.http" type="HttpContext">
                            <comment>the HttpContext</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="close">
                        <comment>
                            <lead>This must be called to end the exchange.</lead>
                            <detail>   Ends this exchange by doing the following in sequence:  close the request ReadableByteChannel, if not already closed  close the response WritableByteChannel, if not already closed.   </detail>
                        </comment>
                        <returns type="void"/>
                    </method>
                    <method modifiers="public" name="getRequestBody">
                        <comment>
                            <lead>returns a Channel from which the request body can be read.</lead>
                            <detail>  Multiple calls to this method will return the same Channel.  It is recommended that applications should consume (read) all of the  data from this Channel before closing it. If a Channel is closed  before all data has been read, then the close() call will   read and discard remaining data (up to an implementation specific  number of bytes).</detail>
                        </comment>
                        <returns package="java.io" type="InputStream">
                            <comment>the stream from which the request body can be read.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getResponseBody">
                        <comment>
                            <lead>returns a stream to which the response body must be  written.</lead>
                            <see class="HttpExchange" member="sendResponseHeaders(int,long)" package="javax.xml.ws.spi.http"/>
                            <detail>#sendResponseHeaders(int,long)) must be called prior to calling  this method. Multiple calls to this method (for the same exchange)  will return the same Channel. In order to correctly terminate  each exchange, the output Channel must be closed, even if no  response body is being sent.    If the call to sendResponseHeaders() specified a fixed response  body length, then the exact number of bytes specified in that  call must be written to this Channel. If too many bytes are written,  then write() will throw an IOException. If too few bytes are written  then the Channel close() will throw an IOException. In both cases,  the exchange is aborted and the underlying TCP connection closed.</detail>
                        </comment>
                        <returns package="java.io" type="OutputStream">
                            <comment>the stream to which the response body is written</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="sendResponseHeaders">
                        <comment>
                            <lead>Starts sending the response back to the client using the current set of response headers  and the numeric response code as specified in this method.</lead>
                            <see class="HttpExchange" member="getResponseBody()" package="javax.xml.ws.spi.http"/>
                            <detail> The response body length is also specified  as follows. If the response length parameter is greater than zero, this specifies an exact  number of bytes to send and the application must send that exact amount of data.   If the response length parameter is zero, then chunked transfer encoding is  used and an arbitrary amount of data may be sent. The application terminates the  response body by closing the WritableByteChannel. If response length has the value -1  then no response body is being sent.    If the content-length response header has not already been set then  this is set to the apropriate value depending on the response length parameter.    This method must be called prior to calling #getResponseBody().</detail>
                            <see class="HttpExchange" member="getResponseBody()" package="javax.xml.ws.spi.http"/>
                        </comment>
                        <parameters>
                            <parameter name="rCode" type="int">
                                <comment>the response code to send</comment>
                            </parameter>
                            <parameter name="responseLength" type="long">
                                <comment>if &gt; 0, specifies a fixed response body length         and that exact number of bytes must be written         to the WritableByteChannel acquired from getResponseBody(), or else         if equal to 0, then chunked encoding is used,          and an arbitrary number of bytes may be written.        if &lt;= -1, then no response body length is specified and         no response body may be written.</comment>
                            </parameter>
                        </parameters>
                        <returns type="void"/>
                        <throws>
                            <throw name="java.io.IOException">if there is i/o error</throw>
                        </throws>
                    </method>
                    <method modifiers="public" name="getRemoteAddress">
                        <comment>
                            <lead>Returns the address of the remote entity invoking this request</lead>
                        </comment>
                        <returns package="java.net" type="InetSocketAddress">
                            <comment>the InetSocketAddress of the caller</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getResponseCode">
                        <comment>
                            <lead>Returns the response code, if it has already been set</lead>
                        </comment>
                        <returns type="int">
                            <comment>the response code, if available. -1 if not available yet.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getLocalAddress">
                        <comment>
                            <lead>Returns the local address on which the request was received</lead>
                        </comment>
                        <returns package="java.net" type="InetSocketAddress">
                            <comment>the InetSocketAddress of the local interface</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getProtocol">
                        <comment>
                            <lead>Returns the protocol string from the request in the form   protocol/majorVersion.minorVersion.</lead>
                            <detail> For example,  &quot;HTTP/1.1&quot;</detail>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>the protocol string from the request</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getAttribute">
                        <comment>
                            <lead>Returns an attribute that is associated with  HttpExchange.</lead>
                            <see class="MessageContext" package="javax.xml.ws.handler"/>
                            <see class="MessageContext" member="SERVLET_CONTEXT" package="javax.xml.ws.handler"/>
                            <see class="MessageContext" member="SERVLET_REQUEST" package="javax.xml.ws.handler"/>
                            <see class="MessageContext" member="SERVLET_RESPONSE" package="javax.xml.ws.handler"/>
                            <see class="HttpExchange" member="REQUEST_CIPHER_SUITE" package="javax.xml.ws.spi.http"/>
                            <see class="HttpExchange" member="REQUEST_KEY_SIZE" package="javax.xml.ws.spi.http"/>
                            <see class="HttpExchange" member="REQUEST_X509CERTIFICATE" package="javax.xml.ws.spi.http"/>
                            <detail> Container may store this object with HttpExchange  instances as an out-of-band communication mechanism. JAX-WS handlers  and endpoints may then access this object via MessageContext.    Servlet containers must expose MessageContext#SERVLET_CONTEXT,  MessageContext#SERVLET_REQUEST, MessageContext#SERVLET_RESPONSE  as attributes.   If the request has been received by the container using HTTPS, the  following information must be exposed as attributes. These attributes  are #REQUEST_CIPHER_SUITE, #REQUEST_KEY_SIZE. If there  is a SSL certificate associated with the request, it must be exposed  using #REQUEST_X509CERTIFICATE</detail>
                        </comment>
                        <parameters>
                            <parameter name="name" package="java.lang" type="String">
                                <comment>attribute name</comment>
                            </parameter>
                        </parameters>
                        <returns package="java.lang" type="Object">
                            <comment>the attribute value, or null if they do not exist</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getAttributeNames">
                        <comment>
                            <lead>Gives all the attribute names that are associated with  HttpExchange.</lead>
                            <see class="HttpExchange" member="getAttribute(String)" package="javax.xml.ws.spi.http"/>
                        </comment>
                        <returns package="java.util" type="Iterator">
                            <comment>Iterator for all attribute names</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getUserPrincipal">
                        <comment>
                            <see class="Principal" package="java.security"/>
                            <lead>Returns the Principal that represents the authenticated  user for this HttpExchange.</lead>
                        </comment>
                        <returns package="java.security" type="Principal">
                            <comment>Principal for an authenticated user          null otherwise</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="isUserInRole">
                        <comment>
                            <lead>Returns a boolean indicating whether the authenticated user is  included in the specified logical &quot;role&quot;.</lead>
                        </comment>
                        <parameters>
                            <parameter name="role" package="java.lang" type="String">
                                <comment>specifies the name of the role</comment>
                            </parameter>
                        </parameters>
                        <returns type="boolean">
                            <comment>true if the user making this request belongs to a given role          false if the user has not been authenticated</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="getScheme">
                        <comment>
                            <lead>Returns the name of the scheme used to make this request,  for example, http, or https.</lead>
                        </comment>
                        <returns package="java.lang" type="String">
                            <comment>name of the scheme used to make this request</comment>
                        </returns>
                    </method>
                </methods>
            </interface>
        </interfaces>
    </package>
    <package name="javax.xml.ws.wsaddressing">
        <classes>
            <class modifiers="public final" name="W3CEndpointReferenceBuilder">
                <extends name="Object" package="java.lang"/>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>This class is used to build W3CEndpointReference  instances.</lead>
                    <detail> The intended use of this clsss is for  an application component, for example a factory component,  to create an W3CEndpointReference for a  web service endpoint published by the same   Java EE application. It can also be used to create  W3CEndpointReferences for an Java SE based  endpoint by providing the address property.    When creating a W3CEndpointReference for an  endpoint that is not published by the same Java EE application,  the address property MUST be specified.      When creating a W3CEndpointReference for an endpoint   published by the same Java EE application, the address  property MAY be null but then the serviceName  and endpointName MUST specify an endpoint published by  the same Java EE application.    When the wsdlDocumentLocation is specified it MUST refer  to a valid WSDL document and the serviceName and  endpointName (if specified) MUST match a service and port   in the WSDL document.</detail>
                </comment>
                <constructors>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates a new W3CEndpointReferenceBuilder instance.</lead>
                        </comment>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="address">
                        <comment>
                            <lead>Sets the address to the  W3CEndpointReference instance&apos;s  wsa:Address.</lead>
                            <detail>    The address MUST be set to a non-null  value when building a W3CEndpointReference for a   web service endpoint that is not published by the same  Java EE application or when running on Java SE.</detail>
                        </comment>
                        <parameters>
                            <parameter name="address" package="java.lang" type="String">
                                <comment>The address of the endpoint to be targeted       by the returned W3CEndpointReference.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the address set to the wsa:Address.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="interfaceName">
                        <comment>
                            <lead>Sets the interfaceName as the  wsam:InterfaceName element in the  wsa:Metadata element.</lead>
                            <detail>   See   2.1 Referencing WSDL Metadata from an EPR for more details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="interfaceName" package="javax.xml.namespace" type="QName">
                                <comment>The port type name of the endpoint to be targeted       by the returned W3CEndpointReference.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the interfaceName as wsam:InterfaceName    element added to the wsa:Metadata element</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="serviceName">
                        <comment>
                            <lead>Sets the serviceName as the  wsam:ServiceName element in the  wsa:Metadata element.</lead>
                            <detail>   See   2.1 Referencing WSDL Metadata from an EPR for more details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="serviceName" package="javax.xml.namespace" type="QName">
                                <comment>The service name of the endpoint to be targeted       by the returned W3CEndpointReference.  This property       may also be used with the endpointName (portName)        property to lookup the address of a web service        endpoint that is published by the same Java EE application.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the serviceName as wsam:ServiceName    element added to the wsa:Metadata element</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="endpointName">
                        <comment>
                            <lead>Sets the endpointName as  wsam:ServiceName/@EndpointName in the  wsa:Metadata element.</lead>
                            <see class="W3CEndpointReferenceBuilder" member="serviceName" package="javax.xml.ws.wsaddressing"/>
                            <detail> This method can only be called  after the #serviceName method has been called.    See   2.1 Referencing WSDL Metadata from an EPR for more details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="endpointName" package="javax.xml.namespace" type="QName">
                                <comment>The name of the endpoint to be targeted       by the returned W3CEndpointReference. The        endpointName (portName) property may also be       used with the serviceName property to lookup        the address of a web service        endpoint published by the same Java EE application.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the endpointName as  wsam:ServiceName/@EndpointName in the  wsa:Metadata element.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="wsdlDocumentLocation">
                        <comment>
                            <lead>Sets the wsdlDocumentLocation that will be referenced  as wsa:Metadata/@wsdli:wsdlLocation.</lead>
                            <detail> The namespace name  for the wsdli:wsdlLocation&apos;s value can be taken from the WSDL itself.     See   2.1 Referencing WSDL Metadata from an EPR for more details.</detail>
                        </comment>
                        <parameters>
                            <parameter name="wsdlDocumentLocation" package="java.lang" type="String">
                                <comment>The location of the WSDL document to       be referenced in the wsa:Metadata of the      W3CEndpointReference.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the wsdlDocumentLocation that is to be referenced.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="referenceParameter">
                        <comment>
                            <lead>Adds the referenceParameter to the  W3CEndpointReference instance  wsa:ReferenceParameters element.</lead>
                        </comment>
                        <parameters>
                            <parameter name="referenceParameter" package="org.w3c.dom" type="Element">
                                <comment>The element to be added to the       wsa:ReferenceParameters element.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the referenceParameter added to the    wsa:ReferenceParameters element.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="metadata">
                        <comment>
                            <lead>Adds the metadataElement to the  W3CEndpointReference instance&apos;s  wsa:Metadata element.</lead>
                        </comment>
                        <parameters>
                            <parameter name="metadataElement" package="org.w3c.dom" type="Element">
                                <comment>The element to be added to the       wsa:Metadata element.</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the metadataElement added to the     wsa:Metadata element.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="element">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>Adds an extension element to the  W3CEndpointReference instance&apos;s  wsa:EndpointReference element.</lead>
                        </comment>
                        <parameters>
                            <parameter name="element" package="org.w3c.dom" type="Element">
                                <comment>The extension element to be added to the    W3CEndpointReference</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the extension element added to the     W3CEndpointReference instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="attribute">
                        <since>JAX-WS 2.2</since>
                        <comment>
                            <lead>Adds an extension attribute to the  W3CEndpointReference instance&apos;s  wsa:EndpointReference element.</lead>
                        </comment>
                        <parameters>
                            <parameter name="name" package="javax.xml.namespace" type="QName">
                                <comment>The name of the extension attribute to be added to the    W3CEndpointReference</comment>
                            </parameter>
                            <parameter name="value" package="java.lang" type="String">
                                <comment>extension attribute value</comment>
                            </parameter>
                        </parameters>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReferenceBuilder">
                            <comment>A W3CEndpointReferenceBuilder instance with    the extension attribute added to the W3CEndpointReference    instance.</comment>
                        </returns>
                    </method>
                    <method modifiers="public" name="build">
                        <comment>
                            <lead>Builds a W3CEndpointReference from the accumulated  properties set on this W3CEndpointReferenceBuilder  instance.</lead>
                            <detail>    This method can be used to create a W3CEndpointReference  for any endpoint by specifying the address property along  with any other desired properties.  This method  can also be used to create a W3CEndpointReference for  an endpoint that is published by the same Java EE application.  This method can automatically determine the address of   an endpoint published by the same Java EE application that is identified by the   serviceName and   endpointName properties.  If the address is   null and the serviceName and   endpointName   do not identify an endpoint published by the same Java EE application, a   java.lang.IllegalStateException MUST be thrown.</detail>
                        </comment>
                        <returns package="javax.xml.ws.wsaddressing" type="W3CEndpointReference">
                            <comment>W3CEndpointReference from the accumulated  properties set on this W3CEndpointReferenceBuilder  instance. This method never returns null.</comment>
                        </returns>
                    </method>
                </methods>
            </class>
            <class modifiers="public final" name="W3CEndpointReference">
                <extends name="EndpointReference" package="javax.xml.ws"/>
                <superclasses>
                    <superclass name="Object" package="java.lang"/>
                </superclasses>
                <since>JAX-WS 2.1</since>
                <comment>
                    <lead>This class represents a W3C Addressing EndpointReferece which is  a remote reference to a web service endpoint that supports the  W3C WS-Addressing 1.0 - Core Recommendation.</lead>
                    <detail>    Developers should use this class in their SEIs if they want to  pass/return endpoint references that represent the W3C WS-Addressing  recommendation.    JAXB will use the JAXB annotations and bind this class to XML infoset  that is consistent with that defined by WS-Addressing.  See    WS-Addressing   for more information on WS-Addressing EndpointReferences.</detail>
                </comment>
                <fields>
                    <field modifiers="protected static final" name="NS" package="java.lang" type="String">
                        <comment/>
                    </field>
                </fields>
                <constructors>
                    <constructor modifiers="protected">
                        <comment/>
                    </constructor>
                    <constructor modifiers="public">
                        <comment>
                            <lead>Creates an EPR from infoset representation</lead>
                        </comment>
                        <parameters>
                            <parameter name="source" package="javax.xml.transform" type="Source">
                                <comment>A source object containing valid XmlInfoset  instance consistent with the W3C WS-Addressing Core  recommendation.</comment>
                            </parameter>
                        </parameters>
                    </constructor>
                </constructors>
                <methods>
                    <method modifiers="public" name="writeTo">
                        <comment>
                            <lead/>
                            <detail/>
                        </comment>
                        <parameters>
                            <parameter name="result" package="javax.xml.transform" type="Result"/>
                        </parameters>
                        <returns type="void"/>
                    </method>
                </methods>
            </class>
        </classes>
    </package>
</javadoc>

<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

		<!-- Chapter 5 Service APIs -->
        <!-- next available id is 5030 -->
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5000</id>
			<description>
Conformance (Provider support required): An implementation MUST support Provider&lt;Source&gt; in payload mode with all the predefined bindings. It MUST also support Provider&lt;SOAPMessage&gt; in message mode in conjunction with the predefined SOAP bindings and Provider&lt;jakarta.activation.DataSource@gt; in message mode in conjunction with the predefined HTTP binding. In payload mode, to send a response with no payload, an empty Source payload
can be used in payload mode. An empty source can be constructed using zero-argument default constructors of DOMSource, SAXSource, StreamSource. 
			</description>
			<location chapter = "5" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5001</id>
			<description>
Conformance Requirement (Provider default constructor): A Provider based service endpoint implementation MUST provide a public default constructor.
			</description>
			<location chapter = "5" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5002</id>
			<description>
Conformance Requirement (Provider implementation): A Provider based service endpoint implementation MUST implement a typed Provider interface.
			</description>
			<location chapter = "5" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5003</id>
			<description>
Conformance (WebServiceProvider annotation): A Provider based service endpoint implementation MUST carry a WebServiceProvider annotation (see 7.7).
			</description>
			<location chapter = "5" section = "1"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:5025</id>
                    <description>
                        A JAX-WS implementation MUST honor all WebServiceFeatures (section 6.5) for Provider based applications.
                    </description>
                    <location chapter="5" section="1"/>            
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5004</id>
			<description>
Conformance (Endpoint publish(String address, Object implementor) Method): The effect of invoking the publish method on an Endpoint MUST be the same as first invoking the create method with the binding ID appropriate to the URL scheme used by the address, then invoking the publish(String address) method on the resulting endpoint.
			</description>
			<location chapter = "5" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5005</id>
			<description>
Conformance (Default Endpoint Binding): If the URL scheme for the address argument of the Endpoint.publish method is  http  or  https  then an implementation MUST use the SOAP 1.1/HTTP binding (see 10) as the binding for the created endpoint.
			</description>
			<location chapter = "5" section = "2.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5006</id>
			<description>
Conformance (Other Bindings): An implementation MAYsupport using the Endpoint.publish method with addresses whose URL scheme is neither  http  nor  https .
			</description>
			<location chapter = "5" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5007</id>
			<description>
Conformance (Publishing over HTTP): If the Binding for an Endpoint is a SOAP (see 10) or HTTP (see 11) binding, then an implementation MUST support publishing the Endpoint to a URL whose scheme is either  http  or  https.
			</description>
			<location chapter = "5" section = "2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5008</id>
			<description>
Conformance (WSDL Publishing): An Endpoint that uses the SOAP 1.1/HTTP binding (see 10) MUST make its contract available as a WSDL 1.1 document at the publishing address suffixed with  ?WSDL  or ?wsdl .
			</description>
			<location chapter = "5" section = "2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5009</id>
			<description>
Conformance (CheckingpublishEndpoint Permission): When any of the publish methods defined by the Endpoint class are invoked, an implementation MUST check whether a SecurityManager is installed with the application. If it is, implementations MUST verify that the application has the WebServicePermission identified by the target name publishEndpoint before proceeding. If the permission is not granted, implementations MUST NOT publish the endpoint and they MUST throw a java.lang.SecurityException.
			</description>
			<location chapter = "5" section = "2.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5010</id>
			<description>
Conformance (Required Metadata Types): An implementation MUST support WSDL1.1 and XMLSchema 1.0 documents as metadata.
			</description>
			<location chapter = "5" section = "2.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:5013</id>
			<description>
Conformance (Unknown Metadata): An implementation MUST ignore metadata documents whose type it does not recognize.
			</description>
			<location chapter = "5" section = "2.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:5014</id>
			<description>
If the wsdlLocation annotation element is the empty string, then a JAX-WS implementation must obey the following rules, depending on the binding used by the endpoint: SOAP 1.1/HTTP Binding A JAX-WS implementation MUST generate a WSDL description for the endpoint based on the rules in section 5.2.5.3 below. SOAP 1.2/HTTP Binding A JAX-WS implementation MUST NOT generate a WSDL description for the endpoint. HTTP Binding A JAX-WS implementation MUST NOT generate a WSDL description for the endpoint. Any Implementation-Specific Binding A JAX-WS implementation MAY generate a WSDL description for the endpoint.
			</description>
			<location chapter = "5" section = "2.5.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5015</id>
			<description>
Provider-based endpoints SHOULD have a non-empty wsdlLocation pointing to a valid WSDL description of the endpoint.
			</description>
			<location chapter = "5" section = "2.5.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:5016</id>
			<description>
The value of the wsdlLocation annotation element on an endpoint implementation class, if any, MUST be a relative URL. The document it points to MUST be packaged with the application. Moreover, it MUST follow the requirements in section 5.2.5.4
			</description>
			<location chapter = "5" section = "2.5.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5017</id>
			<description>
At publishing time, a JAX-WS implementation MUST patch the endpoint address in the root description document to match the actual address the endpoint is deployed at.
			</description>
			<location chapter = "5" section = "2.5.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5018</id>
			<description>
A JAX-WS implementation MUST patch the location attributes of all wsdl:import and xsd:import statement in local documents that point to local documents. An implementation MUST NOT patch any other location attributes.
			</description>
			<location chapter = "5" section = "2.5.3"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5019</id>
			<description>
Implementations MAY support other use cases, but they MUST follow the general rule that any application provided metadata element takes priority over an implementation-generated one, with the exception of the overriding of a port address.
			</description>
			<location chapter = "5" section = "2.5.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5020</id>
			<description>
The exception to using a metadata document as supplied by the application without any modifications is the address of the wsdl:port for the endpoint, which MUST be overridden so as to match the address specified as an argument to the publish method or the one implicit in a server context.
			</description>
			<location chapter = "5" section = "2.5.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5021</id>
			<description>
When publishing the mainWSDL document for an endpoint, an implementation MUST ensure that all references between documents are correct and resolvable. This may require remapping the metadata documents to URLs different from those set as their systemId property. The renaming MUST be consistent, in that the "imports" and "includes" relationships existing between documents when the metadata was supplied to the endpoint MUST be respected at publishing time. Moreover, the same metadata document SHOULD NOT be published at multiple, different URLs.
			</description>
			<location chapter = "5" section = "2.5.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5022</id>
			<description>
When resolving URI references to other documents when processing metadata documents or any of the documents they may transitively reference, a JAX-WS implementation MUST use the catalog facility defined in section 4.4, except when there is a metadata document whose system id matches the URI in question. In other words, metadata documents have priority over catalog-based mappings.
			</description>
			<location chapter = "5" section = "2.5.3"/>
		</assertion>


		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5011</id>
			<description>
Conformance (Use of Executor): If an executor object is successfully set on an Endpoint via the setExecutor method, then an implementation MUST use it to dispatch incoming requests upon publication of the Endpoint by means of the publish(String address) method. If publishing is carried out using the publish(Object serverContext)) method, an implementation MAY use the specified executor or another one specific to the server context being used.
			</description>
			<location chapter = "5" section = "2.7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5012</id>
			<description>
Conformance (Default Executor): If an executor has not been set on an Endpoint, an implementation MUST use its own executor, a java.util.concurrent.ThreadPoolExecutor or analogous mechanism, to dispatch incoming requests.
			</description>
			<location chapter = "5" section = "2.7"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:5023</id>
                    <description>
                        Section jakarta.xml.ws.EndpointReference. 
                        The following method can be used on a published Endpoint to retrieve an jakarta.xml.ws.EndpointReference for the endpoint.
                        getEndpointReference(List&lt;Element&gt; referenceParameters) Creates and returns and jakarta.xml.ws.EndpointReference for a published Endpoint.  If the binding is SOAP 1.1/HTTP or SOAP 1.2/HTTP, then a jakarta.xml.ws.wsaddressing.W3CEndpointReference MUST be returned. 
                    </description>
                    <location chapter="5" section="2.8"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
                            <id>JAXWS:SPEC:5023.1</id>
                            <description>If the Endpoint instance has an associated WSDL, then a returned W3CEndpointReference MUST in-line the WSDL in the wsa:Metadata and the wsa:Metadata MUST also contain the wsam:ServiceName element with the wsam:EndpointName attribute.   
                            </description>
                            <location chapter = "5" section = "2.8"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:5023.2</id>
                            <description>A returned W3CEndpointReference MUST also contain the specified referenceParameters.             
                            </description>
                            <location chapter = "5" section = "2.8"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:5023.3</id>
                            <description>An implementation MUST throw a jakarta.xml.ws.WebServiceException if the Endpoint instance has not been published.  
                            </description>
                            <location chapter = "5" section = "2.8"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:5023.4</id>
                            <description>An implementation MUST throw java.lang.UnsupportedOperationException if the Endpoint instance uses the XML/HTTP binding.
                            </description>
                            <location chapter = "5" section = "2.8"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:5024</id>
                    <description>
                        Section jakarta.xml.ws.EndpointReference 
                        The following method can be used on a published Endpoint to retrieve an jakarta.xml.ws.EndpointReference for the endpoint.
                        getEndpointReference(Class&lt;T&gt; clazz, List&lt;Element&gt; referenceParameters) Creates and returns and jakarta.xml.ws.EndpointReference of type clazz for a published Endpoint instance. If clazz is of type jakarta.xml.ws.wsaddressing.W3CEndpointReference then the returned W3CEndpointReference MUST contain the specified referenceParameters.
                    </description>
                    <location chapter="5" section="2.8"/>
                    <sub-assertions>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
                            <id>JAXWS:SPEC:5024.1</id>
                            <description>A returned W3CEndpointReference MUST also contain the specified referenceParameters.    
                            </description>
                            <location chapter = "5" section = "2.8"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:5024.2</id>
                            <description>An implementation MUST throw a jakarta.xml.ws.WebServiceException if the Endpoint instance has not been published.  
                            </description>
                            <location chapter = "5" section = "2.8"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:5024.3</id>
                            <description>If the Class clazz is not a subclass of EndpointReference or the Endpoint implementation does not support EndpointReferences of type clazz a jakarta.xml.ws.WebServiceException MUST be thrown.  
                            </description>
                            <location chapter = "5" section = "2.8"/>
                        </assertion>
                        <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                            <id>JAXWS:SPEC:5024.4</id>
                            <description>An implementation MUST throw java.lang.UnsupportedOperationException if the Endpoint instance uses the XML/HTTP binding.
                            </description>
                            <location chapter = "5" section = "2.8"/>
                        </assertion>
                    </sub-assertions>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5026</id>
			<description>
"Endpoints can be created using the following static methods on Endpoint:"
<p>
create(Object implementor) Creates and returns an Endpoint for the specified implementor. If the
implementor specifies a binding using the jakarta.xml.ws.BindingType annotation it MUST be used else a default binding of SOAP 1.1 / HTTP binding MUST be used.
create(String bindingID, Object implementor) Creates and returns an Endpoint for the specified
binding and implementor. If the bindingID is null and no binding information is specified via
the jakarta.xml.ws.BindingType annotation then a default SOAP 1.1 / HTTP binding MUST be
used.
</p>
<p>
publish(String address, Object implementor) Creates and publishes an Endpoint for the given
implementor. The binding is chosen by default based on the URL scheme of the provided address
(which must be a URL). If a suitable binding if found, the endpoint is created then published as if the
Endpoint.publish(String address) method had been called. The created Endpoint is then
returned as the value of the method. 
</p>
<p>
create(Object implementor, WebServiceFeature ... features) Same as the above create() method. The created Endpoint is configured with the web service features. These features override the corresponding features that are specified in WSDL, if present.
</p>
<p>
create(String bindingID, Object implementor, WebServiceFeature ...  features) Same as the above create() method. The created Endpoint is configured with the web service features. These features override the corresponding features that are specified in WSDL, if present.
</p>
<p>
publish(String address, Object implementor, WebServiceFeature ...  features) Same as the above publish() method. The created Endpoint is configured with the web service features. These features override the corresponding features that are specified in WSDL, if present.
</p>
			</description>
			<location chapter = "5" section = "2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5027</id>
			<description>
Conformance (Endpoint's W3CEndpointReference): The returned W3EndpointReference MUST contain wsam:ServiceName and wsam:ServiceName[@EndpointName] as per Addressing 1.0 - Metadata[35]. The wsam:InterfaceName MAY be present in the W3CEndpointReference. If there is an associated WSDL, then the WSDL location MUST be referenced using wsdli:wsdlLocation in the W3CEndpointReference's wsa:Metadata.
			</description>
			<location chapter = "5" section = "2.8"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5028</id>
			<description>
jakarta.xml.ws.WebServiceContext
<p>
An endpoint implementation can retrieve an jakarta.xml.ws.EndpointReference for
the endpoint using getEndpointReference(List&lt;Element&gt; referenceParameters),
and getEndpointReference(Class&lt;T&gt; clazz, List&lt;Element&gt; referenceParameters)
methods. These methods have the same semantics as the Endpoint.getEndpointReference() methods specified in the section 5.2.8
</p>
			</description>
			<location chapter = "5" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:5029</id>
			<description>
Conformance (Building W3CEndpointReference): W3CEndpointReferenceBuilder.build() method MUST construct an EndpointReference as per the Addressing 1.0 - Metadata[35].
			</description>
			<location chapter = "5" section = "4"/>
		</assertion>

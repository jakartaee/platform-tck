<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

		<!-- Chapter 2 WSDL 1.1 to Java Mapping -->
        <!-- next available id is 2090 -->
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2001</id>
			<description>Conformance (WSDL1.1 support): Implementations MUST support mapping WSDL 1.1 to Java.</description>
			<location chapter = "2" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2002</id>
			<description>An application MAY customize the mapping using embedded binding declarations (see section 8.3) or an external binding file (see section 8.4).</description>
			<location chapter = "2" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2003</id>
			<description>Conformance (Customization required): Implementations MUST support customizing the WSDL 1.1 to Java mapping using the JAX-WS binding language defined in chapter 8.</description>
			<location chapter = "2" section = ""/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
                    <id>JAXWS:SPEC:2004</id>
                    <description>Conformance (Annotations on generated classes): The values of all the properties of all the generated annotations MUST be consistent with the information in the source WSDL document and the applicable external binding files.</description>
                    <location chapter = "2" section = ""/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:2075</id>
                    <description>
                        Conformance (WSDL Addressing Support): An implementation MUST support the mapping of WS-Addressing 1.0 WSDL Metadata[32] to Java.  
                    </description>
                    <location chapter="2" section=""/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2005</id>
			<description>Conformance (Definitions mapping): In the absence of customizations, the Java pakage name is mapped from the value of a wsdl:definitions element's targetNamespace attribute using the algorithm defined by JAXB.</description>
			<location chapter = "2" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2006</id>
			<description>An application MAY customize this mapping using the jaxws:package binding declaration defined in section 8.7.1.</description>
			<location chapter = "2" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2007</id>
			<description>Conformance (WSDL and XML Schema import directives): An implementation MUST support the WS-I Basic Profile 1.1 defined mechanisms (See R2001, R2002, and R2003) for use of WSDL and XML Schema import directives.</description>
			<location chapter = "2" section = "1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:2008</id>
			<description>Conformance (Optional WSDL extensions): An implementation MAY support mapping of additional WSDL extensibility elements and attributes not described in JAX-WS. Note that such support may limit interopability and application portability.</description>
			<location chapter = "2" section = "1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2009</id>
			<description>Conformance (SEI naming): In the absence of customizations, the name of an SEI MUST be the value of the name attribute of the corresponding wsdl:portType element mapped according to the rules described in section 2.8.</description>
			<location chapter = "2" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2010</id>
			<description>An application MAY customize this mapping using the jaxws:class binding declaration defined in section 8.7.2.</description>
			<location chapter = "2" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2011</id>
			<description>Conformance (Using the jakarta.jws.WebService annotation): A mapped SEI MUST be annotated with a jakarta.jws.WebService annotation.</description>
			<location chapter = "2" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
			<id>JAXWS:SPEC:2012</id>
			<description>Conformance (Extending java.rmi.Remote): A mapped SEI MUST extend java.rmi.Remote.</description>
			<location chapter = "2" section = "2"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:2076</id>
                    <description>
                        Conformance (javax.xml.bind.XmlSeeAlso required): An SEI generated from a WSDL that defines types not directly referenced by the Port MUST contain the javax.xml.bind.XmlSeeAlso annotation with all of the additional types referenced either directly or indirectly.  
                    </description>
                    <location chapter="2" section="2"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2013</id>
			<description>Conformance (Method naming): In the absence of customizations, the name of a mapped Java method MUST be the value of the name attribute of the wsdl:operation element mapped according to the rules described in section 2.8.</description>
			<location chapter = "2" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2014</id>
			<description>An application MAY customize thie mapping using the jaxws:method binding declaration defined in section 8.7.3.</description>
			<location chapter = "2" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2015</id>
			<description>Conformance (jakarta.jws.WebMethod required): A mapped Java method MUST be annotated with a jakarta.jws.WebMethod annotation. The annotation MAY be omitted if all its properties would have default values.</description>
			<location chapter = "2" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
			<id>JAXWS:SPEC:2016</id>
			<description>Conformance (RemoteException required): A mapped Java method MUST declare java.rmi.RemoteExcpetion in its throws clause.</description>
			<location chapter = "2" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2017</id>
			<description>Conformance (Transmission primitive support): An implementation MUST support mapping of operations that use the one-way and request-response transmission primitives.</description>
			<location chapter = "2" section = "3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2018</id>
			<description>Conformance (using jakarta.jws.OneWay): A Java method mapped from a one-way operation MUST be annotated with a jakarta.jws.OneWay annotation.</description>
			<location chapter = "2" section = "3"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:2077</id>
                    <description>
                        Conformance (javax.xml.ws.Action): A mapped Java method MUST be annotated with a javax.xml.ws.Action annotation if the wsdl:input or wsdl:output elements contain a wsam:Action attribute. 
                    </description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:2078</id>
                    <description>
                        Conformance (javax.xml.ws.Action):  If the wsdl:input element contains a wsam:Action, the value of this attribute MUST be set to the javax.xml.ws.Action.input element. 
                    </description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:2079</id>
                    <description>
                        Conformance (javax.xml.ws.Action): If the wsdl:output element contains a wsam:Action, the value of this attribute MUST be set to the javax.xml.ws.Action.output element.
                    </description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:2080</id>
                    <description>
                        Methods generated from wsdl:fault messages that contain a wsam:Action attribute MUST be annotated with javax.xml.ws.FaultAction. See section 7 for more information on this annotation.
                    </description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:2081</id>
                    <description>
                        Conformance (javax.xml.ws.FaultAction): A mapped Java method MUST be annotated with a javax.xml.ws.FaultAction annotation if the wsdl:fault elements contain a wsam:Action attribute.
                    </description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:2082</id>
                    <description>
                        Conformance (javax.xml.ws.FaultAction):  The javax.xml.ws.FaultAction.value is taken directly from the value of the wsam:Action.  
                    </description>
                    <location chapter="2" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:2083</id>
                    <description>
                        Conformance (javax.xml.ws.FaultAction): The javax.xml.ws.FaultAction.className MUST be the exception class name associated with this wsdl:fault.
                    </description>
                    <location chapter="2" section="3"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2019</id>
			<description>Conformance (Using jakarta.jws.SOAPBinding): An SEI mapped from a port type that is bound using the WSDL SOAP binding MUST be annotated with a jakarta.jws.SOAPBinding annotation describing the choice of style, encoding and parameter style. The annotation MAY be omitted if all its properties would have the default values (i.e. document/literal/wrapped).</description>
			<location chapter = "2" section = "3.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2020</id>
			<description>
Conformance (Usingjakarta.jws.WebParam ): Generated Java method parameters MUST be annotated with a jakarta.jws.WebParam annotation. If the style is rpc or if the style is Document and the parameter style is BARE then the partName element of jakarta.jws.WebParam MUST refer to the wsdl:part name of the parameter.
			</description>
			<location chapter = "2" section = "3.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2021</id>
			<description>
Conformance (Usingjakarta.jws.WebResult ): Generated Java methods MUST be annotated with a jakarta.jws.WebResult annotation. If the style is rpc or if the style is Document and the parameter style is BARE then the partName element of jakarta.jws.WebResult MUST refer to the wsdl:part name of the parameter. The annotation MAY be omitted if all its properties would have the default values.
			</description>
			<location chapter = "2" section = "3.1"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:2084</id>
                    <description>
                        Conformance (use of JAXB annotations): An SEI method MUST contain the appropriate JAXB annotations to assure that the proper XML infoset is used when marshalling/unmarshalling the return type. 
                    </description>
                    <location chapter="2" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:2085</id>
                    <description>
                        Conformance (use of JAXB annotations): Parameters of an SEI method MUST contain the appropriate JAXB annotations to assure that the proper XML infoset is used when marshalling/unmarshalling the parameters of the method.
                    </description>
                    <location chapter="2" section="3.1"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:2088</id>
                    <description>
                        Conformance (use of JAXB annotations): The set of JAXB annotations that MUST be supported are: javax.xml.bind.annotation.XmlAttachementRef, javax.xml.bind.annotation.XmlList, javax.xml.bind.XmlMimeType and javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter. 
                    </description>
                    <location chapter="2" section="3.1"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2022</id>
			<description>Conformance (Non-wrapped parameter naming): In the absence of customization, the name of a mapped Java method parameter MUST be the value of the name attribute of the wsdl:part element mapped according to the rules described in sections 2.8 and 2.8.1.</description>
			<location chapter = "2" section = "3.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2023</id>
			<description>An application MAY customize this mapping using the jaxws:parameter binding declaration defined in section 8.7.3.</description>
			<location chapter = "2" section = "3.1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2024</id>
			<description>
A WSDL operation qualifies for wrapper style mapping only if all the criteria as specified are met.(i) The operation s input and output messages (if present) each contain only a single part (ii) The input message part refers to a global element declaration whose localname is equal to the operation name (iii) The output message part refers to a global element declaration (iv) The elements referred to by the input and output message parts (henceforth referred to as wrapper elements) are both complex types defined using the xsd:sequence compositor (v) The wrapper elements only contain child elements, they must not contain other structures such as wildcards (element or attribute), xsd:choice, substitution groups (element references are not permitted) or attributes; furthermore, they must not be nillable.
			</description>
			<location chapter = "2" section = "3.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2025</id>
			<description>Conformance (Default mapping mode): Operations that do not meet the above criteria MUST be mapped using non-wrapper style.</description>
			<location chapter = "2" section = "3.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2026</id>
			<description>Conformance (Disabling wrapper style): Implementations MUST support using the jaxws:enableWrapperStyle binding declaration to enable or disable the wrapper style mapping of operations.</description>
			<location chapter = "2" section = "3.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2027</id>
			<description>Conformance (Wrapped parameter naming): In the absence of customization, the name of a mapped Java method parameter MUST be the value of the local name of the wrapper child mapped according to the rules described in sections 2.8 and 2.8.1.</description>
			<location chapter = "2" section = "3.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2028</id>
			<description>An application MAY customize this mapping using the jaxws:parameter binding declaration defined in section 8.7.3.</description>
			<location chapter = "2" section = "3.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:2029</id>
			<description>Conformance (Parameter name clash): If the mapping results in two Java parameters with the same name and one of those parameters is not mapped to the method return type, see section 2.3.2, then this is reported as an error and requires developer intervention to correct, either by disabling wrapper style mapping, modifying the source WSDL or by specifying a customized parameter name mapping.</description>
			<location chapter = "2" section = "3.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2072</id>
			<description>Conformance (Using javax.xml.ws.RequestWrapper): If wrapper style is used, generated Java methods MUST be annotated with a javax.xml.ws.RequestWrapper annotation. The annotation MAY be omitted if all its properties would have the default values.</description>
			<location chapter = "2" section = "3.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2073</id>
			<description>Conformance (Using javax.xml.ws.ResponseWrapper): If wrapper style is used, generated Java methods MUST be annotated with a javax.xml.ws.ResponseWrapper annotation. The annotation MAY be omitted if all its properties would have the default values.</description>
			<location chapter = "2" section = "3.1.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2030</id>
			<description>Message parts are either listed or unlisted. If the value of a wsdl:part elements name attribute is present in the parameterOrder attribute then the part is listed, otherwise it is unlisted.  Parameters that are mapped from message parts are either listed or unlisted. Parameters that are mapped from listed parts are listed; parameters that are mapped from unlisted parts are unlisted. 
Parameters that are mapped from wrapper children (wrapper style mapping only) are unlisted. 
Listed parameters appear first in the method signature in the order in which their corresponding parts 
are listed in the parameterOrder attribute. 
Unlisted parameters either form the return type or follow the listed parameters 
The return type is determined as follows: 
Non-wrapper style mapping Only parameters that are mapped from parts in the abstract output message 
may form the return type, parts from other messages (see e.g. section 2.6.2.1) do not qualify. If
there is a single unlisted out part in the abstract output message then it forms the method 
return type, otherwise the return type is void. 
Wrapper style mapping If there is a single out wrapper child then it forms the method return type, 
if there is an out wrapper child with a local name of return then it forms the method return 
type, otherwise the return type is void. 
Unlisted parameters that do not form the return type follow the listed parameters in the following 
order: 
1. Parameters mapped from in and in/out parts appear in the same order the corresponding parts 
appear in the input message. 
2. Parameters mapped from in and in/out wrapper children (wrapper style mapping only) appear 
in the same order as the corresponding elements appear in the wrapper. 
3. Parameters mapped from out parts appear in the same order the corresponding parts appear in 
the output message. 
4. Parameters mapped from out wrapper children (wrapper style mapping only) appear in the same 
order as the corresponding wrapper children appear in the wrapper.</description>
			<location chapter = "2" section = "3.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2031</id>
			<description>Conformance (Use of Holder ): Implementations MUST map out and in/out method parameters using javax.xml.ws.Holder&lt;T&gt; with the exception of a out part that has been mapped to the method's return type.</description>
			<location chapter = "2" section = "3.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2032</id>
			<description>Conformance (Asynchronous mapping required): Implementations MUST support the asynchronous mapping.</description>
			<location chapter = "2" section = "3.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2033</id>
			<description>Conformance (Asynchronous mapping option): An implementation MUST support using the jaxws:enableAsyncMapping binding declaration defined in section 8.7.3 to enable and disable the asynchronous mapping.</description>
			<location chapter = "2" section = "3.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2034</id>
			<description>Conformance (Asynchronous method naming): In the absence of customizations, the name of the polling and callback methods MUST be the value of the name attribute of the wsdl:operation suffixed with  Async  mapped according to the rules described in sections 2.8 and 2.8.1.</description>
			<location chapter = "2" section = "3.4.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2035</id>
			<description>Conformance (Asynchronous parameter naming): The name of the callback handler method parameter MUST be  asyncHandler . Parameter name collisions require user intervention to correct, see section 2.8.1. An application MAY customize this mapping using the jaxws:method binding declaration defined in section 8.7.3.</description>
			<location chapter = "2" section = "3.4.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:2036</id>
			<description>Conformance (Failed method invocation): If there is any error prior to invocation of the operation, an implementation MUST throw a WebServiceException.</description>
			<location chapter = "2" section = "3.4.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2037</id>
			<description>Conformance (Response bean naming): In the absence of customizations, the name of a response bean MUST be the value of the name attribute of the wsdl:operation suffixed with  Response mapped according to the rules described in sections 2.8 and 2.8.1.</description>
			<location chapter = "2" section = "3.4.4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2038</id>
			<description>Conformance (Asynchronous fault reporting): A WSDL fault that occurs during execution of an asynchronous method invocation MUST be mapped to a java.util.concurrent.Execution Exception thrown when the client calls Response.get. </description>
			<location chapter = "2" section = "3.4.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2039</id>
			<description>
Conformance (Asychronous fault cause): An ExecutionException that is thrown by the get method of Response as a result of a WSDL fault MUST have as its cause the service specific exception mapped from the WSDL fault, if there is one, otherwise the ProtocolException mapped from the WSDL fault (see 6.4).
			</description>
			<location chapter = "2" section = "3.4.5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2040</id>
			<description>Conformance (JAXB class mapping): In the absence of user customizations, an implementation MUST use the JAXB class based mapping (generateValueClass="true", generateElementType="false") when mapping WSDL types to Java.</description>
			<location chapter = "2" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2041</id>
			<description>Conformance (JAXB customization use): An implementation MUST support use of JAXB customizations during mapping as detailed in section 8.5.</description>
			<location chapter = "2" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:2042</id>
			<description>Conformance (JAXB customization clash): To avoid clashes, if a user customizes the mapping an implementation MUST NOT add the default class based mapping customizations.</description>
			<location chapter = "2" section = "4"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:2086</id>
                    <description>
                        Conformance (javax.xml.ws.wsaddressing.W3CEndpointReference): Any schema element of the type wsa:EndpointReference MUST be mapped to javax.xml.ws.wsaddressing.W3CEndpointReference.
                    </description>
                    <location chapter="2" section="4.1"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2074</id>
			<description>Conformance (javax.xml.ws.WebFault required): A mapped exception MUST be annotated with a javax.xml.ws.WebFault annotation.</description>
			<location chapter = "2" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2043</id>
			<description>Conformance (Exception naming): In the absence of customizations, the name of a mapped exception MUST be the value of the name attribute of the wsdl:message referred to by the wsdl:fault element mapped according to the rules in sections 2.8 and 2.8.1. An application MAY customize this mapping using the jaxws:class binding declaration defined in section 8.7.4.</description>
			<location chapter = "2" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2044</id>
			<description>Conformance (Fault equivalence): An implementation MUST map all equivalent faults within a service to a single Java exception class.</description>
			<location chapter = "2" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:2061</id>
			<description>Conformance (Fault equivalence): At runtime an implementation MAY map a serialized fault into any equivalent Java exception.</description>
			<location chapter = "2" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2045</id>
			<description>Conformance (Required WSDL extensions): An implementation MUST support mapping of the WSDL 1.1 specified extension elements for the WSDL SOAP and MIME bindings.</description>
			<location chapter = "2" section = "6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:2046</id>
			<description>Conformance (Unbound message parts): To preserve the protocol independence of mapped operations, an implementation MUST NOT ignore unbound message parts when mapping from WSDL 1.1 to Java. Instead an implementation MUST generate binding code that ignores in and in/out parameters mapped from unbound parts and that presents out parameters mapped from unbound parts as null.</description>
			<location chapter = "2" section = "6.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
			<id>JAXWS:SPEC:2047</id>
			<description>Conformance (Mapping additional header parts): An implementation MUST support using the jaxws:enableAdditionalSOAPHeaderMapping binding declaration defined in section 8.7.5 as a means to enable mapping of additional parts bound by a soap:header to method parameters. The default is to not map such parts to method parameters. </description>
			<location chapter = "2" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:2048</id>
			<description>Conformance (Duplicate headers in binding): During mapping, an implementionMUST report an error if the binding of an operation includes two or more soap:header elements that would result in SOAP headers with the same qualified name.</description>
			<location chapter = "2" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2049</id>
			<description>Conformance (Duplicate headers in Message): During unmarshalling, an implementation MUST generate a runtime error if there is more than one instance of a header whose qualified name is mapped to a method parameter.</description>
			<location chapter = "2" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
			<id>JAXWS:SPEC:2050</id>
			<description>A soap:header element can contain zero or more soap:headerfault elements that describe faults that may arise when processing the header. If the part bound by the soap:header is mapped to a method parameter then each child soap:headerfault is mapped to an additional exception thrown by the mapped method.</description>
			<location chapter = "2" section = "6.2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
			<id>JAXWS:SPEC:2062</id>
			<description>a soap:headerfault can refer to any single part of a message containing one or more parts. Mapping of soap:headerfault elements follows the mapping for wsdl:fault elements described in section 2.5 with the following differences:1. To avoid name clashes, the mapped Exception is named after the part referred to by the soap:headerfault rather than its parent message.2. The global element that is mapped to a Java bean is the global element referred to by the part named in the soap:headerfault. 3. For the purposes of duplicate removal during mapping, header faults are consider to be equivalent if the values of their message and part attributes are equal.</description>
			<location chapter = "2" section = "6.2.2"/>
		</assertion>		
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2051</id>
			<description>Conformance (Use of MIME type information): An implementation MUST support using the jaxws:enableMIMEContent binding declaration defined in section 8.7.5 to enable or disable the use of the additional metadata in mime:content elements when mapping from WSDL to Java.</description>
			<location chapter = "2" section = "6.3.1"/>
		</assertion>
		<assertion required = "false" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2052</id>
			<description>Conformance (MIME type mismatch): An implementation SHOULDthrow a WebServiceException on receipt of a message where the MIME type of a part does not match that described in the WSDL.</description>
			<location chapter = "2" section = "6.3.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2053</id>
			<description>Conformance (MIME part identification): An implementation MUST use the algorithm defined in the WS-I Attachments Profile[29] when generating the MIME Content-ID header field value for a part bound using mime:content.</description>
			<location chapter = "2" section = "6.3.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2054</id>
			<description>
Conformance (Service superclass required): A generated service class MUST extend the javax.xml.ws.Service class.
			</description>
			<location chapter = "2" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2069</id>
			<description>
Conformance (Service class naming): In the absence of customization, the name of a generated service class MUST be the value of the name attribute of the wsdl:service element mapped according to the rules described in sections 2.8 and 2.8.1.
			</description>
			<location chapter = "2" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2055</id>
			<description>An application MAY customize the name of the generated service class using the jaxws:class binding declaration defined in section 8.7.7.</description>
			<location chapter = "2" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2063</id>
			<description>Conformance (javax.xml.ws.WebServiceClient required): A generated service class MUST be annotated with a javax.xml.ws.WebServiceClient annotation. </description>
			<location chapter = "2" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2070</id>
			<description>
Conformance: A generated service class MUST have a default (i.e. zero-argument) public constructor. This constructor MUST call the protected constructor declared in javax.xml.ws.Service, passing as arguments the WSDL location and the service name. The values of the actual arguments for this call MUST be equal (in the java.lang.Object.equals sense) to the values specified in the mandatory WebServiceClient annotation on the generated service class itself.
			</description>
			<location chapter = "2" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2071</id>
			<description>
Conformance: The implementation class MUST have a public constructor that takes two arguments, the wsdl location (a java.net.URL) and the service name (a javax.xml.namespace.QName). This constructor MUST call the protected constructor in javax.xml.ws.Service passing as arguments the WSDL location and the service name values with which it was invoked.
			</description>
			<location chapter = "2" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2056</id>
			<description>Conformance (Failed getPortName Method): A generated getPortName method MUST throw javax.xml.ws.WebServiceException on failure.</description>
			<location chapter = "2" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2064</id>
			<description>An application MAY customize the name of the generated methods for a port using the jaxws:method binding declaration defined in section 8.7.8.</description>
			<location chapter = "2" section = "7"/>
		</assertion>	
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2065</id>
			<description>Conformance (javax.xml.ws.WebEndpoint required): The getPortName methods of generated service interface MUST be annotated with a javax.xml.ws.WebEndpoint annotation.</description>
			<location chapter = "2" section = "7"/>
		</assertion>	
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:2087</id>
                    <description>
                        getPortName(WebServiceFeatures... features)  One required method that takes a variable-length array of javax.xml.ws.WebServiceFeatures and returns a proxy that implements the mapped service endpoint interface. The method generated delegates to the Service.getPort(QName portName, Class&gt;T&lt; SEI, WebServiceFeatures... features) method passing it the port name, the SEI and the features. The value of the port name MUST be equal to the value specified in the mandatory WebEndpoint annotation on the method itself.
                    </description>
                    <location chapter="2" section="7"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2057</id>
			<description>Method identifiers When mapping wsdl:operation names to Java method identifiers, the get or set prefix is not added. Instead the first word in the word-list has its first character converted to lower case.</description>
			<location chapter = "2" section = "8"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2066</id>
			<description>Parameter identifiers When mapping wsdl:part names or wrapper child local names to Java method parameter identifiers, the first word in the word-list has its first character converted to lower case. Clashes with Java language reserved words are reported as errors and require use of appropriate customizations to fix the clash.</description>
			<location chapter = "2" section = "8"/>
		</assertion>		
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2067</id>
			<description>WSDL name scoping rules may result in name collisions when mapping from WSDL 1.1 to Java. E.g., a port type and a service are both mapped to Java classes but WSDL allows both to be given the same name. This section defines rules for resolving such name collisions.  The order of precedence for name collision resolution is as follows (highest to lowest): 1. Service endpoint, interface, 2. Non-exception Java class, 3. Exception class, 4. Service class If a name collision occurs between two identifiers with different precedences, the lower precedence item has its name changed as follows: Non-exception Java class The suffix Type is added to the class name., Exception class The suffix  Exception is added to the class name., Service class The suffix  Service is added to the class name.</description>
			<location chapter = "2" section = "8.1"/>
		</assertion>		
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:2068</id>
			<description>If a name collision occurs between a mapped Java method and a method in javax.xml.ws.Binding Provider (an interface that proxies are required to implement, see section 4.3), the prefix is added to the mapped method.</description>
			<location chapter = "2" section = "8.1"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:2089</id>
                    <description>Message and Part.
Add the following:

WSDL description may have wsam:Action attribute on wsdl:input, wsdl:output, wsdl:fault elements in a wsdl:operation. This wsam:Action attribute is used to explicitly define the value of the WS-Addressing Action header and this needs to be mapped on to the corresponding Java method.
    * Conformance (Generating @Action): Generated Java Methods MUST be annotated with @Action and @FaultAction annotations for the corresponding  wsdl:input, wsdl:output and wsdl:fault messages that contain wsam:Action attributes
    * Conformance (Generating @Action input): If a wsdl:input element contains a wsam:Action attribute, the value of the attribute MUST be set to the input element of @Action

    * Conformance (Generating @Action output): If a wsdl:output element contains a wsam:Action attribute, the value of the attribute MUST be set to the output element of @Action

    * Conformance (Generating @Action fault): If a wsdl:fault element contains a wsam:Action attribute, the value of the attribute MUST be set to the value element of @FaultAction. The className element of @FaultAction MUST be the exception class name associated with the wsdl:fault</description>
                    <location chapter="2" section="3.1"/>
                </assertion>

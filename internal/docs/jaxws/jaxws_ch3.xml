<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

		<!-- Chaer 3 Java to WSDL 1.1 Mapping -->
        <!-- next available id is 3060 -->
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3000</id>
			<description>Conformance Requirement (WSDL 1.1 support): Implementations MUST support mapping Java to WSDL 1.1.</description>
			<location chapter = "3" section = ""/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3001</id>
			<description>Conformance Requirement (Standard annotations): An implementation MUST support the use of annotations defined in section 7 to customize the Java to WSDL 1.1 mapping.</description>
			<location chapter = "3" section = ""/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:3043</id>
                    <description>
                        Conformance (WSDL Addressing Support): An implementation MUST support the mapping of Java to WS-Addressing 1.0  WSDL Metadata[32].
                    </description>
                    <location chapter="3" section=""/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3002</id>
			<description>Conformance Requirement (Java identifier mapping): In the absence of annotations described in this specification, Java identifiers MUST be mapped to XML names using the algorithm defined in appendix B of SOAP 1.2 Part 2[4].</description>
			<location chapter = "3" section = "1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3003</id>
			<description>Conformance Requirement (Method name disambiguation): An implementation MUST support the use of the jakarta.jws.WebMethod annotation to disambiguate overloaded Java method names when mapped to WSDL.</description>
			<location chapter = "3" section = "1.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3004</id>
			<description>Conformance Requirement (Package name mapping): The jakarta.jws.WebService annotation (see section 7.9.1) MAY be used to specify the target namespace to use for a Web service and MUST be used for classes or interfaces in no package. In the absence of a jakarta.jws.WebService annotation the Java package name MUST be mapped to the value of the wsdl:definitions elements targetNamespace attribute using the algorithm: 1. The package name is tokenized using the "." character as a delimiter. 2. The order of the tokens is reversed.  3. The value of the targetNamespace attribute is obtained by concatenating "http://" to the list of tokens separated by "." and "/".</description>
			<location chapter = "3" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3005</id>
			<description>Conformance Requirement (WSDL and XML Schema import directives): Generated WSDL MUST comply with the WS-I Basic Profile 1.0[8] restrictions (See R2001, R2002, and R2003) on usage of WSDL and 16 XML Schema import directives.</description>
			<location chapter = "3" section = "2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3036</id>
			<description>
Conformance (Class mapping): An implementation MUST support the mapping of jakarta.jws.WebService annotated classes to implicit service endpoint interfaces.
			</description>
			<location chapter = "3" section = "3"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:3044</id>
                    <description>
                        Conformance (javax.xml.ws.soap.Addressing): A Java class that is annotated with the javax.xml.ws.soap.Addressing annotation with the enabled element set to true, MUST result in the addition of a wsam:Addressing extensibility element to the  wsdl:binding element and it MUST NOT have the wsdl:required=true attribute. 
                    </description>
                    <location chapter="3" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:3045</id>
                    <description>
                        Conformance (javax.xml.ws.soap.Addressing): If the required element of the Addressing annotation has a value of true, then the wsam:Addressing extensibility element MUST contain the wsdl:required=true attribute. 
                    </description>
                    <location chapter="3" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="false">
                    <id>JAXWS:SPEC:3046</id>
                    <description>
                        Conformance (javax.xml.ws.soap.Addressing): If SEI is also annotated with a BindingType.value is not compatible with this feature an error MUST be given.  
                    </description>
                    <location chapter="3" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:3047</id>
                    <description>
                        Conformance (javax.xml.ws.soap.Addressing): The JAX-WS runtime MUST also use Addressing headers.  
                    </description>
                    <location chapter="3" section="3"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:3048</id>
                    <description>
                        Conformance (javax.xml.ws.soap.Addressing): If the enabled element is set to false, then wsam:Addressing element MUST NOT be generated and the JAX-WS runtime MUST NOT use Addressing headers.  
                    </description>
                    <location chapter="3" section="3"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
			<id>JAXWS:SPEC:3006</id>
			<description>
Conformance (Class mapping): An implementation MUST support the mapping of jakarta.jws.WebService annotated classes to implicit service endpoint interfaces.
			</description>
			<location chapter = "3" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3007</id>
			<description>
Conformance (portType naming): The jakarta.jws.WebService annotation (see section 7.10.1) MAY be used to customize the name and targetNamespace attributes of the wsdl:portType element. If not customized, the value of the name attribute of the wsdl:portType element MUST be the name of the SEI not including the package name and the target namespace is computed as defined above in section 3.2.
			</description>
			<location chapter = "3" section = "4"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3008</id>
			<description>Conformance Requirement (Inheritance flattening): A mapped wsdl:portType element MUST contain WSDL definitions for all the methods of the corresponding Java SEI including all inherited methods.</description>
			<location chapter = "3" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:3009</id>
			<description>Conformance Requirement (Inherited interface mapping): An implementation MAY map inherited interfaces to additional wsdl:portType elements within the wsdl:definitions element.</description>
			<location chapter = "3" section = "4.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3010</id>
			<description>
Conformance (Operation naming): In the absence of customizations, the value of the name attribute of the wsdl:operation element MUST be the name of the Java method. The jakarta.jws.WebMethod (see 7.10.2) annotation MAY be used to customize the value of the name attribute of the wsdl:operation element and MUST be used to resolve naming conflicts. If the exclude element of the jakarta.jws.WebMethod is set to true then the Java method MUST NOT be present in the wsdl as a wsdl:operation element.
			</description>
			<location chapter = "3" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3011</id>
			<description>
Methods are either one-way or two-way: one way methods have an input but produce no output, two way methods have an input and produce an output. Section 3.5.1 describes one way operations further. The wsdl:operation element corresponding to each method has one or more child elements as follows: o A wsdl:input element that refers to an associated wsdl:message element to describe the operation input. o (Two-way methods only) an optional wsdl:output element that refers to a wsdl:message to describe the operation output.  o (Two-way methods only) zero or more wsdl:fault child elements, one for each exception thrown by the method. The wsdl:fault child elements refer to associated wsdl:message elements to describe each fault. See section 3.7 for further details on exception mapping.
			</description>
			<location chapter = "3" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3012</id>
			<description>Document style A single wsdl:part child element that refers, via an element attribute, to a global element declaration in the wsdl:types section.</description>
			<location chapter = "3" section = "5"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3013</id>
			<description>RPC style Zero or more wsdl:part child elements (one per method parameter and one for a non-void return value) that refer, via a type attribute, to named type declarations in the wsdl:types section.</description>
			<location chapter = "3" section = "5"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:3049</id>
                    <description>
                        Conformance (javax.xml.ws.Action): A Java method annotated with the javax.xml.ws.Action.input annotation element MUST result in the addition of a wsam:Action extensibility element to the wsdl:input element with the wsam:Action.value equal to javax.xml.ws.Action.input. 
                    </description>
                    <location chapter="3" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:3050</id>
                    <description>
                        Conformance (javax.xml.ws.Action): A Java method annotated with the javax.xml.ws.Action.output annotation element MUST result in the addition of a  wsam:Action extensibility element on the wsdl:output element with the wsam:Action.value equal to javax.xml.ws.Action.output. 
                    </description>
                    <location chapter="3" section="5"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="removed" testable="true">
                    <id>JAXWS:SPEC:3051</id>
                    <description>
                        Conformance (javax.xml.ws.FaultAction) A Java method annotated with the javax.xml.ws.FaultAction annotation element MUST result in the addition of a wsam:Action extensibility element on the wsdl:fault element that corresponds to the Exception specified by javax.xml.ws.FaultAction.className with the wsam:Action.value equal to javax.xml.ws.FaultAction.value.
                    </description>
                    <location chapter="3" section="5"/>
                </assertion>     
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3014</id>
			<description>Conformance Requirement (One-way mapping): Implementations MUST support using the jakarta.jws.OneWay (see 7.9.3) annotation to specify which methods should be mapped to one-way operations.</description>
			<location chapter = "3" section = "5.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:3015</id>
			<description>Conformance Requirement (One-way mapping errors): Implementations MUST prevent mapping to one-way operations of methods that do not meet the necessary criteria.</description>
			<location chapter = "3" section = "5.1"/>
		</assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:3052</id>
                    <description>
                        Conformance (use of JAXB annotations): An implementation MUST honor any JAXB annotation that exists on an SEI method or parameter to assure that the proper XML infoset is used when marshalling/unmarshalling the the return value or parameters of the method. 
                    </description>
                    <location chapter="3" section="6"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:3054</id>
                    <description>
                        Conformance (use of JAXB annotations): The set of JAXB annotations that MUST be supported are: javax.xml.bind.annotation.XmlAttachementRef, javax.xml.bind.annotation.XmlList, javax.xml.bind.XmlMimeType and javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter. 
                    </description>
                    <location chapter="3" section="6"/>
                </assertion>   
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3016</id>
			<description>Conformance Requirement (Parameter classification): The jakarta.jws.WebParam annotation (see 7.9.4) MAY be used to specify whether a holder parameter is treated as in/out or out. If not specified, the default MUST be in/out.</description>
			<location chapter = "3" section = "6.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3017</id>
			<description>
Conformance (Parameter naming): The jakarta.jws.WebParam annotation (see 7.10.4)MAY be used to specify the name of the wsdl:part or XML Schema element declaration corresponding to a Java parameter. If both the name and partName elements are used in the jakarta.jws.WebParam annotation then the partName MUST be used for the wsdl:part name attribute and the name element from the annotation will be ignored. If not specified, the default is argN, where N is replaced with the zero-based argument index. Thus, for instance, the first argument of a method will have a default parameter name of arg0, the second one arg1and so on.
			</description>
			<location chapter = "3" section = "6.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3018</id>
			<description>
Conformance (Result naming): The jakarta.jws.WebResult annotation (see 7.10.4) MAY be used to specify the name of the wsdl:part or XML Schema element declaration corresponding to the Java method return type. If both the name and partName elements are used in the jakarta.jws.WebResult annotations then the partName MUST be used for the wsdl:part name attribute and the name elment from the annotation will be ignored. In the absence of customizations, the default name is return.
			</description>
			<location chapter = "3" section = "6.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3038</id>
			<description>
Conformance (Header mapping of parameters and results): The jakarta.jws.WebParam annotations - header element MAY be used to map parameters to SOAP headers. Header parameters MUST be included as soap:header elements in the operations input message. The jakarta.jws.WebResult annotations header element MAY be used to map results to SOAP headers. Header results MUST be included as soap:header elements in the operations output message.
			</description>
			<location chapter = "3" section = "6.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3019</id>
			<description>
The jakarta.jws.SOAPBinding annotation MAY be used to specify at the type level which style to use for all methods it contains or on a per method basis if the style is document.
			</description>
			<location chapter = "3" section = "6.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3020</id>
			<description>This style is identified by a jakarta.jws.SOAPBinding annotation with the following properties: a style of DOCUMENT, a use of LITERAL and a parameterStyle of WRAPPED.</description>
			<location chapter = "3" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3021</id>
			<description>Conformance Requirement (Default wrapper bean names): In the absence of customizations, the wrapper request bean class MUST be named the same as the method and the wrapper response bean class MUST be named the same as the method with a  Response  suffix. The first letter of each bean name is capitalized to follow Java class naming conventions.</description>
			<location chapter = "3" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3022</id>
			<description>Conformance Requirement (Default wrapper bean package): In the absence of customizations, the package of the wrapper beans MUST be a generated jaxws subpackage of the SEI package.</description>
			<location chapter = "3" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
			<id>JAXWS:SPEC:3023</id>
			<description>
Conformance (Wrapper element names): The javax.xml.ws.RequestWrapper and javax.xml.ws.ResponseWrapper annotations (see 7.5 and 7.6) MAY be used to specify the localname of the elements generated for the wrapper beans.
			</description>
			<location chapter = "3" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3024</id>
			<description>
Conformance (Wrapper element names): The javax.xml.ws.RequestWrapper and javax.xml.ws.ResponseWrapper annotations (see 7.3 and 7.4) MAY be used to specify the qualified name of the elements generated for the wrapper beans.
			</description>
			<location chapter = "3" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
			<id>JAXWS:SPEC:3025</id>
			<description>
Conformance (Wrapper bean name clash): Generated bean classes must have unique names within a package and MUST NOT clash with other classes in that package. Clashes during generation MUST be reported as an error and require user intervention via name customization to correct. Note that some platforms do not distiguish filenames based on case so comparisons MUST ignore case.
			</description>
			<location chapter = "3" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3026</id>
			<description>
This style is identified by a jakarta.jws.SOAPBinding annotation with the following properties: a style of DOCUMENT, a use of LITERAL and a parameterStyle of BARE. In order to qualify for use of bare mapping mode a Java method must fulfill all of the following criteria: 1. It must have at most one in or in/out parameter. 2. If it has a return type other than void it must have no in/out or out parameters. 3. If it has a return type of void it must have at most one in/out or out parameter.
			</description>
			<location chapter = "3" section = "6.2.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3027</id>
			<description>This style is identified by a jakarta.jws.SOAPBinding annotation with the following properties: a style of RPC, a use of LITERAL and a parameterStyle of WRAPPED. The Java types of each in, out and in/out parameter and the return value are mapped to named XML Schema types using the mapping defined by JAXB. For out and in/out parameters the class of the value of the holder is used rather than the holder itself. Each method parameter and the return type is mapped to a message part according to the parameter classification: in The parameter is mapped to a part of the input message. out The parameter or return value is mapped to a part of the output message. in/out The parameter is mapped to a part of the input and output message. The named types are used as the values of the wsdl:part elements type attribute, see figure 3.2. The value of the name attribute of each wsdl:part element is the name of the corresponding method parameter or return for the method return value.</description>
			<location chapter = "3" section = "6.2.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3040</id>
			<description>Conformance (Null Values in rpc/literal): If a null value is passed as an argument to amethod, or returned from amethod, that uses the rpc/literal style, then an implementation MUST throw a WebServiceException. </description>
			<location chapter = "3" section = "6.2.3"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3028</id>
			<description>A service specific Java exception is mapped to a wsdl:fault element, a wsdl:message element with a single child wsdl:part element and an XML Schema global element declaration. The wsdl:fault element appears as a child of the wsdl:operation element that corresponds to the Java method that throws the exception and refers to the wsdl:message element. The wsdl:part element refers to an XML Schema global element declaration that describes the fault.</description>
			<location chapter = "3" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3029</id>
			<description>Conformance Requirement (Exception naming): In the absence of customizations, the name of the global element declaration for a mapped exception MUST be the name of the Java exception. The javax.xml.ws.WebFault annotation MAY be used to customize the local name and namespace name of the element.</description>
			<location chapter = "3" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3030</id>
			<description>JAXB defines the mapping from a Java bean to XML Schema element declarations and type definitions and is used to generate the global element declaration that describes the fault. For exceptions that match the pattern described in section 2.5 (i.e. exceptions that have a getFaultInfo method and WebFault annotation), the FaultBean is used as input to JAXB when mapping the exception to XML Schema. For exceptions that do not match the pattern described in section 2.5, JAX-WS maps those exceptions to Java beans and then uses those Java beans as input to the JAXB mapping. The following algorithm is used to map non-matching exception classes to the corresponding Java beans for use with JAXB: In the absence of customizations, the name of the bean is the same as the name of the Exception suffixed with  Bean . In the absence of customizations, the package of the bean is a generated jaxws subpackage of the SEI package. E.g. if the SEI package is com.example.stockquote then the package of the bean would be com.example.stockquote.jaxws. For each getter in the exception and its superclasses, a property of the same type and name is added to the bean. The getCause and getLocalizedMessage getters from java.lang.Throwable and the getClass getter from java.lang.Object are excluded from the list of getters to be mapped. The bean is annotated with a JAXB @XmlType annotation whose name property is set to the name of the exception and whose namespace property is set to the namespace name mapped from the exception package name. Additionally, the @XmlType annotation has a propOrder property whose value is an array containing the names of all the properties of the exception class that were mapped in the previous bullet point, sorted lexicographically according to the Unicode value of each of their characters (i.e. using the same algorithm that the int java.lang.String.compareTo(String) method uses). The bean is annotated with a JAXB @XmlRootElement annotation whose name property is set, in the absence of customizations, to the name of the exception. The bean is annotated with a JAXB @XmlType annotation.  If the exception class has a @XmlType annotation, then it is used for the fault bean's @XmlType annotation. Otherwise, the fault bean's @XmlType annotation is computed with name property set to the name of the exception and the namespace property set to the target namespace of the corresponding portType. 
    * Conformance(Fault bean's @XmlType): If an exception class has a @XmlType annotation, then it MUST be used for the fault bean's @XmlType annotation.
</description>
			<location chapter = "3" section = "7"/>
		</assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "false">
                    <id>JAXWS:SPEC:3031</id>
                    <description>Conformance Requirement (Fault bean name clash): Generated bean classes must have unique names within a package and MUST NOT clash with other classes in that package. Clashes during generation MUST be reported as an error and require user intervention via name customization to correct. Note that some platforms do not distiguish filenames based on case so comparisons MUST ignore case.</description>
                    <location chapter = "3" section = "7"/>
                </assertion>
                <assertion required="true" impl-spec="false" defined-by="technology"
                           status="active" testable="true">
                    <id>JAXWS:SPEC:3053</id>
                    <description>
                        Conformance (java.lang.RuntimeExceptions and java.rmi.RemoteExceptions) java.lang.RuntimeException and java.rmi.RemoteException and their subclasses MUST NOT be treated as service specific exceptions and MUST NOT be mapped to WSDL.
                    </description>
                    <location chapter="3" section="7"/>
                </assertion>
                <assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
                    <id>JAXWS:SPEC:3032</id>
                    <description>Conformance Requirement (Binding selection): Implementations MUST provide a facility for specifying the binding(s) to use in generated WSDL.</description>
                    <location chapter = "3" section = "8"/>
                </assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "removed" testable = "true">
			<id>JAXWS:SPEC:3041</id>
			<description>Conformance (Binding selection): An implementation MUST generate a WSDL binding according to the rules of the binding denoted by the BindingType annotation (see 7.8), if present, otherwise the default is the SOAP 1.1/HTTP binding (see 10).</description>
			<location chapter = "3" section = "8"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3042</id>
			<description>In JAX-WS when starting from Java and if generics are used in the document wrapped case, impelementations are required to use type erasure when generating the request /response wrapper beans and exception beans except in the case of Collections.</description>
			<location chapter = "3" section = "9"/>
		</assertion>




		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3033</id>
			<description>Conformance Requirement (SOAP binding support): Implementations MUST be able to generate SOAP HTTP bindings when mapping Java to WSDL 1.1.</description>
			<location chapter = "3" section = "10"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3034</id>
			<description>Conformance Requirement (SOAP binding style required): Implementations MUST include a style attribute on a generated soap:binding.</description>
			<location chapter = "3" section = "10.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3037</id>
			<description>
Conformance (Service creation): Implementations MUST be able to map classes annotated with the jakarta.jws.WebService annotation to WSDL wsdl:service elements.
			</description>
			<location chapter = "3" section = "11"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3035</id>
			<description>
Conformance (Port selection): The portName element of the WebService annotation, if present, MUST be used to derive the port name to use in WSDL. In the absence of a portName element, an implementation MUST use the value of the name element of the WebService annotation, if present, suffixed with Port. Otherwise, an implementation MUST use the simple name of the class annotated with WebService suffixed with Port.
			</description>
			<location chapter = "3" section = "11"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3039</id>
			<description>
Conformance (Port binding): The WSDL port defined for a service MUST refer to a binding of the type indicated by the BindingType annotation on the service implementation class (see 3.8).
			</description>
			<location chapter = "3" section = "10"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3055</id>
			<description>wsam:Action Computation Algorithm.
All wsdl:operation's child elements wsdl:input, wsdl:output and wsdl:fault must
have the wsam:Action attribute in the the generated WSDL. The algorithm to compute wsam:Action from SEI method is as follows:
  1. A non-default @Action(input=...) or @WebMethod(action=...) value on a SEI
  method MUST result into wsdl:input[@wsam:Action] attribute in the corresponding wsdl:operation. Also, @Action(input=...) and @WebMethod(action=...) annotation element values MUST be same, if present.
  2. A non-default @Action(output=...) value on a SEI method MUST result into wsdl:output[@wsam:Action] attribute in the corresponding wsdl:operation. 
  3. A non-default @Action(@FaultAction=...) value on a SEI method MUST result into wsdl:fault[@wsam:Action] attribute in the corresponding wsdl:operation.  The wsdl:fault element MUST correspond to the exception specified by className annotated element value.
  4. If wsdl:input[@wsam:Action] cannot be mapped from the above steps,  then wsam:Action is   generated using the metadata defaulting algorithm as if wsdl:input[@name] is not present in WSDL.
  5. If wsdl:output[@wsam:Action] cannot be mapped from the above steps, then wsam:Action is   generated using the metadata defaulting algorithm as if wsdl:output[@name] is not present in WSDL.
  6. If wsdl:fault[@wsam:Action] cannot be mapped from the above steps, then wsam:Action is   generated using the metadata defaulting algorithm as if wsdl:fault[@name] is the corresponding exception class name.

For example:
@Action(input="inAction") 
public float getPrice(String ticker) throws InvalidTickerException; 

// the mapped wsdl:operation if targetNamespace="http://example.com" and portType="StockQuoteProvider"
&lt;operation name="getPrice"&gt; 
  &lt;input name="foo" message="tns:getPrice" wsam:Action="inAction"/&gt; 
  &lt;output name="bar" message="tns:getPriceResponse"
    wsam:Action="http://example.com/StockQuoteProvider/getPriceResponse" /&gt; 
  &lt;fault name="FooTickerException" message="tns:InvalidTickerException"
    wsam:Action="http://example.com/StockQuoteProvider/getPrice/Fault/InvalidTickerException"/&gt; 
&lt;/operation&gt;
			</description>
			<location chapter = "3" section = "5.2"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3056</id>
			<description>Method Parameters and Return Type. 
JAXB doesn't define any namespace by default to types and elements. In the web services, typically these entities that are created for method parameters and return parameters are qualified. 
    * Conformance (use of JAXB annotations): JAX-WS tools and runtimes MUST override the default empty namespace for JAXB types and elements to SEI's targetNamespace.
			</description>
			<location chapter = "3" section = "6"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3057</id>
			<description>Document Wrapped.
Application's programming model doesn't use these bean classes, so the applications need not package these classes. JAX-WS implementations may generate these classes dynamically as specified in this section.
    * Conformance (Bundling wrapper beans): A JAX-WS implementation SHOULD not require an application to package request and response bean classes. However, when the bean classes are packaged, they MUST be used.

The name of wsdl:part for the wrapper must be named as "parameters" and "result" for input and output messages respectively in the generated WSDL.  The javax.xml.ws.RequestWrapper and javax.xml.ws.ResponseWrapper annotations (see 7.3 and 7.4) MAY be used to customize the name of the wsdl:part for the wrapper part.
    * Conformance (Default Wrapper wsdl:part names): In the absence of customizations, the name of the wsdl:part for the wrapper MUST be named as "parameters" and "result" for input and output messages respectively in the generated WSDL.
    * Conformance (Customizing Wrapper wsdl:part names): Non-default partName values of the javax.xml.ws.RequestWrapper and javax.xml.ws.ResponseWrapper annotations, if specified on SEI method, MUST be used as wsdl:part name for input and output messages respectively in the generated WSDL.

If a SEI's method parameter or return type is annotated with @XmlElement, that annotation is used for the wrapper bean properties. This can be used to map corresponding XML schema element declaration's attributes like minOccurs, maxOccurs, and nillable etc. It is an error to specify @XmlElement with a parameter or return type that is mapped to header part. If both @XmlElement and @WebParam/@WebResult are present, then it is an error to specify @XmlElement's name, and namespace elements different from @WebParam/@WebResult's name and targetNamespace elements respectively.
    * Conformance (Wrapper property): If a SEI's method parameter or return type is annotated with @XmlElement, that annotation MUST be used on the wrapper bean property.
			</description>
			<location chapter = "3" section = "6.2.1"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3058</id>
			<description>Service Specific Exception.
    * Conformance (Exception naming): In the absence of customizations, the name of the wsdl:message element MUST be the name of the Java exception.

The javax.xml.ws.WebFault annotation may be used to customize the name of the wsdl:message element and also to resolve any conflicts.

    * Conformance (Exception naming): If an exception has @WebFault, then messageName MUST be the name of the corresponding wsdl:message element.

Application's programming model doesn't use these bean classes, so the applications need not package these classes. JAX-WS implementations may generate these classes dynamically as specified in this section.
    * Conformance (Bundling wrapper beans): JAX-WS implementations do not require an application to package exception bean classes. However, when the exception bean classes are packaged, they MUST be used.
			</description>
			<location chapter = "3" section = "7"/>
		</assertion>
		<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
			<id>JAXWS:SPEC:3059</id>
			<description>Service and Ports.
If the endpoint enables Addressing, that can be indicated in the generated
WSDL as per the Addressing 1.0 - Metadata[35].

    * Conformance (Use of Addressing): Endpoint's use of addressing, if any, MUST be indicated in the wsdl:binding or wsdl:port sections of the WSDL 1.1 as per WS-Addressing 1.0 - Metadata[35].

Example 1:
Possible Policy assertion for @Addressing in the generated WSDL:

ssible Policy assertion for @Addressing in the generated WSDL:

&lt;wsam:Addressing wsp:Optional="true"&gt;
  &lt;wsp:Policy/&gt;
&lt;/wsam:Addressing&gt;

Example 2:
Possible Policy assertion for @Addressing(required=true) in the generated WSDL:

&lt;wsam:Addressing&gt;
 &lt;wsp:Policy/&gt;
&lt;/wsam:Addressing&gt;

Example 3:
Possible Policy assertion for @Addressing(responses=Responses.NON_ANONYMOUS) in the generated WSDL:

&lt;wsam:Addressing wsp:Optional="true"&gt;
  &lt;wsp:Policy&gt;
    &lt;wsam:NonAnonymousResponses/&gt;
  &lt;/wsp:Policy&gt;
&lt;/wsam:Addressing&gt;
			</description>
			<location chapter = "3" section = "11"/>
		</assertion>

<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by sudipto ghosh (sun microsystems) -->
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<?xml-stylesheet type="text/xsl" href="https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/javadoc_assertions.xsl"?>
<javadoc>
	<next-available-id>1640</next-available-id>
	<previous-id>1</previous-id>
	<technology>JDBC</technology>
	<id>JDBC</id>
	<name>Java API for Database Connectivity</name>
	<version>3.0</version>
	<assertions>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;BIT&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="BIT" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>2</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;TINYINT&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="TINYINT" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>3</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;SMALLINT&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="SMALLINT" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>4</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;INTEGER&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="INTEGER" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>5</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;BIGINT&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="BIGINT" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>6</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;FLOAT&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="FLOAT" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>7</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;REAL&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="REAL" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>8</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;DOUBLE&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="DOUBLE" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>9</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;NUMERIC&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="NUMERIC" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>10</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;DECIMAL&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="DECIMAL" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>11</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;CHAR&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="CHAR" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>12</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;VARCHAR&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="VARCHAR" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>13</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;LONGVARCHAR&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="LONGVARCHAR" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>14</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;DATE&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="DATE" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>15</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;TIME&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="TIME" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>16</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;TIMESTAMP&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="TIMESTAMP" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>17</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;BINARY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="BINARY" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>18</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;VARBINARY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="VARBINARY" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>19</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;LONGVARBINARY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="LONGVARBINARY" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>20</id>
			<description>
                            &lt;P&gt;The constant in the Java programming language, sometimes referred  to as a type code, that identifies the generic SQL type   &lt;code&gt;NULL&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="NULL" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>21</id>
			<description>
                            The constant in the Java programming language that indicates  that the SQL type is database-specific and  gets mapped to a Java object that can be accessed via  the methods &lt;code&gt;getObject&lt;/code&gt; and &lt;code&gt;setObject&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="OTHER" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>22</id>
			<description>
                            The constant in the Java programming language, sometimes referred to  as a type code, that identifies the generic SQL type  &lt;code&gt;JAVA_OBJECT&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="JAVA_OBJECT" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>23</id>
			<description>
                            The constant in the Java programming language, sometimes referred to  as a type code, that identifies the generic SQL type  &lt;code&gt;DISTINCT&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="DISTINCT" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>24</id>
			<description>
                            The constant in the Java programming language, sometimes referred to  as a type code, that identifies the generic SQL type  &lt;code&gt;STRUCT&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="STRUCT" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>25</id>
			<description>
                            The constant in the Java programming language, sometimes referred to  as a type code, that identifies the generic SQL type  &lt;code&gt;ARRAY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="ARRAY" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>26</id>
			<description>
                            The constant in the Java programming language, sometimes referred to  as a type code, that identifies the generic SQL type  &lt;code&gt;BLOB&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="BLOB" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>27</id>
			<description>
                            The constant in the Java programming language, sometimes referred to  as a type code, that identifies the generic SQL type  &lt;code&gt;CLOB&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="CLOB" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>28</id>
			<description>
                            The constant in the Java programming language, sometimes referred to  as a type code, that identifies the generic SQL type  &lt;code&gt;REF&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="REF" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>29</id>
			<description>
                            The constant in the Java programming language, somtimes referred to  as a type code, that identifies the generic SQL type &lt;code&gt;DATALINK&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="DATALINK" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>30</id>
			<description>
                            The constant in the Java programming language, somtimes referred to  as a type code, that identifies the generic SQL type &lt;code&gt;BOOLEAN&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Types</class-interface>
			<field name="BOOLEAN" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>31</id>
			<description>
                            Constructs a &lt;code&gt;Timestamp&lt;/code&gt; object initialized  with the given values.
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="Timestamp" return-type="Timestamp">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>32</id>
			<description>
                            Constructs a &lt;code&gt;Timestamp&lt;/code&gt; object   using a milliseconds time value.
                             The  integral seconds are stored in the underlying date value; the  fractional seconds are stored in the &lt;code&gt;nanos&lt;/code&gt; field of  the &lt;code&gt;Timestamp&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="Timestamp" return-type="Timestamp">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>33</id>
			<description>
                            Sets this &lt;code&gt;Timestamp&lt;/code&gt; object to represent a point in time that is   &lt;tt&gt;time&lt;/tt&gt; milliseconds after January 1, 1970 00:00:00 GMT.
                            
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>34</id>
			<description>
                            Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT  represented by this &lt;code&gt;Timestamp&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="getTime" return-type="long"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>35</id>
			<description>
                            Converts a &lt;code&gt;String&lt;/code&gt; object in JDBC timestamp escape format to a  &lt;code&gt;Timestamp&lt;/code&gt; value.
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="valueOf" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>36</id>
			<description>
                            Formats a timestamp in JDBC timestamp escape format.
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="toString" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>37</id>
			<description>
                            Gets this &lt;code&gt;Timestamp&lt;/code&gt; object's &lt;code&gt;nanos&lt;/code&gt; value.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="getNanos" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>38</id>
			<description>
                            Sets this &lt;code&gt;Timestamp&lt;/code&gt; object's &lt;code&gt;nanos&lt;/code&gt; field  to the given value.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="setNanos" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>39</id>
			<description>
                            Tests to see if this &lt;code&gt;Timestamp&lt;/code&gt; object is  equal to the given &lt;code&gt;Timestamp&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="equals" return-type="boolean">
				<parameters>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>40</id>
			<description>
                            Tests to see if this &lt;code&gt;Timestamp&lt;/code&gt; object is  equal to the given object.
                               This version of the method &lt;code&gt;equals&lt;/code&gt; has been added  to fix the incorrect   signature of &lt;code&gt;Timestamp.equals(Timestamp)&lt;/code&gt; and to preserve backward   compatibility with existing class files.   Note: This method is not symmetric with respect to the   &lt;code&gt;equals(Object)&lt;/code&gt; method in the base class.
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="equals" return-type="boolean">
				<parameters>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>41</id>
			<description>
                            Indicates whether this &lt;code&gt;Timestamp&lt;/code&gt; object is  earlier than the given &lt;code&gt;Timestamp&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="before" return-type="boolean">
				<parameters>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>42</id>
			<description>
                            Indicates whether this &lt;code&gt;Timestamp&lt;/code&gt; object is  later than the given &lt;code&gt;Timestamp&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="after" return-type="boolean">
				<parameters>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>43</id>
			<description>
                            Compares two Timestamps for ordering.
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="compareTo" return-type="int">
				<parameters>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>44</id>
			<description>
                            Compares this Timestamp to another Object.
                             If the Object is   a Date, this function behaves like compareTo(Timestamp).   Otherwise, it throws aClassCastException (as Timestamps are   comparable only to other Timestamps)
                        </description>
			<package>java.sql</package>
			<class-interface>Timestamp</class-interface>
			<method name="compareTo" return-type="int">
				<parameters>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>45</id>
			<description>
                            Constructs a &lt;code&gt;Time&lt;/code&gt; object initialized with the   given values for the hour, minute, and second.
                              The driver sets the date components to January 1, 1970.  Any method that attempts to access the date components of a  &lt;code&gt;Time&lt;/code&gt; object will throw a  &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;.  &lt;P&gt;  The result is undefined if a given argument is out of bounds.
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="Time" return-type="Time">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>46</id>
			<description>
                            Constructs a &lt;code&gt;Time&lt;/code&gt; object using a milliseconds time value.
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="Time" return-type="Time">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>47</id>
			<description>
                            Sets a &lt;code&gt;Time&lt;/code&gt; object using a milliseconds time value.
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>48</id>
			<description>
                            Converts a string in JDBC time escape format to a &lt;code&gt;Time&lt;/code&gt; value.
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="valueOf" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>49</id>
			<description>
                            Formats a time in JDBC time escape format.
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="toString" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>50</id>
			<description>
                            This method is deprecated and should not be used because SQL &lt;code&gt;TIME&lt;/code&gt;   values do not have a year component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="getYear" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>51</id>
			<description>
                            This method is deprecated and should not be used because SQL &lt;code&gt;TIME&lt;/code&gt;   values do not have a month component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="getMonth" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>52</id>
			<description>
                            This method is deprecated and should not be used because SQL &lt;code&gt;TIME&lt;/code&gt;   values do not have a day component.
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="getDay" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>53</id>
			<description>
                            This method is deprecated and should not be used because SQL &lt;code&gt;TIME&lt;/code&gt;   values do not have a date component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="getDate" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>54</id>
			<description>
                            This method is deprecated and should not be used because SQL &lt;code&gt;TIME&lt;/code&gt;   values do not have a year component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="setYear" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>55</id>
			<description>
                            This method is deprecated and should not be used because SQL &lt;code&gt;TIME&lt;/code&gt;   values do not have a month component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="setMonth" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>56</id>
			<description>
                            This method is deprecated and should not be used because SQL &lt;code&gt;TIME&lt;/code&gt;   values do not have a date component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Time</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>57</id>
			<description>
                            Constructs a fully-specified &lt;code&gt;SQLWarning&lt;/code&gt; object  initialized with the given values.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLWarning</class-interface>
			<method name="SQLWarning" return-type="SQLWarning">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>58</id>
			<description>
                            Constructs an &lt;code&gt;SQLWarning&lt;/code&gt; object  with the given reason and SQLState;  the vendorCode defaults to 0.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLWarning</class-interface>
			<method name="SQLWarning" return-type="SQLWarning">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>59</id>
			<description>
                            Constructs an &lt;code&gt;SQLWarning&lt;/code&gt; object  with the given value for a reason; SQLstate defaults to  &lt;code&gt;null&lt;/code&gt;, and vendorCode defaults to 0.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLWarning</class-interface>
			<method name="SQLWarning" return-type="SQLWarning">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>60</id>
			<description>
                            Constructs a default &lt;code&gt;SQLWarning&lt;/code&gt; object.
                              The reason defaults to &lt;code&gt;null&lt;/code&gt;, SQLState  defaults to &lt;code&gt;null&lt;/code&gt;, and vendorCode defaults to 0.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLWarning</class-interface>
			<method name="SQLWarning" return-type="SQLWarning"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>61</id>
			<description>
                            Retrieves the warning chained to this &lt;code&gt;SQLWarning&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>SQLWarning</class-interface>
			<method name="getNextWarning" return-type="java.sql.SQLWarning"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>62</id>
			<description>
                            Adds an &lt;code&gt;SQLWarning&lt;/code&gt; object to the end of the chain.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>SQLWarning</class-interface>
			<method name="setNextWarning" return-type="void">
				<parameters>
					<parameter>java.sql.SQLWarning</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>63</id>
			<description>
                            Creates a new &lt;code&gt;SQLPermission&lt;/code&gt; object with the specified name.
                              The name is the symbolic name of the &lt;code&gt;SQLPermission&lt;/code&gt;; currently,  the only name allowed is "setLog".
                        </description>
			<package>java.sql</package>
			<class-interface>SQLPermission</class-interface>
			<method name="SQLPermission" return-type="SQLPermission">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>64</id>
			<description>
                            Creates a new &lt;code&gt;SQLPermission&lt;/code&gt; object with the specified name.
                              The name is the symbolic name of the &lt;code&gt;SQLPermission&lt;/code&gt;; the  actions &lt;code&gt;String&lt;/code&gt; is currently unused and should be  &lt;code&gt;null&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLPermission</class-interface>
			<method name="SQLPermission" return-type="SQLPermission">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>65</id>
			<description>
                            Constructs a fully-specified &lt;code&gt;SQLException&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLException</class-interface>
			<method name="SQLException" return-type="SQLException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>66</id>
			<description>
                            Constructs an &lt;code&gt;SQLException&lt;/code&gt; object with the given reason and   SQLState; the &lt;code&gt;vendorCode&lt;/code&gt; field defaults to 0.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLException</class-interface>
			<method name="SQLException" return-type="SQLException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>67</id>
			<description>
                            Constructs an &lt;code&gt;SQLException&lt;/code&gt; object with a reason;  the &lt;code&gt;SQLState&lt;/code&gt; field defaults to &lt;code&gt;null&lt;/code&gt;, and   the &lt;code&gt;vendorCode&lt;/code&gt; field defaults to 0.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLException</class-interface>
			<method name="SQLException" return-type="SQLException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>68</id>
			<description>
                            Constructs an &lt;code&gt;SQLException&lt;/code&gt; object;  the &lt;code&gt;reason&lt;/code&gt; field defaults to null,   the &lt;code&gt;SQLState&lt;/code&gt; field defaults to &lt;code&gt;null&lt;/code&gt;, and   the &lt;code&gt;vendorCode&lt;/code&gt; field defaults to 0.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLException</class-interface>
			<method name="SQLException" return-type="SQLException"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>69</id>
			<description>
                            Retrieves the SQLState for this &lt;code&gt;SQLException&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLException</class-interface>
			<method name="getSQLState" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>70</id>
			<description>
                            Retrieves the vendor-specific exception code  for this &lt;code&gt;SQLException&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLException</class-interface>
			<method name="getErrorCode" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>71</id>
			<description>
                            Retrieves the exception chained to this   &lt;code&gt;SQLException&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>SQLException</class-interface>
			<method name="getNextException" return-type="java.sql.SQLException"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>72</id>
			<description>
                            Adds an &lt;code&gt;SQLException&lt;/code&gt; object to the end of the chain.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>SQLException</class-interface>
			<method name="setNextException" return-type="void">
				<parameters>
					<parameter>java.sql.SQLException</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>73</id>
			<description>
                            The name of the property.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverPropertyInfo</class-interface>
			<field name="name" type="public"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>74</id>
			<description>
                            A brief description of the property, which may be null.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverPropertyInfo</class-interface>
			<field name="description" type="public"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>75</id>
			<description>
                            The &lt;code&gt;required&lt;/code&gt; field is &lt;code&gt;true&lt;/code&gt; if a value must be   supplied for this property  during &lt;code&gt;Driver.connect&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; otherwise.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverPropertyInfo</class-interface>
			<field name="required" type="public"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>76</id>
			<description>
                            The &lt;code&gt;value&lt;/code&gt; field specifies the current value of   the property, based on a combination of the information  supplied to the method &lt;code&gt;getPropertyInfo&lt;/code&gt;, the  Java environment, and the driver-supplied default values.
                              This field  may be null if no value is known.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverPropertyInfo</class-interface>
			<field name="value" type="public"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>77</id>
			<description>
                            An array of possible values if the value for the field   &lt;code&gt;DriverPropertyInfo.value&lt;/code&gt; may be selected  from a particular set of values; otherwise null.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverPropertyInfo</class-interface>
			<field name="choices" type="public"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>78</id>
			<description>
                            Constructs a &lt;code&gt;DriverPropertyInfo&lt;/code&gt; object with a name and value;  other members default to their initial values.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverPropertyInfo</class-interface>
			<method name="DriverPropertyInfo" return-type="DriverPropertyInfo">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>79</id>
			<description>
                            Retrieves the log writer.
                                 The &lt;code&gt;getLogWriter&lt;/code&gt; and &lt;code&gt;setLogWriter&lt;/code&gt;   methods should be used instead  of the &lt;code&gt;get/setlogStream&lt;/code&gt; methods, which are deprecated.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getLogWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>80</id>
			<description>
                            Sets the logging/tracing &lt;code&gt;PrintWriter&lt;/code&gt; object  that is used by the &lt;code&gt;DriverManager&lt;/code&gt; and all drivers.
                              &lt;P&gt;  There is a minor versioning problem created by the introduction  of the method &lt;code&gt;setLogWriter&lt;/code&gt;.  The   method &lt;code&gt;setLogWriter&lt;/code&gt; cannot create a &lt;code&gt;PrintStream&lt;/code&gt; object  that will be returned by &lt;code&gt;getLogStream&lt;/code&gt;---the Java platform does  not provide a backward conversion.  As a result, a new application  that uses &lt;code&gt;setLogWriter&lt;/code&gt; and also uses a JDBC 1.0 driver that uses  &lt;code&gt;getLogStream&lt;/code&gt; will likely not see debugging information written   by that driver. &lt;P&gt;  In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks  to see that there is an &lt;code&gt;SQLPermission&lt;/code&gt; object before setting  the logging stream.  If a &lt;code&gt;SecurityManager&lt;/code&gt; exists and its  &lt;code&gt;checkPermission&lt;/code&gt; method denies setting the log writer, this  method throws a &lt;code&gt;java.lang.SecurityException&lt;/code&gt;.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="setLogWriter" return-type="void">
				<parameters>
					<parameter>java.io.PrintWriter</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>81</id>
			<description>
                            Attempts to establish a connection to the given database URL.
                              The &lt;code&gt;DriverManager&lt;/code&gt; attempts to select an appropriate driver from  the set of registered JDBC drivers.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Properties</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>82</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Properties</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>83</id>
			<description>
                            Attempts to establish a connection to the given database URL.
                              The &lt;code&gt;DriverManager&lt;/code&gt; attempts to select an appropriate driver from  the set of registered JDBC drivers.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>84</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>85</id>
			<description>
                            Attempts to establish a connection to the given database URL.
                              The &lt;code&gt;DriverManager&lt;/code&gt; attempts to select an appropriate driver from  the set of registered JDBC drivers.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>86</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>87</id>
			<description>
                            Attempts to locate a driver that understands the given URL.
                              The &lt;code&gt;DriverManager&lt;/code&gt; attempts to select an appropriate driver from  the set of registered JDBC drivers.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getDriver" return-type="java.sql.Driver">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>88</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getDriver" return-type="java.sql.Driver">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>89</id>
			<description>
                            Registers the given driver with the &lt;code&gt;DriverManager&lt;/code&gt;.
                              A newly-loaded driver class should call  the method &lt;code&gt;registerDriver&lt;/code&gt; to make itself  known to the &lt;code&gt;DriverManager&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="registerDriver" return-type="void">
				<parameters>
					<parameter>java.sql.Driver</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>90</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="registerDriver" return-type="void">
				<parameters>
					<parameter>java.sql.Driver</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>91</id>
			<description>
                            Drops a driver from the &lt;code&gt;DriverManager&lt;/code&gt;'s list.
                              Applets can only  deregister drivers from their own classloaders.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="deregisterDriver" return-type="void">
				<parameters>
					<parameter>java.sql.Driver</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>92</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="deregisterDriver" return-type="void">
				<parameters>
					<parameter>java.sql.Driver</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>93</id>
			<description>
                            Retrieves an Enumeration with all of the currently loaded JDBC drivers  to which the current caller has access.
                               &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; The classname of a driver can be found using  &lt;CODE&gt;d.getClass().getName()&lt;/CODE&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getDrivers" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>94</id>
			<description>
                            Sets the maximum time in seconds that a driver will wait  while attempting to connect to a database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="setLoginTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>95</id>
			<description>
                            Gets the maximum time in seconds that a driver can wait  when attempting to log in to a database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getLoginTimeout" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>96</id>
			<description>
                            Sets the logging/tracing PrintStream that is used  by the &lt;code&gt;DriverManager&lt;/code&gt;  and all drivers.
                             &lt;P&gt;  In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks  to see that there is an &lt;code&gt;SQLPermission&lt;/code&gt; object before setting  the logging stream.  If a &lt;code&gt;SecurityManager&lt;/code&gt; exists and its  &lt;code&gt;checkPermission&lt;/code&gt; method denies setting the log writer, this  method throws a &lt;code&gt;java.lang.SecurityException&lt;/code&gt;.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="setLogStream" return-type="void">
				<parameters>
					<parameter>java.io.PrintStream</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>97</id>
			<description>
                            Retrieves the logging/tracing PrintStream that is used by the &lt;code&gt;DriverManager&lt;/code&gt;  and all drivers.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="getLogStream" return-type="java.io.PrintStream"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>98</id>
			<description>
                            Prints a message to the current JDBC log stream.
                        </description>
			<package>java.sql</package>
			<class-interface>DriverManager</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>99</id>
			<description>
                            Constructs a &lt;code&gt;Date&lt;/code&gt; object initialized with the given  year, month, and day.
                              &lt;P&gt;  The result is undefined if a given argument is out of bounds.
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="Date" return-type="Date">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>100</id>
			<description>
                            Constructs a &lt;code&gt;Date&lt;/code&gt; object using the given milliseconds   time value.
                              If the given milliseconds value contains time   information, the driver will set the time components to the  time in the default time zone (the time zone of the Java virtual  machine running the application) that corresponds to zero GMT.
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="Date" return-type="Date">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>101</id>
			<description>
                            Sets an existing &lt;code&gt;Date&lt;/code&gt; object   using the given milliseconds time value.
                               If the given milliseconds value contains time information,   the driver will set the time components to the  time in the default time zone (the time zone of the Java virtual  machine running the application) that corresponds to zero GMT.
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>102</id>
			<description>
                            Converts a string in JDBC date escape format to  a &lt;code&gt;Date&lt;/code&gt; value.
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="valueOf" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>103</id>
			<description>
                            Formats a date in the date escape format yyyy-mm-dd.
                                &lt;P&gt;  NOTE:  To specify a date format for the class  &lt;code&gt;SimpleDateFormat&lt;/code&gt;, use "yyyy.MM.dd" rather than  "yyyy-mm-dd".  In the context of &lt;code&gt;SimpleDateFormat&lt;/code&gt;,  "mm" indicates minutes rather than the month.    For example:  &lt;PRE&gt;    Format Pattern                         Result   --------------                         -------  "yyyy.MM.dd G 'at' hh:mm:ss z"    -&gt;&gt;  1996.07.10 AD at 15:08:56 PDT  &lt;/PRE&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="toString" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>104</id>
			<description>
                            This method is deprecated and should not be used because SQL Date   values do not have a time component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="getHours" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>105</id>
			<description>
                            This method is deprecated and should not be used because SQL Date   values do not have a time component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="getMinutes" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>106</id>
			<description>
                            This method is deprecated and should not be used because SQL Date   values do not have a time component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="getSeconds" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>107</id>
			<description>
                            This method is deprecated and should not be used because SQL Date   values do not have a time component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="setHours" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>108</id>
			<description>
                            This method is deprecated and should not be used because SQL Date   values do not have a time component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="setMinutes" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>109</id>
			<description>
                            This method is deprecated and should not be used because SQL Date   values do not have a time component.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Date</class-interface>
			<method name="setSeconds" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>110</id>
			<description>
                            Creates a &lt;code&gt;DataTruncation&lt;/code&gt; object   with the SQLState initialized  to 01004, the reason set to "Data truncation", the  vendorCode set to the SQLException default, and  the other fields set to the given values.
                        </description>
			<package>java.sql</package>
			<class-interface>DataTruncation</class-interface>
			<method name="DataTruncation" return-type="DataTruncation">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
					<parameter>boolean</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>111</id>
			<description>
                            Retrieves the index of the column or parameter that was truncated.
                               &lt;P&gt;This may be -1 if the column or parameter index is unknown, in   which case the &lt;code&gt;parameter&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; fields should be ignored.
                        </description>
			<package>java.sql</package>
			<class-interface>DataTruncation</class-interface>
			<method name="getIndex" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>112</id>
			<description>
                            Indicates whether the value truncated was a parameter value or  a column value.
                        </description>
			<package>java.sql</package>
			<class-interface>DataTruncation</class-interface>
			<method name="getParameter" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>113</id>
			<description>
                            Indicates whether or not the value was truncated on a read.
                        </description>
			<package>java.sql</package>
			<class-interface>DataTruncation</class-interface>
			<method name="getRead" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>114</id>
			<description>
                            Gets the number of bytes of data that should have been transferred.
                              This number may be approximate if data conversions were being  performed.  The value may be &lt;code&gt;-1&lt;/code&gt; if the size is unknown.
                        </description>
			<package>java.sql</package>
			<class-interface>DataTruncation</class-interface>
			<method name="getDataSize" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>115</id>
			<description>
                            Gets the number of bytes of data actually transferred.
                              The value may be &lt;code&gt;-1&lt;/code&gt; if the size is unknown.
                        </description>
			<package>java.sql</package>
			<class-interface>DataTruncation</class-interface>
			<method name="getTransferSize" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>116</id>
			<description>
                            Constructs a fully-specified &lt;code&gt;BatchUpdateException&lt;/code&gt; object,  initializing it with the given values.
                        </description>
			<package>java.sql</package>
			<class-interface>BatchUpdateException</class-interface>
			<method name="BatchUpdateException" return-type="BatchUpdateException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>117</id>
			<description>
                            Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; initialized with   the given arguments (&lt;code&gt;reason&lt;/code&gt;,  &lt;code&gt;SQLState&lt;/code&gt;, and &lt;code&gt;updateCounts&lt;/code&gt;) and 0 for the vendor  code.
                        </description>
			<package>java.sql</package>
			<class-interface>BatchUpdateException</class-interface>
			<method name="BatchUpdateException" return-type="BatchUpdateException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>118</id>
			<description>
                            Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; initialized with  &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;updateCounts&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;  for the SQLState and 0 for the vendorCode.
                        </description>
			<package>java.sql</package>
			<class-interface>BatchUpdateException</class-interface>
			<method name="BatchUpdateException" return-type="BatchUpdateException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>119</id>
			<description>
                            Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; initialized to   &lt;code&gt;null&lt;/code&gt; for the reason and SQLState and 0 for the  vendor code.
                        </description>
			<package>java.sql</package>
			<class-interface>BatchUpdateException</class-interface>
			<method name="BatchUpdateException" return-type="BatchUpdateException">
				<parameters>
					<parameter>int[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>120</id>
			<description>
                            Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object   with the reason, SQLState, and update count initialized to  &lt;code&gt;null&lt;/code&gt; and the vendor code initialized to 0.
                        </description>
			<package>java.sql</package>
			<class-interface>BatchUpdateException</class-interface>
			<method name="BatchUpdateException" return-type="BatchUpdateException"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>121</id>
			<description>
                            Retrieves the update count for each update statement in the batch  update that executed successfully before this exception occurred.
                              A driver that implements batch updates may or may not continue to  process the remaining commands in a batch when one of the commands  fails to execute properly. If the driver continues processing commands,  the array returned by this method will have as many elements as  there are commands in the batch; otherwise, it will contain an  update count for each command that executed successfully before  the &lt;code&gt;BatchUpdateException&lt;/code&gt; was thrown. &lt;P&gt;  The possible return values for this method were modified for  the Java 2 SDK, Standard Edition, version 1.3.  This was done to  accommodate the new option of continuing to process commands  in a batch update after a &lt;code&gt;BatchUpdateException&lt;/code&gt; object  has been thrown.
                        </description>
			<package>java.sql</package>
			<class-interface>BatchUpdateException</class-interface>
			<method name="getUpdateCounts" return-type="int[]"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>122</id>
			<description>
                            Retrieves the SQL type name of the SQL structured type  that this &lt;code&gt;Struct&lt;/code&gt; object represents.
                        </description>
			<package>java.sql</package>
			<class-interface>Struct</class-interface>
			<method name="getSQLTypeName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>123</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Struct</class-interface>
			<method name="getSQLTypeName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>124</id>
			<description>
                            Produces the ordered values of the attributes of the SQL   structurec type that this &lt;code&gt;Struct&lt;/code&gt; object represents.
                              This method uses the type map associated with the   connection for customizations of the type mappings.  If there is no  entry in the connection's type map that matches the structured  type that this &lt;code&gt;Struct&lt;/code&gt; object represents,  the driver uses the standard mapping.  &lt;p&gt;  Conceptually, this method calls the method  &lt;code&gt;getObject&lt;/code&gt; on each attribute  of the structured type and returns a Java array containing   the result.
                        </description>
			<package>java.sql</package>
			<class-interface>Struct</class-interface>
			<method name="getAttributes" return-type="java.lang.Object[]"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>125</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Struct</class-interface>
			<method name="getAttributes" return-type="java.lang.Object[]">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>126</id>
			<description>
                            Produces the ordered values of the attributes of the SQL   structurec type that this &lt;code&gt;Struct&lt;/code&gt; object represents.
                              This method uses the given type map  for customizations of the type mappings.  If there is no  entry in the given type map that matches the structured  type that this &lt;code&gt;Struct&lt;/code&gt; object represents,  the driver uses the standard mapping. This method never  uses the type map associated with the connection.  &lt;p&gt;  Conceptually, this method calls the method  &lt;code&gt;getObject&lt;/code&gt; on each attribute  of the structured type and returns a Java array containing  the result.
                        </description>
			<package>java.sql</package>
			<class-interface>Struct</class-interface>
			<method name="getAttributes" return-type="java.lang.Object[]">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>127</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Struct</class-interface>
			<method name="getAttributes" return-type="java.lang.Object[]">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>128</id>
			<description>
                            The constant indicating that the current &lt;code&gt;ResultSet&lt;/code&gt; object   should be closed when calling &lt;code&gt;getMoreResults&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<field name="CLOSE_CURRENT_RESULT" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>129</id>
			<description>
                            The constant indicating that the current &lt;code&gt;ResultSet&lt;/code&gt; object  should not be closed when calling &lt;code&gt;getMoreResults&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<field name="KEEP_CURRENT_RESULT" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>130</id>
			<description>
                            The constant indicating that all &lt;code&gt;ResultSet&lt;/code&gt; objects that  have previously been kept open should be closed when calling  &lt;code&gt;getMoreResults&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<field name="CLOSE_ALL_RESULTS" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>131</id>
			<description>
                            The constant indicating that a batch statement executed successfully  but that no count of the number of rows it affected is available.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<field name="SUCCESS_NO_INFO" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>132</id>
			<description>
                            The constant indicating that an error occured while executing a  batch statement.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<field name="EXECUTE_FAILED" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>133</id>
			<description>
                            The constant indicating that generated keys should be made   available for retrieval.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<field name="RETURN_GENERATED_KEYS" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>134</id>
			<description>
                            The constant indicating that generated keys should not be made   available for retrieval.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<field name="NO_GENERATED_KEYS" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>135</id>
			<description>
                            Executes the given SQL statement, which returns a single   &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeQuery" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>136</id>
			<description>if a database access error occurs or the given             SQL statement produces anything other than a single             &lt;code&gt;ResultSet&lt;/code&gt; object</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeQuery" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>137</id>
			<description>
                            Executes the given SQL statement, which may be an &lt;code&gt;INSERT&lt;/code&gt;,   &lt;code&gt;UPDATE&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt; statement or an  SQL statement that returns nothing, such as an SQL DDL statement.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeUpdate" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>138</id>
			<description>if a database access error occurs or the given             SQL statement produces a &lt;code&gt;ResultSet&lt;/code&gt; object</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeUpdate" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>139</id>
			<description>
                            Releases this &lt;code&gt;Statement&lt;/code&gt; object's database   and JDBC resources immediately instead of waiting for  this to happen when it is automatically closed.
                              It is generally good practice to release resources as soon as  you are finished with them to avoid tying up database  resources.  &lt;P&gt;  Calling the method &lt;code&gt;close&lt;/code&gt; on a &lt;code&gt;Statement&lt;/code&gt;  object that is already closed has no effect.  &lt;P&gt;  &lt;B&gt;Note:&lt;/B&gt; A &lt;code&gt;Statement&lt;/code&gt; object is automatically closed   when it is garbage collected. When a &lt;code&gt;Statement&lt;/code&gt; object is   closed, its current &lt;code&gt;ResultSet&lt;/code&gt; object, if one exists, is   also closed.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="close" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>140</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="close" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>141</id>
			<description>
                            Retrieves the maximum number of bytes that can be  returned for character and binary column values in a &lt;code&gt;ResultSet&lt;/code&gt;   object produced by this &lt;code&gt;Statement&lt;/code&gt; object.
                              This limit applies only to &lt;code&gt;BINARY&lt;/code&gt;,  &lt;code&gt;VARBINARY&lt;/code&gt;, &lt;code&gt;LONGVARBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;,  &lt;code&gt;VARCHAR&lt;/code&gt;, and &lt;code&gt;LONGVARCHAR&lt;/code&gt;  columns.  If the limit is exceeded, the excess data is silently  discarded.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getMaxFieldSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>142</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getMaxFieldSize" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>143</id>
			<description>
                            Sets the limit for the maximum number of bytes in a &lt;code&gt;ResultSet&lt;/code&gt;  column storing character or binary values to  the given number of bytes.
                              This limit applies  only to &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;VARBINARY&lt;/code&gt;,  &lt;code&gt;LONGVARBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;, and  &lt;code&gt;LONGVARCHAR&lt;/code&gt; fields.  If the limit is exceeded, the excess data  is silently discarded. For maximum portability, use values  greater than 256.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setMaxFieldSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>144</id>
			<description>if a database access error occurs              or the condition max &gt;= 0 is not satisfied</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setMaxFieldSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>145</id>
			<description>
                            Retrieves the maximum number of rows that a  &lt;code&gt;ResultSet&lt;/code&gt; object produced by this  &lt;code&gt;Statement&lt;/code&gt; object can contain.
                              If this limit is exceeded,   the excess rows are silently dropped.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getMaxRows" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>146</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getMaxRows" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>147</id>
			<description>
                            Sets the limit for the maximum number of rows that any  &lt;code&gt;ResultSet&lt;/code&gt; object can contain to the given number.
                              If the limit is exceeded, the excess  rows are silently dropped.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setMaxRows" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>148</id>
			<description>if a database access error occurs             or the condition max &gt;= 0 is not satisfied</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setMaxRows" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>149</id>
			<description>
                            Sets escape processing on or off.
                              If escape scanning is on (the default), the driver will do  escape substitution before sending the SQL statement to the database.   Note: Since prepared statements have usually been parsed prior  to making this call, disabling escape processing for   &lt;code&gt;PreparedStatements&lt;/code&gt; objects will have no effect.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setEscapeProcessing" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>150</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setEscapeProcessing" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>151</id>
			<description>
                            Retrieves the number of seconds the driver will  wait for a &lt;code&gt;Statement&lt;/code&gt; object to execute.
                             If the limit is exceeded, a  &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getQueryTimeout" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>152</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getQueryTimeout" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>153</id>
			<description>
                            Sets the number of seconds the driver will wait for a   &lt;code&gt;Statement&lt;/code&gt; object to execute to the given number of seconds.
                              If the limit is exceeded, an &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setQueryTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>154</id>
			<description>if a database access error occurs             or the condition seconds &gt;= 0 is not satisfied</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setQueryTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>155</id>
			<description>
                            Cancels this &lt;code&gt;Statement&lt;/code&gt; object if both the DBMS and  driver support aborting an SQL statement.
                              This method can be used by one thread to cancel a statement that  is being executed by another thread.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="cancel" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>156</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="cancel" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>157</id>
			<description>
                            Retrieves the first warning reported by calls on this &lt;code&gt;Statement&lt;/code&gt; object.
                              Subsequent &lt;code&gt;Statement&lt;/code&gt; object warnings will be chained to this  &lt;code&gt;SQLWarning&lt;/code&gt; object.   &lt;p&gt;The warning chain is automatically cleared each time  a statement is (re)executed. This method may not be called on a closed  &lt;code&gt;Statement&lt;/code&gt; object; doing so will cause an &lt;code&gt;SQLException&lt;/code&gt;  to be thrown.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If you are processing a &lt;code&gt;ResultSet&lt;/code&gt; object, any  warnings associated with reads on that &lt;code&gt;ResultSet&lt;/code&gt; object   will be chained on it rather than on the &lt;code&gt;Statement&lt;/code&gt;  object that produced it.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getWarnings" return-type="java.sql.SQLWarning"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>158</id>
			<description>if a database access error occurs or this              method is called on a closed statement</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getWarnings" return-type="java.sql.SQLWarning">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>159</id>
			<description>
                            Clears all the warnings reported on this &lt;code&gt;Statement&lt;/code&gt;  object.
                             After a call to this method,  the method &lt;code&gt;getWarnings&lt;/code&gt; will return   &lt;code&gt;null&lt;/code&gt; until a new warning is reported for this  &lt;code&gt;Statement&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="clearWarnings" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>160</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="clearWarnings" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>161</id>
			<description>
                            Sets the SQL cursor name to the given &lt;code&gt;String&lt;/code&gt;, which   will be used by subsequent &lt;code&gt;Statement&lt;/code&gt; object   &lt;code&gt;execute&lt;/code&gt; methods.
                             This name can then be  used in SQL positioned update or delete statements to identify the  current row in the &lt;code&gt;ResultSet&lt;/code&gt; object generated by this   statement.  If the database does not support positioned update/delete,   this method is a noop.  To insure that a cursor has the proper isolation  level to support updates, the cursor's &lt;code&gt;SELECT&lt;/code&gt; statement   should have the form &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt;.  If   &lt;code&gt;FOR UPDATE&lt;/code&gt; is not present, positioned updates may fail.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; By definition, the execution of positioned updates and  deletes must be done by a different &lt;code&gt;Statement&lt;/code&gt; object than   the one that generated the &lt;code&gt;ResultSet&lt;/code&gt; object being used for   positioning. Also, cursor names must be unique within a connection.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setCursorName" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>162</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setCursorName" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>163</id>
			<description>
                            Executes the given SQL statement, which may return multiple results.
                              In some (uncommon) situations, a single SQL statement may return  multiple result sets and/or update counts.  Normally you can ignore  this unless you are (1) executing a stored procedure that you know may  return multiple results or (2) you are dynamically executing an  unknown SQL string.    &lt;P&gt;  The &lt;code&gt;execute&lt;/code&gt; method executes an SQL statement and indicates the  form of the first result.  You must then use the methods   &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt;  to retrieve the result, and &lt;code&gt;getMoreResults&lt;/code&gt; to  move to any subsequent result(s).
                            
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="execute" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>164</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="execute" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>165</id>
			<description>
                            Retrieves the current result as a &lt;code&gt;ResultSet&lt;/code&gt; object.
                                This method should be called only once per result.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>166</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>167</id>
			<description>
                            Retrieves the current result as an update count;   if the result is a &lt;code&gt;ResultSet&lt;/code&gt; object or there are no more results, -1   is returned.
                             This method should be called only once per result.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getUpdateCount" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>168</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getUpdateCount" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>169</id>
			<description>
                            Moves to this &lt;code&gt;Statement&lt;/code&gt; object's next result, returns  &lt;code&gt;true&lt;/code&gt; if it is a &lt;code&gt;ResultSet&lt;/code&gt; object, and  implicitly closes any current &lt;code&gt;ResultSet&lt;/code&gt;  object(s) obtained with the method &lt;code&gt;getResultSet&lt;/code&gt;.
                               &lt;P&gt;There are no more results when the following is true:  &lt;PRE&gt;       &lt;code&gt;(!getMoreResults() &amp;&amp; (getUpdateCount() == -1)&lt;/code&gt;  &lt;/PRE&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getMoreResults" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>170</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getMoreResults" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>171</id>
			<description>
                            Gives the driver a hint as to the direction in which  rows will be processed in &lt;code&gt;ResultSet&lt;/code&gt;  objects created using this &lt;code&gt;Statement&lt;/code&gt; object.
                              The   default value is &lt;code&gt;ResultSet.FETCH_FORWARD&lt;/code&gt;.  &lt;P&gt;  Note that this method sets the default fetch direction for   result sets generated by this &lt;code&gt;Statement&lt;/code&gt; object.  Each result set has its own methods for getting and setting  its own fetch direction.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setFetchDirection" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>172</id>
			<description>if a database access error occurs  or the given direction  is not one of &lt;code&gt;ResultSet.FETCH_FORWARD&lt;/code&gt;,  &lt;code&gt;ResultSet.FETCH_REVERSE&lt;/code&gt;, or &lt;code&gt;ResultSet.FETCH_UNKNOWN&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setFetchDirection" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>173</id>
			<description>
                            Retrieves the direction for fetching rows from  database tables that is the default for result sets  generated from this &lt;code&gt;Statement&lt;/code&gt; object.
                              If this &lt;code&gt;Statement&lt;/code&gt; object has not set  a fetch direction by calling the method &lt;code&gt;setFetchDirection&lt;/code&gt;,  the return value is implementation-specific.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getFetchDirection" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>174</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getFetchDirection" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>175</id>
			<description>
                            Gives the JDBC driver a hint as to the number of rows that should   be fetched from the database when more rows are needed.
                              The number   of rows specified affects only result sets created using this   statement. If the value specified is zero, then the hint is ignored.  The default value is zero.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setFetchSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>176</id>
			<description>if a database access error occurs, or the         condition 0 &lt;= &lt;code&gt;rows&lt;/code&gt; &lt;= &lt;code&gt;this.getMaxRows()&lt;/code&gt;          is not satisfied.</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="setFetchSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>177</id>
			<description>
                            Retrieves the number of result set rows that is the default   fetch size for &lt;code&gt;ResultSet&lt;/code&gt; objects  generated from this &lt;code&gt;Statement&lt;/code&gt; object.
                              If this &lt;code&gt;Statement&lt;/code&gt; object has not set  a fetch size by calling the method &lt;code&gt;setFetchSize&lt;/code&gt;,  the return value is implementation-specific.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getFetchSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>178</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getFetchSize" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>179</id>
			<description>
                            Retrieves the result set concurrency for &lt;code&gt;ResultSet&lt;/code&gt; objects  generated by this &lt;code&gt;Statement&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getResultSetConcurrency" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>180</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getResultSetConcurrency" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>181</id>
			<description>
                            Retrieves the result set type for &lt;code&gt;ResultSet&lt;/code&gt; objects  generated by this &lt;code&gt;Statement&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getResultSetType" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>182</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getResultSetType" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>183</id>
			<description>
                            Adds the given SQL command to the current list of commmands for this  &lt;code&gt;Statement&lt;/code&gt; object.
                             The commands in this list can be  executed as a batch by calling the method &lt;code&gt;executeBatch&lt;/code&gt;.  &lt;P&gt;  &lt;B&gt;NOTE:&lt;/B&gt;  This method is optional.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="addBatch" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>184</id>
			<description>if a database access error occurs, or the  driver does not support batch updates</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="addBatch" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>185</id>
			<description>
                            Empties this &lt;code&gt;Statement&lt;/code&gt; object's current list of   SQL commands.
                              &lt;P&gt;  &lt;B&gt;NOTE:&lt;/B&gt;  This method is optional.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="clearBatch" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>186</id>
			<description>if a database access error occurs or the  driver does not support batch updates</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="clearBatch" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>187</id>
			<description>
                            Submits a batch of commands to the database for execution and  if all commands execute successfully, returns an array of update counts.
                              The &lt;code&gt;int&lt;/code&gt; elements of the array that is returned are ordered  to correspond to the commands in the batch, which are ordered   according to the order in which they were added to the batch.  The elements in the array returned by the method &lt;code&gt;executeBatch&lt;/code&gt;  may be one of the following:  &lt;OL&gt;  &lt;LI&gt;A number greater than or equal to zero -- indicates that the  command was processed successfully and is an update count giving the  number of rows in the database that were affected by the command's  execution  &lt;LI&gt;A value of &lt;code&gt;SUCCESS_NO_INFO&lt;/code&gt; -- indicates that the command was  processed successfully but that the number of rows affected is  unknown  &lt;P&gt;   If one of the commands in a batch update fails to execute properly,  this method throws a &lt;code&gt;BatchUpdateException&lt;/code&gt;, and a JDBC  driver may or may not continue to process the remaining commands in  the batch.  However, the driver's behavior must be consistent with a  particular DBMS, either always continuing to process commands or never  continuing to process commands.  If the driver continues processing  after a failure, the array returned by the method  &lt;code&gt;BatchUpdateException.getUpdateCounts&lt;/code&gt;  will contain as many elements as there are commands in the batch, and  at least one of the elements will be the following:  &lt;P&gt;   &lt;LI&gt;A value of &lt;code&gt;EXECUTE_FAILED&lt;/code&gt; -- indicates that the command failed  to execute successfully and occurs only if a driver continues to  process commands after a command fails  &lt;/OL&gt;  &lt;P&gt;  A driver is not required to implement this method.  The possible implementations and return values have been modified in  the Java 2 SDK, Standard Edition, version 1.3 to  accommodate the option of continuing to proccess commands in a batch  update after a &lt;code&gt;BatchUpdateException&lt;/code&gt; obejct has been thrown.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeBatch" return-type="int[]"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>188</id>
			<description>if a database access error occurs or the  driver does not support batch statements. Throws {@link BatchUpdateException}  (a subclass of &lt;code&gt;SQLException&lt;/code&gt;) if one of the commands sent to the  database fails to execute properly or attempts to return a result set.</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeBatch" return-type="int[]">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>189</id>
			<description>
                            Retrieves the &lt;code&gt;Connection&lt;/code&gt; object  that produced this &lt;code&gt;Statement&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getConnection" return-type="java.sql.Connection"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>190</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>191</id>
			<description>
                            Moves to this &lt;code&gt;Statement&lt;/code&gt; object's next result, deals with  any current &lt;code&gt;ResultSet&lt;/code&gt; object(s) according  to the instructions  specified by the given flag, and returns  &lt;code&gt;true&lt;/code&gt; if the next result is a &lt;code&gt;ResultSet&lt;/code&gt; object.
                               &lt;P&gt;There are no more results when the following is true:  &lt;PRE&gt;       &lt;code&gt;(!getMoreResults() &amp;&amp; (getUpdateCount() == -1)&lt;/code&gt;  &lt;/PRE&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getMoreResults" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>192</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getMoreResults" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>193</id>
			<description>
                            Retrieves any auto-generated keys created as a result of executing this  &lt;code&gt;Statement&lt;/code&gt; object.
                             If this &lt;code&gt;Statement&lt;/code&gt; object did   not generate any keys, an empty &lt;code&gt;ResultSet&lt;/code&gt;  object is returned.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getGeneratedKeys" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>194</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getGeneratedKeys" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>195</id>
			<description>
                            Executes the given SQL statement and signals the driver with the  given flag about whether the  auto-generated keys produced by this &lt;code&gt;Statement&lt;/code&gt; object  should be made available for retrieval.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeUpdate" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>196</id>
			<description>if a database access error occurs, the given             SQL statement returns a &lt;code&gt;ResultSet&lt;/code&gt; object, or             the given constant is not one of those allowed</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeUpdate" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>197</id>
			<description>
                            Executes the given SQL statement and signals the driver that the  auto-generated keys indicated in the given array should be made available  for retrieval.
                              The driver will ignore the array if the SQL statement  is not an &lt;code&gt;INSERT&lt;/code&gt; statement.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeUpdate" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>198</id>
			<description>if a database access error occurs or the SQL             statement returns a &lt;code&gt;ResultSet&lt;/code&gt; object</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeUpdate" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>199</id>
			<description>
                            Executes the given SQL statement and signals the driver that the  auto-generated keys indicated in the given array should be made available  for retrieval.
                              The driver will ignore the array if the SQL statement  is not an &lt;code&gt;INSERT&lt;/code&gt; statement.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeUpdate" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>200</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="executeUpdate" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>201</id>
			<description>
                            Executes the given SQL statement, which may return multiple results,  and signals the driver that any  auto-generated keys should be made available  for retrieval.
                              The driver will ignore this signal if the SQL statement  is not an &lt;code&gt;INSERT&lt;/code&gt; statement.  &lt;P&gt;  In some (uncommon) situations, a single SQL statement may return  multiple result sets and/or update counts.  Normally you can ignore  this unless you are (1) executing a stored procedure that you know may  return multiple results or (2) you are dynamically executing an  unknown SQL string.    &lt;P&gt;  The &lt;code&gt;execute&lt;/code&gt; method executes an SQL statement and indicates the  form of the first result.  You must then use the methods   &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt;  to retrieve the result, and &lt;code&gt;getMoreResults&lt;/code&gt; to  move to any subsequent result(s).
                            
                            
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="execute" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>202</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="execute" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>203</id>
			<description>
                            Executes the given SQL statement, which may return multiple results,  and signals the driver that the  auto-generated keys indicated in the given array should be made available  for retrieval.
                              This array contains the indexes of the columns in the   target table that contain the auto-generated keys that should be made  available. The driver will ignore the array if the given SQL statement  is not an &lt;code&gt;INSERT&lt;/code&gt; statement.  &lt;P&gt;  Under some (uncommon) situations, a single SQL statement may return  multiple result sets and/or update counts.  Normally you can ignore  this unless you are (1) executing a stored procedure that you know may  return multiple results or (2) you are dynamically executing an  unknown SQL string.    &lt;P&gt;  The &lt;code&gt;execute&lt;/code&gt; method executes an SQL statement and indicates the  form of the first result.  You must then use the methods   &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt;  to retrieve the result, and &lt;code&gt;getMoreResults&lt;/code&gt; to  move to any subsequent result(s).
                            
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="execute" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>204</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="execute" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>205</id>
			<description>
                            Executes the given SQL statement, which may return multiple results,  and signals the driver that the  auto-generated keys indicated in the given array should be made available  for retrieval.
                             This array contains the names of the columns in the   target table that contain the auto-generated keys that should be made  available. The driver will ignore the array if the given SQL statement  is not an &lt;code&gt;INSERT&lt;/code&gt; statement.  &lt;P&gt;  In some (uncommon) situations, a single SQL statement may return  multiple result sets and/or update counts.  Normally you can ignore  this unless you are (1) executing a stored procedure that you know may  return multiple results or (2) you are dynamically executing an  unknown SQL string.    &lt;P&gt;  The &lt;code&gt;execute&lt;/code&gt; method executes an SQL statement and indicates the  form of the first result.  You must then use the methods   &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt;  to retrieve the result, and &lt;code&gt;getMoreResults&lt;/code&gt; to  move to any subsequent result(s).
                            
                            
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="execute" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>206</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="execute" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>207</id>
			<description>
                            Retrieves the result set holdability for &lt;code&gt;ResultSet&lt;/code&gt; objects  generated by this &lt;code&gt;Statement&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getResultSetHoldability" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>208</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Statement</class-interface>
			<method name="getResultSetHoldability" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>209</id>
			<description>
                            Retrieves the generated ID for the savepoint that this   &lt;code&gt;Savepoint&lt;/code&gt; object represents.
                        </description>
			<package>java.sql</package>
			<class-interface>Savepoint</class-interface>
			<method name="getSavepointId" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>210</id>
			<description>if this is a named savepoint</description>
			<package>java.sql</package>
			<class-interface>Savepoint</class-interface>
			<method name="getSavepointId" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>211</id>
			<description>
                            Retrieves the name of the savepoint that this &lt;code&gt;Savepoint&lt;/code&gt;  object represents.
                        </description>
			<package>java.sql</package>
			<class-interface>Savepoint</class-interface>
			<method name="getSavepointName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>212</id>
			<description>if this is an un-named savepoint</description>
			<package>java.sql</package>
			<class-interface>Savepoint</class-interface>
			<method name="getSavepointName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>213</id>
			<description>
                            Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeString" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>214</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeString" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>215</id>
			<description>
                            Writes the next attribute to the stream as a Java boolean.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBoolean" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>216</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBoolean" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>217</id>
			<description>
                            Writes the next attribute to the stream as a Java byte.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeByte" return-type="void">
				<parameters>
					<parameter>byte</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>218</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeByte" return-type="void">
				<parameters>
					<parameter>byte</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>219</id>
			<description>
                            Writes the next attribute to the stream as a Java short.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeShort" return-type="void">
				<parameters>
					<parameter>short</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>220</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeShort" return-type="void">
				<parameters>
					<parameter>short</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>221</id>
			<description>
                            Writes the next attribute to the stream as a Java int.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeInt" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>222</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeInt" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>223</id>
			<description>
                            Writes the next attribute to the stream as a Java long.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeLong" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>224</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeLong" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>225</id>
			<description>
                            Writes the next attribute to the stream as a Java float.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeFloat" return-type="void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>226</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeFloat" return-type="void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>227</id>
			<description>
                            Writes the next attribute to the stream as a Java double.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeDouble" return-type="void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>228</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeDouble" return-type="void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>229</id>
			<description>
                            Writes the next attribute to the stream as a java.math.BigDecimal object.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBigDecimal" return-type="void">
				<parameters>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>230</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBigDecimal" return-type="void">
				<parameters>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>231</id>
			<description>
                            Writes the next attribute to the stream as an array of bytes.
                              Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBytes" return-type="void">
				<parameters>
					<parameter>byte[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>232</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBytes" return-type="void">
				<parameters>
					<parameter>byte[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>233</id>
			<description>
                            Writes the next attribute to the stream as a java.sql.Date object.
                              Writes the next attribute to the stream as a &lt;code&gt;java.sql.Date&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeDate" return-type="void">
				<parameters>
					<parameter>java.sql.Date</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>234</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeDate" return-type="void">
				<parameters>
					<parameter>java.sql.Date</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>235</id>
			<description>
                            Writes the next attribute to the stream as a java.sql.Time object.
                              Writes the next attribute to the stream as a &lt;code&gt;java.sql.Date&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeTime" return-type="void">
				<parameters>
					<parameter>java.sql.Time</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>236</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeTime" return-type="void">
				<parameters>
					<parameter>java.sql.Time</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>237</id>
			<description>
                            Writes the next attribute to the stream as a java.sql.Timestamp object.
                              Writes the next attribute to the stream as a &lt;code&gt;java.sql.Date&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeTimestamp" return-type="void">
				<parameters>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>238</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeTimestamp" return-type="void">
				<parameters>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>239</id>
			<description>
                            Writes the next attribute to the stream as a stream of Unicode characters.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeCharacterStream" return-type="void">
				<parameters>
					<parameter>java.io.Reader</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>240</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeCharacterStream" return-type="void">
				<parameters>
					<parameter>java.io.Reader</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>241</id>
			<description>
                            Writes the next attribute to the stream as a stream of ASCII characters.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeAsciiStream" return-type="void">
				<parameters>
					<parameter>java.io.InputStream</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>242</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeAsciiStream" return-type="void">
				<parameters>
					<parameter>java.io.InputStream</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>243</id>
			<description>
                            Writes the next attribute to the stream as a stream of uninterpreted  bytes.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBinaryStream" return-type="void">
				<parameters>
					<parameter>java.io.InputStream</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>244</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBinaryStream" return-type="void">
				<parameters>
					<parameter>java.io.InputStream</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>245</id>
			<description>
                            Writes to the stream the data contained in the given   &lt;code&gt;SQLData&lt;/code&gt; object.
                              When the &lt;code&gt;SQLData&lt;/code&gt; object is &lt;code&gt;null&lt;/code&gt;, this  method writes an SQL &lt;code&gt;NULL&lt;/code&gt; to the stream.    Otherwise, it calls the &lt;code&gt;SQLData.writeSQL&lt;/code&gt;  method of the given object, which   writes the object's attributes to the stream.  The implementation of the method &lt;code&gt;SQLData.writeSQ&lt;/code&gt;  calls the appropriate &lt;code&gt;SQLOutput&lt;/code&gt; writer method(s)  for writing each of the object's attributes in order.  The attributes must be read from an &lt;code&gt;SQLInput&lt;/code&gt;  input stream and written to an &lt;code&gt;SQLOutput&lt;/code&gt;  output stream in the same order in which they were  listed in the SQL definition of the user-defined type.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeObject" return-type="void">
				<parameters>
					<parameter>java.sql.SQLData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>246</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeObject" return-type="void">
				<parameters>
					<parameter>java.sql.SQLData</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>247</id>
			<description>
                            Writes an SQL &lt;code&gt;REF&lt;/code&gt; value to the stream.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeRef" return-type="void">
				<parameters>
					<parameter>java.sql.Ref</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>248</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeRef" return-type="void">
				<parameters>
					<parameter>java.sql.Ref</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>249</id>
			<description>
                            Writes an SQL &lt;code&gt;BLOB&lt;/code&gt; value to the stream.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBlob" return-type="void">
				<parameters>
					<parameter>java.sql.Blob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>250</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeBlob" return-type="void">
				<parameters>
					<parameter>java.sql.Blob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>251</id>
			<description>
                            Writes an SQL &lt;code&gt;CLOB&lt;/code&gt; value to the stream.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeClob" return-type="void">
				<parameters>
					<parameter>java.sql.Clob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>252</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeClob" return-type="void">
				<parameters>
					<parameter>java.sql.Clob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>253</id>
			<description>
                            Writes an SQL structured type value to the stream.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeStruct" return-type="void">
				<parameters>
					<parameter>java.sql.Struct</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>254</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeStruct" return-type="void">
				<parameters>
					<parameter>java.sql.Struct</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>255</id>
			<description>
                            Writes an SQL &lt;code&gt;ARRAY&lt;/code&gt; value to the stream.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeArray" return-type="void">
				<parameters>
					<parameter>java.sql.Array</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>256</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeArray" return-type="void">
				<parameters>
					<parameter>java.sql.Array</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>257</id>
			<description>
                            Writes a SQL &lt;code&gt;DATALINK&lt;/code&gt; value to the stream.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeURL" return-type="void">
				<parameters>
					<parameter>java.net.URL</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>258</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLOutput</class-interface>
			<method name="writeURL" return-type="void">
				<parameters>
					<parameter>java.net.URL</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>259</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;String&lt;/code&gt;   in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readString" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>260</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readString" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>261</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;boolean&lt;/code&gt;   in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBoolean" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>262</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBoolean" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>263</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;byte&lt;/code&gt;   in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readByte" return-type="byte"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>264</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readByte" return-type="byte">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>265</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;short&lt;/code&gt;   in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readShort" return-type="short"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>266</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readShort" return-type="short">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>267</id>
			<description>
                            Reads the next attribute in the stream and returns it as an &lt;code&gt;int&lt;/code&gt;   in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readInt" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>268</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readInt" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>269</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;long&lt;/code&gt;   in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readLong" return-type="long"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>270</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readLong" return-type="long">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>271</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;float&lt;/code&gt;   in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readFloat" return-type="float"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>272</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readFloat" return-type="float">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>273</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;double&lt;/code&gt;   in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readDouble" return-type="double"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>274</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readDouble" return-type="double">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>275</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;java.math.BigDecimal&lt;/code&gt;   object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBigDecimal" return-type="java.math.BigDecimal"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>276</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBigDecimal" return-type="java.math.BigDecimal">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>277</id>
			<description>
                            Reads the next attribute in the stream and returns it as an array of bytes  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBytes" return-type="byte[]"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>278</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBytes" return-type="byte[]">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>279</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;java.sql.Date&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readDate" return-type="java.sql.Date"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>280</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readDate" return-type="java.sql.Date">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>281</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;java.sql.Time&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readTime" return-type="java.sql.Time"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>282</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readTime" return-type="java.sql.Time">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>283</id>
			<description>
                            Reads the next attribute in the stream and returns it as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readTimestamp" return-type="java.sql.Timestamp"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>284</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readTimestamp" return-type="java.sql.Timestamp">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>285</id>
			<description>
                            Reads the next attribute in the stream and returns it as a stream of Unicode characters.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readCharacterStream" return-type="java.io.Reader"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>286</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readCharacterStream" return-type="java.io.Reader">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>287</id>
			<description>
                            Reads the next attribute in the stream and returns it as a stream of ASCII characters.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readAsciiStream" return-type="java.io.InputStream"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>288</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readAsciiStream" return-type="java.io.InputStream">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>289</id>
			<description>
                            Reads the next attribute in the stream and returns it as a stream of uninterpreted  bytes.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBinaryStream" return-type="java.io.InputStream"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>290</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBinaryStream" return-type="java.io.InputStream">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>291</id>
			<description>
                            Reads the datum at the head of the stream and returns it as an  &lt;code&gt;Object&lt;/code&gt; in the Java programming language.
                              The  actual type of the object returned is determined by the default type  mapping, and any customizations present in this stream's type map.   &lt;P&gt;A type map is registered with the stream by the JDBC driver before the  stream is passed to the application.   &lt;P&gt;When the datum at the head of the stream is an SQL &lt;code&gt;NULL&lt;/code&gt;,   the method returns &lt;code&gt;null&lt;/code&gt;.  If the datum is an SQL structured or distinct  type, it determines the SQL type of the datum at the head of the stream.   If the stream's type map has an entry for that SQL type, the driver  constructs an object of the appropriate class and calls the method   &lt;code&gt;SQLData.readSQL&lt;/code&gt; on that object, which reads additional data from the   stream, using the protocol described for that method.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readObject" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>292</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readObject" return-type="java.lang.Object">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>293</id>
			<description>
                            Reads an SQL &lt;code&gt;REF&lt;/code&gt; value from the stream and returns it as a  &lt;code&gt;Ref&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readRef" return-type="java.sql.Ref"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>294</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readRef" return-type="java.sql.Ref">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>295</id>
			<description>
                            Reads an SQL &lt;code&gt;BLOB&lt;/code&gt; value from the stream and returns it as a  &lt;code&gt;Blob&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBlob" return-type="java.sql.Blob"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>296</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readBlob" return-type="java.sql.Blob">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>297</id>
			<description>
                            Reads an SQL &lt;code&gt;CLOB&lt;/code&gt; value from the stream and returns it as a  &lt;code&gt;Clob&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readClob" return-type="java.sql.Clob"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>298</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readClob" return-type="java.sql.Clob">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>299</id>
			<description>
                            Reads an SQL &lt;code&gt;ARRAY&lt;/code&gt; value from the stream and returns it as an  &lt;code&gt;Array&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readArray" return-type="java.sql.Array"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>300</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readArray" return-type="java.sql.Array">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>301</id>
			<description>
                            Retrieves whether the last value read was SQL &lt;code&gt;NULL&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="wasNull" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>302</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="wasNull" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>303</id>
			<description>
                            Reads an SQL &lt;code&gt;DATALINK&lt;/code&gt; value from the stream and returns it as a  &lt;code&gt;java.net.URL&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readURL" return-type="java.net.URL"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>304</id>
			<description>if a database access error occurs,             or if a URL is malformed</description>
			<package>java.sql</package>
			<class-interface>SQLInput</class-interface>
			<method name="readURL" return-type="java.net.URL">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>305</id>
			<description>
                            Returns the fully-qualified   name of the SQL user-defined type that this object represents.
                              This method is called by the JDBC driver to get the name of the  UDT instance that is being mapped to this instance of   &lt;code&gt;SQLData&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>SQLData</class-interface>
			<method name="getSQLTypeName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>306</id>
			<description>if there is a database access error</description>
			<package>java.sql</package>
			<class-interface>SQLData</class-interface>
			<method name="getSQLTypeName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>307</id>
			<description>
                            Populates this object with data read from the database.
                              The implementation of the method must follow this protocol:  &lt;UL&gt;   &lt;LI&gt;It must read each of the attributes or elements of the SQL  type  from the given input stream.  This is done   by calling a method of the input stream to read each  item, in the order that they appear in the SQL definition  of the type.    &lt;LI&gt;The method &lt;code&gt;readSQL&lt;/code&gt; then  assigns the data to appropriate fields or   elements (of this or other objects).  Specifically, it must call the appropriate &lt;i&gt;reader&lt;/i&gt; method   (&lt;code&gt;SQLInput.readString&lt;/code&gt;, &lt;code&gt;SQLInput.readBigDecimal&lt;/code&gt;,  and so on) method(s) to do the following:  for a distinct type, read its single data element;  for a structured type, read a value for each attribute of the SQL type.  &lt;/UL&gt;    The JDBC driver initializes the input stream with a type map  before calling this method, which is used by the appropriate  &lt;code&gt;SQLInput&lt;/code&gt; reader method on the stream.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>SQLData</class-interface>
			<method name="readSQL" return-type="void">
				<parameters>
					<parameter>java.sql.SQLInput</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>308</id>
			<description>if there is a database access error</description>
			<package>java.sql</package>
			<class-interface>SQLData</class-interface>
			<method name="readSQL" return-type="void">
				<parameters>
					<parameter>java.sql.SQLInput</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>309</id>
			<description>
                            Writes this object to the given SQL data stream, converting it back to  its SQL value in the data source.
                              The implementation of the method must follow this protocol:&lt;BR&gt;  It must write each of the attributes of the SQL type  to the given output stream.  This is done by calling a   method of the output stream to write each item, in the order that   they appear in the SQL definition of the type.  Specifically, it must call the appropriate &lt;code&gt;SQLOutput&lt;/code&gt; writer  method(s) (&lt;code&gt;writeInt&lt;/code&gt;, &lt;code&gt;writeString&lt;/code&gt;, and so on)  to do the following: for a Distinct Type, write its single data element;  for a Structured Type, write a value for each attribute of the SQL type.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>SQLData</class-interface>
			<method name="writeSQL" return-type="void">
				<parameters>
					<parameter>java.sql.SQLOutput</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>310</id>
			<description>if there is a database access error</description>
			<package>java.sql</package>
			<class-interface>SQLData</class-interface>
			<method name="writeSQL" return-type="void">
				<parameters>
					<parameter>java.sql.SQLOutput</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>311</id>
			<description>
                            The constant indicating that a  column does not allow &lt;code&gt;NULL&lt;/code&gt; values.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<field name="columnNoNulls" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>312</id>
			<description>
                            The constant indicating that a  column allows &lt;code&gt;NULL&lt;/code&gt; values.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<field name="columnNullable" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>313</id>
			<description>
                            The constant indicating that the  nullability of a column's values is unknown.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<field name="columnNullableUnknown" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>314</id>
			<description>
                            Returns the number of columns in this &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnCount" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>315</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnCount" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>316</id>
			<description>
                            Indicates whether the designated column is automatically numbered, thus read-only.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isAutoIncrement" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>317</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isAutoIncrement" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>318</id>
			<description>
                            Indicates whether a column's case matters.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isCaseSensitive" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>319</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isCaseSensitive" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>320</id>
			<description>
                            Indicates whether the designated column can be used in a where clause.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isSearchable" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>321</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isSearchable" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>322</id>
			<description>
                            Indicates whether the designated column is a cash value.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isCurrency" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>323</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isCurrency" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>324</id>
			<description>
                            Indicates the nullability of values in the designated column.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isNullable" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>325</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isNullable" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>326</id>
			<description>
                            Indicates whether values in the designated column are signed numbers.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isSigned" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>327</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isSigned" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>328</id>
			<description>
                            Indicates the designated column's normal maximum width in characters.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnDisplaySize" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>329</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnDisplaySize" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>330</id>
			<description>
                            Gets the designated column's suggested title for use in printouts and  displays.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnLabel" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>331</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnLabel" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>332</id>
			<description>
                            Get the designated column's name.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>333</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>334</id>
			<description>
                            Get the designated column's table's schema.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getSchemaName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>335</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getSchemaName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>336</id>
			<description>
                            Get the designated column's number of decimal digits.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getPrecision" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>337</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getPrecision" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>338</id>
			<description>
                            Gets the designated column's number of digits to right of the decimal point.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getScale" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>339</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getScale" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>340</id>
			<description>
                            Gets the designated column's table name.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getTableName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>341</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getTableName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>342</id>
			<description>
                            Gets the designated column's table's catalog name.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getCatalogName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>343</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getCatalogName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>344</id>
			<description>
                            Retrieves the designated column's SQL type.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnType" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>345</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnType" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>346</id>
			<description>
                            Retrieves the designated column's database-specific type name.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnTypeName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>347</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnTypeName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>348</id>
			<description>
                            Indicates whether the designated column is definitely not writable.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isReadOnly" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>349</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isReadOnly" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>350</id>
			<description>
                            Indicates whether it is possible for a write on the designated column to succeed.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isWritable" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>351</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isWritable" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>352</id>
			<description>
                            Indicates whether a write on the designated column will definitely succeed.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isDefinitelyWritable" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>353</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="isDefinitelyWritable" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>354</id>
			<description>
                            &lt;p&gt;Returns the fully-qualified name of the Java class whose instances   are manufactured if the method &lt;code&gt;ResultSet.getObject&lt;/code&gt;  is called to retrieve a value   from the column.
                              &lt;code&gt;ResultSet.getObject&lt;/code&gt; may return a subclass of the  class returned by this method.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnClassName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>355</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSetMetaData</class-interface>
			<method name="getColumnClassName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>356</id>
			<description>
                            The constant indicating that the rows in a result set will be   processed in a forward direction; first-to-last.
                              This constant is used by the method &lt;code&gt;setFetchDirection&lt;/code&gt;  as a hint to the driver, which the driver may ignore.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="FETCH_FORWARD" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>357</id>
			<description>
                            The constant indicating that the rows in a result set will be   processed in a reverse direction; last-to-first.
                              This constant is used by the method &lt;code&gt;setFetchDirection&lt;/code&gt;  as a hint to the driver, which the driver may ignore.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="FETCH_REVERSE" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>358</id>
			<description>
                            The constant indicating that the order in which rows in a   result set will be processed is unknown.
                              This constant is used by the method &lt;code&gt;setFetchDirection&lt;/code&gt;  as a hint to the driver, which the driver may ignore.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="FETCH_UNKNOWN" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>359</id>
			<description>
                            The constant indicating the type for a &lt;code&gt;ResultSet&lt;/code&gt; object  whose cursor may move only forward.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="TYPE_FORWARD_ONLY" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>360</id>
			<description>
                            The constant indicating the type for a &lt;code&gt;ResultSet&lt;/code&gt; object  that is scrollable but generally not sensitive to changes made by others.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="TYPE_SCROLL_INSENSITIVE" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>361</id>
			<description>
                            The constant indicating the type for a &lt;code&gt;ResultSet&lt;/code&gt; object  that is scrollable and generally sensitive to changes made by others.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="TYPE_SCROLL_SENSITIVE" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>362</id>
			<description>
                            The constant indicating the concurrency mode for a  &lt;code&gt;ResultSet&lt;/code&gt; object that may NOT be updated.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="CONCUR_READ_ONLY" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>363</id>
			<description>
                            The constant indicating the concurrency mode for a  &lt;code&gt;ResultSet&lt;/code&gt; object that may be updated.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="CONCUR_UPDATABLE" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>364</id>
			<description>
                            The constant indicating that &lt;code&gt;ResultSet&lt;/code&gt; objects should not  be closed when the method &lt;code&gt;Connection.commit&lt;/code&gt; is called.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="HOLD_CURSORS_OVER_COMMIT" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>365</id>
			<description>
                            The constant indicating that &lt;code&gt;ResultSet&lt;/code&gt; objects should be  closed when the method &lt;code&gt;Connection.commit&lt;/code&gt; is called.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<field name="CLOSE_CURSORS_AT_COMMIT" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>366</id>
			<description>
                            Moves the cursor down one row from its current position.
                              A &lt;code&gt;ResultSet&lt;/code&gt; cursor is initially positioned  before the first row; the first call to the method  &lt;code&gt;next&lt;/code&gt; makes the first row the current row; the  second call makes the second row the current row, and so on.    &lt;P&gt;If an input stream is open for the current row, a call  to the method &lt;code&gt;next&lt;/code&gt; will  implicitly close it. A &lt;code&gt;ResultSet&lt;/code&gt; object's  warning chain is cleared when a new row is read.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="next" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>367</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="next" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>368</id>
			<description>
                            Releases this &lt;code&gt;ResultSet&lt;/code&gt; object's database and  JDBC resources immediately instead of waiting for  this to happen when it is automatically closed.
                               &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; A &lt;code&gt;ResultSet&lt;/code&gt; object  is automatically closed by the  &lt;code&gt;Statement&lt;/code&gt; object that generated it when  that &lt;code&gt;Statement&lt;/code&gt; object is closed,  re-executed, or is used to retrieve the next result from a  sequence of multiple results. A &lt;code&gt;ResultSet&lt;/code&gt; object  is also automatically closed when it is garbage collected.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="close" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>369</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="close" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>370</id>
			<description>
                            Reports whether  the last column read had a value of SQL &lt;code&gt;NULL&lt;/code&gt;.
                              Note that you must first call one of the getter methods  on a column to try to read its value and then call  the method &lt;code&gt;wasNull&lt;/code&gt; to see if the value read was  SQL &lt;code&gt;NULL&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="wasNull" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>371</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="wasNull" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>372</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getString" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>373</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getString" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>374</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;boolean&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBoolean" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>375</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBoolean" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>376</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;byte&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getByte" return-type="byte">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>377</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getByte" return-type="byte">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>378</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;short&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getShort" return-type="short">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>379</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getShort" return-type="short">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>380</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  an &lt;code&gt;int&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getInt" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>381</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getInt" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>382</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;long&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getLong" return-type="long">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>383</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getLong" return-type="long">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>384</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;float&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getFloat" return-type="float">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>385</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getFloat" return-type="float">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>386</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;double&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDouble" return-type="double">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>387</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDouble" return-type="double">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>388</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;java.sql.BigDecimal&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>389</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>390</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;byte&lt;/code&gt; array in the Java programming language.
                              The bytes represent the raw values returned by the driver.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>391</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>392</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;java.sql.Date&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>393</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>394</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;java.sql.Time&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>395</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>396</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>397</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>398</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a stream of ASCII characters.
                             The value can then be read in chunks from the  stream. This method is particularly  suitable for retrieving large &lt;char&gt;LONGVARCHAR&lt;/char&gt; values.  The JDBC driver will  do any necessary conversion from the database format into ASCII.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be  read prior to getting the value of any other column. The next  call to a getter method implicitly closes the stream.  Also, a  stream may return &lt;code&gt;0&lt;/code&gt; when the method  &lt;code&gt;InputStream.available&lt;/code&gt;  is called whether there is data available or not.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getAsciiStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>399</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getAsciiStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>400</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  as a stream of two-byte Unicode characters.
                             The first byte is  the high byte; the second byte is the low byte.   The value can then be read in chunks from the  stream. This method is particularly  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt;values.  The   JDBC driver will do any necessary conversion from the database  format into Unicode.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be  read prior to getting the value of any other column. The next  call to a getter method implicitly closes the stream.    Also, a stream may return &lt;code&gt;0&lt;/code&gt; when the method   &lt;code&gt;InputStream.available&lt;/code&gt;  is called, whether there is data available or not.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getUnicodeStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>401</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getUnicodeStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>402</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a binary stream of  uninterpreted bytes.
                             The value can then be read in chunks from the  stream. This method is particularly  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt; values.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be  read prior to getting the value of any other column. The next  call to a getter method implicitly closes the stream.  Also, a  stream may return &lt;code&gt;0&lt;/code&gt; when the method   &lt;code&gt;InputStream.available&lt;/code&gt;  is called whether there is data available or not.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBinaryStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>403</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBinaryStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>404</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getString" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>405</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getString" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>406</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;boolean&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBoolean" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>407</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBoolean" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>408</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;byte&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getByte" return-type="byte">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>409</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getByte" return-type="byte">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>410</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;short&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getShort" return-type="short">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>411</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getShort" return-type="short">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>412</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  an &lt;code&gt;int&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getInt" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>413</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getInt" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>414</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;long&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getLong" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>415</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getLong" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>416</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;float&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getFloat" return-type="float">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>417</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getFloat" return-type="float">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>418</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;double&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDouble" return-type="double">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>419</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDouble" return-type="double">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>420</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;java.math.BigDecimal&lt;/code&gt; in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>421</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>422</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;byte&lt;/code&gt; array in the Java programming language.
                              The bytes represent the raw values returned by the driver.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>423</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>424</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;java.sql.Date&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>425</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>426</id>
			<description>
                            Retrieves the value of the designated column in the current row    of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;java.sql.Time&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>427</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>428</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as  a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>429</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>430</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of  ASCII characters.
                             The value can then be read in chunks from the  stream. This method is particularly  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.  The JDBC driver will  do any necessary conversion from the database format into ASCII.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be  read prior to getting the value of any other column. The next  call to a getter method implicitly closes the stream. Also, a  stream may return &lt;code&gt;0&lt;/code&gt; when the method &lt;code&gt;available&lt;/code&gt;  is called whether there is data available or not.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getAsciiStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>431</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getAsciiStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>432</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of two-byte  Unicode characters.
                             The first byte is the high byte; the second  byte is the low byte.   The value can then be read in chunks from the  stream. This method is particularly  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.  The JDBC technology-enabled driver will  do any necessary conversion from the database format into Unicode.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be  read prior to getting the value of any other column. The next  call to a getter method implicitly closes the stream.  Also, a stream may return &lt;code&gt;0&lt;/code&gt; when the method   &lt;code&gt;InputStream.available&lt;/code&gt; is called, whether there   is data available or not.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getUnicodeStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>433</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getUnicodeStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>434</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of uninterpreted  &lt;code&gt;byte&lt;/code&gt;s.
                              The value can then be read in chunks from the  stream. This method is particularly  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt;  values.    &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be  read prior to getting the value of any other column. The next  call to a getter method implicitly closes the stream. Also, a  stream may return &lt;code&gt;0&lt;/code&gt; when the method &lt;code&gt;available&lt;/code&gt;  is called whether there is data available or not.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBinaryStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>435</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBinaryStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>436</id>
			<description>
                            Retrieves the first warning reported by calls on this   &lt;code&gt;ResultSet&lt;/code&gt; object.
                              Subsequent warnings on this &lt;code&gt;ResultSet&lt;/code&gt; object  will be chained to the &lt;code&gt;SQLWarning&lt;/code&gt; object that   this method returns.   &lt;P&gt;The warning chain is automatically cleared each time a new  row is read.  This method may not be called on a &lt;code&gt;ResultSet&lt;/code&gt;  object that has been closed; doing so will cause an   &lt;code&gt;SQLException&lt;/code&gt; to be thrown.  &lt;P&gt;  &lt;B&gt;Note:&lt;/B&gt; This warning chain only covers warnings caused  by &lt;code&gt;ResultSet&lt;/code&gt; methods.  Any warning caused by  &lt;code&gt;Statement&lt;/code&gt; methods  (such as reading OUT parameters) will be chained on the  &lt;code&gt;Statement&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getWarnings" return-type="java.sql.SQLWarning"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>437</id>
			<description>if a database access error occurs or this method is              called on a closed result set</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getWarnings" return-type="java.sql.SQLWarning">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>438</id>
			<description>
                            Clears all warnings reported on this &lt;code&gt;ResultSet&lt;/code&gt; object.
                              After this method is called, the method &lt;code&gt;getWarnings&lt;/code&gt;  returns &lt;code&gt;null&lt;/code&gt; until a new warning is  reported for this &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="clearWarnings" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>439</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="clearWarnings" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>440</id>
			<description>
                            Retrieves the name of the SQL cursor used by this &lt;code&gt;ResultSet&lt;/code&gt;  object.
                               &lt;P&gt;In SQL, a result table is retrieved through a cursor that is  named. The current row of a result set can be updated or deleted  using a positioned update/delete statement that references the  cursor name. To insure that the cursor has the proper isolation  level to support update, the cursor's &lt;code&gt;SELECT&lt;/code&gt; statement   should be of the form &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt;. If   &lt;code&gt;FOR UPDATE&lt;/code&gt; is omitted, the positioned updates may fail.    &lt;P&gt;The JDBC API supports this SQL feature by providing the name of the  SQL cursor used by a &lt;code&gt;ResultSet&lt;/code&gt; object.  The current row of a &lt;code&gt;ResultSet&lt;/code&gt; object  is also the current row of this SQL cursor.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If positioned update is not supported, a  &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getCursorName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>441</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getCursorName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>442</id>
			<description>
                            Retrieves the  number, types and properties of  this &lt;code&gt;ResultSet&lt;/code&gt; object's columns.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getMetaData" return-type="java.sql.ResultSetMetaData"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>443</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getMetaData" return-type="java.sql.ResultSetMetaData">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>444</id>
			<description>
                            &lt;p&gt;Gets the value of the designated column in the current row   of this &lt;code&gt;ResultSet&lt;/code&gt; object as   an &lt;code&gt;Object&lt;/code&gt; in the Java programming language.
                               &lt;p&gt;This method will return the value of the given column as a  Java object.  The type of the Java object will be the default  Java object type corresponding to the column's SQL type,  following the mapping for built-in types specified in the JDBC   specification. If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,   the driver returns a Java &lt;code&gt;null&lt;/code&gt;.   &lt;p&gt;This method may also be used to read datatabase-specific  abstract data types.   In the JDBC 2.0 API, the behavior of method  &lt;code&gt;getObject&lt;/code&gt; is extended to materialize    data of SQL user-defined types.  When a column contains  a structured or distinct value, the behavior of this method is as   if it were a call to: &lt;code&gt;getObject(columnIndex,   this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>445</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>446</id>
			<description>
                            &lt;p&gt;Gets the value of the designated column in the current row   of this &lt;code&gt;ResultSet&lt;/code&gt; object as   an &lt;code&gt;Object&lt;/code&gt; in the Java programming language.
                               &lt;p&gt;This method will return the value of the given column as a  Java object.  The type of the Java object will be the default  Java object type corresponding to the column's SQL type,  following the mapping for built-in types specified in the JDBC   specification. If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,   the driver returns a Java &lt;code&gt;null&lt;/code&gt;.  &lt;P&gt;  This method may also be used to read datatabase-specific  abstract data types.  &lt;P&gt;  In the JDBC 2.0 API, the behavior of the method  &lt;code&gt;getObject&lt;/code&gt; is extended to materialize    data of SQL user-defined types.  When a column contains  a structured or distinct value, the behavior of this method is as   if it were a call to: &lt;code&gt;getObject(columnIndex,   this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>447</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>448</id>
			<description>
                            Maps the given &lt;code&gt;ResultSet&lt;/code&gt; column name to its  &lt;code&gt;ResultSet&lt;/code&gt; column index.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="findColumn" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>449</id>
			<description>if the &lt;code&gt;ResultSet&lt;/code&gt; object  does not contain &lt;code&gt;columnName&lt;/code&gt; or a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="findColumn" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>450</id>
			<description>
                            Retrieves the value of the designated column in the current row   of this &lt;code&gt;ResultSet&lt;/code&gt; object as a  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getCharacterStream" return-type="java.io.Reader">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>451</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getCharacterStream" return-type="java.io.Reader">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>452</id>
			<description>
                            Retrieves the value of the designated column in the current row   of this &lt;code&gt;ResultSet&lt;/code&gt; object as a  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getCharacterStream" return-type="java.io.Reader">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>453</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getCharacterStream" return-type="java.io.Reader">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>454</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; with full precision.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>455</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>456</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; with full precision.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>457</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>458</id>
			<description>
                            Retrieves whether the cursor is before the first row in   this &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="isBeforeFirst" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>459</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="isBeforeFirst" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>460</id>
			<description>
                            Retrieves whether the cursor is after the last row in   this &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="isAfterLast" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>461</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="isAfterLast" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>462</id>
			<description>
                            Retrieves whether the cursor is on the first row of  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="isFirst" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>463</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="isFirst" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>464</id>
			<description>
                            Retrieves whether the cursor is on the last row of   this &lt;code&gt;ResultSet&lt;/code&gt; object.
                              Note: Calling the method &lt;code&gt;isLast&lt;/code&gt; may be expensive  because the JDBC driver  might need to fetch ahead one row in order to determine   whether the current row is the last row in the result set.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="isLast" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>465</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="isLast" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>466</id>
			<description>
                            Moves the cursor to the front of  this &lt;code&gt;ResultSet&lt;/code&gt; object, just before the  first row.
                             This method has no effect if the result set contains no rows.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="beforeFirst" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>467</id>
			<description>if a database access error  occurs or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="beforeFirst" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>468</id>
			<description>
                            Moves the cursor to the end of  this &lt;code&gt;ResultSet&lt;/code&gt; object, just after the  last row.
                             This method has no effect if the result set contains no rows.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="afterLast" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>469</id>
			<description>if a database access error  occurs or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="afterLast" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>470</id>
			<description>
                            Moves the cursor to the first row in  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="first" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>471</id>
			<description>if a database access error  occurs or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="first" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>472</id>
			<description>
                            Moves the cursor to the last row in  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="last" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>473</id>
			<description>if a database access error  occurs or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="last" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>474</id>
			<description>
                            Retrieves the current row number.
                              The first row is number 1, the  second number 2, and so on.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getRow" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>475</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getRow" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>476</id>
			<description>
                            Moves the cursor to the given row number in  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                               &lt;p&gt;If the row number is positive, the cursor moves to   the given row number with respect to the  beginning of the result set.  The first row is row 1, the second  is row 2, and so on.    &lt;p&gt;If the given row number is negative, the cursor moves to  an absolute row position with respect to  the end of the result set.  For example, calling the method  &lt;code&gt;absolute(-1)&lt;/code&gt; positions the   cursor on the last row; calling the method &lt;code&gt;absolute(-2)&lt;/code&gt;  moves the cursor to the next-to-last row, and so on.   &lt;p&gt;An attempt to position the cursor beyond the first/last row in  the result set leaves the cursor before the first row or after   the last row.   &lt;p&gt;&lt;B&gt;Note:&lt;/B&gt; Calling &lt;code&gt;absolute(1)&lt;/code&gt; is the same  as calling &lt;code&gt;first()&lt;/code&gt;. Calling &lt;code&gt;absolute(-1)&lt;/code&gt;   is the same as calling &lt;code&gt;last()&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="absolute" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>477</id>
			<description>if a database access error  occurs, or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="absolute" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>478</id>
			<description>
                            Moves the cursor a relative number of rows, either positive or negative.
                              Attempting to move beyond the first/last row in the  result set positions the cursor before/after the  the first/last row. Calling &lt;code&gt;relative(0)&lt;/code&gt; is valid, but does  not change the cursor position.   &lt;p&gt;Note: Calling the method &lt;code&gt;relative(1)&lt;/code&gt;  is identical to calling the method &lt;code&gt;next()&lt;/code&gt; and   calling the method &lt;code&gt;relative(-1)&lt;/code&gt; is identical  to calling the method &lt;code&gt;previous()&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="relative" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>479</id>
			<description>if a database access error occurs,              there is no current row, or the result set type is              &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="relative" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>480</id>
			<description>
                            Moves the cursor to the previous row in this  &lt;code&gt;ResultSet&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="previous" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>481</id>
			<description>if a database access error  occurs or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="previous" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>482</id>
			<description>
                            Gives a hint as to the direction in which the rows in this  &lt;code&gt;ResultSet&lt;/code&gt; object will be processed.
                               The initial value is determined by the   &lt;code&gt;Statement&lt;/code&gt; object  that produced this &lt;code&gt;ResultSet&lt;/code&gt; object.  The fetch direction may be changed at any time.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="setFetchDirection" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>483</id>
			<description>if a database access error occurs or  the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; and the fetch  direction is not &lt;code&gt;FETCH_FORWARD&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="setFetchDirection" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>484</id>
			<description>
                            Retrieves the fetch direction for this   &lt;code&gt;ResultSet&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getFetchDirection" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>485</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getFetchDirection" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>486</id>
			<description>
                            Gives the JDBC driver a hint as to the number of rows that should   be fetched from the database when more rows are needed for this   &lt;code&gt;ResultSet&lt;/code&gt; object.
                              If the fetch size specified is zero, the JDBC driver   ignores the value and is free to make its own best guess as to what  the fetch size should be.  The default value is set by the   &lt;code&gt;Statement&lt;/code&gt; object  that created the result set.  The fetch size may be changed at any time.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="setFetchSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>487</id>
			<description>if a database access error occurs or the  condition &lt;code&gt;0 &lt;= rows &lt;= this.getMaxRows()&lt;/code&gt; is not satisfied</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="setFetchSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>488</id>
			<description>
                            Retrieves the fetch size for this   &lt;code&gt;ResultSet&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getFetchSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>489</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getFetchSize" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>490</id>
			<description>
                            Retrieves the type of this &lt;code&gt;ResultSet&lt;/code&gt; object.
                                The type is determined by the &lt;code&gt;Statement&lt;/code&gt; object  that created the result set.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getType" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>491</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getType" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>492</id>
			<description>
                            Retrieves the concurrency mode of this &lt;code&gt;ResultSet&lt;/code&gt; object.
                              The concurrency used is determined by the   &lt;code&gt;Statement&lt;/code&gt; object that created the result set.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getConcurrency" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>493</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getConcurrency" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>494</id>
			<description>
                            Retrieves whether the current row has been updated.
                              The value returned   depends on whether or not the result set can detect updates.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="rowUpdated" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>495</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="rowUpdated" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>496</id>
			<description>
                            Retrieves whether the current row has had an insertion.
                              The value returned depends on whether or not this  &lt;code&gt;ResultSet&lt;/code&gt; object can detect visible inserts.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="rowInserted" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>497</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="rowInserted" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>498</id>
			<description>
                            Retrieves whether a row has been deleted.
                              A deleted row may leave  a visible "hole" in a result set.  This method can be used to  detect holes in a result set.  The value returned depends on whether   or not this &lt;code&gt;ResultSet&lt;/code&gt; object can detect deletions.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="rowDeleted" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>499</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="rowDeleted" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>500</id>
			<description>
                            Gives a nullable column a null value.
                                The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt;  or &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>501</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>502</id>
			<description>
                            Updates the designated column with a &lt;code&gt;boolean&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBoolean" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>503</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBoolean" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>504</id>
			<description>
                            Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateByte" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>505</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateByte" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>506</id>
			<description>
                            Updates the designated column with a &lt;code&gt;short&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateShort" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>short</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>507</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateShort" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>short</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>508</id>
			<description>
                            Updates the designated column with an &lt;code&gt;int&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateInt" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>509</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateInt" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>510</id>
			<description>
                            Updates the designated column with a &lt;code&gt;long&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateLong" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>511</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateLong" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>512</id>
			<description>
                            Updates the designated column with a &lt;code&gt;float&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateFloat" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>513</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateFloat" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>float</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>514</id>
			<description>
                            Updates the designated column with a &lt;code&gt;double&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateDouble" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>515</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateDouble" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>double</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>516</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.math.BigDecimal&lt;/code&gt;   value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBigDecimal" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>517</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBigDecimal" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>518</id>
			<description>
                            Updates the designated column with a &lt;code&gt;String&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateString" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>519</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateString" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>520</id>
			<description>
                            Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; array value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBytes" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>521</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBytes" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>522</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>523</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>524</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>525</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>526</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Timestamp&lt;/code&gt;  value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>527</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>528</id>
			<description>
                            Updates the designated column with an ascii stream value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateAsciiStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>529</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateAsciiStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>530</id>
			<description>
                            Updates the designated column with a binary stream value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBinaryStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>531</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBinaryStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>532</id>
			<description>
                            Updates the designated column with a character stream value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateCharacterStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>533</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateCharacterStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>534</id>
			<description>
                            Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>535</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>536</id>
			<description>
                            Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>537</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>538</id>
			<description>
                            Updates the designated column with a &lt;code&gt;null&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateNull" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>539</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateNull" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>540</id>
			<description>
                            Updates the designated column with a &lt;code&gt;boolean&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBoolean" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>541</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBoolean" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>542</id>
			<description>
                            Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateByte" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>byte</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>543</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateByte" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>byte</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>544</id>
			<description>
                            Updates the designated column with a &lt;code&gt;short&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateShort" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>short</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>545</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateShort" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>short</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>546</id>
			<description>
                            Updates the designated column with an &lt;code&gt;int&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateInt" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>547</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateInt" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>548</id>
			<description>
                            Updates the designated column with a &lt;code&gt;long&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateLong" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>549</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateLong" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>550</id>
			<description>
                            Updates the designated column with a &lt;code&gt;float &lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateFloat" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>551</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateFloat" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>float</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>552</id>
			<description>
                            Updates the designated column with a &lt;code&gt;double&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateDouble" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>553</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateDouble" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>double</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>554</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.BigDecimal&lt;/code&gt;  value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBigDecimal" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>555</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBigDecimal" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>556</id>
			<description>
                            Updates the designated column with a &lt;code&gt;String&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateString" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>557</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateString" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>558</id>
			<description>
                            Updates the designated column with a byte array value.
                               The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt;   or &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBytes" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>byte[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>559</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBytes" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>byte[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>560</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateDate" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>561</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateDate" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>562</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateTime" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>563</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateTime" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>564</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Timestamp&lt;/code&gt;  value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateTimestamp" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>565</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateTimestamp" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>566</id>
			<description>
                            Updates the designated column with an ascii stream value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateAsciiStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>567</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateAsciiStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>568</id>
			<description>
                            Updates the designated column with a binary stream value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBinaryStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>569</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBinaryStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>570</id>
			<description>
                            Updates the designated column with a character stream value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateCharacterStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>571</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateCharacterStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>572</id>
			<description>
                            Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>573</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>574</id>
			<description>
                            Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>575</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>576</id>
			<description>
                            Inserts the contents of the insert row into this   &lt;code&gt;ResultSet&lt;/code&gt; object and into the database.
                                The cursor must be on the insert row when this method is called.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="insertRow" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>577</id>
			<description>if a database access error occurs,  if this method is called when the cursor is not on the insert row,  or if not all of non-nullable columns in  the insert row have been given a value</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="insertRow" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>578</id>
			<description>
                            Updates the underlying database with the new contents of the  current row of this &lt;code&gt;ResultSet&lt;/code&gt; object.
                              This method cannot be called when the cursor is on the insert row.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateRow" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>579</id>
			<description>if a database access error occurs or  if this method is called when the cursor is on the insert row</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateRow" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>580</id>
			<description>
                            Deletes the current row from this &lt;code&gt;ResultSet&lt;/code&gt; object   and from the underlying database.
                              This method cannot be called when  the cursor is on the insert row.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="deleteRow" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>581</id>
			<description>if a database access error occurs  or if this method is called when the cursor is on the insert row</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="deleteRow" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>582</id>
			<description>
                            Refreshes the current row with its most recent value in   the database.
                              This method cannot be called when  the cursor is on the insert row.   &lt;P&gt;The &lt;code&gt;refreshRow&lt;/code&gt; method provides a way for an   application to   explicitly tell the JDBC driver to refetch a row(s) from the  database.  An application may want to call &lt;code&gt;refreshRow&lt;/code&gt; when   caching or prefetching is being done by the JDBC driver to  fetch the latest value of a row from the database.  The JDBC driver   may actually refresh multiple rows at once if the fetch size is   greater than one.    &lt;P&gt; All values are refetched subject to the transaction isolation   level and cursor sensitivity.  If &lt;code&gt;refreshRow&lt;/code&gt; is called after  calling an updater method, but before calling  the method &lt;code&gt;updateRow&lt;/code&gt;, then the  updates made to the row are lost.  Calling the method  &lt;code&gt;refreshRow&lt;/code&gt; frequently will likely slow performance.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="refreshRow" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>583</id>
			<description>if a database access error  occurs or if this method is called when the cursor is on the insert row</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="refreshRow" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>584</id>
			<description>
                            Cancels the updates made to the current row in this  &lt;code&gt;ResultSet&lt;/code&gt; object.
                              This method may be called after calling an  updater method(s) and before calling  the method &lt;code&gt;updateRow&lt;/code&gt; to roll back   the updates made to a row.  If no updates have been made or   &lt;code&gt;updateRow&lt;/code&gt; has already been called, this method has no   effect.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="cancelRowUpdates" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>585</id>
			<description>if a database access error             occurs or if this method is called when the cursor is              on the insert row</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="cancelRowUpdates" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>586</id>
			<description>
                            Moves the cursor to the insert row.
                              The current cursor position is   remembered while the cursor is positioned on the insert row.   The insert row is a special row associated with an updatable  result set.  It is essentially a buffer where a new row may  be constructed by calling the updater methods prior to   inserting the row into the result set.     Only the updater, getter,  and &lt;code&gt;insertRow&lt;/code&gt; methods may be   called when the cursor is on the insert row.  All of the columns in   a result set must be given a value each time this method is  called before calling &lt;code&gt;insertRow&lt;/code&gt;.    An updater method must be called before a  getter method can be called on a column value.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="moveToInsertRow" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>587</id>
			<description>if a database access error occurs  or the result set is not updatable</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="moveToInsertRow" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>588</id>
			<description>
                            Moves the cursor to the remembered cursor position, usually the  current row.
                              This method has no effect if the cursor is not on   the insert row.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="moveToCurrentRow" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>589</id>
			<description>if a database access error occurs  or the result set is not updatable</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="moveToCurrentRow" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>590</id>
			<description>
                            Retrieves the &lt;code&gt;Statement&lt;/code&gt; object that produced this   &lt;code&gt;ResultSet&lt;/code&gt; object.
                              If the result set was generated some other way, such as by a  &lt;code&gt;DatabaseMetaData&lt;/code&gt; method, this method returns   &lt;code&gt;null&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getStatement" return-type="java.sql.Statement"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>591</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getStatement" return-type="java.sql.Statement">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>592</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt;  in the Java programming language.
                              If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,   the driver returns a Java &lt;code&gt;null&lt;/code&gt;.  This method uses the given &lt;code&gt;Map&lt;/code&gt; object  for the custom mapping of the  SQL structured or distinct type that is being retrieved.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>593</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>594</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getRef" return-type="java.sql.Ref">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>595</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getRef" return-type="java.sql.Ref">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>596</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBlob" return-type="java.sql.Blob">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>597</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBlob" return-type="java.sql.Blob">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>598</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getClob" return-type="java.sql.Clob">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>599</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getClob" return-type="java.sql.Clob">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>600</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getArray" return-type="java.sql.Array">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>601</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getArray" return-type="java.sql.Array">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>602</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt;  in the Java programming language.
                              If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,   the driver returns a Java &lt;code&gt;null&lt;/code&gt;.  This method uses the specified &lt;code&gt;Map&lt;/code&gt; object for  custom mapping if appropriate.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>603</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>604</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getRef" return-type="java.sql.Ref">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>605</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getRef" return-type="java.sql.Ref">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>606</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBlob" return-type="java.sql.Blob">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>607</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getBlob" return-type="java.sql.Blob">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>608</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getClob" return-type="java.sql.Clob">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>609</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getClob" return-type="java.sql.Clob">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>610</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object  in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getArray" return-type="java.sql.Array">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>611</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getArray" return-type="java.sql.Array">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>612</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt; object  in the Java programming language.
                              This method uses the given calendar to construct an appropriate millisecond  value for the date if the underlying database does not store  timezone information.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>613</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>614</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt; object  in the Java programming language.
                              This method uses the given calendar to construct an appropriate millisecond  value for the date if the underlying database does not store  timezone information.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>615</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>616</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt; object  in the Java programming language.
                              This method uses the given calendar to construct an appropriate millisecond  value for the time if the underlying database does not store  timezone information.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>617</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>618</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt; object  in the Java programming language.
                              This method uses the given calendar to construct an appropriate millisecond  value for the time if the underlying database does not store  timezone information.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>619</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>620</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object  in the Java programming language.
                              This method uses the given calendar to construct an appropriate millisecond  value for the timestamp if the underlying database does not store  timezone information.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>621</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>622</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object  in the Java programming language.
                              This method uses the given calendar to construct an appropriate millisecond  value for the timestamp if the underlying database does not store  timezone information.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>623</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>624</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.net.URL&lt;/code&gt;  object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getURL" return-type="java.net.URL">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>625</id>
			<description>if a database access error occurs,             or if a URL is malformed</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getURL" return-type="java.net.URL">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>626</id>
			<description>
                            Retrieves the value of the designated column in the current row  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.net.URL&lt;/code&gt;  object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getURL" return-type="java.net.URL">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>627</id>
			<description>if a database access error occurs             or if a URL is malformed</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="getURL" return-type="java.net.URL">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>628</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Ref&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateRef" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Ref</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>629</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateRef" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Ref</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>630</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Ref&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateRef" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Ref</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>631</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateRef" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Ref</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>632</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Blob&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBlob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Blob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>633</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBlob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Blob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>634</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Blob&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBlob" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Blob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>635</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateBlob" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Blob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>636</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Clob&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateClob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Clob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>637</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateClob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Clob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>638</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Clob&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateClob" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Clob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>639</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateClob" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Clob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>640</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Array&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateArray" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Array</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>641</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateArray" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Array</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>642</id>
			<description>
                            Updates the designated column with a &lt;code&gt;java.sql.Array&lt;/code&gt; value.
                              The updater methods are used to update column values in the  current row or the insert row.  The updater methods do not   update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                        </description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateArray" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Array</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>643</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ResultSet</class-interface>
			<method name="updateArray" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Array</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>644</id>
			<description>
                            Retrieves the fully-qualified SQL name of the SQL structured type that  this &lt;code&gt;Ref&lt;/code&gt; object references.
                        </description>
			<package>java.sql</package>
			<class-interface>Ref</class-interface>
			<method name="getBaseTypeName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>645</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Ref</class-interface>
			<method name="getBaseTypeName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>646</id>
			<description>
                            Retrieves the referenced object and maps it to a Java type  using the given type map.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Ref</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>647</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Ref</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>648</id>
			<description>
                            Retrieves the SQL structured type instance referenced by  this &lt;code&gt;Ref&lt;/code&gt; object.
                              If the connection's type map has an entry  for the structured type, the instance will be custom mapped to  the Java class indicated in the type map.  Otherwise, the  structured type instance will be mapped to a &lt;code&gt;Struct&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Ref</class-interface>
			<method name="getObject" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>649</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Ref</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>650</id>
			<description>
                            Sets the structured type value that this &lt;code&gt;Ref&lt;/code&gt;  object references to the given instance of &lt;code&gt;Object&lt;/code&gt;.
                              The driver converts this to an SQL structured type when it  sends it to the database.
                            
                            
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Ref</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>651</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Ref</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>652</id>
			<description>
                            Executes the SQL query in this &lt;code&gt;PreparedStatement&lt;/code&gt; object  and returns the &lt;code&gt;ResultSet&lt;/code&gt; object generated by the query.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="executeQuery" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>653</id>
			<description>if a database access error occurs or the SQL             statement does not return a &lt;code&gt;ResultSet&lt;/code&gt; object</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="executeQuery" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>654</id>
			<description>
                            Executes the SQL statement in this &lt;code&gt;PreparedStatement&lt;/code&gt; object,  which must be an SQL &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; or  &lt;code&gt;DELETE&lt;/code&gt; statement; or an SQL statement that returns nothing,   such as a DDL statement.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="executeUpdate" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>655</id>
			<description>if a database access error occurs or the SQL             statement returns a &lt;code&gt;ResultSet&lt;/code&gt; object</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="executeUpdate" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>656</id>
			<description>
                            Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                               &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter's SQL type.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>657</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>658</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                              The driver converts this  to an SQL &lt;code&gt;BIT&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBoolean" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>659</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBoolean" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>660</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setByte" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>661</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setByte" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>662</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;short&lt;/code&gt; value.
                               The driver converts this  to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setShort" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>short</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>663</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setShort" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>short</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>664</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;int&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setInt" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>665</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setInt" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>666</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;long&lt;/code&gt; value.
                               The driver converts this  to an SQL &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setLong" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>667</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setLong" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>668</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;float&lt;/code&gt; value.
                               The driver converts this  to an SQL &lt;code&gt;FLOAT&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setFloat" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>669</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setFloat" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>float</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>670</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;double&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setDouble" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>671</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setDouble" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>double</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>672</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value.
                                The driver converts this to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when  it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBigDecimal" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>673</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBigDecimal" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>674</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;String&lt;/code&gt; value.
                               The driver converts this  to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value  (depending on the argument's  size relative to the driver's limits on &lt;code&gt;VARCHAR&lt;/code&gt; values)  when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setString" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>675</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setString" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>676</id>
			<description>
                            Sets the designated parameter to the given Java array of bytes.
                              The driver converts  this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or &lt;code&gt;LONGVARBINARY&lt;/code&gt;  (depending on the argument's size relative to the driver's limits on  &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBytes" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>677</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBytes" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>678</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>679</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>680</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>681</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>682</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                                The driver  converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the  database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>683</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>684</id>
			<description>
                            Sets the designated parameter to the given input stream, which will have   the specified number of bytes.
                              When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;  parameter, it may be more practical to send it via a  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream  as needed until end-of-file is reached.  The JDBC driver will  do any necessary conversion from ASCII to the database char format.    &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setAsciiStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>685</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setAsciiStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>686</id>
			<description>
                            Sets the designated parameter to the given input stream, which   will have the specified number of bytes.
                             A Unicode character has  two bytes, with the first byte being the high byte, and the second  being the low byte.   When a very large Unicode value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;  parameter, it may be more practical to send it via a  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the   stream as needed until end-of-file is reached.  The JDBC driver will  do any necessary conversion from Unicode to the database char format.    &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setUnicodeStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>687</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setUnicodeStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>688</id>
			<description>
                            Sets the designated parameter to the given input stream, which will have   the specified number of bytes.
                              When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;  parameter, it may be more practical to send it via a  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the   stream as needed until end-of-file is reached.    &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBinaryStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>689</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBinaryStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>690</id>
			<description>
                            Clears the current parameter values immediately.
                              &lt;P&gt;In general, parameter values remain in force for repeated use of a  statement. Setting a parameter value automatically clears its  previous value.  However, in some cases it is useful to immediately  release the resources used by the current parameter values; this can  be done by calling the method &lt;code&gt;clearParameters&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="clearParameters" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>691</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="clearParameters" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>692</id>
			<description>
                            &lt;p&gt;Sets the value of the designated parameter with the given object.
                             The second  argument must be an object type; for integral values, the  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.   &lt;p&gt;The given Java object will be converted to the given targetSqlType  before being sent to the database.   If the object has a custom mapping (is of a class implementing the   interface &lt;code&gt;SQLData&lt;/code&gt;),  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to   write it to the SQL data stream.  If, on the other hand, the object is of a class implementing  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;, &lt;code&gt;Struct&lt;/code&gt;,   or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a   value of the corresponding SQL type.   &lt;p&gt;Note that this method may be used to pass database-specific  abstract data types.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>693</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>694</id>
			<description>
                            Sets the value of the designated parameter with the given object.
                              This method is like the method &lt;code&gt;setObject&lt;/code&gt;  above, except that it assumes a scale of zero.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>695</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>696</id>
			<description>
                            &lt;p&gt;Sets the value of the designated parameter using the given object.
                               The second parameter must be of type &lt;code&gt;Object&lt;/code&gt;; therefore, the  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used for built-in types.   &lt;p&gt;The JDBC specification specifies a standard mapping from  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The given argument   will be converted to the corresponding SQL type before being  sent to the database.   &lt;p&gt;Note that this method may be used to pass datatabase-  specific abstract data types, by using a driver-specific Java  type.   If the object is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;,  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;  to write it to the SQL data stream.  If, on the other hand, the object is of a class implementing  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;, &lt;code&gt;Struct&lt;/code&gt;,   or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a   value of the corresponding SQL type.  &lt;P&gt;  This method throws an exception if there is an ambiguity, for example, if the  object is of a class implementing more than one of the interfaces named above.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>697</id>
			<description>if a database access error occurs or the type              of the given object is ambiguous</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>698</id>
			<description>
                            Executes the SQL statement in this &lt;code&gt;PreparedStatement&lt;/code&gt; object,  which may be any kind of SQL statement.
                              Some prepared statements return multiple results; the &lt;code&gt;execute&lt;/code&gt;  method handles these complex statements as well as the simpler  form of statements handled by the methods &lt;code&gt;executeQuery&lt;/code&gt;  and &lt;code&gt;executeUpdate&lt;/code&gt;.  &lt;P&gt;  The &lt;code&gt;execute&lt;/code&gt; method returns a &lt;code&gt;boolean&lt;/code&gt; to  indicate the form of the first result.  You must call either the method  &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt;  to retrieve the result; you must call &lt;code&gt;getMoreResults&lt;/code&gt; to  move to any subsequent result(s).
                            
                            
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="execute" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>699</id>
			<description>if a database access error occurs or an argument             is supplied to this method</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="execute" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>700</id>
			<description>
                            Adds a set of parameters to this &lt;code&gt;PreparedStatement&lt;/code&gt;  object's batch of commands.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="addBatch" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>701</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="addBatch" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>702</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;  object, which is the given number of characters long.
                              When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;  parameter, it may be more practical to send it via a  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream  as needed until end-of-file is reached.  The JDBC driver will  do any necessary conversion from UNICODE to the database char format.    &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setCharacterStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>703</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setCharacterStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>704</id>
			<description>
                            Sets the designated parameter to the given   &lt;code&gt;REF(&amp;lt;structured-type&amp;gt;)&lt;/code&gt; value.
                              The driver converts this to an SQL &lt;code&gt;REF&lt;/code&gt; value when it  sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setRef" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Ref</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>705</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setRef" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Ref</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>706</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;Blob&lt;/code&gt; object.
                              The driver converts this to an SQL &lt;code&gt;BLOB&lt;/code&gt; value when it  sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBlob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Blob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>707</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setBlob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Blob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>708</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;Clob&lt;/code&gt; object.
                              The driver converts this to an SQL &lt;code&gt;CLOB&lt;/code&gt; value when it  sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setClob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Clob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>709</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setClob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Clob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>710</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;Array&lt;/code&gt; object.
                              The driver converts this to an SQL &lt;code&gt;ARRAY&lt;/code&gt; value when it  sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setArray" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Array</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>711</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setArray" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Array</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>712</id>
			<description>
                            Retrieves a &lt;code&gt;ResultSetMetaData&lt;/code&gt; object that contains  information about the columns of the &lt;code&gt;ResultSet&lt;/code&gt; object  that will be returned when this &lt;code&gt;PreparedStatement&lt;/code&gt; object   is executed.
                              &lt;P&gt;  Because a &lt;code&gt;PreparedStatement&lt;/code&gt; object is precompiled, it is  possible to know about the &lt;code&gt;ResultSet&lt;/code&gt; object that it will  return without having to execute it.  Consequently, it is possible  to invoke the method &lt;code&gt;getMetaData&lt;/code&gt; on a  &lt;code&gt;PreparedStatement&lt;/code&gt; object rather than waiting to execute  it and then invoking the &lt;code&gt;ResultSet.getMetaData&lt;/code&gt; method  on the &lt;code&gt;ResultSet&lt;/code&gt; object that is returned.  &lt;P&gt;  &lt;B&gt;NOTE:&lt;/B&gt; Using this method may be expensive for some drivers due  to the lack of underlying DBMS support.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="getMetaData" return-type="java.sql.ResultSetMetaData"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>713</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="getMetaData" return-type="java.sql.ResultSetMetaData">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>714</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value,  using the given &lt;code&gt;Calendar&lt;/code&gt; object.
                              The driver uses  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;DATE&lt;/code&gt; value,  which the driver then sends to the database.  With a  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date  taking into account a custom timezone.  If no  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default  timezone, which is that of the virtual machine running the application.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>715</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>716</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value,  using the given &lt;code&gt;Calendar&lt;/code&gt; object.
                              The driver uses  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIME&lt;/code&gt; value,  which the driver then sends to the database.  With a  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the time  taking into account a custom timezone.  If no  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default  timezone, which is that of the virtual machine running the application.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>717</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>718</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value,  using the given &lt;code&gt;Calendar&lt;/code&gt; object.
                              The driver uses  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value,  which the driver then sends to the database.  With a   &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp  taking into account a custom timezone.  If no  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default  timezone, which is that of the virtual machine running the application.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>719</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>720</id>
			<description>
                            Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                              This version of the method &lt;code&gt;setNull&lt;/code&gt; should  be used for user-defined types and REF type parameters.  Examples  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and   named array types.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the  SQL type code and the fully-qualified SQL type name when specifying  a NULL user-defined or REF parameter.  In the case of a user-defined type   the name is the type name of the parameter itself.  For a REF   parameter, the name is the type name of the referenced type.  If   a JDBC driver does not need the type code or type name information,   it may ignore it.        Although it is intended for user-defined and Ref parameters,  this method may be used to set a null parameter of any JDBC type.  If the parameter does not have a user-defined or REF type, the given  typeName is ignored.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>721</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>722</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.net.URL&lt;/code&gt; value.
                               The driver converts this to an SQL &lt;code&gt;DATALINK&lt;/code&gt; value  when it sends it to the database.
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setURL" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.net.URL</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>723</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="setURL" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.net.URL</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>724</id>
			<description>
                            Retrieves the number, types and properties of this   &lt;code&gt;PreparedStatement&lt;/code&gt; object's parameters.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="getParameterMetaData" return-type="java.sql.ParameterMetaData"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>725</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>PreparedStatement</class-interface>
			<method name="getParameterMetaData" return-type="java.sql.ParameterMetaData">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>726</id>
			<description>
                            The constant indicating that a  parameter will not allow &lt;code&gt;NULL&lt;/code&gt; values.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<field name="parameterNoNulls" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>727</id>
			<description>
                            The constant indicating that a  parameter will allow &lt;code&gt;NULL&lt;/code&gt; values.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<field name="parameterNullable" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>728</id>
			<description>
                            The constant indicating that the  nullability of a parameter is unknown.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<field name="parameterNullableUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>729</id>
			<description>
                            The constant indicating that the mode of the parameter is unknown.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<field name="parameterModeUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>730</id>
			<description>
                            The constant indicating that the parameter's mode is IN.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<field name="parameterModeIn" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>731</id>
			<description>
                            The constant indicating that the parameter's mode is INOUT.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<field name="parameterModeInOut" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>732</id>
			<description>
                            The constant indicating that the parameter's mode is  OUT.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<field name="parameterModeOut" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>733</id>
			<description>
                            Retrieves the number of parameters in the &lt;code&gt;PreparedStatement&lt;/code&gt;   object for which this &lt;code&gt;ParameterMetaData&lt;/code&gt; object contains  information.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterCount" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>734</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterCount" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>735</id>
			<description>
                            Retrieves whether null values are allowed in the designated parameter.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="isNullable" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>736</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="isNullable" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>737</id>
			<description>
                            Retrieves whether values for the designated parameter can be signed numbers.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="isSigned" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>738</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="isSigned" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>739</id>
			<description>
                            Retrieves the designated parameter's number of decimal digits.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getPrecision" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>740</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getPrecision" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>741</id>
			<description>
                            Retrieves the designated parameter's number of digits to right of the decimal point.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getScale" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>742</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getScale" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>743</id>
			<description>
                            Retrieves the designated parameter's SQL type.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterType" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>744</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterType" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>745</id>
			<description>
                            Retrieves the designated parameter's database-specific type name.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterTypeName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>746</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterTypeName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>747</id>
			<description>
                            Retrieves the fully-qualified name of the Java class whose instances   should be passed to the method &lt;code&gt;PreparedStatement.setObject&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterClassName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>748</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterClassName" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>749</id>
			<description>
                            Retrieves the designated parameter's mode.
                        </description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterMode" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>750</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>ParameterMetaData</class-interface>
			<method name="getParameterMode" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>751</id>
			<description>
                            Attempts to make a database connection to the given URL.
                              The driver should return "null" if it realizes it is the wrong kind  of driver to connect to the given URL.  This will be common, as when  the JDBC driver manager is asked to connect to a given URL it passes  the URL to each loaded driver in turn.   &lt;P&gt;The driver should throw an &lt;code&gt;SQLException&lt;/code&gt; if it is the right   driver to connect to the given URL but has trouble connecting to  the database.   &lt;P&gt;The &lt;code&gt;java.util.Properties&lt;/code&gt; argument can be used to pass  arbitrary string tag/value pairs as connection arguments.  Normally at least "user" and "password" properties should be  included in the &lt;code&gt;Properties&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="connect" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Properties</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>752</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="connect" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Properties</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>753</id>
			<description>
                            Retrieves whether the driver thinks that it can open a connection  to the given URL.
                              Typically drivers will return &lt;code&gt;true&lt;/code&gt; if they  understand the subprotocol specified in the URL and &lt;code&gt;false&lt;/code&gt; if  they do not.
                        </description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="acceptsURL" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>754</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="acceptsURL" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>755</id>
			<description>
                            Gets information about the possible properties for this driver.
                              &lt;P&gt;  The &lt;code&gt;getPropertyInfo&lt;/code&gt; method is intended to allow a generic   GUI tool to discover what properties it should prompt   a human for in order to get   enough information to connect to a database.  Note that depending on  the values the human has supplied so far, additional values may become  necessary, so it may be necessary to iterate though several calls  to the &lt;code&gt;getPropertyInfo&lt;/code&gt; method.
                        </description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="getPropertyInfo" return-type="java.sql.DriverPropertyInfo[]">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Properties</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>756</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="getPropertyInfo" return-type="java.sql.DriverPropertyInfo[]">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Properties</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>757</id>
			<description>
                            Retrieves the driver's major version number.
                             Initially this should be 1.
                        </description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="getMajorVersion" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>758</id>
			<description>
                            Gets the driver's minor version number.
                             Initially this should be 0.
                        </description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="getMinorVersion" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>759</id>
			<description>
                            Reports whether this driver is a genuine JDBC  Compliant&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; driver.
                              A driver may only report &lt;code&gt;true&lt;/code&gt; here if it passes the JDBC  compliance tests; otherwise it is required to return &lt;code&gt;false&lt;/code&gt;.  &lt;P&gt;  JDBC compliance requires full support for the JDBC API and full support  for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will  be available for all the major commercial databases.  &lt;P&gt;  This method is not intended to encourage the development of non-JDBC  compliant drivers, but is a recognition of the fact that some vendors  are interested in using the JDBC API and framework for lightweight  databases that do not support full database functionality, or for  special databases such as document information retrieval where a SQL  implementation may not be feasible.
                        </description>
			<package>java.sql</package>
			<class-interface>Driver</class-interface>
			<method name="jdbcCompliant" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>760</id>
			<description>
                            Indicates that it is not known whether the procedure returns  a result.
                              &lt;P&gt;  A possible value for column &lt;code&gt;PROCEDURE_TYPE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getProcedures&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureResultUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>761</id>
			<description>
                            Indicates that the procedure does not return a result.
                              &lt;P&gt;  A possible value for column &lt;code&gt;PROCEDURE_TYPE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getProcedures&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureNoResult" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>762</id>
			<description>
                            Indicates that the procedure returns a result.
                              &lt;P&gt;  A possible value for column &lt;code&gt;PROCEDURE_TYPE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getProcedures&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureReturnsResult" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>763</id>
			<description>
                            Indicates that type of the column is unknown.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt;   returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureColumnUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>764</id>
			<description>
                            Indicates that the column stores IN parameters.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt;   returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureColumnIn" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>765</id>
			<description>
                            Indicates that the column stores INOUT parameters.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt;   returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureColumnInOut" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>766</id>
			<description>
                            Indicates that the column stores OUT parameters.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt;   returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureColumnOut" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>767</id>
			<description>
                            Indicates that the column stores return values.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt;   returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureColumnReturn" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>768</id>
			<description>
                            Indicates that the column stores results.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt;   returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureColumnResult" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>769</id>
			<description>
                            Indicates that &lt;code&gt;NULL&lt;/code&gt; values are not allowed.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;NULLABLE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureNoNulls" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>770</id>
			<description>
                            Indicates that &lt;code&gt;NULL&lt;/code&gt; values are allowed.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;NULLABLE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureNullable" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>771</id>
			<description>
                            Indicates that whether &lt;code&gt;NULL&lt;/code&gt; values are allowed  is unknown.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;NULLABLE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="procedureNullableUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>772</id>
			<description>
                            Indicates that the column might not allow &lt;code&gt;NULL&lt;/code&gt; values.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;NULLABLE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; returned by the method  &lt;code&gt;getColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="columnNoNulls" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>773</id>
			<description>
                            Indicates that the column definitely allows &lt;code&gt;NULL&lt;/code&gt; values.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;NULLABLE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; returned by the method  &lt;code&gt;getColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="columnNullable" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>774</id>
			<description>
                            Indicates that the nullability of columns is unknown.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;NULLABLE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; returned by the method  &lt;code&gt;getColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="columnNullableUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>775</id>
			<description>
                            Indicates that the scope of the best row identifier is  very temporary, lasting only while the  row is being used.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;SCOPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="bestRowTemporary" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>776</id>
			<description>
                            Indicates that the scope of the best row identifier is  the remainder of the current transaction.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;SCOPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="bestRowTransaction" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>777</id>
			<description>
                            Indicates that the scope of the best row identifier is  the remainder of the current session.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;SCOPE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="bestRowSession" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>778</id>
			<description>
                            Indicates that the best row identifier may or may not be a pseudo column.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="bestRowUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>779</id>
			<description>
                            Indicates that the best row identifier is NOT a pseudo column.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="bestRowNotPseudo" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>780</id>
			<description>
                            Indicates that the best row identifier is a pseudo column.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="bestRowPseudo" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>781</id>
			<description>
                            Indicates that this version column may or may not be a pseudo column.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getVersionColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="versionColumnUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>782</id>
			<description>
                            Indicates that this version column is NOT a pseudo column.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getVersionColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="versionColumnNotPseudo" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>783</id>
			<description>
                            Indicates that this version column is a pseudo column.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getVersionColumns&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="versionColumnPseudo" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>784</id>
			<description>
                            For the column &lt;code&gt;UPDATE_RULE&lt;/code&gt;,  indicates that  when the primary key is updated, the foreign key (imported key)  is changed to agree with it.
                              For the column &lt;code&gt;DELETE_RULE&lt;/code&gt;,  it indicates that  when the primary key is deleted, rows that imported that key  are deleted.  &lt;P&gt;  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,  and &lt;code&gt;getCrossReference&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="importedKeyCascade" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>785</id>
			<description>
                            For the column &lt;code&gt;UPDATE_RULE&lt;/code&gt;, indicates that  a primary key may not be updated if it has been imported by  another table as a foreign key.
                              For the column &lt;code&gt;DELETE_RULE&lt;/code&gt;, indicates that  a primary key may not be deleted if it has been imported by  another table as a foreign key.  &lt;P&gt;  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,  and &lt;code&gt;getCrossReference&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="importedKeyRestrict" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>786</id>
			<description>
                            For the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;  and &lt;code&gt;DELETE_RULE&lt;/code&gt;, indicates that  when the primary key is updated or deleted, the foreign key (imported key)  is changed to &lt;code&gt;NULL&lt;/code&gt;.
                              &lt;P&gt;  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,  and &lt;code&gt;getCrossReference&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="importedKeySetNull" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>787</id>
			<description>
                            For the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;  and &lt;code&gt;DELETE_RULE&lt;/code&gt;, indicates that  if the primary key has been imported, it cannot be updated or deleted.
                              &lt;P&gt;  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,  and &lt;code&gt;getCrossReference&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="importedKeyNoAction" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>788</id>
			<description>
                            For the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;  and &lt;code&gt;DELETE_RULE&lt;/code&gt;, indicates that  if the primary key is updated or deleted, the foreign key (imported key)  is set to the default value.
                              &lt;P&gt;  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,  and &lt;code&gt;getCrossReference&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="importedKeySetDefault" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>789</id>
			<description>
                            Indicates deferrability.
                              See SQL-92 for a definition.  &lt;P&gt;  A possible value for the column &lt;code&gt;DEFERRABILITY&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,  and &lt;code&gt;getCrossReference&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="importedKeyInitiallyDeferred" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>790</id>
			<description>
                            Indicates deferrability.
                              See SQL-92 for a definition.  &lt;P&gt;  A possible value for the column &lt;code&gt;DEFERRABILITY&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,  and &lt;code&gt;getCrossReference&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="importedKeyInitiallyImmediate" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>791</id>
			<description>
                            Indicates deferrability.
                              See SQL-92 for a definition.  &lt;P&gt;  A possible value for the column &lt;code&gt;DEFERRABILITY&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,  and &lt;code&gt;getCrossReference&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="importedKeyNotDeferrable" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>792</id>
			<description>
                            Indicates that a &lt;code&gt;NULL&lt;/code&gt; value is NOT allowed for this  data type.
                              &lt;P&gt;  A possible value for column &lt;code&gt;NULLABLE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getTypeInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="typeNoNulls" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>793</id>
			<description>
                            Indicates that a &lt;code&gt;NULL&lt;/code&gt; value is allowed for this  data type.
                              &lt;P&gt;  A possible value for column &lt;code&gt;NULLABLE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getTypeInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="typeNullable" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>794</id>
			<description>
                            Indicates that it is not known whether a &lt;code&gt;NULL&lt;/code&gt; value   is allowed for this data type.
                              &lt;P&gt;  A possible value for column &lt;code&gt;NULLABLE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getTypeInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="typeNullableUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>795</id>
			<description>
                            Indicates that &lt;code&gt;WHERE&lt;/code&gt; search clauses are not supported  for this type.
                              &lt;P&gt;  A possible value for column &lt;code&gt;SEARCHABLE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getTypeInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="typePredNone" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>796</id>
			<description>
                            Indicates that the only &lt;code&gt;WHERE&lt;/code&gt; search clause that can  be based on this type is &lt;code&gt;WHERE .
                             . . LIKE&lt;/code&gt;.  &lt;P&gt;  A possible value for column &lt;code&gt;SEARCHABLE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getTypeInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="typePredChar" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>797</id>
			<description>
                            Indicates that one can base all &lt;code&gt;WHERE&lt;/code&gt; search clauses   except &lt;code&gt;WHERE .
                             . . LIKE&lt;/code&gt; on this data type.  &lt;P&gt;  A possible value for column &lt;code&gt;SEARCHABLE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getTypeInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="typePredBasic" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>798</id>
			<description>
                            Indicates that all &lt;code&gt;WHERE&lt;/code&gt; search clauses can be   based on this type.
                              &lt;P&gt;  A possible value for column &lt;code&gt;SEARCHABLE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getTypeInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="typeSearchable" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>799</id>
			<description>
                            Indicates that this column contains table statistics that  are returned in conjunction with a table's index descriptions.
                              &lt;P&gt;  A possible value for column &lt;code&gt;TYPE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getIndexInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="tableIndexStatistic" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>800</id>
			<description>
                            Indicates that this table index is a clustered index.
                              &lt;P&gt;  A possible value for column &lt;code&gt;TYPE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getIndexInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="tableIndexClustered" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>801</id>
			<description>
                            Indicates that this table index is a hashed index.
                              &lt;P&gt;  A possible value for column &lt;code&gt;TYPE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getIndexInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="tableIndexHashed" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>802</id>
			<description>
                            Indicates that this table index is not a clustered  index, a hashed index, or table statistics;  it is something other than these.
                              &lt;P&gt;  A possible value for column &lt;code&gt;TYPE&lt;/code&gt; in the  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method  &lt;code&gt;getIndexInfo&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="tableIndexOther" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>803</id>
			<description>
                            Indicates that &lt;code&gt;NULL&lt;/code&gt; values might not be allowed.
                              &lt;P&gt;  A possible value for the column  &lt;code&gt;NULLABLE&lt;/code&gt; in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getAttributes&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="attributeNoNulls" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>804</id>
			<description>
                            Indicates that &lt;code&gt;NULL&lt;/code&gt; values are definitely allowed.
                              &lt;P&gt;  A possible value for the column &lt;code&gt;NULLABLE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getAttributes&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="attributeNullable" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>805</id>
			<description>
                            Indicates that whether &lt;code&gt;NULL&lt;/code&gt; values are allowed is not  known.
                               &lt;P&gt;  A possible value for the column &lt;code&gt;NULLABLE&lt;/code&gt;  in the &lt;code&gt;ResultSet&lt;/code&gt; object  returned by the method &lt;code&gt;getAttributes&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="attributeNullableUnknown" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>806</id>
			<description>
                            Indicates that the value is an  X/Open (now know as Open Group) SQL CLI SQLSTATE value.
                              &lt;P&gt;  A possible return value for the method  &lt;code&gt;SQLException.getSQLState&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="sqlStateXOpen" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>807</id>
			<description>
                            Indicates that the value is an SQL99 SQLSTATE value.
                              &lt;P&gt;  A possible return value for the method  &lt;code&gt;SQLException.getSQLState&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<field name="sqlStateSQL99" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>808</id>
			<description>
                            Retrieves whether the current user can call all the procedures   returned by the method &lt;code&gt;getProcedures&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="allProceduresAreCallable" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>809</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="allProceduresAreCallable" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>810</id>
			<description>
                            Retrieves whether the current user can use all the tables returned   by the method &lt;code&gt;getTables&lt;/code&gt; in a &lt;code&gt;SELECT&lt;/code&gt;   statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="allTablesAreSelectable" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>811</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="allTablesAreSelectable" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>812</id>
			<description>
                            Retrieves the URL for this DBMS.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getURL" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>813</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getURL" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>814</id>
			<description>
                            Retrieves the user name as known to this database.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getUserName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>815</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getUserName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>816</id>
			<description>
                            Retrieves whether this database is in read-only mode.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="isReadOnly" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>817</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="isReadOnly" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>818</id>
			<description>
                            Retrieves whether &lt;code&gt;NULL&lt;/code&gt; values are sorted high.
                              Sorted high means that &lt;code&gt;NULL&lt;/code&gt; values  sort higher than any other value in a domain.  In an ascending order,  if this method returns &lt;code&gt;true&lt;/code&gt;,  &lt;code&gt;NULL&lt;/code&gt; values  will appear at the end. By contrast, the method   &lt;code&gt;nullsAreSortedAtEnd&lt;/code&gt; indicates whether &lt;code&gt;NULL&lt;/code&gt; values  are sorted at the end regardless of sort order.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullsAreSortedHigh" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>819</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullsAreSortedHigh" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>820</id>
			<description>
                            Retrieves whether &lt;code&gt;NULL&lt;/code&gt; values are sorted low.
                              Sorted low means that &lt;code&gt;NULL&lt;/code&gt; values  sort lower than any other value in a domain.  In an ascending order,  if this method returns &lt;code&gt;true&lt;/code&gt;,  &lt;code&gt;NULL&lt;/code&gt; values  will appear at the beginning. By contrast, the method   &lt;code&gt;nullsAreSortedAtStart&lt;/code&gt; indicates whether &lt;code&gt;NULL&lt;/code&gt; values  are sorted at the beginning regardless of sort order.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullsAreSortedLow" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>821</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullsAreSortedLow" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>822</id>
			<description>
                            Retrieves whether &lt;code&gt;NULL&lt;/code&gt; values are sorted at the start regardless   of sort order.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullsAreSortedAtStart" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>823</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullsAreSortedAtStart" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>824</id>
			<description>
                            Retrieves whether &lt;code&gt;NULL&lt;/code&gt; values are sorted at the end regardless of   sort order.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullsAreSortedAtEnd" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>825</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullsAreSortedAtEnd" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>826</id>
			<description>
                            Retrieves the name of this database product.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDatabaseProductName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>827</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDatabaseProductName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>828</id>
			<description>
                            Retrieves the version number of this database product.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDatabaseProductVersion" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>829</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDatabaseProductVersion" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>830</id>
			<description>
                            Retrieves the name of this JDBC driver.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDriverName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>831</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDriverName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>832</id>
			<description>
                            Retrieves the version number of this JDBC driver as a &lt;code&gt;String&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDriverVersion" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>833</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDriverVersion" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>834</id>
			<description>
                            Retrieves this JDBC driver's major version number.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDriverMajorVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>835</id>
			<description>
                            Retrieves this JDBC driver's minor version number.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDriverMinorVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>836</id>
			<description>
                            Retrieves whether this database stores tables in a local file.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="usesLocalFiles" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>837</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="usesLocalFiles" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>838</id>
			<description>
                            Retrieves whether this database uses a file for each table.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="usesLocalFilePerTable" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>839</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="usesLocalFilePerTable" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>840</id>
			<description>
                            Retrieves whether this database treats mixed case unquoted SQL identifiers as  case sensitive and as a result stores them in mixed case.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMixedCaseIdentifiers" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>841</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMixedCaseIdentifiers" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>842</id>
			<description>
                            Retrieves whether this database treats mixed case unquoted SQL identifiers as  case insensitive and stores them in upper case.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesUpperCaseIdentifiers" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>843</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesUpperCaseIdentifiers" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>844</id>
			<description>
                            Retrieves whether this database treats mixed case unquoted SQL identifiers as  case insensitive and stores them in lower case.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesLowerCaseIdentifiers" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>845</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesLowerCaseIdentifiers" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>846</id>
			<description>
                            Retrieves whether this database treats mixed case unquoted SQL identifiers as  case insensitive and stores them in mixed case.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesMixedCaseIdentifiers" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>847</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesMixedCaseIdentifiers" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>848</id>
			<description>
                            Retrieves whether this database treats mixed case quoted SQL identifiers as  case sensitive and as a result stores them in mixed case.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMixedCaseQuotedIdentifiers" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>849</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMixedCaseQuotedIdentifiers" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>850</id>
			<description>
                            Retrieves whether this database treats mixed case quoted SQL identifiers as  case insensitive and stores them in upper case.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesUpperCaseQuotedIdentifiers" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>851</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesUpperCaseQuotedIdentifiers" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>852</id>
			<description>
                            Retrieves whether this database treats mixed case quoted SQL identifiers as  case insensitive and stores them in lower case.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesLowerCaseQuotedIdentifiers" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>853</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesLowerCaseQuotedIdentifiers" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>854</id>
			<description>
                            Retrieves whether this database treats mixed case quoted SQL identifiers as  case insensitive and stores them in mixed case.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesMixedCaseQuotedIdentifiers" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>855</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="storesMixedCaseQuotedIdentifiers" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>856</id>
			<description>
                            Retrieves the string used to quote SQL identifiers.
                              This method returns a space " " if identifier quoting is not supported.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getIdentifierQuoteString" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>857</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getIdentifierQuoteString" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>858</id>
			<description>
                            Retrieves a comma-separated list of all of this database's SQL keywords  that are NOT also SQL92 keywords.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSQLKeywords" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>859</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSQLKeywords" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>860</id>
			<description>
                            Retrieves a comma-separated list of math functions available with  this database.
                              These are the Open /Open CLI math function names used in   the JDBC function escape clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getNumericFunctions" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>861</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getNumericFunctions" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>862</id>
			<description>
                            Retrieves a comma-separated list of string functions available with  this database.
                              These are the  Open Group CLI string function names used   in the JDBC function escape clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getStringFunctions" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>863</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getStringFunctions" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>864</id>
			<description>
                            Retrieves a comma-separated list of system functions available with  this database.
                              These are the  Open Group CLI system function names used   in the JDBC function escape clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSystemFunctions" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>865</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSystemFunctions" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>866</id>
			<description>
                            Retrieves a comma-separated list of the time and date functions available   with this database.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTimeDateFunctions" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>867</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTimeDateFunctions" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>868</id>
			<description>
                            Retrieves the string that can be used to escape wildcard characters.
                              This is the string that can be used to escape '_' or '%' in  the catalog search parameters that are a pattern (and therefore use one  of the wildcard characters).   &lt;P&gt;The '_' character represents any single character;  the '%' character represents any sequence of zero or   more characters.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSearchStringEscape" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>869</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSearchStringEscape" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>870</id>
			<description>
                            Retrieves all the "extra" characters that can be used in unquoted  identifier names (those beyond a-z, A-Z, 0-9 and _).
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getExtraNameCharacters" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>871</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getExtraNameCharacters" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>872</id>
			<description>
                            Retrieves whether this database supports &lt;code&gt;ALTER TABLE&lt;/code&gt;  with add column.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsAlterTableWithAddColumn" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>873</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsAlterTableWithAddColumn" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>874</id>
			<description>
                            Retrieves whether this database supports &lt;code&gt;ALTER TABLE&lt;/code&gt;  with drop column.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsAlterTableWithDropColumn" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>875</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsAlterTableWithDropColumn" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>876</id>
			<description>
                            Retrieves whether this database supports column aliasing.
                               &lt;P&gt;If so, the SQL AS clause can be used to provide names for  computed columns or to provide alias names for columns as  required.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsColumnAliasing" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>877</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsColumnAliasing" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>878</id>
			<description>
                            Retrieves whether this database supports concatenations between   &lt;code&gt;NULL&lt;/code&gt; and non-&lt;code&gt;NULL&lt;/code&gt; values being   &lt;code&gt;NULL&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullPlusNonNullIsNull" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>879</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="nullPlusNonNullIsNull" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>880</id>
			<description>
                            Retrieves whether this database supports the &lt;code&gt;CONVERT&lt;/code&gt;  function between SQL types.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsConvert" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>881</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsConvert" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>882</id>
			<description>
                            Retrieves whether this database supports the &lt;code&gt;CONVERT&lt;/code&gt;  for two given SQL types.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsConvert" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>883</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsConvert" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>884</id>
			<description>
                            Retrieves whether this database supports table correlation names.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsTableCorrelationNames" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>885</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsTableCorrelationNames" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>886</id>
			<description>
                            Retrieves whether, when table correlation names are supported, they   are restricted to being different from the names of the tables.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsDifferentTableCorrelationNames" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>887</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsDifferentTableCorrelationNames" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>888</id>
			<description>
                            Retrieves whether this database supports expressions in   &lt;code&gt;ORDER BY&lt;/code&gt; lists.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsExpressionsInOrderBy" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>889</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsExpressionsInOrderBy" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>890</id>
			<description>
                            Retrieves whether this database supports using a column that is  not in the &lt;code&gt;SELECT&lt;/code&gt; statement in an  &lt;code&gt;ORDER BY&lt;/code&gt; clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOrderByUnrelated" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>891</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOrderByUnrelated" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>892</id>
			<description>
                            Retrieves whether this database supports some form of   &lt;code&gt;GROUP BY&lt;/code&gt; clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsGroupBy" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>893</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsGroupBy" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>894</id>
			<description>
                            Retrieves whether this database supports using a column that is  not in the &lt;code&gt;SELECT&lt;/code&gt; statement in a  &lt;code&gt;GROUP BY&lt;/code&gt; clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsGroupByUnrelated" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>895</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsGroupByUnrelated" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>896</id>
			<description>
                            Retrieves whether this database supports using columns not included in  the &lt;code&gt;SELECT&lt;/code&gt; statement in a &lt;code&gt;GROUP BY&lt;/code&gt; clause   provided that all of the columns in the &lt;code&gt;SELECT&lt;/code&gt; statement  are included in the &lt;code&gt;GROUP BY&lt;/code&gt; clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsGroupByBeyondSelect" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>897</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsGroupByBeyondSelect" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>898</id>
			<description>
                            Retrieves whether this database supports specifying a  &lt;code&gt;LIKE&lt;/code&gt; escape clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsLikeEscapeClause" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>899</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsLikeEscapeClause" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>900</id>
			<description>
                            Retrieves whether this database supports getting multiple   &lt;code&gt;ResultSet&lt;/code&gt; objects from a single call to the  method &lt;code&gt;execute&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMultipleResultSets" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>901</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMultipleResultSets" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>902</id>
			<description>
                            Retrieves whether this database allows having multiple   transactions open at once (on different connections).
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMultipleTransactions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>903</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMultipleTransactions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>904</id>
			<description>
                            Retrieves whether columns in this database may be defined as non-nullable.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsNonNullableColumns" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>905</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsNonNullableColumns" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>906</id>
			<description>
                            Retrieves whether this database supports the ODBC Minimum SQL grammar.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMinimumSQLGrammar" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>907</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMinimumSQLGrammar" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>908</id>
			<description>
                            Retrieves whether this database supports the ODBC Core SQL grammar.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCoreSQLGrammar" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>909</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCoreSQLGrammar" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>910</id>
			<description>
                            Retrieves whether this database supports the ODBC Extended SQL grammar.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsExtendedSQLGrammar" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>911</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsExtendedSQLGrammar" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>912</id>
			<description>
                            Retrieves whether this database supports the ANSI92 entry level SQL   grammar.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsANSI92EntryLevelSQL" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>913</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsANSI92EntryLevelSQL" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>914</id>
			<description>
                            Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsANSI92IntermediateSQL" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>915</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsANSI92IntermediateSQL" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>916</id>
			<description>
                            Retrieves whether this database supports the ANSI92 full SQL grammar supported.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsANSI92FullSQL" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>917</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsANSI92FullSQL" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>918</id>
			<description>
                            Retrieves whether this database supports the SQL Integrity   Enhancement Facility.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsIntegrityEnhancementFacility" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>919</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsIntegrityEnhancementFacility" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>920</id>
			<description>
                            Retrieves whether this database supports some form of outer join.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOuterJoins" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>921</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOuterJoins" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>922</id>
			<description>
                            Retrieves whether this database supports full nested outer joins.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsFullOuterJoins" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>923</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsFullOuterJoins" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>924</id>
			<description>
                            Retrieves whether this database provides limited support for outer   joins.
                              (This will be &lt;code&gt;true&lt;/code&gt; if the method   &lt;code&gt;supportsFullOuterJoins&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;).
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsLimitedOuterJoins" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>925</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsLimitedOuterJoins" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>926</id>
			<description>
                            Retrieves the database vendor's preferred term for "schema".
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSchemaTerm" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>927</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSchemaTerm" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>928</id>
			<description>
                            Retrieves the database vendor's preferred term for "procedure".
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getProcedureTerm" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>929</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getProcedureTerm" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>930</id>
			<description>
                            Retrieves the database vendor's preferred term for "catalog".
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getCatalogTerm" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>931</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getCatalogTerm" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>932</id>
			<description>
                            Retrieves whether a catalog appears at the start of a fully qualified   table name.
                              If not, the catalog appears at the end.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="isCatalogAtStart" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>933</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="isCatalogAtStart" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>934</id>
			<description>
                            Retrieves the &lt;code&gt;String&lt;/code&gt; that this database uses as the   separator between a catalog and table name.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getCatalogSeparator" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>935</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getCatalogSeparator" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>936</id>
			<description>
                            Retrieves whether a schema name can be used in a data manipulation statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInDataManipulation" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>937</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInDataManipulation" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>938</id>
			<description>
                            Retrieves whether a schema name can be used in a procedure call statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInProcedureCalls" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>939</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInProcedureCalls" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>940</id>
			<description>
                            Retrieves whether a schema name can be used in a table definition statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInTableDefinitions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>941</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInTableDefinitions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>942</id>
			<description>
                            Retrieves whether a schema name can be used in an index definition statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInIndexDefinitions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>943</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInIndexDefinitions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>944</id>
			<description>
                            Retrieves whether a schema name can be used in a privilege definition statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInPrivilegeDefinitions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>945</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSchemasInPrivilegeDefinitions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>946</id>
			<description>
                            Retrieves whether a catalog name can be used in a data manipulation statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInDataManipulation" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>947</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInDataManipulation" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>948</id>
			<description>
                            Retrieves whether a catalog name can be used in a procedure call statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInProcedureCalls" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>949</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInProcedureCalls" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>950</id>
			<description>
                            Retrieves whether a catalog name can be used in a table definition statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInTableDefinitions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>951</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInTableDefinitions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>952</id>
			<description>
                            Retrieves whether a catalog name can be used in an index definition statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInIndexDefinitions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>953</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInIndexDefinitions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>954</id>
			<description>
                            Retrieves whether a catalog name can be used in a privilege definition statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInPrivilegeDefinitions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>955</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCatalogsInPrivilegeDefinitions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>956</id>
			<description>
                            Retrieves whether this database supports positioned &lt;code&gt;DELETE&lt;/code&gt;  statements.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsPositionedDelete" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>957</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsPositionedDelete" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>958</id>
			<description>
                            Retrieves whether this database supports positioned &lt;code&gt;UPDATE&lt;/code&gt;  statements.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsPositionedUpdate" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>959</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsPositionedUpdate" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>960</id>
			<description>
                            Retrieves whether this database supports &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt;  statements.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSelectForUpdate" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>961</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSelectForUpdate" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>962</id>
			<description>
                            Retrieves whether this database supports stored procedure calls   that use the stored procedure escape syntax.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsStoredProcedures" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>963</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsStoredProcedures" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>964</id>
			<description>
                            Retrieves whether this database supports subqueries in comparison   expressions.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSubqueriesInComparisons" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>965</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSubqueriesInComparisons" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>966</id>
			<description>
                            Retrieves whether this database supports subqueries in   &lt;code&gt;EXISTS&lt;/code&gt; expressions.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSubqueriesInExists" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>967</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSubqueriesInExists" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>968</id>
			<description>
                            Retrieves whether this database supports subqueries in   &lt;code&gt;IN&lt;/code&gt; statements.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSubqueriesInIns" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>969</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSubqueriesInIns" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>970</id>
			<description>
                            Retrieves whether this database supports subqueries in quantified   expressions.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSubqueriesInQuantifieds" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>971</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSubqueriesInQuantifieds" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>972</id>
			<description>
                            Retrieves whether this database supports correlated subqueries.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCorrelatedSubqueries" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>973</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsCorrelatedSubqueries" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>974</id>
			<description>
                            Retrieves whether this database supports SQL &lt;code&gt;UNION&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsUnion" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>975</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsUnion" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>976</id>
			<description>
                            Retrieves whether this database supports SQL &lt;code&gt;UNION ALL&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsUnionAll" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>977</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsUnionAll" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>978</id>
			<description>
                            Retrieves whether this database supports keeping cursors open   across commits.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOpenCursorsAcrossCommit" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>979</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOpenCursorsAcrossCommit" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>980</id>
			<description>
                            Retrieves whether this database supports keeping cursors open   across rollbacks.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOpenCursorsAcrossRollback" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>981</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOpenCursorsAcrossRollback" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>982</id>
			<description>
                            Retrieves whether this database supports keeping statements open   across commits.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOpenStatementsAcrossCommit" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>983</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOpenStatementsAcrossCommit" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>984</id>
			<description>
                            Retrieves whether this database supports keeping statements open   across rollbacks.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOpenStatementsAcrossRollback" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>985</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsOpenStatementsAcrossRollback" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>986</id>
			<description>
                            Retrieves the maximum number of hex characters this database allows in an   inline binary literal.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxBinaryLiteralLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>987</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxBinaryLiteralLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>988</id>
			<description>
                            Retrieves the maximum number of characters this database allows   for a character literal.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxCharLiteralLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>989</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxCharLiteralLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>990</id>
			<description>
                            Retrieves the maximum number of characters this database allows  for a column name.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnNameLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>991</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnNameLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>992</id>
			<description>
                            Retrieves the maximum number of columns this database allows in a   &lt;code&gt;GROUP BY&lt;/code&gt; clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInGroupBy" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>993</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInGroupBy" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>994</id>
			<description>
                            Retrieves the maximum number of columns this database allows in an index.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInIndex" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>995</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInIndex" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>996</id>
			<description>
                            Retrieves the maximum number of columns this database allows in an   &lt;code&gt;ORDER BY&lt;/code&gt; clause.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInOrderBy" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>997</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInOrderBy" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>998</id>
			<description>
                            Retrieves the maximum number of columns this database allows in a   &lt;code&gt;SELECT&lt;/code&gt; list.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInSelect" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>999</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInSelect" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1000</id>
			<description>
                            Retrieves the maximum number of columns this database allows in a table.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInTable" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1001</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxColumnsInTable" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1002</id>
			<description>
                            Retrieves the maximum number of concurrent connections to this  database that are possible.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxConnections" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1003</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxConnections" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1004</id>
			<description>
                            Retrieves the maximum number of characters that this database allows in a  cursor name.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxCursorNameLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1005</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxCursorNameLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1006</id>
			<description>
                            Retrieves the maximum number of bytes this database allows for an   index, including all of the parts of the index.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxIndexLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1007</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxIndexLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1008</id>
			<description>
                            Retrieves the maximum number of characters that this database allows in a  schema name.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxSchemaNameLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1009</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxSchemaNameLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1010</id>
			<description>
                            Retrieves the maximum number of characters that this database allows in a  procedure name.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxProcedureNameLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1011</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxProcedureNameLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1012</id>
			<description>
                            Retrieves the maximum number of characters that this database allows in a  catalog name.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxCatalogNameLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1013</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxCatalogNameLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1014</id>
			<description>
                            Retrieves the maximum number of bytes this database allows in  a single row.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxRowSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1015</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxRowSize" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1016</id>
			<description>
                            Retrieves whether the return value for the method   &lt;code&gt;getMaxRowSize&lt;/code&gt; includes the SQL data types   &lt;code&gt;LONGVARCHAR&lt;/code&gt; and &lt;code&gt;LONGVARBINARY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="doesMaxRowSizeIncludeBlobs" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1017</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="doesMaxRowSizeIncludeBlobs" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1018</id>
			<description>
                            Retrieves the maximum number of characters this database allows in  an SQL statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxStatementLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1019</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxStatementLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1020</id>
			<description>
                            Retrieves the maximum number of active statements to this database  that can be open at the same time.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxStatements" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1021</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxStatements" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1022</id>
			<description>
                            Retrieves the maximum number of characters this database allows in  a table name.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxTableNameLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1023</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxTableNameLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1024</id>
			<description>
                            Retrieves the maximum number of tables this database allows in a  &lt;code&gt;SELECT&lt;/code&gt; statement.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxTablesInSelect" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1025</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxTablesInSelect" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1026</id>
			<description>
                            Retrieves the maximum number of characters this database allows in  a user name.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxUserNameLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1027</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getMaxUserNameLength" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1028</id>
			<description>
                            Retrieves this database's default transaction isolation level.
                              The  possible values are defined in &lt;code&gt;java.sql.Connection&lt;/code&gt;.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDefaultTransactionIsolation" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1029</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDefaultTransactionIsolation" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1030</id>
			<description>
                            Retrieves whether this database supports transactions.
                             If not, invoking the  method &lt;code&gt;commit&lt;/code&gt; is a noop, and the isolation level is   &lt;code&gt;TRANSACTION_NONE&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsTransactions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1031</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsTransactions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1032</id>
			<description>
                            Retrieves whether this database supports the given transaction isolation level.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsTransactionIsolationLevel" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1033</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsTransactionIsolationLevel" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1034</id>
			<description>
                            Retrieves whether this database supports both data definition and   data manipulation statements within a transaction.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsDataDefinitionAndDataManipulationTransactions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1035</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsDataDefinitionAndDataManipulationTransactions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1036</id>
			<description>
                            Retrieves whether this database supports only data manipulation   statements within a transaction.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsDataManipulationTransactionsOnly" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1037</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsDataManipulationTransactionsOnly" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1038</id>
			<description>
                            Retrieves whether a data definition statement within a transaction forces  the transaction to commit.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="dataDefinitionCausesTransactionCommit" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1039</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="dataDefinitionCausesTransactionCommit" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1040</id>
			<description>
                            Retrieves whether this database ignores a data definition statement   within a transaction.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="dataDefinitionIgnoredInTransactions" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1041</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="dataDefinitionIgnoredInTransactions" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1042</id>
			<description>
                            Retrieves a description of the stored procedures available in the given  catalog.
                              &lt;P&gt;  Only procedure descriptions matching the schema and  procedure name criteria are returned.  They are ordered by  &lt;code&gt;PROCEDURE_SCHEM&lt;/code&gt; and &lt;code&gt;PROCEDURE_NAME&lt;/code&gt;.   &lt;P&gt;Each procedure description has the the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;PROCEDURE_CAT&lt;/B&gt; String =&gt; procedure catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PROCEDURE_SCHEM&lt;/B&gt; String =&gt; procedure schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PROCEDURE_NAME&lt;/B&gt; String =&gt; procedure name   &lt;LI&gt; reserved for future use   &lt;LI&gt; reserved for future use   &lt;LI&gt; reserved for future use  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; explanatory comment on the procedure  &lt;LI&gt;&lt;B&gt;PROCEDURE_TYPE&lt;/B&gt; short =&gt; kind of procedure:       &lt;UL&gt;       &lt;LI&gt; procedureResultUnknown - May return a result       &lt;LI&gt; procedureNoResult - Does not return a result       &lt;LI&gt; procedureReturnsResult - Returns a result       &lt;/UL&gt;   &lt;/OL&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getProcedures" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1043</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getProcedures" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1044</id>
			<description>
                            Retrieves a description of the given catalog's stored procedure parameter  and result columns.
                               &lt;P&gt;Only descriptions matching the schema, procedure and  parameter name criteria are returned.  They are ordered by  PROCEDURE_SCHEM and PROCEDURE_NAME. Within this, the return value,  if any, is first. Next are the parameter descriptions in call  order. The column descriptions follow in column number order.   &lt;P&gt;Each row in the &lt;code&gt;ResultSet&lt;/code&gt; is a parameter description or  column description with the following fields:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;PROCEDURE_CAT&lt;/B&gt; String =&gt; procedure catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PROCEDURE_SCHEM&lt;/B&gt; String =&gt; procedure schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PROCEDURE_NAME&lt;/B&gt; String =&gt; procedure name  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column/parameter name   &lt;LI&gt;&lt;B&gt;COLUMN_TYPE&lt;/B&gt; Short =&gt; kind of column/parameter:       &lt;UL&gt;       &lt;LI&gt; procedureColumnUnknown - nobody knows       &lt;LI&gt; procedureColumnIn - IN parameter       &lt;LI&gt; procedureColumnInOut - INOUT parameter       &lt;LI&gt; procedureColumnOut - OUT parameter       &lt;LI&gt; procedureColumnReturn - procedure return value       &lt;LI&gt; procedureColumnResult - result column in &lt;code&gt;ResultSet&lt;/code&gt;       &lt;/UL&gt;   &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; short =&gt; SQL type from java.sql.Types  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; SQL type name, for a UDT type the   type name is fully qualified  &lt;LI&gt;&lt;B&gt;PRECISION&lt;/B&gt; int =&gt; precision  &lt;LI&gt;&lt;B&gt;LENGTH&lt;/B&gt; int =&gt; length in bytes of data  &lt;LI&gt;&lt;B&gt;SCALE&lt;/B&gt; short =&gt; scale  &lt;LI&gt;&lt;B&gt;RADIX&lt;/B&gt; short =&gt; radix  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; short =&gt; can it contain NULL.       &lt;UL&gt;       &lt;LI&gt; procedureNoNulls - does not allow NULL values       &lt;LI&gt; procedureNullable - allows NULL values       &lt;LI&gt; procedureNullableUnknown - nullability unknown       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; comment describing parameter/column   &lt;/OL&gt;   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Some databases may not return the column  descriptions for a procedure. Additional columns beyond  REMARKS can be defined by the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getProcedureColumns" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1045</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getProcedureColumns" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1046</id>
			<description>
                            Retrieves a description of the tables available in the given catalog.
                              Only table descriptions matching the catalog, schema, table  name and type criteria are returned.  They are ordered by  TABLE_TYPE, TABLE_SCHEM and TABLE_NAME.  &lt;P&gt;  Each table description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name  &lt;LI&gt;&lt;B&gt;TABLE_TYPE&lt;/B&gt; String =&gt; table type.  Typical types are "TABLE",    "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY",     "LOCAL TEMPORARY", "ALIAS", "SYNONYM".  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; explanatory comment on the table   &lt;LI&gt;&lt;B&gt;TYPE_CAT&lt;/B&gt; String =&gt; the types catalog (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;TYPE_SCHEM&lt;/B&gt; String =&gt; the types schema (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; type name (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;SELF_REFERENCING_COL_NAME&lt;/B&gt; String =&gt; name of the designated                    "identifier" column of a typed table (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;REF_GENERATION&lt;/B&gt; String =&gt; specifies how values in                    SELF_REFERENCING_COL_NAME are created. Values are                   "SYSTEM", "USER", "DERIVED". (may be &lt;code&gt;null&lt;/code&gt;)    &lt;/OL&gt;   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Some databases may not return information for  all tables.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTables" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1047</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTables" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1048</id>
			<description>
                            Retrieves the schema names available in this database.
                              The results  are ordered by schema name.   &lt;P&gt;The schema column is:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; schema name   &lt;LI&gt;&lt;B&gt;TABLE_CATALOG&lt;/B&gt; String =&gt; catalog name (may be &lt;code&gt;null&lt;/code&gt;)   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSchemas" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1049</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSchemas" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1050</id>
			<description>
                            Retrieves the catalog names available in this database.
                              The results  are ordered by catalog name.   &lt;P&gt;The catalog column is:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; catalog name   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getCatalogs" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1051</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getCatalogs" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1052</id>
			<description>
                            Retrieves the table types available in this database.
                              The results  are ordered by table type.   &lt;P&gt;The table type is:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_TYPE&lt;/B&gt; String =&gt; table type.  Typical types are "TABLE",    "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY",     "LOCAL TEMPORARY", "ALIAS", "SYNONYM".   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTableTypes" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1053</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTableTypes" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1054</id>
			<description>
                            Retrieves a description of table columns available in   the specified catalog.
                               &lt;P&gt;Only column descriptions matching the catalog, schema, table  and column name criteria are returned.  They are ordered by  &lt;code&gt;TABLE_SCHEM&lt;/code&gt;, &lt;code&gt;TABLE_NAME&lt;/code&gt;, and   &lt;code&gt;ORDINAL_POSITION&lt;/code&gt;.   &lt;P&gt;Each column description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; short =&gt; SQL type from java.sql.Types  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; Data source dependent type name,   for a UDT the type name is fully qualified  &lt;LI&gt;&lt;B&gt;COLUMN_SIZE&lt;/B&gt; int =&gt; column size.  For char or date      types this is the maximum number of characters, for numeric or      decimal types this is precision.  &lt;LI&gt;&lt;B&gt;BUFFER_LENGTH&lt;/B&gt; is not used.  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; int =&gt; the number of fractional digits  &lt;LI&gt;&lt;B&gt;NUM_PREC_RADIX&lt;/B&gt; int =&gt; Radix (typically either 10 or 2)  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; int =&gt; is NULL allowed.       &lt;UL&gt;       &lt;LI&gt; columnNoNulls - might not allow &lt;code&gt;NULL&lt;/code&gt; values       &lt;LI&gt; columnNullable - definitely allows &lt;code&gt;NULL&lt;/code&gt; values       &lt;LI&gt; columnNullableUnknown - nullability unknown       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; comment describing column (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;COLUMN_DEF&lt;/B&gt; String =&gt; default value (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;SQL_DATA_TYPE&lt;/B&gt; int =&gt; unused  &lt;LI&gt;&lt;B&gt;SQL_DATETIME_SUB&lt;/B&gt; int =&gt; unused  &lt;LI&gt;&lt;B&gt;CHAR_OCTET_LENGTH&lt;/B&gt; int =&gt; for char types the         maximum number of bytes in the column  &lt;LI&gt;&lt;B&gt;ORDINAL_POSITION&lt;/B&gt; int =&gt; index of column in table        (starting at 1)  &lt;LI&gt;&lt;B&gt;IS_NULLABLE&lt;/B&gt; String =&gt; "NO" means column definitely        does not allow NULL values; "YES" means the column might        allow NULL values.  An empty string means nobody knows.   &lt;LI&gt;&lt;B&gt;SCOPE_CATLOG&lt;/B&gt; String =&gt; catalog of table that is the scope       of a reference attribute (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE isn't REF)   &lt;LI&gt;&lt;B&gt;SCOPE_SCHEMA&lt;/B&gt; String =&gt; schema of table that is the scope       of a reference attribute (&lt;code&gt;null&lt;/code&gt; if the DATA_TYPE isn't REF)   &lt;LI&gt;&lt;B&gt;SCOPE_TABLE&lt;/B&gt; String =&gt; table name that this the scope       of a reference attribure (&lt;code&gt;null&lt;/code&gt; if the DATA_TYPE isn't REF)   &lt;LI&gt;&lt;B&gt;SOURCE_DATA_TYPE&lt;/B&gt; short =&gt; source type of a distinct type or user-generated       Ref type, SQL type from java.sql.Types (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE        isn't DISTINCT or user-generated REF)   &lt;/OL&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getColumns" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1055</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getColumns" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1056</id>
			<description>
                            Retrieves a description of the access rights for a table's columns.
                               &lt;P&gt;Only privileges matching the column name criteria are  returned.  They are ordered by COLUMN_NAME and PRIVILEGE.   &lt;P&gt;Each privilige description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name  &lt;LI&gt;&lt;B&gt;GRANTOR&lt;/B&gt; =&gt; grantor of access (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;GRANTEE&lt;/B&gt; String =&gt; grantee of access  &lt;LI&gt;&lt;B&gt;PRIVILEGE&lt;/B&gt; String =&gt; name of access (SELECT,        INSERT, UPDATE, REFRENCES, ...)  &lt;LI&gt;&lt;B&gt;IS_GRANTABLE&lt;/B&gt; String =&gt; "YES" if grantee is permitted        to grant to others; "NO" if not; &lt;code&gt;null&lt;/code&gt; if unknown    &lt;/OL&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getColumnPrivileges" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1057</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getColumnPrivileges" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1058</id>
			<description>
                            Retrieves a description of the access rights for each table available  in a catalog.
                             Note that a table privilege applies to one or  more columns in the table. It would be wrong to assume that  this privilege applies to all columns (this may be true for  some systems but is not true for all.)   &lt;P&gt;Only privileges matching the schema and table name  criteria are returned.  They are ordered by TABLE_SCHEM,  TABLE_NAME, and PRIVILEGE.   &lt;P&gt;Each privilige description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name  &lt;LI&gt;&lt;B&gt;GRANTOR&lt;/B&gt; =&gt; grantor of access (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;GRANTEE&lt;/B&gt; String =&gt; grantee of access  &lt;LI&gt;&lt;B&gt;PRIVILEGE&lt;/B&gt; String =&gt; name of access (SELECT,        INSERT, UPDATE, REFRENCES, ...)  &lt;LI&gt;&lt;B&gt;IS_GRANTABLE&lt;/B&gt; String =&gt; "YES" if grantee is permitted        to grant to others; "NO" if not; &lt;code&gt;null&lt;/code&gt; if unknown    &lt;/OL&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTablePrivileges" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1059</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTablePrivileges" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1060</id>
			<description>
                            Retrieves a description of a table's optimal set of columns that  uniquely identifies a row.
                             They are ordered by SCOPE.   &lt;P&gt;Each column description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;SCOPE&lt;/B&gt; short =&gt; actual scope of result       &lt;UL&gt;       &lt;LI&gt; bestRowTemporary - very temporary, while using row       &lt;LI&gt; bestRowTransaction - valid for remainder of current transaction       &lt;LI&gt; bestRowSession - valid for remainder of current session       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; short =&gt; SQL data type from java.sql.Types  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; Data source dependent type name,   for a UDT the type name is fully qualified  &lt;LI&gt;&lt;B&gt;COLUMN_SIZE&lt;/B&gt; int =&gt; precision  &lt;LI&gt;&lt;B&gt;BUFFER_LENGTH&lt;/B&gt; int =&gt; not used  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; short  =&gt; scale  &lt;LI&gt;&lt;B&gt;PSEUDO_COLUMN&lt;/B&gt; short =&gt; is this a pseudo column        like an Oracle ROWID       &lt;UL&gt;       &lt;LI&gt; bestRowUnknown - may or may not be pseudo column       &lt;LI&gt; bestRowNotPseudo - is NOT a pseudo column       &lt;LI&gt; bestRowPseudo - is a pseudo column       &lt;/UL&gt;   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getBestRowIdentifier" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1061</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getBestRowIdentifier" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1062</id>
			<description>
                            Retrieves a description of a table's columns that are automatically  updated when any value in a row is updated.
                              They are  unordered.   &lt;P&gt;Each column description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;SCOPE&lt;/B&gt; short =&gt; is not used  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; short =&gt; SQL data type from &lt;code&gt;java.sql.Types&lt;/code&gt;  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; Data source-dependent type name  &lt;LI&gt;&lt;B&gt;COLUMN_SIZE&lt;/B&gt; int =&gt; precision  &lt;LI&gt;&lt;B&gt;BUFFER_LENGTH&lt;/B&gt; int =&gt; length of column value in bytes  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; short  =&gt; scale  &lt;LI&gt;&lt;B&gt;PSEUDO_COLUMN&lt;/B&gt; short =&gt; whether this is pseudo column        like an Oracle ROWID       &lt;UL&gt;       &lt;LI&gt; versionColumnUnknown - may or may not be pseudo column       &lt;LI&gt; versionColumnNotPseudo - is NOT a pseudo column       &lt;LI&gt; versionColumnPseudo - is a pseudo column       &lt;/UL&gt;   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getVersionColumns" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1063</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getVersionColumns" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1064</id>
			<description>
                            Retrieves a description of the given table's primary key columns.
                              They  are ordered by COLUMN_NAME.   &lt;P&gt;Each primary key column description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name  &lt;LI&gt;&lt;B&gt;KEY_SEQ&lt;/B&gt; short =&gt; sequence number within primary key  &lt;LI&gt;&lt;B&gt;PK_NAME&lt;/B&gt; String =&gt; primary key name (may be &lt;code&gt;null&lt;/code&gt;)   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getPrimaryKeys" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1065</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getPrimaryKeys" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1066</id>
			<description>
                            Retrieves a description of the primary key columns that are  referenced by a table's foreign key columns (the primary keys  imported by a table).
                              They are ordered by PKTABLE_CAT,  PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ.   &lt;P&gt;Each primary key column description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;PKTABLE_CAT&lt;/B&gt; String =&gt; primary key table catalog        being imported (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PKTABLE_SCHEM&lt;/B&gt; String =&gt; primary key table schema       being imported (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PKTABLE_NAME&lt;/B&gt; String =&gt; primary key table name       being imported  &lt;LI&gt;&lt;B&gt;PKCOLUMN_NAME&lt;/B&gt; String =&gt; primary key column name       being imported  &lt;LI&gt;&lt;B&gt;FKTABLE_CAT&lt;/B&gt; String =&gt; foreign key table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;FKTABLE_SCHEM&lt;/B&gt; String =&gt; foreign key table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;FKTABLE_NAME&lt;/B&gt; String =&gt; foreign key table name  &lt;LI&gt;&lt;B&gt;FKCOLUMN_NAME&lt;/B&gt; String =&gt; foreign key column name  &lt;LI&gt;&lt;B&gt;KEY_SEQ&lt;/B&gt; short =&gt; sequence number within a foreign key  &lt;LI&gt;&lt;B&gt;UPDATE_RULE&lt;/B&gt; short =&gt; What happens to a        foreign key when the primary key is updated:       &lt;UL&gt;       &lt;LI&gt; importedNoAction - do not allow update of primary                 key if it has been imported       &lt;LI&gt; importedKeyCascade - change imported key to agree                 with primary key update       &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt;                if its primary key has been updated       &lt;LI&gt; importedKeySetDefault - change imported key to default values                 if its primary key has been updated       &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction                                   (for ODBC 2.x compatibility)       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;DELETE_RULE&lt;/B&gt; short =&gt; What happens to        the foreign key when primary is deleted.       &lt;UL&gt;       &lt;LI&gt; importedKeyNoAction - do not allow delete of primary                 key if it has been imported       &lt;LI&gt; importedKeyCascade - delete rows that import a deleted key       &lt;LI&gt; importedKeySetNull - change imported key to NULL if                 its primary key has been deleted       &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction                                   (for ODBC 2.x compatibility)       &lt;LI&gt; importedKeySetDefault - change imported key to default if                 its primary key has been deleted       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;FK_NAME&lt;/B&gt; String =&gt; foreign key name (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PK_NAME&lt;/B&gt; String =&gt; primary key name (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;DEFERRABILITY&lt;/B&gt; short =&gt; can the evaluation of foreign key        constraints be deferred until commit       &lt;UL&gt;       &lt;LI&gt; importedKeyInitiallyDeferred - see SQL92 for definition       &lt;LI&gt; importedKeyInitiallyImmediate - see SQL92 for definition        &lt;LI&gt; importedKeyNotDeferrable - see SQL92 for definition        &lt;/UL&gt;   &lt;/OL&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getImportedKeys" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1067</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getImportedKeys" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1068</id>
			<description>
                            Retrieves a description of the foreign key columns that reference the  given table's primary key columns (the foreign keys exported by a  table).
                              They are ordered by FKTABLE_CAT, FKTABLE_SCHEM,  FKTABLE_NAME, and KEY_SEQ.   &lt;P&gt;Each foreign key column description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;PKTABLE_CAT&lt;/B&gt; String =&gt; primary key table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PKTABLE_SCHEM&lt;/B&gt; String =&gt; primary key table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PKTABLE_NAME&lt;/B&gt; String =&gt; primary key table name  &lt;LI&gt;&lt;B&gt;PKCOLUMN_NAME&lt;/B&gt; String =&gt; primary key column name  &lt;LI&gt;&lt;B&gt;FKTABLE_CAT&lt;/B&gt; String =&gt; foreign key table catalog (may be &lt;code&gt;null&lt;/code&gt;)       being exported (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;FKTABLE_SCHEM&lt;/B&gt; String =&gt; foreign key table schema (may be &lt;code&gt;null&lt;/code&gt;)       being exported (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;FKTABLE_NAME&lt;/B&gt; String =&gt; foreign key table name       being exported  &lt;LI&gt;&lt;B&gt;FKCOLUMN_NAME&lt;/B&gt; String =&gt; foreign key column name       being exported  &lt;LI&gt;&lt;B&gt;KEY_SEQ&lt;/B&gt; short =&gt; sequence number within foreign key  &lt;LI&gt;&lt;B&gt;UPDATE_RULE&lt;/B&gt; short =&gt; What happens to         foreign key when primary is updated:       &lt;UL&gt;       &lt;LI&gt; importedNoAction - do not allow update of primary                 key if it has been imported       &lt;LI&gt; importedKeyCascade - change imported key to agree                 with primary key update       &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt; if                 its primary key has been updated       &lt;LI&gt; importedKeySetDefault - change imported key to default values                 if its primary key has been updated       &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction                                   (for ODBC 2.x compatibility)       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;DELETE_RULE&lt;/B&gt; short =&gt; What happens to        the foreign key when primary is deleted.       &lt;UL&gt;       &lt;LI&gt; importedKeyNoAction - do not allow delete of primary                 key if it has been imported       &lt;LI&gt; importedKeyCascade - delete rows that import a deleted key       &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt; if                 its primary key has been deleted       &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction                                   (for ODBC 2.x compatibility)       &lt;LI&gt; importedKeySetDefault - change imported key to default if                 its primary key has been deleted       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;FK_NAME&lt;/B&gt; String =&gt; foreign key name (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PK_NAME&lt;/B&gt; String =&gt; primary key name (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;DEFERRABILITY&lt;/B&gt; short =&gt; can the evaluation of foreign key        constraints be deferred until commit       &lt;UL&gt;       &lt;LI&gt; importedKeyInitiallyDeferred - see SQL92 for definition       &lt;LI&gt; importedKeyInitiallyImmediate - see SQL92 for definition        &lt;LI&gt; importedKeyNotDeferrable - see SQL92 for definition        &lt;/UL&gt;   &lt;/OL&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getExportedKeys" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1069</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getExportedKeys" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1070</id>
			<description>
                            Retrieves a description of the foreign key columns in the given foreign key  table that reference the primary key columns of the given primary key  table (describe how one table imports another's key).
                             This  should normally return a single foreign key/primary key pair because  most tables import a foreign key from a table only once.  They  are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and  KEY_SEQ.   &lt;P&gt;Each foreign key column description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;PKTABLE_CAT&lt;/B&gt; String =&gt; primary key table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PKTABLE_SCHEM&lt;/B&gt; String =&gt; primary key table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PKTABLE_NAME&lt;/B&gt; String =&gt; primary key table name  &lt;LI&gt;&lt;B&gt;PKCOLUMN_NAME&lt;/B&gt; String =&gt; primary key column name  &lt;LI&gt;&lt;B&gt;FKTABLE_CAT&lt;/B&gt; String =&gt; foreign key table catalog (may be &lt;code&gt;null&lt;/code&gt;)       being exported (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;FKTABLE_SCHEM&lt;/B&gt; String =&gt; foreign key table schema (may be &lt;code&gt;null&lt;/code&gt;)       being exported (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;FKTABLE_NAME&lt;/B&gt; String =&gt; foreign key table name       being exported  &lt;LI&gt;&lt;B&gt;FKCOLUMN_NAME&lt;/B&gt; String =&gt; foreign key column name       being exported  &lt;LI&gt;&lt;B&gt;KEY_SEQ&lt;/B&gt; short =&gt; sequence number within foreign key  &lt;LI&gt;&lt;B&gt;UPDATE_RULE&lt;/B&gt; short =&gt; What happens to         foreign key when primary is updated:       &lt;UL&gt;       &lt;LI&gt; importedNoAction - do not allow update of primary                 key if it has been imported       &lt;LI&gt; importedKeyCascade - change imported key to agree                 with primary key update       &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt; if                 its primary key has been updated       &lt;LI&gt; importedKeySetDefault - change imported key to default values                 if its primary key has been updated       &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction                                   (for ODBC 2.x compatibility)       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;DELETE_RULE&lt;/B&gt; short =&gt; What happens to        the foreign key when primary is deleted.       &lt;UL&gt;       &lt;LI&gt; importedKeyNoAction - do not allow delete of primary                 key if it has been imported       &lt;LI&gt; importedKeyCascade - delete rows that import a deleted key       &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt; if                 its primary key has been deleted       &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction                                   (for ODBC 2.x compatibility)       &lt;LI&gt; importedKeySetDefault - change imported key to default if                 its primary key has been deleted       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;FK_NAME&lt;/B&gt; String =&gt; foreign key name (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;PK_NAME&lt;/B&gt; String =&gt; primary key name (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;DEFERRABILITY&lt;/B&gt; short =&gt; can the evaluation of foreign key        constraints be deferred until commit       &lt;UL&gt;       &lt;LI&gt; importedKeyInitiallyDeferred - see SQL92 for definition       &lt;LI&gt; importedKeyInitiallyImmediate - see SQL92 for definition        &lt;LI&gt; importedKeyNotDeferrable - see SQL92 for definition        &lt;/UL&gt;   &lt;/OL&gt;
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getCrossReference" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1071</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getCrossReference" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1072</id>
			<description>
                            Retrieves a description of all the standard SQL types supported by  this database.
                             They are ordered by DATA_TYPE and then by how  closely the data type maps to the corresponding JDBC SQL type.   &lt;P&gt;Each type description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; Type name  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; short =&gt; SQL data type from java.sql.Types  &lt;LI&gt;&lt;B&gt;PRECISION&lt;/B&gt; int =&gt; maximum precision  &lt;LI&gt;&lt;B&gt;LITERAL_PREFIX&lt;/B&gt; String =&gt; prefix used to quote a literal        (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;LITERAL_SUFFIX&lt;/B&gt; String =&gt; suffix used to quote a literal        (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;CREATE_PARAMS&lt;/B&gt; String =&gt; parameters used in creating        the type (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; short =&gt; can you use NULL for this type.       &lt;UL&gt;       &lt;LI&gt; typeNoNulls - does not allow NULL values       &lt;LI&gt; typeNullable - allows NULL values       &lt;LI&gt; typeNullableUnknown - nullability unknown       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;CASE_SENSITIVE&lt;/B&gt; boolean=&gt; is it case sensitive.  &lt;LI&gt;&lt;B&gt;SEARCHABLE&lt;/B&gt; short =&gt; can you use "WHERE" based on this type:       &lt;UL&gt;       &lt;LI&gt; typePredNone - No support       &lt;LI&gt; typePredChar - Only supported with WHERE .. LIKE       &lt;LI&gt; typePredBasic - Supported except for WHERE .. LIKE       &lt;LI&gt; typeSearchable - Supported for all WHERE ..       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;UNSIGNED_ATTRIBUTE&lt;/B&gt; boolean =&gt; is it unsigned.  &lt;LI&gt;&lt;B&gt;FIXED_PREC_SCALE&lt;/B&gt; boolean =&gt; can it be a money value.  &lt;LI&gt;&lt;B&gt;AUTO_INCREMENT&lt;/B&gt; boolean =&gt; can it be used for an        auto-increment value.  &lt;LI&gt;&lt;B&gt;LOCAL_TYPE_NAME&lt;/B&gt; String =&gt; localized version of type name        (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;MINIMUM_SCALE&lt;/B&gt; short =&gt; minimum scale supported  &lt;LI&gt;&lt;B&gt;MAXIMUM_SCALE&lt;/B&gt; short =&gt; maximum scale supported  &lt;LI&gt;&lt;B&gt;SQL_DATA_TYPE&lt;/B&gt; int =&gt; unused  &lt;LI&gt;&lt;B&gt;SQL_DATETIME_SUB&lt;/B&gt; int =&gt; unused  &lt;LI&gt;&lt;B&gt;NUM_PREC_RADIX&lt;/B&gt; int =&gt; usually 2 or 10   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTypeInfo" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1073</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getTypeInfo" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1074</id>
			<description>
                            Retrieves a description of the given table's indices and statistics.
                             They are  ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.   &lt;P&gt;Each index column description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name  &lt;LI&gt;&lt;B&gt;NON_UNIQUE&lt;/B&gt; boolean =&gt; Can index values be non-unique.        false when TYPE is tableIndexStatistic  &lt;LI&gt;&lt;B&gt;INDEX_QUALIFIER&lt;/B&gt; String =&gt; index catalog (may be &lt;code&gt;null&lt;/code&gt;);        &lt;code&gt;null&lt;/code&gt; when TYPE is tableIndexStatistic  &lt;LI&gt;&lt;B&gt;INDEX_NAME&lt;/B&gt; String =&gt; index name; &lt;code&gt;null&lt;/code&gt; when TYPE is        tableIndexStatistic  &lt;LI&gt;&lt;B&gt;TYPE&lt;/B&gt; short =&gt; index type:       &lt;UL&gt;       &lt;LI&gt; tableIndexStatistic - this identifies table statistics that are            returned in conjuction with a table's index descriptions       &lt;LI&gt; tableIndexClustered - this is a clustered index       &lt;LI&gt; tableIndexHashed - this is a hashed index       &lt;LI&gt; tableIndexOther - this is some other style of index       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;ORDINAL_POSITION&lt;/B&gt; short =&gt; column sequence number        within index; zero when TYPE is tableIndexStatistic  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name; &lt;code&gt;null&lt;/code&gt; when TYPE is        tableIndexStatistic  &lt;LI&gt;&lt;B&gt;ASC_OR_DESC&lt;/B&gt; String =&gt; column sort sequence, "A" =&gt; ascending,        "D" =&gt; descending, may be &lt;code&gt;null&lt;/code&gt; if sort sequence is not supported;        &lt;code&gt;null&lt;/code&gt; when TYPE is tableIndexStatistic   &lt;LI&gt;&lt;B&gt;CARDINALITY&lt;/B&gt; int =&gt; When TYPE is tableIndexStatistic, then        this is the number of rows in the table; otherwise, it is the        number of unique values in the index.  &lt;LI&gt;&lt;B&gt;PAGES&lt;/B&gt; int =&gt; When TYPE is  tableIndexStatisic then        this is the number of pages used for the table, otherwise it        is the number of pages used for the current index.  &lt;LI&gt;&lt;B&gt;FILTER_CONDITION&lt;/B&gt; String =&gt; Filter condition, if any.         (may be &lt;code&gt;null&lt;/code&gt;)   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getIndexInfo" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1075</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getIndexInfo" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1076</id>
			<description>
                            Retrieves whether this database supports the given result set type.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsResultSetType" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1077</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsResultSetType" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1078</id>
			<description>
                            Retrieves whether this database supports the given concurrency type   in combination with the given result set type.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsResultSetConcurrency" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1079</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsResultSetConcurrency" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1080</id>
			<description>
                            Retrieves whether for the given type of &lt;code&gt;ResultSet&lt;/code&gt; object,  the result set's own updates are visible.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="ownUpdatesAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1081</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="ownUpdatesAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1082</id>
			<description>
                            Retrieves whether a result set's own deletes are visible.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="ownDeletesAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1083</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="ownDeletesAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1084</id>
			<description>
                            Retrieves whether a result set's own inserts are visible.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="ownInsertsAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1085</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="ownInsertsAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1086</id>
			<description>
                            Retrieves whether updates made by others are visible.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="othersUpdatesAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1087</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="othersUpdatesAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1088</id>
			<description>
                            Retrieves whether deletes made by others are visible.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="othersDeletesAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1089</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="othersDeletesAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1090</id>
			<description>
                            Retrieves whether inserts made by others are visible.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="othersInsertsAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1091</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="othersInsertsAreVisible" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1092</id>
			<description>
                            Retrieves whether or not a visible row update can be detected by   calling the method &lt;code&gt;ResultSet.rowUpdated&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="updatesAreDetected" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1093</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="updatesAreDetected" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1094</id>
			<description>
                            Retrieves whether or not a visible row delete can be detected by   calling the method &lt;code&gt;ResultSet.rowDeleted&lt;/code&gt;.
                              If the method  &lt;code&gt;deletesAreDetected&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, it means that  deleted rows are removed from the result set.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="deletesAreDetected" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1095</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="deletesAreDetected" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1096</id>
			<description>
                            Retrieves whether or not a visible row insert can be detected  by calling the method &lt;code&gt;ResultSet.rowInserted&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="insertsAreDetected" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1097</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="insertsAreDetected" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1098</id>
			<description>
                            Retrieves whether this database supports batch updates.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsBatchUpdates" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1099</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsBatchUpdates" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1100</id>
			<description>
                            Retrieves a description of the user-defined types (UDTs) defined   in a particular schema.
                              Schema-specific UDTs may have type   &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, &lt;code&gt;STRUCT&lt;/code&gt;,   or &lt;code&gt;DISTINCT&lt;/code&gt;.   &lt;P&gt;Only types matching the catalog, schema, type name and type    criteria are returned.  They are ordered by DATA_TYPE, TYPE_SCHEM   and TYPE_NAME.  The type name parameter may be a fully-qualified   name.  In this case, the catalog and schemaPattern parameters are  ignored.   &lt;P&gt;Each type description has the following columns:   &lt;OL&gt;  &lt;LI&gt;&lt;B&gt;TYPE_CAT&lt;/B&gt; String =&gt; the type's catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TYPE_SCHEM&lt;/B&gt; String =&gt; type's schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; type name   &lt;LI&gt;&lt;B&gt;CLASS_NAME&lt;/B&gt; String =&gt; Java class name  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; String =&gt; type value defined in java.sql.Types.        One of JAVA_OBJECT, STRUCT, or DISTINCT  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; explanatory comment on the type   &lt;LI&gt;&lt;B&gt;BASE_TYPE&lt;/B&gt; short =&gt; type code of the source type of a       DISTINCT type or the type that implements the user-generated      reference type of the SELF_REFERENCING_COLUMN of a structured      type as defined in java.sql.Types (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE is not      DISTINCT or not STRUCT with REFERENCE_GENERATION = USER_DEFINED)    &lt;/OL&gt;   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If the driver does not support UDTs, an empty  result set is returned.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getUDTs" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1101</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getUDTs" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1102</id>
			<description>
                            Retrieves the connection that produced this metadata object.
                              &lt;P&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getConnection" return-type="java.sql.Connection"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1103</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1104</id>
			<description>
                            Retrieves whether this database supports savepoints.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSavepoints" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1105</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsSavepoints" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1106</id>
			<description>
                            Retrieves whether this database supports named parameters to callable   statements.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsNamedParameters" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1107</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsNamedParameters" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1108</id>
			<description>
                            Retrieves whether it is possible to have multiple &lt;code&gt;ResultSet&lt;/code&gt; objects  returned from a &lt;code&gt;CallableStatement&lt;/code&gt; object  simultaneously.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMultipleOpenResults" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1109</id>
			<description>if a datanase access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsMultipleOpenResults" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1110</id>
			<description>
                            Retrieves whether auto-generated keys can be retrieved after   a statement has been executed.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsGetGeneratedKeys" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1111</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsGetGeneratedKeys" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1112</id>
			<description>
                            Retrieves a description of the user-defined type (UDT) hierarchies defined in a   particular schema in this database.
                             Only the immediate super type/   sub type relationship is modeled.  &lt;P&gt;  Only supertype information for UDTs matching the catalog,   schema, and type name is returned. The type name parameter  may be a fully-qualified name. When the UDT name supplied is a   fully-qualified name, the catalog and schemaPattern parameters are   ignored.   &lt;P&gt;  If a UDT does not have a direct super type, it is not listed here.  A row of the &lt;code&gt;ResultSet&lt;/code&gt; object returned by this method  describes the designated UDT and a direct supertype. A row has the following   columns:   &lt;OL&gt;   &lt;LI&gt;&lt;B&gt;TYPE_CAT&lt;/B&gt; String =&gt; the UDT's catalog (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;TYPE_SCHEM&lt;/B&gt; String =&gt; UDT's schema (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; type name of the UDT   &lt;LI&gt;&lt;B&gt;SUPERTYPE_CAT&lt;/B&gt; String =&gt; the direct super type's catalog                             (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;SUPERTYPE_SCHEM&lt;/B&gt; String =&gt; the direct super type's schema                               (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;SUPERTYPE_NAME&lt;/B&gt; String =&gt; the direct super type's name   &lt;/OL&gt;   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If the driver does not support type hierarchies, an   empty result set is returned.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSuperTypes" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1113</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSuperTypes" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1114</id>
			<description>
                            Retrieves a description of the table hierarchies defined in a particular   schema in this database.
                               &lt;P&gt;Only supertable information for tables matching the catalog, schema  and table name are returned. The table name parameter may be a fully-  qualified name, in which case, the catalog and schemaPattern parameters  are ignored. If a table does not have a super table, it is not listed here.  Supertables have to be defined in the same catalog and schema as the   sub tables. Therefore, the type description does not need to include  this information for the supertable.   &lt;P&gt;Each type description has the following columns:   &lt;OL&gt;   &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; the type's catalog (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; type's schema (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; type name   &lt;LI&gt;&lt;B&gt;SUPERTABLE_NAME&lt;/B&gt; String =&gt; the direct super type's name   &lt;/OL&gt;   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If the driver does not support type hierarchies, an   empty result set is returned.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSuperTables" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1115</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSuperTables" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1116</id>
			<description>
                            Retrieves a description of the given attribute of the given type   for a user-defined type (UDT) that is available in the given schema   and catalog.
                              &lt;P&gt;  Descriptions are returned only for attributes of UDTs matching the   catalog, schema, type, and attribute name criteria. They are ordered by  TYPE_SCHEM, TYPE_NAME and ORDINAL_POSITION. This description  does not contain inherited attributes.  &lt;P&gt;  The &lt;code&gt;ResultSet&lt;/code&gt; object that is returned has the following   columns:  &lt;OL&gt;   &lt;LI&gt;&lt;B&gt;TYPE_CAT&lt;/B&gt; String =&gt; type catalog (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TYPE_SCHEM&lt;/B&gt; String =&gt; type schema (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; type name  &lt;LI&gt;&lt;B&gt;ATTR_NAME&lt;/B&gt; String =&gt; attribute name  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; short =&gt; attribute type SQL type from java.sql.Types  &lt;LI&gt;&lt;B&gt;ATTR_TYPE_NAME&lt;/B&gt; String =&gt; Data source dependent type name.   For a UDT, the type name is fully qualified. For a REF, the type name is    fully qualified and represents the target type of the reference type.  &lt;LI&gt;&lt;B&gt;ATTR_SIZE&lt;/B&gt; int =&gt; column size.  For char or date      types this is the maximum number of characters; for numeric or      decimal types this is precision.  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; int =&gt; the number of fractional digits  &lt;LI&gt;&lt;B&gt;NUM_PREC_RADIX&lt;/B&gt; int =&gt; Radix (typically either 10 or 2)  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; int =&gt; whether NULL is allowed       &lt;UL&gt;       &lt;LI&gt; attributeNoNulls - might not allow NULL values       &lt;LI&gt; attributeNullable - definitely allows NULL values       &lt;LI&gt; attributeNullableUnknown - nullability unknown       &lt;/UL&gt;  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; comment describing column (may be &lt;code&gt;null&lt;/code&gt;)   &lt;LI&gt;&lt;B&gt;ATTR_DEF&lt;/B&gt; String =&gt; default value (may be &lt;code&gt;null&lt;/code&gt;)  &lt;LI&gt;&lt;B&gt;SQL_DATA_TYPE&lt;/B&gt; int =&gt; unused  &lt;LI&gt;&lt;B&gt;SQL_DATETIME_SUB&lt;/B&gt; int =&gt; unused  &lt;LI&gt;&lt;B&gt;CHAR_OCTET_LENGTH&lt;/B&gt; int =&gt; for char types the         maximum number of bytes in the column  &lt;LI&gt;&lt;B&gt;ORDINAL_POSITION&lt;/B&gt; int =&gt; index of column in table        (starting at 1)  &lt;LI&gt;&lt;B&gt;IS_NULLABLE&lt;/B&gt; String =&gt; "NO" means column definitely        does not allow NULL values; "YES" means the column might        allow NULL values.  An empty string means unknown.   &lt;LI&gt;&lt;B&gt;SCOPE_CATALOG&lt;/B&gt; String =&gt; catalog of table that is the       scope of a reference attribute (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE isn't REF)   &lt;LI&gt;&lt;B&gt;SCOPE_SCHEMA&lt;/B&gt; String =&gt; schema of table that is the        scope of a reference attribute (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE isn't REF)   &lt;LI&gt;&lt;B&gt;SCOPE_TABLE&lt;/B&gt; String =&gt; table name that is the scope of a        reference attribute (&lt;code&gt;null&lt;/code&gt; if the DATA_TYPE isn't REF)  &lt;LI&gt;&lt;B&gt;SOURCE_DATA_TYPE&lt;/B&gt; short =&gt; source type of a distinct type or user-generated       Ref type,SQL type from java.sql.Types (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE        isn't DISTINCT or user-generated REF)   &lt;/OL&gt;
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getAttributes" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1117</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getAttributes" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1118</id>
			<description>
                            Retrieves whether this database supports the given result set holdability.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsResultSetHoldability" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1119</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsResultSetHoldability" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1120</id>
			<description>
                            Retrieves the default holdability of this &lt;code&gt;ResultSet&lt;/code&gt;  object.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getResultSetHoldability" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1121</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getResultSetHoldability" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1122</id>
			<description>
                            Retrieves the major version number of the underlying database.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDatabaseMajorVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1123</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDatabaseMajorVersion" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1124</id>
			<description>
                            Retrieves the minor version number of the underlying database.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDatabaseMinorVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1125</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getDatabaseMinorVersion" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1126</id>
			<description>
                            Retrieves the major JDBC version number for this  driver.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getJDBCMajorVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1127</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getJDBCMajorVersion" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1128</id>
			<description>
                            Retrieves the minor JDBC version number for this  driver.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getJDBCMinorVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1129</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getJDBCMinorVersion" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1130</id>
			<description>
                            Indicates whether the SQLSTATEs returned by &lt;code&gt;SQLException.getSQLState&lt;/code&gt;  is X/Open (now known as Open Group) SQL CLI or SQL99.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSQLStateType" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1131</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="getSQLStateType" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1132</id>
			<description>
                            Indicates whether updates made to a LOB are made on a copy or directly   to the LOB.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="locatorsUpdateCopy" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1133</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="locatorsUpdateCopy" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1134</id>
			<description>
                            Retrieves weather this database supports statement pooling.
                        </description>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsStatementPooling" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1135</id>
			<description/>
			<package>java.sql</package>
			<class-interface>DatabaseMetaData</class-interface>
			<method name="supportsStatementPooling" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1136</id>
			<description>
                            A constant indicating that transactions are not supported.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<field name="TRANSACTION_NONE" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1137</id>
			<description>
                            A constant indicating that  dirty reads, non-repeatable reads and phantom reads can occur.
                              This level allows a row changed by one transaction to be read  by another transaction before any changes in that row have been  committed (a "dirty read").  If any of the changes are rolled back,   the second transaction will have retrieved an invalid row.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<field name="TRANSACTION_READ_UNCOMMITTED" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1138</id>
			<description>
                            A constant indicating that  dirty reads are prevented; non-repeatable reads and phantom  reads can occur.
                              This level only prohibits a transaction  from reading a row with uncommitted changes in it.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<field name="TRANSACTION_READ_COMMITTED" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1139</id>
			<description>
                            A constant indicating that  dirty reads and non-repeatable reads are prevented; phantom  reads can occur.
                              This level prohibits a transaction from  reading a row with uncommitted changes in it, and it also  prohibits the situation where one transaction reads a row,  a second transaction alters the row, and the first transaction  rereads the row, getting different values the second time  (a "non-repeatable read").
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<field name="TRANSACTION_REPEATABLE_READ" type="public static final"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1140</id>
			<description>
                            A constant indicating that  dirty reads, non-repeatable reads and phantom reads are prevented.
                              This level includes the prohibitions in  &lt;code&gt;TRANSACTION_REPEATABLE_READ&lt;/code&gt; and further prohibits the   situation where one transaction reads all rows that satisfy  a &lt;code&gt;WHERE&lt;/code&gt; condition, a second transaction inserts a row that  satisfies that &lt;code&gt;WHERE&lt;/code&gt; condition, and the first transaction  rereads for the same condition, retrieving the additional  "phantom" row in the second read.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<field name="TRANSACTION_SERIALIZABLE" type="public static final"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1141</id>
			<description>
                            Creates a &lt;code&gt;Statement&lt;/code&gt; object for sending  SQL statements to the database.
                              SQL statements without parameters are normally  executed using &lt;code&gt;Statement&lt;/code&gt; objects. If the same SQL statement   is executed many times, it may be more efficient to use a   &lt;code&gt;PreparedStatement&lt;/code&gt; object.  &lt;P&gt;  Result sets created using the returned &lt;code&gt;Statement&lt;/code&gt;  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="createStatement" return-type="java.sql.Statement"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1142</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="createStatement" return-type="java.sql.Statement">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1143</id>
			<description>
                            Creates a &lt;code&gt;PreparedStatement&lt;/code&gt; object for sending  parameterized SQL statements to the database.
                              &lt;P&gt;  A SQL statement with or without IN parameters can be  pre-compiled and stored in a &lt;code&gt;PreparedStatement&lt;/code&gt; object. This  object can then be used to efficiently execute this statement  multiple times.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling  parametric SQL statements that benefit from precompilation. If  the driver supports precompilation,  the method &lt;code&gt;prepareStatement&lt;/code&gt; will send  the statement to the database for precompilation. Some drivers  may not support precompilation. In this case, the statement may  not be sent to the database until the &lt;code&gt;PreparedStatement&lt;/code&gt;   object is executed.  This has no direct effect on users; however, it does  affect which methods throw certain &lt;code&gt;SQLException&lt;/code&gt; objects.  &lt;P&gt;  Result sets created using the returned &lt;code&gt;PreparedStatement&lt;/code&gt;  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1144</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1145</id>
			<description>
                            Creates a &lt;code&gt;CallableStatement&lt;/code&gt; object for calling  database stored procedures.
                              The &lt;code&gt;CallableStatement&lt;/code&gt; object provides  methods for setting up its IN and OUT parameters, and  methods for executing the call to a stored procedure.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling stored  procedure call statements. Some drivers may send the call  statement to the database when the method &lt;code&gt;prepareCall&lt;/code&gt;  is done; others  may wait until the &lt;code&gt;CallableStatement&lt;/code&gt; object  is executed. This has no  direct effect on users; however, it does affect which method  throws certain SQLExceptions.  &lt;P&gt;  Result sets created using the returned &lt;code&gt;CallableStatement&lt;/code&gt;  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareCall" return-type="java.sql.CallableStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1146</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareCall" return-type="java.sql.CallableStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1147</id>
			<description>
                            Converts the given SQL statement into the system's native SQL grammar.
                              A driver may convert the JDBC SQL grammar into its system's  native SQL grammar prior to sending it. This method returns the  native form of the statement that the driver would have sent.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="nativeSQL" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1148</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="nativeSQL" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1149</id>
			<description>
                            Sets this connection's auto-commit mode to the given state.
                              If a connection is in auto-commit mode, then all its SQL  statements will be executed and committed as individual  transactions.  Otherwise, its SQL statements are grouped into  transactions that are terminated by a call to either  the method &lt;code&gt;commit&lt;/code&gt; or the method &lt;code&gt;rollback&lt;/code&gt;.  By default, new connections are in auto-commit  mode.  &lt;P&gt;  The commit occurs when the statement completes or the next  execute occurs, whichever comes first. In the case of  statements returning a &lt;code&gt;ResultSet&lt;/code&gt; object,   the statement completes when the last row of the   &lt;code&gt;ResultSet&lt;/code&gt; object has been retrieved or the  &lt;code&gt;ResultSet&lt;/code&gt; object has been closed. In advanced cases, a single  statement may return multiple results as well as output  parameter values. In these cases, the commit occurs when all results and  output parameter values have been retrieved.  &lt;P&gt;  &lt;B&gt;NOTE:&lt;/B&gt;  If this method is called during a transaction, the  transaction is committed.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setAutoCommit" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1150</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setAutoCommit" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1151</id>
			<description>
                            Retrieves the current auto-commit mode for this &lt;code&gt;Connection&lt;/code&gt;  object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getAutoCommit" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1152</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getAutoCommit" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1153</id>
			<description>
                            Makes all changes made since the previous  commit/rollback permanent and releases any database locks  currently held by this &lt;code&gt;Connection&lt;/code&gt; object.
                               This method should be  used only when auto-commit mode has been disabled.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="commit" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1154</id>
			<description>if a database access error occurs or this             &lt;code&gt;Connection&lt;/code&gt; object is in auto-commit mode</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="commit" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1155</id>
			<description>
                            Undoes all changes made in the current transaction  and releases any database locks currently held  by this &lt;code&gt;Connection&lt;/code&gt; object.
                             This method should be   used only when auto-commit mode has been disabled.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="rollback" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1156</id>
			<description>if a database access error occurs or this             &lt;code&gt;Connection&lt;/code&gt; object is in auto-commit mode</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="rollback" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1157</id>
			<description>
                            Releases this &lt;code&gt;Connection&lt;/code&gt; object's database and JDBC resources  immediately instead of waiting for them to be automatically released.
                              &lt;P&gt;  Calling the method &lt;code&gt;close&lt;/code&gt; on a &lt;code&gt;Connection&lt;/code&gt;  object that is already closed is a no-op.  &lt;P&gt;  &lt;B&gt;Note:&lt;/B&gt; A &lt;code&gt;Connection&lt;/code&gt; object is automatically   closed when it is garbage collected. Certain fatal errors also   close a &lt;code&gt;Connection&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="close" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1158</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="close" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1159</id>
			<description>
                            Retrieves whether this &lt;code&gt;Connection&lt;/code&gt; object has been  closed.
                              A connection is closed if the method &lt;code&gt;close&lt;/code&gt;  has been called on it or if certain fatal errors have occurred.  This method is guaranteed to return &lt;code&gt;true&lt;/code&gt; only when  it is called after the method &lt;code&gt;Connection.close&lt;/code&gt; has  been called.  &lt;P&gt;  This method generally cannot be called to determine whether a  connection to a database is valid or invalid.  A typical client  can determine that a connection is invalid by catching any  exceptions that might be thrown when an operation is attempted.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="isClosed" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1160</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="isClosed" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1161</id>
			<description>
                            Retrieves a &lt;code&gt;DatabaseMetaData&lt;/code&gt; object that contains  metadata about the database to which this  &lt;code&gt;Connection&lt;/code&gt; object represents a connection.
                              The metadata includes information about the database's  tables, its supported SQL grammar, its stored  procedures, the capabilities of this connection, and so on.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getMetaData" return-type="java.sql.DatabaseMetaData"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1162</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getMetaData" return-type="java.sql.DatabaseMetaData">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1163</id>
			<description>
                            Puts this connection in read-only mode as a hint to the driver to enable   database optimizations.
                               &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This method cannot be called during a transaction.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setReadOnly" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1164</id>
			<description>if a database access error occurs or this             method is called during a transaction</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setReadOnly" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1165</id>
			<description>
                            Retrieves whether this &lt;code&gt;Connection&lt;/code&gt;   object is in read-only mode.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="isReadOnly" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1166</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="isReadOnly" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1167</id>
			<description>
                            Sets the given catalog name in order to select    a subspace of this &lt;code&gt;Connection&lt;/code&gt; object's database   in which to work.
                              &lt;P&gt;  If the driver does not support catalogs, it will  silently ignore this request.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setCatalog" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1168</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setCatalog" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1169</id>
			<description>
                            Retrieves this &lt;code&gt;Connection&lt;/code&gt; object's current catalog name.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getCatalog" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1170</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getCatalog" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1171</id>
			<description>
                            Attempts to change the transaction isolation level for this  &lt;code&gt;Connection&lt;/code&gt; object to the one given.
                              The constants defined in the interface &lt;code&gt;Connection&lt;/code&gt;  are the possible transaction isolation levels.  &lt;P&gt;  &lt;B&gt;Note:&lt;/B&gt; If this method is called during a transaction, the result  is implementation-defined.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setTransactionIsolation" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1172</id>
			<description>if a database access error occurs             or the given parameter is not one of the &lt;code&gt;Connection&lt;/code&gt;             constants</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setTransactionIsolation" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1173</id>
			<description>
                            Retrieves this &lt;code&gt;Connection&lt;/code&gt; object's current   transaction isolation level.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getTransactionIsolation" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1174</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getTransactionIsolation" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1175</id>
			<description>
                            Retrieves the first warning reported by calls on this   &lt;code&gt;Connection&lt;/code&gt; object.
                              If there is more than one  warning, subsequent warnings will be chained to the first one  and can be retrieved by calling the method  &lt;code&gt;SQLWarning.getNextWarning&lt;/code&gt; on the warning   that was retrieved previously.  &lt;P&gt;  This method may not be  called on a closed connection; doing so will cause an  &lt;code&gt;SQLException&lt;/code&gt; to be thrown.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Subsequent warnings will be chained to this  SQLWarning.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getWarnings" return-type="java.sql.SQLWarning"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1176</id>
			<description>if a database access error occurs or             this method is called on a closed connection</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getWarnings" return-type="java.sql.SQLWarning">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1177</id>
			<description>
                            Clears all warnings reported for this &lt;code&gt;Connection&lt;/code&gt; object.
                               After a call to this method, the method &lt;code&gt;getWarnings&lt;/code&gt;  returns &lt;code&gt;null&lt;/code&gt; until a new warning is  reported for this &lt;code&gt;Connection&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="clearWarnings" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1178</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="clearWarnings" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1179</id>
			<description>
                            Creates a &lt;code&gt;Statement&lt;/code&gt; object that will generate  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type and concurrency.
                              This method is the same as the &lt;code&gt;createStatement&lt;/code&gt; method  above, but it allows the default result set  type and concurrency to be overridden.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="createStatement" return-type="java.sql.Statement">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1180</id>
			<description>if a database access error occurs          or the given parameters are not &lt;code&gt;ResultSet&lt;/code&gt;           constants indicating type and concurrency</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="createStatement" return-type="java.sql.Statement">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1181</id>
			<description>
                            Creates a &lt;code&gt;PreparedStatement&lt;/code&gt; object that will generate  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type and concurrency.
                              This method is the same as the &lt;code&gt;prepareStatement&lt;/code&gt; method  above, but it allows the default result set  type and concurrency to be overridden.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1182</id>
			<description>if a database access error occurs          or the given parameters are not &lt;code&gt;ResultSet&lt;/code&gt;           constants indicating type and concurrency</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1183</id>
			<description>
                            Creates a &lt;code&gt;CallableStatement&lt;/code&gt; object that will generate  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type and concurrency.
                              This method is the same as the &lt;code&gt;prepareCall&lt;/code&gt; method  above, but it allows the default result set  type and concurrency to be overridden.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareCall" return-type="java.sql.CallableStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1184</id>
			<description>if a database access error occurs          or the given parameters are not &lt;code&gt;ResultSet&lt;/code&gt;           constants indicating type and concurrency</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareCall" return-type="java.sql.CallableStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1185</id>
			<description>
                            Retrieves the &lt;code&gt;Map&lt;/code&gt; object associated with this   &lt;code&gt;Connection&lt;/code&gt; object.
                              Unless the application has added an entry, the type map returned   will be empty.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getTypeMap" return-type="java.util.Map"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1186</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getTypeMap" return-type="java.util.Map">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1187</id>
			<description>
                            Installs the given &lt;code&gt;TypeMap&lt;/code&gt; object as the type map for  this &lt;code&gt;Connection&lt;/code&gt; object.
                              The type map will be used for the  custom mapping of SQL structured types and distinct types.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setTypeMap" return-type="void">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1188</id>
			<description>if a database access error occurs or         the given parameter is not a &lt;code&gt;java.util.Map&lt;/code&gt;          object</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setTypeMap" return-type="void">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1189</id>
			<description>
                            Changes the holdability of &lt;code&gt;ResultSet&lt;/code&gt; objects  created using this &lt;code&gt;Connection&lt;/code&gt; object to the given  holdability.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setHoldability" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1190</id>
			<description>if a database access occurs, the given parameter          is not a &lt;code&gt;ResultSet&lt;/code&gt; constant indicating holdability,          or the given holdability is not supported</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setHoldability" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1191</id>
			<description>
                            Retrieves the current holdability of &lt;code&gt;ResultSet&lt;/code&gt; objects  created using this &lt;code&gt;Connection&lt;/code&gt; object.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getHoldability" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1192</id>
			<description>if a database access occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="getHoldability" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1193</id>
			<description>
                            Creates an unnamed savepoint in the current transaction and   returns the new &lt;code&gt;Savepoint&lt;/code&gt; object that represents it.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setSavepoint" return-type="java.sql.Savepoint"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1194</id>
			<description>if a database access error occurs             or this &lt;code&gt;Connection&lt;/code&gt; object is currently in             auto-commit mode</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setSavepoint" return-type="java.sql.Savepoint">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1195</id>
			<description>
                            Creates a savepoint with the given name in the current transaction  and returns the new &lt;code&gt;Savepoint&lt;/code&gt; object that represents it.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setSavepoint" return-type="java.sql.Savepoint">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1196</id>
			<description>if a database access error occurs             or this &lt;code&gt;Connection&lt;/code&gt; object is currently in             auto-commit mode</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="setSavepoint" return-type="java.sql.Savepoint">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1197</id>
			<description>
                            Undoes all changes made after the given &lt;code&gt;Savepoint&lt;/code&gt; object  was set.
                               &lt;P&gt;  This method should be used only when auto-commit has been disabled.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="rollback" return-type="void">
				<parameters>
					<parameter>java.sql.Savepoint</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1198</id>
			<description>if a database access error occurs,             the &lt;code&gt;Savepoint&lt;/code&gt; object is no longer valid,             or this &lt;code&gt;Connection&lt;/code&gt; object is currently in             auto-commit mode</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="rollback" return-type="void">
				<parameters>
					<parameter>java.sql.Savepoint</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1199</id>
			<description>
                            Removes the given &lt;code&gt;Savepoint&lt;/code&gt; object from the current   transaction.
                             Any reference to the savepoint after it have been removed   will cause an &lt;code&gt;SQLException&lt;/code&gt; to be thrown.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="releaseSavepoint" return-type="void">
				<parameters>
					<parameter>java.sql.Savepoint</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1200</id>
			<description>if a database access error occurs or             the given &lt;code&gt;Savepoint&lt;/code&gt; object is not a valid              savepoint in the current transaction</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="releaseSavepoint" return-type="void">
				<parameters>
					<parameter>java.sql.Savepoint</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1201</id>
			<description>
                            Creates a &lt;code&gt;Statement&lt;/code&gt; object that will generate  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type, concurrency,  and holdability.
                              This method is the same as the &lt;code&gt;createStatement&lt;/code&gt; method  above, but it allows the default result set  type, concurrency, and holdability to be overridden.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="createStatement" return-type="java.sql.Statement">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1202</id>
			<description>if a database access error occurs             or the given parameters are not &lt;code&gt;ResultSet&lt;/code&gt;              constants indicating type, concurrency, and holdability</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="createStatement" return-type="java.sql.Statement">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1203</id>
			<description>
                            Creates a &lt;code&gt;PreparedStatement&lt;/code&gt; object that will generate  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type, concurrency,  and holdability.
                              &lt;P&gt;  This method is the same as the &lt;code&gt;prepareStatement&lt;/code&gt; method  above, but it allows the default result set  type, concurrency, and holdability to be overridden.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1204</id>
			<description>if a database access error occurs             or the given parameters are not &lt;code&gt;ResultSet&lt;/code&gt;              constants indicating type, concurrency, and holdability</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1205</id>
			<description>
                            Creates a &lt;code&gt;CallableStatement&lt;/code&gt; object that will generate  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type and concurrency.
                              This method is the same as the &lt;code&gt;prepareCall&lt;/code&gt; method  above, but it allows the default result set  type, result set concurrency type and holdability to be overridden.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareCall" return-type="java.sql.CallableStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1206</id>
			<description>if a database access error occurs             or the given parameters are not &lt;code&gt;ResultSet&lt;/code&gt;              constants indicating type, concurrency, and holdability</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareCall" return-type="java.sql.CallableStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1207</id>
			<description>
                            Creates a default &lt;code&gt;PreparedStatement&lt;/code&gt; object that has  the capability to retrieve auto-generated keys.
                             The given constant  tells the driver whether it should make auto-generated keys  available for retrieval.  This parameter is ignored if the SQL   statement is not an &lt;code&gt;INSERT&lt;/code&gt; statement.  &lt;P&gt;  &lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling  parametric SQL statements that benefit from precompilation. If  the driver supports precompilation,  the method &lt;code&gt;prepareStatement&lt;/code&gt; will send  the statement to the database for precompilation. Some drivers  may not support precompilation. In this case, the statement may  not be sent to the database until the &lt;code&gt;PreparedStatement&lt;/code&gt;   object is executed.  This has no direct effect on users; however, it does  affect which methods throw certain SQLExceptions.  &lt;P&gt;  Result sets created using the returned &lt;code&gt;PreparedStatement&lt;/code&gt;  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1208</id>
			<description>if a database access error occurs          or the given parameter is not a &lt;code&gt;Statement&lt;/code&gt;          constant indicating whether auto-generated keys should be          returned</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1209</id>
			<description>
                            Creates a default &lt;code&gt;PreparedStatement&lt;/code&gt; object capable  of returning the auto-generated keys designated by the given array.
                              This array contains the indexes of the columns in the target  table that contain the auto-generated keys that should be made  available. This array is ignored if the SQL   statement is not an &lt;code&gt;INSERT&lt;/code&gt; statement.  &lt;P&gt;  An SQL statement with or without IN parameters can be  pre-compiled and stored in a &lt;code&gt;PreparedStatement&lt;/code&gt; object. This  object can then be used to efficiently execute this statement  multiple times.  &lt;P&gt;  &lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling  parametric SQL statements that benefit from precompilation. If  the driver supports precompilation,  the method &lt;code&gt;prepareStatement&lt;/code&gt; will send  the statement to the database for precompilation. Some drivers  may not support precompilation. In this case, the statement may  not be sent to the database until the &lt;code&gt;PreparedStatement&lt;/code&gt;   object is executed.  This has no direct effect on users; however, it does  affect which methods throw certain SQLExceptions.  &lt;P&gt;  Result sets created using the returned &lt;code&gt;PreparedStatement&lt;/code&gt;  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1210</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1211</id>
			<description>
                            Creates a default &lt;code&gt;PreparedStatement&lt;/code&gt; object capable  of returning the auto-generated keys designated by the given array.
                              This array contains the names of the columns in the target  table that contain the auto-generated keys that should be returned.  This array is ignored if the SQL   statement is not an &lt;code&gt;INSERT&lt;/code&gt; statement.  &lt;P&gt;  An SQL statement with or without IN parameters can be  pre-compiled and stored in a &lt;code&gt;PreparedStatement&lt;/code&gt; object. This  object can then be used to efficiently execute this statement  multiple times.  &lt;P&gt;  &lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling  parametric SQL statements that benefit from precompilation. If  the driver supports precompilation,  the method &lt;code&gt;prepareStatement&lt;/code&gt; will send  the statement to the database for precompilation. Some drivers  may not support precompilation. In this case, the statement may  not be sent to the database until the &lt;code&gt;PreparedStatement&lt;/code&gt;   object is executed.  This has no direct effect on users; however, it does  affect which methods throw certain SQLExceptions.  &lt;P&gt;  Result sets created using the returned &lt;code&gt;PreparedStatement&lt;/code&gt;  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1212</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>Connection</class-interface>
			<method name="prepareStatement" return-type="java.sql.PreparedStatement">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1213</id>
			<description>
                            Retrieves the number of characters   in the &lt;code&gt;CLOB&lt;/code&gt; value  designated by this &lt;code&gt;Clob&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="length" return-type="long"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1214</id>
			<description>if there is an error accessing the             length of the &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="length" return-type="long">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1215</id>
			<description>
                            Retrieves a copy of the specified substring   in the &lt;code&gt;CLOB&lt;/code&gt; value  designated by this &lt;code&gt;Clob&lt;/code&gt; object.
                              The substring begins at position  &lt;code&gt;pos&lt;/code&gt; and has up to &lt;code&gt;length&lt;/code&gt; consecutive  characters.
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="getSubString" return-type="java.lang.String">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1216</id>
			<description>if there is an error accessing the             &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="getSubString" return-type="java.lang.String">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1217</id>
			<description>
                            Retrieves the &lt;code&gt;CLOB&lt;/code&gt; value designated by this &lt;code&gt;Clob&lt;/code&gt;  object as a &lt;code&gt;java.io.Reader&lt;/code&gt; object (or as a stream of  characters).
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="getCharacterStream" return-type="java.io.Reader"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1218</id>
			<description>if there is an error accessing the              &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="getCharacterStream" return-type="java.io.Reader">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1219</id>
			<description>
                            Retrieves the &lt;code&gt;CLOB&lt;/code&gt; value designated by this &lt;code&gt;Clob&lt;/code&gt;  object as an ascii stream.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="getAsciiStream" return-type="java.io.InputStream"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1220</id>
			<description>if there is an error accessing the              &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="getAsciiStream" return-type="java.io.InputStream">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1221</id>
			<description>
                            Retrieves the character position at which the specified substring   &lt;code&gt;searchstr&lt;/code&gt; appears in the SQL &lt;code&gt;CLOB&lt;/code&gt; value  represented by this &lt;code&gt;Clob&lt;/code&gt; object.
                              The search   begins at position &lt;code&gt;start&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="position" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1222</id>
			<description>if there is an error accessing the                    &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="position" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1223</id>
			<description>
                            Retrieves the character position at which the specified    &lt;code&gt;Clob&lt;/code&gt; object &lt;code&gt;searchstr&lt;/code&gt; appears in this   &lt;code&gt;Clob&lt;/code&gt; object.
                              The search begins at position   &lt;code&gt;start&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="position" return-type="long">
				<parameters>
					<parameter>java.sql.Clob</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1224</id>
			<description>if there is an error accessing the              &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="position" return-type="long">
				<parameters>
					<parameter>java.sql.Clob</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1225</id>
			<description>
                            Writes the given Java &lt;code&gt;String&lt;/code&gt; to the &lt;code&gt;CLOB&lt;/code&gt;  value that this &lt;code&gt;Clob&lt;/code&gt; object designates at the position   &lt;code&gt;pos&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="setString" return-type="int">
				<parameters>
					<parameter>long</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1226</id>
			<description>if there is an error accessing the              &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="setString" return-type="int">
				<parameters>
					<parameter>long</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1227</id>
			<description>
                            Writes &lt;code&gt;len&lt;/code&gt; characters of &lt;code&gt;str&lt;/code&gt;, starting   at character &lt;code&gt;offset&lt;/code&gt;, to the &lt;code&gt;CLOB&lt;/code&gt; value  that this &lt;code&gt;Clob&lt;/code&gt; represents.
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="setString" return-type="int">
				<parameters>
					<parameter>long</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1228</id>
			<description>if there is an error accessing the              &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="setString" return-type="int">
				<parameters>
					<parameter>long</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1229</id>
			<description>
                            Retrieves a stream to be used to write Ascii characters to the  &lt;code&gt;CLOB&lt;/code&gt; value that this &lt;code&gt;Clob&lt;/code&gt; object represents,   starting at position &lt;code&gt;pos&lt;/code&gt;.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="setAsciiStream" return-type="java.io.OutputStream">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1230</id>
			<description>if there is an error accessing the              &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="setAsciiStream" return-type="java.io.OutputStream">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1231</id>
			<description>
                            Retrieves a stream to be used to write a stream of Unicode characters   to the &lt;code&gt;CLOB&lt;/code&gt; value that this &lt;code&gt;Clob&lt;/code&gt; object  represents, at position &lt;code&gt;pos&lt;/code&gt;.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="setCharacterStream" return-type="java.io.Writer">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1232</id>
			<description>if there is an error accessing the              &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="setCharacterStream" return-type="java.io.Writer">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1233</id>
			<description>
                            Truncates the &lt;code&gt;CLOB&lt;/code&gt; value that this &lt;code&gt;Clob&lt;/code&gt;   designates to have a length of &lt;code&gt;len&lt;/code&gt;   characters.
                        </description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="truncate" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1234</id>
			<description>if there is an error accessing the              &lt;code&gt;CLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Clob</class-interface>
			<method name="truncate" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1235</id>
			<description>
                            Registers the OUT parameter in ordinal position   &lt;code&gt;parameterIndex&lt;/code&gt; to the JDBC type   &lt;code&gt;sqlType&lt;/code&gt;.
                            
                              All OUT parameters must be registered  before a stored procedure is executed.  &lt;p&gt;  The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT  parameter determines the Java type that must be used  in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.  &lt;p&gt;  If the JDBC type expected to be returned to this output parameter  is specific to this particular database, &lt;code&gt;sqlType&lt;/code&gt;  should be &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;.  The method    retrieves the value.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1236</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1237</id>
			<description>
                            Registers the parameter in ordinal position  &lt;code&gt;parameterIndex&lt;/code&gt; to be of JDBC type  &lt;code&gt;sqlType&lt;/code&gt;.
                              This method must be called  before a stored procedure is executed.  &lt;p&gt;  The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT  parameter determines the Java type that must be used  in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.  &lt;p&gt;  This version of &lt;code&gt;registerOutParameter&lt;/code&gt; should be  used when the parameter is of JDBC type &lt;code&gt;NUMERIC&lt;/code&gt;  or &lt;code&gt;DECIMAL&lt;/code&gt;.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="true" status="active" testable="true">
			<id>1238</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1239</id>
			<description>
                            Retrieves whether the last OUT parameter read had the value of  SQL &lt;code&gt;NULL&lt;/code&gt;.
                              Note that this method should be called only after  calling a getter method; otherwise, there is no value to use in   determining whether it is &lt;code&gt;null&lt;/code&gt; or not.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="wasNull" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1240</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="wasNull" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1241</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;CHAR&lt;/code&gt;,   &lt;code&gt;VARCHAR&lt;/code&gt;, or &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter as a   &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                              &lt;p&gt;  For the fixed-length type JDBC &lt;code&gt;CHAR&lt;/code&gt;,  the &lt;code&gt;String&lt;/code&gt; object  returned has exactly the same value the JDBC  &lt;code&gt;CHAR&lt;/code&gt; value had in the  database, including any padding added by the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getString" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1242</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getString" return-type="java.lang.String">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1243</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;BIT&lt;/code&gt; parameter as a   &lt;code&gt;boolean&lt;/code&gt; in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBoolean" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1244</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBoolean" return-type="boolean">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1245</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;TINYINT&lt;/code&gt; parameter   as a &lt;code&gt;byte&lt;/code&gt; in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getByte" return-type="byte">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1246</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getByte" return-type="byte">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1247</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;SMALLINT&lt;/code&gt; parameter   as a &lt;code&gt;short&lt;/code&gt; in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getShort" return-type="short">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1248</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getShort" return-type="short">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1249</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;INTEGER&lt;/code&gt; parameter   as an &lt;code&gt;int&lt;/code&gt; in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getInt" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1250</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getInt" return-type="int">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1251</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;BIGINT&lt;/code&gt; parameter   as a &lt;code&gt;long&lt;/code&gt; in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getLong" return-type="long">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1252</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getLong" return-type="long">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1253</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;FLOAT&lt;/code&gt; parameter   as a &lt;code&gt;float&lt;/code&gt; in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getFloat" return-type="float">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1254</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getFloat" return-type="float">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1255</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;DOUBLE&lt;/code&gt; parameter as a &lt;code&gt;double&lt;/code&gt;  in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDouble" return-type="double">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1256</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDouble" return-type="double">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>1257</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;NUMERIC&lt;/code&gt; parameter as a   &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object with &lt;i&gt;scale&lt;/i&gt; digits to  the right of the decimal point.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="deprecated" testable="true">
			<id>1258</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1259</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;BINARY&lt;/code&gt; or   &lt;code&gt;VARBINARY&lt;/code&gt; parameter as an array of &lt;code&gt;byte&lt;/code&gt;   values in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1260</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1261</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;DATE&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Date&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1262</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1263</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;TIME&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Time&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1264</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1265</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;TIMESTAMP&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1266</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1267</id>
			<description>
                            Retrieves the value of the designated parameter as an &lt;code&gt;Object&lt;/code&gt;   in the Java programming language.
                             If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,  the driver returns a Java &lt;code&gt;null&lt;/code&gt;.  &lt;p&gt;  This method returns a Java object whose type corresponds to the JDBC  type that was registered for this parameter using the method  &lt;code&gt;registerOutParameter&lt;/code&gt;.  By registering the target JDBC  type as &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;, this method can be used  to read database-specific abstract data types.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1268</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1269</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;NUMERIC&lt;/code&gt; parameter as a   &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object with as many digits to the  right of the decimal point as the value contains.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1270</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1271</id>
			<description>
                            Returns an object representing the value of OUT parameter   &lt;code&gt;i&lt;/code&gt; and uses &lt;code&gt;map&lt;/code&gt; for the custom  mapping of the parameter value.
                              &lt;p&gt;  This method returns a Java object whose type corresponds to the  JDBC type that was registered for this parameter using the method  &lt;code&gt;registerOutParameter&lt;/code&gt;.  By registering the target  JDBC type as &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;, this method can  be used to read database-specific abstract data types.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1272</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1273</id>
			<description>
                            
                            Retrieves the value of the designated JDBC &lt;code&gt;REF(&amp;lt;structured-type&amp;gt;)&lt;/code&gt;  parameter as a  object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getRef" return-type="java.sql.Ref">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1274</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getRef" return-type="java.sql.Ref">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1275</id>
			<description>
                            
                            Retrieves the value of the designated JDBC &lt;code&gt;BLOB&lt;/code&gt; parameter as a   object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBlob" return-type="java.sql.Blob">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1276</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBlob" return-type="java.sql.Blob">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1277</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;CLOB&lt;/code&gt; parameter as a  &lt;code&gt;Clob&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getClob" return-type="java.sql.Clob">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1278</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getClob" return-type="java.sql.Clob">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1279</id>
			<description>
                            
                            Retrieves the value of the designated JDBC &lt;code&gt;ARRAY&lt;/code&gt; parameter as an   object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getArray" return-type="java.sql.Array">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1280</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getArray" return-type="java.sql.Array">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1281</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;DATE&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Date&lt;/code&gt; object, using  the given &lt;code&gt;Calendar&lt;/code&gt; object  to construct the date.
                              With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver  can calculate the date taking into account a custom timezone and locale.  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the  default timezone and locale.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1282</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1283</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;TIME&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Time&lt;/code&gt; object, using  the given &lt;code&gt;Calendar&lt;/code&gt; object  to construct the time.
                              With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver  can calculate the time taking into account a custom timezone and locale.  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the  default timezone and locale.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1284</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1285</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;TIMESTAMP&lt;/code&gt; parameter as a  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object, using  the given &lt;code&gt;Calendar&lt;/code&gt; object to construct  the &lt;code&gt;Timestamp&lt;/code&gt; object.
                              With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver  can calculate the timestamp taking into account a custom timezone and locale.  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the  default timezone and locale.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1286</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="true" status="active" testable="true">
			<id>1287</id>
			<description>
                            Registers the designated output parameter.
                              This version of   the method &lt;code&gt;registerOutParameter&lt;/code&gt;  should be used for a user-defined or &lt;code&gt;REF&lt;/code&gt; output parameter.  Examples  of user-defined types include: &lt;code&gt;STRUCT&lt;/code&gt;, &lt;code&gt;DISTINCT&lt;/code&gt;,  &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, and named array types.   Before executing a stored procedure call, you must explicitly  call &lt;code&gt;registerOutParameter&lt;/code&gt; to register the type from  &lt;code&gt;java.sql.Types&lt;/code&gt; for each  OUT parameter.  For a user-defined parameter, the fully-qualified SQL  type name of the parameter should also be given, while a &lt;code&gt;REF&lt;/code&gt;  parameter requires that the fully-qualified type name of the  referenced type be given.  A JDBC driver that does not need the  type code and type name information may ignore it.   To be portable,  however, applications should always provide these values for  user-defined and &lt;code&gt;REF&lt;/code&gt; parameters.   Although it is intended for user-defined and &lt;code&gt;REF&lt;/code&gt; parameters,  this method may be used to register a parameter of any JDBC type.  If the parameter does not have a user-defined or &lt;code&gt;REF&lt;/code&gt; type, the  &lt;i&gt;typeName&lt;/i&gt; parameter is ignored.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; When reading the value of an out parameter, you  must use the getter method whose Java type corresponds to the  parameter's registered SQL type.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="true" status="active" testable="true">
			<id>1288</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1289</id>
			<description>
                            Registers the OUT parameter named   &lt;code&gt;parameterName&lt;/code&gt; to the JDBC type   &lt;code&gt;sqlType&lt;/code&gt;.
                            
                              All OUT parameters must be registered  before a stored procedure is executed.  &lt;p&gt;  The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT  parameter determines the Java type that must be used  in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.  &lt;p&gt;  If the JDBC type expected to be returned to this output parameter  is specific to this particular database, &lt;code&gt;sqlType&lt;/code&gt;  should be &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;.  The method    retrieves the value.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1290</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1291</id>
			<description>
                            Registers the parameter named   &lt;code&gt;parameterName&lt;/code&gt; to be of JDBC type  &lt;code&gt;sqlType&lt;/code&gt;.
                              This method must be called  before a stored procedure is executed.  &lt;p&gt;  The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT  parameter determines the Java type that must be used  in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.  &lt;p&gt;  This version of &lt;code&gt;registerOutParameter&lt;/code&gt; should be  used when the parameter is of JDBC type &lt;code&gt;NUMERIC&lt;/code&gt;  or &lt;code&gt;DECIMAL&lt;/code&gt;.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1292</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1293</id>
			<description>
                            Registers the designated output parameter.
                              This version of   the method &lt;code&gt;registerOutParameter&lt;/code&gt;  should be used for a user-named or REF output parameter.  Examples  of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and  named array types.   Before executing a stored procedure call, you must explicitly  call &lt;code&gt;registerOutParameter&lt;/code&gt; to register the type from  &lt;code&gt;java.sql.Types&lt;/code&gt; for each  OUT parameter.  For a user-named parameter the fully-qualified SQL  type name of the parameter should also be given, while a REF  parameter requires that the fully-qualified type name of the  referenced type be given.  A JDBC driver that does not need the  type code and type name information may ignore it.   To be portable,  however, applications should always provide these values for  user-named and REF parameters.   Although it is intended for user-named and REF parameters,  this method may be used to register a parameter of any JDBC type.  If the parameter does not have a user-named or REF type, the  typeName parameter is ignored.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; When reading the value of an out parameter, you  must use the &lt;code&gt;getXXX&lt;/code&gt; method whose Java type XXX corresponds to the  parameter's registered SQL type.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1294</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="registerOutParameter" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1295</id>
			<description>
                            Retrieves the value of the designated JDBC &lt;code&gt;DATALINK&lt;/code&gt; parameter as a  &lt;code&gt;java.net.URL&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getURL" return-type="java.net.URL">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1296</id>
			<description>if a database access error occurs,             or if the URL being returned is             not a valid URL on the Java platform</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getURL" return-type="java.net.URL">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1297</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.net.URL&lt;/code&gt; object.
                              The driver converts this to an SQL &lt;code&gt;DATALINK&lt;/code&gt; value when  it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setURL" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.net.URL</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1298</id>
			<description>if a database access error occurs,             or if a URL is malformed</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setURL" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.net.URL</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1299</id>
			<description>
                            Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                               &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter's SQL type.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1300</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1301</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                              The driver converts this  to an SQL &lt;code&gt;BIT&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setBoolean" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1302</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setBoolean" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1303</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setByte" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>byte</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1304</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setByte" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>byte</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1305</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;short&lt;/code&gt; value.
                               The driver converts this  to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setShort" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>short</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1306</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setShort" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>short</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1307</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;int&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setInt" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1308</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setInt" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1309</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;long&lt;/code&gt; value.
                               The driver converts this  to an SQL &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setLong" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1310</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setLong" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1311</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;float&lt;/code&gt; value.
                               The driver converts this  to an SQL &lt;code&gt;FLOAT&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setFloat" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1312</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setFloat" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>float</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1313</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;double&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setDouble" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1314</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setDouble" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>double</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1315</id>
			<description>
                            Sets the designated parameter to the given  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value.
                                The driver converts this to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when  it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setBigDecimal" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1316</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setBigDecimal" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1317</id>
			<description>
                            Sets the designated parameter to the given Java &lt;code&gt;String&lt;/code&gt; value.
                               The driver converts this  to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value  (depending on the argument's  size relative to the driver's limits on &lt;code&gt;VARCHAR&lt;/code&gt; values)  when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setString" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1318</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setString" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1319</id>
			<description>
                            Sets the designated parameter to the given Java array of bytes.
                                The driver converts this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or   &lt;code&gt;LONGVARBINARY&lt;/code&gt; (depending on the argument's size relative   to the driver's limits on &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends   it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setBytes" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>byte[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1320</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setBytes" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>byte[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1321</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1322</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1323</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                                The driver converts this  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1324</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1325</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                                The driver  converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the  database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1326</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1327</id>
			<description>
                            Sets the designated parameter to the given input stream, which will have   the specified number of bytes.
                              When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;  parameter, it may be more practical to send it via a  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream  as needed until end-of-file is reached.  The JDBC driver will  do any necessary conversion from ASCII to the database char format.    &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setAsciiStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1328</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setAsciiStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1329</id>
			<description>
                            Sets the designated parameter to the given input stream, which will have   the specified number of bytes.
                              When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;  parameter, it may be more practical to send it via a  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the stream  as needed until end-of-file is reached.    &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setBinaryStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1330</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setBinaryStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1331</id>
			<description>
                            Sets the value of the designated parameter with the given object.
                             The second  argument must be an object type; for integral values, the  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.   &lt;p&gt;The given Java object will be converted to the given targetSqlType  before being sent to the database.   If the object has a custom mapping (is of a class implementing the   interface &lt;code&gt;SQLData&lt;/code&gt;),  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write it   to the SQL data stream.  If, on the other hand, the object is of a class implementing  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;, &lt;code&gt;Struct&lt;/code&gt;,   or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a   value of the corresponding SQL type.  &lt;P&gt;  Note that this method may be used to pass datatabase-  specific abstract data types.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1332</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1333</id>
			<description>
                            Sets the value of the designated parameter with the given object.
                              This method is like the method &lt;code&gt;setObject&lt;/code&gt;  above, except that it assumes a scale of zero.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1334</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1335</id>
			<description>
                            Sets the value of the designated parameter with the given object.
                               The second parameter must be of type &lt;code&gt;Object&lt;/code&gt;; therefore, the  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used for built-in types.   &lt;p&gt;The JDBC specification specifies a standard mapping from  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The given argument   will be converted to the corresponding SQL type before being  sent to the database.   &lt;p&gt;Note that this method may be used to pass datatabase-  specific abstract data types, by using a driver-specific Java  type.   If the object is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;,  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;  to write it to the SQL data stream.  If, on the other hand, the object is of a class implementing  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;, &lt;code&gt;Struct&lt;/code&gt;,   or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a   value of the corresponding SQL type.  &lt;P&gt;  This method throws an exception if there is an ambiguity, for example, if the  object is of a class implementing more than one of the interfaces named above.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1336</id>
			<description>if a database access error occurs or if the given             &lt;code&gt;Object&lt;/code&gt; parameter is ambiguous</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1337</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;  object, which is the given number of characters long.
                              When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;  parameter, it may be more practical to send it via a  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream  as needed until end-of-file is reached.  The JDBC driver will  do any necessary conversion from UNICODE to the database char format.    &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setCharacterStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1338</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setCharacterStream" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1339</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value,  using the given &lt;code&gt;Calendar&lt;/code&gt; object.
                              The driver uses  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;DATE&lt;/code&gt; value,  which the driver then sends to the database.  With a  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date  taking into account a custom timezone.  If no  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default  timezone, which is that of the virtual machine running the application.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Date</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1340</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Date</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1341</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value,  using the given &lt;code&gt;Calendar&lt;/code&gt; object.
                              The driver uses  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIME&lt;/code&gt; value,  which the driver then sends to the database.  With a  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the time  taking into account a custom timezone.  If no  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default  timezone, which is that of the virtual machine running the application.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Time</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1342</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Time</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1343</id>
			<description>
                            Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value,  using the given &lt;code&gt;Calendar&lt;/code&gt; object.
                              The driver uses  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value,  which the driver then sends to the database.  With a  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp  taking into account a custom timezone.  If no  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default  timezone, which is that of the virtual machine running the application.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Timestamp</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1344</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.sql.Timestamp</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1345</id>
			<description>
                            Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                              This version of the method &lt;code&gt;setNull&lt;/code&gt; should  be used for user-defined types and REF type parameters.  Examples  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and   named array types.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the  SQL type code and the fully-qualified SQL type name when specifying  a NULL user-defined or REF parameter.  In the case of a user-defined type   the name is the type name of the parameter itself.  For a REF   parameter, the name is the type name of the referenced type.  If   a JDBC driver does not need the type code or type name information,   it may ignore it.        Although it is intended for user-defined and Ref parameters,  this method may be used to set a null parameter of any JDBC type.  If the parameter does not have a user-defined or REF type, the given  typeName is ignored.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1346</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1347</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;,   or &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter as a &lt;code&gt;String&lt;/code&gt; in   the Java programming language.
                              &lt;p&gt;  For the fixed-length type JDBC &lt;code&gt;CHAR&lt;/code&gt;,  the &lt;code&gt;String&lt;/code&gt; object  returned has exactly the same value the JDBC  &lt;code&gt;CHAR&lt;/code&gt; value had in the  database, including any padding added by the database.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getString" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1348</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getString" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1349</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;BIT&lt;/code&gt; parameter as a  &lt;code&gt;boolean&lt;/code&gt; in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBoolean" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1350</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBoolean" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1351</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;TINYINT&lt;/code&gt; parameter as a &lt;code&gt;byte&lt;/code&gt;   in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getByte" return-type="byte">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1352</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getByte" return-type="byte">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1353</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;SMALLINT&lt;/code&gt; parameter as a &lt;code&gt;short&lt;/code&gt;  in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getShort" return-type="short">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1354</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getShort" return-type="short">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1355</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;INTEGER&lt;/code&gt; parameter as an &lt;code&gt;int&lt;/code&gt;  in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getInt" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1356</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getInt" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1357</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;BIGINT&lt;/code&gt; parameter as a &lt;code&gt;long&lt;/code&gt;  in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getLong" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1358</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getLong" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1359</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;FLOAT&lt;/code&gt; parameter as a &lt;code&gt;float&lt;/code&gt;  in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getFloat" return-type="float">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1360</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getFloat" return-type="float">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1361</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;DOUBLE&lt;/code&gt; parameter as a &lt;code&gt;double&lt;/code&gt;  in the Java programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDouble" return-type="double">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1362</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDouble" return-type="double">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1363</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;BINARY&lt;/code&gt; or &lt;code&gt;VARBINARY&lt;/code&gt;   parameter as an array of &lt;code&gt;byte&lt;/code&gt; values in the Java  programming language.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1364</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1365</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;DATE&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Date&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1366</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1367</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;TIME&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Time&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1368</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1369</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;TIMESTAMP&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1370</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1371</id>
			<description>
                            Retrieves the value of a parameter as an &lt;code&gt;Object&lt;/code&gt; in the Java   programming language.
                             If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;, the   driver returns a Java &lt;code&gt;null&lt;/code&gt;.  &lt;p&gt;  This method returns a Java object whose type corresponds to the JDBC  type that was registered for this parameter using the method  &lt;code&gt;registerOutParameter&lt;/code&gt;.  By registering the target JDBC  type as &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;, this method can be used  to read database-specific abstract data types.
                            
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1372</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1373</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;NUMERIC&lt;/code&gt; parameter as a   &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object with as many digits to the  right of the decimal point as the value contains.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1374</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBigDecimal" return-type="java.math.BigDecimal">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1375</id>
			<description>
                            Returns an object representing the value of OUT parameter   &lt;code&gt;i&lt;/code&gt; and uses &lt;code&gt;map&lt;/code&gt; for the custom  mapping of the parameter value.
                              &lt;p&gt;  This method returns a Java object whose type corresponds to the  JDBC type that was registered for this parameter using the method  &lt;code&gt;registerOutParameter&lt;/code&gt;.  By registering the target  JDBC type as &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;, this method can  be used to read database-specific abstract data types.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1376</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getObject" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1377</id>
			<description>
                            
                            Retrieves the value of a JDBC &lt;code&gt;REF(&amp;lt;structured-type&amp;gt;)&lt;/code&gt;  parameter as a  object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getRef" return-type="java.sql.Ref">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1378</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getRef" return-type="java.sql.Ref">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1379</id>
			<description>
                            
                            Retrieves the value of a JDBC &lt;code&gt;BLOB&lt;/code&gt; parameter as a   object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBlob" return-type="java.sql.Blob">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1380</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getBlob" return-type="java.sql.Blob">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1381</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;CLOB&lt;/code&gt; parameter as a  &lt;code&gt;Clob&lt;/code&gt; object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getClob" return-type="java.sql.Clob">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1382</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getClob" return-type="java.sql.Clob">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1383</id>
			<description>
                            
                            Retrieves the value of a JDBC &lt;code&gt;ARRAY&lt;/code&gt; parameter as an   object in the Java programming language.
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getArray" return-type="java.sql.Array">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1384</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getArray" return-type="java.sql.Array">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1385</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;DATE&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Date&lt;/code&gt; object, using  the given &lt;code&gt;Calendar&lt;/code&gt; object  to construct the date.
                              With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver  can calculate the date taking into account a custom timezone and locale.  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the  default timezone and locale.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1386</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getDate" return-type="java.sql.Date">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1387</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;TIME&lt;/code&gt; parameter as a   &lt;code&gt;java.sql.Time&lt;/code&gt; object, using  the given &lt;code&gt;Calendar&lt;/code&gt; object  to construct the time.
                              With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver  can calculate the time taking into account a custom timezone and locale.  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the  default timezone and locale.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1388</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTime" return-type="java.sql.Time">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1389</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;TIMESTAMP&lt;/code&gt; parameter as a  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object, using  the given &lt;code&gt;Calendar&lt;/code&gt; object to construct  the &lt;code&gt;Timestamp&lt;/code&gt; object.
                              With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver  can calculate the timestamp taking into account a custom timezone and locale.  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the  default timezone and locale.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>1390</id>
			<description>if a database access error occurs</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getTimestamp" return-type="java.sql.Timestamp">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1391</id>
			<description>
                            Retrieves the value of a JDBC &lt;code&gt;DATALINK&lt;/code&gt; parameter as a  &lt;code&gt;java.net.URL&lt;/code&gt; object.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getURL" return-type="java.net.URL">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1392</id>
			<description>if a database access error occurs,             or if there is a problem with the URL</description>
			<package>java.sql</package>
			<class-interface>CallableStatement</class-interface>
			<method name="getURL" return-type="java.net.URL">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1393</id>
			<description>
                            Returns the number of bytes in the &lt;code&gt;BLOB&lt;/code&gt; value  designated by this &lt;code&gt;Blob&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="length" return-type="long"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1394</id>
			<description>if there is an error accessing the  length of the &lt;code&gt;BLOB&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="length" return-type="long">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1395</id>
			<description>
                            Retrieves all or part of the &lt;code&gt;BLOB&lt;/code&gt;  value that this &lt;code&gt;Blob&lt;/code&gt; object represents, as an array of  bytes.
                              This &lt;code&gt;byte&lt;/code&gt; array contains up to &lt;code&gt;length&lt;/code&gt;   consecutive bytes starting at position &lt;code&gt;pos&lt;/code&gt;.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1396</id>
			<description>if there is an error accessing the             &lt;code&gt;BLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="getBytes" return-type="byte[]">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1397</id>
			<description>
                            Retrieves the &lt;code&gt;BLOB&lt;/code&gt; value designated by this  &lt;code&gt;Blob&lt;/code&gt; instance as a stream.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="getBinaryStream" return-type="java.io.InputStream"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1398</id>
			<description>if there is an error accessing the             &lt;code&gt;BLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="getBinaryStream" return-type="java.io.InputStream">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1399</id>
			<description>
                            Retrieves the byte position at which the specified byte array  &lt;code&gt;pattern&lt;/code&gt; begins within the &lt;code&gt;BLOB&lt;/code&gt;  value that this &lt;code&gt;Blob&lt;/code&gt; object represents.
                              The  search for &lt;code&gt;pattern&lt;/code&gt; begins at position  &lt;code&gt;start&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="position" return-type="long">
				<parameters>
					<parameter>byte[]</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1400</id>
			<description>if there is an error accessing the   &lt;code&gt;BLOB&lt;/code&gt;</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="position" return-type="long">
				<parameters>
					<parameter>byte[]</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1401</id>
			<description>
                            Retrieves the byte position in the &lt;code&gt;BLOB&lt;/code&gt; value  designated by this &lt;code&gt;Blob&lt;/code&gt; object at which   &lt;code&gt;pattern&lt;/code&gt; begins.
                              The search begins at position  &lt;code&gt;start&lt;/code&gt;.
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="position" return-type="long">
				<parameters>
					<parameter>java.sql.Blob</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1402</id>
			<description>if there is an error accessing the             &lt;code&gt;BLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="position" return-type="long">
				<parameters>
					<parameter>java.sql.Blob</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1403</id>
			<description>
                            Writes the given array of bytes to the &lt;code&gt;BLOB&lt;/code&gt; value that  this &lt;code&gt;Blob&lt;/code&gt; object represents, starting at position   &lt;code&gt;pos&lt;/code&gt;, and returns the number of bytes written.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="setBytes" return-type="int">
				<parameters>
					<parameter>long</parameter>
					<parameter>byte[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1404</id>
			<description>if there is an error accessing the             &lt;code&gt;BLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="setBytes" return-type="int">
				<parameters>
					<parameter>long</parameter>
					<parameter>byte[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1405</id>
			<description>
                            Writes all or part of the given &lt;code&gt;byte&lt;/code&gt; array to the  &lt;code&gt;BLOB&lt;/code&gt; value that this &lt;code&gt;Blob&lt;/code&gt; object represents  and returns the number of bytes written.
                              Writing starts at position &lt;code&gt;pos&lt;/code&gt; in the &lt;code&gt;BLOB&lt;/code&gt;  value; &lt;code&gt;len&lt;/code&gt; bytes from the given byte array are written.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="setBytes" return-type="int">
				<parameters>
					<parameter>long</parameter>
					<parameter>byte[]</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1406</id>
			<description>if there is an error accessing the             &lt;code&gt;BLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="setBytes" return-type="int">
				<parameters>
					<parameter>long</parameter>
					<parameter>byte[]</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1407</id>
			<description>
                            Retrieves a stream that can be used to write to the &lt;code&gt;BLOB&lt;/code&gt;   value that this &lt;code&gt;Blob&lt;/code&gt; object represents.
                              The stream begins  at position &lt;code&gt;pos&lt;/code&gt;.
                            
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="setBinaryStream" return-type="java.io.OutputStream">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1408</id>
			<description>if there is an error accessing the             &lt;code&gt;BLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="setBinaryStream" return-type="java.io.OutputStream">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1409</id>
			<description>
                            Truncates the &lt;code&gt;BLOB&lt;/code&gt; value that this &lt;code&gt;Blob&lt;/code&gt;  object represents to be &lt;code&gt;len&lt;/code&gt; bytes in length.
                        </description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="truncate" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1410</id>
			<description>if there is an error accessing the             &lt;code&gt;BLOB&lt;/code&gt; value</description>
			<package>java.sql</package>
			<class-interface>Blob</class-interface>
			<method name="truncate" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1411</id>
			<description>
                            Retrieves the SQL type name of the elements in   the array designated by this &lt;code&gt;Array&lt;/code&gt; object.
                              If the elements are a built-in type, it returns  the database-specific type name of the elements.   If the elements are a user-defined type (UDT),  this method returns the fully-qualified SQL type name.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getBaseTypeName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1412</id>
			<description>if an error occurs while attempting  to access the type name</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getBaseTypeName" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1413</id>
			<description>
                            Retrieves the JDBC type of the elements in the array designated  by this &lt;code&gt;Array&lt;/code&gt; object.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getBaseType" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1414</id>
			<description>if an error occurs while attempting  to access the base type</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getBaseType" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1415</id>
			<description>
                            Retrieves the contents of the SQL &lt;code&gt;ARRAY&lt;/code&gt; value designated   by this  &lt;code&gt;Array&lt;/code&gt; object in the form of an array in the Java  programming language.
                             This version of the method &lt;code&gt;getArray&lt;/code&gt;  uses the type map associated with the connection for customizations of   the type mappings.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getArray" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1416</id>
			<description>if an error occurs while attempting to  access the array</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getArray" return-type="java.lang.Object">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1417</id>
			<description>
                            Retrieves the contents of the SQL &lt;code&gt;ARRAY&lt;/code&gt; value designated by this   &lt;code&gt;Array&lt;/code&gt; object.
                              This method uses   the specified &lt;code&gt;map&lt;/code&gt; for type map customizations  unless the base type of the array does not match a user-defined   type in &lt;code&gt;map&lt;/code&gt;, in which case it   uses the standard mapping. This version of the method  &lt;code&gt;getArray&lt;/code&gt; uses either the given type map or the standard mapping;  it never uses the type map associated with the connection.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getArray" return-type="java.lang.Object">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1418</id>
			<description>if an error occurs while attempting to                           access the array</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getArray" return-type="java.lang.Object">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1419</id>
			<description>
                            Retrieves a slice of the SQL &lt;code&gt;ARRAY&lt;/code&gt;  value designated by this &lt;code&gt;Array&lt;/code&gt; object, beginning with the  specified &lt;code&gt;index&lt;/code&gt; and containing up to &lt;code&gt;count&lt;/code&gt;   successive elements of the SQL array.
                              This method uses the type map  associated with the connection for customizations of the type mappings.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getArray" return-type="java.lang.Object">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1420</id>
			<description>if an error occurs while attempting to  access the array</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getArray" return-type="java.lang.Object">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1421</id>
			<description>
                            Retreives a slice of the SQL &lt;code&gt;ARRAY&lt;/code&gt; value   designated by this &lt;code&gt;Array&lt;/code&gt; object, beginning with the specified  &lt;code&gt;index&lt;/code&gt; and containing up to &lt;code&gt;count&lt;/code&gt;  successive elements of the SQL array.
                                &lt;P&gt;  This method uses   the specified &lt;code&gt;map&lt;/code&gt; for type map customizations  unless the base type of the array does not match a user-defined   type in &lt;code&gt;map&lt;/code&gt;, in which case it   uses the standard mapping. This version of the method  &lt;code&gt;getArray&lt;/code&gt; uses either the given type map or the standard mapping;  it never uses the type map associated with the connection.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getArray" return-type="java.lang.Object">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1422</id>
			<description>if an error occurs while attempting to  access the array</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getArray" return-type="java.lang.Object">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1423</id>
			<description>
                            Retrieves a result set that contains the elements of the SQL   &lt;code&gt;ARRAY&lt;/code&gt; value  designated by this &lt;code&gt;Array&lt;/code&gt; object.
                              If appropriate,  the elements of the array are mapped using the connection's type   map; otherwise, the standard mapping is used.  &lt;p&gt;  The result set contains one row for each array element, with  two columns in each row.  The second column stores the element  value; the first column stores the index into the array for   that element (with the first array element being at index 1).   The rows are in ascending order corresponding to  the order of the indices.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1424</id>
			<description>if an error occurs while attempting to  access the array</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1425</id>
			<description>
                            Retrieves a result set that contains the elements of the SQL   &lt;code&gt;ARRAY&lt;/code&gt; value designated by this &lt;code&gt;Array&lt;/code&gt; object.
                              This method uses   the specified &lt;code&gt;map&lt;/code&gt; for type map customizations  unless the base type of the array does not match a user-defined   type in &lt;code&gt;map&lt;/code&gt;, in which case it   uses the standard mapping. This version of the method  &lt;code&gt;getResultSet&lt;/code&gt; uses either the given type map or the standard mapping;  it never uses the type map associated with the connection.  &lt;p&gt;  The result set contains one row for each array element, with  two columns in each row.  The second column stores the element  value; the first column stores the index into the array for   that element (with the first array element being at index 1).   The rows are in ascending order corresponding to  the order of the indices.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1426</id>
			<description>if an error occurs while attempting to  access the array</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1427</id>
			<description>
                            Retrieves a result set holding the elements of the subarray that  starts at index &lt;code&gt;index&lt;/code&gt; and contains up to   &lt;code&gt;count&lt;/code&gt; successive elements.
                              This method uses  the connection's type map to map the elements of the array if  the map contains an entry for the base type. Otherwise, the  standard mapping is used.  &lt;P&gt;  The result set has one row for each element of the SQL array  designated by this object, with the first row containing the   element at index &lt;code&gt;index&lt;/code&gt;.  The result set has  up to &lt;code&gt;count&lt;/code&gt; rows in ascending order based on the  indices.  Each row has two columns:  The second column stores  the element value; the first column stores the index into the  array for that element.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1428</id>
			<description>if an error occurs while attempting to  access the array</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1429</id>
			<description>
                            Retrieves a result set holding the elements of the subarray that  starts at index &lt;code&gt;index&lt;/code&gt; and contains up to  &lt;code&gt;count&lt;/code&gt; successive elements.
                              This method uses   the specified &lt;code&gt;map&lt;/code&gt; for type map customizations  unless the base type of the array does not match a user-defined   type in &lt;code&gt;map&lt;/code&gt;, in which case it   uses the standard mapping. This version of the method  &lt;code&gt;getResultSet&lt;/code&gt; uses either the given type map or the standard mapping;  it never uses the type map associated with the connection.  &lt;P&gt;  The result set has one row for each element of the SQL array  designated by this object, with the first row containing the  element at index &lt;code&gt;index&lt;/code&gt;.  The result set has     up to &lt;code&gt;count&lt;/code&gt; rows in ascending order based on the  indices.  Each row has two columns:  The second column stores    the element value; the first column stroes the index into the  array for that element.
                        </description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1430</id>
			<description>if an error occurs while attempting to  access the array</description>
			<package>java.sql</package>
			<class-interface>Array</class-interface>
			<method name="getResultSet" return-type="java.sql.ResultSet">
				<parameters>
					<parameter>long</parameter>
					<parameter>int</parameter>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1431</id>
			<description>
                            Constructs a &lt;code&gt;RowSetEvent&lt;/code&gt; object initialized with the  given &lt;code&gt;RowSet&lt;/code&gt; object.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetEvent</class-interface>
			<method name="RowSetEvent" return-type="RowSetEvent">
				<parameters>
					<parameter>javax.sql.RowSet</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1432</id>
			<description>
                            &lt;P&gt;Constructs a &lt;code&gt;ConnectionEvent&lt;/code&gt; object initialized with  the given &lt;code&gt;PooledConnection&lt;/code&gt; object.
                             &lt;code&gt;SQLException&lt;/code&gt;  defaults to &lt;code&gt;null&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionEvent</class-interface>
			<method name="ConnectionEvent" return-type="ConnectionEvent">
				<parameters>
					<parameter>javax.sql.PooledConnection</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1433</id>
			<description>
                            &lt;P&gt;Constructs a &lt;code&gt;ConnectionEvent&lt;/code&gt; object initialized with  the given &lt;code&gt;PooledConnection&lt;/code&gt; object and   &lt;code&gt;SQLException&lt;/code&gt; object.
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionEvent</class-interface>
			<method name="ConnectionEvent" return-type="ConnectionEvent">
				<parameters>
					<parameter>javax.sql.PooledConnection</parameter>
					<parameter>java.sql.SQLException</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1434</id>
			<description>
                            &lt;P&gt;Retrieves the &lt;code&gt;SQLException&lt;/code&gt; for this  &lt;code&gt;ConnectionEvent&lt;/code&gt; object.
                             May be &lt;code&gt;null&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionEvent</class-interface>
			<method name="getSQLException" return-type="java.sql.SQLException"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1435</id>
			<description>
                            Attempts to establish a physical database connection that can be  used in a distributed transaction.
                        </description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="getXAConnection" return-type="javax.sql.XAConnection"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1436</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="getXAConnection" return-type="javax.sql.XAConnection">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1437</id>
			<description>
                            Attempts to establish a physical database connection, using the given  user name and password.
                             The connection that is returned is one that  can be used in a distributed transaction.
                        </description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="getXAConnection" return-type="javax.sql.XAConnection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1438</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="getXAConnection" return-type="javax.sql.XAConnection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1439</id>
			<description>
                            &lt;p&gt;Retrieves the log writer for this &lt;code&gt;XADataSource&lt;/code&gt; object.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="getLogWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1440</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="getLogWriter" return-type="java.io.PrintWriter">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1441</id>
			<description>
                            Sets the log writer for this &lt;code&gt;XADataSource&lt;/code&gt; object  to the given &lt;code&gt;java.io.PrintWriter&lt;/code&gt; object.
                              &lt;P&gt;  The log writer is a character output stream to which all logging  and tracing messages for this &lt;code&gt;XADataSource&lt;/code&gt; object will be  printed.  This includes messages printed by the methods of this  object, messages printed by methods of other objects manufactured  by this object, and so on.  Messages printed to a log writer that is  specific to a data source are not printed to the log writer associated  with the &lt;code&gt;java.sql.DriverManager&lt;/code&gt; class. When a data source  object is created, the log writer is initially &lt;code&gt;null&lt;/code&gt;.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="setLogWriter" return-type="void">
				<parameters>
					<parameter>java.io.PrintWriter</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1442</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="setLogWriter" return-type="void">
				<parameters>
					<parameter>java.io.PrintWriter</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1443</id>
			<description>
                            &lt;p&gt;Sets the maximum time in seconds that this data source will wait  while attempting to connect to a data source.
                              A value of zero  specifies that the timeout is the default system timeout   if there is one; otherwise, it specifies that there is no timeout.  When a data source object is created, the login timeout is  initially zero.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="setLoginTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1444</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="setLoginTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1445</id>
			<description>
                            Retrieves the maximum time in seconds that this data source can wait  while attempting to connect to a data source.
                              A value of zero  means that the timeout is the default system timeout   if there is one; otherwise, it means that there is no timeout.  When a data source object is created, the login timeout is  initially zero.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="getLoginTimeout" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1446</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>XADataSource</class-interface>
			<method name="getLoginTimeout" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1447</id>
			<description>
                            Retrieves an &lt;code&gt;XAResource&lt;/code&gt; object that   the transaction manager will use   to manage this &lt;code&gt;XAConnection&lt;/code&gt; object's participation in a  distributed transaction.
                        </description>
			<package>javax.sql</package>
			<class-interface>XAConnection</class-interface>
			<method name="getXAResource" return-type="javax.transaction.xa.XAResource"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1448</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>XAConnection</class-interface>
			<method name="getXAResource" return-type="javax.transaction.xa.XAResource">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1449</id>
			<description>
                            Writes the changes in this &lt;code&gt;RowSetWriter&lt;/code&gt; object's  rowset back to the data source from which it got its data.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetWriter</class-interface>
			<method name="writeData" return-type="boolean">
				<parameters>
					<parameter>javax.sql.RowSetInternal</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1450</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetWriter</class-interface>
			<method name="writeData" return-type="boolean">
				<parameters>
					<parameter>javax.sql.RowSetInternal</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1451</id>
			<description>
                            Reads the new contents of the calling &lt;code&gt;RowSet&lt;/code&gt; object.
                               In order to call this method, a &lt;code&gt;RowSet&lt;/code&gt;  object must have implemented the &lt;code&gt;RowSetInternal&lt;/code&gt; interface  and registered this &lt;code&gt;RowSetReader&lt;/code&gt; object as its reader.  The &lt;code&gt;readData&lt;/code&gt;  method is invoked internally  by the &lt;code&gt;RowSet.execute&lt;/code&gt; method for rowsets that support the  reader/writer paradigm.     &lt;P&gt;The &lt;code&gt;readData&lt;/code&gt; method adds rows to the caller.   It can be implemented in a wide variety of ways and can even  populate the caller with rows from a nonrelational data source.  In general, a reader may invoke any of the rowset's methods,  with one exception. Calling the method &lt;code&gt;execute&lt;/code&gt; will   cause an &lt;code&gt;SQLException&lt;/code&gt; to be thrown  because &lt;code&gt;execute&lt;/code&gt; may not be called recursively.  Also,  when a reader invokes &lt;code&gt;RowSet&lt;/code&gt; methods, no listeners   are notified; that is, no &lt;code&gt;RowSetEvent&lt;/code&gt; objects are  generated and no &lt;code&gt;RowSetListener&lt;/code&gt; methods are invoked.   This is true because listeners are already being notified by the method  &lt;code&gt;execute&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetReader</class-interface>
			<method name="readData" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetInternal</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1452</id>
			<description>if a database access error occurs or this method              invokes the &lt;code&gt;RowSet.execute&lt;/code&gt; method</description>
			<package>javax.sql</package>
			<class-interface>RowSetReader</class-interface>
			<method name="readData" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetInternal</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1453</id>
			<description>
                            Sets the number of columns in the &lt;code&gt;RowSet&lt;/code&gt; object to  the given number.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnCount" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1454</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnCount" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1455</id>
			<description>
                            Sets whether the designated column is automatically numbered,   and thus read-only.
                             The default is for a &lt;code&gt;RowSet&lt;/code&gt; object's  columns not to be automatically numbered.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setAutoIncrement" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1456</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setAutoIncrement" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1457</id>
			<description>
                            Sets whether the designated column is case sensitive.
                              The default is &lt;code&gt;false&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setCaseSensitive" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1458</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setCaseSensitive" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1459</id>
			<description>
                            Sets whether the designated column can be used in a where clause.
                              The default is &lt;code&gt;false&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setSearchable" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1460</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setSearchable" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1461</id>
			<description>
                            Sets whether the designated column is a cash value.
                              The default is &lt;code&gt;false&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setCurrency" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1462</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setCurrency" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1463</id>
			<description>
                            Sets whether the designated column's value can be set to   &lt;code&gt;NULL&lt;/code&gt;.
                              The default is &lt;code&gt;ResultSetMetaData.columnNullableUnknown&lt;/code&gt;
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setNullable" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1464</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setNullable" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1465</id>
			<description>
                            Sets whether the designated column is a signed number.
                              The default is &lt;code&gt;false&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setSigned" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1466</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setSigned" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1467</id>
			<description>
                            Sets the designated column's normal maximum width in chars to the  given &lt;code&gt;int&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnDisplaySize" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1468</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnDisplaySize" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1469</id>
			<description>
                            Sets the suggested column title for use in printouts and  displays, if any, to the given &lt;code&gt;String&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnLabel" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1470</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnLabel" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1471</id>
			<description>
                            Sets the name of the designated column to the given &lt;code&gt;String&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1472</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1473</id>
			<description>
                            Sets the name of the designated column's table's schema, if any, to  the given &lt;code&gt;String&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setSchemaName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1474</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setSchemaName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1475</id>
			<description>
                            Sets the designated column's number of decimal digits to the  given &lt;code&gt;int&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setPrecision" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1476</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setPrecision" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1477</id>
			<description>
                            Sets the designated column's number of digits to the  right of the decimal point to the given &lt;code&gt;int&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setScale" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1478</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setScale" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1479</id>
			<description>
                            Sets the designated column's table name, if any, to the given  &lt;code&gt;String&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setTableName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1480</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setTableName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1481</id>
			<description>
                            Sets the designated column's table's catalog name, if any, to the given  &lt;code&gt;String&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setCatalogName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1482</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setCatalogName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1483</id>
			<description>
                            Sets the designated column's SQL type to the one given.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnType" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1484</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnType" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1485</id>
			<description>
                            Sets the designated column's type name that is specific to the  data source, if any, to the given &lt;code&gt;String&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnTypeName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1486</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetMetaData</class-interface>
			<method name="setColumnTypeName" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1487</id>
			<description>
                            Notifies registered listeners that a &lt;code&gt;RowSet&lt;/code&gt; object   in the given &lt;code&gt;RowSetEvent&lt;/code&gt; object has changed its entire contents.
                              &lt;P&gt;  The source of the event can be retrieved with the method   &lt;code&gt;event.getSource&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetListener</class-interface>
			<method name="rowSetChanged" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1488</id>
			<description>
                            Notifies registered listeners that a &lt;code&gt;RowSet&lt;/code&gt; object   has had a change in one of its rows.
                              &lt;P&gt;  The source of the event can be retrieved with the method   &lt;code&gt;event.getSource&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetListener</class-interface>
			<method name="rowChanged" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1489</id>
			<description>
                            Notifies registered listeners that a &lt;code&gt;RowSet&lt;/code&gt; object's  cursor has moved.
                               &lt;P&gt;  The source of the event can be retrieved with the method   &lt;code&gt;event.getSource&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetListener</class-interface>
			<method name="cursorMoved" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1490</id>
			<description>
                            Retrieves the parameters that have been set for this  &lt;code&gt;RowSet&lt;/code&gt; object's command.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="getParams" return-type="java.lang.Object[]"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1491</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="getParams" return-type="java.lang.Object[]">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1492</id>
			<description>
                            Retrieves the &lt;code&gt;Connection&lt;/code&gt; object that was passed to this  &lt;code&gt;RowSet&lt;/code&gt; object.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="getConnection" return-type="java.sql.Connection"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1493</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1494</id>
			<description>
                            Sets the given &lt;code&gt;RowSetMetaData&lt;/code&gt; object as the  &lt;code&gt;RowSetMetaData&lt;/code&gt; object for this &lt;code&gt;RowSet&lt;/code&gt;  object.
                             The &lt;code&gt;RowSetReader&lt;/code&gt; object associated with the rowset   will use &lt;code&gt;RowSetMetaData&lt;/code&gt; methods to set the values giving  information about the rowset's columns.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="setMetaData" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetMetaData</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1495</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="setMetaData" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetMetaData</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1496</id>
			<description>
                            Retrieves a &lt;code&gt;ResultSet&lt;/code&gt; object containing the original  value of this &lt;code&gt;RowSet&lt;/code&gt; object.
                              &lt;P&gt;  The cursor is positioned before the first row in the result set.  Only rows contained in the result set returned by the method  &lt;code&gt;getOriginal&lt;/code&gt; are said to have an original value.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="getOriginal" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1497</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="getOriginal" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1498</id>
			<description>
                            Retrieves a &lt;code&gt;ResultSet&lt;/code&gt; object containing the original value  of the current row only.
                              If the current row has no original value,  an empty result set is returned. If there is no current row,  an exception is thrown.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="getOriginalRow" return-type="java.sql.ResultSet"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1499</id>
			<description>if a database access error occurs or this method            is called while the cursor is on the insert row, before the             first row, or after the last row</description>
			<package>javax.sql</package>
			<class-interface>RowSetInternal</class-interface>
			<method name="getOriginalRow" return-type="java.sql.ResultSet">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1500</id>
			<description>
                            Retrieves the url property this &lt;code&gt;RowSet&lt;/code&gt; object will use to  create a connection if it uses the &lt;code&gt;DriverManager&lt;/code&gt;  instead of a &lt;code&gt;DataSource&lt;/code&gt; object to establish the connection.
                              The default value is &lt;code&gt;null&lt;/code&gt;.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getUrl" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1501</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getUrl" return-type="java.lang.String">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1502</id>
			<description>
                            Sets the URL this &lt;code&gt;RowSet&lt;/code&gt; object will use when it uses the  &lt;code&gt;DriverManager&lt;/code&gt; to create a connection.
                               Setting this property is optional.  If a URL is used, a JDBC driver  that accepts the URL must be loaded by the application before the  rowset is used to connect to a database.  The rowset will use the URL  internally to create a database connection when reading or writing  data.  Either a URL or a data source name is used to create a  connection, whichever was specified most recently.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setUrl" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1503</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setUrl" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1504</id>
			<description>
                            Retrieves the logical name that identifies the data source for this  &lt;code&gt;RowSet&lt;/code&gt; object.
                              Users should set  either the url property or the data source name property.  The rowset will use  the property that was set more recently to get a connection.
                            
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getDataSourceName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1505</id>
			<description>
                            Sets the data source name property for this &lt;code&gt;RowSet&lt;/code&gt; object to the   given &lt;code&gt;String&lt;/code&gt;.
                              &lt;P&gt;  The value of the data source name property can be used to do a lookup of  a &lt;code&gt;DataSource&lt;/code&gt; object that has been registered with a naming  service.  After being retrieved, the &lt;code&gt;DataSource&lt;/code&gt; object can be  used to create a connection to the data source that it represents.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setDataSourceName" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1506</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setDataSourceName" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1507</id>
			<description>
                            Retrieves the username used to create a database connection for this  &lt;code&gt;RowSet&lt;/code&gt; object.
                                The username property is set at run time before calling the method   &lt;code&gt;execute&lt;/code&gt;.  It is   not usually part of the serialized state of a &lt;code&gt;RowSet&lt;/code&gt; object.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getUsername" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1508</id>
			<description>
                            Sets the username property for this &lt;code&gt;RowSet&lt;/code&gt; object to the   given &lt;code&gt;String&lt;/code&gt;.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setUsername" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1509</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setUsername" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1510</id>
			<description>
                            Retrieves the password used to create a database connection.
                               The password property is set at run time before calling the method  &lt;code&gt;execute&lt;/code&gt;.  It is not usually part of the serialized state   of a &lt;code&gt;RowSet&lt;/code&gt; object.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getPassword" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1511</id>
			<description>
                            Sets the database password for this &lt;code&gt;RowSet&lt;/code&gt; object to  the given &lt;code&gt;String&lt;/code&gt;.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setPassword" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1512</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setPassword" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1513</id>
			<description>
                            Retrieves the transaction isolation level set for this  &lt;code&gt;RowSet&lt;/code&gt; object.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getTransactionIsolation" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1514</id>
			<description>
                            Sets the transaction isolation level for this &lt;code&gt;RowSet&lt;/code&gt; obejct.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTransactionIsolation" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1515</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTransactionIsolation" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1516</id>
			<description>
                            Retrieves the &lt;code&gt;Map&lt;/code&gt; object associated with this  &lt;code&gt;RowSet&lt;/code&gt; object, which specifies the custom mapping  of SQL user-defined types, if any.
                              The default is for the  type map to be empty.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getTypeMap" return-type="java.util.Map"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1517</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getTypeMap" return-type="java.util.Map">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1518</id>
			<description>
                            Installs the given &lt;code&gt;java.util.Map&lt;/code&gt; object as the default   type map for this &lt;code&gt;RowSet&lt;/code&gt; object.
                             This type map will be  used unless another type map is supplied as a method parameter.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTypeMap" return-type="void">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1519</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTypeMap" return-type="void">
				<parameters>
					<parameter>java.util.Map</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1520</id>
			<description>
                            Retrieves this &lt;code&gt;RowSet&lt;/code&gt; object's command property.
                               The command property contains a command string, which must be an SQL  query, that can be executed to fill the rowset with data.    The default value is &lt;code&gt;null&lt;/code&gt;.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getCommand" return-type="java.lang.String"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1521</id>
			<description>
                            Sets this &lt;code&gt;RowSet&lt;/code&gt; object's command property to the given  SQL query.
                               This property is optional  when a rowset gets its data from a data source that does not support  commands, such as a spreadsheet.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setCommand" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1522</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setCommand" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1523</id>
			<description>
                            Retrieves whether this &lt;code&gt;RowSet&lt;/code&gt; object is read-only.
                              If updates are possible, the default is for a rowset to be  updatable.  &lt;P&gt;  Attempts to update a read-only rowset will result in an  &lt;code&gt;SQLException&lt;/code&gt; being thrown.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="isReadOnly" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1524</id>
			<description>
                            Sets whether this &lt;code&gt;RowSet&lt;/code&gt; object is read-only to the  given &lt;code&gt;boolean&lt;/code&gt;.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setReadOnly" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1525</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setReadOnly" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1526</id>
			<description>
                            Retrieves the maximum number of bytes that may be returned   for certain column values.
                               This limit applies only to &lt;code&gt;BINARY&lt;/code&gt;,  &lt;code&gt;VARBINARY&lt;/code&gt;, &lt;code&gt;LONGVARBINARYBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;,  &lt;code&gt;VARCHAR&lt;/code&gt;, and &lt;code&gt;LONGVARCHAR&lt;/code&gt; columns.  If the limit is exceeded, the excess data is silently discarded.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getMaxFieldSize" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1527</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getMaxFieldSize" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1528</id>
			<description>
                            Sets the maximum number of bytes that can be returned for a column  value to the given number of bytes.
                              This limit applies only to &lt;code&gt;BINARY&lt;/code&gt;,  &lt;code&gt;VARBINARY&lt;/code&gt;, &lt;code&gt;LONGVARBINARYBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;,  &lt;code&gt;VARCHAR&lt;/code&gt;, and &lt;code&gt;LONGVARCHAR&lt;/code&gt; columns.  If the limit is exceeded, the excess data is silently discarded.  For maximum portability, use values greater than 256.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setMaxFieldSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1529</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setMaxFieldSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1530</id>
			<description>
                            Retrieves the maximum number of rows that this &lt;code&gt;RowSet&lt;/code&gt;  object can contain.
                              If the limit is exceeded, the excess rows are silently dropped.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getMaxRows" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1531</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getMaxRows" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1532</id>
			<description>
                            Sets the maximum number of rows that this &lt;code&gt;RowSet&lt;/code&gt;  object can contain to the specified number.
                              If the limit is exceeded, the excess rows are silently dropped.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setMaxRows" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1533</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setMaxRows" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1534</id>
			<description>
                            Retrieves whether escape processing is enabled for this  &lt;code&gt;RowSet&lt;/code&gt; object.
                                If escape scanning is enabled, which is the default, the driver will do  escape substitution before sending an SQL statement to the database.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getEscapeProcessing" return-type="boolean"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1535</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getEscapeProcessing" return-type="boolean">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1536</id>
			<description>
                            Sets escape processing for this &lt;code&gt;RowSet&lt;/code&gt; object on or  off.
                             If escape scanning is on (the default), the driver will do  escape substitution before sending an SQL statement to the database.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setEscapeProcessing" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1537</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setEscapeProcessing" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1538</id>
			<description>
                            Retrieves the maximum number of seconds the driver will wait for  a statement to execute.
                              If this limit is exceeded, an &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getQueryTimeout" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1539</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="getQueryTimeout" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1540</id>
			<description>
                            Sets the maximum time the driver will wait for  a statement to execute to the given number of seconds.
                              If this limit is exceeded, an &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setQueryTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1541</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setQueryTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1542</id>
			<description>
                            Sets the type of this &lt;code&gt;RowSet&lt;/code&gt; object to the given type.
                              This method is used to change the type of a rowset, which is by  default read-only and non-scrollable.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setType" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1543</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setType" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1544</id>
			<description>
                            Sets the concurrency of this &lt;code&gt;RowSet&lt;/code&gt; object to the given  concurrency level.
                             This method is used to change the concurrency level  of a rowset, which is by default &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setConcurrency" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1545</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setConcurrency" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1546</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's SQL  command to SQL &lt;code&gt;NULL&lt;/code&gt;.
                               &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter's SQL type.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1547</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1548</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's SQL  command to SQL &lt;code&gt;NULL&lt;/code&gt;.
                             This version of the method &lt;code&gt;setNull&lt;/code&gt;  should  be used for SQL user-defined types (UDTs) and &lt;code&gt;REF&lt;/code&gt; type  parameters.  Examples of UDTs include: &lt;code&gt;STRUCT&lt;/code&gt;, &lt;code&gt;DISTINCT&lt;/code&gt;,  &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, and named array types.   &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the  SQL type code and the fully qualified SQL type name when specifying  a NULL UDT or &lt;code&gt;REF&lt;/code&gt; parameter.  In the case of a UDT,  the name is the type name of the parameter itself.  For a &lt;code&gt;REF&lt;/code&gt;   parameter, the name is the type name of the referenced type.  If   a JDBC driver does not need the type code or type name information,   it may ignore it.        Although it is intended for UDT and &lt;code&gt;REF&lt;/code&gt; parameters,  this method may be used to set a null parameter of any JDBC type.  If the parameter does not have a user-defined or &lt;code&gt;REF&lt;/code&gt; type,  the typeName parameter is ignored.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1549</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setNull" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1550</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;BIT&lt;/code&gt; value before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBoolean" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1551</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBoolean" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1552</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;TINYINT&lt;/code&gt; value before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setByte" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1553</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setByte" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1554</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java &lt;code&gt;short&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setShort" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>short</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1555</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setShort" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>short</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1556</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java &lt;code&gt;int&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;INTEGER&lt;/code&gt; value before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setInt" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1557</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setInt" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1558</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java &lt;code&gt;long&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;BIGINT&lt;/code&gt; value before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setLong" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1559</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setLong" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>long</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1560</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java &lt;code&gt;float&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;REAL&lt;/code&gt; value before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setFloat" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1561</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setFloat" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>float</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1562</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java &lt;code&gt;double&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setDouble" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1563</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setDouble" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>double</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1564</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given &lt;code&gt;java.math.BigDeciaml&lt;/code&gt; value.
                              The driver converts this to  an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBigDecimal" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1565</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBigDecimal" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.math.BigDecimal</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1566</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java &lt;code&gt;String&lt;/code&gt; value.
                             Before sending it to the   database, the driver converts this to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or  &lt;code&gt;LONGVARCHAR&lt;/code&gt; value, depending on the argument's size relative  to the driver's limits on &lt;code&gt;VARCHAR&lt;/code&gt; values.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setString" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1567</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setString" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1568</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given Java array of &lt;code&gt;byte&lt;/code&gt; values.
                             Before sending it to the   database, the driver converts this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or  &lt;code&gt;LONGVARBINARY&lt;/code&gt; value, depending on the argument's size relative  to the driver's limits on &lt;code&gt;VARBINARY&lt;/code&gt; values.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBytes" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte[]</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1569</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBytes" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>byte[]</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1570</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;DATE&lt;/code&gt; value before sending it to the database, using the  default &lt;code&gt;java.util.Calendar&lt;/code&gt; to calculate the date.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1571</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1572</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;TIME&lt;/code&gt; value before sending it to the database, using the  default &lt;code&gt;java.util.Calendar&lt;/code&gt; to calculate it.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1573</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1574</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                             The driver converts this to  an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value before sending it to the database, using the  default &lt;code&gt;java.util.Calendar&lt;/code&gt; to calculate it.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1575</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1576</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given &lt;code&gt;java.io.InputStream&lt;/code&gt; value.
                               It may be more practical to send a very large ASCII value via a  &lt;code&gt;java.io.InputStream&lt;/code&gt; rather than as a &lt;code&gt;LONGVARCHAR&lt;/code&gt;   parameter. The driver will read the data from the stream  as needed until it reaches end-of-file.       &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setAsciiStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1577</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setAsciiStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1578</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given &lt;code&gt;java.io.InputStream&lt;/code&gt; value.
                               It may be more practical to send a very large binary value via a  &lt;code&gt;java.io.InputStream&lt;/code&gt; rather than as a &lt;code&gt;LONGVARBINARY&lt;/code&gt;   parameter. The driver will read the data from the stream  as needed until it reaches end-of-file.       &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBinaryStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1579</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBinaryStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.InputStream</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1580</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  to the given &lt;code&gt;java.io.Reader&lt;/code&gt; value.
                               It may be more practical to send a very large UNICODE value via a  &lt;code&gt;java.io.Reader&lt;/code&gt; rather than as a &lt;code&gt;LONGVARCHAR&lt;/code&gt;   parameter. The driver will read the data from the stream  as needed until it reaches end-of-file.       &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard  Java stream object or your own subclass that implements the  standard interface.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setCharacterStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1581</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setCharacterStream" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.io.Reader</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1582</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with the given Java &lt;code&gt;Object&lt;/code&gt;.
                              For integral values, the   &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used (for example,  an instance of the class &lt;code&gt;Integer&lt;/code&gt; for an &lt;code&gt;int&lt;/code&gt;).   &lt;p&gt;The given Java object will be converted to the targetSqlType  before being sent to the database.  &lt;P&gt;  If the object is of a class implementing &lt;code&gt;SQLData&lt;/code&gt;,  the rowset should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;  to write the object to an &lt;code&gt;SQLOutput&lt;/code&gt; data stream.  If the object is an instance of a class implementing the &lt;code&gt;Ref&lt;/code&gt;,  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;,  or &lt;code&gt;Clob&lt;/code&gt; interfaces,  the driver uses the default mapping to the corresponding SQL type.   &lt;p&gt;Note that this method may be used to pass datatabase-specific  abstract data types.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1583</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1584</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with a Java &lt;code&gt;Object&lt;/code&gt;.
                              For integral values, the   &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.  This method is like &lt;code&gt;setObject&lt;/code&gt; above, but the scale used is the scale  of the second parameter.  Scalar values have a scale of zero.  Literal  values have the scale present in the literal.    &lt;P&gt;  Even though it is supported, it is not recommended that this method  be called with floating point input values.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1585</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1586</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with a Java &lt;code&gt;Object&lt;/code&gt;.
                              For integral values, the   &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.   &lt;p&gt;The JDBC specification provides a standard mapping from  Java Object types to SQL types.  The driver will convert the   given Java object to its standard SQL mapping before sending it  to the database.   &lt;p&gt;Note that this method may be used to pass datatabase-specific  abstract data types by using a driver-specific Java type.   If the object is of a class implementing &lt;code&gt;SQLData&lt;/code&gt;,  the rowset should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;  to write the object to an &lt;code&gt;SQLOutput&lt;/code&gt; data stream.  If the object is an instance of a class implementing the &lt;code&gt;Ref&lt;/code&gt;,  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;,  or &lt;code&gt;Clob&lt;/code&gt; interfaces,  the driver uses the default mapping to the corresponding SQL type.  &lt;P&gt;  An exception is thrown if there is an ambiguity, for example, if the  object is of a class implementing more than one of these interfaces.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1587</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setObject" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1588</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with the given  &lt;code&gt;Ref&lt;/code&gt; value.
                              The driver will convert this  to the appropriate &lt;code&gt;REF(&amp;lt;structured-type&amp;gt;)&lt;/code&gt; value.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setRef" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Ref</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1589</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setRef" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Ref</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1590</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with the given  &lt;code&gt;Blob&lt;/code&gt; value.
                              The driver will convert this  to the &lt;code&gt;BLOB&lt;/code&gt; value that the &lt;code&gt;Blob&lt;/code&gt; object  represents before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBlob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Blob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1591</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setBlob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Blob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1592</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with the given  &lt;code&gt;Clob&lt;/code&gt; value.
                              The driver will convert this  to the &lt;code&gt;CLOB&lt;/code&gt; value that the &lt;code&gt;Clob&lt;/code&gt; object  represents before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setClob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Clob</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1593</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setClob" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Clob</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1594</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with the given  &lt;code&gt;Array&lt;/code&gt; value.
                              The driver will convert this  to the &lt;code&gt;ARRAY&lt;/code&gt; value that the &lt;code&gt;Array&lt;/code&gt; object  represents before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setArray" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Array</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1595</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setArray" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Array</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1596</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with the given  &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                              The driver will convert this  to an SQL &lt;code&gt;DATE&lt;/code&gt; value, using the given &lt;code&gt;java.util.Calendar&lt;/code&gt;  object to calculate the date.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1597</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setDate" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Date</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1598</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with the given  &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                              The driver will convert this  to an SQL &lt;code&gt;TIME&lt;/code&gt; value, using the given &lt;code&gt;java.util.Calendar&lt;/code&gt;  object to calculate it, before sending it to the database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1599</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTime" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Time</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1600</id>
			<description>
                            Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object's command  with the given  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                              The driver will  convert this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value, using the given  &lt;code&gt;java.util.Calendar&lt;/code&gt; object to calculate it, before sending it to the  database.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1601</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="setTimestamp" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.sql.Timestamp</parameter>
					<parameter>java.util.Calendar</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1602</id>
			<description>
                            Clears the parameters set for this &lt;code&gt;RowSet&lt;/code&gt; object's command.
                              &lt;P&gt;In general, parameter values remain in force for repeated use of a  &lt;code&gt;RowSet&lt;/code&gt; object. Setting a parameter value automatically clears its  previous value.  However, in some cases it is useful to immediately  release the resources used by the current parameter values, which can  be done by calling the method &lt;code&gt;clearParameters&lt;/code&gt;.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="clearParameters" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1603</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="clearParameters" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1604</id>
			<description>
                            Fills this &lt;code&gt;RowSet&lt;/code&gt; object with data.
                                &lt;P&gt;  The &lt;code&gt;execute&lt;/code&gt; method may use the following properties   to create a connection for reading data: url, data source name,   user name, password, transaction isolation, and type map.    The &lt;code&gt;execute&lt;/code&gt; method  may use the following properties   to create a statement to execute a command:  command, read only, maximum field size,   maximum rows, escape processing, and query timeout.  &lt;P&gt;  If the required properties have not been set, an exception is   thrown.  If this method is successful, the current contents of the rowset are   discarded and the rowset's metadata is also (re)set.  If there are   outstanding updates, they are ignored.     &lt;P&gt;  If this &lt;code&gt;RowSet&lt;/code&gt; object does not maintain a continuous connection   with its source of data, it may use a reader (a &lt;code&gt;RowSetReader&lt;/code&gt;   object) to fill itself with data.  In this case, a reader will have been  registered with this &lt;code&gt;RowSet&lt;/code&gt; object, and the method   &lt;code&gt;execute&lt;/code&gt; will call on the reader's &lt;code&gt;readData&lt;/code&gt;  method as part of its implementation.
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="execute" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1605</id>
			<description>if a database access error occurs or any of the             properties necessary for making a connection and creating             a statement have not been set</description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="execute" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1606</id>
			<description>
                            Registers the given listener so that it will be notified of events  that occur on this &lt;code&gt;RowSet&lt;/code&gt; object.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="addRowSetListener" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1607</id>
			<description>
                            Removes the specified listener from the list of components that will be  notified when an event occurs on this &lt;code&gt;RowSet&lt;/code&gt; object.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>RowSet</class-interface>
			<method name="removeRowSetListener" return-type="void">
				<parameters>
					<parameter>javax.sql.RowSetListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1608</id>
			<description>
                            Creates an object handle for the physical connection that  this &lt;code&gt;PooledConnection&lt;/code&gt; object represents.
                              The object  returned is a temporary handle used by application code to refer to  a physical connection (this &lt;code&gt;PooldedConnection&lt;/code&gt; object)   that is being pooled.
                        </description>
			<package>javax.sql</package>
			<class-interface>PooledConnection</class-interface>
			<method name="getConnection" return-type="java.sql.Connection"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1609</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>PooledConnection</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1610</id>
			<description>
                            Closes the physical connection that this &lt;code&gt;PooledConnection&lt;/code&gt;  object represents.
                        </description>
			<package>javax.sql</package>
			<class-interface>PooledConnection</class-interface>
			<method name="close" return-type="void"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1611</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>PooledConnection</class-interface>
			<method name="close" return-type="void">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1612</id>
			<description>
                            Registers the given event listener so that it will be notified  when an event occurs on this &lt;code&gt;PooledConnection&lt;/code&gt; object.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>PooledConnection</class-interface>
			<method name="addConnectionEventListener" return-type="void">
				<parameters>
					<parameter>javax.sql.ConnectionEventListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1613</id>
			<description>
                            Removes the given event listener from the list of components that  will be notified when an event occurs on this  &lt;code&gt;PooledConnection&lt;/code&gt; object.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>PooledConnection</class-interface>
			<method name="removeConnectionEventListener" return-type="void">
				<parameters>
					<parameter>javax.sql.ConnectionEventListener</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1614</id>
			<description>
                            &lt;p&gt;Attempts to establish a connection with the data source that  this &lt;code&gt;DataSource&lt;/code&gt; object represents.
                        </description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="getConnection" return-type="java.sql.Connection"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1615</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1616</id>
			<description>
                            &lt;p&gt;Attempts to establish a connection with the data source that  this &lt;code&gt;DataSource&lt;/code&gt; object represents.
                        </description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1617</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="getConnection" return-type="java.sql.Connection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1618</id>
			<description>
                            &lt;p&gt;Retrieves the log writer for this &lt;code&gt;DataSource&lt;/code&gt;  object.
                               &lt;p&gt;The log writer is a character output stream to which all logging  and tracing messages for this data source will be  printed.  This includes messages printed by the methods of this  object, messages printed by methods of other objects manufactured  by this object, and so on.  Messages printed to a data source  specific log writer are not printed to the log writer associated  with the &lt;code&gt;java.sql.Drivermanager&lt;/code&gt; class.  When a  &lt;code&gt;DataSource&lt;/code&gt; object is  created, the log writer is initially null; in other words, the  default is for logging to be disabled.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="getLogWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1619</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="getLogWriter" return-type="java.io.PrintWriter">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1620</id>
			<description>
                            &lt;p&gt;Sets the log writer for this &lt;code&gt;DataSource&lt;/code&gt;  object to the given &lt;code&gt;java.io.PrintWriter&lt;/code&gt; object.
                               &lt;p&gt;The log writer is a character output stream to which all logging  and tracing messages for this data source will be  printed.  This includes messages printed by the methods of this  object, messages printed by methods of other objects manufactured  by this object, and so on.  Messages printed to a data source-  specific log writer are not printed to the log writer associated  with the &lt;code&gt;java.sql.Drivermanager&lt;/code&gt; class. When a   &lt;code&gt;DataSource&lt;/code&gt; object is created the log writer is  initially null; in other words, the default is for logging to be  disabled.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="setLogWriter" return-type="void">
				<parameters>
					<parameter>java.io.PrintWriter</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1621</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="setLogWriter" return-type="void">
				<parameters>
					<parameter>java.io.PrintWriter</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1622</id>
			<description>
                            &lt;p&gt;Sets the maximum time in seconds that this data source will wait  while attempting to connect to a database.
                              A value of zero  specifies that the timeout is the default system timeout   if there is one; otherwise, it specifies that there is no timeout.  When a &lt;code&gt;DataSource&lt;/code&gt; object is created, the login timeout is  initially zero.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="setLoginTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1623</id>
			<description>if a database access error occurs.</description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="setLoginTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1624</id>
			<description>
                            Gets the maximum time in seconds that this data source can wait  while attempting to connect to a database.
                              A value of zero  means that the timeout is the default system timeout   if there is one; otherwise, it means that there is no timeout.  When a &lt;code&gt;DataSource&lt;/code&gt; object is created, the login timeout is  initially zero.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="getLoginTimeout" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1625</id>
			<description>if a database access error occurs.</description>
			<package>javax.sql</package>
			<class-interface>DataSource</class-interface>
			<method name="getLoginTimeout" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1626</id>
			<description>
                            Attempts to establish a physical database connection that can  be used as a pooled connection.
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="getPooledConnection" return-type="javax.sql.PooledConnection"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1627</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="getPooledConnection" return-type="javax.sql.PooledConnection">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1628</id>
			<description>
                            Attempts to establish a physical database connection that can  be used as a pooled connection.
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="getPooledConnection" return-type="javax.sql.PooledConnection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1629</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="getPooledConnection" return-type="javax.sql.PooledConnection">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1630</id>
			<description>
                            Retrieves the log writer for this &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt;  object.
                                &lt;p&gt;The log writer is a character output stream to which all logging  and tracing messages for this &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt; object  are printed.  This includes messages printed by the methods of this  object, messages printed by methods of other objects manufactured  by this object, and so on.  Messages printed to a data source-  specific log writer are not printed to the log writer associated  with the &lt;code&gt;java.sql.DriverManager&lt;/code&gt; class.  When a data  source object is created, the log writer is initially null; in other   words, the default is for logging to be disabled.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="getLogWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1631</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="getLogWriter" return-type="java.io.PrintWriter">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1632</id>
			<description>
                            Sets the log writer for this &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt;  object to the given &lt;code&gt;java.io.PrintWriter&lt;/code&gt; object.
                                 &lt;p&gt;The log writer is a character output stream to which all logging  and tracing messages for this &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt;  object are printed.  This includes messages printed by the methods of this  object, messages printed by methods of other objects manufactured  by this object, and so on.  Messages printed to a data source-  specific log writer are not printed to the log writer associated  with the &lt;code&gt;java.sql.Drivermanager&lt;/code&gt; class.  When a data  source object is created, the log writer is initially null; in other   words, the default is for logging to be disabled.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="setLogWriter" return-type="void">
				<parameters>
					<parameter>java.io.PrintWriter</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1633</id>
			<description>if a database access error occurs</description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="setLogWriter" return-type="void">
				<parameters>
					<parameter>java.io.PrintWriter</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1634</id>
			<description>
                            Sets the maximum time in seconds that this   &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt; object will wait  while attempting to connect to a database.
                              A value of zero  specifies that the timeout is the default system timeout   if there is one; otherwise, it specifies that there is no timeout.  When a &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt; object is created,  the login timeout is initially zero.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="setLoginTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1635</id>
			<description>if a database access error occurs.</description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="setLoginTimeout" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1636</id>
			<description>
                            Retrieves the maximum time in seconds that this   &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt; object will wait  while attempting to connect to a database.
                              A value of zero  means that the timeout is the default system timeout   if there is one; otherwise, it means that there is no timeout.  When a &lt;code&gt;DataSource&lt;/code&gt; object is created, its login timeout is  initially zero.
                            
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="getLoginTimeout" return-type="int"/>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1637</id>
			<description>if a database access error occurs.</description>
			<package>javax.sql</package>
			<class-interface>ConnectionPoolDataSource</class-interface>
			<method name="getLoginTimeout" return-type="int">
				<throw>java.sql.SQLException</throw>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1638</id>
			<description>
                            Notifies this &lt;code&gt;ConnectionEventListener&lt;/code&gt; that  the application has called the method &lt;code&gt;close&lt;/code&gt; on its  representation of a pooled connection.
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionEventListener</class-interface>
			<method name="connectionClosed" return-type="void">
				<parameters>
					<parameter>javax.sql.ConnectionEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="false" impl-spec="false" status="active" testable="true">
			<id>1639</id>
			<description>
                            Notifies this &lt;code&gt;ConnectionEventListener&lt;/code&gt; that  a fatal error has occurred and the pooled connection can  no longer be used.
                              The driver makes this notification just  before it throws the application the &lt;code&gt;SQLException&lt;/code&gt;  contained in the given &lt;code&gt;ConnectionEvent&lt;/code&gt; object.
                        </description>
			<package>javax.sql</package>
			<class-interface>ConnectionEventListener</class-interface>
			<method name="connectionErrorOccurred" return-type="void">
				<parameters>
					<parameter>javax.sql.ConnectionEvent</parameter>
				</parameters>
			</method>
		</assertion>
	</assertions>
</javadoc>

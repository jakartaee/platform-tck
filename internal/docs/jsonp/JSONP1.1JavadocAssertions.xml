<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
  <next-available-id>688</next-available-id>
  <previous-id>681</previous-id>
  <technology>JSONP</technology>
  <id>JSON-P</id>
  <name>Java API for JSON Processing</name>
  <version>1.1</version>
  <assertions>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- COMMON ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>6</id>
      <description>Adds a value to the array.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>8</id>
      <description>Adds a value to the array as a JsonString.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>10</id>
      <description>Adds a value to the array as a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>12</id>
      <description>Adds a value to the array as a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>14</id>
      <description>Adds a value to the array as a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>16</id>
      <description>Adds a value to the array as a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>18</id>
      <description>Adds a value to the array as a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>21</id>
      <description>Adds a JsonValue#TRUE or JsonValue#FALSE value to the array.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>25</id>
      <description>Adds a JsonValue#NULL value to the array.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="addNull" return-type="javax.json.JsonArrayBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>37</id>
      <description>Constructs a new runtime exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to #initCause.</description>
      <package>javax.json</package>
      <class-interface>JsonException</class-interface>
      <method name="JsonException" return-type="JsonException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>38</id>
      <description>Constructs a new runtime exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this runtime exception's detail message.</description>
      <package>javax.json</package>
      <class-interface>JsonException</class-interface>
      <method name="JsonException" return-type="JsonException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>40</id>
      <description>Returns this JSON number as a BigDecimal object.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="bigDecimalValue" return-type="java.math.BigDecimal" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>41</id>
      <description>Returns this JSON number as a BigInteger object. This is a a convenience method for bigDecimalValue().toBigInteger(). Note that this conversion can lose information about the overall magnitude and precision of the number value as well as return a result with the opposite sign.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="bigIntegerValue" return-type="java.math.BigInteger" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>42</id>
      <description>Returns this JSON number as a BigInteger object. This is a convenience method for bigDecimalValue().toBigIntegerExact().</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="bigIntegerValueExact" return-type="java.math.BigInteger" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>44</id>
      <description>Returns this JSON number as a double. This is a a convenience method for bigDecimalValue().doubleValue(). Note that this conversion can lose information about the overall magnitude and precision of the number value as well as return a result with the opposite sign.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="doubleValue" return-type="double" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>45</id>
      <description>Returns this JSON number as an int. Note that this conversion can lose information about the overall magnitude and precision of the number value as well as return a result with the opposite sign.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="intValue" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>46</id>
      <description>Returns this JSON number as an int.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="intValueExact" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>48</id>
      <description>Returns this JSON number as a long. Note that this conversion can lose information about the overall magnitude and precision of the number value as well as return a result with the opposite sign.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="longValue" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>49</id>
      <description>Returns this JSON number as a long.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="longValueExact" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>51</id>
      <description>Returns true if this JSON number is a integral number. This method semantics are defined using bigDecimalValue().scale(). If the scale is zero, then it is considered integral type. This integral type information can be used to invoke an appropriate accessor method to obtain a numeric value as in the following example: JsonNumber num = ... if (num.isIntegral()) { num.longValue(); // or other methods to get integral value } else { num.doubleValue(); // or other methods to get decimal number value }</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="isIntegral" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>58</id>
      <description>Adds a name/JsonValue pair to the JSON object associated with this object builder. If the object contains a mapping for the specified name, this method replaces the old value with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>61</id>
      <description>Adds a name/JsonString pair to the JSON object associated with this object builder. If the object contains a mapping for the specified name, this method replaces the old value with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>64</id>
      <description>Adds a name/JsonNumber pair to the JSON object associated with this object builder. If the object contains a mapping for the specified name, this method replaces the old value with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>67</id>
      <description>Adds a name/JsonNumber pair to the JSON object associated with this object builder. If the object contains a mapping for the specified name, this method replaces the old value with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>70</id>
      <description>Adds a name/JsonNumber pair to the JSON object associated with this object builder. If the object contains a mapping for the specified name, this method replaces the old value with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>73</id>
      <description>Adds a name/JsonNumber pair to the JSON object associated with this object builder. If the object contains a mapping for the specified name, this method replaces the old value with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>76</id>
      <description>Adds a name/JsonNumber pair to the JSON object associated with this object builder. If the object contains a mapping for the specified name, this method replaces the old value with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>80</id>
      <description>Adds a name/JsonValue#TRUE or name/JsonValue#FALSE pair to the JSON object associated with this object builder. If the object contains a mapping for the specified name, this method replaces the old value with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>86</id>
      <description>Adds a name/JsonValue#NULL pair to the JSON object associated with this object builder where the value is null. If the object contains a mapping for the specified name, this method replaces the old value with null.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="addNull" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>96</id>
      <description>Closes this reader and frees any resources associated with the reader. This method closes the underlying input source.</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="close" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>97</id>
      <description>Creates a JSON reader from a character stream.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createReader" return-type="javax.json.JsonReader">
        <parameters>
          <parameter>java.io.Reader</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>101</id>
      <description>Returns the JSON string value.</description>
      <package>javax.json</package>
      <class-interface>JsonString</class-interface>
      <method name="getString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>102</id>
      <description>Returns the value type of this JSON value.</description>
      <package>javax.json</package>
      <class-interface>JsonValue</class-interface>
      <method name="getValueType" return-type="javax.json.JsonValue.JsonValue.ValueType" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>103</id>
      <description />
      <package>javax.json</package>
      <class-interface>JsonValue.ValueType</class-interface>
      <method name="valueOf" return-type="javax.json.JsonValue.JsonValue.ValueType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>104</id>
      <description />
      <package>javax.json</package>
      <class-interface>JsonValue.ValueType</class-interface>
      <method name="values" return-type="javax.json.JsonValue.JsonValue.ValueType[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>105</id>
      <description />
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="close" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>106</id>
      <description>Creates a JSON writer to write a JSON JsonObject object or JsonArray array structure to the specified character stream.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createWriter" return-type="javax.json.JsonWriter">
        <parameters>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>107</id>
      <description>Writes the specified JSON JsonArray array to the output source. This method needs to be called only once for a writer instance.</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="writeArray" return-type="void">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>110</id>
      <description>Writes the specified JSON JsonObject object to the output source. This method needs to be called only once for a writer instance.</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="writeObject" return-type="void">
        <parameters>
          <parameter>javax.json.JsonObject</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>115</id>
      <description>Closes this generator and frees any resources associated with it. This method closes the underlying output source.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="close" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>117</id>
      <description>Closes this parser and frees any resources associated with the parser. This method closes the underlying input source.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="close" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>120</id>
      <description>Returns true if the JSON number at the current parser state is a integral number. A BigDecimal may be used to store the value internally and this method semantics are defined using its scale(). If the scale is zero, then it is considered integral type. This integral type information can be used to invoke an appropriate accessor method to obtain a numeric value as in the following example: JsonParser parser = ... if (parser.isIntegralNumber()) { parser.getInt(); // or other methods to get integral value } else { parser.getBigDecimal(); }</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="isIntegralNumber" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>122</id>
      <description>Returns a String for the name in a name/value pair, for a string value or a number value. This method should only be called when the parser state is Event#KEY_NAME, Event#VALUE_STRING, or Event#VALUE_NUMBER.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>128</id>
      <description />
      <package>javax.json.stream</package>
      <class-interface>JsonParser.Event</class-interface>
      <method name="valueOf" return-type="javax.json.stream.JsonParser.JsonParser.Event">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>129</id>
      <description />
      <package>javax.json.stream</package>
      <class-interface>JsonParser.Event</class-interface>
      <method name="values" return-type="javax.json.stream.JsonParser.JsonParser.Event[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>131</id>
      <description>Creates a JSON generator for writing JSON to a character stream.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createGenerator" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>133</id>
      <description>Creates a JSON parser from a character stream.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.Reader</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>144</id>
      <description>Creates a JSON generator for writing JSON text to a character stream.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createGenerator" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>146</id>
      <description>Creates a JSON parser from a character stream.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.Reader</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>152</id>
      <description>Creates a JSON provider object. The provider is loaded using the ServiceLoader#load(Class) method. If there are no available service providers, this method returns the default service provider. Users are recommended to cache the result of this method.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="provider" return-type="javax.json.spi.JsonProvider" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>162</id>
      <description>Creates a JSON generator to write JSON text to a character stream. The generator is configured with the factory configuration.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGeneratorFactory</class-interface>
      <method name="createGenerator" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>163</id>
      <description>Creates a JSON generator to write JSON text to a byte stream. Characters written to the stream are encoded into bytes using the specified charset. The generator is configured with the factory's configuration.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGeneratorFactory</class-interface>
      <method name="createGenerator" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
          <parameter>java.nio.charset.Charset</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>164</id>
      <description>Creates a JSON parser from a character stream.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParserFactory</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.Reader</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>165</id>
      <description>Creates a JSON parser from the specified byte stream. The character encoding of the stream is determined as specified in RFC 7159.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParserFactory</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>166</id>
      <description>Creates a JSON parser from the specified JSON object.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParserFactory</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>javax.json.JsonObject</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>167</id>
      <description>Creates a JSON parser from the specified JSON array.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParserFactory</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>168</id>
      <description>Creates a JSON generator for writing JSON to a byte stream.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createGenerator" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>172</id>
      <description>Creates a JSON parser from a byte stream. The character encoding of the stream is determined as specified in RFC 7159.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>178</id>
      <description>Creates a JSON reader from a byte stream. The character encoding of the stream is determined as described in RFC 7159.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createReader" return-type="javax.json.JsonReader">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>181</id>
      <description>Returns a JSON array or object that is represented in the input source. This method needs to be called only once for a reader instance.</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="read" return-type="javax.json.JsonStructure" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>184</id>
      <description>Returns a JSON array that is represented in the input source. This method needs to be called only once for a reader instance.</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readArray" return-type="javax.json.JsonArray" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>185</id>
      <description>Returns a JSON object that is represented in the input source. This method needs to be called only once for a reader instance.</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readObject" return-type="javax.json.JsonObject" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>187</id>
      <description>Creates a JSON writer to write a JSON JsonObject object or JsonArray array structure to the specified byte stream. Characters written to the stream are encoded into bytes using UTF-8 encoding.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createWriter" return-type="javax.json.JsonWriter">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>191</id>
      <description>Writes the specified JSON JsonObject object or JsonArray array to the output source. This method needs to be called only once for a writer instance.</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="write" return-type="void">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>192</id>
      <description>Creates a JSON generator for writing JSON text to a byte stream.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createGenerator" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>196</id>
      <description>Creates a JSON parser from the specified byte stream. The character encoding of the stream is determined as defined in RFC 7159 .</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>200</id>
      <description>Creates a JSON generator to write JSON text to a byte stream. Characters written to the stream are encoded into bytes using UTF-8 encoding. The generator is configured with the factory's configuration.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGeneratorFactory</class-interface>
      <method name="createGenerator" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>201</id>
      <description>Creates a JSON parser from the specified byte stream. The bytes of the stream are decoded to characters using the specified charset.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParserFactory</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.InputStream</parameter>
          <parameter>java.nio.charset.Charset</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>215</id>
      <description>Returns a JSON text representation of the JSON number. The representation is equivalent to BigDecimal#toString().</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>235</id>
      <description>Returns a JSON number as a BigDecimal. The BigDecimal is created using new BigDecimal(getString()). This method should only called when the parser state is Event#VALUE_NUMBER.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getBigDecimal" return-type="java.math.BigDecimal" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>237</id>
      <description>Returns a JSON number as an integer. The returned value is equal to new BigDecimal(getString()).intValue(). Note that this conversion can lose information about the overall magnitude and precision of the number value as well as return a result with the opposite sign. This method should only be called when the parser state is Event#VALUE_NUMBER.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getInt" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>239</id>
      <description>Returns a JSON number as a long. The returned value is equal to new BigDecimal(getString()).longValue(). Note that this conversion can lose information about the overall magnitude and precision of the number value as well as return a result with the opposite sign. This method is only called when the parser state is Event#VALUE_NUMBER.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getLong" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>250</id>
      <description>Compares the specified object with this JsonNumber object for equality. Returns true if and only if the type of the specified object is also JsonNumber and their #bigDecimalValue() objects are equal</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="equals" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>251</id>
      <description>Returns the hash code value for this JsonNumber object. The hash code of a JsonNumber object is defined as the hash code of its #bigDecimalValue() object.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="hashCode" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>254</id>
      <description>Compares the specified object with this JsonString for equality. Returns true if and only if the specified object is also a JsonString, and their #getString() objects are equal.</description>
      <package>javax.json</package>
      <class-interface>JsonString</class-interface>
      <method name="equals" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>255</id>
      <description>Returns the hash code value for this JsonString object. The hash code of a JsonString object is defined to be its #getString() object's hash code.</description>
      <package>javax.json</package>
      <class-interface>JsonString</class-interface>
      <method name="hashCode" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>262</id>
      <description>A convenience method for getJsonNumber(index).intValue().</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>263</id>
      <description>A convenience method for getJsonString(index).getString().</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getString" return-type="java.lang.String">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>264</id>
      <description>A convenience method for getJsonNumber(name).intValue()</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>265</id>
      <description>A convenience method for getJsonString(name).getString()</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getString" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>278</id>
      <description>Constructs a new runtime exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to #initCause.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerationException</class-interface>
      <method name="JsonGenerationException" return-type="JsonGenerationException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>279</id>
      <description>Constructs a new runtime exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this runtime exception's detail message.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerationException</class-interface>
      <method name="JsonGenerationException" return-type="JsonGenerationException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>285</id>
      <description>Constructs a new runtime exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to #initCause.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParsingException</class-interface>
      <method name="JsonParsingException" return-type="JsonParsingException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.stream.JsonLocation</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>286</id>
      <description>Constructs a new runtime exception with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this runtime exception's detail message.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParsingException</class-interface>
      <method name="JsonParsingException" return-type="JsonParsingException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
          <parameter>javax.json.stream.JsonLocation</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>288</id>
      <description>Returns JSON text for this JSON value.</description>
      <package>javax.json</package>
      <class-interface>JsonValue</class-interface>
      <method name="toString" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>289</id>
      <description>Writes the end of the current context. If the current context is an array context, this method writes the end-of-array character (']'). If the current context is an object context, this method writes the end-of-object character ('}'). After writing the end of the current context, the parent context becomes the new current context. If parent context is field context, it is closed.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeEnd" return-type="javax.json.stream.JsonGenerator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>291</id>
      <description>Flushes the underlying output source. If the generator has saved any characters in a buffer, writes them immediately to the underlying output source before flushing it.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="flush" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>292</id>
      <description>Writes a JSON name/value pair in the current object context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>295</id>
      <description>Writes a JSON name/string value pair in the current object context. The specified value is written as JSON string value.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>298</id>
      <description>Writes a JSON name/number value pair in the current object context. The specified value is written as a JSON number value. The string new BigDecimal(value).toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>301</id>
      <description>Writes a JSON name/number value pair in the current object context. The specified value is written as a JSON number value. The specified value's toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>304</id>
      <description>Writes a JSON name/number value pair in the current object context. The specified value is written as a JSON number value. The string new BigDecimal(value).toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>307</id>
      <description>Writes a JSON name/number value pair in the current object context. The specified value is written as a JSON number value. The string new BigDecimal(value).toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>310</id>
      <description>Writes a JSON name/number value pair in the current object context. The specified value is written as a JSON number value. The string BigDecimal.valueOf(double).toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>314</id>
      <description>Writes a JSON name/boolean value pair in the current object context. If value is true, it writes the JSON true value, otherwise it writes the JSON false value.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>317</id>
      <description>Writes the specified value as a JSON value within the current array, field or root context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>319</id>
      <description>Writes the specified value as a JSON string value within the current array, field or root context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>321</id>
      <description>Writes the specified value as a JSON number value within the current array, field or root context. The specified value's toString() is used as the the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>323</id>
      <description>Writes the specified value as a JSON number value within the current array, field or root context. The string new BigDecimal(value).toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>325</id>
      <description>Writes the specified value as a JSON number value within the current array, field or root context. The string new BigDecimal(value).toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>327</id>
      <description>Writes the specified value as a JSON number value within the current array, field or root context. The string new BigDecimal(value).toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>329</id>
      <description>Writes the specified value as a JSON number value within the current array, field or root context. The string BigDecimal.valueOf(value).toString() is used as the text value for writing.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>332</id>
      <description>Writes a JSON true or false value within the current array, field or root context. If value is true, this method writes the JSON true value, otherwise it writes the JSON false value.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>334</id>
      <description>Writes a JSON name/null value pair in an current object context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeNull" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>337</id>
      <description>Writes a JSON null value within the current array, field or root context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeNull" return-type="javax.json.stream.JsonGenerator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>339</id>
      <description>Writes the JSON start array character. It starts a new child array context within which JSON values can be written to the array. This method is valid only in an array context, field context or in no context (when a context is not yet started). This method can only be called once in no context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartArray" return-type="javax.json.stream.JsonGenerator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>340</id>
      <description>Writes the JSON name/start array character pair with in the current object context. It starts a new child array context within which JSON values can be written to the array.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartArray" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>341</id>
      <description>Writes the JSON start object character. It starts a new child object context within which JSON name/value pairs can be written to the object. This method is valid only in an array context, field context or in no context (when a context is not yet started). This method can only be called once in no context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartObject" return-type="javax.json.stream.JsonGenerator" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>342</id>
      <description>Writes the JSON name/start object character pair in the current object context. It starts a new child object context within which JSON name/value pairs can be written to the object.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartObject" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>375</id>
      <description>Returns true if there are more parsing states. This method returns false if the parser reaches the end of the JSON text.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="hasNext" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>376</id>
      <description>Returns the event for the next parsing state.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="next" return-type="javax.json.stream.JsonParser.JsonParser.Event" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>383</id>
      <description>Returns the char sequence for the JSON String value</description>
      <package>javax.json</package>
      <class-interface>JsonString</class-interface>
      <method name="getChars" return-type="java.lang.CharSequence" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>400</id>
      <description>Adds a JsonObject from an object builder to the array.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonObjectBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>401</id>
      <description>Adds a JsonArray from an array builder to the array.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonArrayBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>402</id>
      <description>Returns the current array.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="build" return-type="javax.json.JsonArray" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>403</id>
      <description>Creates a JSON array builder</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>404</id>
      <description>Adds a name/JsonObject pair to the JSON object associated with this object builder. The value JsonObject is built from the specified object builder. If the object contains a mapping for the specified name, this method replaces the old value with the JsonObject from the specified object builder.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonObjectBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>406</id>
      <description>Adds a name/JsonArray pair to the JSON object associated with this object builder. The value JsonArray is built from the specified array builder. If the object contains a mapping for the specified name, this method replaces the old value with the JsonArray from the specified array builder.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonArrayBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>408</id>
      <description>Returns the JSON object associated with this object builder. The iteration order for the JsonObject is based on the order in which name/value pairs are added to the object using this builder.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="build" return-type="javax.json.JsonObject" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>409</id>
      <description>Creates a JSON object builder</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>416</id>
      <description>Creates a generator factory for creating JsonGenerator objects. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createGeneratorFactory" return-type="javax.json.stream.JsonGeneratorFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>417</id>
      <description>Creates a parser factory for creating JsonParser objects. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createParserFactory" return-type="javax.json.stream.JsonParserFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>419</id>
      <description>Creates a JSON reader from a character stream. The reader is configured with the factory configuration.</description>
      <package>javax.json</package>
      <class-interface>JsonReaderFactory</class-interface>
      <method name="createReader" return-type="javax.json.JsonReader">
        <parameters>
          <parameter>java.io.Reader</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>420</id>
      <description>Creates a JSON reader from a byte stream. The bytes of the stream are decoded to characters using the specified charset. The reader is configured with the factory configuration.</description>
      <package>javax.json</package>
      <class-interface>JsonReaderFactory</class-interface>
      <method name="createReader" return-type="javax.json.JsonReader">
        <parameters>
          <parameter>java.io.InputStream</parameter>
          <parameter>java.nio.charset.Charset</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>422</id>
      <description>Creates a JSON writer to write a JSON JsonObject object or JsonArray array structure to the specified character stream. The writer is configured with the factory configuration.</description>
      <package>javax.json</package>
      <class-interface>JsonWriterFactory</class-interface>
      <method name="createWriter" return-type="javax.json.JsonWriter">
        <parameters>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>423</id>
      <description>Creates a JSON writer to write a JSON JsonObject object or JsonArray array structure to the specified byte stream. Characters written to the stream are encoded into bytes using UTF-8 encoding. The writer is configured with the factory configuration.</description>
      <package>javax.json</package>
      <class-interface>JsonWriterFactory</class-interface>
      <method name="createWriter" return-type="javax.json.JsonWriter">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>424</id>
      <description>Creates a JSON writer to write a JSON JsonObject object or JsonArray array structure to the specified byte stream. Characters written to the stream are encoded into bytes using the specified charset. The writer is configured with the factory configuration.</description>
      <package>javax.json</package>
      <class-interface>JsonWriterFactory</class-interface>
      <method name="createWriter" return-type="javax.json.JsonWriter">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
          <parameter>java.nio.charset.Charset</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>425</id>
      <description>Creates a generator factory for creating JsonGenerator instances. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createGeneratorFactory" return-type="javax.json.stream.JsonGeneratorFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>426</id>
      <description>Creates a parser factory for creating JsonParser instances. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createParserFactory" return-type="javax.json.stream.JsonParserFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>427</id>
      <description>Returns a read-only map of supported provider specific configuration properties that are used to configure the JSON generators. If there are any specified configuration properties that are not supported by the provider, they won't be part of the returned map.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGeneratorFactory</class-interface>
      <method name="getConfigInUse" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>428</id>
      <description>Returns a read-only map of supported provider specific configuration properties that are used to configure the JSON parsers. If there are any specified configuration properties that are not supported by the provider, they won't be part of the returned map.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParserFactory</class-interface>
      <method name="getConfigInUse" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>429</id>
      <description>Creates a JSON reader from a byte stream. The character encoding of the stream is determined as described in RFC 7159. The reader is configured with the factory configuration.</description>
      <package>javax.json</package>
      <class-interface>JsonReaderFactory</class-interface>
      <method name="createReader" return-type="javax.json.JsonReader">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>430</id>
      <description>Returns the boolean value at the specified position. If the value at the specified position is JsonValue.TRUE this method returns true. If the value at the specified position is JsonValue.FALSE this method returns false.</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>433</id>
      <description>Returns the boolean value at the specified position. If the value at the specified position is JsonValue.TRUE this method returns true. If the value at the specified position is JsonValue.FALSE this method returns false. Otherwise this method returns the specified default value.</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>int</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>434</id>
      <description>Returns the int value of the JsonNumber at the specified position. If the value at that position is a JsonNumber, this method returns javax.json.JsonNumber#intValue(). Otherwise this method returns the specified default value.</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>435</id>
      <description>Returns the String value of JsonString at the specified position in this JSON array values. If JsonString is found, its javax.json.JsonString#getString() is returned. Otherwise, the specified default value is returned.</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getString" return-type="java.lang.String">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>436</id>
      <description>Returns the boolean value of the associated mapping for the specified name. If the associated mapping is JsonValue.TRUE, then returns true. If the associated mapping is JsonValue.FALSE, then returns false.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>439</id>
      <description>Returns the boolean value of the associated mapping for the specified name. If the associated mapping is JsonValue.TRUE, then returns true. If the associated mapping is JsonValue.FALSE, then returns false. Otherwise, the specified default value is returned.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>441</id>
      <description>Returns the int value of the associated JsonNumber mapping for the specified name. If JsonNumber is found, then its javax.json.JsonNumber#intValue() is returned. Otherwise, the specified default value is returned.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>443</id>
      <description>Returns the string value of the associated JsonString mapping for the specified name. If JsonString is found, then its javax.json.JsonString#getString() is returned. Otherwise, the specified default value is returned.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getString" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>445</id>
      <description>Creates a builder factory for creating JsonArrayBuilder and JsonObjectBuilder objects. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createBuilderFactory" return-type="javax.json.JsonBuilderFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>449</id>
      <description>Creates a reader factory for creating JsonReader objects. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createReaderFactory" return-type="javax.json.JsonReaderFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>452</id>
      <description>Creates a writer factory for creating JsonWriter objects. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createWriterFactory" return-type="javax.json.JsonWriterFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>453</id>
      <description>Creates a JsonArrayBuilder instance that is used to build JsonArray</description>
      <package>javax.json</package>
      <class-interface>JsonBuilderFactory</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>454</id>
      <description>Creates a JsonObjectBuilder instance that is used to build JsonObject.</description>
      <package>javax.json</package>
      <class-interface>JsonBuilderFactory</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>455</id>
      <description>Returns read-only map of supported provider specific configuration properties that are used to configure the created JSON builders. If there are any specified configuration properties that are not supported by the provider, they won't be part of the returned map.</description>
      <package>javax.json</package>
      <class-interface>JsonBuilderFactory</class-interface>
      <method name="getConfigInUse" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>459</id>
      <description>Returns read-only map of supported provider specific configuration properties that are used to configure the created JSON readers. If there are any specified configuration properties that are not supported by the provider, they won't be part of the returned map.</description>
      <package>javax.json</package>
      <class-interface>JsonReaderFactory</class-interface>
      <method name="getConfigInUse" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>463</id>
      <description>Returns read-only map of supported provider specific configuration properties that are used to configure the created JSON writer objects. If there are any specified configuration properties that are not supported by the provider, they won't be part of the returned map.</description>
      <package>javax.json</package>
      <class-interface>JsonWriterFactory</class-interface>
      <method name="getConfigInUse" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>464</id>
      <description>Creates a JSON array builder.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>465</id>
      <description>Creates a builder factory for creating JsonArrayBuilder and JsonObjectBuilder objects. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createBuilderFactory" return-type="javax.json.JsonBuilderFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>466</id>
      <description>Creates a JSON object builder.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>467</id>
      <description>Creates a JSON reader from a character stream.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createReader" return-type="javax.json.JsonReader">
        <parameters>
          <parameter>java.io.Reader</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>468</id>
      <description>Creates a JSON reader from a byte stream. The character encoding of the stream is determined as described in RFC 7159.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createReader" return-type="javax.json.JsonReader">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>469</id>
      <description>Creates a reader factory for creating JsonReader objects. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createReaderFactory" return-type="javax.json.JsonReaderFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>470</id>
      <description>Creates a JSON writer to write a JSON JsonObject object or JsonArray array structure to the specified character stream.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createWriter" return-type="javax.json.JsonWriter">
        <parameters>
          <parameter>java.io.Writer</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>471</id>
      <description>Creates a JSON writer to write a JSON JsonObject object or JsonArray array structure to the specified byte stream. Characters written to the stream are encoded into bytes using UTF-8 encoding.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createWriter" return-type="javax.json.JsonWriter">
        <parameters>
          <parameter>java.io.OutputStream</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>472</id>
      <description>Creates a writer factory for creating JsonWriter objects. The factory is configured with the specified map of provider specific configuration properties. Provider implementations should ignore any unsupported configuration properties specified in the map.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createWriterFactory" return-type="javax.json.JsonWriterFactory">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>474</id>
      <description>Return the column number (starts with 1 for the first column) for the current JSON event in the input source.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonLocation</class-interface>
      <method name="getColumnNumber" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>475</id>
      <description>Return the line number (starts with 1 for the first line) for the current JSON event in the input source.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonLocation</class-interface>
      <method name="getLineNumber" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>476</id>
      <description>Return the stream offset into the input source this location is pointing to. If the input source is a file or a byte stream then this is the byte offset into that stream, but if the input source is a character media then the offset is the character offset. Returns -1 if there is no offset available.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonLocation</class-interface>
      <method name="getStreamOffset" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>477</id>
      <description>Return the location that corresponds to the parser's current state in the JSON input source. The location information is only valid in the current parser state (or until the parser is advanced to a next state).</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getLocation" return-type="javax.json.stream.JsonLocation" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>478</id>
      <description>Return the location of the incorrect JSON.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParsingException</class-interface>
      <method name="getLocation" return-type="javax.json.stream.JsonLocation" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>481</id>
      <description>Returns a list view of the specified type for the array. This method does not verify if there is a value of wrong type in the array. Providing this typesafe view dynamically may cause a program fail with a ClassCastException, if there is a value of wrong type in this array. Unfortunately, the exception can occur at any time after this method returns.</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getValuesAs" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>490</id>
      <description>Returns the array value at the specified position in this array. This is a convenience method for (JsonArray)get(index).</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonArray" return-type="javax.json.JsonArray">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>493</id>
      <description>Returns the number value at the specified position in this array. This is a convenience method for (JsonNumber)get(index).</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonNumber" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>496</id>
      <description>Returns the object value at the specified position in this array. This is a convenience method for (JsonObject)get(index).</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonObject" return-type="javax.json.JsonObject">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>499</id>
      <description>Returns the string value at ths specified position in this array. This is a convenience method for (JsonString)get(index).</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonString" return-type="javax.json.JsonString">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>506</id>
      <description>Returns true if the value at the specified location in this array is JsonValue.NULL.</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="isNull" return-type="boolean">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>527</id>
      <description>Returns the array value to which the specified name is mapped. This is a convenience method for (JsonArray)get(name) to get the value.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getJsonArray" return-type="javax.json.JsonArray">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>529</id>
      <description>Returns the number value to which the specified name is mapped. This is a convenience method for (JsonNumber)get(name) to get the value.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getJsonNumber" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>531</id>
      <description>Returns the object value to which the specified name is mapped. This is a convenience method for (JsonObject)get(name) to get the value.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getJsonObject" return-type="javax.json.JsonObject">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>533</id>
      <description>Returns the string value to which the specified name is mapped. This is a convenience method for (JsonString)get(name) to get the value.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getJsonString" return-type="javax.json.JsonString">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>539</id>
      <description>Returns true if the associated value for the specified name is JsonValue.NULL.</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="isNull" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>572</id>
      <description>Creates a JSON array builder, initialized with the specified array</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>573</id>
      <description>Creates a JSON array builder, initialized with the content of specified collection.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>574</id>
      <description>Generates a JSON Patch (RFC 6902) from the source and target JsonStructure. The generated JSON Patch need not be unique.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createDiff" return-type="javax.json.JsonPatch">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>575</id>
      <description>Generates a JSON Merge Patch (RFC 7396) from the source and target JsonValues which when applied to the source, yields the target.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createMergeDiff" return-type="javax.json.JsonMergePatch">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>576</id>
      <description>Creates JSON Merge Patch (RFC 7396) from specified JsonValue.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createMergePatch" return-type="javax.json.JsonMergePatch">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>577</id>
      <description>Creates a JSON object builder, initialized with the specified object.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>javax.json.JsonObject</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>578</id>
      <description>Creates a JSON object builder, initialized with the specified object.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>579</id>
      <description>Creates a JSON Patch (RFC 6902) from the specified operations.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createPatch" return-type="javax.json.JsonPatch">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>580</id>
      <description>Creates a JSON Patch builder (RFC 6902).</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createPatchBuilder" return-type="javax.json.JsonPatchBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>581</id>
      <description>Creates a JSON Patch builder (RFC 6902), initialized with the specified operations.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createPatchBuilder" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>582</id>
      <description>Creates JSON Pointer (RFC 6901) from given jsonPointer string. An empty jsonPointer string defines a reference to the target itself. If the jsonPointer string is non-empty, it must be a sequence of '/' prefixed tokens.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createPointer" return-type="javax.json.JsonPointer">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>583</id>
      <description>Creates a JsonString.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createValue" return-type="javax.json.JsonString">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>584</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>585</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>586</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>587</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>588</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>589</id>
      <description>Returns a list view for the array. The value and the type of the elements in the list is specified by the func argument. This method can be used to obtain a list of the unwrapped types, such as List strings = ary1.getValuesAs(JsonString::getString); List ints = ary2.getValuesAs(JsonNumber::intValue); or a list of simple projections, such as List stringsizes = ary1.getValueAs((JsonString v)-&gt;v.getString().length();</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getValuesAs" return-type="java.util.List">
        <parameters>
          <parameter>java.util.function.Function</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>590</id>
      <description>Inserts a value to the array at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>591</id>
      <description>Adds a value to the array as a JsonString at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>592</id>
      <description>Adds a value to the array as a JsonNumber at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>593</id>
      <description>Adds a value to the array as a JsonNumber at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>594</id>
      <description>Adds a value to the array as a JsonNumber at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>595</id>
      <description>Adds a value to the array as a JsonNumber at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>596</id>
      <description>Adds a value to the array as a JsonNumber at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>597</id>
      <description>Adds a JsonValue#TRUE or JsonValue#FALSE value to the array at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>598</id>
      <description>Adds a JsonObject from an object builder to the array at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>javax.json.JsonObjectBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>599</id>
      <description>Adds a JsonArray from an array builder to the array at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>javax.json.JsonArrayBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>600</id>
      <description>Adds all elements of the array in the specified array builder to the array.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="addAll" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonArrayBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>601</id>
      <description>Adds a JsonValue#NULL value to the array at the specified position. Shifts the value currently at that position (if any) and any subsequent values to the right (adds one to their indices). Index starts with 0.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="addNull" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>602</id>
      <description>Remove the value in the array at the specified position. Shift any subsequent values to the left (subtracts one from their indices.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="remove" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>603</id>
      <description>Replaces a value in the array with the specified value at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>604</id>
      <description>Replaces a value in the array with the specified value as a JsonString at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>605</id>
      <description>Replaces a value in the array with the specified value as a JsonNumber at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>606</id>
      <description>Replaces a value in the array with the specified value as a JsonNumber at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>607</id>
      <description>Replaces a value in the array with the specified value as a JsonNumber at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>608</id>
      <description>Replaces a value in the array with the specified value as a JsonNumber at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>609</id>
      <description>Replaces a value in the array with the specified value as a JsonNumber at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>610</id>
      <description>Replaces a value in the array with a JsonValue#TRUE or JsonValue#FALSE value at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>611</id>
      <description>Replaces a value in the array with the specified value as a JsonObject from an object builder at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>javax.json.JsonObjectBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>612</id>
      <description>Replaces a value in the array with the specified value as a JsonArray from an array builder at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="set" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
          <parameter>javax.json.JsonArrayBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>613</id>
      <description>Replaces a value in the array with a JsonValue#NULL value at the specified position.</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="setNull" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>614</id>
      <description>Creates a JsonArrayBuilder instance, initialized with an array.</description>
      <package>javax.json</package>
      <class-interface>JsonBuilderFactory</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>615</id>
      <description>Creates a JsonObjectBuilder instance, initialized with an object.</description>
      <package>javax.json</package>
      <class-interface>JsonBuilderFactory</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>javax.json.JsonObject</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>616</id>
      <description>Applies the JSON Merge Patch to the specified target. The target is not modified by the patch.</description>
      <package>javax.json</package>
      <class-interface>JsonMergePatch</class-interface>
      <method name="apply" return-type="javax.json.JsonValue">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>617</id>
      <description>Returns the JsonMergePatch as JsonValue.</description>
      <package>javax.json</package>
      <class-interface>JsonMergePatch</class-interface>
      <method name="toJsonValue" return-type="javax.json.JsonValue" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>618</id>
      <description>Adds all name/value pairs in the JSON object associated with the specified object builder to the JSON object associated with this object builder. The newly added name/value pair will replace any existing name/value pair with the same name.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="addAll" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>javax.json.JsonObjectBuilder</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>619</id>
      <description>Remove the name/value pair from the JSON object associated with this object builder if it is present.</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="remove" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>620</id>
      <description>Applies the patch operations to the specified target. The target is not modified by the patch.</description>
      <package>javax.json</package>
      <class-interface>JsonPatch</class-interface>
      <method name="apply" return-type="javax.json.JsonStructure">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>621</id>
      <description>Returns the JsonPatch as JsonArray.</description>
      <package>javax.json</package>
      <class-interface>JsonPatch</class-interface>
      <method name="toJsonArray" return-type="javax.json.JsonArray" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>622</id>
      <description>Returns the enum constant with the specified name.</description>
      <package>javax.json</package>
      <class-interface>JsonPatch.Operation</class-interface>
      <method name="fromOperationName" return-type="javax.json.JsonPatch.JsonPatch.Operation">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>623</id>
      <description>Returns enum constant name as lower case string.</description>
      <package>javax.json</package>
      <class-interface>JsonPatch.Operation</class-interface>
      <method name="operationName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>624</id>
      <description />
      <package>javax.json</package>
      <class-interface>JsonPatch.Operation</class-interface>
      <method name="valueOf" return-type="javax.json.JsonPatch.JsonPatch.Operation">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>625</id>
      <description />
      <package>javax.json</package>
      <class-interface>JsonPatch.Operation</class-interface>
      <method name="values" return-type="javax.json.JsonPatch.JsonPatch.Operation[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>626</id>
      <description>Adds an "add" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>627</id>
      <description>Adds an "add" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>628</id>
      <description>Adds an "add" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>629</id>
      <description>Adds an "add" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>630</id>
      <description>Returns the JSON Patch.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="build" return-type="javax.json.JsonPatch" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>631</id>
      <description>Adds a "copy" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="copy" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>632</id>
      <description>Adds a "move" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="move" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>633</id>
      <description>Adds a "remove" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="remove" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>634</id>
      <description>Adds a "replace" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="replace" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>635</id>
      <description>Adds a "replace" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="replace" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>636</id>
      <description>Adds a "replace" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="replace" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>637</id>
      <description>Adds a "replace" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="replace" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>638</id>
      <description>Adds a "test" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="test" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>639</id>
      <description>Adds a "test" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="test" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>640</id>
      <description>Adds a "test" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="test" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>641</id>
      <description>Adds a "test" JSON Patch operation.</description>
      <package>javax.json</package>
      <class-interface>JsonPatchBuilder</class-interface>
      <method name="test" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>642</id>
      <description>Adds or replaces a value at the referenced location in the specified target with the specified value. If the reference is the target (empty JSON Pointer string), the specified value, which must be the same type as specified target, is returned. If the reference is an array element, the specified value is inserted into the array, at the referenced index. The value currently at that location, and any subsequent values, are shifted to the right (adds one to the indices). Index starts with 0. If the reference is specified with a "-", or if the index is equal to the size of the array, the value is appended to the array. If the reference is a name/value pair of a JsonObject, and the referenced value exists, the value is replaced by the specified value. If the value does not exist, a new name/value pair is added to the object.</description>
      <package>javax.json</package>
      <class-interface>JsonPointer</class-interface>
      <method name="add" return-type="javax.json.JsonStructure">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>643</id>
      <description>Returns the value at the referenced location in the specified target.</description>
      <package>javax.json</package>
      <class-interface>JsonPointer</class-interface>
      <method name="getValue" return-type="javax.json.JsonValue">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>644</id>
      <description>Removes the value at the reference location in the specified target.</description>
      <package>javax.json</package>
      <class-interface>JsonPointer</class-interface>
      <method name="remove" return-type="javax.json.JsonStructure">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>645</id>
      <description>Replaces the value at the referenced location in the specified target with the specified value.</description>
      <package>javax.json</package>
      <class-interface>JsonPointer</class-interface>
      <method name="replace" return-type="javax.json.JsonStructure">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>646</id>
      <description>Returns a JSON value that is represented in the input source. This method needs to be called only once for a reader instance.</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readValue" return-type="javax.json.JsonValue" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>647</id>
      <description>Get the value referenced by the provided JSON Pointer in the JsonStructure.</description>
      <package>javax.json</package>
      <class-interface>JsonStructure</class-interface>
      <method name="getValue" return-type="javax.json.JsonValue">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>648</id>
      <description>Return the JsonValue as a JsonArray</description>
      <package>javax.json</package>
      <class-interface>JsonValue</class-interface>
      <method name="asJsonArray" return-type="javax.json.JsonArray" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>649</id>
      <description>Return the JsonValue as a JsonObject</description>
      <package>javax.json</package>
      <class-interface>JsonValue</class-interface>
      <method name="asJsonObject" return-type="javax.json.JsonObject" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>650</id>
      <description>Writes the specified JsonValue to the output source. method needs to be called only once for a write instance.</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="write" return-type="void">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>651</id>
      <description>Creates a JSON array builder, initialized with the specified array.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>652</id>
      <description>Creates a JSON array builder, initialized with the specified collection.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>653</id>
      <description>Generates a JSON Patch (RFC 6902) from the source and target JsonStructure. The generated JSON Patch need not be unique.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createDiff" return-type="javax.json.JsonPatch">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>654</id>
      <description>Generates a JSON Merge Patch (RFC 7396) from the source and target JsonValues which when applied to the source, yields the target.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createMergeDiff" return-type="javax.json.JsonMergePatch">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>655</id>
      <description>Creates JSON Merge Patch (RFC 7396) from specified JsonValue.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createMergePatch" return-type="javax.json.JsonMergePatch">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>656</id>
      <description>Creates a JSON object builder, initialized with the specified object.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>javax.json.JsonObject</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>657</id>
      <description>Creates a JSON object builder, initialized with the specified Map.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>658</id>
      <description>Creates a JSON Patch (RFC 6902) from the specified operations.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createPatch" return-type="javax.json.JsonPatch">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>659</id>
      <description>Creates a JSON Patch builder (RFC 6902).</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createPatchBuilder" return-type="javax.json.JsonPatchBuilder" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>660</id>
      <description>Creates a JSON Patch builder (RFC 6902), initialized with the specified operations.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createPatchBuilder" return-type="javax.json.JsonPatchBuilder">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>661</id>
      <description>Creates JSON Pointer (RFC 6901) from given jsonPointer string. An empty jsonPointer string defines a reference to the target itself. If the jsonPointer string is non-empty, it must be a sequence of '/' prefixed tokens.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createPointer" return-type="javax.json.JsonPointer">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>662</id>
      <description>Creates a JsonString.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createValue" return-type="javax.json.JsonString">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>663</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>664</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>long</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>665</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>double</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>666</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>667</id>
      <description>Creates a JsonNumber.</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createValue" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>668</id>
      <description>Constructs a java.util.stream.Collector that implements a "group by" operation on the input JsonValue elements. A classifier function maps the input JsonValues to keys, and the JsonValues are partitioned into groups according to the value of the key. A reduction operation is performed on the JsonValues in each group, using the downstream Collector. For each group, the key and the results of the reduction operation become the name/value pairs of the resultant JsonObject.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonCollectors</class-interface>
      <method name="groupingBy" return-type="java.util.stream.Collector">
        <parameters>
          <parameter>java.util.function.Function</parameter>
          <parameter>java.util.stream.Collector</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>669</id>
      <description>Constructs a java.util.stream.Collector that implements a "group by" operation on the input JsonValue elements. A classifier function maps the input JsonValues to keys, and the JsonValues are partitioned into groups according to the value of the key. The JsonValues in each group are added to a JsonArray. The key and the JsonArray in each group becomes the name/value pair of the resultant JsonObject.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonCollectors</class-interface>
      <method name="groupingBy" return-type="java.util.stream.Collector">
        <parameters>
          <parameter>java.util.function.Function</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>670</id>
      <description>Constructs a java.util.stream.Collector that accumulates the input JsonValue elements into a JsonArray.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonCollectors</class-interface>
      <method name="toJsonArray" return-type="java.util.stream.Collector" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>671</id>
      <description>Constructs a java.util.stream.Collector that accumulates the input JsonValue elements into a JsonObject. The name/value pairs of the JsonObject are computed by applying the provided mapping functions.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonCollectors</class-interface>
      <method name="toJsonObject" return-type="java.util.stream.Collector">
        <parameters>
          <parameter>java.util.function.Function</parameter>
          <parameter>java.util.function.Function</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>672</id>
      <description>Writes the JSON name with a colon. It starts a field context, in which valid options are writing a value, starting an object or an array. Writing value closes field context, if object or array is started after field name, field context will be closed after object/array close.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeKey" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>673</id>
      <description>Returns a JsonArray and advance the parser to the the corresponding END_ARRAY.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getArray" return-type="javax.json.JsonArray" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>674</id>
      <description>Returns a stream of the JsonArray elements. The parser state must be START_ARRAY. The elements are read lazily, on an as-needed basis, as required by the stream operations. If the stream operations do not consume all of the array elements, #skipArray() can be used to skip the unprocessed array elements.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getArrayStream" return-type="java.util.stream.Stream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>675</id>
      <description>Returns a JsonObject and advances the parser to the corresponding END_OBJECT.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getObject" return-type="javax.json.JsonObject" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>676</id>
      <description>Returns a stream of the JsonObject's name/value pairs. The parser state must be START_OBJECT. The name/value pairs are read lazily, on an as-needed basis, as required by the stream operations. If the stream operations do not consume all of the object's name/value pairs, #skipObject() can be used to skip the unprocessed elements.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getObjectStream" return-type="java.util.stream.Stream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>677</id>
      <description>Returns a JsonValue at the current parser position. If the parser state is START_ARRAY, the behavior is the same as #getArray. If the parser state is START_OBJECT, the behavior is the same as #getObject. For all other cases, if applicable, the JSON value is read and returned.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getValue" return-type="javax.json.JsonValue" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>678</id>
      <description>Returns a stream of JsonValue from a sequence of JSON values. The values are read lazily, on an as-needed basis, as needed by the stream operations.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getValueStream" return-type="java.util.stream.Stream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>679</id>
      <description>Advance the parser to END_ARRAY. If the parser is in array context, i.e. it has previously encountered a START_ARRAY without encountering the corresponding END_ARRAY, the parser is advanced to the corresponding END_ARRAY. If the parser is not in any array context, nothing happens.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="skipArray" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>680</id>
      <description>Advance the parser to END_OBJECT. If the parser is in object context, i.e. it has previously encountered a START_OBJECT without encountering the corresponding END_OBJECT, the parser is advanced to the corresponding END_OBJECT. If the parser is not in any object context, nothing happens.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="skipObject" return-type="void" />
    </assertion>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- REMOVED ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>20</id>
      <description>if the value is Not-a-Number(NaN) or infinity</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>double</parameter>
        </parameters>
        <throw>java.lang.NumberFormatException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>43</id>
      <description>if the number has a nonzero fractional part</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="bigIntegerValueExact" return-type="java.math.BigInteger">
        <throw>java.lang.ArithmeticException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>47</id>
      <description>if the number has a nonzero fractional part or if it does not fit in an int</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="intValueExact" return-type="int">
        <throw>java.lang.ArithmeticException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>50</id>
      <description>if the number has a non-zero fractional part or if it does not fit in a long</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="longValueExact" return-type="long">
        <throw>java.lang.ArithmeticException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>79</id>
      <description>if the value is Not-a-Number(NaN) or infinity</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>double</parameter>
        </parameters>
        <throw>java.lang.NumberFormatException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>108</id>
      <description>if the specified JSON object cannot be written due to i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="writeArray" return-type="void">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>109</id>
      <description>if writeArray, writeObject, write or close method is already called</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="writeArray" return-type="void">
        <parameters>
          <parameter>javax.json.JsonArray</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>111</id>
      <description>if the specified JSON object cannot be written due to i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="writeObject" return-type="void">
        <parameters>
          <parameter>javax.json.JsonObject</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>112</id>
      <description>if writeArray, writeObject, write or close method is already called</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="writeObject" return-type="void">
        <parameters>
          <parameter>javax.json.JsonObject</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>121</id>
      <description>when the parser state is not VALUE_NUMBER</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="isIntegralNumber" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>123</id>
      <description>when the parser state is not KEY_NAME, VALUE_STRING, or VALUE_NUMBER</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getString" return-type="java.lang.String">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>182</id>
      <description>if a JSON object or array cannot be created due to i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="read" return-type="javax.json.JsonStructure">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>183</id>
      <description>if read, readObject, readArray or close method is already called</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="read" return-type="javax.json.JsonStructure">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>207</id>
      <description>if encoding cannot be determined or i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>217</id>
      <description>if a JSON array cannot be created due to i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readArray" return-type="javax.json.JsonArray">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>218</id>
      <description>if read, readObject, readArray or close method is already called</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readArray" return-type="javax.json.JsonArray">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>219</id>
      <description>if a JSON object cannot be created due to i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readObject" return-type="javax.json.JsonObject">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>220</id>
      <description>if read, readObject, readArray or close method is already called</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readObject" return-type="javax.json.JsonObject">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>221</id>
      <description>if the specified JSON object cannot be written due to i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="write" return-type="void">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>222</id>
      <description>if writeArray, writeObject, write or close method is already called</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="write" return-type="void">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>223</id>
      <description>if encoding cannot be determined or i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json.spi</package>
      <class-interface>JsonProvider</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>225</id>
      <description>if encoding cannot be determined or i/o error (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParserFactory</class-interface>
      <method name="createParser" return-type="javax.json.stream.JsonParser">
        <parameters>
          <parameter>java.io.InputStream</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>236</id>
      <description>when the parser state is not VALUE_NUMBER</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getBigDecimal" return-type="java.math.BigDecimal">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>238</id>
      <description>when the parser state is not VALUE_NUMBER</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getInt" return-type="int">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>240</id>
      <description>when the parser state is not VALUE_NUMBER</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="getLong" return-type="long">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>290</id>
      <description>if this method is called in no context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeEnd" return-type="javax.json.stream.JsonGenerator">
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>293</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>296</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>297</id>
      <description>if this method is not called within an object context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>299</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>302</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>303</id>
      <description>if this method is not called within an object context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>305</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>306</id>
      <description>if this method is not called within an object context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>308</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>long</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>309</id>
      <description>if this method is not called within an object context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>long</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>311</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>double</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>312</id>
      <description>if this method is not called within an object context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>double</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>315</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>316</id>
      <description>if this method is not called within an object context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>331</id>
      <description>if the value is Not-a-Number(NaN) or infinity.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>double</parameter>
        </parameters>
        <throw>java.lang.NumberFormatException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>335</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeNull" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>336</id>
      <description>if this method is not called within an object context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeNull" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>343</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeEnd" return-type="javax.json.stream.JsonGenerator">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>344</id>
      <description>if the value for specified name mapping is not assignable to JsonNumber</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>345</id>
      <description>if the value for specified name mapping is not assignable to JsonString</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getString" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>346</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="close" return-type="void">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>347</id>
      <description>if this method is not called within an object context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>348</id>
      <description>if this method is not called within an object context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>349</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>350</id>
      <description>if this method is not called within an array context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>351</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>352</id>
      <description>if this method is not called within an array context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>353</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>354</id>
      <description>if this method is not called within an array context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>355</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>356</id>
      <description>if this method is not called within an array context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>357</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>358</id>
      <description>if this method is not called within an array context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>359</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>long</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>360</id>
      <description>if this method is not called within an array context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>long</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>361</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>double</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>362</id>
      <description>if this method is not called within an array context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>double</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>363</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>364</id>
      <description>if this method is not called within an array context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>365</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeNull" return-type="javax.json.stream.JsonGenerator">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>366</id>
      <description>if this method is not called within an array context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeNull" return-type="javax.json.stream.JsonGenerator">
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>367</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartArray" return-type="javax.json.stream.JsonGenerator">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>368</id>
      <description>if this method is called within an object context or if called more than once in no context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartArray" return-type="javax.json.stream.JsonGenerator">
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>369</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartArray" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>370</id>
      <description>if this method is not called within an object context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartArray" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>371</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartObject" return-type="javax.json.stream.JsonGenerator">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>372</id>
      <description>if this method is called within an object context or if it is called more than once in no context.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartObject" return-type="javax.json.stream.JsonGenerator">
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>373</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartObject" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>374</id>
      <description>if this method is not called within an object context</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="writeStartObject" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>377</id>
      <description>if the index is out of range</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>378</id>
      <description>if the value at the specified position is not assignable to JsonNumber</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>379</id>
      <description>if the index is out of range</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getString" return-type="java.lang.String">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>380</id>
      <description>if the value at the specified position is not assignable to JsonString</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getString" return-type="java.lang.String">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>381</id>
      <description>if an incomplete JSON is generated</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="close" return-type="void">
        <throw>javax.json.stream.JsonGenerationException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>382</id>
      <description>if the value is Not-a-Number(NaN) or infinity.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="write" return-type="javax.json.stream.JsonGenerator">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>double</parameter>
        </parameters>
        <throw>java.lang.NumberFormatException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>387</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="hasNext" return-type="boolean">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>388</id>
      <description>if the parser encounters invalid JSON when advancing to next state.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="hasNext" return-type="boolean">
        <throw>javax.json.stream.JsonParsingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>389</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="next" return-type="javax.json.stream.JsonParser.JsonParser.Event">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>390</id>
      <description>if the parser encounters invalid JSON when advancing to next state.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="next" return-type="javax.json.stream.JsonParser.JsonParser.Event">
        <throw>javax.json.stream.JsonParsingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>391</id>
      <description>if there are no more parsing states.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="next" return-type="javax.json.stream.JsonParser.JsonParser.Event">
        <throw>java.util.NoSuchElementException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>410</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="close" return-type="void">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>411</id>
      <description>if a JSON object or array cannot be created due to incorrect representation</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="read" return-type="javax.json.JsonStructure">
        <throw>javax.json.stream.JsonParsingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>412</id>
      <description>if a JSON array cannot be created due to incorrect representation</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readArray" return-type="javax.json.JsonArray">
        <throw>javax.json.stream.JsonParsingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>413</id>
      <description>if a JSON object cannot be created due to incorrect representation</description>
      <package>javax.json</package>
      <class-interface>JsonReader</class-interface>
      <method name="readObject" return-type="javax.json.JsonObject">
        <throw>javax.json.stream.JsonParsingException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>414</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json</package>
      <class-interface>JsonWriter</class-interface>
      <method name="close" return-type="void">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>415</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonParser</class-interface>
      <method name="close" return-type="void">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>431</id>
      <description>if the index is out of range</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>432</id>
      <description>if the value at the specified position is not assignable to JsonValue.TRUE or JsonValue.FALSE</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>437</id>
      <description>if the specified name doesn't have any mapping</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>438</id>
      <description>if the value for specified name mapping is not assignable to JsonValue.TRUE or JsonValue.FALSE</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getBoolean" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>440</id>
      <description>if the specified name doesn't have any mapping</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getInt" return-type="int">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>442</id>
      <description>if the specified name doesn't have any mapping</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getString" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>491</id>
      <description>if the index is out of range</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonArray" return-type="javax.json.JsonArray">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>492</id>
      <description>if the value at the specified position is not assignable to the JsonArray type</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonArray" return-type="javax.json.JsonArray">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>494</id>
      <description>if the index is out of range</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonNumber" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>495</id>
      <description>if the value at the specified position is not assignable to the JsonNumber type</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonNumber" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>497</id>
      <description>if the index is out of range</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonObject" return-type="javax.json.JsonObject">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>498</id>
      <description>if the value at the specified position is not assignable to the JsonObject type</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonObject" return-type="javax.json.JsonObject">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>500</id>
      <description>if the index is out of range</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonString" return-type="javax.json.JsonString">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>501</id>
      <description>if the value at the specified position is not assignable to the JsonString type</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="getJsonString" return-type="javax.json.JsonString">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>507</id>
      <description>if the index is out of range</description>
      <package>javax.json</package>
      <class-interface>JsonArray</class-interface>
      <method name="isNull" return-type="boolean">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IndexOutOfBoundsException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>528</id>
      <description>if the value to which the specified name is mapped is not assignable to JsonArray type</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getJsonArray" return-type="javax.json.JsonArray">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>530</id>
      <description>if the value to which the specified name is mapped is not assignable to JsonNumber type</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getJsonNumber" return-type="javax.json.JsonNumber">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>532</id>
      <description>if the value to which the specified name is mapped is not assignable to JsonObject type</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getJsonObject" return-type="javax.json.JsonObject">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>534</id>
      <description>if the value to which the specified name is mapped is not assignable to JsonString type</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="getJsonString" return-type="javax.json.JsonString">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.ClassCastException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>540</id>
      <description>if the specified name doesn't have any mapping</description>
      <package>javax.json</package>
      <class-interface>JsonObject</class-interface>
      <method name="isNull" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>551</id>
      <description>if an i/o error occurs (IOException would be cause of JsonException)</description>
      <package>javax.json.stream</package>
      <class-interface>JsonGenerator</class-interface>
      <method name="flush" return-type="void">
        <throw>javax.json.JsonException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>555</id>
      <description>if the specified value is null</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>556</id>
      <description>if the specified value is null</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>557</id>
      <description>if the specified value is null</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>558</id>
      <description>if the specified value is null</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>559</id>
      <description>if the specified builder is null</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonObjectBuilder</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>560</id>
      <description>if the specified builder is null</description>
      <package>javax.json</package>
      <class-interface>JsonArrayBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>javax.json.JsonArrayBuilder</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>561</id>
      <description>if the specified name or value is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonValue</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>562</id>
      <description>if the specified name or value is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>563</id>
      <description>if the specified name or value is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigInteger</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>564</id>
      <description>if the specified name or value is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.math.BigDecimal</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>565</id>
      <description>if the specified name is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>566</id>
      <description>if the specified name is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>long</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>567</id>
      <description>if the specified name is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>double</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>568</id>
      <description>if the specified name is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>boolean</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>569</id>
      <description>if the specified name or builder is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonObjectBuilder</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>570</id>
      <description>if the specified name or builder is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="add" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.json.JsonArrayBuilder</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>571</id>
      <description>if the specified name is null</description>
      <package>javax.json</package>
      <class-interface>JsonObjectBuilder</class-interface>
      <method name="addNull" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.NullPointerException</throw>
      </method>
    </assertion>
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- ********************************************************************************** -->
    <!-- NEW ASSERTIONS LISTED BELOW -->
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>681</id>
      <description>Decodes a passed JSON-pointer string as defined by RFC 6901. This method doesn't validate the passed JSON-pointer string.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="decodePointer" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>682</id>
      <description>Encodes (escapes) a passed string as defined by RFC 6901. This method doesn't validate the passed JSON-pointer string.</description>
      <package>javax.json</package>
      <class-interface>Json</class-interface>
      <method name="encodePointer" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>683</id>
      <description>Creates a JsonArrayBuilder instance, initialized with the content of specified collection.</description>
      <package>javax.json</package>
      <class-interface>JsonBuilderFactory</class-interface>
      <method name="createArrayBuilder" return-type="javax.json.JsonArrayBuilder">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>684</id>
      <description>Creates a JsonObjectBuilder instance, initialized with the specified object.</description>
      <package>javax.json</package>
      <class-interface>JsonBuilderFactory</class-interface>
      <method name="createObjectBuilder" return-type="javax.json.JsonObjectBuilder">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>685</id>
      <description>Returns this JSON number as a Number object.</description>
      <package>javax.json</package>
      <class-interface>JsonNumber</class-interface>
      <method name="numberValue" return-type="java.lang.Number" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>686</id>
      <description>Returns true if there is a value at the referenced location in the specified target.</description>
      <package>javax.json</package>
      <class-interface>JsonPointer</class-interface>
      <method name="containsValue" return-type="boolean">
        <parameters>
          <parameter>javax.json.JsonStructure</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>687</id>
      <description>Constructs a java.util.stream.Collector that accumulates the input Map.Entry elements into a JsonObject.</description>
      <package>javax.json.stream</package>
      <class-interface>JsonCollectors</class-interface>
      <method name="toJsonObject" return-type="java.util.stream.Collector" />
    </assertion>
  </assertions>
</javadoc>


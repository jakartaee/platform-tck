<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:1</id>
<description> client must assume that
			the methods of a web service have no state that is persistent across
			multiple web service method invocations. A client can treat the Web
			service implementation as stateless</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:2</id>
<description> A client uses JNDI lookup
			to access a Service object that implements the Service Interface as
			defined by the JAX-RPC or JAX-WS specification</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:3</id>
<description> The Service object is a
			factory used by the client to get a stub or proxy that implements the
			Service Endpoint Interface. The stub is the client representation of
			an instance of the web service</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4</id>
<description> The Service Interface can
			be a generic javax.xml.rpc.Service interface or a Generated Service
			Interface, which extends javax.xml.rpc.Service, as defined by JAX-RPC or JAX-WS</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:5</id>
<description> A Port has no identity.
			This means that a client cannot compare a Port to other Ports to see
			if they are the same or identical, nor can a client access a specific
			Port instance. A client cannot tell if a server crashes and restarts
			if the crash and restart complete in between web service access</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:6</id>
<description> A client developer starts
			with the Service Endpoint Interface and Service Interface</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:7</id>
<description> A client developer does
			not need to generate stubs during development, nor are they
			encouraged to do so. The client should use the interfaces, and not
			the stubs. Stubs will be generated during deployment and will be
			specific to the vendor's run-time the client will run in</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:8</id>
<description> Each client JNDI lookup of
			a web service is by a logical name. A client developer chooses the
			logical name to be used in the client code and declares it along with
			the required Service Interface in a web service client deployment
			descriptor</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:9</id>
<description> The container must bind
			the Service Interface implementation under the client's environment
			context, java:comp/env, using the logical name of the service
			reference</description>
<location chapter="4" section="2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:14</id>
<description> The deployment time choice
			of whether a stub or dynamic proxy is returned by the getPort or
			get&lt;port name&gt; methods is out of the scope of this
			specification. Container providers are free to offer either one or
			both</description>
<location chapter="4" section="2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:28</id>
<description> With JAX-RPC compnents should not use the getHandlerRegistry() method. A container provider must
			throw a java.lang.UnsupportedOperationException from the
			getHandlerRegistry() method of the Service Interface</description>
<location chapter="4" section="2.3.8" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:29</id>
<description> With JAX-RPC compnents should not use the getTypeMappingRegistry() method.  A container provider must
			throw a java.lang.UnsupportedOperationException from the
			getTypeMappingRegistry method of the Service interface</description>
<location chapter="4" section="2.3.9" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:30</id>
<description> The port that a stub or
			proxy communicates with has no identity within the client view</description>
<location chapter="4" section="2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:31</id>
<description> In JAX-RPC clients are encouraged to
			use PortableRemoteObject.narrow(...). In JAX-WS, proxy classes are not Remote Objects. Hence the use of PortableRemoteObject.narrow(...) is not required.</description>
<location chapter="4" section="2.4.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:32</id>
<description> The JavaEE container
			environment provides a broader set of operational characteristics and
			constraints for supporting the Stub/proxy properties defined within
			JAX-RPC or JAX-WS. While support of the JAX-RPC or JAX-WS required standard properties
			for Stub and Call (only in JAX-RPC) objects is required, their use may not work in all
			cases in a JavaEE environment. The following JAX-RPC properties are not
			recommended for use in a managed context defined by this
			specification: javax.xml.rpc.security.auth.username,
			javax.xml.rpc.security.auth.password. The The following JAX-WS properties are not recommended for use in a managed context defined by this specification: javax.xml.ws.security.auth.username, javax.xml.ws.security.auth.password</description>
<location chapter="4" section="2.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:35</id>
<description> The developer is
			responsible for packaging, either by containment or reference (i.e.
			by using the MANIFEST ClassPath to refer to other JAR files that
			contain the required classes), the class files for each Web service
			including the Service Endpoint Interface classes, Generated Service
			Interface class (if used), and their dependent classes. The following
			files must also be packaged in the module: WSDL files, JAX-RPC
			Mapping files, (not required with JAX-WS) and a Web services client deployment descriptor in a
			JavaEE module. WSDL files are located relative to the root of the module and are typically located in the wsdl directory that is co-located with the module deployment descriptor or a subdirectory of it. JAX-RPC Mapping Files (not required with JAX-WS) are located relative to the root of the module and are typically co-located with the WSDL file. The developer must not package generated stubs. JAX-WS requires support for a OASIS XML Catalogs 1.1 specification to be used when resolving any Web service document that is part of the description of a Web service, specifically WSDL and XML Schema documents. Refer to section 4.4 of JAX-WS specification. The catalog file jax-ws-catalog.xml must be co-located with the module deployment descriptor (WEB-INF/jax-ws-catalog.xml for web modules and META-INF/jax-ws-catalog.xml for the rest).</description>
<location chapter="4" section="2.9" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:36</id>
<description> The Service Endpoint
			Interface (SEI) must follow the JAX-RPC rules for WSDL&lt;-&gt;Java
			mapping.</description>
<location chapter="5" section="3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:37</id>
<description>A
			service implementation bean for a web service can be implemented as a
			Stateless Session EJB as a JAX-RPC or JAX-WS web service.</description>
<location chapter="5" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:38</id>
<description> A
			service implementation bean for a web service can be implemented as a
			JAX-RPC or JAX-WS service endpoint running in a web container. The programming models are fully defined 
			in sections 5.3.2.3 and 5.3.2.4.
			</description>
<location chapter="5" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:39</id>
<description> A Stateless Session Bean,
			as defined by the Enterprise JavaBeans specification, can be used to
			implement a Web service to be deployed in the EJB container</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:250</id>
<description> A Singleton Session Bean,
			as defined by the EJB3.1 specification, can be used to
			implement a JAX-WS Web service to be deployed in the EJB container</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:40</id>
<description> The EJB container is
			required to serialize request flow through any particular instance of
			a Service Implementation Bean</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:41</id>
<description> The Service Implementation
			Bean must have a default public constructor</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:42</id>
<description> The bean must implement
			all the method signatures of the SEI</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:43</id>
<description> The Service Implementation
			Bean methods are not required to throw javax.rmi.RemoteException</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:44</id>
<description> The business methods of
			the bean must be public and must not be final or static</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:45</id>
<description> A Service Implementation
			Bean of a Stateles EJB must be a stateless object. A Service Implementation Bean must
			not save client specific state across method calls either within the
			bean instance's data members or external to the instance</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:251</id>
<description>
A Service Implementation Bean of Singleton EJB can have a shared state. The singleton session bean instance lives for the duration of the application in which it is created. It maintains its state between client invocations.
</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:46</id>
<description> Service implementation EJB
			must be public, must not be final and must not be abstract</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:47</id>
<description> Service implementation EJB
			must not define the finalize() method</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:48</id>
<description> Service implementation EJB Currently, it may use javax.annotation.PostConstruct or javax.annotation.PreDestroy annotation on methods for lifecycle event callbacks. See Enterprise JavaBeans specification section 4.1.4 and 10.7 for more details on this.</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:49</id>
<description> Service implementation EJB be annotated with the jakarta.ejb.Stateless annotation or denoted in the deployment descriptor as a stateless session bean. The bean class no longer implements the jakarta.ejb.SessionBean interface.
			</description>
<location chapter="5" section="3.2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:50</id>
<description> The Enterprise JavaBeans
			specification section 4.4.1 defines the allowed container service
			access requirements.
A stateless session bean that implements a web service endpoint using the JAX-RPC APIs access the JAX-RPC
javax.xml.rpc.handler.MessageContext interface by means of the
SessionContext.getMessageContext method. Refer to section 4.3.6 of the Enterprise JavaBeans
specification (EJB Core Contracts and Requirements)
A stateless or singleton session bean that implements a web service endpoint using the JAX-WS APIs should use the
javax.xml.ws.WebServiceContext, which can be injected by use of the @Resource annotation (see section 2.2 of JSR-250 Common Annotations for Java Platform specification), to access message context and
security information relative to the request being served. The WebServiceContext interface allows the
stateless or singleton session bean instance to get access to the javax.xml.ws.handler.MessageContext. Usage
of a WebServiceContext must meet the requirements defined by the JAX-WS specification section 5.3.
</description>
<location chapter="5" section="3.2.3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:252</id>
<description>
EJB 3.1 introduces Singleton session bean component that provides an easy access to shared state. A Singleton session bean is instantiated once per application. A Singleton session bean must be annotated with the jakarta.ejb.Singleton annotation or denoted in the deployment descriptor as a singleton session bean.

The full requirements for Singleton Session Bean are defined in the section 4.8 of EJB 3.1 specification. 
</description>
<location chapter="5" section="3.2.3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:53</id>
<description> A JAX-RPC Service Endpoint
			must implement javax.servlet.SingleThreadModel if single threaded
			access is required by the component. A container must serialize
			method requests for a Service Implementation Bean that implements the
			SingleThreadModel interface.</description>
<location chapter="5" section="3.2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:54</id>
<description> Service implementation
			bean must have a default public constructor</description>
<location chapter="5" section="3.2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:55</id>
<description> The Service Implementation
			Bean may implement the Service Endpoint Interface as defined by the
			JAX-RPC Servlet model. The bean must implement all the method
			signatures of the SEI. In addition, a Service Implementation Bean may
			be implemented that does not implement the SEI. This additional
			requirement provides the same SEI implementation flexibility as
			provided by EJB service endpoints.</description>
<location chapter="5" section="3.2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:56</id>
<description> The business methods of
			the bean must be public and must not be static. If the Service
			Implementation Bean does not implement the SEI, the business methods
			must not be final. The Service Implementation Bean may implement
			other methods in addition to those defined by the SEI .</description>
<location chapter="5" section="3.2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:57</id>
<description> A Service Implementation
			must be a stateless object. A Service Implementation Bean must not
			save client specific state across method calls either within the bean
			instance's data members or external to the instance. A container may
			use any bean instance to service a request</description>
<location chapter="5" section="3.2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:58</id>
<description> The class must be public,
			must not be final and must not be abstract.</description>
<location chapter="5" section="3.2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:59</id>
<description> The class must not define
			the finalize() method</description>
<location chapter="5" section="3.2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:60</id>
<description> The container must call
			the init method before it can start dispatching requests to the SEI
			methods of the bean. The init method parameter value provided by the
			container is described by the JAX-RPC specification. The bean may use
			the container notification to ready its internal state for receiving
			requests. The container must notify the bean of its intent to remove
			the bean instance from the container's working set by calling the
			destroy method. A container may not call the destroy method while a
			request </description>
<location chapter="5" section="3.2.4.1.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:61</id>
<description> Access to services
			provided by a web container in a JavaEE environment (e.g. transactions,
			JNDI access to the component's environment, etc.) must follow the
			requirements defined by the Servlet and JavaEE specifications.</description>
<location chapter="5" section="3.2.4.1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:63</id>
<description> Access to a
			ServletEndpointContext must meet the requirements defined by the
			JAX-RPC specification section 10.1.3.</description>
<location chapter="5" section="3.2.4.1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:64</id>
<description>
The developer is responsible for packaging, either by containment or reference, the WSDL file (not required
with JAX-WS when annotations are used), Service Endpoint Interface class (optional with JAX-WS), Service
Implementation Bean class, and their dependent classes, JAX-WS generated portable artifacts, JAX-RPC
mapping file (not required with JAX-WS and ignored if specified) along with a Web services deployment
descriptor (not required with JAX-WS when annotations are used) in a Java EE module.
</description>
<location chapter="5" section="4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:65</id>
<description> Stateless or Singleton Session EJB
			Service Implementation Beans are packaged in an EJB-JAR that contains
			the class files and WSDL files. The packaging rules follow those
			defined by the Enterprise JavaBeans specification. In addition, the
			web services deployment descriptor location within the EJB-JAR file
			is META-INF/webservices.xml. The wsdl directory is located at
			META-INF/wsdl.</description>
<location chapter="5" section="4.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:66</id>
<description> JAX-RPC Service Endpoints
			are packaged in a WAR file that contains the class files and WSDL
			files. The packaging rules for the WAR file are those defined by the
			Servlet specification. A web services deployment descriptor is
			located in a WAR at WEB-INF/webservices.xml. The wsdl directory is
			located at META-INF/wsdl.</description>
<location chapter="5" section="4.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:67</id>
<description> Assembly of modules
			containing port components into an EAR file follows the requirements
			defined by the JavaEE specification</description>
<location chapter="5" section="4.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:68</id>
<description> The web container runs the
			methods under an unspecified transaction context.</description>
<location chapter="5" section="5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:69</id>
<description> The EJB container runs the
			methods under the transaction context defined by the
			container-transaction element of the EJB deployment descriptor.</description>
<location chapter="5" section="5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:70</id>
<description> a container provider must
			provide a JAX-RPC or JAX-WS runtime</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:71</id>
<description> Container is responsible
			for Listening on a well known port or on the URI of the Web service
			implementation (as defined in the service's WSDL after deployment)
			for SOAP/HTTP bindings</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:72</id>
<description> Container is responsible
			for parsing the inbound message according to the Service binding</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:73</id>
<description> Container is responsible
			for Mapping the message to the implementation class and method
			according to the Service deployment data</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:74</id>
<description> Container is responsible
			for creating the appropriate Java objects from the SOAP envelope
			according to the JAX-RPC or JAX-WS specification</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:75</id>
<description> Container is responsible
			for invoking the Service Implementation Bean handlers and instance
			method with the appropriate Java parameters</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:76</id>
<description> Container is responsible
			for capturing the response to the invocation if the style is
			request-response</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:77</id>
<description> Container is responsible
			for mapping the Java response objects into SOAP message according to
			the JAX-RPC or JAX-WS specification</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:78</id>
<description> Container is responsible
			for creating the message envelope appropriate for the transport</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:79</id>
<description> Container is responsible
			for sending the message to the originating Web service client</description>
<location chapter="5" section="6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:80</id>
<description> Handlers must be able to
			transform the SOAP header. One example is the addition of a SOAP
			header for application specific information, like customerId, by the
			handler</description>
<location chapter="6" section="2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:81</id>
<description> Handlers must be able to
			transform just parts of the body. This might include changing part
			values within the SOAP body. Encryption of some parameter values is
			an example of this scenario</description>
<location chapter="6" section="2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:82</id>
<description> Handlers must be able to
			just read a message where no additions, transformations, or
			modification to the message is made. Common scenarios are logging,
			metering, and accounting</description>
<location chapter="6" section="2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:84</id>
<description> A JAXRPC Web Services for JavaEE provider is not required to provide an implementation of
			HandlerRegistry</description>
<location chapter="6" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:85</id>
<description> A JAX-WS Web Services for JavaEE provider is required to provide an
			implementation of HandlerResolver that returns the HandlerClain with Handlers specified in the deployment descriptor or the jakarta.jws.HandlerChain annotation</description>
<location chapter="6" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:86</id>
<description> A Web Services for JavaEE
			provider is required to provide all the interfaces of the
			javax.xml.rpc.handler.soap package. The provider must also provide an
			implementation of the SOAPMessageContext interface</description>
<location chapter="6" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:87</id>
<description> The concurrency of a
			JAXRPC handler must match the concurrency of the business logic it is
			associated with</description>
<location chapter="6" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:88</id>
<description> The container must call
			the init method before it can start dispatching requests to the
			handleRequest(), handleResponse(), and handleFault() methods of the
			Handler. The Handler may use the container notification to ready its
			internal state for receiving requests</description>
<location chapter="6" section="2.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:89</id>
<description> Container must notify a
			handler of its intent to remove the instance from the container's
			working set by calling the destroy method</description>
<location chapter="6" section="2.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:90</id>
<description> Container must not call
			the destroy method while a request is being processed by the handler
			instance</description>
<location chapter="6" section="2.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:91</id>
<description> Container must not
			dispatch additional requests to a handler instance after the destroy
			method is called on that instance</description>
<location chapter="6" section="2.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:92</id>
<description> If Handler instances are
			pooled, they must be pooled by Port component</description>
<location chapter="6" section="2.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:93</id>
<description> A Handler must not change
			the message in any way that would cause the previously executed
			authorization check to execute differently</description>
<location chapter="6" section="2.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:94</id>
<description> A Handler.handleRequest()
			method must not change the operation name, number of parts in the
			message, or types of the message parts. A container must throw aSOAP
			fault with a faultcode of soap-env:Server (the namespace identifier
			for the namespace prefix, soap-env:, is
			http://www.w3.org/2001/09/soap-envelope) back to the client if the
			Handler does this</description>
<location chapter="6" section="2.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:95</id>
<description> a Handler.handleResponse()
			method must not change the number of parts in the message, or types
			of the message parts. A container must throw a SOAP fault with a
			faultcode of soap-env:Server back to the client if the Handler does
			this</description>
<location chapter="6" section="2.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:96</id>
<description> Handlers must not
			demarcate transactions using the jakarta.transaction.UserTransaction
			interface.</description>
<location chapter="6" section="2.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:97</id>
<description> A Handler is implemented
			as a stateless instance. A Handler does not maintain any message
			processing (client specific) related state in its instance variables
			across multiple invocations of the handle method</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:98</id>
<description> A Handler class must
			implement the java.xml.rpc.handler.Handler interface.</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:99</id>
<description> The Handler.init() method
			must retain the information defined by HandlerInfo.getHeaders()</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:100</id>
<description> A Handler implementation
			must implement the getHeaders() method to return the results of the
			HandlerInfo.getHeaders() method. The headers that a Handler declares
			it will process (i.e. those returned by the Handler.getHeaders()
			method must be defined in the WSDL definition of the service</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:101</id>
<description> A Handler implementation
			must use the MessageContext to pass information to other Handler
			implementations in the same Handler chain and, in the case of the
			JAX-RPC service endpoint, to the service implementation bean</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:102</id>
<description> A container is required to
			provide an instance of a java.util.Map object in the HandlerInfo
			instance. The HandlerInfo.getHeaders() method must return the set of
			soap-headers defined in the deployment descriptor. The Map object
			must provide access to each of the Handler's init-param name/value
			pairs declared in the deployment descriptor as java.lang.String
			values</description>
<location chapter="6" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:103</id>
<description> The container must provide
			a unique HandlerInfo instance and Map config instance for each
			Handler instance</description>
<location chapter="6" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:104</id>
<description> A unique Handler instance
			must be provided for each Port component declared in the deployment
			descriptor</description>
<location chapter="6" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:105</id>
<description> The container must call
			the init() method within the context of a Port component's
			environment. The container must ensure the Port component's
			env-entrys are setup for the init method to access</description>
<location chapter="6" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:106</id>
<description> The container must provide
			a MessageContext type unique to the request type. For example, the
			container must provide a SOAPMessageContext to the
			handle&lt;action&gt;() methods of a Handler in a handler chain when
			processing a SOAP request. The SOAPMessageContext must contain the
			complete SOAP message</description>
<location chapter="6" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:107</id>
<description> The container must share
			the same MessageContext instance across all Handler instances and the
			target endpoint that are invoked during a single request and response
			or fault processing on a specific node</description>
<location chapter="6" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:108</id>
<description> The container must setup
			the Port component's execution environment before invoking the
			handle&lt;action&gt;() methods of a handler chain. Handlers run
			under the same execution environment as the Port component's business
			methods</description>
<location chapter="6" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:109</id>
<description> Service Implementations
			using a stateless session bean must be defined in the ejb-jar.xml
			deployment descriptor file using the session element.
Service Implementations using a stateless or singleton session bean may use EJB annotations with no deployment descriptor file. If the EJB annotations are not specified then the stateless or singleton session bean must be defined in the ejb-jar.xml deployment descriptor file using the session element. For a stateless or singleton session bean implementation, the ejb-link element associates the port-component with a session element in the ejb-jar.xml. The developer may specify an addressing support for the port-component by using addressing element when JAX-WS based runtime is used.</description>
<location chapter="7" section="1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:110</id>
<description> Service Implementations
			using a JAX-RPC or JAX-WS service endpoint must be defined in the web.xml
			deployment descriptor file using the servlet-class element</description>
<location chapter="7" section="1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:112</id>
<description> The assembler's
			responsibilities for Web Services for JavaEE are an extension of the
			assembler responsibilities as defined by the Enterprise JavaBeans,
			Servlet, and JavaEE specifications</description>
<location chapter="7" section="1.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:113</id>
<description> The deployer
			responsibilities are defined by the JavaEE, Enterprise JavaBeans, and
			Servlet specifications. In addition, the deployer must resolve the
			following information: where published WSDL definitions are placed.
			The deployer must publish every webservice-description wsdl-file with
			the correct port address attribute value to access the service. the
			value of the port address attribute for deployed services.</description>
<location chapter="7" section="1.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:114</id>
<description> Any component that uses a
			Web service reference must declare a dependency on the Web service
			reference in a module's deployment descriptor file.</description>
<location chapter="1" section="1.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:115</id>
<description> Client developers are
			responsible for defining a service-ref for each Web service a
			component in the module wants to reference. It must be defined with
			the following information: service reference name (service), type of
			the Service object (service-interface), and ports
			(port-compoment-ref)</description>
<location chapter="7" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:116</id>
<description> In addition to the
			responsibilities defined within the JavaEE specification, the assembler
			may define the following information: service ref binding
			(port-component-link), new handler init-params, soap-headers, and
			soap-roles. The assembler may modify any of the following information
			that has been specified by the developer in the service-ref: handler
			param-value, soap-header and soap-role elements and description
			elements, WSDL definition</description>
<location chapter="7" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:117</id>
<description> In addition to the normal
			duties a JavaEE deployer plaform role has, the client deployer must
			also provide deploy time binding information to resolve the WSDL
			document for each service-ref. If a partial WSDL document was
			specified and service and port elements are needed by a vendor to
			resolve the binding, they may be generated. The deployer is also
			responsible for providing deploy time binding information to resolve
			port access declared by the port-component-ref element.</description>
<location chapter="7" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:118</id>
<description> A client can use the
			stub/proxy methods of the Service Interface to get a Port stub or
			dynamic proxy</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:119</id>
<description> The WSDL specific methods
			can be used when the full WSDL definition of the service is available
			to the client developer.</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:120</id>
<description> The WSDL agnostic methods
			must be used if the client developer has a partial WSDL definition
			that only contains only the portType and bindings.</description>
<location chapter="4" section="1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:121</id>
<description> The client developer is
			required to define a logical JNDI name for the Web service called a
			service reference. This name is specified in the deployment
			descriptor for the client.</description>
<location chapter="4" section="2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:122</id>
<description> A JavaEE product provider is
			required to provide Service lookup support in the web, EJB, and
			application client containers.</description>
<location chapter="4" section="2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:123</id>
<description> A container provider is
			required to support all methods of the Service interface except for
			the getHandlerRegistry() and getTypeMappingRegistry() methods as
			described in sections 4.2.3.7 and 4.2.3.8.</description>
<location chapter="4" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:124</id>
<description> A client developer must
			declare the Service Interface type used by the application in the
			client deployment descriptor.</description>
<location chapter="4" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:125</id>
<description> With JAX-RPC the client may use the
			following Service Interface methods to obtain a static stub or
			dynamic proxy for a Web service: getPort(QName portName, Class
			serviceEndpointInterface), getPort(java.lang.Class
			serviceEndpointInterface). With JAX-WS the client may use the 
			following Service Interface methods to obtain a proxy for a Web
			service: &lt;T&gt; T getPort(QName portName, Class(T) serviceEndpointInterface);
			&lt;T&gt; T getPort(java.lang.Class(T) serviceEndpointInterface); </description>
<location chapter="4" section="2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:126</id>
<description> The client may also use
			the additional methods of the Generated Service Interface to obtain a
			static stub or dynamic proxy for a Web service.</description>
<location chapter="4" section="2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:127</id>
<description> The container must provide
			at least one of static stub or dynamic proxy support for these
			methods as described in section 4.2.3.</description>
<location chapter="4" section="2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:128</id>
<description> The container must ensure
			the stub or dynamic proxy is fully configured for use by the client,
			before it is returned to the client.</description>
<location chapter="4" section="2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:129</id>
<description> The container provider
			must provide Port resolution for the getPort(java.lang.Class
			serviceEndpointInterface) method.</description>
<location chapter="4" section="2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:130</id>
<description> A client must declare its
			dependency on container Port resolution for a Service Endpoint
			Interface in the client deployment descriptor.</description>
<location chapter="4" section="2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:131</id>
<description> If a dependency for
			resolving the interface argument to a port is not declared in the
			client deployment descriptor, the container may provide a default
			resolution capability or throw a ServiceException.</description>
<location chapter="4" section="2.3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:132</id>
<description> A client may use the
			following DII methods of a Service Interface located by a JNDI lookup
			of the client's environment to obtain a Call object:: createCall(),
			createCall(QName portName), createCall(QName portName, String
			operationName), createCall(QName portName, QName operationName),
			getCalls(QName portName). These methods are not supported in JAX-WS. JAX-WS provides
			the Dispatch APIs to enable the client to operate at XML message level.</description>
<location chapter="4" section="2.3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:133</id>
<description> Use of the JAX-RPC
			ServiceFactory class is not recommended in a Web Services for JavaEE
			product. A Web Services for JavaEE client must obtain a Service
			Interface using JNDI lookup as described in section 4.2.1. Container
			providers are not required to support managed Service instances
			created from a ServiceFactory. The ServiceFactory class has been removed from 
			JAX-WS. It has been replaced by two static methods Service.create(QName serviceName)
			and Service.create(URL wsdlLocation, QName serviceName) for creating Service 
			instances. These methods rely on specific implementations of ServiceDelegate 
			Class in any JAX-WS compliant implementation. The use of these static methods 
	is not recommended in a Web Services for JavaEE product. A Web Services for JavaEE client must 
	obtain a Service Interface/Class using JNDI lookup as described in section 4.2.1. Container 
	providers are not required to support managed Service instances created using these methods.</description>
<location chapter="4" section="2.3.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:135</id>
<description> With JAX-RPC a client developer may use
			the following methods of the Service Interface if a partial WSDL
			definition is declared in the client deployment descriptor:
			createCall(), getPort(java.lang.Class serviceEndpointInterface),
			getServiceName(), getPorts(), getWSDLDocumentLocation(). A partial
			WSDL definition is defined as a fully specified WSDL document which
			contains no service or port elements. The JAX-RPC mapping file
			specified by the developer will not include a
			service-interface-mapping in this case.
	If JAX-WS is used, client developer may use the following methods of the Service class: &lt;T&gt; T getPort(java.lang.Class(T) serviceEndpointInterface); javax.xml.namespace.QName getServiceName(); java.util.Iterator&lt;javax.xml.namespace.QName&gt; getPorts(); java.net.URL getWSDLDocumentLocation(); &lt;T&gt; Dispatch&lt;T&gt; createDispatch(javax.xml.namespace.QName portName, java.lang.Class&lt;T&gt; type, Service.Mode mode); Dispatch&lt;java.lang.Object&gt; createDispatch(javax.xml.namespace.QName portName, javax.xml.bind.JAXBContext context, Service.Mode mode); java.util.concurrent.Executor getExecutor(); void setExecutor(java.util.concurrent.Executor executor);</description>
<location chapter="4" section="2.3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:136</id>
<description> With JAX-RPC a client developer may use
			the following methods of the Service Interface if no WSDL definition
			is specified in the client deployment descriptor: createCall(). With JAX-WS, a client developer may use the following methods of the Service class if no WSDL definition is specified in the client deployment descriptor: &lt;T&gt; Dispatch&lt;T&gt; createDispatch(javax.xml.namespace.QName portName, java.lang.Class&lt;T&gt; type, Service.Mode mode); Dispatch&lt;java.lang.Object&gt; createDispatch(javax.xml.namespace.QName portName, javax.xml.bind.JAXBContext context, Service.Mode mode); java.util.concurrent.Executor getExecutor(); void setExecutor(java.util.concurrent.Executor executor);</description>
<location chapter="4" section="2.3.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:137</id>
<description> With JAX-RPC if the wsdl-file is not
			specified in the deployment descriptor, the jaxrpc-mapping-file must
			not be specified.</description>
<location chapter="4" section="2.3.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:139</id>
<description> A container provider is
			required to support the javax.xml.rpc.service.endpoint.address to
			allow components to dynamically redirect a Stub/proxy to a different
			URI.</description>
<location chapter="4" section="2.4.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:140</id>
<description> The developer must not
			package generated stubs.</description>
<location chapter="4" section="2.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:141</id>
<description> 
This chapter defines the server programming model for Web Services for JavaEE. A WSDL document defines the interoperability of Web services and includes the specification of transport and wire format requirements. In general, WSDL places no requirement on the programming model of the client or the server. Web Services for JavaEE defines two methods of implementing a Web service. It requires the JAXRPC Servlet container based Java class programming model for implementing Web services that run in the web container and it requires the Stateless Session EJB programming model for implementing Web services that run in the EJB container. With JAX-WS, the Servlet based programming model for implementing Web Services is similar to one defined by JAX-RPC. These two implementation methods provide a means for defining a Port component to bring portable applications into the Web Services programming paradigm.
</description> 
<location chapter="5" section="NA" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:142</id>
<description> This specification also
			requires that a developer be able to start simple and grow up to use
			more complex qualities of service.</description>
<location chapter="5" section="NA" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:145</id>
<description> Service Implementation
			Bean implements the same methods and signatures of the SEI, but is
			not required to implement the SEI itself.</description>
<location chapter="5" section="3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:147</id>
<description> A container may use any
			bean instance to service a request.</description>
<location chapter="5" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:148</id>
<description>
A service implementation bean for a web service can be implemented as follows:
    A JAX-RPC or JAX-WS service endpoint running in a web container
    Stateless Session EJB as a JAX-RPC or JAX-WS web service
    Singleton Session EJB as a JAX-WS web service
The programming models are fully defined in sections 5.3.2.3 and 5.3.2.4.
</description>
<location chapter="5" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:149</id>
<description> A Service Implementation
			Bean may implement other methods in addition to those defined by the
			SEI.</description>
<location chapter="5" section="3.2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:150</id>
<description> A Service Implementation
			Bean for the web container may implement the
			java.xml.rpc.server.ServiceLifeCycle interface.</description>
<location chapter="5" section="3.2.4.1.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:151</id>
<description> The container provides
			certain services based on the life cycle state of the Service
			Implementation Bean.</description>
<location chapter="5" section="3.2.4.1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:152</id>
<description> The life cycle of a
			Service Implementation Bean is controlled by the container and is
			illustrated in Figure 6. The methods called by the container are
			container/bean specific, but in general are quite similar. Figure 6
			illustrates the life cycle in the web container. The EJB container
			life cycle may be found in the EJB specification section 4.3.</description>
<location chapter="5" section="3.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:153</id>
<description> Before a request can be
			serviced, the container must instantiate a Service Implementation
			Bean and ready it for method requests. A container readies a bean
			instance by first calling newInstance on the Service Implementation
			Bean class to create an instance. The container then calls the life
			cycle methods on the Service Implementation Bean that are specific to
			the container. For the web container, with JAX-RPC runtime, it calls the init method on the
			instance if the Service Implementation Bean class implements the
			ServiceLifecycle. For web containers with JAX-WS runtime, it calls the method annotated with javax.annotation.PostConstruct annotation. For the EJB container, it calls the setSessionContext and ejbCreate methodsmethod annotated with javax.annotation.PostConstruct annotation . The javax.annotation.PostConstruct callback occurs after any dependency injection has been performed by the container and before the first business method invocation on the bean.</description>
<location chapter="5" section="3.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:154</id>
<description> The container notifies a
			Service Implementation Bean instance that it is about to be removed
			from Method Ready state by calling container/bean specific life cycle
			methods on the instance. For the web container, with JAX-RPC runtime, the destroy method is
			called. For the web container with JAX-WS runtime, the method annotated with javax.annotation.PreDestroy is called. For the EJB container, the method annotated with javax.annotation.PreDestroy is called.</description>
<location chapter="5" section="3.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:155</id>
<description> Port components packaged
			in a WAR file must use a JAX-RPC or JAX-WS Service Endpoint for the Service
			Implementation Bean. Port components packaged in a EJB-JAR file must
			use a Stateless or Singleton Session Bean for the Service Implementation Bean.</description>
<location chapter="5" section="4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:156</id>
<description> A Web Services for JavaEE
			provider is required to provide all interfaces and classes of the
			javax.xml.rpc.handler package and javax.xml.ws.handler package.</description>
<location chapter="6" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:157</id>
<description> Handlers must be loaded
			using the same class loader the application code was loaded with. The
			class loading rules follow the rules defined for the container the
			Handler is running in.</description>
<location chapter="6" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:158</id>
<description> The life cycle of a
			Handler is controlled by the container and is illustrated in Figure
			7.</description>
<location chapter="6" section="2.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:159</id>
<description> As defined by JAX-RPC, a
			RuntimeException (other than SOAPFaultException) thrown from any
			method of the Handler results in the destroy method being invoked and
			transition to the "Does Not Exist" state.</description>
<location chapter="6" section="2.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:160</id>
<description> a Handler may initialize
			internal data members with Port component specific environment
			values.</description>
<location chapter="6" section="2.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:161</id>
<description> Handlers associated with a
			Port component run after authorization has occurred and before the
			business logic method of the Service Implementation bean is
			dispatched to.</description>
<location chapter="6" section="2.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:162</id>
<description> A developer may implement
			zero or more Handlers that are associated with a Port component
			and/or a Service reference.</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:163</id>
<description> A
			Handler.handle&lt;action&gt;() method may access the component's
			environment entries by using JNDI lookup of the
			"java:comp/env" contenxt and accessing the env-entry-names
			defined in the deployment descriptor by performing a JNDI lookup.</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:164</id>
<description> The container may throw a
			java.lang.IllegalStateException if the environment is accessed from
			any other Handler method and the environment is not available.</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:165</id>
<description> the Handler may use
			HandlerInfo.getHandlerConfig() method to access the Handler's
			init-params declared in the deployment descriptor.</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:166</id>
<description> A SOAPMessageContext
			Handler may add or remove headers from the SOAP message. A
			SOAPMessageContext Handler may modify the header of a SOAP message if
			it is not mapped to a parameter or if the modification does not
			change value type of the parameter if it is mapped to a parameter. A
			Handler may modify part values of a message if the modification does
			not change the value type.</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:168</id>
<description> A Handler chain is
			processed according to the JAX-RPC specification section 12.2.2. The
			process order defaults to the order the handlers are defined in the
			deployment descriptor and follow the JAX-RPC specification section
			12.1.4 processing order.</description>
<location chapter="6" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:172</id>
<description> All WSDL file ports must
			have a corresponding port-component element defined.</description>
<location chapter="7" section="1.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:176</id>
<description> A developer may specify
			only the package-mapping if the following conditions are met: (see
			section 7.3.2).</description>
<location chapter="7" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:177</id>
<description> If the conditions are not
			met, a full mapping must be specified. An exception-mapping
			must be created for each WSDL fault. There must be a
			service-interface-mapping for every service element in the WSDL file
			that has a Generated Service Interface used by the developer. There
			must be a service-endpoint-interface-mapping for every combination of
			portType and binding in the WSDL file. There must be a
			package-mapping for every namespace defined in</description>
<location chapter="7" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:178</id>
<description> Web Services for JavaEE
			providers may support partial mapping specifications (e.g. not
			providing a method-param-parts-mapping for every method) regardless
			of the WSDL content by using standard JAX-RPC WSDL to Java mapping
			rules to resolve the mappings. If mappings are specified, they take
			precedence over the mapping rules.</description>
<location chapter="7" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:179</id>
<description> The developer must define
			the jaxrpc-mapping-file element of the webservices.xml or
			webservicesclient.xml deployment descriptor to be the location of the
			mapping file.</description>
<location chapter="7" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:180</id>
<description> The developer must package
			the mapping file in the module with the WSDL file.</description>
<location chapter="7" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:181</id>
<description> The assembler must not
			change the JAX-RPC Mapping file.</description>
<location chapter="7" section="3.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:182</id>
<description> The deployment tool must
			use the JAX-RPC mapping file to generate stubs and TIEs for the
			services and service-refs.</description>
<location chapter="7" section="3.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:183</id>
<description> A deployment tool must be
			capable of deploying an EAR file (containing WARs and/or EJB-JARs),
			WAR file, or EJB-JAR containing Web services and/or Web services
			references.</description>
<location chapter="8" section="2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:184</id>
<description> Generation of any run-time
			classes the container requires to support a JAX-RPC or JAX-WS Service Endpoint
			or Stateless Session Bean Service Implementation is provider
			specific. The behavior of the run-time classes must match the
			deployment descriptor settings of the component. A JAX-RPC or JAX-WS Service
			Endpoint must match the behavior defined by the &lt;servlet&gt;
			element in the web.xml deployment descriptor. A Stateless Session
			Bean Service Implementation must match the behavior defined by the
			&lt;session&gt; element and the &lt;assembly&gt; element.
Generation of any run-time classes the container requires to support a JAX-RPC or JAX-WS Service Endpoint or Stateless Session Bean or Singleton Bean Service Implementation is provider specific. A Singleton Bean Service Implementation must match the behavior defined by the jakarta.ejb.Singleton annotation or &lt;session&gt; element and the &lt;assembly-descriptor&gt; in the ejb-jar.xml deployment descriptor.</description>
<location chapter="8" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:185</id>
<description> The container must update
			and/or generate a deployed WSDL document for each declared wsdl-file
			element in the Web services deployment descriptor (webservices.xml).
			If multiple wsdl-file elements refer to the same location, a separate
			WSDL document must be generated for each.</description>
<location chapter="8" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:186</id>
<description> The WSDL document
			described by the wsdl-file element must contain service and port
			elements and every port-component in the deployment descriptor must
			have a corresponding WSDL port and vice versa. The deployment tool
			must update the WSDL port address element to produce a deployed WSDL
			document. The generated port address information is deployment time
			binding information. In the case of a port-component within a web
			module, the address is partially constrained by the context-root of
			the web application an</description>
<location chapter="8" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:187</id>
<description> The deployment tool must
			publish every deployed WSDL document. The deployed WSDL document may
			be published to a file, URL, or registry. File and URL publication
			must be supported by the provider. File publication includes within
			the generated artifacts of the application. Publication to a
			registry, such as UDDI or ebXML, is encouraged but is not required.</description>
<location chapter="8" section="2.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:188</id>
<description> If publication to a
			location other than file or URL is supported, then location of a WSDL
			document containing a service from that location must also be
			supported.</description>
<location chapter="8" section="2.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:189</id>
<description> The container must provide
			an implementation of the JAX-RPC or JAX-WS Service Interface/Class Implementation.</description>
<location chapter="8" section="2.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:190</id>
<description> The container must provide
			an implementation of the JAX-RPC or JAX-WS Generated Service Interface/Class if the
			Web services client deployment descriptor defines one.</description>
<location chapter="8" section="2.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:191</id>
<description> The Service Interface/Class
			Implementation must provide a static stub and/or dynamic proxy for
			all ports declared by the service element in the WSDL description. A
			container provider must support at least one of static stubs or
			dynamic proxies, but may provide support for both.</description>
<location chapter="8" section="2.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:192</id>
<description> Static stubs (and dynamic
			proxies) must conform to the JAX-RPC specification sections 8.2.1 and
			8.2.2. JAX-WS only supports dynamic proxies and they
                        must conform to the JAX-WS specification section 4.2.3.
			</description>
<location chapter="8" section="2.7" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:193</id>
<description> Web Services for JavaEE
			product providers must support the following: BASIC-AUTH, Symmetric
			HTTPS. For BASIC-AUTH JavaEE containers must provide a way to configure 
			each instance of the generated static stub or dynamic proxy implementation 
			with credential information. </description>
<location chapter="9" section="3.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:194</id>
<description> Web Services for JavaEE
			relies on the authorization support provided by the JavaEE containers
			and is described in the JavaEE specification section 3.5.</description>
<location chapter="9" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:195</id>
<description> JAX-RPC Service Endpoint
			authorization must be defined using the http-method element value of
			POST.</description>
<location chapter="9" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:196</id>
<description> A Web Services for JavaEE
			server provider must support HTTPS for hop-by-hop confidentiality and
			integrity.</description>
<location chapter="9" section="3.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:197</id>
<description> The container must provide
			access to all SEIs declared by the port-component-ref elements of the
			service-ref through the getPort(SEI) method</description>
<location chapter="4" section="2.2.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:198</id>
<description> A Handler may access the
			env-entrys of the component it is associated with by using JNDI to
			lookup an appropriate subcontext of java:comp/env. Access to the
			java:comp/env contexts must be supported from the init() and
			handle&lt;action&gt;() methods. Access may not be supported within
			the destroy() method.</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:199</id>
<description> A servlet must only be
			linked to by a single port-component. A session EJB must only be
			linked to by a single port-component.</description>
<location chapter="7" section="1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:200</id>
<description> Servlet Mapping. A
			developer may optionally specify a servlet-mapping, in the web.xml
			deployment descriptor, for a JAX-RPC or JAX-WS
			Service Endpoint. No more than one servlet-mapping may be specified
			for a servlet that is linked to by a port-component. The url-pattern
			of the servlet-mapping must be an exact match pattern (i.e. it must
			not contain an asterisk ("*")).</description>
<location chapter="7" section="1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:201</id>
<description> It is the assembler's
			responsibility to ensure there are no detailed differences in the SEI
			and target bindings that would cause stub generation or runtime
			problems.</description>
<location chapter="7" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:204</id>
<description> Publishing to at least one
			location is required. Publishing to multiple locations is allowed,
			but not required. The choice of where (both location and how many
			places) to publish is deployment time binding information.</description>
<location chapter="8" section="2.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:205</id>
<description> The deployer role is
			responsible for specifying the deployment time binding information.
			This may include deployed WSDL port addresses and credential
			information for requests that do not use a CallbackHandler.</description>
<location chapter="8" section="3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:206</id>
<description> If a service-ref contains
			a port-component-ref that contains a port-component-link, the
			deployer should bind the container managed Port for the SEI to the
			deployed port address of the port-component referred to by the
			port-component-link.</description>
<location chapter="8" section="3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:207</id>
<description> When providing a binding
			for a port-component-ref, the deployer must ensure that the
			port-component-ref is compatible with the Port being bound to.</description>
<location chapter="8" section="3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:208</id>
<description> Table 2 summarizes the
			behavior of the methods of the Service Interface under various
			deployment configurations.</description>
<location chapter="4" section="2.2.7" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:209</id>
<description> For INOUT parameters, only
			the mapping for the input message is required.</description>
<location chapter="7" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:210</id>
<description> The WSDL document must be
			fully specified, including the service and port elements, if the
			application is dependent on port QNames (e.g. uses the
			Service.getPort(QName,Class) method). The developer must specify the
			wsdl-file if any of the Service methods declared in section 4.2.3.4
			or 4.2.3.5 are used.</description>
<location chapter="7" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:211</id>
<description> If the specified wsdl-file
			has more than one service element, the developer must specify the
			service-qname.</description>
<location chapter="7" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:212</id>
<description> This element is only required when JAX-RPC based runtime is used. Its not required with
                        JAX-WS. The same mapping file must
			be used for all interfaces associated with a wsdl-file. The developer
			must specify the jaxrpc-mapping-file if the wsdl-file is specified.</description>
<location chapter="7" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:213</id>
<description> The container must make
			the required Service Interface Implementation available at the JNDI
			namespace location java:comp/env/service-ref-name where
			service-ref-name is the name declared within the Web services client
			deployment descriptor using the service-ref-name element.</description>
<location chapter="8" section="2.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:214</id>
<description> The WSDL file may
			reference (e.g. import) other files contained within the module using
			relative references. It may also reference other files external to
			the module using an explicit URL. Relative imports are declared
			relative to the file defining the import. Imported files may import
			other files as well using relative locations or explicit URLs.</description>
<location chapter="7" section="1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:214</id>
<description> A client developer may use
			all methods of the Service Interface (except as described in sections
			4.2.3.8 and 4.2.3.9) if a full WSDL description and JAX-RPC mapping
			file are declared in the client deployment descriptor. The port
			address location attribute of a port using a SOAP/HTTP binding must
			begin with http: or https:.</description>
<location chapter="4" section="2.2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:215</id>
<description> If the Service
			Implementation is a stateless session EJB, the developer must also
			specify the Service Endpoint Interface in the EJB deployment
			descriptor using the service-endpoint element.</description>
<location chapter="7" section="1.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:216</id>
<description> A Handler may access
			transactional resources defined by a component's resource-refs.
			Resources are accessed under a transaction context according to
			section 6.2.2.3.</description>
<location chapter="6" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:217</id>
<description> The container must not
			update a WSDL file located in the document root of a WAR file.</description>
<location chapter="8" section="2.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:218</id>
<description> The deployment tool and/or
			container must make the WSDL document that a service-ref is bound to
			available via a URL returned by the Service Interface
			getWSDLDocumentLocation() method.</description>
<location chapter="8" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:219</id>
<description> All webservices deployment
			descriptors must indicate the webservices schema by using the JavaEE
			namespace: http://java.sun.com/xml/ns/javaee and by indicating the
			version of the schema by using the version element. The XML Schema for the 
			Web service deployment descriptor is available at 
			http://java.sun.com/xml/ns/javaee/javaee_web_services_1_3.xsd </description>
<location chapter="7" section="1.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:220</id>
<description>The
			webservice-description-name identifies the collection of
			port-components associated with a WSDL file and JAX-RPC mapping. The
			name must be unique within the deployment descriptor.</description>
<location chapter="7" section="1.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:221</id>
<description> The port-component-name
			element specifies a port component's name. This name is assigned by
			the module producer to name the service implementation bean in the
			module's deployment descriptor. The name must be unique among the
			port component names defined in the same module.</description>
<location chapter="7" section="1.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:222</id>
<description> The handler-name element
			defines the name of the handler. The name must be unique within the
			module</description>
<location chapter="7" section="1.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:223</id>
<description> The value of the
			servlet-link element must be the servlet-name of a JAX-RPC Service
			Endpoint in the same WAR file.</description>
<location chapter="7" section="1.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:224</id>
<description> The
			webservice-description-name identifies the collection of
			port-components associated with a WSDL file and JAX-RPC mapping. The
			name must be unique within the deployment descriptor.</description>
<location chapter="7" section="1.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:225</id>
<description> The WSDL description may
			be a partial WSDL, but must at least include the portType and binding
			elements.</description>
<location chapter="7" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:226</id>
<description> The WSDL description
			provided by the developer is considered a template that must be
			preserved by the assembly/deployment process.</description>
<location chapter="7" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:227</id>
<description> The WSDL file may
			reference (e.g. import) other files contained within the module using
			relative references. It may also reference other files external to
			the module using an explicit URL. Relative imports are declared
			relative to the file defining the import. Imported files may import
			other files as well using relative locations or explicit URLs.
			Relative references must not start with a "/".</description>
<location chapter="7" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:228</id>
<description> A Web Services for JavaEE
			provider is required to provide a URL that maintains the referential
			integrity of the WSDL document the service-ref is bound to if the
			wsdl-file element refers to a document located in the wsdl directory
			or one of its subdirectories.</description>
<location chapter="8" section="2.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:229</id>
<description> If port-name is not
			specified, the handler is assumed to be associated with all ports of
			the service.</description>
<location chapter="7" section="2.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:230</id>
<description> The handler-name element
			defines the name of the handler. The name must be unique within the
			module.</description>
<location chapter="7" section="2.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:231</id>
<description> Anonymous types are
			treated as root WSDL types with special QNames and are mapped using
			the java-xml-type-mapping using the rules defined in 7.3.2.2.</description>
<location chapter="7" section="3.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:232</id>
<description> All anonymous types
			acquire their namespaces from the enclosing root level element or
			type.</description>
<location chapter="7" section="3.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:233</id>
<description> Hidden anonymous array
			types, as defined in rule 3, are declared in a param-type element as
			the name of the Java type of type T appended with "[]" if the
			mapping is to a Java array.</description>
<location chapter="7" section="3.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:234</id>
<description> The mapping for OUT and
			IN/OUT parameters must be the Java class-type representation of the
			WSDL type. This is true even when multiple OUT or IN/OUT parts exist
			within a WSDL message. In this case, the Holder type is inferred
			based on the specified class-type.</description>
<location chapter="7" section="3.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:235</id>
<description> The wsdl-message-part-name
			element is required only when the message referenced by the
			wsdl-message element has more than one part.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:236</id>
<description> The param-position element
			defines the position of a parameter within a Java method. It must be
			an integer starting from 0.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:237</id>
<description> The package-type indicates
			the Java package name. It must be a fully qualified package name,
			even though the XML schema type is fully-qualified-classType.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:238</id>
<description> The parameter-mode element
			defines the mode of the parameter. It can have only three values, IN,
			OUT, INOUT.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:240</id>
<description> The qname-scope elements
			scopes the reference of a QName to the WSDL element type it applies
			to. The value of qname-scope may be simpleType, complexType, or
			element.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:241</id>
<description> The
			service-endpoint-interface element defines the Java type for the
			endpoint interface. The name must be a fully qualified class name.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:242</id>
<description> The wrapped-element
			indicator should only be specified when a WSDL message wraps an
			element type.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:243</id>
<description> The
			wsdl-return-value-mapping is not specified for one-way operations.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:244</id>
<description> The service-interface
			element defines the Java type for the service. For static services,
			it is javax.xml.rpc.Service interface. For generated service, it
			would be the generated interface name. The name must be a fully
			qualified class name.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
<id>WS4EE:SPEC:245</id>
<description> The variable-mapping element
			defines the correlation between a Java class data member or JavaBeans
			property to an XML element or attribute name of an XML root type. If
			the data-member element is present, the Java variable name is a
			public data member. If data-memberis not present, the Java variable
			name is a JavaBeans property.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:246</id>
<description> The xml-attribute-name
			element defines name attribute value of a WSDL attribute element
			within a root type. The value of an xml-attribute-name element must
			match the value of the ref attribute if mapping an attribute
			reference.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:247</id>
<description> The xml-element-name
			element defines name attribute value of a WSDL element within a root
			type. The value of an xml-element-name element must match the value
			of the ref attribute if mapping an element reference.</description>
<location chapter="7" section="3.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:248</id>
<description> A deployment tool must be
			able to deploy a WS-I Basic Profile 1.0 compliant application.</description>
<location chapter="8" section="2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:249</id>
<description> A Web Services for JavaEE
			provider is required to support publishing a deployed WSDL document
			if the Web services deployment descriptor (webservices.xml) wsdl-file
			element refers to a WSDL file contained in the wsdl directory or
			subdirectory, as described in section 5.4.1.</description>
<location chapter="8" section="2.5" />
</assertion>
<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
<id>WS4EE:SPEC:253</id>
<description>
This section defines the XML Schema for the service-ref at http://java.sun.com/xml/ns/javaee/javaee_web_services_client_1_3.xsd. This schema is imported into the common Java EE 6 schema and is used by the application client, web, and EJB module deployment descriptor schemas to declare service-refs. See the Java EE 6, Servlet 3.0, and EJB 3.1 specifications for more details on specifying a service-ref in the deployment descriptors.
</description>
<location chapter = "7" section = "2.5"/>
</assertion>
<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
<id>WS4EE:SPEC:254</id>
<description>
Stateless or Singleton session bean Web services are only packaged within an EJB-JAR file. If the implementation is a stateless or singleton session bean, the deployment tool has a variety of options available to it. In general, the deployment tool generates a servlet to handle parsing the incoming SOAP request, the servlet obtains a reference to an instance of an appropriate EJBObject and dispatches the request to the stateless or singleton session EJB.
</description>
<location chapter = "8" section = "1"/>
</assertion>
<assertion required = "true" impl-spec = "false" defined-by = "technology" status = "active" testable = "true">
<id>WS4EE:SPEC:255</id>
<description>
JAX-WS 2.2 introduces HTTP SPI that allows a deployment to use any available JAX-WS web services runtime for HTTP transport. This allows 109 implementations to use the JAX-WS 2.2 runtime in a Java SE platform when it is available. For more details on the HTTP SPI, see the section 6.6 of JAX-WS specification.
</description>
<location chapter = "8" section = "1.1"/>
</assertion>

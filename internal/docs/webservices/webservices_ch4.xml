<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4000</id>
<description>
javax.xml.ws.WebServiceRef annotation With JAX-WS, client developer is required to use the javax.xml.ws.WebServiceRef annotation to denote a reference to a Service or a Service endpoint. Complete definition of javax.xml.ws.WebServiceRef annotation is defined in section 7.9 of JAX-WS specification. The containers must ensure that the use of this annotation is supported. The following example illustrates the use of this annotation when declaring a Service: @WebServiceRef(name="java:comp/env/service/AddressBookService") AddressBookService abf; The same annotation can also be used to declare a Service endpoint: @WebServiceRef( name="java:comp/env/service/AddressBookService", AddressBookService.class) AddressBookPort port; Address address = port.getAddress( John Doe ); jakarta.jws.HandlerChain annotation can be used with this annotation to specify handlers on these client side references. More information on the HandlerChain annotation can be found in JSR-181 specification and also in Chapter 6 of this specification. If wsdlLocation attribute of WebServiceRef annotation is specified, it is always relative to the root of the module. HTTP URL can also be specified here. The &lt;wsdl-file&gt; element in client deployment descriptor (section 7.2) always overrides the wsdlLocation specified in the annotation. If there is no &lt;wsdl-file&gt; element or wsdlLocation specified in the annotation, then the wsdlLocation attribute of @WebServiceClient annotation on the generated Service class needs to be consulted. (section 7.5 of JAX-WS specification). For co-located clients (where the client and the server are in the same Java EE application unit) with generated Service class, the location of the final WSDL document is resolved by comparing the Service name on the @WebServiceClient annotation on the the generated Service to the Service names of all the deployed port components in the Java EE application unit. This default behavior can be overridden using the &lt;port-component-link&gt; deployment descriptor element. Refer to client deployment descriptor schema Section 7.2.5 If the name attribute is not specified in this annotation then default naming rules apply as specified in the Java EE 5.0 specification. (section EE.5.2.3) The following table summarizes the relationship between the deployment descriptors for &lt;service-ref&gt; and member attributes of this annotation.
Table 1 Relationship between the deployment descriptor elements and javax.xml.ws.WebServiceRef annotation.
Deployment Descriptor elements javax.xml.ws.WebServiceRef annotation &lt;service-ref&gt; One per @WebServiceRef annotation &lt;service-ref&gt;/&lt;service-ref-name&gt; @WebServiceRef.name &lt;service-ref&gt;/&lt;wsdl-file&gt; @WebServiceRef.wsdlLocation &lt;service-ref&gt;/&lt;service-interface&gt; @WebServiceRef.type when @WebServiceRef.value is not specified. In other words the annotation is used to declare a Service. OR @WebServiceRef.value when @WebServiceRef.type is a Service Endpoint.class The type attribute is implied when this annotation is used on a field. Similar to @Resource annotation in JSR-250 Common Annotations for Java Platform &lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;service-endpointinterface&gt; @WebServiceRef.type when @WebServiceRef.value is a Service class. &lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;port-component-link&gt; Default mechanism used for co-located case. The deployment descriptor is used only for overriding the default behavior.

The annotations (for example, @Addressing) annotated with meta-annotation javax.xml.ws.spi.WebServiceFeatureAnnotation can be used in conjunction with @WebServiceRef. The created reference MUST be configured with annotation's web service feature. If a JAX-WS implementation encounters an unsupported or unrecognized feature annotation, an error must be given. JAX-WS doesn't define any standard portable web service feature for Service references. But it defines @Addressing, @MTOM, @RespectBinding annotations for SEI proxy references.
</description>
<location chapter="4" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4001</id>
<description>
Test javax.xml.ws.WebServiceRef() annotation with no field attributes. The service-ref-name 
in the runtime deployment descriptor MUST match the package name of the client followed by
"/service". So the service-ref-name MUST be "client-package-name/service".
</description>
<location chapter="4" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4002</id>
<description>
Test javax.xml.ws.WebServiceRef(name="service-ref-name") annotation with name attribute. The
service-ref-name specified in the name attribute MUST match the service-ref-name in runtime 
deployment descriptor.
</description>
<location chapter="4" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4003</id>
<description>
Test javax.xml.ws.WebServiceRef(wsdlLocation="wsdl-location-url") annotation with wsdlLocation
attribute.
</description>
<location chapter="4" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4004</id>
<description>
Test javax.xml.ws.WebServiceRef(type="...", value="...") annotation with type and value attributes.
</description>
<location chapter="4" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4005</id>
<description>
JAX-WS Dispatch APIs Client developers may use javax.xml.ws.Dispatch APIs defined in JAX-WS specification. This is a low level API that requires clients to construct messages or message payloads as XML and requires an intimate knowledge of the desired message or payload structure. This is useful in those situations where the client wants to operate at the XML message level. An instance of javax.xml.ws.Dispatch can be obtained by invoking any one of the two createDispatch(...) methods on a Service interface. Details on Dispatch API's and its usage can be referenced at section 4.3 of the JAX-WS specification.
</description>
<location chapter="4" section="2.7" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4006</id>
<description>
JAX-WS Asynchronous Operations Client developer may use asynchronous invocations as defined by the JAX-WS specification. JAX-WS supports asynchronous invocations through generated asynchronous methods on the Service Endpoint Interface (section 2.3.4 of JAX-WS specification) and javax.xml.ws.Dispatch (section 4.3.3 of JAX-WS specification) interface. There are two forms of asynchronous invocations in JAX-WS   Polling and Callback.
</description>
<location chapter="4" section="2.8" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4007</id>
<description>
Polling Invocations. Client asynchronous polling invocations should be supported by components running in Servlet container, EJB container and Application Client container, since any of these components can act as JAX-WS clients. Client developers can either use the Service Endpoint Interface or javax.xml.ws.Dispatch to make asynchronous polling invocations. The usage should meet the requirements defined in section 2.3.4 of JAX-WS specification for Service Endpoint Interface or section 4.3.3 of JAX-WS specification for javax.xml.ws.Dispatch interface.
</description>
<location chapter="4" section="2.8.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4008</id>
<description>
Callback Invocations. Client asynchronous callback invocations should only be supported by components running in Servlet container and Application Client container. Client developers can either use the Service Endpoint Interface or javax.xml.ws.Dispatch to implement asynchronous polling invocations. The usage should meet the requirements defined in section 2.3.4 of JAX-WS specification for Service Endpoint Interface or section 4.3.3 of JAX-WS specification for javax.xml.ws.Dispatch interface. It will be the container implementors responsibility to insure that the client developer has access to java:comp/env JNDI context for that component in the callback handler's handleResponse(...) method. The following operations are allowed from within the callback handler:" JNDI access to java:comp/env " Resource manager access " Enterprise bean access The following requirements apply to client asynchronous callback invocations from a Servlet container: " The behavior of the execution of the callback handler is undefined if the Web module defining the callback handler, is undeployed before the handler's handleResponse(...) method is invoked. " There is no client identity in the thread that is invoking the callback handler. If the handler needs to access any web or EJB resources that require client identity, then those resources must specify either a @RunAs annotation on the resource or a &lt;run-as&gt; element in the deployment descriptor that defines them.
</description>
<location chapter="4" section="2.8.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4009</id>
<description>
Interoperability between a JAX-RPC client and JAX-WS endpoint (or vice-versa) is governed by the requirements defined by the WS-I Basic Profile 1.0. As long as both the client and the server adhere to these requirements, they should be able to interoperate.
</description>
<location chapter="4" section="2.9" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4010</id>
<description>
For declaring multiple references to Web services on a single class javax.xml.ws.WebServiceRefs annotation may be used. Complete definition of javax.xml.ws.WebServiceRefs annotation is defined in section 7.10 of JAX-WS specification. The containers must ensure that the use of this annotation is supported.
</description>
<location chapter="4" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4011</id>
<description>
JAX_RPC and JAX-WS Properties The Java EE container environment provides a broader set of operational characteristics and constraints for supporting the Stub/proxy properties defined within JAX-RPC or JAX-WS. While support of standard properties for Stub and Call (only in JAX-RPC) objects is required, their use may not work in all cases in a Java EE environment. The following JAX-RPC properties are not recommended for use in a managed context defined by this specification: javax.xml.rpc.security.auth.username and javax.xml.rpc.security.auth.password The following JAX-WS properties are not recommended for use in a managed context defined by this specification: javax.xml.ws.security.auth.username and javax.xml.ws.security.auth.password
</description>
<location chapter="4" section="2.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4012</id>
<description>
Required properties A container provider is required to support the javax.xml.rpc.service.endpoint.address property in JAX-RPC and javax.xml.ws.service.endpoint.address property in JAX-WS to allow components to dynamically redirect a Stub/proxy to a different URI.
</description>
<location chapter="4" section="2.6.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4013</id>
<description>
MTOM/XOP support JAX-WS compliant implementations are required to support MTOM (Message Transmission Optimization Mechanism)/XOP (XML-binary Optimized Packaging) specifications from W3C. Refer to section 10.4.1.1 of JAX-WS specification. Support for SOAP MTOM/XOP mechanism for optimizing transmission of binary data types is provided by JAXB which is the data binding for JAX-WS. JAX-WS provides the MIME processing required to enable JAXB to serialize and deserialize MIME based MTOM/XOP packages. Support for enabling or disabling SOAP MTOM/XOP mechanism on the client is provided by &lt;enable-mtom&gt; deployment descriptor element specified as part of the &lt;port-component-ref&gt;. Refer to section 7.2.2 for details on this deployment descriptor element. The default value for &lt;enable-mtom&gt; deployment descriptor element is false. If this element is not specified in the deployment descriptors, the default value is used.
</description>
<location chapter="4" section="2.10" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4014</id>
<description>
Packaging The developer is responsible for packaging, either by containment or reference (i.e. by using the MANIFEST ClassPath to refer to other JAR files that contain the required classes), the class files for each Web service including the: Service Endpoint Interface classes, Generated Service Interface class (if used), and their dependent classes. The following files must also be packaged in the module: WSDL files, JAX-RPC Mapping files (not required with JAX-WS), and a Web services client deployment descriptor (not required with JAX-WS if annotations are used) in a Java EE module. The location of the Web services client deployment descriptor in the module is module specific. WSDL files are located relative to the root of the module and are typically located in the wsdl directory that is co-located with the module deployment descriptor or a subdirectory of it. JAX-RPC Mapping Files (not required with JAX-WS) are located relative to the root of the module and are typically colocated with the WSDL file. The developer must not package generated stubs. JAX-WS requires support for a OASIS XML Catalogs 1.1 specification to be used when resolving any Web service document that is part of the description of a Web service, specifically WSDL and XML Schema documents. Refer to section 4.4 of JAX-WS specification. The catalog file jax-ws-catalog.xml must be co-located with the module deployment descriptor (WEB-INF/jax-ws-catalog.xml for web modules and META-INF/jax-ws-catalog.xml for the rest).
</description>
<location chapter="4" section="2.12" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4015</id>
<description>
Test javax.xml.ws.WebServiceRef in conjunction with @Addressing, @MTOM, @RespectBinding annotations. For example:

Example 1:
   @MTOM
   @WebServiceRef(name="java:comp/env/service/AddressBookService", AddressBookService.class)
   AddressBookPort port;
   Address address = port.getAddress("John Doe");

Example 2:
   @Addressing
   @WebServiceRef(name="java:comp/env/service/AddressBookService", AddressBookService.class)
   AddressBookPort port;
   Address address = port.getAddress("John Doe");

Example 3:
   @Addressing
   @RespectBinding
   @WebServiceRef(name="java:comp/env/service/AddressBookService", AddressBookService.class)
   AddressBookPort port;
   Address address = port.getAddress("John Doe");
</description>
<location chapter="4" section="2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4016</id>
<description>
Stub/proxy access via the JAX-WS methods:
public &lt;T&gt; T getPort(Class&lt;T&gt; serviceEndpointInterface, WebServiceFeature... features);

public &lt;T&gt; T getPort(EndpointReference endpointReference, Class&lt;T&gt; serviceEndpointInterface, WebServiceFeature... features);

public &lt;T&gt; T getPort(QName portName, Class&lt;T&gt; serviceEndpointInterface, WebServiceFeature... features); 
</description>
<location chapter="4" section="2.4.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4017</id>
<description>
Service method use with partial WSDL via the JAX-WS methods: 
&lt;T&gt; Dispatch&lt;T&gt; createDispatch(QName portName, Class&lt;T&gt; type, Service.Mode mode, WebServiceFeature... features);

Dispatch&lt;Object&gt; createDispatch(QName portName, JAXBContext context, Service.Mode mode, WebServiceFeature... features);

&lt;T&gt; Dispatch&lt;T&gt; createDispatch(EndpointReference endpointReference, Class&lt;T&gt; type, Service.Mode mode, WebServiceFeature... features);

Dispatch&lt;Object&gt; createDispatch(EndpointReference endpointReference, JAXBContext context, Service.Mode mode, WebServiceFeature... features); 
</description>
<location chapter="4" section="2.4.5" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4018</id>
<description>
Service method use with no WSDL via the JAX-WS methods:
&lt;T&gt; Dispatch&lt;T&gt; createDispatch(QName portName, Class&lt;T&gt; type, Service.Mode mode, WebServiceFeature... features)

Dispatch&lt;Object&gt; createDispatch(QName portName, JAXBContext context, Service.Mode mode, WebServiceFeature... features)

&lt;T&gt; Dispatch&lt;T&gt; createDispatch(EndpointReference endpointReference, Class&lt;T&gt; type, Service.Mode mode, WebServiceFeature... features)

Dispatch&lt;Object&gt; createDispatch(EndpointReference endpointReference, JAXBContext context, Service.Mode mode, WebServiceFeature... features) 
</description>
<location chapter="4" section="2.4.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4019</id>
<description>
MTOM/XOP Support.

SOAP MTOM/XOP mechanism on the client can be enabled or disabled by any one of the following ways:

    * Programmatically passing MTOMFeature for a Service method that creates a SEI proxy or a Dispatch instance.
    * Using &lt;port-component-ref&gt;/&lt;enable-mtom&gt; deployment descriptor element for a corresponding SEI proxy instance
    * Using @MTOM with a @WebServiceRef that creates a SEI proxy instance

Deployment descriptor mtom elements override the @MTOM annotation for a corresponding SEI instance.

Table : Relationship between deployment descriptor elements and @MTOM
Deployment Descriptor elements 	@MTOM
&lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;enable-mtom&gt; 	@MTOM.enabled
&lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;mtom-threshold&gt; 	@MTOM.threshold
</description>
<location chapter="4" section="2.10" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4020</id>
<description>
Web Services Addressing support
JAX-WS clients are required to support Web Services Addressing 1.0 - Core, Web Services Addressing 1.0 - Soap Binding, and Web Services Addressing 1.0 - Metadata.

Web Service Addressing requirements for a client can be specified by any one of the following ways:

    * Using &lt;port-component-ref&gt;/&lt;addresing&gt; deployment descriptor element for the corresponding client
    * Using @Addressing annotation with the @WebServiceRef of the client
    * If the service uses WSDL description, the addressing requirements can be got from the WSDL as per the WS-Addressing 1.0 - Metadata specification.

The above order also defines a precedence order for the addressing requirements. For example, the addressing requirements specified by the @Addressing are overridden by the same from a corresponding &lt;port-component-ref&gt;/&lt;addressing&gt; deployment descriptor element.

Table : Relationship between deployment descriptor elements and @Addressing
Deployment Descriptor elements 	@Addressing
&lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;addressing&gt;/[@enabled] 	@Addressing.enabled
&lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;addressing&gt;/[@required] 	@Addressing.required
&lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;addressing&gt;/&lt;responses&gt; 	@Addressing.responses
</description>
<location chapter="4" section="2.13" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4021</id>
<description>
RespectBinding Support
The javax.xml.ws.RespectBinding annotation or its corresponding javax.xml.ws.RespectBindingFeature web service feature is used to control whether a JAX-WS implementation must respect/honor the contents of the wsdl:binding in the WSDL that is associated with the service. See 6.5.3 and 7.14.3 sections in JAX-WS 2.2 specification.

RespectBinding web service feature on the client can be enabled or disabled by any one of the following ways:

    * Programmatically passing RespectBindingFeature for a Service method that creates a SEI proxy or a Dispatch instance.
    * Using &lt;port-component-ref&gt;/&lt;respect-binding&gt; deployment descriptor element for a corresponding SEI proxy instance.
    * Using @RespectBinding with a @WebServiceRef that creates a SEI proxy instance.

Deployment descriptor &lt;respect-binding&gt; element overrides the @RespectBinding annotation for a corresponding SEI instance.

Table : Relationship between deployment descriptor elements and @RespectBinding
Deployment Descriptor elements 	@RespectBinding
&lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;respect-binding&gt;/[@enabled] 	@RespectBinding.enabled
</description>
<location chapter="4" section="2.14" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:4022</id>
<description>
A declared reference can be resolved using lookup functionality specified by JAX-WS specification. The
following example illustrates the use of this annotation for looking up a Service:
@WebServiceRef(lookup="java:comp/env/service/AddressBookService")
AddressBookService other;
</description>
<location chapter="4" section="2.2" />
</assertion>

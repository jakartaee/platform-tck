<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5009</id>
<description>A
			service implementation bean for a web service can be implemented as a
			Singleton Session EJB as a JAX-WS web service.</description>
<location chapter="5" section="3.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5000</id>
<description>
jakarta.jws.WebService annotation JAX-WS along with JSR-181 requires that the Service Implementation Beans must include jakarta.jws.WebService class-level annotation to indicate that it implements a Web Service. Detail requirements and definition of the jakarta.jws.WebService annotation can be found in JSR-181 specification (section 4.1). If member attributes of the annotation are not specified then server side deployment descriptors (see section 7.1) are used. The member attributes of the annotation can also be overridden by server side deployment descriptors . If name attribute is used with the jakarta.jws.WebService annotation, then the name must be unique among all the Service Implementation Beans annotated with jakarta.jws.WebService in a Java EE module. A Service Implementation Bean using this annotation is not required to specify a wsdlLocation. If wsdlLocation attribute is specified in the jakarta.jws.WebService annotation, it must follow the packaging rules for the WSDL file detailed in section 5.4. If wsdlLocation attribute is specified, then the WSDL file must exist at that location or can be resolved using the catalog facility specified in section 5.4.4. The following table shows the relationship between the deployment descriptor elements and this annotation. Table 1 Relationship between the deployment descriptor elements and jakarta.jws.WebService annotation Deployment Descriptor elements jakarta.jws.WebService annotation &lt;webservices&gt;/&lt;webservice-description&gt; One per @WebService annotation &lt;webservices&gt;/&lt;webservicedescription&gt;/&lt; webservice-description-name&gt; This is implementation specific &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;wsdlfile&gt; @WebService.wsdlLocation &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; port-component-name&gt; @WebService.name (if not specified then its default value as specified in JSR-181), only if it is unique in the module OR If the name is not specified in the Service Implementation Bean then fully qualified name of the Bean class is used to guarantee uniqueness If the above is not unique then fully qualified name of the Bean class is used to guarantee uniqueness &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; wsdl-service&gt; @WebService.serviceName &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; wsdl-port&gt; @WebService.portName &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; service-endpoint-interface&gt; @WebService.endpointInterface For Stateless or Singleton Session EJBs using this annotation, the name attribute of the jakarta.ejb.Stateless or jakarta.ejb.Singleton annotation on the Service Implementation Bean class must be used as the &lt;ejb-link&gt; element in the deployment descriptor to map the Port component to the actual EJB. If name attribute in jakarta.ejb.Stateless or jakarta.ejb.Singleton annotation is not specified, then the default value is used as defined in the section 4.4.1 of EJB3.1. For Servlet based endpoints using this annotation, fully qualified name of the Service Implementation Bean class must be used as the &lt;servlet-link&gt; element in the deployment descriptor to map the Port component to the actual Servlet. Following default mapping rules apply for Web modules that contain Servlet based endpoints that use this annotation but do not package a web.xml or a package a partial web.xml: " fully qualified name of the Service Implementation Bean class must be mapped to &lt;servlet-name&gt; element in web.xml. " fully qualified name of the Service Implementation Bean class must be mapped to &lt;servlet-class&gt; element in web.xml " serviceName attribute of jakarta.jws.WebService annotation prefixed with "/" must be mapped to &lt;url- pattern&gt; element in web.xml. If the serviceName attribute in jakarta.jws.WebService annotation is not specified, then the default value as specified in JSR-181 specification is used.
jakarta.jws.WebService annotated Service Implementation Beans can be run either as a Stateless or Singleton Session
EJB in an EJB container or as a JAX-WS service endpoint in a web container. The two programming models
are fully defined in sections 5.3.2.3 and 5.3.2.4.
</description>
<location chapter="5" section="3.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5001</id>
<description>
javax.xml.ws.Provider interface and javax.xml.ws.WebServiceProvider annotation Service Endpoint Interfaces (SEI) provide a high level Java-centric abstraction that hides the details of converting between Java objects and their XML representations for use in XML-based messages. However, in some cases it is desirable for services to be able to operate at the XML message level. The javax.xml.ws.Provider interface in JAX-WS (section 5.1) offers an alternative to SEIs and may be implemented by Service Implementation Beans wishing to work at the XML message level. JAX-WS requires that these Service Implementation Beans must include javax.xml.ws.WebServiceProvider annotation on the class, indicating that it implements the javax.xml.ws.Provider interface. Details on the javax.xml.ws.WebServiceProvider annotation can be found in JAX-WS specification (section 7.7). If member attributes of the annotation are not specified then server side deployment descriptors (see section 7.1) are used. The member attributes of the annotation can also be overridden by server side deployment descriptors . A Service Implementation Bean using this annotation is not required to specify a wsdlLocation. If wsdlLocation attribute is specified in the javax.xml.ws.WebServiceProvider annotation, it must follow the packaging rules detailed in section 5.4. If wsdlLocation attribute is specified, then the WSDL file must exist at that location or can be resolved using the catalog facility specified in section 5.4.4. The following table shows the relationship between the deployment descriptor elements and this annotation. Table 2 Relationship between the deployment descriptor elements and javax.xml.ws.WebServiceProvider annotation Deployment Descriptor element javax.xml.ws.WebServiceProvider annotation &lt;webservices&gt;/&lt;webservice-description&gt; 
One per @WebServiceProvider annotation &lt;webservices&gt;/&lt;webservicedescription&gt;/&lt; webservice-description-name&gt; This is implementation specific &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;wsdlfile&gt; @WebServiceProvider.wsdlLocation &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; port-component-name&gt; Fully qualified name of the Service Implementation Bean is used to guarantee uniqueness &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; wsdl-service&gt; @WebServiceProvider.serviceName &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; wsdl-port&gt; @WebServiceProvider.portName &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; service-endpoint-interface&gt; This deployment descriptor is not required to be specified for Service Implementation Beans that are annotated with @WebServiceProvider If deployment descriptor is not used or &lt;ejb-link&gt;/&lt;servlet-link&gt; elements are not specified in deployment descriptor, then portName attribute from javax.xml.ws.WebServiceProvider annotation is used to map the port component to the actual Java EE component (EJB or Servlet). If either &lt;wsdl-service&gt; or &lt;wsdl-port&gt; elements are provided in the deployment descriptor, then the namespace used in these elements overrides the targetNamespace member attribute in this annotation . javax.xml.ws.WebServiceProvider annotated Service Implementation Beans can be run either as a Stateless or Singleton Session EJB in an EJB container or as a JAX-WS service endpoint in a web container. The two programming models are fully defined in sections 5.3.2.3 and 5.3.2.4.
If deployment descriptor is not used or &lt;ejb-link&gt;/&lt;servlet-link&gt; elements are not specified in deployment descriptor, then portName attribute from jakarta.jws.WebService annotation is used to map the port component to the actual Java EE component (EJB or Servlet). The &lt;service-endpoint-interface&gt; element in the deployment descriptor for an implementation bean must match @WebService.endpointInterface member attribute if it is specified for the bean. Any other value is ignored. If either &lt;wsdl-service&gt; or &lt;wsdl-port&gt; elements are provided in the deployment descriptor, then the namespace used in these elements overrides the targetNamespace member attribute in this annotation .If &lt;wsdl-service&gt; element is provided in the deployment descriptor, then the namespace used in this element overrides the targetNamespace member attribute in this annotation. The namespace in &lt;wsdl-port&gt; element if specified, must match the effective target namespace. jakarta.jws.WebService annotated Service Implementation Beans can be run either as a Stateless or Singleton Session EJB in an EJB container or as a JAX-WS service endpoint in a web container. The two programming models are fully defined in sections 5.3.2.3 and 5.3.2.4.  </description>
<location chapter="5" section="3.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5002</id>
<description>
Web container programming model for JAX-WS JAX-WS Service Endpoint that run within the web container must follow the requirements repeated here. A JAX-WS Service Endpoint can be single or multi-threaded. A JAX-WS Service Endpoint must implement javax.servlet.SingleThreadModel if single threaded access is required by the component. A container must serialize method requests for a Service Implementation Bean that implements the SingleThreadModel interface. Note, the SingleThreadModel interface has been deprecated in the Servlet 2.4 specification. The Service Implementation Bean must follow these requirements: The Service Implementation Bean class must be annotated with either jakarta.jws.WebService or javax.xml.ws.WebServiceProvider annotation. See section 5.3.2.1 and 5.3.2.2.  For developers starting from Java using JAX-WS, jakarta.jws.WebService annotation on Service Implementation Bean may optionally reference an SEI but is not required to do so. If SEI is not specified, the Service Implementation Bean class implicitly defines a SEI as required by section 3.3 of JAX-WS specification. The business methods of the bean must be public and must not be final or static. Only those methods that are annotated with @WebMethod in the Service Implementation Bean, are exposed to the client. For developers starting from WSDL using JAX-WS, the SEI generated from the WSDL must be annotated with jakarta.jws.WebService annotation. Refer to section 2.2 of JAX-WS specification. The Service Implementation Bean must be annotated with jakarta.jws.WebService annotation and the endpointInterface member attribute must refer to this generated SEI. Service Implementation Bean may implement the Service Endpoint Interface, but it is not required to do so. The bean must implement all the method signatures of the SEI. The business methods of the bean must be public and must not be final or static. It may implement other methods in addition to those defined by the SEI. The Service Implementation Bean must have a default public constructor. A Service Implementation must be a stateless object. A Service Implementation Bean must not save client specific state across method calls either within the bean instance s data members or external to the instance. A container may use any bean instance to service a request. The class must be public, must not be final and must not be abstract. The class must not define the finalize() method.
</description>
<location chapter="5" section="3.2.4.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5003</id>
<description>
The optional @PostConstruct or @PreDestroy annotations A Service Implementation Bean may use javax.annotation.PostConstruct or javax.annotation.PreDestroy annotation on methods for lifecycle event callbacks. The methods annotated with javax.annotation.PostConstruct or javax.annotation.PreDestroy annotation allow the web container to notify a Service Implementation Bean instance of impending changes in its state. The bean may use the notification to prepare its internal state for the transition. If the bean implements methods that are annotated with javax.annotation.PostConstruct or javax.annotation.PreDestroy annotations then the container is required to call them in the manner described below. The container must call the method annotated with javax.annotation.PostConstruct before it can start dispatching requests to the methods exposed as Web Service operations of the bean. The bean may use the container notification to ready its internal state for receiving requests. The container must notify the bean of its intent to remove the bean instance from the container s working set by calling the method annotated with javax.annotation.PreDestroy annotation. A container may not call this method while a request is being processed by the bean instance. The container may not dispatch additional requests to the methods exposed as Web Service operations of the bean after this method is called.
</description>
<location chapter="5" section="3.2.4.2.1" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5004</id>
<description>
Allowed access to container services The container provides certain services based on the life cycle state of the Service Implementation Bean. Access to services provided by a web container in a Java EE environment (e.g. transactions, JNDI access to the component s environment, etc.) must follow the requirements defined by the Servlet and Java EE specifications. Access to a WebServiceContext must meet the requirements defined by the JAX-WS specification section 5.3. At runtime, the methods in WebServiceContext serve the same purpose as the methods with the same name defined in ServletEndpointContext in JAX-RPC or javax.servlet.http.HttpServletRequest. Service Implementation Beans can get access to HTTPSession and ServletContext using table 9.4 of section 9.4.1.1 of JAX-WS specification.
</description>
<location chapter="5" section="3.2.4.2.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5005</id>
<description>
Protocol Binding. JAX-WS specification requires that a developer be able to specify the protocol binding on a Web Service endpoint. JAX-WS also requires support for the following protocol bindings: "SOAP1.2 over HTTP - SOAP1.2/HTTP" "SOAP1.1 over HTTP - SOAP1.1/HTTP" "XML over HTTP - XML/HTTP". Support for specifying the protocol binding is provided by &lt;protocol-binding&gt; deployment descriptor element for a port component. Refer to section 7.1.2 for details on this deployment descriptor element. If this element is not specified in the deployment descriptors, the default binding is used (SOAP1.1/HTTP).
</description>
<location chapter="5" section="3.6" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5006</id>
<description>
MTOM/XOP support JAX-WS compliant implementations are required to support MTOM (Message Transmission Optimization Mechanism)/XOP (XML-binary Optimized Packaging) specifications from W3C. Refer to section 10.4.1.1 of JAX-WS specification. Support for SOAP MTOM/XOP mechanism for optimizing transmission of binary data types is provided by JAXB which is the data binding for JAX-WS. JAX-WS provides the MIME processing required to enable JAXB to serialize and deserialize MIME based MTOM/XOP packages.

SOAP MTOM/XOP mechanism on the service can be enabled or disabled by any one of the following ways:

Using &lt;port-component&gt;/&lt;enable-mtom&gt; deployment descriptor element for a corresponding service
Using @MTOM with a @WebService that creates a service

Deployment descriptor mtom elements override the @MTOM annotation for a corresponding service. These elements also override if MTOM enabled protocol binding is used. In other words, if MTOM enabled protocol binding is used along with &lt;enable-mtom&gt; set to false, then this feature is disabled. This deployment descriptor must be specified in order to be applied to the protocol binding to enable or disable MTOM. Note that JAX-WS recommends the use of MTOM feature instead of mtom enabled bindings:SOAPBinding.SOAP11HTTP_MTOM_BINDING, SOAPBinding.SOAP12HTTP_MTOM_BINDING.

Table : Relationship between deployment descriptor elements and @MTOM
Deployment Descriptor elements 	@MTOM
&lt;service&gt;/&lt;port-component&gt;/&lt;enable-mtom&gt; 	@MTOM.enabled
&lt;service&gt;/&lt;port-component&gt;/&lt;mtom-threshold&gt; 	@MTOM.threshold
</description>
<location chapter="5" section="3.7" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5012</id>
<description>
Port components may be packaged in a WAR file, or in a EJB-JAR file. Port components packaged in a WAR file must use a JAX-RPC/JAX-WS Service Endpoint or a Stateless/Singleton session bean for the Service Implementation Bean. Port components packaged in a EJB-JAR file must use a Stateless or Singleton Session Bean for the Service Implementation Bean.
</description>
<location chapter="5" section="4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5013</id>
<description>
Stateless or Singleton Session EJB Service Implementation Beans can be packaged in an EJB-JAR or in a WAR that contains the class files and WSDL files. The packaging rules follow those defined by the EJB specification. In addition, the Web services deployment descriptor location within the EJB-JAR file is META-INF/webservices.xml and the wsdl directory is located at META-INF/wsdl. See 5.4.3 section for packaging Stateless or Singleton session beans in a WAR file.
</description>
<location chapter="5" section="4.2" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5014</id>
<description>
JAX-RPC/JAX-WS Service Endpoints or Statesless/Singleton EJB service implementation beans can be packaged in a WAR file that contains the class files and WSDL files. The packaging rules for the WAR file are those defined by the Servlet specification. The packaging rules for Statless or Singleton EJB within a WAR are defined by the EJB specification. In addition, a Web services deployment descriptor is located in a WAR at WEB-INF/webservices.xml and the wsdl directory is located at WEB-INF/wsdl.
</description>
<location chapter="5" section="4.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5007</id>
<description>
Catalog packaging JAX-WS requires support for a OASIS XML Catalogs 1.1 specification to be used when resolving any Web service document that is part of the description of a Web service, specifically WSDL and XML Schema documents. Refer to section 4.4 of JAX-WS specification. The catalog file jax-ws-catalog.xml must be co-located with the module deployment descriptor (WEB-INF/jax-ws-catalog.xml for web modules and META-INF/jax-ws-catalog.xml for EJB modules).
</description>
<location chapter="5" section="4.4" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5008</id>
<description>
Publishing Endpoints   javax. xml.ws.Endpoint JAX-WS provides functionality for creating and publishing Web Service endpoints dynamically using javax.xml.ws.Endpoint API. The use of this functionality is considered non-portable in a managed environment. It is required that both the Servlet and the EJB container disallow the publishing of the Endpoint dynamically, by not granting the publishEndpoint security permission. Please refer to details on this in Section 5.2 of the JAX-WS specification.
</description>
<location chapter="5" section="3.3" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5010</id>
<description>
JAX-WS services are required to support Web Services Addressing 1.0 - Core, Web Services Addressing 1.0 - Soap Binding, and Web Services Addressing 1.0 - Metadata.

Web Service Addressing requirements for a service can be specified by any one of the following ways:
    Using &lt;port-component&gt;/&lt;addressing&gt; deployment descriptor element for the corresponding service
    Using @Addressing annotation with the service implementation class
    If the service uses WSDL description, the addressing requirements can be specified in the WSDL as per the WS-Addressing 1.0 - Metadata specification.

The above order also defines a precedence order for the addressing requirements. For example, the addressing requirements specified by the @Addressing are overridden by the same from a corresponding &lt;port-component&gt;/&lt;addressing&gt; deployment descriptor element.

Table : Relationship between deployment descriptor elements and@Addressing
Deployment Descriptor elements 	@Addressing
&lt;service&gt;/&lt;port-component&gt;/&lt;addressing&gt;/[@enabled] 	@Addressing.enabled
&lt;service&gt;/&lt;port-component&gt;/&lt;addressing&gt;/[@required] 	@Addressing.required
&lt;service&gt;/&lt;port-component&gt;/&lt;addressing&gt;/&lt;responses&gt; 	@Addressing.responses
</description>
<location chapter="5" section="3.8" />
</assertion>
<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
<id>WS4EE:SPEC:5011</id>
<description>
The javax.xml.ws.RespectBinding annotation or its corresponding javax.xml.ws.RespectBindingFeature web service feature is used to control whether a JAX-WS implementation must respect/honor the contents of the wsdl:binding in the WSDL that is associated with the service. See 6.5.3 and 7.14.3 sections in JAX-WS 2.2 specification.

RespectBinding web service feature on a service can be enabled or disabled by any one of the following ways:

    * Using &lt;port-component&gt;/&lt;respect-binding&gt; deployment descriptor element for the corresponding service.
    * Using @RespectBinding annotation with the service implementation class.

Deployment descriptor &lt;respect-binding&gt; element overrides the @RespectBinding annotation for the corresponding service.

Table : Relationship between deployment descriptor elements and @RespectBinding
Deployment Descriptor elements 	@RespectBinding
&lt;service&gt;/&lt;port-component&gt;/&lt;respect-binding&gt;/[@enabled] 	@RespectBinding.enabled
</description>
<location chapter="5" section="3.9" />
</assertion>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<spec>
  <next-available-id>1</next-available-id>
  <previous-id>0</previous-id>
  <technology>WS4EE</technology>
  <id>WS4EE</id>
  <name>Web Services for Java EE</name>
  <version>1.2</version>
  <location>
    <chapters />
    <chapter id="3" name="Overview">
      <sections>
        <section id="3.3.1" name="Web Service Components" />
        <section id="3.8.2" name="Not in Scope" />
        <section id="3.6" name="Standard Services" />
        <section id="3.2" name="Web Service" />
        <section id="3.10" name="Web Service Server View" />
        <section id="3.3" name="Web Services for JavaEE Overview" />
        <section id="3.5" name="Portablity" />
        <section id="3.8" name="Scope" />
        <section id="3.8.1" name="Scope" />
        <section id="3.9" name="Web Service Client View" />
        <section id="3.6.2" name="JAX-WS 2.0" />
        <section id="3.1" name="Web Services Architecture Overview" />
        <section id="3.4" name="Platform Roles" />
        <section id="3.3.2" name="Web Service Containers" />
        <section id="3.7" name="Interoperability" />
        <section id="3.6.1" name="JAX-RPC 1.1" />
      </sections>
    </chapter>
    <chapter id="5" name="Server Programming Model">
      <sections>
        <section id="5.4" name="Packaging" />
        <section id="5.4.1" name="The wsdl directory" />
        <section id="5.3.5" name="Protocol Binding" />
        <section id="5.5" name="Transactions" />
        <section id="5.3.4" name="Service Custom Serializers/Deserializers" />
        <section id="5.1" name="Goals" />
        <section id="5.3.6" name="MTOM/XOP Support" />
        <section id="5.3.3" name="Service Implementation Bean Life Cycle" />
        <section id="5.4.4" name="Catalog Packaging" />
        <section id="5.3.2" name="Service Implementation Bean" />
        <section id="5.4.3" name="Web App Module Packaging" />
        <section id="5.3" name="Port Component Model Specification" />
        <section id="5.6" name="Container Provider Responsibilities" />
        <section id="5.4.2" name="EJB Module Packaging" />
        <section id="5.4.5" name="Assembly within an EAR file" />
        <section id="5.3.1" name="Service Endpoint Interface" />
        <section id="5.2" name="Concepts" />
      </sections>
    </chapter>
    <chapter id="7" name="DeploymentDescriptors">
      <sections>
        <section id="7.2.3" name="Assembler Responsibilities" />
        <section id="7.3.3" name="Assembler Responsibilities" />
        <section id="7.1.3" name="Assembler Responsibilities" />
        <section id="7.1.5" name="Web Services Deployment Descriptor XML Schema" />
        <section id="7.3.1" name="Overview" />
        <section id="7.2.5" name="Web Services Client Service Referece XML Schema" />
        <section id="7.1" name="Web Services Deployment Descriptor" />
        <section id="7.1.2" name="Developer Responsibilities" />
        <section id="7.3.2" name="Developer Responsibilities" />
        <section id="7.1.1" name="Overview" />
        <section id="7.2" name="Service Reference Deployment Descriptor Information" />
        <section id="7.2.4" name="Deployer Responsibilities" />
        <section id="7.3.5" name="JAX-RPC Mapping Schema" />
        <section id="7.2.1" name="Overview" />
        <section id="7.1.4" name="Deployer Responsibilities" />
        <section id="7.3" name="JAX-RPC Mapping Deployment Descriptor" />
        <section id="7.2.2" name="Developer Responsibilities" />
        <section id="7.3.4" name="Deployer Responsibilities" />
      </sections>
    </chapter>
    <chapter id="2" name="Objectives">
      <sections>
        <section id="2.1.2" name="Service Development Goals" />
        <section id="2.1.5" name="Web Services Registry Goals" />
        <section id="2.1.1" name="Client Model Goals" />
        <section id="2.1.3" name="Service Deployment Goals" />
        <section id="2.1.4" name="Service Publication Goals" />
      </sections>
    </chapter>
    <chapter id="9" name="Security">
      <sections>
        <section id="9.3.3" name="Integrity and Confidentiality" />
        <section id="9.1" name="Concepts" />
        <section id="9.1.1" name="Authentication" />
        <section id="9.3" name="Specification" />
        <section id="9.1.4" name="Audit" />
        <section id="9.2.1" name="Assumptions" />
        <section id="9.1.2" name="Authorization" />
        <section id="9.1.5" name="Non-Repudiation" />
        <section id="9.3.2" name="Authorization" />
        <section id="9.3.1" name="Authentication" />
        <section id="9.2" name="Goals" />
        <section id="9.1.3" name="Ingerity and Confidentiality" />
      </sections>
    </chapter>
    <chapter id="4" name="Client Programming Model">
      <sections>
        <section id="4.2.9" name="Packaging" />
        <section id="4.2.7" name="JAX-WS Asynchronous Operations" />
        <section id="4.2.2" name="javax.xml.ws.WebServiceRef annotation" />
        <section id="4.1" name="Concepts" />
        <section id="4.2.6" name="JAX-WS Dispatch APIs" />
        <section id="4.2.4" name="Port Stub and Dynamic Proxy" />
        <section id="4.2.8" name="JAX-RPC Custom Serializers/Deserializers" />
        <section id="4.2.1" name="Service Lookup" />
        <section id="4.2.5" name="JAX-RPC and JAX-WS Properties" />
        <section id="4.2" name="Specification" />
        <section id="4.2.3" name="Service Interface API" />
      </sections>
    </chapter>
    <chapter id="8" name="Deployment">
      <sections>
        <section id="8.2" name="Container Provider Responsibilities" />
        <section id="8.2.5" name="Publishing the deployed WSDL" />
        <section id="8.2.9" name="Mapping Requirements" />
        <section id="8.2.6" name="Service and Generate Service Interface/Class Implementation" />
        <section id="8.3" name="Overview" />
        <section id="8.2.3" name="Generate deployed WSDL" />
        <section id="8.2.10" name="Deployment failure conditions" />
        <section id="8.2.2" name="Generate Web Service Implementation Classes" />
        <section id="8.2.7" name="Static stub generation" />
        <section id="8.2.1" name="Deployment Artifacts" />
        <section id="8.2.4" name="Publishing the service-ref WSDL" />
        <section id="8.1" name="Overview" />
        <section id="8.2.8" name="Type mappings" />
      </sections>
    </chapter>
    <chapter id="6" name="Handlers">
      <sections>
        <section id="6.2.2" name="Programming Model" />
        <section id="6.2" name="Specification" />
        <section id="6.4" name="Object Interaction Diagrams" />
        <section id="6.2.4" name="Container Provider Responsibilities" />
        <section id="6.4.1" name="Client Web service method access" />
        <section id="6.2.1" name="Scenarios" />
        <section id="6.2.3" name="Developer Responsibilities" />
        <section id="6.4.2" name="EJB Web service method invocation" />
        <section id="6.1" name="Concepts" />
        <section id="6.3" name="Packaging" />
      </sections>
    </chapter>
    <chapter id="1" name="Introduction">
      <sections>
        <section id="1.1" name="Target Audience" />
        <section id="1.3" name="Specification Oranization" />
        <section id="1.2" name="Acknowledgements" />
        <section id="1.4" name="Document Conventions" />
      </sections>
    </chapter>
  </location>
  <assertions>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:2</id>
      <description>A client uses JNDI lookup
			to access a Service object that implements the Service Interface as
			defined by the JAX-RPC or JAX-WS specification</description>
      <location chapter="4" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:3</id>
      <description>The Service object is a
			factory used by the client to get a stub or proxy that implements the
			Service Endpoint Interface. The stub is the client representation of
			an instance of the web service</description>
      <location chapter="4" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4</id>
      <description>The Service Interface can
			be a generic javax.xml.rpc.Service interface or a Generated Service
			Interface, which extends javax.xml.rpc.Service, as defined by JAX-RPC or JAX-WS</description>
      <location chapter="4" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:7</id>
      <description>A client developer does
			not need to generate stubs during development, nor are they
			encouraged to do so. The client should use the interfaces, and not
			the stubs. Stubs will be generated during deployment and will be
			specific to the vendor's run-time the client will run in</description>
      <location chapter="4" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:8</id>
      <description>Each client JNDI lookup of
			a web service is by a logical name. A client developer chooses the
			logical name to be used in the client code and declares it along with
			the required Service Interface in a web service client deployment
			descriptor</description>
      <location chapter="4" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:9</id>
      <description>The container must bind
			the Service Interface implementation under the client's environment
			context, java:comp/env, using the logical name of the service
			reference</description>
      <location chapter="4" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:28</id>
      <description>With JAX-RPC compnents should not use the getHandlerRegistry() method. A container provider must
			throw a java.lang.UnsupportedOperationException from the
			getHandlerRegistry() method of the Service Interface</description>
      <location chapter="4" section="2.3.8" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:29</id>
      <description>With JAX-RPC compnents should not use the getTypeMappingRegistry() method.  A container provider must
			throw a java.lang.UnsupportedOperationException from the
			getTypeMappingRegistry method of the Service interface</description>
      <location chapter="4" section="2.3.9" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:31</id>
      <description>In JAX-RPC clients are encouraged to
			use PortableRemoteObject.narrow(...). In JAX-WS, proxy classes are not Remote Objects. Hence the use of PortableRemoteObject.narrow(...) is not required.</description>
      <location chapter="4" section="2.4.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:35</id>
      <description>The developer is
			responsible for packaging, either by containment or reference (i.e.
			by using the MANIFEST ClassPath to refer to other JAR files that
			contain the required classes), the class files for each Web service
			including the Service Endpoint Interface classes, Generated Service
			Interface class (if used), and their dependent classes. The following
			files must also be packaged in the module: WSDL files, JAX-RPC
			Mapping files, (not required with JAX-WS) and a Web services client deployment descriptor in a
			JavaEE module. WSDL files are located relative to the root of the module and are typically located in the wsdl directory that is co-located with the module deployment descriptor or a subdirectory of it. JAX-RPC Mapping Files (not required with JAX-WS) are located relative to the root of the module and are typically co-located with the WSDL file. The developer must not package generated stubs. JAX-WS requires support for a OASIS XML Catalogs 1.1 specification to be used when resolving any Web service document that is part of the description of a Web service, specifically WSDL and XML Schema documents. Refer to section 4.4 of JAX-WS specification. The catalog file jax-ws-catalog.xml must be co-located with the module deployment descriptor (WEB-INF/jax-ws-catalog.xml for web modules and META-INF/jax-ws-catalog.xml for the rest).</description>
      <location chapter="4" section="2.9" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:36</id>
      <description>The Service Endpoint
			Interface (SEI) must follow the JAX-RPC rules for WSDL&lt;-&gt;Java
			mapping.</description>
      <location chapter="5" section="3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:37</id>
      <description>There are two ways a
			Service Implementation Bean can be implemented. This includes a
			Stateless Session EJB</description>
      <location chapter="5" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:38</id>
      <description>There are two ways a
			Service Implementation Bean can be implemented. This includes a
			JAX-RPC or JAX-WS service endpoint. The two programming models are fully defined 
			in sections 5.3.2.3 and 5.3.2.4.</description>
      <location chapter="5" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:39</id>
      <description>A Stateless Session Bean,
			as defined by the Enterprise JavaBeans specification, can be used to
			implement a Web service to be deployed in the EJB container</description>
      <location chapter="5" section="3.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:41</id>
      <description>The Service Implementation
			Bean must have a default public constructor</description>
      <location chapter="5" section="3.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:42</id>
      <description>The bean must implement
			all the method signatures of the SEI</description>
      <location chapter="5" section="3.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:43</id>
      <description>The Service Implementation
			Bean methods are not required to throw javax.rmi.RemoteException</description>
      <location chapter="5" section="3.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:44</id>
      <description>The business methods of
			the bean must be public and must not be final or static</description>
      <location chapter="5" section="3.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:55</id>
      <description>The Service Implementation
			Bean may implement the Service Endpoint Interface as defined by the
			JAX-RPC Servlet model. The bean must implement all the method
			signatures of the SEI. In addition, a Service Implementation Bean may
			be implemented that does not implement the SEI. This additional
			requirement provides the same SEI implementation flexibility as
			provided by EJB service endpoints.</description>
      <location chapter="5" section="3.2.4.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:56</id>
      <description>The business methods of
			the bean must be public and must not be static. If the Service
			Implementation Bean does not implement the SEI, the business methods
			must not be final. The Service Implementation Bean may implement
			other methods in addition to those defined by the SEI .</description>
      <location chapter="5" section="3.2.4.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:60</id>
      <description>The container must call
			the init method before it can start dispatching requests to the SEI
			methods of the bean. The init method parameter value provided by the
			container is described by the JAX-RPC specification. The bean may use
			the container notification to ready its internal state for receiving
			requests. The container must notify the bean of its intent to remove
			the bean instance from the container's working set by calling the
			destroy method. A container may not call the destroy method while a
			request</description>
      <location chapter="5" section="3.2.4.1.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:61</id>
      <description>Access to services
			provided by a web container in a JavaEE environment (e.g. transactions,
			JNDI access to the component's environment, etc.) must follow the
			requirements defined by the Servlet and JavaEE specifications.</description>
      <location chapter="5" section="3.2.4.1.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:63</id>
      <description>Access to a
			ServletEndpointContext must meet the requirements defined by the
			JAX-RPC specification section 10.1.3.</description>
      <location chapter="5" section="3.2.4.1.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:69</id>
      <description>The EJB container runs the
			methods under the transaction context defined by the
			container-transaction element of the EJB deployment descriptor.</description>
      <location chapter="5" section="5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:70</id>
      <description>a container provider must
			provide a JAX-RPC or JAX-WS runtime</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:71</id>
      <description>Container is responsible
			for Listening on a well known port or on the URI of the Web service
			implementation (as defined in the service's WSDL after deployment)
			for SOAP/HTTP bindings</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:72</id>
      <description>Container is responsible
			for parsing the inbound message according to the Service binding</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:73</id>
      <description>Container is responsible
			for Mapping the message to the implementation class and method
			according to the Service deployment data</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:74</id>
      <description>Container is responsible
			for creating the appropriate Java objects from the SOAP envelope
			according to the JAX-RPC or JAX-WS specification</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:75</id>
      <description>Container is responsible
			for invoking the Service Implementation Bean handlers and instance
			method with the appropriate Java parameters</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:76</id>
      <description>Container is responsible
			for capturing the response to the invocation if the style is
			request-response</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:77</id>
      <description>Container is responsible
			for mapping the Java response objects into SOAP message according to
			the JAX-RPC or JAX-WS specification</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:78</id>
      <description>Container is responsible
			for creating the message envelope appropriate for the transport</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:79</id>
      <description>Container is responsible
			for sending the message to the originating Web service client</description>
      <location chapter="5" section="6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:80</id>
      <description>Handlers must be able to
			transform the SOAP header. One example is the addition of a SOAP
			header for application specific information, like customerId, by the
			handler</description>
      <location chapter="6" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:81</id>
      <description>Handlers must be able to
			transform just parts of the body. This might include changing part
			values within the SOAP body. Encryption of some parameter values is
			an example of this scenario</description>
      <location chapter="6" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:82</id>
      <description>Handlers must be able to
			just read a message where no additions, transformations, or
			modification to the message is made. Common scenarios are logging,
			metering, and accounting</description>
      <location chapter="6" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:85</id>
      <description>A JAX-WS Web Services for JavaEE provider is required to provide an
			implementation of HandlerResolver that returns the HandlerClain with Handlers specified in the deployment descriptor or the javax.jws.HandlerChain annotation</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:86</id>
      <description>A Web Services for JavaEE
			provider is required to provide all the interfaces of the
			javax.xml.rpc.handler.soap package. The provider must also provide an
			implementation of the SOAPMessageContext interface</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:88</id>
      <description>The container must call
			the init method before it can start dispatching requests to the
			handleRequest(), handleResponse(), and handleFault() methods of the
			Handler. The Handler may use the container notification to ready its
			internal state for receiving requests</description>
      <location chapter="6" section="2.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:90</id>
      <description>Container must not call
			the destroy method while a request is being processed by the handler
			instance</description>
      <location chapter="6" section="2.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:91</id>
      <description>Container must not
			dispatch additional requests to a handler instance after the destroy
			method is called on that instance</description>
      <location chapter="6" section="2.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:92</id>
      <description>If Handler instances are
			pooled, they must be pooled by Port component</description>
      <location chapter="6" section="2.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:93</id>
      <description>A Handler must not change
			the message in any way that would cause the previously executed
			authorization check to execute differently</description>
      <location chapter="6" section="2.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:94</id>
      <description>A Handler.handleRequest()
			method must not change the operation name, number of parts in the
			message, or types of the message parts. A container must throw aSOAP
			fault with a faultcode of soap-env:Server (the namespace identifier
			for the namespace prefix, soap-env:, is
			http://www.w3.org/2001/09/soap-envelope) back to the client if the
			Handler does this</description>
      <location chapter="6" section="2.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:98</id>
      <description>A Handler class must
			implement the java.xml.rpc.handler.Handler interface.</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:99</id>
      <description>The Handler.init() method
			must retain the information defined by HandlerInfo.getHeaders()</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:101</id>
      <description>A Handler implementation
			must use the MessageContext to pass information to other Handler
			implementations in the same Handler chain and, in the case of the
			JAX-RPC service endpoint, to the service implementation bean</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:102</id>
      <description>A container is required to
			provide an instance of a java.util.Map object in the HandlerInfo
			instance. The HandlerInfo.getHeaders() method must return the set of
			soap-headers defined in the deployment descriptor. The Map object
			must provide access to each of the Handler's init-param name/value
			pairs declared in the deployment descriptor as java.lang.String
			values</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:103</id>
      <description>The container must provide
			a unique HandlerInfo instance and Map config instance for each
			Handler instance</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:104</id>
      <description>A unique Handler instance
			must be provided for each Port component declared in the deployment
			descriptor</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:105</id>
      <description>The container must call
			the init() method within the context of a Port component's
			environment. The container must ensure the Port component's
			env-entrys are setup for the init method to access</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:106</id>
      <description>The container must provide
			a MessageContext type unique to the request type. For example, the
			container must provide a SOAPMessageContext to the
			handle&lt;action&gt;() methods of a Handler in a handler chain when
			processing a SOAP request. The SOAPMessageContext must contain the
			complete SOAP message</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:107</id>
      <description>The container must share
			the same MessageContext instance across all Handler instances and the
			target endpoint that are invoked during a single request and response
			or fault processing on a specific node</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:109</id>
      <description>Service Implementations
			using a stateless session bean must be defined in the ejb-jar.xml
			deployment descriptor file using the session element.</description>
      <location chapter="7" section="1.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:110</id>
      <description>Service Implementations
			using a JAX-RPC or JAX-WS service endpoint must be defined in the web.xml
			deployment descriptor file using the servlet-class element</description>
      <location chapter="7" section="1.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:112</id>
      <description>The assembler's
			responsibilities for Web Services for JavaEE are an extension of the
			assembler responsibilities as defined by the Enterprise JavaBeans,
			Servlet, and JavaEE specifications</description>
      <location chapter="7" section="1.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:113</id>
      <description>The deployer
			responsibilities are defined by the JavaEE, Enterprise JavaBeans, and
			Servlet specifications. In addition, the deployer must resolve the
			following information: where published WSDL definitions are placed.
			The deployer must publish every webservice-description wsdl-file with
			the correct port address attribute value to access the service. the
			value of the port address attribute for deployed services.</description>
      <location chapter="7" section="1.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:114</id>
      <description>Any component that uses a
			Web service reference must declare a dependency on the Web service
			reference in a module's deployment descriptor file.</description>
      <location chapter="1" section="1.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:115</id>
      <description>Client developers are
			responsible for defining a service-ref for each Web service a
			component in the module wants to reference. It must be defined with
			the following information: service reference name (service), type of
			the Service object (service-interface), and ports
			(port-compoment-ref)</description>
      <location chapter="7" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:117</id>
      <description>In addition to the normal
			duties a JavaEE deployer plaform role has, the client deployer must
			also provide deploy time binding information to resolve the WSDL
			document for each service-ref. If a partial WSDL document was
			specified and service and port elements are needed by a vendor to
			resolve the binding, they may be generated. The deployer is also
			responsible for providing deploy time binding information to resolve
			port access declared by the port-component-ref element.</description>
      <location chapter="7" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:118</id>
      <description>A client can use the
			stub/proxy methods of the Service Interface to get a Port stub or
			dynamic proxy</description>
      <location chapter="4" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:119</id>
      <description>The WSDL specific methods
			can be used when the full WSDL definition of the service is available
			to the client developer.</description>
      <location chapter="4" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:120</id>
      <description>The WSDL agnostic methods
			must be used if the client developer has a partial WSDL definition
			that only contains only the portType and bindings.</description>
      <location chapter="4" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:121</id>
      <description>The client developer is
			required to define a logical JNDI name for the Web service called a
			service reference. This name is specified in the deployment
			descriptor for the client.</description>
      <location chapter="4" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:122</id>
      <description>A JavaEE product provider is
			required to provide Service lookup support in the web, EJB, and
			application client containers.</description>
      <location chapter="4" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:123</id>
      <description>A container provider is
			required to support all methods of the Service interface except for
			the getHandlerRegistry() and getTypeMappingRegistry() methods as
			described in sections 4.2.3.7 and 4.2.3.8.</description>
      <location chapter="4" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:124</id>
      <description>A client developer must
			declare the Service Interface type used by the application in the
			client deployment descriptor.</description>
      <location chapter="4" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:125</id>
      <description>With JAX-RPC the client may use the
			following Service Interface methods to obtain a static stub or
			dynamic proxy for a Web service: getPort(QName portName, Class
			serviceEndpointInterface), getPort(java.lang.Class
			serviceEndpointInterface). With JAX-WS the client may use the 
			following Service Interface methods to obtain a proxy for a Web
			service: &lt;T&gt; T getPort(QName portName, Class(T) serviceEndpointInterface);
			&lt;T&gt; T getPort(java.lang.Class(T) serviceEndpointInterface);</description>
      <location chapter="4" section="2.3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:126</id>
      <description>The client may also use
			the additional methods of the Generated Service Interface to obtain a
			static stub or dynamic proxy for a Web service.</description>
      <location chapter="4" section="2.3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:127</id>
      <description>The container must provide
			at least one of static stub or dynamic proxy support for these
			methods as described in section 4.2.3.</description>
      <location chapter="4" section="2.3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:128</id>
      <description>The container must ensure
			the stub or dynamic proxy is fully configured for use by the client,
			before it is returned to the client.</description>
      <location chapter="4" section="2.3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:129</id>
      <description>The container provider
			must provide Port resolution for the getPort(java.lang.Class
			serviceEndpointInterface) method.</description>
      <location chapter="4" section="2.3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:130</id>
      <description>A client must declare its
			dependency on container Port resolution for a Service Endpoint
			Interface in the client deployment descriptor.</description>
      <location chapter="4" section="2.3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:131</id>
      <description>If a dependency for
			resolving the interface argument to a port is not declared in the
			client deployment descriptor, the container may provide a default
			resolution capability or throw a ServiceException.</description>
      <location chapter="4" section="2.3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:132</id>
      <description>A client may use the
			following DII methods of a Service Interface located by a JNDI lookup
			of the client's environment to obtain a Call object:: createCall(),
			createCall(QName portName), createCall(QName portName, String
			operationName), createCall(QName portName, QName operationName),
			getCalls(QName portName). These methods are not supported in JAX-WS. JAX-WS provides
			the Dispatch APIs to enable the client to operate at XML message level.</description>
      <location chapter="4" section="2.3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:135</id>
      <description>With JAX-RPC a client developer may use
			the following methods of the Service Interface if a partial WSDL
			definition is declared in the client deployment descriptor:
			createCall(), getPort(java.lang.Class serviceEndpointInterface),
			getServiceName(), getPorts(), getWSDLDocumentLocation(). A partial
			WSDL definition is defined as a fully specified WSDL document which
			contains no service or port elements. The JAX-RPC mapping file
			specified by the developer will not include a
			service-interface-mapping in this case.
	If JAX-WS is used, client developer may use the following methods of the Service class: &lt;T&gt; T getPort(java.lang.Class(T) serviceEndpointInterface); javax.xml.namespace.QName getServiceName(); java.util.Iterator&lt;javax.xml.namespace.QName&gt; getPorts(); java.net.URL getWSDLDocumentLocation(); &lt;T&gt; Dispatch&lt;T&gt; createDispatch(javax.xml.namespace.QName portName, java.lang.Class&lt;T&gt; type, Service.Mode mode); Dispatch&lt;java.lang.Object&gt; createDispatch(javax.xml.namespace.QName portName, javax.xml.bind.JAXBContext context, Service.Mode mode); java.util.concurrent.Executor getExecutor(); void setExecutor(java.util.concurrent.Executor executor);</description>
      <location chapter="4" section="2.3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:136</id>
      <description>With JAX-RPC a client developer may use
			the following methods of the Service Interface if no WSDL definition
			is specified in the client deployment descriptor: createCall(). With JAX-WS, a client developer may use the following methods of the Service class if no WSDL definition is specified in the client deployment descriptor: &lt;T&gt; Dispatch&lt;T&gt; createDispatch(javax.xml.namespace.QName portName, java.lang.Class&lt;T&gt; type, Service.Mode mode); Dispatch&lt;java.lang.Object&gt; createDispatch(javax.xml.namespace.QName portName, javax.xml.bind.JAXBContext context, Service.Mode mode); java.util.concurrent.Executor getExecutor(); void setExecutor(java.util.concurrent.Executor executor);</description>
      <location chapter="4" section="2.3.6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:137</id>
      <description>With JAX-RPC if the wsdl-file is not
			specified in the deployment descriptor, the jaxrpc-mapping-file must
			not be specified.</description>
      <location chapter="4" section="2.3.6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:139</id>
      <description>A container provider is
			required to support the javax.xml.rpc.service.endpoint.address to
			allow components to dynamically redirect a Stub/proxy to a different
			URI.</description>
      <location chapter="4" section="2.4.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:141</id>
      <description>This chapter defines the server programming model for Web Services for JavaEE. A WSDL document defines the interoperability of Web services and includes the specification of transport and wire format requirements. In general, WSDL places no requirement on the programming model of the client or the server. Web Services for JavaEE defines two methods of implementing a Web service. It requires the JAXRPC Servlet container based Java class programming model for implementing Web services that run in the web container and it requires the Stateless Session EJB programming model for implementing Web services that run in the EJB container. With JAX-WS, the Servlet based programming model for implementing Web Services is similar to one defined by JAX-RPC. These two implementation methods provide a means for defining a Port component to bring portable applications into the Web Services programming paradigm.</description>
      <location chapter="5" section="NA" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:145</id>
      <description>Service Implementation
			Bean implements the same methods and signatures of the SEI, but is
			not required to implement the SEI itself.</description>
      <location chapter="5" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:148</id>
      <description>There are two ways a Service Implementation Bean can be implemented. This includes a Stateless Session EJB and a JAX-RPC or JAX-WS service endpoint as defined by Chapter 10 of the JAX-RPC specification running in a web container. The two programming models are fully defined in sections 5.3.2.3 and 5.3.2.4. The Service Implementation Bean may implement the Service Endpoint Interface, but it is not required to do so.</description>
      <location chapter="5" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:149</id>
      <description>A Service Implementation
			Bean may implement other methods in addition to those defined by the
			SEI.</description>
      <location chapter="5" section="3.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:150</id>
      <description>A Service Implementation
			Bean for the web container may implement the
			java.xml.rpc.server.ServiceLifeCycle interface.</description>
      <location chapter="5" section="3.2.4.1.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:151</id>
      <description>The container provides
			certain services based on the life cycle state of the Service
			Implementation Bean.</description>
      <location chapter="5" section="3.2.4.1.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:152</id>
      <description>The life cycle of a
			Service Implementation Bean is controlled by the container and is
			illustrated in Figure 6. The methods called by the container are
			container/bean specific, but in general are quite similar. Figure 6
			illustrates the life cycle in the web container. The EJB container
			life cycle may be found in the EJB specification section 4.3.</description>
      <location chapter="5" section="3.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:154</id>
      <description>The container notifies a
			Service Implementation Bean instance that it is about to be removed
			from Method Ready state by calling container/bean specific life cycle
			methods on the instance. For the web container, with JAX-RPC runtime, the destroy method is
			called. For the web container with JAX-WS runtime, the method annotated with javax.annotation.PreDestroy is called. For the EJB container, the method annotated with javax.annotation.PreDestroy is called.</description>
      <location chapter="5" section="3.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:155</id>
      <description>Port components packaged
			in a WAR file must use a JAX-RPC or JAX-WS Service Endpoint for the Service
			Implementation Bean. Port components packaged in a EJB-JAR file must
			use a Stateless Session Bean for the Service Implementation Bean.</description>
      <location chapter="5" section="4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:157</id>
      <description>Handlers must be loaded
			using the same class loader the application code was loaded with. The
			class loading rules follow the rules defined for the container the
			Handler is running in.</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:159</id>
      <description>As defined by JAX-RPC, a
			RuntimeException (other than SOAPFaultException) thrown from any
			method of the Handler results in the destroy method being invoked and
			transition to the "Does Not Exist" state.</description>
      <location chapter="6" section="2.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:160</id>
      <description>a Handler may initialize
			internal data members with Port component specific environment
			values.</description>
      <location chapter="6" section="2.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:161</id>
      <description>Handlers associated with a
			Port component run after authorization has occurred and before the
			business logic method of the Service Implementation bean is
			dispatched to.</description>
      <location chapter="6" section="2.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:162</id>
      <description>A developer may implement
			zero or more Handlers that are associated with a Port component
			and/or a Service reference.</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:163</id>
      <description>A
			Handler.handle&lt;action&gt;() method may access the component's
			environment entries by using JNDI lookup of the
			"java:comp/env" contenxt and accessing the env-entry-names
			defined in the deployment descriptor by performing a JNDI lookup.</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:165</id>
      <description>the Handler may use
			HandlerInfo.getHandlerConfig() method to access the Handler's
			init-params declared in the deployment descriptor.</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:166</id>
      <description>A SOAPMessageContext
			Handler may add or remove headers from the SOAP message. A
			SOAPMessageContext Handler may modify the header of a SOAP message if
			it is not mapped to a parameter or if the modification does not
			change value type of the parameter if it is mapped to a parameter. A
			Handler may modify part values of a message if the modification does
			not change the value type.</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:168</id>
      <description>A Handler chain is
			processed according to the JAX-RPC specification section 12.2.2. The
			process order defaults to the order the handlers are defined in the
			deployment descriptor and follow the JAX-RPC specification section
			12.1.4 processing order.</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:176</id>
      <description>A developer may specify
			only the package-mapping if the following conditions are met: (see
			section 7.3.2).</description>
      <location chapter="7" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:177</id>
      <description>If the conditions are not
			met, a full mapping must be specified. An exception-mapping
			must be created for each WSDL fault. There must be a
			service-interface-mapping for every service element in the WSDL file
			that has a Generated Service Interface used by the developer. There
			must be a service-endpoint-interface-mapping for every combination of
			portType and binding in the WSDL file. There must be a
			package-mapping for every namespace defined in</description>
      <location chapter="7" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:179</id>
      <description>The developer must define
			the jaxrpc-mapping-file element of the webservices.xml or
			webservicesclient.xml deployment descriptor to be the location of the
			mapping file.</description>
      <location chapter="7" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:180</id>
      <description>The developer must package
			the mapping file in the module with the WSDL file.</description>
      <location chapter="7" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:182</id>
      <description>The deployment tool must
			use the JAX-RPC mapping file to generate stubs and TIEs for the
			services and service-refs.</description>
      <location chapter="7" section="3.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:183</id>
      <description>A deployment tool must be
			capable of deploying an EAR file (containing WARs and/or EJB-JARs),
			WAR file, or EJB-JAR containing Web services and/or Web services
			references.</description>
      <location chapter="8" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:184</id>
      <description>Generation of any run-time
			classes the container requires to support a JAX-RPC or JAX-WS Service Endpoint
			or Stateless Session Bean Service Implementation is provider
			specific. The behavior of the run-time classes must match the
			deployment descriptor settings of the component. A JAX-RPC or JAX-WS Service
			Endpoint must match the behavior defined by the &lt;servlet&gt;
			element in the web.xml deployment descriptor. A Stateless Session
			Bean Service Implementation must match the behavior defined by the
			&lt;session&gt; element and the &lt;assem</description>
      <location chapter="8" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:185</id>
      <description>The container must update
			and/or generate a deployed WSDL document for each declared wsdl-file
			element in the Web services deployment descriptor (webservices.xml).
			If multiple wsdl-file elements refer to the same location, a separate
			WSDL document must be generated for each.</description>
      <location chapter="8" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:186</id>
      <description>The WSDL document
			described by the wsdl-file element must contain service and port
			elements and every port-component in the deployment descriptor must
			have a corresponding WSDL port and vice versa. The deployment tool
			must update the WSDL port address element to produce a deployed WSDL
			document. The generated port address information is deployment time
			binding information. In the case of a port-component within a web
			module, the address is partially constrained by the context-root of
			the web application an</description>
      <location chapter="8" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:187</id>
      <description>The deployment tool must
			publish every deployed WSDL document. The deployed WSDL document may
			be published to a file, URL, or registry. File and URL publication
			must be supported by the provider. File publication includes within
			the generated artifacts of the application. Publication to a
			registry, such as UDDI or ebXML, is encouraged but is not required.</description>
      <location chapter="8" section="2.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:189</id>
      <description>The container must provide
			an implementation of the JAX-RPC or JAX-WS Service Interface/Class Implementation.</description>
      <location chapter="8" section="2.6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:190</id>
      <description>The container must provide
			an implementation of the JAX-RPC or JAX-WS Generated Service Interface/Class if the
			Web services client deployment descriptor defines one.</description>
      <location chapter="8" section="2.6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:191</id>
      <description>The Service Interface/Class
			Implementation must provide a static stub and/or dynamic proxy for
			all ports declared by the service element in the WSDL description. A
			container provider must support at least one of static stubs or
			dynamic proxies, but may provide support for both.</description>
      <location chapter="8" section="2.6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:192</id>
      <description>Static stubs (and dynamic
			proxies) must conform to the JAX-RPC specification sections 8.2.1 and
			8.2.2. JAX-WS only supports dynamic proxies and they
                        must conform to the JAX-WS specification section 4.2.3.</description>
      <location chapter="8" section="2.7" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:193</id>
      <description>Web Services for JavaEE
			product providers must support the following: BASIC-AUTH, Symmetric
			HTTPS</description>
      <location chapter="9" section="3.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:194</id>
      <description>Web Services for JavaEE
			relies on the authorization support provided by the JavaEE containers
			and is described in the JavaEE specification section 3.5.</description>
      <location chapter="9" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:195</id>
      <description>JAX-RPC Service Endpoint
			authorization must be defined using the http-method element value of
			POST.</description>
      <location chapter="9" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:196</id>
      <description>A Web Services for JavaEE
			server provider must support HTTPS for hop-by-hop confidentiality and
			integrity.</description>
      <location chapter="9" section="3.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:197</id>
      <description>The container must provide
			access to all SEIs declared by the port-component-ref elements of the
			service-ref through the getPort(SEI) method</description>
      <location chapter="4" section="2.2.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:198</id>
      <description>A Handler may access the
			env-entrys of the component it is associated with by using JNDI to
			lookup an appropriate subcontext of java:comp/env. Access to the
			java:comp/env contexts must be supported from the init() and
			handle&lt;action&gt;() methods. Access may not be supported within
			the destroy() method.</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:200</id>
      <description>Servlet Mapping. A
			developer may optionally specify a servlet-mapping, in the web.xml
			deployment descriptor, for a JAX-RPC or JAX-WS
			Service Endpoint. No more than one servlet-mapping may be specified
			for a servlet that is linked to by a port-component. The url-pattern
			of the servlet-mapping must be an exact match pattern (i.e. it must
			not contain an asterisk ("*")).</description>
      <location chapter="7" section="1.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:204</id>
      <description>Publishing to at least one
			location is required. Publishing to multiple locations is allowed,
			but not required. The choice of where (both location and how many
			places) to publish is deployment time binding information.</description>
      <location chapter="8" section="2.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:205</id>
      <description>The deployer role is
			responsible for specifying the deployment time binding information.
			This may include deployed WSDL port addresses and credential
			information for requests that do not use a CallbackHandler.</description>
      <location chapter="8" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:206</id>
      <description>If a service-ref contains
			a port-component-ref that contains a port-component-link, the
			deployer should bind the container managed Port for the SEI to the
			deployed port address of the port-component referred to by the
			port-component-link.</description>
      <location chapter="8" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:207</id>
      <description>When providing a binding
			for a port-component-ref, the deployer must ensure that the
			port-component-ref is compatible with the Port being bound to.</description>
      <location chapter="8" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:208</id>
      <description>Table 2 summarizes the
			behavior of the methods of the Service Interface under various
			deployment configurations.</description>
      <location chapter="4" section="2.2.7" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:209</id>
      <description>For INOUT parameters, only
			the mapping for the input message is required.</description>
      <location chapter="7" section="3.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:210</id>
      <description>The WSDL document must be
			fully specified, including the service and port elements, if the
			application is dependent on port QNames (e.g. uses the
			Service.getPort(QName,Class) method). The developer must specify the
			wsdl-file if any of the Service methods declared in section 4.2.3.4
			or 4.2.3.5 are used.</description>
      <location chapter="7" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:213</id>
      <description>The container must make
			the required Service Interface Implementation available at the JNDI
			namespace location java:comp/env/service-ref-name where
			service-ref-name is the name declared within the Web services client
			deployment descriptor using the service-ref-name element.</description>
      <location chapter="8" section="2.6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:214</id>
      <description>The WSDL file may
			reference (e.g. import) other files contained within the module using
			relative references. It may also reference other files external to
			the module using an explicit URL. Relative imports are declared
			relative to the file defining the import. Imported files may import
			other files as well using relative locations or explicit URLs.</description>
      <location chapter="7" section="1.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:214</id>
      <description>A client developer may use
			all methods of the Service Interface (except as described in sections
			4.2.3.8 and 4.2.3.9) if a full WSDL description and JAX-RPC mapping
			file are declared in the client deployment descriptor. The port
			address location attribute of a port using a SOAP/HTTP binding must
			begin with http: or https:.</description>
      <location chapter="4" section="2.2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:218</id>
      <description>The deployment tool and/or
			container must make the WSDL document that a service-ref is bound to
			available via a URL returned by the Service Interface
			getWSDLDocumentLocation() method.</description>
      <location chapter="8" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:219</id>
      <description>All webservices deployment
			descriptors must indicate the webservices schema by using the JavaEE
			namespace: http://java.sun.com/xml/ns/javaee and by indicating the
			version of the schema by using the version element</description>
      <location chapter="7" section="1.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:220</id>
      <description>The
			webservice-description-name identifies the collection of
			port-components associated with a WSDL file and JAX-RPC mapping. The
			name must be unique within the deployment descriptor.</description>
      <location chapter="7" section="1.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:221</id>
      <description>The port-component-name
			element specifies a port component's name. This name is assigned by
			the module producer to name the service implementation bean in the
			module's deployment descriptor. The name must be unique among the
			port component names defined in the same module.</description>
      <location chapter="7" section="1.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:222</id>
      <description>The handler-name element
			defines the name of the handler. The name must be unique within the
			module</description>
      <location chapter="7" section="1.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:223</id>
      <description>The value of the
			servlet-link element must be the servlet-name of a JAX-RPC Service
			Endpoint in the same WAR file.</description>
      <location chapter="7" section="1.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:224</id>
      <description>The
			webservice-description-name identifies the collection of
			port-components associated with a WSDL file and JAX-RPC mapping. The
			name must be unique within the deployment descriptor.</description>
      <location chapter="7" section="1.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:225</id>
      <description>The WSDL description may
			be a partial WSDL, but must at least include the portType and binding
			elements.</description>
      <location chapter="7" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:226</id>
      <description>The WSDL description
			provided by the developer is considered a template that must be
			preserved by the assembly/deployment process.</description>
      <location chapter="7" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:227</id>
      <description>The WSDL file may
			reference (e.g. import) other files contained within the module using
			relative references. It may also reference other files external to
			the module using an explicit URL. Relative imports are declared
			relative to the file defining the import. Imported files may import
			other files as well using relative locations or explicit URLs.
			Relative references must not start with a "/".</description>
      <location chapter="7" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:228</id>
      <description>A Web Services for JavaEE
			provider is required to provide a URL that maintains the referential
			integrity of the WSDL document the service-ref is bound to if the
			wsdl-file element refers to a document located in the wsdl directory
			or one of its subdirectories.</description>
      <location chapter="8" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:231</id>
      <description>Anonymous types are
			treated as root WSDL types with special QNames and are mapped using
			the java-xml-type-mapping using the rules defined in 7.3.2.2.</description>
      <location chapter="7" section="3.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:232</id>
      <description>All anonymous types
			acquire their namespaces from the enclosing root level element or
			type.</description>
      <location chapter="7" section="3.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:233</id>
      <description>Hidden anonymous array
			types, as defined in rule 3, are declared in a param-type element as
			the name of the Java type of type T appended with "[]" if the
			mapping is to a Java array.</description>
      <location chapter="7" section="3.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:235</id>
      <description>The wsdl-message-part-name
			element is required only when the message referenced by the
			wsdl-message element has more than one part.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:236</id>
      <description>The param-position element
			defines the position of a parameter within a Java method. It must be
			an integer starting from 0.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:237</id>
      <description>The package-type indicates
			the Java package name. It must be a fully qualified package name,
			even though the XML schema type is fully-qualified-classType.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:238</id>
      <description>The parameter-mode element
			defines the mode of the parameter. It can have only three values, IN,
			OUT, INOUT.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:240</id>
      <description>The qname-scope elements
			scopes the reference of a QName to the WSDL element type it applies
			to. The value of qname-scope may be simpleType, complexType, or
			element.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:241</id>
      <description>The
			service-endpoint-interface element defines the Java type for the
			endpoint interface. The name must be a fully qualified class name.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:244</id>
      <description>The service-interface
			element defines the Java type for the service. For static services,
			it is javax.xml.rpc.Service interface. For generated service, it
			would be the generated interface name. The name must be a fully
			qualified class name.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:246</id>
      <description>The xml-attribute-name
			element defines name attribute value of a WSDL attribute element
			within a root type. The value of an xml-attribute-name element must
			match the value of the ref attribute if mapping an attribute
			reference.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:247</id>
      <description>The xml-element-name
			element defines name attribute value of a WSDL element within a root
			type. The value of an xml-element-name element must match the value
			of the ref attribute if mapping an element reference.</description>
      <location chapter="7" section="3.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:248</id>
      <description>A deployment tool must be
			able to deploy a WS-I Basic Profile 1.0 compliant application.</description>
      <location chapter="8" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:249</id>
      <description>A Web Services for JavaEE
			provider is required to support publishing a deployed WSDL document
			if the Web services deployment descriptor (webservices.xml) wsdl-file
			element refers to a WSDL file contained in the wsdl directory or
			subdirectory, as described in section 5.4.1.</description>
      <location chapter="8" section="2.5" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4000</id>
      <description>javax.xml.ws.WebServiceRef annotation With JAX-WS, client developer is required to use the javax.xml.ws.WebServiceRef annotation to denote a reference to a Service or a Service endpoint. Complete definition of javax.xml.ws.WebServiceRef annotation is defined in section 7.9 of JAX-WS specification. The containers must ensure that the use of this annotation is supported. The following example illustrates the use of this annotation when declaring a Service: @WebServiceRef(name="java:comp/env/service/AddressBookService") AddressBookService abf; The same annotation can also be used to declare a Service endpoint: @WebServiceRef( name="java:comp/env/service/AddressBookService", AddressBookService.class) AddressBookPort port; Address address = port.getAddress( John Doe ); javax.jws.HandlerChain annotation can be used with this annotation to specify handlers on these client side references. More information on the HandlerChain annotation can be found in JSR-181 specification and also in Chapter 6 of this specification. If wsdlLocation attribute of WebServiceRef annotation is specified, it is always relative to the root of the module. HTTP URL can also be specified here. The &lt;wsdl-file&gt; element in client deployment descriptor (section 7.2) always overrides the wsdlLocation specified in the annotation. If there is no &lt;wsdl-file&gt; element or wsdlLocation specified in the annotation, then the wsdlLocation attribute of @WebServiceClient annotation on the generated Service class needs to be consulted. (section 7.5 of JAX-WS specification). For co-located clients (where the client and the server are in the same Java EE application unit) with generated Service class, the location of the final WSDL document is resolved by comparing the Service name on the @WebServiceClient annotation on the the generated Service to the Service names of all the deployed port components in the Java EE application unit. This default behavior can be overridden using the &lt;port-component-link&gt; deployment descriptor element. Refer to client deployment descriptor schema Section 7.2.5 If the name attribute is not specified in this annotation then default naming rules apply as specified in the Java EE 5.0 specification. (section EE.5.2.3) The following table summarizes the relationship between the deployment descriptors for &lt;service-ref&gt; and member attributes of this annotation.
Table 1 Relationship between the deployment descriptor elements and javax.xml.ws.WebServiceRef annotation.
Deployment Descriptor elements javax.xml.ws.WebServiceRef annotation &lt;service-ref&gt; One per @WebServiceRef annotation &lt;service-ref&gt;/&lt;service-ref-name&gt; @WebServiceRef.name &lt;service-ref&gt;/&lt;wsdl-file&gt; @WebServiceRef.wsdlLocation &lt;service-ref&gt;/&lt;service-interface&gt; @WebServiceRef.type when @WebServiceRef.value is not specified. In other words the annotation is used to declare a Service. OR @WebServiceRef.value when @WebServiceRef.type is a Service Endpoint.class The type attribute is implied when this annotation is used on a field. Similar to @Resource annotation in JSR-250 Common Annotations for Java Platform &lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;service-endpointinterface&gt; @WebServiceRef.type when @WebServiceRef.value is a Service class. &lt;service-ref&gt;/&lt;port-component-ref&gt;/&lt;port-component-link&gt; Default mechanism used for co-located case. The deployment descriptor is used only for overriding the default behavior.</description>
      <location chapter="4" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4001</id>
      <description>Test javax.xml.ws.WebServiceRef() annotation with no field attributes. The service-ref-name 
in the runtime deployment descriptor MUST match the package name of the client followed by
"/service". So the service-ref-name MUST be "client-package-name/service".</description>
      <location chapter="4" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4002</id>
      <description>Test javax.xml.ws.WebServiceRef(name="service-ref-name") annotation with name attribute. The
service-ref-name specified in the name attribute MUST match the service-ref-name in runtime 
deployment descriptor.</description>
      <location chapter="4" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4003</id>
      <description>Test javax.xml.ws.WebServiceRef(wsdlLocation="wsdl-location-url") annotation with wsdlLocation
attribute.</description>
      <location chapter="4" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4004</id>
      <description>Test javax.xml.ws.WebServiceRef(type="...", value="...") annotation with type and value attributes.</description>
      <location chapter="4" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4005</id>
      <description>JAX-WS Dispatch APIs Client developers may use javax.xml.ws.Dispatch APIs defined in JAX-WS specification. This is a low level API that requires clients to construct messages or message payloads as XML and requires an intimate knowledge of the desired message or payload structure. This is useful in those situations where the client wants to operate at the XML message level. An instance of javax.xml.ws.Dispatch can be obtained by invoking any one of the two createDispatch(...) methods on a Service interface. Details on Dispatch API's and its usage can be referenced at section 4.3 of the JAX-WS specification.</description>
      <location chapter="4" section="2.7" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4006</id>
      <description>JAX-WS Asynchronous Operations Client developer may use asynchronous invocations as defined by the JAX-WS specification. JAX-WS supports asynchronous invocations through generated asynchronous methods on the Service Endpoint Interface (section 2.3.4 of JAX-WS specification) and javax.xml.ws.Dispatch (section 4.3.3 of JAX-WS specification) interface. There are two forms of asynchronous invocations in JAX-WS   Polling and Callback.</description>
      <location chapter="4" section="2.8" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4007</id>
      <description>Polling Invocations. Client asynchronous polling invocations should be supported by components running in Servlet container, EJB container and Application Client container, since any of these components can act as JAX-WS clients. Client developers can either use the Service Endpoint Interface or javax.xml.ws.Dispatch to make asynchronous polling invocations. The usage should meet the requirements defined in section 2.3.4 of JAX-WS specification for Service Endpoint Interface or section 4.3.3 of JAX-WS specification for javax.xml.ws.Dispatch interface.</description>
      <location chapter="4" section="2.8.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4008</id>
      <description>Callback Invocations. Client asynchronous callback invocations should only be supported by components running in Servlet container and Application Client container. Client developers can either use the Service Endpoint Interface or javax.xml.ws.Dispatch to implement asynchronous polling invocations. The usage should meet the requirements defined in section 2.3.4 of JAX-WS specification for Service Endpoint Interface or section 4.3.3 of JAX-WS specification for javax.xml.ws.Dispatch interface. It will be the container implementors responsibility to insure that the client developer has access to java:comp/env JNDI context for that component in the callback handler's handleResponse(...) method. The following operations are allowed from within the callback handler:" JNDI access to java:comp/env " Resource manager access " Enterprise bean access The following requirements apply to client asynchronous callback invocations from a Servlet container: " The behavior of the execution of the callback handler is undefined if the Web module defining the callback handler, is undeployed before the handler's handleResponse(...) method is invoked. " There is no client identity in the thread that is invoking the callback handler. If the handler needs to access any web or EJB resources that require client identity, then those resources must specify either a @RunAs annotation on the resource or a &lt;run-as&gt; element in the deployment descriptor that defines them.</description>
      <location chapter="4" section="2.8.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4009</id>
      <description>Interoperability between a JAX-RPC client and JAX-WS endpoint (or vice-versa) is governed by the requirements defined by the WS-I Basic Profile 1.0. As long as both the client and the server adhere to these requirements, they should be able to interoperate.</description>
      <location chapter="4" section="2.9" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4010</id>
      <description>For declaring multiple references to Web services on a single class javax.xml.ws.WebServiceRefs annotation may be used. Complete definition of javax.xml.ws.WebServiceRefs annotation is defined in section 7.10 of JAX-WS specification. The containers must ensure that the use of this annotation is supported.</description>
      <location chapter="4" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4011</id>
      <description>JAX_RPC and JAX-WS Properties The Java EE container environment provides a broader set of operational characteristics and constraints for supporting the Stub/proxy properties defined within JAX-RPC or JAX-WS. While support of standard properties for Stub and Call (only in JAX-RPC) objects is required, their use may not work in all cases in a Java EE environment. The following JAX-RPC properties are not recommended for use in a managed context defined by this specification: javax.xml.rpc.security.auth.username and javax.xml.rpc.security.auth.password The following JAX-WS properties are not recommended for use in a managed context defined by this specification: javax.xml.ws.security.auth.username and javax.xml.ws.security.auth.password</description>
      <location chapter="4" section="2.6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4013</id>
      <description>MTOM/XOP support JAX-WS compliant implementations are required to support MTOM (Message Transmission Optimization Mechanism)/XOP (XML-binary Optimized Packaging) specifications from W3C. Refer to section 10.4.1.1 of JAX-WS specification. Support for SOAP MTOM/XOP mechanism for optimizing transmission of binary data types is provided by JAXB which is the data binding for JAX-WS. JAX-WS provides the MIME processing required to enable JAXB to serialize and deserialize MIME based MTOM/XOP packages. Support for enabling or disabling SOAP MTOM/XOP mechanism on the client is provided by &lt;enable-mtom&gt; deployment descriptor element specified as part of the &lt;port-component-ref&gt;. Refer to section 7.2.2 for details on this deployment descriptor element. The default value for &lt;enable-mtom&gt; deployment descriptor element is false. If this element is not specified in the deployment descriptors, the default value is used.</description>
      <location chapter="4" section="2.10" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:4014</id>
      <description>Packaging The developer is responsible for packaging, either by containment or reference (i.e. by using the MANIFEST ClassPath to refer to other JAR files that contain the required classes), the class files for each Web service including the: Service Endpoint Interface classes, Generated Service Interface class (if used), and their dependent classes. The following files must also be packaged in the module: WSDL files, JAX-RPC Mapping files (not required with JAX-WS), and a Web services client deployment descriptor (not required with JAX-WS if annotations are used) in a Java EE module. The location of the Web services client deployment descriptor in the module is module specific. WSDL files are located relative to the root of the module and are typically located in the wsdl directory that is co-located with the module deployment descriptor or a subdirectory of it. JAX-RPC Mapping Files (not required with JAX-WS) are located relative to the root of the module and are typically colocated with the WSDL file. The developer must not package generated stubs. JAX-WS requires support for a OASIS XML Catalogs 1.1 specification to be used when resolving any Web service document that is part of the description of a Web service, specifically WSDL and XML Schema documents. Refer to section 4.4 of JAX-WS specification. The catalog file jax-ws-catalog.xml must be co-located with the module deployment descriptor (WEB-INF/jax-ws-catalog.xml for web modules and META-INF/jax-ws-catalog.xml for the rest).</description>
      <location chapter="4" section="2.12" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:5000</id>
      <description>javax.jws.WebService annotation JAX-WS along with JSR-181 requires that the Service Implementation Beans must include javax.jws.WebService class-level annotation to indicate that it implements a Web Service. Detail requirements and definition of the javax.jws.WebService annotation can be found in JSR-181 specification (section 4.1). If member attributes of the annotation are not specified then server side deployment descriptors (see section 7.1) are used. The member attributes of the annotation can also be overridden by server side deployment descriptors . If name attribute is used with the javax.jws.WebService annotation, then the name must be unique among all the Service Implementation Beans annotated with javax.jws.WebService in a Java EE module. A Service Implementation Bean using this annotation is not required to specify a wsdlLocation. If wsdlLocation attribute is specified in the javax.jws.WebService annotation, it must follow the packaging rules for the WSDL file detailed in section 5.4. If wsdlLocation attribute is specified, then the WSDL file must exist at that location or can be resolved using the catalog facility specified in section 5.4.4. The following table shows the relationship between the deployment descriptor elements and this annotation. Table 1 Relationship between the deployment descriptor elements and javax.jws.WebService annotation Deployment Descriptor elements javax.jws.WebService annotation &lt;webservices&gt;/&lt;webservice-description&gt; One per @WebService annotation &lt;webservices&gt;/&lt;webservicedescription&gt;/&lt; webservice-description-name&gt; This is implementation specific &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;wsdlfile&gt; @WebService.wsdlLocation &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; port-component-name&gt; @WebService.name (if not specified then its default value as specified in JSR-181), only if it is unique in the module OR If the name is not specified in the Service Implementation Bean then fully qualified name of the Bean class is used to guarantee uniqueness If the above is not unique then fully qualified name of the Bean class is used to guarantee uniqueness &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; wsdl-service&gt; @WebService.serviceName &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; wsdl-port&gt; @WebService.portName &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; service-endpoint-interface&gt; @WebService.endpointInterface For Stateless Session EJBs using this annotation, the name attribute of the jakarta.ejb.Stateless annotation on the Service Implementation Bean class must be used as the &lt;ejb-link&gt; element in the deployment descriptor to map the Port component to the actual EJB. If name attribute in jakarta.ejb.Stateless annotation is not specified, then the default value is used as defined in the Enterprise JavaBeans specification (EJB 3.0 Simplified API) section 10.1.1 For Servlet based endpoints using this annotation, fully qualified name of the Service Implementation Bean class must be used as the &lt;servlet-link&gt; element in the deployment descriptor to map the Port component to the actual Servlet. Following default mapping rules apply for Web modules that contain Servlet based endpoints that use this annotation but do not package a web.xml or a package a partial web.xml: " fully qualified name of the Service Implementation Bean class must be mapped to &lt;servlet-name&gt; element in web.xml. " fully qualified name of the Service Implementation Bean class must be mapped to &lt;servlet-class&gt; element in web.xml " serviceName attribute of javax.jws.WebService annotation prefixed with "/" must be mapped to &lt;url- pattern&gt; element in web.xml. If the serviceName attribute in javax.jws.WebService annotation is not specified, then the default value as specified in JSR-181 specification is used.</description>
      <location chapter="5" section="3.2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:5001</id>
      <description>javax.xml.ws.Provider interface and javax.xml.ws.WebServiceProvider annotation Service Endpoint Interfaces (SEI) provide a high level Java-centric abstraction that hides the details of converting between Java objects and their XML representations for use in XML-based messages. However, in some cases it is desirable for services to be able to operate at the XML message level. The javax.xml.ws.Provider interface in JAX-WS (section 5.1) offers an alternative to SEIs and may be implemented by Service Implementation Beans wishing to work at the XML message level. JAX-WS requires that these Service Implementation Beans must include javax.xml.ws.WebServiceProvider annotation on the class, indicating that it implements the javax.xml.ws.Provider interface. Details on the javax.xml.ws.WebServiceProvider annotation can be found in JAX-WS specification (section 7.7). If member attributes of the annotation are not specified then server side deployment descriptors (see section 7.1) are used. The member attributes of the annotation can also be overridden by server side deployment descriptors . A Service Implementation Bean using this annotation is not required to specify a wsdlLocation. If wsdlLocation attribute is specified in the javax.xml.ws.WebServiceProvider annotation, it must follow the packaging rules detailed in section 5.4. If wsdlLocation attribute is specified, then the WSDL file must exist at that location or can be resolved using the catalog facility specified in section 5.4.4. The following table shows the relationship between the deployment descriptor elements and this annotation. Table 2 Relationship between the deployment descriptor elements and javax.xml.ws.WebServiceProvider annotation Deployment Descriptor element javax.xml.ws.WebServiceProvider annotation &lt;webservices&gt;/&lt;webservice-description&gt; 
One per @WebServiceProvider annotation &lt;webservices&gt;/&lt;webservicedescription&gt;/&lt; webservice-description-name&gt; This is implementation specific &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;wsdlfile&gt; @WebServiceProvider.wsdlLocation &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; port-component-name&gt; Fully qualified name of the Service Implementation Bean is used to guarantee uniqueness &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; wsdl-service&gt; @WebServiceProvider.serviceName &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; wsdl-port&gt; @WebServiceProvider.portName &lt;webservices&gt;/&lt;webservice-description&gt;/&lt;portcomponent&gt;/&lt; service-endpoint-interface&gt; This deployment descriptor is not required to be specified for Service Implementation Beans that are annotated with @WebServiceProvider If deployment descriptor is not used or &lt;ejb-link&gt;/&lt;servlet-link&gt; elements are not specified in deployment descriptor, then portName attribute from javax.xml.ws.WebServiceProvider annotation is used to map the port component to the actual Java EE component (EJB or Servlet). If either &lt;wsdl-service&gt; or &lt;wsdl-port&gt; elements are provided in the deployment descriptor, then the namespace used in these elements overrides the targetNamespace member attribute in this annotation . javax.xml.ws.WebServiceProvider annotated Service Implementation Beans can be run either as a Stateless Session EJB in an EJB container or as a JAX-RPC/JAX-WS service endpoint in a web container. The two programming models are fully defined in sections 5.3.2.3 and 5.3.2.4.
If deployment descriptor is not used or &lt;ejb-link&gt;/&lt;servlet-link&gt; elements are not specified in deployment descriptor, then portName attribute from javax.jws.WebService annotation is used to map the port component to the actual Java EE component (EJB or Servlet). The &lt;service-endpoint-interface&gt; element in the deployment descriptor for an implementation bean must match @WebService.endpointInterface member attribute if it is specified for the bean. Any other value is ignored. If either &lt;wsdl-service&gt; or &lt;wsdl-port&gt; elements are provided in the deployment descriptor, then the namespace used in these elements overrides the targetNamespace member attribute in this annotation .If &lt;wsdl-service&gt; element is provided in the deployment descriptor, then the namespace used in this element overrides the targetNamespace member attribute in this annotation. The namespace in &lt;wsdl-port&gt; element if specified, must match the effective target namespace. javax.jws.WebService annotated Service Implementation Beans can be run either as a Stateless Session EJB in an EJB container or as a JAX-RPC/JAX-WS service endpoint in a web container. The two programming models are fully defined in sections 5.3.2.3 and 5.3.2.4.</description>
      <location chapter="5" section="3.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:5002</id>
      <description>Web container programming model for JAX-WS JAX-WS Service Endpoint that run within the web container must follow the requirements repeated here. A JAX-WS Service Endpoint can be single or multi-threaded. A JAX-WS Service Endpoint must implement javax.servlet.SingleThreadModel if single threaded access is required by the component. A container must serialize method requests for a Service Implementation Bean that implements the SingleThreadModel interface. Note, the SingleThreadModel interface has been deprecated in the Servlet 2.4 specification. The Service Implementation Bean must follow these requirements: The Service Implementation Bean class must be annotated with either javax.jws.WebService or javax.xml.ws.WebServiceProvider annotation. See section 5.3.2.1 and 5.3.2.2.  For developers starting from Java using JAX-WS, javax.jws.WebService annotation on Service Implementation Bean may optionally reference an SEI but is not required to do so. If SEI is not specified, the Service Implementation Bean class implicitly defines a SEI as required by section 3.3 of JAX-WS specification. The business methods of the bean must be public and must not be final or static. Only those methods that are annotated with @WebMethod in the Service Implementation Bean, are exposed to the client. For developers starting from WSDL using JAX-WS, the SEI generated from the WSDL must be annotated with javax.jws.WebService annotation. Refer to section 2.2 of JAX-WS specification. The Service Implementation Bean must be annotated with javax.jws.WebService annotation and the endpointInterface member attribute must refer to this generated SEI. Service Implementation Bean may implement the Service Endpoint Interface, but it is not required to do so. The bean must implement all the method signatures of the SEI. The business methods of the bean must be public and must not be final or static. It may implement other methods in addition to those defined by the SEI. The Service Implementation Bean must have a default public constructor. A Service Implementation must be a stateless object. A Service Implementation Bean must not save client specific state across method calls either within the bean instance s data members or external to the instance. A container may use any bean instance to service a request. The class must be public, must not be final and must not be abstract. The class must not define the finalize() method.</description>
      <location chapter="5" section="3.2.4.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:5004</id>
      <description>Allowed access to container services The container provides certain services based on the life cycle state of the Service Implementation Bean. Access to services provided by a web container in a Java EE environment (e.g. transactions, JNDI access to the component s environment, etc.) must follow the requirements defined by the Servlet and Java EE specifications. Access to a WebServiceContext must meet the requirements defined by the JAX-WS specification section 5.3. At runtime, the methods in WebServiceContext serve the same purpose as the methods with the same name defined in ServletEndpointContext in JAX-RPC or javax.servlet.http.HttpServletRequest. Service Implementation Beans can get access to HTTPSession and ServletContext using table 9.4 of section 9.4.1.1 of JAX-WS specification.</description>
      <location chapter="5" section="3.2.4.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:5005</id>
      <description>Protocol Binding. JAX-WS specification requires that a developer be able to specify the protocol binding on a Web Service endpoint. JAX-WS also requires support for the following protocol bindings: "SOAP1.2 over HTTP - SOAP1.2/HTTP" "SOAP1.1 over HTTP - SOAP1.1/HTTP" "XML over HTTP - XML/HTTP". Support for specifying the protocol binding is provided by &lt;protocol-binding&gt; deployment descriptor element for a port component. Refer to section 7.1.2 for details on this deployment descriptor element. If this element is not specified in the deployment descriptors, the default binding is used (SOAP1.1/HTTP).</description>
      <location chapter="5" section="3.6" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:5006</id>
      <description>MTOM/XOP support JAX-WS compliant implementations are required to support MTOM (Message Transmission Optimization Mechanism)/XOP (XML-binary Optimized Packaging) specifications from W3C. Refer to section 10.4.1.1 of JAX-WS specification. Support for SOAP MTOM/XOP mechanism for optimizing transmission of binary data types is provided by JAXB which is the data binding for JAX-WS. JAX-WS provides the MIME processing required to enable JAXB to serialize and deserialize MIME based MTOM/XOP packages. Support for enabling or disabling SOAP MTOM/XOP mechanism is provided by &lt;mtom-enabled&gt; deployment descriptor element for a port component. Refer to section 7.1.2 for details on this deployment descriptor element. The default value for &lt;mtom-enabled&gt; deployment descriptor element is false. If this element is not specified in the deployment descriptors, the default value is used.</description>
      <location chapter="5" section="3.7" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:5007</id>
      <description>Catalog packaging JAX-WS requires support for a OASIS XML Catalogs 1.1 specification to be used when resolving any Web service document that is part of the description of a Web service, specifically WSDL and XML Schema documents. Refer to section 4.4 of JAX-WS specification. The catalog file jax-ws-catalog.xml must be co-located with the module deployment descriptor (WEB-INF/jax-ws-catalog.xml for web modules and META-INF/jax-ws-catalog.xml for EJB modules).</description>
      <location chapter="5" section="4.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6002</id>
      <description>On the server, Handlers can only communicate with the business logic of the component using the MessageContext.</description>
      <location chapter="6" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6005</id>
      <description>Handlers are associated with the Port component on the server and therefore run in both the web and EJB containers.</description>
      <location chapter="6" section="1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6006</id>
      <description>Handlers must be able to transform the SOAP header.</description>
      <location chapter="6" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6007</id>
      <description>Handlers must be able to transform just parts of the body.</description>
      <location chapter="6" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6008</id>
      <description>Handlers must be able to just read a message where no additions, transformations, or modification
to the message is made.</description>
      <location chapter="6" section="2.1" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6009</id>
      <description>A JAX-WS Web Services for Java EE provider is required to provide an implementation of HandlerResolver that returns the Handler Chain with Handlers specified in the deployment descriptor or the javax.jws.HandlerChain annotation.</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6010</id>
      <description>The ordering of the Handlers in the HandlerChain must follow the requirements specified in JAX-WS specification.</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6011</id>
      <description>the ordering of any given type of Handler (logical or protocol) in the deployment descriptor must be maintained</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6012</id>
      <description>A Web Services for Java EE provider is required to provide an implementation of MessageContext.</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6013</id>
      <description>A Web Services for Java EE provider is required to provide all the interfaces of the javax.xml.rpc.handler.soap and javax.xml.ws.handler.soap package.</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6014</id>
      <description>The provider must also provide an implementation of the SOAPMessageContext interface.</description>
      <location chapter="6" section="2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6015</id>
      <description>javax.annotation.PostConstruct annotation</description>
      <location chapter="6" section="2.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6015.1</id>
      <description>The container must carry out any injections (if any) requested by the handler, typically via the @Resource annotation (see JSR-250 Common Annotations for Java Platform specification).</description>
      <location chapter="6" section="2.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6015.2</id>
      <description>After all the injections have been carried out, the container must invoke the method carrying a javax.annotation.PostConstruct annotation.</description>
      <location chapter="6" section="2.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6015.3</id>
      <description>This method must have a void return type and take zero arguments.</description>
      <location chapter="6" section="2.2.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6021</id>
      <description>The javax.jws.HandlerChain annotation from JSR-181 (imported by JAX-WS) may be declared on Web Service endpoints (those declared with the javax.jws.WebService or javax.xml.ws.WebServiceProvider annotation)</description>
      <location chapter="6" section="2.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6022</id>
      <description>The javax.jws.HandlerChain annotation from JSR-181 (imported by JAX-WS) may be declared on on Web Service references (those declared with the javax.xml.ws.WebServiceRef annotation).</description>
      <location chapter="6" section="2.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6023</id>
      <description>The deployment descriptors on port component or Service reference override the javax.jws.HandlerChain annotation specified in the implementation.</description>
      <location chapter="6" section="2.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6024</id>
      <description>The &lt;handler-chains&gt; element in the deployment descriptor is used for specifying the handlers on a port component or Service reference. This deployment descriptor allows for specifying multiple handler chains such that all handlers in a handler chain could be specific to a Service name, a Port name or a list of protocol bindings.</description>
      <location chapter="6" section="2.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6026</id>
      <description>JAX-WS based container provider is required to support this (javax.jws.HandlerChain) annotation.</description>
      <location chapter="6" section="2.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6027</id>
      <description>They are also required to provide an implementation of HandlerResolver that returns a handler chain with handlers specified in the deployment descriptor.</description>
      <location chapter="6" section="2.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6028</id>
      <description>They are also required to provide an implementation of HandlerResolver that returns a handler chain with handlers specified in the javax.jws.HandlerChain annotation.</description>
      <location chapter="6" section="2.2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6035</id>
      <description>Handlers run under the transaction context of the component they are associated with.</description>
      <location chapter="6" section="2.2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6038</id>
      <description>With JAX-WS, only a Handler implementation that implements the javax.xml.ws.handler.soap.SOAPHandler interface must implement the getHeaders() method. The headers that a Handler declares it will process (i.e. those returned by the Handler.getHeaders() method) must be defined in the WSDL definition of the service.</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6039</id>
      <description>A Handler implementation must use the MessageContext to pass information to other Handler implementations in the same Handler chain and, in the case of the JAX-RPC or JAX-WS service endpoint, to the Service Implementation Bean.</description>
      <location chapter="6" section="2.3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6047</id>
      <description>The container must provide a MessageContext type unique to the request type.</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6048</id>
      <description>The container must share the same MessageContext instance across all Handler instances and the target endpoint that are invoked during a single request and response or fault processing on a specific node.</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6049</id>
      <description>Packaging</description>
      <location chapter="6" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6049.1</id>
      <description>The handler chain file in the javax.jws.HandlerChain annotation is required to be packaged in the module. It must follow the requirements for location as specified in section 4.6.1 of JSR-181 specification (Web Services Metadata for the Java Platform).</description>
      <location chapter="6" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6049.2</id>
      <description>Additionally, the handler chain file can also be packaged and specified in the annotation such that, it is accessible as a resource from the ClassPath.</description>
      <location chapter="6" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6049.3</id>
      <description>At runtime, container providers must first try to access the handler chain file as per the locations specified in JSR-181 specification. Failing that, they must try to access it as a resource from the ClassPath.</description>
      <location chapter="6" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6049.4</id>
      <description>If more than one resources are returned from the ClassPath, then the first one is used.</description>
      <location chapter="6" section="3" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:6051</id>
      <description>In a JAX-WS based container, a Handler chain is processed according to the JAX-WS specification section
                   9.2.1.2. In addition to this, the ordering of any given type of Handler (logical or protocol) in the 
                   handler configuration file specified in the javax.jws.HandlerChain annotation, must be maintained.</description>
      <location chapter="6" section="2.4" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:7001</id>
      <description>MTOM/XOP support. The developer may specify if MTOM/XOP support for the portcomponent is enabled or disabled by using enable-mtom element when JAX-WS based runtime is used. By default the value of this element is false. If this element is not specified then the default value is assumed.</description>
      <location chapter="7" section="1.2" />
    </assertion>
    <assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
      <id>WS4EE:SPEC:7002</id>
      <description>Protocol Binding. The developer may specify the protocol binding to use for the portcomponent by specifying the URI or a pre-defined token (like ##SOAP11_HTTP,
##SOAP12_HTTP, ##XML_HTTP) in the protocol-binding element when JAX-WS based runtime is used. The default protocol binding is ##SOAP11_HTTP. If this element is not specified then the default value is assumed. The pre-defined tokens essentially act as alias for the actual URI for the protocol binding. The URIs for these pre-defined tokens are listed below:
 ##SOAP11_HTTP - " http://schemas.xmlsoap.org/wsdl/soap/http "
 ##SOAP12_HTTP - " http://www.w3.org/2003/05/soap/bindings/HTTP/ "
 ##XML_HTTP - "http://www.w3.org/2004/08/wsdl/http"</description>
      <location chapter="7" section="1.2" />
    </assertion>
  </assertions>
</spec>


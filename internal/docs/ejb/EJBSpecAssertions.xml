<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet type="text/xsl" href="https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/spec_assertions.xsl"?>
<spec>
	<next-available-id/>
	<previous-id/>
	<technology>EJB</technology>
	<id>EJB</id>
	<name>Enterprise JavaBeans</name>
	<version>3.2</version>
	<location-names>
		<chapters>
			<chapter id="3" name="Client View of a Session Bean">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Local, Remote, and Web Service Client Views"/>
					<section id="2.1" name="Remote Clients"/>
					<section id="2.2" name="Local Clients"/>
					<section id="2.3" name="Choosing Between a Local or Remote Client View"/>
					<section id="2.4" name="Web Service Clients"/>
					<section id="3.3" name="EJB Container"/>
					<section id="3.4" name="Client View of Session Beans Written to the EJB 3.0 Simplified API"/>
					<section id="4.1" name="Obtaining a Session Bean's Business Interface"/>
					<section id="4.2" name="Session Bean's Business Interface"/>
					<section id="4.3" name="Client View of Session Object's Life Cycle"/>
					<section id="4.4" name="Example of Obtaining and Using a Session Object"/>
					<section id="4.5" name="Session Object Identity"/>
					<section id="4.5.1" name="Stateful Session Beans"/>
					<section id="4.5.2" name="Stateless Session Beans"/>
					<section id="5" name="The Web Service Client View of a Stateless Bean"/>
					<section id="5.1" name="Stateful Session Beans"/>
					<section id="5.2" name="Stateless Session Beans"/>
					<section id="6" name="Remote and Local Client View of Session Beans Written to the EJB 2.1 Client View API"/>
					<section id="6.1" name="Locating a Session Bean's Home Interface"/>
					<section id="6.2" name="Session Bean's Remote Home Interface"/>
					<section id="6.2.1" name="Creating a Session Object"/>
					<section id="6.2.2" name="Removing a Session Object"/>
					<section id="6.3" name="Session Bean's Local Home Interface"/>
					<section id="6.3.1" name="Creating a Session Object"/>
					<section id="6.3.2" name="Removing a Session Object"/>
					<section id="6.4" name="EJBObject and EJBLocalObject"/>
					<section id="6.5" name="Session Object Identity"/>
					<section id="6.6" name="Client View of Session Object's Life Cycle"/>
					<section id="6.6.1" name="References to Session Object Remote Interfaces"/>
					<section id="6.6.2" name="References to Session Object Local Interfaces"/>
					<section id="6.7" name="Creating and Using a Session Object"/>
					<section id="6.8" name="Object Identity"/>
					<section id="6.8.1" name="Stateful Session Beans"/>
					<section id="6.8.2" name="Stateless Session Beans"/>
					<section id="6.8.3" name="getPrimaryKey()"/>
					<section id="9" name="Type Narrowing"/>
				</sections>
			</chapter>	
			<chapter id="4" name="Session Bean Component Contract">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Conversational State of a Stateful Session Bean"/>
					<section id="2.1" name="Instance Passivation and Conversational State"/>
					<section id="2.2" name="The Effect of Transaction Rollback on Conversational State"/>
					<section id="3" name="Protocol Between a Session Bean Instance and its Container"/>
					<section id="3.1" name="The Required SessionBean Interface"/>
					<section id="3.2" name="Dependency Injection"/>
					<section id="3.3" name="The SessionContext Interface"/>
					<section id="3.4" name="Session Bean Lifecycle Callback Interceptor Methods"/>
					<section id="3.5" name="The Optional SessionBean Interface"/>
					<section id="3.6" name="Use of the MessageContext Interface by Stateless Session Beans"/>
					<section id="3.7" name="The Optional SessionSynchronization Interface for Stateful Session Beans"/>
					<section id="3.8" name="Timeout Callbacks for Stateless Session Beans"/>
					<section id="3.9" name="Business Method Delegation"/>
					<section id="3.10" name="Session Bean Creation"/>
					<section id="3.10.1" name="Stateful Session Beans"/>
					<section id="3.10.2" name="Stateless Session Beans"/>
					<section id="3.11" name="Session Bean Removal"/>
					<section id="3.12" name="Business Method Interceptor Methods for Session Beans"/>
					<section id="3.13" name="Serializing Session Bean Methods"/>
					<section id="3.14" name="Transaction Context of Session Bean Methods"/>
					<section id="4" name="Stateful Session Bean State Diagram"/>
					<section id="4.1" name="Operations Allowed in the Methods of a Stateful Session Bean Class"/>
					<section id="4.2" name="Dealing with Exceptions"/>
					<section id="4.3" name="Missed PreDestroy Calls"/>
					<section id="4.4" name="Restrictions for Transactions"/>
					<section id="5" name="Stateless Session Beans"/>
					<section id="5.1" name="Stateless Session Bean State Diagram"/>
					<section id="5.2" name="Operations Allowed in the Methods of a Stateful Session Bean Class"/>
					<section id="5.3" name="Dealing with Exceptions"/>
					<section id="4.4" name="Restrictions for Transactions"/>
					<section id="6" name="The Responsibilities of the Bean Provider"/>
					<section id="6.1" name="Classes and Interfaces"/>
					<section id="6.2" name="Session Bean Class"/>
					<section id="6.3" name="LifeCycle Calback Interceptor Methods"/>
					<section id="6.4" name="ejbCreateMETHOD Methods"/>
					<section id="6.5" name="Business Methods"/>
					<section id="6.6" name="Session Bean's Business Interface"/>
					<section id="6.7" name="Session Bean's Remote Interface"/>
					<section id="6.8" name="Session Bean's Remote Home Interface"/>
					<section id="6.9" name="Session Bean's Local Interface"/>
					<section id="6.10" name="Session Bean's Local Home Interface"/>
					<section id="6.11" name="Session Bean's Web Service Endpoint Interface"/>
					<section id="7" name="The Responsibilities of the Container Provider"/>
					<section id="7.1" name="Generation of Implementation Classes"/>
					<section id="7.2" name="Generation of WSDL"/>
					<section id="7.3" name="Session EJBHome Class"/>
					<section id="7.4" name="Session EJBObject Class"/>
					<section id="7.5" name="Session EJBLocalHome Class"/>
					<section id="7.6" name="Session EJBLocalObject Class"/>
					<section id="7.7" name="Web Service Endpoint Interface Implementation Class"/>
					<section id="7.8" name="Handle Classes"/>
					<section id="7.9" name="EJBMetaData Class"/>
					<section id="7.10" name="Non-reentrant Instances"/>
					<section id="7.11" name="Transaction Scoping, Security, Exceptions"/>
					<section id="7.12" name="JAX-WS and JAX-RPC Message Handlers for Web Service Endpoints"/>
					<section id="7.13" name="SessionContext"/>
				</sections>
			</chapter>
			<chapter id="5" name="Message-Driven Component Contract">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Goals"/>
					<section id="3" name="Client view of a Message-Driven Bean"/>
					<section id="4" name="Protocol Between a Message-Driven Bean Instance and Its Container"/>
					<section id="4.1" name="Required MessageDrivenBean Metadata"/>
					<section id="4.3" name="Dependency Injection"/>
					<section id="4.4" name="The MessageDrivenContext Interface"/>
					<section id="4.5" name="Message-Driven Bean Lifecycle Callback Interceptor Methods"/>
					<section id="4.6" name="The Optional MessageDrivenBean Interface"/>
					<section id="4.7" name="Timeout Callbacks"/>
					<section id="4.8" name="Message-Driven Bean Creation"/>
					<section id="4.9" name="Message Listener Interceptor Methods for Message-Driven Beans"/>
					<section id="4.10" name="Serializing Message-Driven Bean Methods"/>
					<section id="4.11" name="Concurrency of Message Processing"/>
					<section id="4.12" name="Transaction Context of Message-Driven Bean Methods"/>
					<section id="4.13" name="Activation Configuration Properties"/>
					<section id="4.14" name="Message Acknowledgement for JMS Message-Driven Beans"/>
					<section id="4.15" name="Message Selectors for JMS Message-Driven Beans"/>
					<section id="4.16" name="Association of a Message-Driven Bean with a Destination or Endpoint"/>
					<section id="4.16.1" name="JMS Message-Driven Beans"/>
					<section id="4.17" name="Dealing with Exceptions"/>
					<section id="4.18" name="Missed PreDestroy Calls"/>
					<section id="4.19" name="Replying to a JMS Message"/>		
					<section id="5" name="Message-Driven Bean State Diagram"/>
					<section id="5.1" name="Operations Allowed in the Methods of a Message-Driven Bean Class"/>
					<section id="6" name="The Responsibilities of the Bean Provider"/>
					<section id="6.1" name="Classes and Interfaces"/>
					<section id="6.2" name="Message-Driven Bean Class"/>
					<section id="6.3" name="MessageListener Method"/>
					<section id="6.4" name="LifeCycle Calback Interceptor Methods"/>
					<section id="7" name="The Responsibilities of the Container Provider"/>
					<section id="7.1" name="Generation of Implementation Classes"/>
					<section id="7.2" name="Deployment of JMS Message-Driven Beans"/>
					<section id="7.3" name="Request/Response Messaging Types"/>
					<section id="7.4" name="Non-reentrant Instances"/>
					<section id="7.5" name="Transaction Scoping, Security, Exceptions"/>
				</sections>
			</chapter>
			<chapter id="6" name="Persistence"/>
			<chapter id="7" name="Client View of an EJB 2.1 Entity">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Remote Clients"/>
					<section id="3" name="Local Clients"/>
					<section id="4" name="EJB Container"/>
					<section id="4.1" name="Locating an Entity Bean's Home Interface"/>
					<section id="4.2" name="What a Container Provides"/>
					<section id="5" name="Entity Bean's Remote Home Interface "/>
					<section id="5.1" name="Create Methods"/>
					<section id="5.2" name="Finder Methods"/>
					<section id="5.3" name="Remove Methods"/>
					<section id="5.4" name="Home Methods"/>
					<section id="6" name="Entity Bean's Local Home Interface"/>
					<section id="6.1" name="Create Methods"/>
					<section id="6.2" name="Finder Methods"/>
					<section id="6.3" name="Remove Methods"/>
					<section id="6.4" name="Home Methods"/>
					<section id="7" name="Entity Object's Life Cycle"/>
					<section id="7.1" name="References to Entity Object Remote Interfaces"/>
					<section id="7.2" name="References to Entity Object Local Interfaces"/>
					<section id="8" name="Primary Key and Object Identity"/>
					<section id="9" name="Entity Bean's Remote Interface"/>
					<section id="10" name="Entity Bean's Local Interface"/>
					<section id="11" name="Entity Bean's Handle"/>
					<section id="12" name="Entity Home Handles"/>
					<section id="13" name="Type Narrowing of Object References"/>
				</sections>
			</chapter>
			<chapter id="8" name="EJB 2.1 Entity Bean Component Contract for Container-Managed Persistence">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Container-managed Entity Persistence and Data Independence"/>
					<section id="3" name="The Entity Bean Provider's View of Container-Managed Persistence"/>
					<section id="3.1" name="The Entity Bean Provider's Programming Contract"/>
					<section id="3.2" name="The Entity Bean Provider's View of Persistent Relationships"/>
					<section id="3.3" name="Dependent Value Classes"/>
					<section id="3.4" name="Remove Protocols"/>
					<section id="3.4.1" name="Remove Methods"/>
					<section id="3.4.2" name="Cascade Delete"/>
					<section id="3.5" name="Identity of Entity Objects"/>
					<section id="3.6" name="Semantics of Assignment Relationships"/>
					<section id="3.6.1" name="Use of the java.util.Collection API to Update Relationships"/>
					<section id="3.6.2" name="Use of Set Accessor Methods to Update Relationships"/>
					<section id="3.7" name="Assignment Rules for Relationships"/>
					<section id="3.7.1" name="One-to-One Bidirectional Relationships"/>
					<section id="3.7.2" name="One-to-One Unidirectional Relationships"/>
					<section id="3.7.3" name="One-to-Many Bidirectional Relationships"/>
					<section id="3.7.4" name="One-to-Many Unidirectional Relationships"/>
					<section id="3.7.5" name="Many-to-One Unidirectional Relationships"/>
					<section id="3.7.6" name="Many-to-Many Bidirectional Relationships"/>
					<section id="3.7.7" name="Many-to-Many Unidirectional Relationships"/>
					<section id="3.8" name="Collections Managed by the Container"/>
					<section id="3.9" name="Non-persistent State "/>
					<section id="3.10" name="The Relationship Between the Internal View and the Client View"/>
					<section id="3.11" name="Mapping Data to Persistent Store"/>
					<section id="3.12" name="Example"/>
					<section id="3.13" name="The Bean Provider's Viewof the Deployment Descriptor"/>
					<section id="4" name="The Entity Bean Component Contract"/>
					<section id="4.1" name="Runtime Execution Model of Entity Beans"/>
					<section id="4.2" name="Container Responsibilities"/>
					<section id="4.2.1" name="Container-Managed Fields"/>
					<section id="4.2.2" name="Container-Managed Relationships"/>
					<section id="5" name="Instance Life Cycle Contract between Bean and the Container"/>
					<section id="5.1" name="Instance Life Cycle"/>
					<section id="5.2" name="Bean Provider's Entity Bean Instance's View"/>
					<section id="5.3" name="Container's View"/>
					<section id="5.4" name="The EntityContext Interface"/>
					<section id="5.5" name="Operations Allowed in the Methods of the Entity Bean Class"/>
					<section id="5.6" name="Finder Methods"/>
					<section id="5.6.1" name="Single-Object Finder"/>
					<section id="5.6.2" name="Multi-Object Finders"/>
					<section id="5.7" name="Select Methods"/>
					<section id="5.7.1" name="Single-Object Select Methods"/>
					<section id="5.7.2" name="Multi-Object Select Methods"/>
					<section id="5.8" name="Standard Application Exceptions for Entities"/>
					<section id="5.8.1" name="CreateException"/>
					<section id="5.8.2" name="DuplicateKeyException"/>
					<section id="5.8.3" name="FinderException"/>
					<section id="5.8.4" name="ObjectNotFoundException"/>
					<section id="5.8.5" name="RemoveException"/>
					<section id="5.9" name="Commit Options"/>
					<section id="5.10" name="Concurrent Access from Multiple Transactions"/>
					<section id="5.11" name="Non-reentrant and Re-entrant Instances"/>
					<section id="6" name="Responsibilities of the Enterprise Bean Provider"/>
					<section id="6.1" name="Classes and Interfaces"/>
					<section id="6.2" name="Enterprise Bean Class"/>
					<section id="6.3" name="Dependent Value Classes"/>
					<section id="6.4" name="ejbCreateMETHOD Methods"/>
					<section id="6.5" name="ejbPostCreateMETHOD Methods"/>
					<section id="6.6" name="ejbHomeMETHOD Methods"/>
					<section id="6.7" name="ejbSelectMETHOD Methods"/>
					<section id="6.8" name="Business Methods"/>
					<section id="6.9" name="Entity Bean's Remote Interface"/>
					<section id="6.10" name="Entity Bean's Remote Home Interface"/>
					<section id="6.11" name="Entity Bean's Local Interface"/>
					<section id="6.12" name="Entity Bean's Local Home Interface"/>
					<section id="6.13" name="Entity Bean's Primary Key Class"/>
					<section id="6.14" name="Entity Bean's Deployment Descriptor"/>
					<section id="7" name="The Responsibilities of the Container Provider"/>
					<section id="7.1" name="Generation of Implementation Classes"/>
					<section id="7.2" name="Enterprise Bean Class"/>
					<section id="7.3" name="ejbFindMETHOD Methods"/>
					<section id="7.4" name="ejbSelectMETHOD Methods"/>
					<section id="7.5" name="Entity EJBHome Class"/>
					<section id="7.6" name="Entity EJBObject Class"/>
					<section id="7.7" name="Entity EJBLocalHome Class"/>
					<section id="7.8" name="Entity EJBLocalObject Class"/>
					<section id="7.9" name="Handle Class"/>
					<section id="7.10" name="Home Handle Class"/>
					<section id="7.11" name="Meta-Data Class"/>
					<section id="7.12" name="Instance's Re-entrance"/>
					<section id="7.13" name="Transaction Scoping, Security, Exceptions"/>
					<section id="7.14" name="Implementation of Object References"/>
					<section id="7.15" name="EntityContext"/>
					<section id="8" name="Primary Keys"/>
					<section id="8.1" name="Primary Key that Maps to a Single Field in the Entity Bean Class"/>
					<section id="8.2" name="Primary Key that Maps to Multiple Fields in the Entity Bean Class"/>
					<section id="8.3" name="Special Case:  Unknown Primary Key Class"/>
				</sections>
			</chapter>
			<chapter id="9" name="EJB QL: EJB 2.1 Query Language for Container-Managed Persistence Query Methods">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="EJB QL Definition"/>
					<section id="2.1" name="Abstract Schema Types and Query Domains"/>
					<section id="2.2" name="Query Methods"/>
					<section id="2.3" name="Naming"/>
					<section id="2.4" name="Examples"/>
					<section id="2.5" name="The FROM Clause and Navigational Declarations"/>
					<section id="2.5.1" name="Identifiers"/>
					<section id="2.5.2" name="Identification Variables"/>
					<section id="2.5.3" name="Range Variable Declarations"/>
					<section id="2.5.4" name="Collection Member Declarations"/>
					<section id="2.5.5" name="Example"/>
					<section id="2.5.6" name="Path Expressions"/>
					<section id="2.6" name="WHERE Clause and Conditional Expressions"/>
					<section id="2.6.1" name="Literals"/>
					<section id="2.6.2" name="Identification Variables"/>
					<section id="2.6.3" name="Path Expressions"/>
					<section id="2.6.4" name="Input Parameters"/>
					<section id="2.6.5" name="Conditional Expression Composition"/>
					<section id="2.6.6" name="Operator Precedence"/>
					<section id="2.6.7" name="Between Expressions"/>
					<section id="2.6.8" name="In Expressions"/>
					<section id="2.6.9" name="Like Expressions"/>
					<section id="2.6.10" name="Null Comparison Expression"/>
					<section id="2.6.11" name="Empty Collection Comparison Expressions"/>
					<section id="2.6.12" name="Collection Member Expressions"/>
					<section id="2.6.13" name="Functional Expressions"/>
					<section id="2.7" name="SELECT Clause"/>
					<section id="2.7.1" name="Null Values in the Query Result"/>
					<section id="2.7.2" name="Aggregate Functions in the SELECT Clause"/>
					<section id="2.7.3" name="Examples"/>
					<section id="2.8" name="ORDER BY Clause"/>
					<section id="2.9" name="Return Value Types"/>
					<section id="2.10" name="Null Values"/>
					<section id="2.11" name="Equality and Comparison Semantics"/>
					<section id="2.12" name="Restrictions"/>
					<section id="3" name="Examples"/>
					<section id="3.1" name="Simple Queries"/>
					<section id="3.2" name="Queries with Relationships"/>
					<section id="3.3" name="Queries Using Input Parameters"/>
					<section id="3.4" name="Queries for Select Methods"/>
					<section id="3.5" name="EJB QL and SQL"/>
					<section id="4" name="EJB QL BNF"/>
				</sections>
			</chapter>
			<chapter id="10" name="EJB 2.1 Entity Bean Component Contract for Bean-Managed Persistence">
				<sections>
					<section id="1" name="Overview of Bean-Managed Entity Persistence"/>
					<section id="1.1" name="Entity Bean Provider's View of Persistence"/>
					<section id="1.2" name="Runtime Execution Model"/>
					<section id="1.3" name="Instance Life Cycle"/>
					<section id="1.4" name="Entity Bean Component Contract"/>
					<section id="1.4.1" name="Entity Bean Instance's View"/>
					<section id="1.4.2" name="Container's View"/>
					<section id="1.5" name="Read-only Entity Beans"/>
					<section id="1.6" name="The EntityContext Interface"/>
					<section id="1.7" name="Operations Allowed in the Methods of the Entity Bean Class"/>
					<section id="1.8" name="Caching of Entity State and the ejbLoad and ejbStore Methods"/>
					<section id="1.8.1" name="ejbLoad and ejbStore with NotSupported Transaction Attribute"/>
					<section id="1.9" name="Finder Method Return Type"/>
					<section id="1.9.1" name="Single-Object Finder"/>
					<section id="1.9.2" name="Multi-Object Finders"/>
					<section id="1.10" name="Timer Notifications"/>
					<section id="1.11" name="Standard Application Exceptions for Entities"/>
					<section id="1.11.1" name="CreateException"/>
					<section id="1.11.2" name="DuplicateKeyException"/>
					<section id="1.11.3" name="FinderException"/>
					<section id="1.11.4" name="ObjectNotFoundException"/>
					<section id="1.11.5" name="RemoveException"/>
					<section id="1.12" name="Commit Options"/>
					<section id="1.13" name="Concurrent Access from Multiple Transactions"/>
					<section id="1.14" name="Non-reentrant and Re-entrant Instances"/>
					<section id="2" name="Responsibilities of the Enterprise Bean Provider"/>
					<section id="2.1" name="Classes and Interfaces"/>
					<section id="2.2" name="Enterprise Bean Class"/>
					<section id="2.3" name="ejbCreateMETHOD Methods"/>
					<section id="2.4" name="ejbPostCreateMETHOD Methods"/>
					<section id="2.5" name="ejbFind Methods"/>
					<section id="2.6" name="ejbHomeMETHOD Methods"/>
					<section id="2.7" name="Business Methods"/>
					<section id="2.8" name="Entity Bean's Remote Interface"/>
					<section id="2.9" name="Entity Bean's Remote Home Interface"/>
					<section id="2.10" name="Entity Bean's Local Interface"/>
					<section id="2.11" name="Entity Bean's Local Home Interface"/>
					<section id="2.12" name="Entity Bean's Primary Key Class"/>
					<section id="3" name="The Responsibilities of the Container Provider"/>
					<section id="3.1" name="Generation of Implementation Classes"/>
					<section id="3.2" name="Entity EJBHome Class"/>
					<section id="3.3" name="Entity EJBObject Class"/>
					<section id="3.4" name="Entity EJBLocalHome Class"/>
					<section id="3.5" name="Entity EJBLocalObject Class"/>
					<section id="3.6" name="Handle Class"/>
					<section id="3.7" name="Home Handle Class"/>
					<section id="3.8" name="Meta-Data Class"/>
					<section id="3.9" name="Instance's Re-entrance"/>
					<section id="3.10" name="Transaction Scoping, Security, Exceptions"/>
					<section id="3.11" name="Implementation of Object References"/>
					<section id="3.12" name="EntityContext"/>
				</sections>
			</chapter>
			<chapter id="11" name="EJB 1.1 Entity Bean Component Contract for Container-Managed Persistence">
					<sections>
					<section id="1.1" name="Container-Managed Fields"/>
					<section id="1.2" name="ejbCreate, ejbPostCreate"/>
					<section id="1.3" name="ejbRemove"/>
					<section id="1.4" name="ejbLoad"/>
					<section id="1.5" name="ejbStore"/>
					<section id="1.6" name="Finder Methods"/>
					<section id="1.7" name="Home Methods"/>
					<section id="1.8" name="Create Methods"/>
					<section id="1.9" name="Primary Key Type"/>
					<section id="1.9.1" name="Primary Key that Maps to a Single Field in the Entity Bean Class"/>
					<section id="1.9.2" name="Primary Key that Maps to Multiple Fields in the Entity Bean Class"/>
					<section id="1.9.3" name="Special Case: Unknown Primary Key Class"/>
					</sections>
			</chapter>
			<chapter id="12" name="Interceptors">
				<sections>
					<section id = "1" name = "Overview"/>
					<section id = "2" name = "Interceptor Life Cycle"/>
					<section id = "3" name = "Business Method Interceptors"/>
					<section id = "3.1" name = "Multiple Business Method Interceptor Methods"/>
					<section id = "3.2" name = "Exceptions"/>
					<section id = "4" name = "Interceptors for LifeCycle Event Callbacks"/>
					<section id = "4.1" name = "Multiple Callback Interceptor Methods for a LifeCycle Callback Event"/>
					<section id = "4.2" name = "Exceptions"/>
					<section id = "5" name = "InvocationContext"/>
					<section id = "6" name = "Default Interceptors"/>
					<section id = "7" name = "Method-level Interceptors"/>
					<section id = "8" name = "Specification of Interceptors in the Deployment Descriptor"/>
					<section id = "8.1" name = "Specification of Interceptors"/>
					<section id = "8.2" name = "Specification of the Binding of Interceptors to Beans"/>
					<section id = "8.2.1" name = "Examples"/>	
				</sections>	
			</chapter>
			<chapter id="13" name="Support for Transactions">
				<sections>
					<section id="1" name="Overview"/>
					<section id="1.1" name="Transactions"/>
					<section id="1.2" name="Transaction Model"/>
					<section id="1.3" name="Relationship to JTA and JTS"/>
					<section id="2" name="Sample Scenarios"/>
					<section id="2.1" name="Update of Multiple Databases"/>
					<section id="2.2" name="Messages sent or received over JMS sessions and update of Multiple Databases"/>
					<section id="2.3" name="Update of databases via multiple EJB Servers"/>
					<section id="2.4" name="Client-managed demarcation"/>
					<section id="2.5" name="Container-managed demarcation"/>
					<section id="3" name="Bean Provider's Responsibilities"/>
					<section id="3.1" name="Bean-managed versus container-managed transaction demarcation"/>
					<section id="3.1.1" name="Non-transactional execution"/>
					<section id="3.2" name="Isolation levels"/>
					<section id="3.3" name="Enterprise beans using bean-managed transaction demarcation"/>
					<section id="3.3.1" name="getRollbackOnly() and setRollbackOnly() method"/>
					<section id="3.4" name="Enterprise beans using container-managed transaction demarcation"/>
					<section id="3.4.1" name="jakarta.ejb.SessionSynchronization interface"/>
					<section id="3.4.2" name="jakarta.ejb.EJBContext.setRollbackOnly() method"/>
					<section id="3.4.3" name="jakarta.ejb.EJBContext.getRollbackOnly() method"/>
					<section id="3.5" name="Use of JMS APIs in transactions"/>
					<section id="3.6" name="Specification of a Bean's Transaction Management Type"/>
					<section id="3.7" name="Specification of the Transaction Attribute for a Bean's Method"/>
					<section id="3.7.1" name="Specification of Transaction Attributes with MetaData Annotations"/>
					<section id="3.7.2" name="Specification of Transaction Attributes with Deployment Descriptors"/>
					<section id="4" name="Application Assembler's responsibilities"/>
					<section id="5" name="Deployer's responsibilities"/>
					<section id="6" name="Container Provider responsibilities"/>
					<section id="6.1" name="Bean-managed transaction demarcation"/>
					<section id="6.2" name="Container-managed transaction demarcation for Session and Entity Beans"/>
					<section id="6.2.1" name="NotSupported"/>
					<section id="6.2.2" name="Required"/>
					<section id="6.2.3" name="Supports"/>
					<section id="6.2.4" name="RequiresNew"/>
					<section id="6.2.5" name="Mandatory"/>
					<section id="6.2.6" name="Never"/>
					<section id="6.2.7" name="Transaction attribute summary"/>
					<section id="6.2.8" name="Handling of setRollbackOnly() method"/>
					<section id="6.2.9" name="Handling of getRollbackOnly() method"/>
					<section id="6.2.10" name="Handling of getUserTransaction() method"/>
					<section id="6.2.11" name="jakarta.ejb.SessionSynchronization callbacks"/>
					<section id="6.3" name="Container-managed transaction demarcation for Message-driven Beans"/>
					<section id="6.3.1" name="NotSupported"/>
					<section id="6.3.2" name="Required"/>
					<section id="6.3.3" name="Handling of setRollbackOnly() method"/>
					<section id="6.3.4" name="Handling of getRollbackOnly() method"/>
					<section id="6.3.5" name="Handling of getUserTransaction() method"/>
					<section id="6.4" name="Local transaction optimization"/>
					<section id="6.5" name="Handling of methods that run with &quot;an unspecified transaction context&quot;"/>
					<section id="7" name="Access from multiple clients in the same transaction context"/>
					<section id="7.1" name="Transaction Diamond Scenario with an Entity Object"/>
					<section id="7.2" name="Container Provider's Responsibilities"/>
					<section id="7.3" name="Bean Provider's Responsibilities"/>
					<section id="7.4" name="Application Assembler and Deployer's Responsibilities"/>
					<section id="7.5" name="Transaction diamonds involving Session Objects"/>
				</sections>
			</chapter>
			<chapter id="14" name="Exception Handling">
				<sections>
					<section id="1" name="Overview and Concepts"/>
					<section id="1.1" name="Application exceptions"/>
					<section id="1.2" name="Goals for exception handling"/>
					<section id="2" name="Bean Provider's responsibilities"/>
					<section id="2.1" name="Application exceptions"/>
					<section id="2.2" name="System exceptions"/>
					<section id="2.2.1" name="jakarta.ejb.NoSuchEntityException"/>
					<section id="3" name="Container Provider responsibilities"/>
					<section id="3.1" name="Exceptions from a session or entity bean's business interface methods"/>
					<section id="3.2" name="Exceptions from Method Invoked via Session or Entity Bean's 2.1 Client View or through Web Service Client"/>
					<section id="3.3" name="Exceptions from PostConstruct and PreDestroy Methods of a Stateless Session Bean with Web Service Client View"/>
					<section id="3.4" name="Exceptions from Message-Driven Listener Methods"/>
					<section id="3.5" name="Exceptions from PostConstruct and PreDestroy Methods of a Message-Driven Bean"/>
					<section id="3.6" name="Exceptions from entity bean ejbTimeout method"/>
					<section id="3.7" name="Exceptions from container-invoked callbacks"/>		
					<section id="3.8" name="jakarta.ejb.NoSuchEntityException"/>
					<section id="3.9" name="Non-existing stateful session or entity object"/>
					<section id="3.10" name="Exceptions from the management of container-managed transactions"/>
					<section id="3.11" name="Release of resources"/>
					<section id="3.12" name="Support for deprecated use of java.rmi.RemoteException"/>
					<section id="4" name="Client's view of exceptions"/>
					<section id="4.1" name="Application exception"/>
					<section id="4.1.1" name="Local and remote clients"/>
					<section id="4.1.2" name="Web service clients"/>
					<section id="4.2" name="java.rmi.RemoteException and jakarta.ejb.EJBException"/>
					<section id="4.2.1" name="jakarta.transaction.TransactionRolledbackException and jakarta.ejb.TransactionRolledbackLocalException"/>
					<section id="4.2.2" name="jakarta.transaction.TransactionRequiredException and jakarta.ejb.TransactionRequiredLocalException"/>
					<section id="4.2.3" name="java.rmi.NoSuchObjectException and jakarta.ejb.NoSuchObjectLocalException"/>
					<section id="5" name="System Administrator's responsibilities"/>
				</sections>
			</chapter>
			<chapter id="15" name="Support for Distributed Interoperability">
				<sections>
					<section id="1" name="Support for distribution"/>
					<section id="1.1" name="Client-side objects in distributed environment"/>
					<section id="2" name="Interoperability overview"/>
					<section id="2.1" name="Interoperability goals"/>
					<section id="3" name="Interoperability Scenarios"/>
					<section id="3.1" name="Interactions between web containers and EJB containers for e-commerce applications"/>
					<section id="3.2" name="Interactions between application client containers and EJB containers within an enterprise s intranet"/>
					<section id="3.3" name="Interactions between two EJB containers in an enterprise s intranet"/>
					<section id="3.4" name="Intranet application interactions between web containers and EJB containers"/>
					<section id="4" name="Overview of interoperability requirements"/>
					<section id="5" name="Remote Invocation Interoperability"/>
					<section id="5.1" name="Mapping Java Remote Interfaces to IDL"/>
					<section id="5.2" name="Mapping value objects to IDL"/>
					<section id="5.3" name="Mapping of system exceptions"/>
					<section id="5.4" name="Obtaining stub and client view classes"/>
					<section id="5.5" name="System value classes"/>
					<section id="5.5.1" name="HandleDelegate SPI"/>
					<section id="6" name="Transaction interoperability"/>
					<section id="6.1" name="Transaction interoperability requirements"/>
					<section id="6.1.1" name="Transaction context wire format"/>
					<section id="6.1.2" name="Two-phase commit protocol"/>
					<section id="6.1.3" name="Transactional policies of enterprise bean references"/>
					<section id="6.1.4" name="Exception handling behavior"/>
					<section id="6.2" name="Interoperating with containers that do not implement transaction"/>
					<section id="6.2.1" name="Client container requirements"/>
					<section id="6.2.2" name="EJB container requirements"/>
					<section id="6.2.2.1" name="Requirements for EJB containers supporting transaction interoperability"/>
					<section id="6.2.2.2" name="Requirements for EJB containers not supporting transaction interoperability"/>
					<section id="7" name="Naming Interoperability"/>
					<section id="8" name="Security Interoperability"/>
					<section id="8.1" name="Introduction"/>
					<section id="8.1.1" name="Trust relationships between containers, principal propagation"/>
					<section id="8.1.2" name="Application Client Authentication"/>
					<section id="8.2" name="Securing EJB invocations"/>
					<section id="8.2.1" name="Secure transport protocol"/>
					<section id="8.2.2" name="Security information in IORs"/>
					<section id="8.2.3" name="Propagating principals and authentication data in IIOP messages"/>
					<section id="8.2.4" name="Security configuration for containers"/>
					<section id="8.2.5" name="Runtime behavior"/>
				</sections>
			</chapter>
			<chapter id="16" name="Enterprise Bean Environment">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Enterprise bean's environment as a JNDI naming context"/>
					<section id="2.1" name="Bean Provider's responsibilities"/>
					<section id="2.1.1" name="Access to enterprise bean's environment"/>
					<section id="2.1.2" name="Declaration of environment entries"/>
					<section id="2.2" name="Application Assembler's responsibility"/>
					<section id="2.3" name="Deployer s responsibility"/>
					<section id="2.4" name="Container Provider responsibility"/>
					<section id="3" name="EJB references"/>
					<section id="3.1" name="Bean Provider's responsibilities"/>
					<section id="3.1.1" name="EJB reference programming interfaces"/>
					<section id="3.1.2" name="Declaration of EJB references in deployment descriptor"/>
					<section id="3.2" name="Application Assembler's responsibilities"/>
					<section id="3.3" name="Deployer's responsibility"/>
					<section id="3.4" name="Container Provider's responsibility"/>
					<section id="4" name="Web service references"/>
					<section id="4.1" name="Bean Provider's responsibilities"/>
					<section id="4.1.1" name="Web service reference programming interfaces"/>
					<section id="4.1.2" name="Declaration of web service references in deployment descriptor"/>
					<section id="4.2" name="Deployer's responsibility"/>
					<section id="4.3" name="Container Provider s responsibility"/>
					<section id="5" name="Resource manager connection factory references"/>
					<section id="5.1" name="Bean Provider's responsibilities"/>
					<section id="5.1.1" name="Programming interfaces for resource manager connection factory references"/>
					<section id="5.1.2" name="Declaration of resource manager connection factory references in deployment descriptor"/>
					<section id="5.1.3" name="Standard resource manager connection factory types"/>
					<section id="5.2" name="Deployer's responsibility"/>
					<section id="5.3" name="Container provider responsibility"/>
					<section id="5.4" name="System Administrator's responsibility"/>
					<section id="6" name="Resource environment references"/>
					<section id="6.1" name="Bean Provider's responsibilities"/>
					<section id="6.1.1" name="Resource environment reference programming interfaces"/>
					<section id="6.1.2" name="Declaration of resource environment references in deployment descriptor"/>
					<section id="6.2" name="Deployer's responsibility"/>
					<section id="6.3" name="Container Provider's responsibility"/>
					<section id="7" name="Deprecated EJBContext.getEnvironment() method"/>
					<section id="8" name="UserTransaction interface"/>
				</sections>
			</chapter>
			<chapter id="17" name="Security Management">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Bean Provider's responsibilities"/>
					<section id="2.1" name="Invocation of Other Enterprise Beans"/>
					<section id="2.2" name="Resource Access"/>
					<section id="2.3" name="Access of Underlying OS Resources"/>
					<section id="2.4" name="Programming Style Recommendations"/>
					<section id="2.5" name="Programmatic Access to Caller's Security Context"/>
                                        <section id="2.5.1" name="Use of getCallerPrincipal"/>
                                        <section id="2.5.2" name="Use of isCallerInRole"/>
                                        <section id="2.5.3" name="Declaration of Security Roles Referenced from the Bean's Code"/>
					<section id="3" name="Responsibilities of the Bean Provider and /or Application Assembler"/>
					<section id="3.1" name="Security Roles"/>
					<section id="3.2" name="Method Permissions"/>
                                        <section id="3.2.1" name="Specification of Method Permissions with MetaData Annotations"/>
                                        <section id="3.2.2" name="Specification of Method Permissions in the Deployment Descriptor"/>
                                        <section id="3.2.3" name="Unspecified Method Permissions"/>
					<section id="3.3" name="Linking Security Role References to Security Roles"/>
					<section id="3.4" name="Specification of Security Identities in the Deployment Descriptor"/>
                                        <section id="3.4.1" name="RunAs"/>
					<section id="4" name="Deployer's Responsibilities"/>
					<section id="4.1" name="Security Domain and Principal Realm Assignment"/>
					<section id="4.2" name="Assignment of Security Roles"/>
					<section id="4.3" name="Principal Delegation"/>
					<section id="4.4" name="Security Management of Resource Access"/>
					<section id="4.5" name="General Notes on Deployment Descriptor Processing"/>
					<section id="5" name="EJB Client Responsibilities"/>
					<section id="6" name="EJB Container Provider's responsibilities"/>
                                        <section id="6.1" name="Deployment Tools"/>
                                        <section id="6.2" name="Security Domain(s)"/>
                                        <section id="6.3" name="Security Mechanism"/>
                                        <section id="6.4" name="Passing Principals on EJB Calls"/>
                                        <section id="6.5" name="Security Mehods in jakarta.ejb.EJBContext"/>
                                        <section id="6.6" name="Secure Access to Resource Managers"/>
                                        <section id="6.7" name="Principal Mapping"/>
                                        <section id="6.8" name="System Principal"/>
                                        <section id="6.9" name="Runtime Security Enforcement"/>
                                        <section id="6.10" name="Audit Trail"/>
					<section id="7" name="System Administrator's responsibilities"/>
                                        <section id="7.1" name="Security Domain Administration"/>
                                        <section id="7.2" name="Principal Mapping"/>
                                        <section id="7.3" name="Audit Trail Review"/>
				</sections>
			</chapter>
			<chapter id="18" name="Timer Service">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Bean provider's view of Timer Service"/>
					<section id="2.1" name="The Timer Service interface"/>
					<section id="2.2" name="Timeout Callbacks"/>
					<section id="2.3" name="The Timer and TimerHandle interfaces"/>
					<section id="2.4" name="Timer Identity"/>
					<section id="2.5" name="Transactions"/>
					<section id="3" name="Bean Provider's responsibilities"/>
					<section id="3.1" name="Enerprise bean class"/>
					<section id="3.2" name="TimerHandle"/>
					<section id="4" name="Container's responsibilities"/>
					<section id="4.1" name="TimerService, Timer, and TimerHandle interfaces"/>
					<section id="4.2" name="Timer expiration and ejbTimeout method"/>
					<section id="4.3" name="Timer cancellation"/>
					<section id="4.4" name="Entity bean removal"/>
				</sections>
			</chapter>
			<chapter id="19" name="Deployment descriptor">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Bean Provider's Responsibilities"/>
					<section id="3" name="Application Assembler's Responsibilities"/>
					<section id="4" name="Container Provider's Responsibilities"/>
					<section id="5" name="Deployment descriptor DTD"/>
				</sections>
			</chapter>
			<chapter id="20" name="Ejb-jar file">
				<sections>
					<section id="1" name="Overview"/>
					<section id="2" name="Deployment descriptor"/>
					<section id="3" name="Ejb-jar file requirements"/>
					<section id="4" name="The client view and the ejb-client JAR file"/>
					<section id="5" name="Requirements for clients"/>
					<section id="6" name="Example"/>
				</sections>
			</chapter>
			<chapter id="21" name="Runtime environment">
				<sections>
					<section id="1" name="Bean Provider's Responsibilities"/>
					<section id="1.1" name="APIs provided by Container"/>
					<section id="1.2" name="Programming Restrictions"/>
					<section id="2" name="Container Provider's Responsibility"/>
					<section id="2.1" name="Java 2 APIs Requirements"/>
					<section id="2.2" name="EJB 3.0 Requirements"/>
					<section id="2.3" name="JNDI Requirements"/>
					<section id="2.4" name="JTA 1.1 Requirements"/>
					<section id="2.5" name="JDBC 3.0 Extension Requirements"/>
					<section id="2.6" name="JMS 1.1 Requirements"/>
					<section id="2.7" name="Argument Passing Semantics"/>
				</sections>
				</chapter>
		
		</chapters>
	</location-names>
	<assertions>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:1</id>
			<description> The arguments and results of the methods of the local interface and local home interface are passed by reference.  Enterprise beans that provide a local client view should therefore be coded to assume that the state of any Java object that is passed as an argument is potentially shared by caller and callee.</description>
			<location chapter="3" section="2.2"/>
			<comment>argsemantics</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:2</id>
			<description>A local client of a session bean or an entity bean may be another enterprise bean</description>
			<location chapter="3" section="2.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:2.1</id>
					<description>a session bean</description>
					<location chapter="3" section="2.2"/>
					<comment>bb.localaccess.mdbqaccesstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:2.2</id>
					<description>an entity bean</description>
					<location chapter="3" section="2.2"/>
					<comment>bb.localaccess.mdbqaccesstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:2.3</id>
					<description>a message-driven bean</description>
					<location chapter="3" section="2.2"/>
					<comment>bb.localaccess.mdbqaccesstest.test1-5 and mdbtaccesstest</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:2.4</id>
					<description>a web component</description>
					<location chapter="3" section="2.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:3</id>
			<description>A remote client of a session bean or an entity bean may be another enterprise bean</description>
			<location chapter="3" section="2.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:3.1</id>
					<description>a session bean</description>
					<location chapter="3" section="2.1"/>
					<comment>new test</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:3.2</id>
					<description>an entity bean</description>
					<location chapter="3" section="2.1"/>
					<comment>new test</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:3.3</id>
					<description>a message-driven bean</description>
					<location chapter="3" section="2.1"/>
					<comment>new test</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:4</id>
			<description>A local client accesses a session bean instance through the bean's local interface and local home interface</description>
			<location chapter="3" section="2.2"/>
			<comment>bb.localaccess.sbaccesstest.test2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:5</id>
			<description>A local client accesses an entity bean instance through the bean's local interface and local home interface.</description>
			<location chapter="3" section="2.2"/>
			<comment>bb.localaccess.ebaccesstest.test2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:6</id>
			<description>The objects that are passed as parameters on remote calls must be serializable.</description>
			<location chapter="3" section="2.3"/>
			<comment>argsemantics</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:7</id>
			<description>Stateless session beans may have web service clients.</description>
			<location chapter="3" section="2.4"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:8</id>
			<description>A bean's web service client view may be initially defined by a WSDL document and then mapped to a web service endpoint interface that conforms to this, or an existing bean may be adapted to provide a web service client view.</description>
			<location chapter="3" section="2.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:9</id>
			<description>The Java Object that implements the web service endpoint interface is not accessible to clients or the session bean instance.</description>
			<location chapter="3" section="1"/>
			<comment>NEW TEST</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10</id>
			<description>The web service endpoint that is implemented by the stateless session bean is accessed by Java-based clients through JAX-RPC client APIs.</description>
			<location chapter="3" section="4"/>
			<comment>NEW TEST</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:11</id>
			<description>A session bean may provide a remote interface and/or it may provide a local interface.</description>
			<location chapter="3" section="1"/>
			<comment>find test that exhibits this - localaccess tests</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:12</id>
			<description>A stateless session bean may provide a web service endpoint interface instead of (or in addition to) a component and home interface.</description>
			<location chapter="3" section="1"/>
			<comment>NEW TEST</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:13</id>
			<description>The bean's web service endpoint interface is a JAX-RPC interface. [Only a stateless session bean can have a web service endpoint interface.]</description>
			<location chapter="3" section="1"/>
			<comment>NEW TEST</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:14</id>
			<description>A remote client of a session bean can be another enterprise bean deployed in the same or different Container.</description>
			<location chapter="3" section="1"/>
			<comment>bb.session.stateful.bean2beansinglejartest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:15</id>
			<description>The container is responsible for making the home interfaces of its deployed enterprise beans available to the client through JNDI.  Thus, the client can look up the home interface for a specific enterprise bean using JNDI.</description>
			<location chapter="3" section="2"/>
			<comment>bb.session.stateful.clientviewtest.test1 and bb.session.stateless.clientviewtest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:16</id>
			<description>A client can pass a remote home object reference to another application.  The receiving application can use the home interface in the same way that it would use a remote home object reference obtained via JNDI.</description>
			<location chapter="3" section="2.1"/>
			<comment>bb.session.stateful.bean2beanmultijartest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:17</id>
			<description>The client can pass a local home object reference to another application through its local interface. </description>
			<location chapter="3" section="2.1"/>
			<comment>argsemantics</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:18</id>
			<description>A local home object reference cannot be passed as an argument or result of a method of an enterprise bean's remote home or remote interface.</description>
			<location chapter="3" section="2.1"/>
			<comment>argsemantics</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:19</id>
			<description>The remote home interface allows a client to do the following:</description>
			<location chapter="3" section="6"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:19.1</id>
					<description>Create a new session object</description>
					<location chapter="3" section="6"/>
					<comment>bb.session.stateful.clientviewtest.test2 and bb.session.stateless.clientviewtest.test2</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:19.2</id>
					<description>Remove a session object</description>
					<location chapter="3" section="6"/>
					<comment>bb.session.stateless.clientviewtest.test3 and stateful</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:19.3</id>
					<description>Get the jakarta.ejb.EJBMetaData interface for the session bean.</description>
					<location chapter="3" section="6"/>
					<comment>bb.session.stateful.clientviewtest.test17, and test15  and bb.session.stateless.clientviewtest.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:19.4</id>
					<description>Obtain a handle for the remote home interface.</description>
					<location chapter="3" section="6"/>
					<comment>bb.session.stateful.clientviewtest.test6a and bb.session.stateless.clientviewtest.test6a</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:20</id>
			<description>The implementation class for the handle (typically provided by the container) must be java.io.Serializable to allow the client to serialize a handle object.</description>
			<location chapter="3" section="6"/>
			<comment>bb.session.stateful.handletest.test4</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:21</id>
			<description>A remote client can test if the EJB bean's type is session [via EJBMetaData interface].</description>
			<location chapter="3" section="6"/>
			<comment> bb.session.stateless.clientviewtest.test18</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:22</id>
			<description>A client can obtain class object for the EJB remote interface via EJBMetaData.</description>
			<location chapter="3" section="6"/>
			<comment>bb.session.statelessl.clientviewtest.test17</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:23</id>
			<description>A remote client may remove a session object using the remove (Handle handle) method of the jakarta.ejb.EJBHome interface. </description>
			<location chapter="3" section="6.2"/>
			<comment>bb.session.stateful.clientviewtest.test3 and bb.session.stateless.clientviewtest.test3</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:24</id>
			<description>A remote client may remove a session object using the remove() method on the jakarta.ejb.EJBObject interface.</description>
			<location chapter="3" section="6.2"/>
			<comment>bb.session.stateful.clientviewtest.test5 and bb.session.stateless.clientviewtest.test5</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:25</id>
			<description>Because session objects do not have primary keys that are accessible to clients, invoking the jakarta.ejb.EJBHome.remove (Object primaryKey) method on a session results in the jakarta.ejb.RemoveException.</description>
			<location chapter="3" section="6.2"/>
			<comment>bb.session.stateful.clientviewtest.test5 and bb.session.stateless.clientviewtest.test5</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:26</id>
			<description>The local home interface allows the local client to do the following:</description>
			<location chapter="3" section="6.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:26.1</id>
					<description>Create a new session object</description>
					<location chapter="3" section="6.3"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:26.2</id>
					<description>Remove a session object</description>
					<location chapter="3" section="6.3"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:27</id>
			<description>The container makes the session beans' local home interface available to the client through JNDI.</description>
			<location chapter="3" section="6.3"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:28</id>
			<description>A local home interface defines one or more createMETHOD methods, one for each way to create a [stateful] session object.</description>
			<location chapter="3" section="6.3.1"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:29</id>
			<description>The return type of a createMETHOD method on the local home interface is the [stateful] session bean's local interface.</description>
			<location chapter="3" section="6.3.1"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:30</id>
			<description>A local client may remove a session object using the remove() method on the jakarta.ejb.EJBLocalObject interface.</description>
			<location chapter="3" section="6.3.2"/>
			<comment>bb.session.lrapitest.test4</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:31</id>
			<description>Because session objects do not have primary keys that are accessible to clients, invoking the jakarta.ejb.EJBLocalHome.remove (Object primaryKey) method on a session results in the jakarta.ejb.RemoveException.</description>
			<location chapter="3" section="6.3.2"/>
			<comment>bb.session.lrapitest.test4</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:32</id>
			<description>A remote or local client always uses the session bean's component interface to access a session bean's instance.  The class that implements the session bean's component interface is provided by the container.</description>
			<location chapter="3" section="6.4"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:33</id>
			<description>A client can obtain a handle for the EJBObject. The implementation class for the handle (typically provided by the container) must be java.io.Serializable to allow the client to serialize a handle object.</description>
			<location chapter="3" section="6.4"/>
			<comment>bb.session.stateful.handletest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:34</id>
			<description>A client can invoke business methods through the remote interface.</description>
			<location chapter="3" section="6.4"/>
			<comment>bb.session.stateful.clientviewtest.test12</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:35</id>
			<description>A client can obtain the EJBHome interface  for the EJBObject.</description>
			<location chapter="3" section="6.4"/>
			<comment>bb.session.stateless.clientviewtest.test7</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:36</id>
			<description>A client can test if the EJBObject is identical to another EJBObject.</description>
			<location chapter="3" section="6.4"/>
			<comment>bb.session.stateless.clientviewtest.test11</comment>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:37</id>
			<description>A session EJB object handle can be held beyond the life of a client process by serializing the handle to persistent store. When the handle is later deserialized, the session EJB object it returns will work as long as the object still exists on the server (an earlier timeout or server crash may have destroyed it).</description>
			<location chapter="3" section="6.5"/>
			<comment>bb.session.stateful.handletest.test2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:38</id>
			<description>The home interface of a session bean must not define any finder methods.</description>
			<location chapter="3" section="6.5"/>
			<comment>new test</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:39</id>
			<description>In contrast to entity objects which expose their identiy as a primary key, session objects hide their identity.  As a result, the EJBObject.getPrimaryKey()method results in a java.rmi.RemoteException.</description>
			<location chapter="3" section="6.5"/>
			<comment>bb.session.stateless.clientviewtest.test4</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:40</id>
			<description>In contrast to entity objects which expose their identiy as a primary key, session objects hide their identity.  As a result, the EJBLocalObject.getPrimaryKey()method results in a jakarta.ejb.EJBException.</description>
			<location chapter="3" section="6.5"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:41</id>
			<description>If the EJBMetaData.getPrimaryKeyClass() is invoked on EJBMetaData object for a Session bean, the method throws the java.lang.RuntimeException.</description>
			<location chapter="3" section="6.5"/>
			<comment>bb.session.stateful.clientviewtest.test16</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:42</id>
			<description>A client that has a reference to a session object's remote interface can then do any of the following:</description>
			<location chapter="3" section="6.6.1"/>
			<comment>bb.session.stateless.clientviewtest.test12</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:42.1</id>
					<description>Invoke business methods defined in the session object's remote interface.</description>
					<location chapter="3" section="6.6.1"/>
					<comment>bb.session.stateless.clientviewtest.test12</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:42.2</id>
					<description>Get a reference to the session object's remote home interface.</description>
					<location chapter="3" section="6.6.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:42.3</id>
					<description>Get a handle for the session object.</description>
					<location chapter="3" section="6.6.1"/>
					<comment>bb.session.stateful.clientviewtest.test8 and bb.session.stateless.clientviewtest.test8</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:42.4</id>
					<description>Pass the reference as a parameter or return value with the scope of the client.</description>
					<location chapter="3" section="6.6.1"/>
					<comment>bb.session.stateless.clientviewtest.test13 and bb.lrapitest.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:42.5</id>
					<description>Remove the session object.</description>
					<location chapter="3" section="6.6.1"/>
					<comment>bb.session.stateful.clientviewtest.test8 and bb.session.stateless.clientviewtest.test8</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:43</id>
			<description>It is invalid to reference a session object that does not exist.  Attempted remote invocations on a stateful session object that does not exist result in java.rmi.NoSuchObjectException.</description>
			<location chapter="3" section="6.6.1"/>
			<comment>look for existing test</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:44</id>
			<description>A reference to a session object's local interface (session EJBLocalObject)  must not be passed out of the JVM in which it was created. </description>
			<location chapter="3" section="6.6.2"/>
			<comment>argsemantics</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:45</id>
			<description>A client that has a reference to a session object's local interface can then do any of the following:</description>
			<location chapter="3" section="6.6.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:45.1</id>
					<description>Invoke business methods defined in the session object's local interface.</description>
					<location chapter="3" section="6.6.2"/>
					<comment>lrapitest</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:45.2</id>
					<description>Get a reference to the session object's local home interface.</description>
					<location chapter="3" section="6.6.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:45.3</id>
					<description>Pass the reference as a parameter or return value of a local interface method.</description>
					<location chapter="3" section="6.6.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:45.4</id>
					<description>Remove the session object.</description>
					<location chapter="3" section="6.6.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:46</id>
			<description>It is invalid to reference a [stateful] session object that does not exist. Attempted invocations on a session object that does not exist result in the exception jakarta.ejb.NoSuchObjectLocalException.</description>
			<location chapter="3" section="6.6.2"/>
			<comment>bb.session.lrapitest.test7</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:47</id>
			<description>Attempt serialization/deserialization of an object handle where the object is removed prior to deserialization. An exception should occur (java.rmi.NoSuchObjectException) when referencing the bean since the object no longer exists.</description>
			<location chapter="3" section="7"/>
			<comment>bb.session.stateful.handletest.test3</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:48</id>
			<description>A session EJB home handle can be held beyond the life of a client process by serializing the handle to persistent store. When the handle is later deserialized, the Session EJB home it returns will work as long as the home still exists.</description>
			<location chapter="3" section="7"/>
			<comment>bb.session.stateful.handletest.test5</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:49</id>
			<description>A remote client can determine if two remote object references refer to the same session object by invoking the isIdentical (EJBObject otherEJBObject) method on one of the references.</description>
			<location chapter="3" section="8.1"/>
			<comment>bb.session.stateful.clientviewtest.test10 and bb.session.stateless.clientviewtest.test11</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:50</id>
			<description>A local client can determine if two local object references refer to the same session object by invoking the isIdentical (EJBLocalObject otherEJBLocalObject) method on one of the references.</description>
			<location chapter="3" section="8.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:51</id>
			<description>The isIdentical(EJBObject otherEJBObject) and isIdentical (EJBLocalObject otherEJBLocalObject) method always returns true when used to compare object references of two session objects of the same stateless session bean.</description>
			<location chapter="3" section="8.2"/>
		</assertion>
		
		
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:52</id>
			<description>A container may only passivate a session bean when the instance is not in a transaction. </description>
			<location chapter="4" section="2.1"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:53</id>
			<description>A stateful session bean contains conversational state which must be retained across methods and transactions. </description>
			<location chapter="4" section="2"/>
			<comment>bb.session.stateful.statetest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:54</id>
			<description>The bean provider is required to ensure that the ejbPassivate method leaves the instance fields ready to be serialized by the Container.  The objects that are assigned to the instance's non-transient fields after the ejbPassivate method completes must be one of the following:</description>
			<location chapter="4" section="2.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.1</id>
					<description>a serializable object</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.2</id>
					<description>A null</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.3</id>
					<description>An enterprise bean's remote interface reference, even if the stub class is not serializable.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.4</id>
					<description>An enterprise bean's remote home interface reference, even if the stub class is not serializable.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.5</id>
					<description>An enterprise bean's local interface reference, even if it is not serializable.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.6</id>
					<description>An enterprise bean's local home interface reference, even if it is not serializable.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.7</id>
					<description>A reference to the SessionContext object, even it is not serializable.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.8</id>
					<description>A reference to the environment naming context or any of its subcontexts.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.9</id>
					<description>A reference to the UserTransaction interface.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.10</id>
					<description>A reference to the resource manager connection factory.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:54.11</id>
					<description>A object that is not directly serializable but becomes serializable.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:55</id>
			<description>The following are the requirements of the container:</description>
			<location chapter="4" section="2.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.1</id>
					<description>The container performs the Java programming language Serialization (or its equivalent) of the instances state after it invokes ejbPassivate method on the instance.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.2</id>
					<description>The container must be able to properly save and restore the reference to the home and component interfaces of the enterprise beans stored in the instance's state even if the classes that implement the object references are not serializable.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.3</id>
					<description>The container may use, for example, the object replacement technique that is part of the java.io.ObjectOutputSteam and java.io.ObjectInputStream protocol to externalize the home and component references.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.4</id>
					<description>If the session bean stores in its conversational state an object reference to the jakarta.ejb.SessionContext interface passed to the instance in the setSessionContext(..) method, the container must be able to save and restore the reference across the instance's passivation.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.5</id>
					<description>The container can replace the original SessionContext object with a different and functionally equivalent SessionContext object during activation.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.6</id>
					<description>If the session bean instance stores in its conversational state an object reference to the java:comp/env JNDI context or its subcontext, the container must be able to save and restore the object reference across the instance's passivation.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.7</id>
					<description>If the session bean instance stores in its conversational state an object reference to the UserTransaction interface, the container must be able to save and restore the object reference across the instance's passivation.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.8</id>
					<description>The container may destroy a session bean instance if the instance does not meet the requirements for serialization after passivation.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:55.9</id>
					<description>Containers are not required to reset the value of transient fields during activation.</description>
					<location chapter="4" section="2.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:56</id>
			<description>A session bean's conversational state is not transactional.  It is not automatically rolled back to its initial state if the bean's transaction rolls back. </description>
			<location chapter="4" section="2.2"/>
			<comment>bb.session.stateful.statetest.test3</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:57</id>
			<description>All session beans must implement the SessionBean interface.</description>
			<location chapter="4" section="3.5"/>
			<comment>bb.session.stateful.sessionbeantest</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:58</id>
			<description>A container provides notification to bean of passivation via callback ejbPassivate(). </description>
			<location chapter="4" section="3.5"/>
			<comment>bb.session.stateful.sessionbeantest.test4</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:59</id>
			<description>A container provides notification to bean of activation via callback ejbActivate().</description>
			<location chapter="4" section="3.5"/>
			<comment>bb.session.stateful.sessionbeantest.test5</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:60</id>
			<description>A container provides notification to [stateful session] bean that the instance is in the process of being removed via callback ejbRemove().</description>
			<location chapter="4" section="3.5"/>
			<comment>bb.session.stateful.sessionbeantest</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:61</id>
			<description>The SessionContext interface has the following methods:</description>
			<location chapter="4" section="3.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.1</id>
					<description>The sctx.getEJBObject() method returns the session bean's remote interface.</description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test1 and bb.session.lrapitest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.2</id>
					<description>The sctx.getEJBHome() method returns the session bean's remote home interface.</description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test2</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.3</id>
					<description>The sctx.getEJBLocalObject() method returns the session bean's local interface.</description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.lrapitest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.4</id>
					<description>The sctx.getEJBLocalHome() method returns the session bean's local home interface.</description>
					<location chapter="4" section="3.3"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="deprecated" testable="true">
					<id>EJB:SPEC:61.5</id>
					<description>sctx.getEnvironment()</description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test3</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.6</id>
					<description>The sctx.getCallerPrincipal() method returns the java.security.Principal that identifies the invoker of the bean instance's EJB object.</description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test4</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.7</id>
					<description>The  sctx.isCallerInRole(String role). method tests if the session bean instance's caller has a particular role. This is a POSITIVE test where caller is in role.</description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test5</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.8</id>
					<description>The  sctx.isCallerInRole(String role). method tests if the session bean instance's caller has a particular role.This is a NEGATIVE test where caller is not in role2. </description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test5b</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.9</id>
					<description>The setRollbackOnly method allows the instance to mark the current transaction such that the only outcome of the transaction is a rollback.  Only instances of a session bean with container-managed transaction demarcation can use this method.</description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.10</id>
					<description>The getRollbackOnly method allows the instance to test if the current transactionhas been marked for rollback.  Only instances of a session bean with container-managed transaction demarcation can use this method. </description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test7</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.11</id>
					<description>The getUserTransaction() method returns the jakarta.transaction.UserTransaction interface.</description>
					<location chapter="4" section="3.3"/>
					<comment>bb.session.stateful.sessioncontexttest.test8</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:61.12</id>
					<description>The getTimerService method returns the javas.ejb.TimerService interface.  Only stateless session beans can call this method.</description>
					<location chapter="4" section="3.3"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:62</id>
			<description>The afterBegin notification signals a session bean instance that a new transaction has begun.  The container invokes this method before the first business method within a transaction.  The afterBegin notification is invoked with the transaction context.  The instance may do any database work it requires within the scope of the transaction.</description>
			<location chapter="4" section="3.7"/>
			<comment>bb.session.stateful.sessionbeantest.test6</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:63</id>
			<description>A stateless session bean must not implement the SessionSynchronization interface.</description>
			<location chapter="4" section="3.7"/>
			<comment>bb.session.stateful.sessionbeantest.test10</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:64</id>
			<description>All containers must provide support for SessionSynchronization.  If a bean class implements SessionSynchronization, the container must invoke the afterBegin, beforeCompletion and afterCompletion notifications as required by the specification.</description>
			<location chapter="4" section="3.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:65</id>
			<description>The beforeCompletion notification is issued when a session bean instance's client has completed work on its current transaction but prior to committing the reesource managers used by the instance.  At this time, the instance should write out any database updates it has cached.  The instance can cause the transaction to roll back by invoking the setRollbackOnly method on its session context.</description>
			<location chapter="4" section="3.7"/>
			<comment>bb.session.stateful.sessionbeantest.test14</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:66</id>
			<description>The afterCompletion notification signals that the current transaction has completed.  A completion status of true indicates that the transaction has committed; a status of false indicates that a rollback has occurred.  Since a session bean instances's conversational state is not transactional, it may need to manually reset its state if a rollback occurred.</description>
			<location chapter="4" section="3.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:67</id>
			<description>A stateless session bean that implements a web service endpoint may access the JAX-RPC MessageContext interface by beans of the SessionContext.getMessageContext method.</description>
			<location chapter="4" section="3.7"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:68</id>
			<description>Clients are not allowed to make concurrent calls to a stateful session object. If a client request arrives for an instance while the instance is executing another request, the container MAY throw javax.EJB.EJBException to the second request, if a client is a local client. </description>
			<location chapter="4" section="3.13"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:69</id>
			<description>Clients are not allowed to make concurrent calls to a stateful session object. If a client request arrives for an instance while the instance is executing another request, the container MAY throw java.rmi.RemoteException to the second request, if a client is a remote client. This restriction does not apply to a stateless session bean because the container routes each request to a different instance of rhte session bean class.</description>
			<location chapter="4" section="3.13"/>
			<comment>bb.session.stateless.reentrant</comment>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:69.1</id>
			<description>Clients are not allowed to make concurrent calls to a stateful session object.
If a client request arrives for an instance while the instance is executing another request, the container MAY throw java.rmi.RemoteException to the second request, if a client is a remote client. This restriction does not apply to
a stateless session bean because the container routes each request to a different instance of rhte session bean class.
			</description>
			<location chapter="4" section="3.13"/>
			<comment>bb.session.stateless.reentrant</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:70</id>
			<description>A stateless session bean that provides only a web service endpoint interface has no home interface.</description>
			<location chapter="4" section="3.13"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:71</id>
			<description>Clients are not allowed to make concurrent calls to a stateful session object. If a client request arrives for an instance while the instance is executing another request, the container MAY throw java.rmi.RemoteException to the second request, if a client is a remote client. </description>
			<location chapter="4" section="3.13"/>
			<comment>bb.session.stateful.nonreentranttest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:72</id>
			<description>The container must serialize all the container-invoked callbacks (that is, the methods ejbPassivate, ejbTimeout, beforeCompletion, and so on) and it must serialize these callbacks with client-invoked business methods.</description>
			<location chapter="4" section="3.13"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:73</id>
			<description>A session bean's afterBegin and beforeCompletion methods are always called with the same transaction context as the business methods executed between the afterBegin and beforeCompletion methods. </description>
			<location chapter="4" section="3.7"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:74</id>
			<description>A non-transactional method is executed while the instance is in the method ready state. [NEVER transaction attribute set].</description>
			<location chapter="4" section="4"/>
			<comment>bb.session.stateful.sessionbeantest.test13</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:75</id>
			<description>A session bean instance's life cycle starts when a client invokes a createMETHOD(..) method on the session bean's interface.  This causes the container to invoke newInstance() on the session bean class to create a new session bean instance.  Next, the container calls setSessionContext() and ejbCreateMETHOD(...) on the instance and returns the session and returns the session object reference to the client. [Lifecycle creation call flow]. </description>
			<location chapter="4" section="4"/>
			<comment>bb.session.stateful.sessionbeantest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:76</id>
			<description>When the client calls remove on the home or component interface to remove the session object, the container issues ejbRemove() on the bean instance  This ends the life of the session bean instance and the associated session object. A subsquent attempt by its client to invoke the session object causes the java.rmi.NoSuchObjectException to be thrown if the client is a remote client.</description>
			<location chapter="4" section="4"/>
			<comment>bb.session.stateful.sessionbeantest.test3</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:77</id>
			<description>When the client calls remove on the home or component interface to remove the session object, the container issues ejbRemove() on the bean instance  This ends the life of the session bean instance and the associated session object. A subsquent attempt by its client to invoke the session object causes the jakarta.ejb.NoSuchObjectLocalException to be thrown if the client is a local client. </description>
			<location chapter="4" section="4"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:78</id>
			<description>The ejbRemove() method cannot be called when the instance is participating in a transaction.  An attempt to remove a session object while the object is in a transaction will cause the container to throw the jakarta.ejb.RemoveException to the client.</description>
			<location chapter="4" section="4"/>
			<comment>bb.session.stateful.sessionbeantest.test3a</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:79</id>
			<description>The Container must call the afterBegin, beforeCompletion, and afterCompletion methods if the session bean class implements, directly or indirectly, the SessionSynchronization interface. The Container does not call these methods if the session bean class does not implement the SessionSynchronization interface.</description>
			<location chapter="4" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:80</id>
			<description>If a session bean instance attempts to invoke a method of the SessionContext interface, and that access is not allowed in Table 2, the Container MUST throw the java.lang.IllegalStateException.</description>
			<location chapter="4" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:81</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method ejbCreate with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:81.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:81.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:81.13</id>
					<description>getTimerService access- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:81.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:81.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:82</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method setSessionContext with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test2</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.2</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.6</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:82.8</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:82.9</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.10</id>
					<description>getUserTransaction  - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.11</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:82.12</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:82.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:82.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:82.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:83</id>
			<description>Operations allowed in the methods of a stateful session bean for business method from the component interface with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.3</id>
					<description>getRollbackOnly- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.5</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:83.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:83.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:83.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:83.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:83.15</id>
					<description>Timer Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:84</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method ejbRemove with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.10</id>
					<description>getUserTransaction  - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.13</id>
					<description>TimerService access- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:84.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:85</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method afterBegin with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.3</id>
					<description>getRollbackOnly- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.5</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:85.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:85.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.10</id>
					<description>getUserTransaction  - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:85.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:85.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:85.15</id>
					<description>Timer Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:86</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method beforeCompletion with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.3</id>
					<description>getRollbackOnly- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.5</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:86.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:86.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.11</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:86.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:86.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:86.15</id>
					<description>Timer Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:87</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method afterCompletion with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:87.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:87.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.10</id>
					<description>getUserTransaction  - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:87.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:87.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:87.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:88</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method ejbActivate with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:88.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:89</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method ejbPassivate with container-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:89.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:90</id>
			<description>Invoking the getRollbackOnly and setRollbackOnly methods is disallowed in the session bean methods for which the Container does not have a meaningful transaction context, and to all session beans with bean-managed transaction demarcation.</description>
			<location chapter="4" section="4.1"/>
			<comment>bb.session.stateful.cm.allowedmethodstest.test11and test 10</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:91</id>
			<description>The getRollbackOnly and setRollbackOnly methods of the SessionContext interface should be used only in the session bean methods that execute in the context of a transaction.  The Container must throw the java.lang.IllegalStateException if the methods are invoked while the instance is not associated with a transaction.</description>
			<location chapter="4" section="4.1"/>
			<comment>bb.session.stateful.cm.allowedmethodstest.test12</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:92</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method ejbCreate with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.bm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:92.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:92.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.10</id>
					<description>getUserTransaction - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:92.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.14</id>
					<description>UserTransaction Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:92.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:93</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method setSessionContext with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.bm.allowedmethodstest.test2</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.2</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.6</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:93.8</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:93.9</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.11</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.12</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:93.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:93.14</id>
					<description>UserTransaction Methods -not  allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:93.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:94</id>
			<description>Operations allowed in the methods of a stateful session bean for business method from the component interface with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.bm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.6</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:94.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:94.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.10</id>
					<description>getUserTransaction - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:94.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.14</id>
					<description>UserTransaction Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:94.15</id>
					<description>Timer Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:95</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method ejbRemove with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.bm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.10</id>
					<description>getUserTransaction - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.14</id>
					<description>UserTransaction Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:95.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:96</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method ejbActivate with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.bm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.14</id>
					<description>UserTransaction Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:96.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:97</id>
			<description>Operations allowed in the methods of a stateful session bean for bean method ejbPassivate with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>stateful.bm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.13</id>
					<description>getTimerService - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.14</id>
					<description>UserTransaction Methods - allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:97.15</id>
					<description>Timer Methods - not allowed</description>
					<location chapter="4" section="4.1"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:98</id>
			<description>The home interface of a stateless session bean must have one create method that takes no arguments.</description>
			<location chapter="4" section="5"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:99</id>
			<description>The create method of the remote home interface must return the session bean's remote interface.</description>
			<location chapter="4" section="5"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:100</id>
			<description>The create method of the local home interface must return the session bean's local interface.</description>
			<location chapter="4" section="5"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:101</id>
			<description>A stateless session bean must not implement the jakarta.ejb.SessoinSynchronization interface.</description>
			<location chapter="4" section="5"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:102</id>
			<description>A stateless session bean instance's life cycle starts when the container invokes newInstance() on the session bean class to create a new instance.  Next, the container calls setSessionContext() followed by ejbCreate() on the instance.</description>
			<location chapter="4" section="5.1"/>
			<comment>bb.session.stateless.sessionbeantest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:103</id>
			<description>When the container no longer needs the instance, the container invokes ejbRemove() on it.</description>
			<location chapter="4" section="5.1"/>
			<comment>bb.session.stateless.sessionbeantest.test2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:104</id>
			<description>Invoking the getEJBObject and getEJBHome methods is disallowed if the session bean does not define a remote client view. [a java.lang.IllegalStateException results]. </description>
			<location chapter="4" section="5.2"/>
			<comment>bb.session.lrapitest.test3</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:105</id>
			<description>Invoking the getEJBLocalObject and getEJBLocalHome methods is disallowed if the session bean does not define a local client view. [a java.lang.IllegalStateException results]. </description>
			<location chapter="4" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:106</id>
			<description>If a session bean instance attempts to invoke a method of the SessionContext interface, and the access is not allowed in Table 3, the Contianer must throw the java.lang.IllegalStateException.</description>
			<location chapter="4" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:107</id>
			<description>If a session bean instance attempts to invoke a method of the Timer Service or Timer interface, and the access is not allowed in Table 3, the Contianer must throw the java.lang.IllegalStateException.</description>
			<location chapter="4" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:108</id>
			<description>Operations allowed in the methods of a stateless session bean for bean method ejbCreate with container-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>stateless.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.2</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:108.8</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:108.9</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.12</id>
					<description>getEJBLocalObject- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.13</id>
					<description>getTimerService- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:108.14</id>
					<description>Timer Service Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:108.15</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:109</id>
			<description>Operations allowed in the methods of a stateless session bean for bean method setSessionContext with container-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>stateless.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.2</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.6</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:109.8</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:109.9</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.12</id>
					<description>getEJBLocalObject- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.13</id>
					<description>getTimerService- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.14</id>
					<description>Timer Service Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:109.15</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:110</id>
			<description>Operations allowed in the methods of a stateless session bean for business method with container-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>stateless.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.3</id>
					<description>getRollbackOnly- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.5</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:110.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:110.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.12</id>
					<description>getEJBLocalObject- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.13</id>
					<description>getTimerService - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:110.14</id>
					<description>Timer Service Methods- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:110.15</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:111</id>
			<description>Operations allowed in the methods of a stateless session bean for bean method ejbRemove() with container-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>stateless.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.2</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.8</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.9</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.12</id>
					<description>getEJBLocalObject- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.13</id>
					<description>getTimerService- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.14</id>
					<description>Timer Service Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:111.15</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:112</id>
			<description>Operations allowed in the methods of a stateless session bean for bean method ejbTimeout() with container-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.3</id>
					<description>getRollbackOnly- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.5</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:112.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:112.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.12</id>
					<description>getEJBLocalObject- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.13</id>
					<description>Timer Service methods- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:112.14</id>
					<description>getTimerService - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:112.15</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:113</id>
			<description>Operations allowed in the methods of a stateless session bean for bean method ejbCreate with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>stateless.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.2</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:113.8</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:113.9</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.12</id>
					<description>getEJBLocalObject- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.13</id>
					<description>getTimerService- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.14</id>
					<description>Timer Service Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:113.15</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:114</id>
			<description>Operations allowed in the methods of a stateless session bean for bean method setSessionContext with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>stateless.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.2</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.6</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:114.8</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:114.9</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.12</id>
					<description>getEJBLocalObject- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.13</id>
					<description>getTimerService- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.14</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:114.15</id>
					<description>Timer Service Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:115</id>
			<description>Operations allowed in the methods of a stateless session bean for business method with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>stateless.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:115.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:115.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.10</id>
					<description>getUserTransaction - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.12</id>
					<description>getEJBLocalObject- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.13</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.14</id>
					<description>getTimerService - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:115.15</id>
					<description>UserTransaction Methods - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:116</id>
			<description>Operations allowed in the methods of a stateless session bean for bean method ejbRemove() with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>stateless.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.2</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.4</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.8</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.9</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.11</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.13</id>
					<description>getTimerService - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.14</id>
					<description>Timer Service Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:116.15</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:117</id>
			<description>Operations allowed in the methods of a stateless session bean for bean method ejbTimeout() with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.4</id>
					<description>isCallerInRole -  allowed </description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:117.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:117.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.10</id>
					<description>getUserTransaction - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.12</id>
					<description>getEJBLocalObject- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.13</id>
					<description>Timer Service methods- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.14</id>
					<description>getTimerService- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:117.15</id>
					<description>UserTransaction methods - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:118</id>
			<description>The getRollbackOnly and setRollbackOnly methods is disallowed in the session bean methods for which the Container does not have a meaningful transaction context and for all session beans with bean-managed transaction demarcation.</description>
			<location chapter="4" section="5.2"/>
			<comment>bb.session.stateless.cm.allowedmethodstest.test5 and test7</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:119</id>
			<description>The getRollbackOnly and setRollbackOnly methods of the SessionContext interface should be used only in the session bean methods that execute in the context of a transaction. The Container must throw the java.lang.IllegalStateException if the methods are invoked while the instance is not associated to a transaction.</description>
			<location chapter="4" section="5.2"/>
			<comment>bb.session.stateless.cm.allowedmethodstest.test6</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:120</id>
			<description>Operations allowed in the methods of a stateless session bean for business method from a web service endpoint interface with container-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.3</id>
					<description>getRollbackOnly- allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.5</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:120.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:120.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.10</id>
					<description>getUserTransaction - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.13</id>
					<description>getTimerService - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.14</id>
					<description>Timer Service Methods - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:120.15</id>
					<description>UserTransaction Methods - not allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.16</id>
					<description>getMessageContext - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:120.17</id>
					<description>Message Context Methods - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:121</id>
			<description>Operations allowed in the methods of a stateless session bean for business method from a web service endpoint interface with bean-managed transaction demarcation are:</description>
			<location chapter="4" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.2</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.3</id>
					<description>getRollbackOnly- not allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.4</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.5</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.6</id>
					<description>getEJBObject - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.7</id>
					<description>JNDI access - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:121.8</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:121.9</id>
					<description>Resource manager access - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.10</id>
					<description>getUserTransaction - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.11</id>
					<description>getEJBLocalHome- allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.12</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.13</id>
					<description>getTimerService - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.14</id>
					<description>Timer Service Methods - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.15</id>
					<description>UserTransaction Methods - allowed</description>
					<location chapter="4" section="5.2"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.16</id>
					<description>getMessageContext - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:121.17</id>
					<description>Message Context Methods - allowed</description>
					<location chapter="4" section="5.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
			<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:506</id>
			<description>A message-driven bean is an asynchronous message consumer. A message-driven bean is invoked by the container as a result of the arrival of a message at the destination or endpoint that is serviced by the message-driven bean.</description>
			<location chapter="5" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10506</id>
			<description>A message driven bean can be registered with
the EJB Timer Service for time-based event notifications
if it implements the jakarta.ejb.TimedObject interface in addition to the message
listener interface.</description>
			<location chapter="5" section="4.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:507</id>
			<description>The setRollbackOnly method allows the instance to mark the current transaction such that the only outcome of the transaction is a rollback.</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:508</id>
			<description>Only instances of a message-driven bean with container-managed transaction demarcation can use this method(setRollbackOnly).</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:509</id>
			<description>The getRollbackOnly method allows the instance to test if the current transaction has been marked for rollback.</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:510</id>
			<description>Only instances of a message-driven bean with container-managed transaction demarcation can use this method(getRollbackOnly).</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:511</id>
			<description>The getUserTransaction method returns the jakarta.transaction.UserTransaction interface that the instance can use to demarcate transactions, and to obtain transaction status. Only instances of a message-driven bean with bean-managed transaction demarcation can use this method.</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:512</id>
			<description>The getTimerService method is inherited from the EJBContext interface. Message-driven bean instances must not call this method.</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:513</id>
			<description>The getCallerPrincipal method is inherited from the EJBContext interface.</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:514</id>
			<description>The isCallerInRole method is inherited from the EJBContext interface. Message-driven bean instances must not call this method.</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:515</id>
			<description>The getEJBHome and getEJBLocalHome methods are inherited from the EJBContext interface. Message-driven bean instances must not call these methods.</description>
			<location chapter="5" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:516</id>
			<description>If the [JMS] message receipt is to be part of the transaction, container-managed transaction demarcation with the Required transaction attribute must be used.</description>
			<location chapter="5" section="4.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:517</id>
			<description>If the bean is specified as using container-managed transaction demarcation, either the Required or the NotSupported transaction attribute must be used.</description>
			<location chapter="5" section="4.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:518</id>
			<description>If the message-driven bean uses container managed transaction demarcation, [JMS] message acknowledgment is handled automatically as a part of the transaction commit. </description>
			<location chapter="5" section="4.14"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:519</id>
			<description>If bean managed transaction demarcation is used, the message receipt cannot be part of the bean-managed transaction, and, in this case, the receipt is acknowledged by the container. </description>
			<location chapter="5" section="4.14"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:520</id>
			<description>If bean managed transaction demarcation is used, the Bean Provider can indicate in the activation-config-property deployment descriptor element whose activation-config-property-name is acknowledgeMode whether JMS AUTO_ACKNOWLEDGE semantics or DUPS_OK_ACKNOWLEDGE semantics should apply. If the acknowledgeMode property is not specified, JMS AUTO_ACKNOWLEDGE semantics are assumed. The activation-config-property-value for this property must be either Auto-acknowledge or Dups-ok-acknowledge for a JMS message-driven bean.</description>
			<location chapter="5" section="4.14"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:521</id>
			<description>The Bean Provider may declare the JMS message selector to be used in determining which messages a JMS message-driven bean is to receive. If the Bean Provider wishes to restrict the messages that a JMS message-driven bean receives, the Bean Provider can specify the value of the message selector the using the activation-config-property deployment descriptor element whose activation-config-property-name is messageSelector.</description>
			<location chapter="5" section="4.15"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:522</id>
			<description>The Application Assembler may further restrict, but not replace, the value of the messageSelector property of a message-driven bean.</description>
			<location chapter="5" section="4.15"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:523</id>
			<description>A JMS message-driven bean is associated with a JMS Destination (Queue or Topic) when the bean is deployed in the container.</description>
			<location chapter="5" section="4.16.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:524</id>
			<description>If the message-driven bean is intended to be used with a topic, the Bean Provider may further indicate whether a durable or non-durable subscription should be used by using the activation-config-property deployment descriptor element whose activation-config-property-name is subscriptionDurability. The activation-config-property-value for this property must be either Durable or NonDurable for a JMS message-driven bean. If a topic subscription is specified and subscriptionDurability is not specified, a non-durable subscription is assumed.</description>
			<location chapter="5" section="4.16.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:525</id>
			<description>Durable topic subscriptions, as well as queues, ensure that messages are not missed even if the EJB server is not running.</description>
			<location chapter="5" section="4.16.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:526</id>
			<description>Operations allowed in the methods of a message-driven bean - if a message-driven bean instance attempts to invoke a method of the MessageDrivenContext interface, and the access is not allowed in Table 12, the Container must throw and log the java.lang.IllegalStateException.</description>
			<location chapter="5" section="5.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.1</id>
					<description>all methods in constructor - disallowed</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.2</id>
					<description>JNDI access to java:comp/env - allowed in setMessageDrivenContext</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.3</id>
					<description>JNDI access to java:comp/env - allowed in ejbCreate</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.4</id>
					<description>JNDI access to java:comp/env - allowed in ejbRemove</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.5</id>
					<description>getUserTransaction - allowed in ejbCreate for Bean-Managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.6</id>
					<description>getUserTransaction - allowed in ejbRemove for Bean-Managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.7</id>
					<description>JNDI access to java:comp/env - allowed in message Listener method</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.8</id>
					<description>Enterprise Bean access - allowed in message Listener method</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.9</id>
					<description>Resource Manager access - allowed in message Listener method</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.10</id>
					<description>getRollbackOnly - allowed in message Listener method for Contaner Managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.11</id>
					<description>setRollbackOnly - allowed in message Listener method for Contaner-managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.12</id>
					<description>getUserTransaction - allowed in message Listener method for Bean-managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.13</id>
					<description>UserTransaction methods - allowed in message Listener method for Bean-managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.14</id>
					<description>getCallerPrincipal - allowed in message Listener method for Bean-managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.15</id>
					<description>getCallerPrincipal - allowed in message Listener method for Container-managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.16</id>
					<description>getCallerPrincipal - allowed in ejbTimeout method</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.17</id>
					<description>isCallerInRole - not allowed in message Listener method for Bean-managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.18</id>
					<description>isCallerInRole - not allowed in message Listener method for Container-managed Transaction</description>
					<location chapter="5" section="5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:526.19</id>
					<description>isCallerInRole - not allowed ejbTimeout</description>
					<location chapter="5" section="5.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:527</id>
			<description>The getRollbackOnly and setRollbackOnly methods of the MessageDriven-Context interface should be used only in the message-driven bean methods that execute in the context of a transaction. The Container must throw the java.lang.IllegalStateException if the methods are invoked while the instance is not associated with a transaction.</description>
			<location chapter="5" section="5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:530</id>
			<description>Invoking the getRollbackOnly and setRollbackOnly methods is disallowed in the message-driven bean methods for which the Container does not have a meaningful transaction context, and for all message-driven beans with bean-managed transaction demarcation.</description>
			<location chapter="5" section="5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:531</id>
			<description>Invoking getEJBHome or getEJBLocalHome is disallowed in message-driven bean methods because there are no EJBHome or EJBLocalHome objects for message-driven beans. The Container must throw and log the java.lang.IllegalStateException if these methods are invoked.</description>
			<location chapter="5" section="5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:532</id>
			<description>The class must be defined as public, must not be final, and must not be abstract.</description>
			<location chapter="5" section="7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:533</id>
			<description>The class must have a public constructor that takes no arguments. The Container uses this constructor to create instances of the message-driven bean class.</description>
			<location chapter="5" section="7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:534</id>
			<description>The class must not define the finalize() method.</description>
			<location chapter="5" section="7.2"/>
		</assertion>
		
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10122</id>
			<description>Multiple clients can access an entity object concurrently. The container in which the entity bean is deployed properly synchronizes access to the entity object's state using transactions.</description>
			<location chapter="7" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:122</id>
			<description>The arguments of the methods of the local interface and local home interface are passed by reference.</description>
			<location chapter="7" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:123</id>
			<description>A local client of an entity bean may be a:</description>
			<location chapter="7" section="3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:123.1</id>
					<description>a session bean</description>
					<location chapter="7" section="3"/>
					<comment>bb.localaccess.mdbqaccesstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:123.2</id>
					<description>another entity bean</description>
					<location chapter="7" section="3"/>
					<comment>bb.localaccess.mdbqaccesstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:123.3</id>
					<description>a message-driven bean</description>
					<location chapter="7" section="3"/>
					<comment>bb.localaccess.mdbqaccesstest.test1-5 and mdbtaccesstest</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:123.4</id>
					<description>web client</description>
					<location chapter="7" section="3"/>
					<comment>new test - was optional in 1.3 - spec need update to reflect this</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:124</id>
			<description>In order to be the target of a container-managed relationship, an entity bean with container-managed persistence must provide a local interface.</description>
			<location chapter="7" section="3"/>
			<comment>bb.session.stateless.cm.allowedmethodstest.test6</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:125</id>
			<description>A client locates an entity bean's home interface using JNDI. </description>
			<location chapter="7" section="4.1"/>
			<comment>bb.entity.cmp.bmp.cmp20.clientviewtest.test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:126</id>
			<description>The entity bean's remote home interface allows a client to do the following:</description>
			<location chapter="7" section="5"/>
			<comment>entity.cmp.clientviewtest.test14-17</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:126.1</id>
					<description>Create a new entity object</description>
					<location chapter="7" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:126.2</id>
					<description>Find existing entity objects within the home</description>
					<location chapter="7" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:126.3</id>
					<description>Remove an entity object from the home</description>
					<location chapter="7" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:126.4</id>
					<description>Get the jakarta.ejb.EJBMetaData interface for the entity bean.</description>
					<location chapter="7" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:126.5</id>
					<description>Obtain a handle for the remote home interface.</description>
					<location chapter="7" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:126.6</id>
					<description>Execute a home business method.</description>
					<location chapter="7" section="5"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:127</id>
			<description>The return type of a createMETHOD method on the remote home interface is the entity bean's remote interface.</description>
			<location chapter="7" section="5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:128</id>
			<description>The throws clause of every createMETHOD method on the remote home interface includes the java.rmi.RemoteException and jakarta.ejb.CreateException.</description>
			<location chapter="7" section="5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:129</id>
			<description>The return type of a finder method on the remote home interface must be the entity bean's remote interface, or a type representing a collection of objects that implement the entity bean's remote interface.</description>
			<location chapter="7" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:130</id>
			<description>The throws clause of every finder method on the remote home interface includes the java.rmi.RemoteException and jakarta.ejb.FinderException.</description>
			<location chapter="7" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:131</id>
			<description>The name of the method is always findByPrimaryKey; it has a single argument that is the same type as the entity bean's primary key type, and its return type is the entity bean's remote interface.</description>
			<location chapter="7" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:132</id>
			<description>The implementation of the findByPrimaryKey(primaryKey) method must ensure that the entity object exists.</description>
			<location chapter="7" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:133</id>
			<description>There is a unique findByPrimaryKey(primaryKey) method for an entity bean on its remote home interface; this method must not be overloaded</description>
			<location chapter="7" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:134</id>
			<description>The findByPrimaryKey(primaryKey) method is mandatory for all entity beans.</description>
			<location chapter="7" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:135</id>
			<description>An entity bean's remote home interface defines one or more finder methods [The findByPrimaryKey(primaryKey) method is mandatory for all entity beans.], one for each way to find an entity object or collection of entity objects within the home.</description>
			<location chapter="7" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:136</id>
			<description>After an entity object has been removed, subsequent attempts to access the entity object by a remote client result in the java.rmi.NoSuchObjectException.</description>
			<location chapter="7" section="5.3"/>
			<comment>bb.entity.cmp.entitybeantest.test3 and test3a and test3b</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:137</id>
			<description>The jakarta.ejb.EJBHome interface defines several methods that allow the client to remove an entity object.</description>
			<location chapter="7" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:138</id>
			<description>The method arguments and return value types of a home method on the remote home inteface must be legal types for RMI-IIOP.</description>
			<location chapter="7" section="5.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:139</id>
			<description>The entity bean's local home interface allows a local client to do the following:</description>
			<location chapter="7" section="6"/>
			<comment>lrapitest.test4,8</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:139.1</id>
					<description>Create a new entity objects within the home.</description>
					<location chapter="7" section="6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:139.2</id>
					<description>Find existing entity objects within the home.</description>
					<location chapter="7" section="6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:139.3</id>
					<description>Remove an entity object from the home.</description>
					<location chapter="7" section="6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:139.4</id>
					<description>Execute a home business method.</description>
					<location chapter="7" section="6"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:140</id>
			<description>An entity bean's home interface can define one or more createMETHOD methods one for each way to create an entity object.</description>
			<location chapter="7" section="4.1"/>
			<comment>bb.entity.cmp20.homemethodstest.test3, test4, test5</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:141</id>
			<description>An entity bean's home interface can define one or more home methods that the bean provider supplies for business logic that is not specific to an entity bean instance.</description>
			<location chapter="7" section="6.4"/>
			<comment>bb.entity.cmp20.homemethodstest.test6</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:142</id>
			<description>The throws clause of a home method on the local home interface may include additional application-level exceptions.  It must not include the javax.rmi.RemoteException.</description>
			<location chapter="7" section="6.4"/>
			<comment>bb.entity.cmp20.homemethodstest.test6</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:143</id>
			<description>A client can get a reference to an existing entity object's remote interface in any of the following ways:</description>
			<location chapter="7" section="7.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:143.1</id>
					<description>Receive the reference as a parameter in a method call (input param or result).</description>
					<location chapter="7" section="7.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:143.2</id>
					<description>Find the entity object using a finder method defined in the entity bean's remote home interface.</description>
					<location chapter="7" section="7.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:143.3</id>
					<description>Obtain the reference from the entity object's handle.</description>
					<location chapter="7" section="7.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:144</id>
			<description>A client that has a reference to an existing entity object's remote interface can do any of the following ways:</description>
			<location chapter="7" section="7.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:144.1</id>
					<description>Invoke business methods on the entity object through the remote inteface.</description>
					<location chapter="7" section="7.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:144.2</id>
					<description>Obtain a reference to the enterprise Bean's remote home interface.</description>
					<location chapter="7" section="7.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:144.3</id>
					<description>Pass the reference as a parameter or return value of a method call.</description>
					<location chapter="7" section="7.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:144.4</id>
					<description>Obtain the entity object's primary key.</description>
					<location chapter="7" section="7.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:144.5</id>
					<description>Obtain the entity object's handle.</description>
					<location chapter="7" section="7.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:144.6</id>
					<description>Remove the entity object.</description>
					<location chapter="7" section="7.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:145</id>
			<description>All references to an entity object that does not exist are invalid. All attempted invocations on an entity object that does not exist result in an java.rmi.NoSuchObjectException being thrown.</description>
			<location chapter="7" section="7.1"/>
			<comment>bb.entity.bmp.entitybeantest.test5</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:146</id>
			<description>A local client can get a reference to an existing entity object's local interface in any of the following ways:</description>
			<location chapter="7" section="7.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:146.1</id>
					<description>Receive the reference as a result of a method call.</description>
					<location chapter="7" section="7.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:146.2</id>
					<description>Find the entity object using a finder method defined in the entity bean's local home interface.</description>
					<location chapter="7" section="7.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:147</id>
			<description>A local client that has a reference to an existing entity object's local interface can do any of the following:</description>
			<location chapter="7" section="7.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:147.1</id>
					<description>Invoke business methods on the entity object through the local inteface.</description>
					<location chapter="7" section="7.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:147.2</id>
					<description>Obtain a reference to the enterprise Bean's local home interface.</description>
					<location chapter="7" section="7.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:147.3</id>
					<description>Pass the reference as a parameter or return value of a local method call.</description>
					<location chapter="7" section="7.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:147.4</id>
					<description>Obtain the entity object's primary key.</description>
					<location chapter="7" section="7.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:147.5</id>
					<description>Remove the entity object.</description>
					<location chapter="7" section="7.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:147.6</id>
					<description>All local references to an entity object that does not exist are invalid. All attempted invocations on an entity object that does not exist result in an java.rmi.NoSuchObjectLocalException being thrown.</description>
					<location chapter="7" section="7.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10147</id>
			<description>The Enterprise JavaBeans
architecture allows a primary key class to be any class that is a legal
Value Type in RMI-IIOP, subject to the restrictions defined in Subsections
10.6.13 and 12.2.12.</description>
			<location chapter="7" section="8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:148</id>
			<description>The object identity associated with a reference does not change over the lifetime of the reference.  That is, getPrimaryKey() always returns the same value when called on the same entity object reference.</description>
			<location chapter="7" section="8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:149</id>
			<description>If an entity object has both a remote home interface and a local home interface, the result of invoking the getPrimaryKey() method on a reference to the entity object's remote inteface and on a reference to the entity object's local interface is the same.</description>
			<location chapter="7" section="8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:150</id>
			<description>A client can test whether two entity object references refer to the same entity object by using the isIdentical method.</description>
			<location chapter="7" section="8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:151</id>
			<description>If a client obtains two entity object references from the same home, it can determine if they refer to the same entity by comparing their primary keys using the equals method. </description>
			<location chapter="7" section="8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:152</id>
			<description>The jakarta.ejb.EJBObject interface defines the methods that allow the client to perform the following operations on an entity object's reference:</description>
			<location chapter="7" section="9"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:152.1</id>
					<description>Obtain the remote home interface for the entity object.</description>
					<location chapter="7" section="9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:152.2</id>
					<description>Remove the entity object.</description>
					<location chapter="7" section="9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:152.3</id>
					<description>Obtain the entity object's handle.</description>
					<location chapter="7" section="9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:152.4</id>
					<description>Obtain the entity object's primary key.</description>
					<location chapter="7" section="9"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:153</id>
			<description>The jakarta.ejb.EJBLocalObject interface defines the methods that allow the client to perform the following operations on an entity object's local reference:</description>
			<location chapter="7" section="10"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:153.1</id>
					<description>Obtain the local home interface for the entity object.</description>
					<location chapter="7" section="10"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:153.2</id>
					<description>Remove the entity object.</description>
					<location chapter="7" section="10"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:153.3</id>
					<description>Obtain the entity object's primary key.</description>
					<location chapter="7" section="10"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:154</id>
			<description>Note that the methods of the entity bean's local interface must not throw the java.rmi.RemoteException.</description>
			<location chapter="7" section="10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:155</id>
			<description>Since a handle class extends java.io.Serializable, a client may serialize the handle.  The client may use the serialized handle later, possibly in a different process or even system, to re-obtain a reference to the entity object identified by the handle.</description>
			<location chapter="7" section="10"/>
			<comment>bb.entity.cmp20.handletest.test2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:156</id>
			<description>A client that has reference to an entity object's remote interface can obtain the entity object's handle by invoking the getHandle() method on the remote interface.</description>
			<location chapter="7" section="11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:157</id>
			<description>The getHandle() method is only available on the remote interface.</description>
			<location chapter="7" section="11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:158</id>
			<description>The lifetime and scope of a handle is specific to the handle implementation.  At the minimum, a program running in one JVM must be able to serialize the handle, and another program running in a different JVM must be able to deserialize it and re-create an object reference.</description>
			<location chapter="7" section="12"/>
			<comment>bb.entity.cmp20.handletest.test3</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:159</id>
			<description>A handle to a remote home interface must implement jakarta.ejb.HomeHandle interface.</description>
			<location chapter="7" section="12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:160</id>
			<description>The client code must use the javax.rmi.PortableRemoteObject.narrow() method to convert the result of the getEJBHome() method invoked on a handle to the home interface type.</description>
			<location chapter="7" section="12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:161</id>
			<description>The entity Bean Provider must specify in the deployment descriptor those persistent fields and relationships for which the Container must handle data access.</description>
			<location chapter="8" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:162</id>
			<description>The bean provider must observe the following programming contract when defining an entity bean class that uses container-managed persistence:</description>
			<location chapter="8" section="3.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.1</id>
					<description>The Bean Provider must define the entity bean class as an abstract class.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.2</id>
					<description>The container-managed persistence fields and container-managed relationship fields must not be defined in the entity bean class.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:162.3</id>
					<description>The container-managed persistent fields and container-managed relationship fields must be specified in the deployment descriptor using the cmp-field and cmr-field elements respectively.  The names of these fields must be valid Java identifiers and must begin with a lowercase lstter, as determined by java.lang.Character.isLowerCase.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.4</id>
					<description>The Bean Provider must define the accessor methods for the container-managed persistence fields and the container-managed relationship fields as get and set methods, using the JavaBeans conventions.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:162.5</id>
					<description>The accessor methods must be public, must be abstract, and must bear the name of the container-managed persistent field (cmp-field) or container-managed relationship field (cmr-field) that is specified in the deployment descriptor, and in which the first letter of the name of the cmp-field or cmr-field has been uppercased and prefixed by "get" or "set".</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.6</id>
					<description>The accessor methods for a container-managed relationship field must be defined in terms of the local interface of the related entity bean.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.7</id>
					<description>The accessor methods for container-managed relationship fields for one-to-many or many-to-many relationships must utilize one of the following Collection interfaces:  java.util.Collection or java.util.Set.  The collection interfaces are specified in the deployment descriptor.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.8</id>
					<description>An entity bean local interface type (or a collection of such) can be the type of a cmr-field.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.9</id>
					<description>An entity bean local interface type (or a collection of such) cannot be the type of a cmp-field.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:162.10</id>
					<description>The accessor methods for the container-managed relationship fields must not be exposed through the remote interface of the entity bean.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:162.11</id>
					<description>The collection classes that are used for container-managed relationships must not be exposed through the remote interface of the entity bean.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.12</id>
					<description>Once the primary key for an entity bean has been set, the Bean Provider must not attempt to change it by use of the set accessor methods on the primary key cmp-fields. The Bean Provider should therefore not expose the set accessor methods for the primary key cmp-fields in the component interface of the entity bean.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:162.13</id>
					<description>The Bean Provider must ensure that the Java types assigned to the cmp-fields are restricted to the following:  Java primitive types and Java serializable types.</description>
					<location chapter="8" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:163</id>
			<description>An entity bean may have relationships with other entity beans with container-managed persistence.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:164</id>
			<description>Relationships may be one-to-one, one-to-many, or many-to-many.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:165</id>
			<description>Relationships may be either bidirectional or unidirectional.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:166</id>
			<description>If a relationship is bidirectional it can be navigated in both directions.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:167</id>
			<description>Whereas a unidirectional relationship can be navigated in one direction only.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:168</id>
			<description>A unidirectional relationship is implemented with a cmr-field on the entity bean instance from which navigation can take place and no related cmr-field on the entity bean instance that is the target of the relationship.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:169</id>
			<description>An entity bean that does not have a local interface can have only unidirectional relationships from itself to other entity beans.  The lack of a local interface prevents other entity beans from having a relationship to it.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:170</id>
			<description>The get method for a cmr-field must return either the local interface of the entity bean or a collection (java.util.Collection or java.util.Set) of the same.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:171</id>
			<description>The set method for the relationship must take as an argument the entity bean's local interface or a collection of the same.</description>
			<location chapter="8" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:172</id>
			<description>A dependent value class can be the value of a cmp-field; it cannot be the value of a cmr-field.</description>
			<location chapter="8" section="3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:173</id>
			<description>A dependent value class must be serializable.</description>
			<location chapter="8" section="3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:174</id>
			<description>When the remove method is invoked on an entity object, the container must invoke the entity Bean Provider's ejbRemove() method as described in Section 10.5.3.</description>
			<location chapter="8" section="3.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:175</id>
			<description>After the bean provider's ejbRemove() method returns (and prior to returning to the client), the Container must remove the entity object from all relationships in which it participates and then remove its persistent representation.</description>
			<location chapter="8" section="3.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:176</id>
			<description>Once an entity has been removed from a relationship, the accessor method for any relationships to the entity will reflect this removal:</description>
			<location chapter="8" section="3.4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:176.1</id>
					<description>An accessor method for a one-to-one or many-to-one relationship to the entity will return null.</description>
					<location chapter="8" section="3.4.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:176.2</id>
					<description>An accessor method for a many-to-many relationship to the entity will return a collection from which the entity object has been removed.</description>
					<location chapter="8" section="3.4.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:177</id>
			<description>The container must detect any subsequent attempt to invoke an accessor method on the removed entity object and throw the java.rmi.NoSuchObjectException if the client is a remote client.</description>
			<location chapter="8" section="3.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:178</id>
			<description>The container must detect any subsequent attempt to invoke an accessor method on the removed entity object and throw the java.ejb.NoSuchObjectLocalException if the client is a local client.</description>
			<location chapter="8" section="3.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:179</id>
			<description>The Container must detect an attempt to assign a removed entity object as the value of a cmr-field of another object (whether as an argument to a set accessor method or as an argument to a method of the java.util.Collection API) and throw the java.lang.IllegalArgumentException.</description>
			<location chapter="8" section="3.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:180</id>
			<description>After removing the entity object from all relationships and removing its persistent representation, the Container must then cascade the removal to all entity beans with which the entity had been previously in container-managed relationships for which the cascade-delete option was specified.</description>
			<location chapter="8" section="3.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:181</id>
			<description>The remove method alone causes only the entity on which it is invoked to be removed.</description>
			<location chapter="8" section="3.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:182</id>
			<description>The cascade-delete element can only be specified for an ejb-relationship-role element contained in the same ejb-relation element if the other ejb-relationship-role element in the same ejb-relation element specifies a multiplicity of One.</description>
			<location chapter="8" section="3.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:183</id>
			<description>The cascade-delete option cannot be specified for a many-to-many relationship.</description>
			<location chapter="8" section="3.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:184</id>
			<description>The deletion of one entity object can only be cascaded to cause the deletion of other entity objects if the first entity object is in a one-to-one or one-to-many relationshp with those other entity objects.</description>
			<location chapter="8" section="3.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:185</id>
			<description>As with the remove operation, the removal triggered by the cascade-delete option causes the container to invoke ejbRemove() method on the entity bean instance that is to be removed before the persistent representation of that entity object is removed.</description>
			<location chapter="8" section="3.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:186</id>
			<description>Once an entity has been removed from a relationship because of a cascaded delete, the accessor methods for any relationships to the entity will reflect this removal.  An accessor method for a one-to-one or many-to-one relationship to the entity will return null.</description>
			<location chapter="8" section="3.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:187</id>
			<description>Once an entity has been removed from a relationship because of a cascaded delete, the accessor methods for any relationships to the entity will reflect this removal.  An accessor method for a many-to-many relationship to the entity will return a collection from which the entity object has been removed.</description>
			<location chapter="8" section="3.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:188</id>
			<description>When a new instance of an entity bean whose primary key fields are visible in the entity bean class is created,, the Bean Provider must use the ejbCreateMETHOD method to set all the primary key fields of the entity bean instance before the instance can participate in a relationship, e.g., be used in a set accessor for a cmr-field.</description>
			<location chapter="8" section="3.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:189</id>
			<description>The Bean Provider must not reset a primary key value by means of a set method on any of its cmp-fields after it has been set in the ejbCreateMETHOD method.</description>
			<location chapter="8" section="3.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:190</id>
			<description>If the Bean Provider attempts to reset a primary key value, the container must throw the java.lang.IllegalStateException.</description>
			<location chapter="8" section="3.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:191</id>
			<description>In the case of a one-to-one relationship, when the Bean Provider uses a set accessor method to assign an object from a cmr-field in one instance to a cmr-field of the same relationship type (as defined by ejb-relation and ejb-relationship-role deployment descriptor elements) in another instance, the object is effectively moved and the value of the source cmr-field is set to null in the same transaction context.</description>
			<location chapter="8" section="3.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:192</id>
			<description>If the argument to the set accessor method is not of the same type as the cmr-field, the container must throw the java.lang.IllegalArgumentException.</description>
			<location chapter="8" section="3.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:193</id>
			<description>If the argument to the add method is already an element of a collection-valued relationship field of the same relationship type as the target collection (as defined by ejb-relation and ejb-relationship-role deployment descriptor elements), it is removed from this first relationship and added, in the same transaction context, to the target relationship.</description>
			<location chapter="8" section="3.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:194</id>
			<description>If the argument to the add method is not an element of a collection-valued relationship of the same relationship type, it is simply added to the target collection and not removed from its current collection, if any.</description>
			<location chapter="8" section="3.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:195</id>
			<description>The addAll method, when applied to a target collection in a one-to-many relationship has similar semantics applied to the members of its collection argument individually.</description>
			<location chapter="8" section="3.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:196</id>
			<description>Note that in the case of many-to-many relationships, adding an element or elements to the contents of a collection-valued cmr-field has no effect on the source collection, if any.</description>
			<location chapter="8" section="3.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:197</id>
			<description>When the java.util.Collection API is used to manipulate the contents of container-managed relationship fields, the argument to any Collection method defined with a single Object parameter must be of the element type of the collection defined for the target cmr-field.</description>
			<location chapter="8" section="3.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:198</id>
			<description>The argument for any collection-valued parameter must be a java.util.Collection (or java.util.Set), all of whose elements are of the element type of the collection defined for the target cmr-field. If an argument is not of the correct type for the relationship, the Container must throw the java.lang.IllegalArgumentException</description>
			<location chapter="8" section="3.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:199</id>
			<description>In particular, the Bean Provider must not modify the container-managed collection whie the iteration is in progress in any way that causes elements to be added or removed, other than by the java.util.Iterator.remove() method.</description>
			<location chapter="8" section="3.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:200</id>
			<description>If elements are added or removed from the underlying container-managed collection used by an iterator other than by the java.util.Iterator.remove() method, the container should throw the java.lang.IllegalStateException on the next operation of the iterator.</description>
			<location chapter="8" section="3.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:201</id>
			<description>In the case of a one-to-many relationship, if a collection of entity objects is assigned from a cmr-field of one instance to a cmr-field of the same relationship type in another instance, the objects in the collection are effectively moved.  The contents of the collection of the target instance are replaced with the contents of the collection of the source instance, but the identity of the collection object containing the instances in the relationship does not change.  The source cmr-field references the same collection object as before but the collection is empty.</description>
			<location chapter="8" section="3.6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:202</id>
			<description>In the case of a many-to-many relationship, if the value of a cmr-field is assigned to a cmr-field of the same relationship type in another instance, the objects in the collection of the first instance are assigned as the contents of the cmr-field of the second instance.  The identities of the collection objects referenced by the cmr-field do not change.  The set accessor method, when applied to a cmr-field in a many-to-many relationship thus has the semantics of the java.util.Collection methods clear, followed by addAll, applied to the target collection.</description>
			<location chapter="8" section="3.6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:203</id>
			<description>A one-to-one bi-directional relationship between entitybean objects. Assignment rules for relationships.
			 0..1   0..1 A (-----) B a1(-----)b1 a2(-----)b2  Change: a1.setB(a2.getB())  Result: a1.getB() = b2 a2.getB() = null b1.getA() = null b2.getA() = a1
			</description>
			<location chapter="8" section="3.7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:204</id>
			<description>A one-to-one uni-directional relationship between entitybean objects. Assignment rules for relationships.
			 0..1   0..1 A  -----) B a1 -----)b1 a2 -----)b2  Change: a1.setB(a2.getB())  Result: a1.getB() = b2 a2.getB() = null
			</description>
			<location chapter="8" section="3.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:205</id>
			<description>A one-to-many bi-directional relationship between entitybean objects. Assignment rules for relationships.  0..1   0..* A (-----) B a1(-----)b11,b12 a2(-----)b21,b22 Collection b1 = a1.getB() Collection b2 = a2.getB()  Change: a1.setB(a2.getB())  Result: a1.getB() = collection containing b21,b22 a2.getB() = empty collection b1 == a1.getB() b2 == a2.getB() b11.getA() = null b12.getA() = null b21.getA() = a1 b22.getA() = a1</description>
			<location chapter="8" section="3.7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:205.1</id>
			<description> A 1xmany bi-directional relationship between entitybean objects. Assignment rules for relationships. 0..1   0..*  A (-----) B  a1(-----)b11,b12  a2(-----)b21,b22  Collection b1 = a1.getB() Collection b2 = a2.getB() Change: b22.setA(b12.getA()) Result: a1.getB() = collection containing b11,b12,b22  a2.getB() = collection containing b21  b11.getA() = a1 b12.getA() = a1 b21.getA() = a2 b22.getA() = a1</description>
			<location chapter="8" section="3.7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:205.2</id>
			<description>A 1xmany bi-directional relationship between entitybean objects. Assignment rules for relationships.  0..1   0..* A (-----) B a1(-----)b11,b12 a2(-----)b21,b22 Change: a1.getB().add(b22) Result: a1.getB() = collection containing b11,b12,b22 a2.getB() = collection containing b21 b11.getA() = a1 b12.getA() = a1 b21.getA() = a2 b22.getA() = a1</description>
			<location chapter="8" section="3.7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:205.3</id>
			<description> A 1xmany bi-directional relationship between entitybean objects.  Assignment rules for relationships.  0..1   0..* A (-----) B a1(-----)b11,b12 a2(-----)b21,b22 Change: a1.getB().remove(b12) Result: a1.getB() = collection containing b11  b12.getA() = null</description>
			<location chapter="8" section="3.7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:206</id>
			<description>A one-to-many uni-directional relationship between entitybean objects. Assignment rules for relationships.
			 0..1   0..* A  -----) B a1 -----)b11,b12 a2 -----)b21,b22 Collection b1 = a1.getB() Collection b2 = a2.getB()  Change: a1.setB(a2.getB())  Result: a1.getB() = collection containing b21,b22 a2.getB() = empty collection b1 == a1.getB() b2 == a2.getB()
			</description>
			<location chapter="8" section="3.7.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:206.1</id>
			<description>A 1xmany uni-directional relationship between entitybean objects. Assignment rules for relationships.  0..1   0..* A  -----) B a1 -----)b11,b12 a2 -----)b21,b22 Collection b1 = a1.getB() Collection b2 = a2.getB() Change: a1.getB().add(b22) Result: a1.getB() = collection containing b11,b12,b22 a2.getB() = collection containing b21 b1 == a1.getB() b2 == a2.getB()</description>
			<location chapter="8" section="3.7.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:206.2</id>
			<description>A 1xmany uni-directional relationship between entitybean objects. Assignment rules for relationships.  0..1 0.. A  -----) B a1 -----)b11,b12 a2 -----)b21,b22 Change: a1.getB().remove(b12) Result: a1.getB() = collection containing b11</description>
			<location chapter="8" section="3.7.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:207</id>
			<description>A many-to-one uni-directional relationship between entitybean objects. Assignment rules for relationships.
			 0..1   0..* A (-----  B a1(----- b11,b12 a2(----- b21,b22  Change: b12.setA(b22.getA())  Result: b11.getA() = a1 b12.getA() = a2 b21.getA() = a2 b22.getA() = a2
			</description>
			<location chapter="8" section="3.7.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:208</id>
			<description>A many-to-many bi-directional relationship between entitybean objects. Assignment rules for relationships.
			 0..*   0..* A (-----) B a1(-----)b1,b2 b1(-----)a1,a2 a2(-----)b1,b2,b3 b2(-----)a1,a2,a3 a3(-----)b2,b3,b4 b3(-----)a2,a3,a4 a4(-----)b3,b4 b4(-----)a3,a4  Change: a1.setB(a3.getB())  Result: a1.getB() = collection containing b2,b3,b4 a3.getB() = collection containing b2,b3,b4 b1.getA() = collection containing a2 b2.getA() = collection containing a1,a2,a3 b3.getA() = collection containing a1,a2,a3,a4 b4.getA() = collection containing a1,a3,a4
			</description>
			<location chapter="8" section="3.7.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:209</id>
			<description>A many-to-many bi-directional relationship between entitybean objects. Assignment rules for relationships.
			0..*   0..* A (-----) B a1(-----)b1,b2 b1(-----)a1,a2 a2(-----)b1,b2,b3 b2(-----)a1,a2,a3 a3(-----)b2,b3,b4 b3(-----)a2,a3,a4 a4(-----)b3,b4 b4(-----)a3,a4  Change: a1.getB().add(b3)  Result: a1.getB() = collection containing b1,b2,b3 b3.getA() = collection containing a1,a2,a3,a4
			</description>
			<location chapter="8" section="3.7.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:210</id>
			<description>A many-to-many bi-directional relationship between entitybean objects. Assignment rules for relationships.
			0..*   0..* A (-----) B a1(-----)b1,b2 b1(-----)a1,a2 a2(-----)b1,b2,b3 b2(-----)a1,a2,a3 a3(-----)b2,b3,b4 b3(-----)a2,a3,a4 a4(-----)b3,b4 b4(-----)a3,a4  Change: a2.getB().remove(b2)  Result: a2.getB() = collection containing b1,b3 b2.getA() = collection containing a1,a3
			</description>
			<location chapter="8" section="3.7.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:211</id>
			<description>A many-to-many uni-directional relationship between entitybean objects. Assignment rules for relationships.
			 0..*   0..* A  -----) B a1 -----)b1,b2 a2 -----)b1,b2,b3 a3 -----)b2,b3,b4 a4 -----)b3,b4  Change: a1.setB(a3.getB())  Result: a1.getB() = collection containing b2,b3,b4 a3.getB() = collection containing b2,b3,b4
			</description>
			<location chapter="8" section="3.7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:212</id>
			<description>A many-to-many uni-directional relationship between entitybean objects. Assignment rules for relationships.
			 0..*   0..* A  -----) B a1 -----)b1,b2 a2 -----)b1,b2,b3 a3 -----)b2,b3,b4 a4 -----)b3,b4  Change: a1.getB().add(b3)  Result: a1.getB() = collection containing b1,b2,b3
			</description>
			<location chapter="8" section="3.7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:213</id>
			<description>A many-to-many uni-directional relationship between entitybean objects. Assignment rules for relationships.
			0..*   0..* A  -----) B a1 -----)b1,b2 a2 -----)b1,b2,b3 a3 -----)b2,b3,b4 a4 -----)b3,b4  Change: a2.getB().remove(b2)  Result: a2.getB() = collection containing b1,b3
			</description>
			<location chapter="8" section="3.7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:214</id>
			<description>If there are no related values for a given container-managed relationship, the get accessor method for that cmr-field returns an empty collection (and not null).</description>
			<location chapter="8" section="3.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:215</id>
			<description>It is the responsibility of the container to raise the java.lang.IllegalArgumentException if the Bean Provider attempts to assign null as the value of a collection-valued cmr-field by means of the set accessor method.</description>
			<location chapter="8" section="3.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:216</id>
			<description>When the java.util.Collection API is used to manipulate the contents of container-managed relationship fields, the argument to any Collection method defined with a single Object parameter must be of the element type of the collection defined for the target cmr-field.The argument for any collection-valued parameter must be a java.util.Collection (or java.util.Set), all of whose elements are of the element type of the collection defined for the target cmr-field.  If an argument is not of the correct type for the relationship, the Container must throw the java.lang.IllegalArgumentException.</description>
			<location chapter="8" section="3.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:217</id>
			<description>It is the responsibility of the Container to throw the java.lang.IllegalStateException if an attempt is made to modify the container-managed collection correspoinding to a multivalued cmr-field using the java.util.Collection API outside the transaction context in which the collection object was initially materialized.</description>
			<location chapter="8" section="3.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:218</id>
			<description>It is the responsibility of the Container to throw the java.lang.IllegalStateException if an attempt is made to use a java.util.Iterator for a container-managed collection in a transaction context other than that in which the iterator was obtained.</description>
			<location chapter="8" section="3.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:219</id>
			<description>The following restrictions apply to the remote interface of an entity bean with container-managed persistence.</description>
			<location chapter="8" section="3.10.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:219.1</id>
					<description>The Bean Provider must not expose the get and set methods for container-managed relationship fields or the persistent Collection classes that are used in container-managed relationships through the remote interface of the bean.</description>
					<location chapter="8" section="3.10.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:219.2</id>
					<description>The Bean Provider must not expose local interface types or local home interface types through the remote interface or remote home interface of the bean.</description>
					<location chapter="8" section="3.10.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:219.3</id>
					<description>The Bean Provider must not exposet the container-managed collection classes that are used for relationships through the remote interface of the bean.</description>
					<location chapter="8" section="3.10.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:219.4</id>
					<description>The Bean Provider must not expose timer handles through the remote interface of the bean.</description>
					<location chapter="8" section="3.10.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:220</id>
			<description>Dependent value classes can be exposed in the remote interface or remote home interface and can be included in the client ejb-jar file.</description>
			<location chapter="8" section="3.10.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:221</id>
			<description>The Bean Provider is free to expose get and set methods that correspond to cmp-fields of the entity bean through the bean's remote inteface.</description>
			<location chapter="8" section="3.10.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:222</id>
			<description>The persistent fields (cmp-fields) and relationships (cmr-fields) of an entity bean must be declared in the deployment descriptor.</description>
			<location chapter="8" section="3.13"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:223</id>
			<description>The ejb-name deployment descriptor element must be a valid Java identifier and must be unique within the ejb-name elements of the ejb-jar file.</description>
			<location chapter="8" section="3.13"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:224</id>
			<description>The abstract-schema-name deployment descriptor element must be a valid Java identifier and must be unique within the abstract-schema-name elements of the ejb-jar file.</description>
			<location chapter="8" section="3.13"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:225</id>
			<description>The cmr-field-type element must be specified if the type of the cmr-field is java.util.Collection or java.util.Set.</description>
			<location chapter="8" section="3.13"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:226</id>
			<description>If both a remote and local interface are specified for the entity bean, the container must manage the mapping between EJBObjects and EJBLocalObjects.</description>
			<location chapter="8" section="4.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:227</id>
			<description>It is the responsibility of the Container to throw the java.lang.IllegalArgumentException when the argument to a set method in a relationship is an instance of the wrong relationship type or a collection containing instances of the wrong type, or when an argument to a method of the java.util.Collection API used to manipulate a collection-valued container-managed relationship field is an instance of the wrong type or a collection that contains instances of the wrong type.</description>
			<location chapter="8" section="4.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:228</id>
			<description>It is the responsibility of the Container to throw the java.lang.IllegalStateException when a method of the java.util.Collection API is used to access a collection-valued cmr-field within a transaction context other than the transaction context in which the cmr-field ws initially materialized.</description>
			<location chapter="8" section="4.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:229</id>
			<description>It is the responsibility of the Container to throw the java.lang.IllegalStateException when a java.util.Iterator is used to access a collection-valued cmr-field within a transaction context other than the transaction context in which the iterator was initially obtained.</description>
			<location chapter="8" section="4.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:230</id>
			<description>Life Cycle of an Entity Bean Instance</description>
			<location chapter="8" section="5.1"/>
			<comment>bb.entity.entitybeantest</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:231</id>
			<description>There are zero or more ejbCreateMETHOD methods, whose signatures match the signatures of the createMETHOD methods of the entity bean's home interface.</description>
			<location chapter="8" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:232</id>
			<description>An entity enterprise Bean has no ejbCreateMETHOD method and ejbPostCreateMETHOD methods if it does not define any create methods in its home interface.  Such an entity enterprise bean does not allows its clients to create new EJB Objects.  The enterprise Bean restricts the client to accessing its entities that were created through direct database inserts.</description>
			<location chapter="8" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:232.1</id>
			<description>The entity Bean Provider's responsibility is to initialize the instance in the ejbCreateMETHOD methods from the input arguments, using the get and set accessor methods, such that when the ejbCreateMETHOD method returns, the persistent representation of the instance can be created.  The entity Bean Provider is guaranteed that the values that will be initially returned by the instance's get methods for container-managed fields will be the Java language defaults (e.g. 0 for integer, null for pointers), except for collection-valued cmr-fields which will have the empty collection (or set) as their value.</description>
			<location chapter="8" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:233</id>
			<description>The entity Bean Provider must not attempt to modify the values of cmr-fields in an ejbCreateMETHOD; this should be done in the ejbPostCreateMETHOD method instead.</description>
			<location chapter="8" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:234</id>
			<description>The entity object created by the ejbCreateMETHOD method must have a unique primary key.  This means that the primary key must be different from the primary keys of all the existing entity objects within the same home.  However, it is legal to reuse the primary key of a previously removed entity object.</description>
			<location chapter="8" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:235</id>
			<description>The implementation of the Bean Provider's ejbCreateMETHOD method should be coded to return a null.</description>
			<location chapter="8" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:236</id>
			<description>For each ejbCreateMETHOD method, there is a matching ejbPostCreateMETHOD method that has the same input parameters but whose return type is void.</description>
			<location chapter="8" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:237</id>
			<description>The entity bean provider may use the ejbPostCreateMETHOD method to set the values of cmr-fields to complete the initialization of the entity bean instance.</description>
			<location chapter="8" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:238</id>
			<description>The container is responsible for calling the ejbCreateMETHOD method, for obtaining the primary key fields of the newly created entity object persistent representation, and for creating an entity EJBObject reference and/or EJBLocalObject reference for the newly created entity object.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:239</id>
			<description>The Container must establish the primary key before it invokes the ejbPostCreateMETHOD method.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:240</id>
			<description>The container may, but is not required to, throw the DuplicateKeyException on the Bean Provider's attempt to create an entity object with a duplicate primary key.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:241</id>
			<description>The container must invoke ejbCreateMETHOD and ejbPostCreateMETHOD and create the representation of the persistent instance in the database in the transaction context determined by the transaction attribute of the matching createMETHOD method, as described in subsection 13.6.2.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:242</id>
			<description>The container synchronizes the instance's state before it invokes the ejbRemove method.  This means that the persistent state of the instance at the beginning of the ejbRemove methods is the same as it would be at the beginning of a business method.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:243</id>
			<description>After the entity Bean Provider's ejbRemove() method returns, and in the same transaction context, the Container removes the entity bean instance from all relationships in which it participates and then removes the entity object's persistent representation.  The container may delete the representation of the entity in the database immediately, or it can defer it to a later time depending on the caching strategy.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:244</id>
			<description>The container must ensure that the ejbRemove method and the database delete operations are performed in the transaction context determined by the transaction attribute of the invoked remove method, as described in subsection 13.6.2.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:245</id>
			<description>The container invokes the ejbTimeout method on the instance when a timer with which the entity has been registered expires.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:246</id>
			<description>The exact times that the container invoked ejbLoad() depend on the configuration of the component and the container, and are not defined by the EJB architecture.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:247</id>
			<description>When the container needs to synchronize the state of an entity object in the database with the state of the enterprise bean instance, the container calls the ejbStore() method on the instance.  The synchronization always happens at the end of a transaction.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:248</id>
			<description>The Container is responsible for ensuring that updates to the states of all entity beans in the same transaction context as the ejbFindMETHOD method are visible in the results of the ejbFindMETHOD method.   Before invoking the ejbFindMETHOD method, the container must therefore first synchronize the state of any entity bean instances that are participating in the same transaction context as it is uesed
to execute the ejbFindMETHOD method by invoking ejbStore() method on those entity bean instances.
			</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:248.1</id>
			<description>This requirement [EJB:SPEC:248] does not apply to the ejbFindByPrimaryKey method.  The results of
	the ejbFindByPrimaryKey method, however, must reflect the entities that have been created or removed within the same transaction context.</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:248.2</id>
			<description>After the ejbFindMethod completes, the instance remains in the pooled state.  The container may,
		but is not required to, immediately activate the objects that were located by the finder using the transition through the ejbActivate method</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:248.3</id>
			<description>If the ejbFindMethod is declared to return a single primary key, the container creates an
		entity EJBObject (EJBLocalObject) reference for the primary key and returns it ot the client (local client).  If
		the ejbFindMethod is declared to return a collection of primary keys, the container creates a collection of entity
		EJBObject (EJBLocalObject) references for the primary keys returned from the ejbFindMethod and returns the collection
		to the client (local client).</description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10248</id>
			<description>The Container is responsible for ensuring that updates to the states of all entity beans in the sa
me transaction context as the ejbSelectMethod method and whose abstract schema types are accessed in the EJB QL query for the ejbSelectMethod are visible in the results of the ejbSelectMethod method invoking ejbStore() method on those entity bean instances.
                        </description>
			<location chapter="8" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:249</id>
			<description>A container provides the entity bean instances with an EntityContext, which gives the entity bean instance access to the instance's context maintained by the Container.  The EntityContext interface has the following methods:</description>
			<location chapter="8" section="5.4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.1</id>
					<description>The getEJBObject method returns the entity bean's remote interface.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.2</id>
					<description>The getEJBHome method returns the entity bean's remote home interface.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.3</id>
					<description>The getEJBLocalObject method returns the entity bean's local interface.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.4</id>
					<description>The getEJBLocalHome method returns the entity bean's local home interface.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.5</id>
					<description>The getCallerPrincipal method returns the java.security.Principal that identifies the invoker of the ban instance's EJB object.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.6</id>
					<description>The isCallerInRole method tests if the entity bean instance's caller has a particular role.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.7</id>
					<description>The setRollbackOnly method allows the instance to mark the current transaction such that the only outcome of the transaction is a rollback.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.8</id>
					<description>The getRollbackOnly method allows the instance to test if the current transaction has been marked for rollback.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.9</id>
					<description>The getPrimaryKey method returns the entity bean's primary key.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.10</id>
					<description>The getTimerService method returns the jakarta.ejb.TimerService interface.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:249.11</id>
					<description>the getUserTransaction method returns the jakarta.transaction.UserTransaction interface.  Entity bean instances must not call this method.</description>
					<location chapter="8" section="5.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:250</id>
			<description>If an entity bean instance attempts to invoke a method of the EntityContext interface, and the access is not allowed in Table 4, the Container must throw the java.lang.IllegalStateException.</description>
			<location chapter="8" section="5.5"/>
			<comment>bb.entity.lrapitests</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:251</id>
			<description>If an entity bean instance attempts to invoke a method of the TimerService or Timer interface and the access is not allowed in Table 4, the Container must throw the java.lang.IllegalStateException.</description>
			<location chapter="8" section="5.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:252</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbCreate:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>bb.entity.lrapitest - should throw IllegalStateException</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>bb.entity.lrapitest - should throw IllegalStateException</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:252.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:252.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.12</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.13</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:252.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:253</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbPostCreate:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:253.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:253.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:253.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:254</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbRemove:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:254.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:254.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:254.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:255</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbHome:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:255.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:255.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:255.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:256</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbActivate:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.4</id>
					<description>getRollbackOnly-  not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.6</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.10</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.11</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:256.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:257</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbPassivate:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.4</id>
					<description>getRollbackOnly-  not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.6</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.10</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.11</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:257.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:258</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbLoad:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:258.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:258.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:258.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:259</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbStore:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:259.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:259.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:259.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:260</id>
			<description>Operations allowed in the methods of a entity bean for business methods from the component interface:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:260.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:260.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:260.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:261</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbTimeout:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:261.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:261.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:261.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:262</id>
			<description>Operations allowed in the methods of a entity bean for bean method setEntityContext:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.4</id>
					<description>getRollbackOnly-  not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.6</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:262.10</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:262.11</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.12</id>
					<description>getTimerService - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:262.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:263</id>
			<description>Operations allowed in the methods of a entity bean for bean method unsetEntityContext:</description>
			<location chapter="8" section="5.5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.4</id>
					<description>getRollbackOnly-  not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.6</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="8" section="5.5"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.10</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.11</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.12</id>
					<description>getTimerService - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:263.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="8" section="5.5"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:264</id>
			<description>The getRollbackOnly and setRollbackOnly methods of the EntityContext interface should be used only in the enterprise bean methods that execute in the context of a transactions.  The Container must throw the java.lang.IllegalStateException if the methods are invoked whiel the instance is not associated with a transaction.</description>
			<location chapter="8" section="5.5"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:265</id>
			<description>Every finder method except findByPrimaryKey(key) must be associated with a query element in the deployment descriptor.</description>
			<location chapter="8" section="5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:266</id>
			<description>In the case that both the remote home interface and local home interface defind a finder method with the same name and argument types, the EJB QL query string specified by the query element defines the semantics of both methods.</description>
			<location chapter="8" section="5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:267</id>
			<description>A finder method can have no arguments.</description>
			<location chapter="8" section="5.6"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:268</id>
			<description>[For a single-object finder,] if the query specified by the finder method returns multiple values of the designated entity object type, the container must throw the FinderException from the finder method.</description>
			<location chapter="8" section="5.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:269</id>
			<description>If the entity Bean Provider uses an unknown primary key class, the Bean Provider will typically define the finder as a multi-object finder.</description>
			<location chapter="8" section="5.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:270</id>
			<description>Note that a single-object finder may return a null value.</description>
			<location chapter="8" section="5.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:271</id>
			<description>For multi-object finders defined on the entity bean's local home interface, the result type of the findMETHOD method is a collection of objects implementing the entity bean's local interface.</description>
			<location chapter="8" section="5.6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:272</id>
			<description>For multi-object finders defined on the entity bean's remote home interface, the result type of the findMETHOD method is a collection of objects implementing the entity bean's remote interface.</description>
			<location chapter="8" section="5.6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:273</id>
			<description>The collection of values returned by the Container may contain duplicates if DISTINCT is not specified in the SELECT clause of the query for the finder method.</description>
			<location chapter="8" section="5.6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:274</id>
			<description>The collection of values returned by the Container may contain null values if the finder method returns the values of a cmr-field and null values are not eliminated by the query.</description>
			<location chapter="8" section="5.6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:275</id>
			<description>A client program must use the PortableRemoteObject.narrow() method to convert the objects contained in the collection returned by a finder method on the entity bean's remote home interface to the entity bean's remote interface type.</description>
			<location chapter="8" section="5.6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:276</id>
			<description>Every select method must be associated with a query element in the deployment descriptor.</description>
			<location chapter="8" section="5.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:277</id>
			<description>If the ejbSelectMETHOD method returns an EJBObject or collection of EJBObjects, the Bean Provider must specify the value of the result-type-mapping element in the query deployment descriptor element for the select method as Remote.</description>
			<location chapter="8" section="5.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:278</id>
			<description>An ejbSelectMETHOD method is not based on the identity of the entity bean instance on which it is invoked. However, the Bean Provider can use the primary key of an entity bean as an argument to an ejbSelectMETHOD to define a query that is logically scoped to a particular entity bean instance.</description>
			<location chapter="8" section="5.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:279</id>
			<description>[For a single-object select method,] if the query specified by the select method returns multiple values of the designated entity object type, the container must throw the FinderException from the finder method.</description>
			<location chapter="8" section="5.7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:280</id>
			<description>Note that a single-object select method may return a null value.</description>
			<location chapter="8" section="5.7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:281</id>
			<description>If the Bean Provider uses the java.util.Collection interface, the collection of values returned by the Container may contain duplicates if DISTINCT is not specified in the SELECT clause of the query.</description>
			<location chapter="8" section="5.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:282</id>
			<description>If a query for a select method whose result type is java.util.Set does not specify DISTINCT in its SELECT clause, the container must interpret the query as if SELECT DISTINCT had been specified.</description>
			<location chapter="8" section="5.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:283</id>
			<description>The collection of values returned by the Container may contain null values if the select method returns the values of a cmr-field or cmp-field and null values are not eliminated by the query.</description>
			<location chapter="8" section="5.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>10283</id>
			<description>The Container throws the FinderException (or subclass of FinderException) from the 		
				implementation of a finder or select method to indicate an application-level error in the finder or select method.
			</description>
			<location chapter="8" section="5.9.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:284</id>
			<description>Multi-object finder or select methods must not throw this [ObjectNotFoundException] exception.  Multi-finder or select methods should return an empty collection as an indication that no matching objects were found.</description>
			<location chapter="8" section="5.9.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:285</id>
			<description>The Container throws the ObjectNotFoundException from the implementation of a finder or select method to indicate that the requested object does not exist. Only single-object finder or select methods should throw this exception.</description>
			<location chapter="8" section="5.9.4"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:286</id>
			<description>If the entity bean is specified as non-reentrant in the deployment desriptor, the Container must reject an attempt to re-enter the instance via the entity bean's component interface while the instance is executing a business method.  If the attempt is made to reenter the instance through the remote interface, the container must throw the java.rmi.RemoteException to the caller.  If the attempt is made to reenter the instance through the local interface, the container must throw the jakarta.ejb.EJBException to the caller.  The container must allow the call if the Bean's deployment descriptor specifies that the entity bean is reentrant.</description>
			<location chapter="8" section="5.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:287</id>
			<description>For each findMETHOD method in the remote home interface or the local home interface of the entity bean, there must be a corresponding ejbFindMETHOD method with the same argument types in the concrete entity bean class.</description>
			<location chapter="8" section="7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:288</id>
			<description>The return type of a finder method must be the entity bean's primary key type or a collection of primary keys.</description>
			<location chapter="8" section="7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:289</id>
			<description>The throws clause [of the concrete ejbFindMETHOD method] must define the jakarta.ejb.FinderException.</description>
			<location chapter="8" section="7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:290</id>
			<description>Every finder method except for ejbFindByPrimaryKey(key) is specified in the query deployment descriptor element for the entity.  The Container must use the EJB QL query string that is the content of the ejb-ql element or the descriptive query specification contained in the description element as the definition of the query of the corresponding ejbFindMETHOD method.</description>
			<location chapter="8" section="7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:291</id>
			<description>The Container must use the EJB QL query string that is the content of the ejb-ql element or the descriptive query specification that is contained in the description element as the definition of the query of the corresponding ejbSelectMETHOD method.</description>
			<location chapter="8" section="7.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:292</id>
			<description>The Container must use the contents of the query element, the corresponding EJB QL string and the type of the values selected as specified by the SELECT clause to determine the type of the values returned by a select method.</description>
			<location chapter="8" section="7.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:293</id>
			<description>The Container must ensure that there are no duplicates returned by a select method if the return type is java.util.Set.</description>
			<location chapter="8" section="7.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:294</id>
			<description>The implementation of each createMETHOD method invokes a matching ejbCreate method followed by the matching ejbPostCreateMETHOD method, passing the createMETHOD parameters to these matching methods.</description>
			<location chapter="8" section="7.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:295</id>
			<description>The implementation of the remove() methods defined in the jakarta.ejb.EJBHome interface must activate an instance (if an instance is not in the ready state) and invoke the ejbRemove method on the instance.</description>
			<location chapter="8" section="7.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:296</id>
			<description>The implementation of each findMETHOD method invokes a matching ejbFindMETHOD method.  The implementation of the findMETHOD method must create an entity object reference for the primary key returned from the ejbFindMETHOD and return the entity object reference to the client.</description>
			<location chapter="8" section="7.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:297</id>
			<description>If the ejbFindMETHOD method returns a collection of primary keys, the implementation of the findMETHOD method must create a collection of entity object references for the primary keys and return the collection to the client.</description>
			<location chapter="8" section="7.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:298</id>
			<description>Before invoking the ejbFindMETHOD method, the container must first synchronize the state of any entity bean instances that are participating in the same transaction context as the ejbFindMETHOD method by invoking ejbStore() method on those entity bean instances.</description>
			<location chapter="8" section="7.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:299</id>
			<description>The implementation of each METHOD home method invokes a matching ejbHomeMETHOD method (in which the first characters of METHOD is uppercased in the name of the ejbHomeMETHOD method), passing the METHOD parameters to the matching method.</description>
			<location chapter="8" section="7.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:300</id>
			<description>The implementation of the remove() method (defined in the jakarta.ejb.EJBObject interface) must activate an instance (if an instance is not in the ready state) and invoke the ejbRemove method on the instance.</description>
			<location chapter="8" section="7.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:301</id>
			<description>The implementation of each remote business method must activate an instance (if an instance is not in the ready state) and invoke the matching business method on the instance.</description>
			<location chapter="8" section="7.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:302</id>
			<description>The implementation of each createMETHOD method invokes a matching ejbCreate method followed by the matching ejbPostCreateMETHOD method, passing the createMETHOD parameters to these matching methods.</description>
			<location chapter="8" section="7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:303</id>
			<description>The implementation of the remove() methods defined in the jakarta.ejb.EJBLocalHome interface must activate an instance (if an instance is not in the ready state) and invoke the ejbRemove method on the instance.</description>
			<location chapter="8" section="7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:304</id>
			<description>The implementation of each findMETHOD method invokes a matching ejbFindMETHOD method.  The implementation of the findMETHOD method must create a local entity object reference for the primary key returned from the ejbFindMETHOD and return the local entity object reference to the local client.</description>
			<location chapter="8" section="7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:305</id>
			<description>If the ejbFindMETHOD method returns a collection of primary keys, the implementation of the findMETHOD method must create a collection of local entity object references for the primary keys and return the collection to the local client.</description>
			<location chapter="8" section="7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:306</id>
			<description>Before invoking the ejbFindMETHOD method, the container must first synchronize the state of any entity bean instances that are participating in the same transaction context as th ejbFindMETHOD method by invoking ejbStore() method on those entity bean instances.</description>
			<location chapter="8" section="7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:307</id>
			<description>The implementation of each METHOD home method invokes a matching ejbHomeMETHOD method (in which the first character of METHOD is uppercased in the name of the ejbHomeMETHOD method), passing the METHOD parameters to the matching method.</description>
			<location chapter="8" section="7.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:308</id>
			<description>The implementation of the remove() method (defined in the jakarta.ejb.EJBLocalObject interface) must activate an instance (if an instance is not in the ready state) and invoke the ejbRemove method on the instance.</description>
			<location chapter="8" section="7.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:309</id>
			<description>The implementation of each local business method must activate an instance (if an instance is not in the ready state) and invoke the matching business method on the instance.</description>
			<location chapter="8" section="7.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:310</id>
			<description>There are two ways to specify a primary key class for an entity bean with container-managed persistence:</description>
			<location chapter="8" section="8"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:310.1</id>
					<description> Primary key that maps to a single field in the entity bean class</description>
					<location chapter="8" section="8"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:310.2</id>
					<description>Primary key that map to multiple fields in the entity bean class.</description>
					<location chapter="8" section="8"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:311</id>
			<description>In this special case, the type of the argument of the findByPrimaryKey method must be declared as java.lang.Object.  The Bean Provider must specify the primary key class in the deployment descriptor as the type java.lang.Object. In this case, the Container must generate the primary key value when the entity bean instance is created (and before ejbPostCreate is invoked on the instance).</description>
			<location chapter="8" section="8.3"/>
			<comment>bb.entity.cmp20.unknownpktest.test1 and test2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:312</id>
			<description>An EJB QL query must always have a SELECT and a FROM clause.</description>
			<location chapter="9" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:313</id>
			<description>The result type of a select method can be</description>
			<location chapter="9" section="2.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:313.1</id>
					<description>A cmp-field value</description>
					<location chapter="9" section="2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:313.2</id>
					<description>A collection of cmp-field values</description>
					<location chapter="9" section="2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:313.3</id>
					<description>The result of an aggregate function</description>
					<location chapter="9" section="2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:313.4</id>
					<description>an EJBLocalObject</description>
					<location chapter="9" section="2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:313.5</id>
					<description>a collection of EJBLocalObjects</description>
					<location chapter="9" section="2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:313.6</id>
					<description>an EJBObject</description>
					<location chapter="9" section="2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:313.7</id>
					<description>a collection of EJBObjects</description>
					<location chapter="9" section="2.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:314</id>
			<description>A finder method that is defined on the local home interface must return the following.</description>
			<location chapter="9" section="2.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:314.1</id>
					<description>an EJBLocalObject</description>
					<location chapter="9" section="2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:314.2</id>
					<description>an collection of EJBLocalObjects</description>
					<location chapter="9" section="2.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:315</id>
			<description>The character sequence must begin with a Java identifier start character and all other characters must be Java identifier part characters.</description>
			<location chapter="9" section="2.5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:316</id>
			<description>Reserved identifiers are case insensitive.</description>
			<location chapter="9" section="2.5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:317</id>
			<description>An identification variable always designates a reference to a single value.  It is declared in one of two ways:</description>
			<location chapter="9" section="2.5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:317.1</id>
					<description>as a range variable.
                        A range variable is declared using the abstract schema name of an entity bean.
					</description>
					<location chapter="9" section="2.5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:317.2</id>
					<description>an collection member identification variable.
                        A collection member variable is declared using a collection-valued path expression.
					</description>
					<location chapter="9" section="2.5.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:318</id>
			<description>An identification variable must not be a reserved identifier or have the same name as an abstract-schema-name or ejb-name.</description>
			<location chapter="9" section="2.5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:319</id>
			<description>Identification variables are case insensitive.</description>
			<location chapter="9" section="2.5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:320</id>
			<description>If the Bean Provider wants to select values by comparing more than one instance of an entity bean abstract schema type, more than one identification variable ranging over the entity bean's abstract schema type is needed in the FROM clause.</description>
			<location chapter="9" section="2.5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:321</id>
			<description>An identification variable of a collection member declaration is declared using a special operator, the reserved .  The functional expression designated by the IN operator takes a collection valued path expression as a parameter.</description>
			<location chapter="9" section="2.5.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:322</id>
			<description>A single_valued_cmr_field is designated by a cmr-field name in a one-to-one or many-to-one relationship.  This type of single_valued_cmr_path_expression evaluates is the abstract schema type of the related entity bean.</description>
			<location chapter="9" section="2.5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:323</id>
			<description> A collection_valued_cmr_field is designated by the name of a cmr-field in a one-to-many or many-to-many relationship.  The type of collection_valued_cmr_field is a collection of values of the abstract schema type of the related entity bean.</description>
			<location chapter="9" section="2.5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:325</id>
			<description>A path expression that ends in a cmp-field is terminal and cannot be further composed.</description>
			<location chapter="9" section="2.5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:326</id>
			<description>A path expression that leads to a cmr-field may be further composed.  Path expressions can be composed from other path expression if the original path expression evaluates to a single-valued type (NOT A COLLECTION) corresponding to a cmr-field.</description>
			<location chapter="9" section="2.5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:328</id>
			<description>The evaluation of a path expression terminating in a cmp-field results in the abstract schema type corresponding to the Java type designed by the cmp-field.</description>
			<location chapter="9" section="2.5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:329</id>
			<description>Path expression navigability is composed using "inner join" semantics.  That is, if the value of a non-terminal cmr-field in the path expression is null, the path is considered to have no value, and does not participate in the determination of the result.</description>
			<location chapter="9" section="2.5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:330</id>
			<description>A string literal is enclosed in single quotes.  A string literal that includes a single quote is represented by two single quotes. EJB-QL string literals are like Java String literals in that they use unicode character encoding. </description>
			<location chapter="9" section="2.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:331</id>
			<description>An exact numeric literal is a numeric value without a decimal point.  Exact numeric literals support numbers in the range of Java long. </description>
			<location chapter="9" section="2.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:332</id>
			<description>Although predefined reserved literals appear in upper case, they are case insensitive.</description>
			<location chapter="9" section="2.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:333</id>
			<description>An approximate numeric literal is a value in scientific notation.  Approximate numeric literal support numbers in the range of Java double. </description>
			<location chapter="9" section="2.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:334</id>
			<description>The boolean literals are TRUE and FALSE. </description>
			<location chapter="9" section="2.6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:335</id>
			<description>The value of a path expression is UNKNOWN if the path expression is composed by using
an identification variable  that designates an unknown value. 
			</description>
			<location chapter="9" section="2.6.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:336</id>
			<description>If an input parameter is NULL, arithmetic operations involving the input
		 parameter will return an UNKNOWN value 
			</description>
			<location chapter="9" section="2.6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:337</id>
			<description>If an input parameter is NULL, comparison operations involving the input parameter will return an UNKNOWN value. </description>
			<location chapter="9" section="2.6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:338</id>
			<description>Input parameters are numbered starting from 1</description>
			<location chapter="9" section="2.6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:339</id>
			<description>The number of distinct input parameters in an EJB QL query must not exceed the number of input parameters for the finder or select method.</description>
			<location chapter="9" section="2.6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:340</id>
			<description>It is not required that the EJB QL query use all of the input parameters for the finder or select method.</description>
			<location chapter="9" section="2.6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:341</id>
			<description>An input parameter evaluates to the abstract schema type of the corresponding parameter defined in the signature of the finder or select method with which the query is associated.  It is the responsible of the Container to map the input parameter to the appropriate abstract schema type value.</description>
			<location chapter="9" section="2.6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:342</id>
			<description>Note that if an input parameter is Null, comparison operations involving the input parameter will return an unknown value.</description>
			<location chapter="9" section="2.6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:343</id>
			<description>Note that if an input parameter is Null, arithmetic operations involving the input parameter will return an unknown value.</description>
			<location chapter="9" section="2.6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:344</id>
			<description>Arithmetic operations use numeric promotion.</description>
			<location chapter="9" section="2.6.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:345</id>
			<description>Conditional expressions are composed of other conditional expressions, comparison operators, logica operations, path expressions that evaluate to boolean values and boolean literals.</description>
			<location chapter="9" section="2.6.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:346</id>
			<description>Standard bracketing for ordering expression evaluation is supported.</description>
			<location chapter="9" section="2.6.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:347</id>
			<description>Arithmetic expressions can be used in comparison expressions.</description>
			<location chapter="9" section="2.6.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:348</id>
			<description>Operators and Operator Precedence.  The operators listed below in order of descreasing precedence.</description>
			<location chapter="9" section="2.6.6"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:348.1</id>
					<description>Navigation Operator</description>
					<location chapter="9" section="2.6.6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:348.2</id>
					<description>Arithmetic Operators (+,- unary - *,/ multiplication, division - +.- addition, substraction)</description>
					<location chapter="9" section="2.6.6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:348.3</id>
					<description>Comparison Operators</description>
					<location chapter="9" section="2.6.6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:348.4</id>
					<description>Logical Operators: NOT, AND, OR</description>
					<location chapter="9" section="2.6.6"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:349</id>
			<description>The syntax for the use of the comparison operator  in a conditional expression is as follows: arithmetic_expression [NOT] BETWEEN arithmetic-expr AND arithmetic-expr.</description>
			<location chapter="9" section="2.6.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:350</id>
			<description>The BETWEEN expression x BETWEEN y and z is semantically equivalent to: y less than = x AND x less than = z </description>
			<location chapter="9" section="2.6.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:351</id>
			<description>If the value of a cmp_path_expression in an IN or NOT IN expression is 
NULL or UNKNOWN, the value of the expression is UNKNOWN.
			</description>
			<location chapter="9" section="2.6.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:352</id>
			<description>The syntax for the use of the comparison operator IN in a conditional expression is as follows: cmp_path_expression [NOT] IN({literal | input parameter} [, {literal | input_parameter}]*).  The cmp-path_expression must have a string value.</description>
			<location chapter="9" section="2.6.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:353</id>
			<description>There must be at least one element in the comma separated list that defines the set of values for the IN expression.</description>
			<location chapter="9" section="2.6.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:354</id>
			<description>The expression o.country IN ('UK', 'US', 'France') is equivalent to the expression (o.country = 'UK') OR (o.country = 'US') OR (o.country = 'France')</description>
			<location chapter="9" section="2.6.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:355</id>
			<description>The expression o.country NOT IN ('UK', 'US', 'France') is equivalent to the expression NOT (o.country = 'UK') OR (o.country = 'US') OR (o.country = 'France')</description>
			<location chapter="9" section="2.6.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:356</id>
			<description>If the value of a single-valued path expression or pattern_value is NULL or UNKNOWN, the value of the
LIKE expression is UNKNOWN.
			</description>
			<location chapter="9" section="2.6.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:357</id>
			<description>If the escape_character is specified as a NULL, the value of the LIKE expression is iunknown.</description>
			<location chapter="9" section="2.6.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:358</id>
			<description>The syntax for the use of the comparison operator [NOT} LIKE in a conditional expression is as follows: cmp_path_expression [NOT] LIKE pattern-value [ESCAPE escape-character].   The cmp_path_expression must have a String value.  The pattern-value is a string
literal or a string-valued input parameter in which an underscore stands for any single character, a percent character stands for any sequence of characters and all other characters stand for themselves.  The  optional escape-character is a single character string literal or a character-valued input parameter (i.e., char or Character) and is used to escape the special meaning of the underscore and percent characters in pattern-value.
			</description>
			<location chapter="9" section="2.6.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:359</id>
			<description>The syntax for the use of the comparison operator IS [NOT] NULL in a conditional expression is as follows: single_valued_path_expression | input parameter IS [NOT] NULL. A null comparison expression tests whether or not the single valued path expression is a NULL value.</description>
			<location chapter="9" section="2.6.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:360</id>
			<description>The collection designated by the collection-valued path expression used in an empty collection comparison expression must not be used in the FROM clause for the declaration of an identification variable.</description>
			<location chapter="9" section="2.6.11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:361</id>
			<description>The syntax for the use of the comparison operator IS  [NOT] EMPTY in an empty_collection_comparison_expression is as follows: collection_valued_path_expression IS [NOT] EMPTY This expression tests whether or not the collection designated by the collection-valued
path expression is empty (that is, it has no elements).
			</description>
			<location chapter="9" section="2.6.11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:362</id>
			<description>If the value of the collection-valued path expression in an empty collection comparison expression is unknown, the value of the
empty comparison expression is unknown.
			</description>
			<location chapter="9" section="2.6.11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:363</id>
			<description>The syntax for the use of the comparison operator MEMBER OF in a collection_member_expression is as follows: {single_valued_navigation|identification_variable| input parameter} [NOT] MEMBER [OF] collection_valued_path_expression This expression tests whether the value designated using single_valued_navigation is a member of the collection designated by the collection-valued path expression.</description>
			<location chapter="9" section="2.6.12"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:363.1</id>
					<description>single_valued_cmr_path_expression</description>
					<location chapter="9" section="2.6.12"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:363.2</id>
					<description>identification variable</description>
					<location chapter="9" section="2.6.12"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:363.3</id>
					<description>input_parameter</description>
					<location chapter="9" section="2.6.12"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:364</id>
			<description>If the value of the collection-valued path expression or single-valued cmr path expression in the collection member expression is unknown, the value of the empty comparison expression is unknown.</description>
			<location chapter="9" section="2.6.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:365</id>
			<description>If the collection valued path expression in a collection member expression designates an empty collection, the value of the the MEMBER OF expression is FALSE and the value of the NOT MEMBER OF expression is TRUE.</description>
			<location chapter="9" section="2.6.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:366</id>
			<description>If the value of the single-valued cmr path expression in the collection member expression is unknown, the value of the empty comparison expression is unknown.  If the collection valued path expressiuon designates an empty collection, the value of the expression is FALSE.</description>
			<location chapter="9" section="2.6.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:367</id>
			<description>If the value of any argument to a functional expression is UNKNOWN, the value of the functional expression is UNKNOWN.</description>
			<location chapter="9" section="2.6.13"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:368</id>
			<description>Arguments to the arithmetic functions may correspond to the numeric Java object types as well as the primitive numeric types.</description>
			<location chapter="9" section="2.6.13"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:369</id>
			<description>EJB QL includes the following built-in functions which may be used in the WHERE clause of a query.</description>
			<location chapter="9" section="2.6.13"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:369.1</id>
					<description>String function: CONCAT CONCAT(String, String) returns a String</description>
					<location chapter="9" section="2.6.13"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:369.2</id>
					<description>String function: SUBSTRING SUBSTRING(String, start, length) returns a String</description>
					<location chapter="9" section="2.6.13"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:369.3</id>
					<description>String function: LOCATE(String, String [, start]) returns an int. 
					Containers and databases may not support the use of the optional, third argument
					of the LOCATE function.  Portable applications should therefore avoid use of this argument.
					</description>
					<location chapter="9" section="2.6.13"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:369.4</id>
					<description>String function: LENGTH(String) returns an int</description>
					<location chapter="9" section="2.6.13"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:369.5</id>
					<description>Arithmetic function: ABS(number) returns a number (int, float, double) of the same type as the argument to the function</description>
					<location chapter="9" section="2.6.13"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:369.6</id>
					<description>Arithmetic function: SQRT(double) returns a double</description>
					<location chapter="9" section="2.6.13"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:369.7</id>
					<description>Arithmetic function: MOD(int, int) returns an int</description>
					<location chapter="9" section="2.6.13"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:370</id>
			<description>In the case of a finder method, the SELECT clause is restricted to contain either a single range variable or a single valued path expression that evaluates to the abstract schema type of the entity bean for which the finder method is defined.</description>
			<location chapter="9" section="2.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:371</id>
			<description>If the query is specified for a method whose result type is java.util.Set, but does not specify DISTINCT, the container must interpret the query as if SELECT DISTINCT had been specified.</description>
			<location chapter="9" section="2.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:372</id>
			<description>The SELECT clause contains either a single range variable that ranges over an abstract schema type, a single valued path expression or an aggregate select expression.</description>
			<location chapter="9" section="2.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:373</id>
			<description>All standalone identification variables in the SELECT clause must be qualified by the OBJECT operator.</description>
			<location chapter="9" section="2.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:374</id>
			<description>The DISTINCT keyword is used to specify that duplicate values must be eliminated from the query result.</description>
			<location chapter="9" section="2.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:375</id>
			<description>If the result of an EJB QL query corresponds to a cmr-field or a cmp-field whose value is null, the container MUST include that null value in the result set that is returned by the finder or select method. (do finder, do select, do cmp-field, do cmr-field).</description>
			<location chapter="9" section="2.7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:376</id>
			<description>The Bean Provider can use IS NOT NULL constuct to eliminate the null from the result set of the query.</description>
			<location chapter="9" section="2.7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:377</id>
			<description>If the finder or select method is a single-object finder or select method and
		the result set of the query consists of a single null value, the container
		MUST return the null value as the result of the method.
			</description>
			<location chapter="9" section="2.7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:378</id>
			<description>If the result set of a query for a single-object finder or select contains more than one value (whether null, non-null, or combination), the container MUST throw the FinderException.</description>
			<location chapter="9" section="2.7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:379</id>
			<description>Java Primitive types cannot produce NULL values in the query results.  An EJB QL
		query that returns such a cmp-field type as a result type MUST NOT return a
		null value.  If the Bean Provider wishes to allow null values for cmp-fields,
		she should specify those cmp-fields to have the equivalent Java object types
		instead of primitive types.
			</description>
			<location chapter="9" section="2.7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:380</id>
			<description>The aggregate function AVG can be used in the SELECT clause of an EJB QL query.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:381</id>
			<description>The aggregate function MIN can be used in the SELECT clause of an EJB QL query.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:382</id>
			<description>The aggregate function MAX can be used in the SELECT clause of an EJB QL query.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:383</id>
			<description>The aggregate function SUM can be used in the SELECT clause of an EJB QL query.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:384</id>
			<description>The aggregate COUNT function can be used in the SELECT clause of an EJB QL query.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:385</id>
			<description>The path expression that is the argument to the aggregate function AVG MUST
		terminate in a cmp-field.
			</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:386</id>
			<description>The path expression that is the argument to the aggregate function MIN MUST
		terminate in a cmp-field.
			</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:387</id>
			<description>The path expression that is the argument to the aggregate function MAX MUST
		terminate in a cmp-field.
			</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:388</id>
			<description>The path expression that is the argument to the aggregate function SUM MUST
		terminate in a cmp-field.
			</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:389</id>
			<description>The path expression argument to COUNT may terminate in a cmp-field.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:390</id>
			<description>The path expression argument to COUNT may terminate in a cmr-field.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:391</id>
			<description>The argument to COUNT may be an identification variable.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:392</id>
			<description>The argument to an aggregate function may be preceded by the keyword DISTINCT to specify that duplicate values are to be eliminated before the aggregate function is applied.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:393</id>
			<description>Null values are eliminated before the aggregate function is applied regardless whether the keyword DISTINCT is specified.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:394</id>
			<description>If the argument is empty, AVG returns null.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:395</id>
			<description>If the argument is empty, SUM returns null.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:396</id>
			<description>If the argument is empty, MAX returns null.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:397</id>
			<description>If the argument is empty, MIN returns null.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:398</id>
			<description>If the argument is empty, COUNT returns 0.</description>
			<location chapter="9" section="2.7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:399</id>
			<description>When Order By clause is used, the SELECT clause of the query MUST be one of the following</description>
			<location chapter="9" section="2.8"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:399.1</id>
					<description>a single_valued_cmr_path_expression. 
					For a single_valued_cmr_path_expression, each orderby_item MUST be an orderable cmp-field of the entity
			bean abstract schema type value returned by the SELECT clause
					</description>
					<location chapter="9" section="2.8"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:399.2</id>
					<description>an Identification Variable.
								For an identification variable, each orderby_item MUST be an orderable cmp-field of the entity
			bean abstract schema type value returned by the SELECT clause
					</description>
					<location chapter="9" section="2.8"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:399.3</id>
					<description>a cmp_path_expression. 
						For cmp_path_expression, the orderby_item MUST evaluate to the same cmp-field of the same entity
			bean abstract schema type as the cmp_path_expression in the SELECT clause.
					</description>
					<location chapter="9" section="2.8"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:400</id>
			<description>If more than one orderby_item is specified, the left-to-right sequence of the
		orderby_item elements determines the precedence, whereby the leftmost
		orderby_item has the highest precedence.
			</description>
			<location chapter="9" section="2.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:401</id>
			<description>The keyword ASC specifies that ascending order is used.  DEFAULT.</description>
			<location chapter="9" section="2.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:402</id>
			<description>The keyword DESC specified that descending order is used.</description>
			<location chapter="9" section="2.8"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:403</id>
			<description>SQL rules for ordering of NULLS apply: that is, all null values MUST appear before all non-null values in the ordering or all null values MUST appear before all non-null values in the ordering, but it is not specified which.</description>
			<location chapter="9" section="2.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:404</id>
			<description>It is the container's responsibility to ensure that the ordering of the query result is preserved in the result of the finder or select method if the ORDER BY clause is used.</description>
			<location chapter="9" section="2.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:405</id>
			<description>If the result type of a query used for a select method is an abstract schema
		type corresponding to a cmp-field type (excluding queries whose SELECT clause used on of the aggregate
		functions AVG, COUNT, MAX, MIN, SUM), the result type of the method is as follows
			</description>
			<location chapter="9" section="2.9"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:405.1</id>
					<description>If the Java type of the cmp-field is an object type and the select method is
		a single-object select, the result of the select method is an instance of that
		object type.
					</description>
					<location chapter="9" section="2.9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:405.2</id>
					<description>If the Java type of the cmp-field is an object type and the select method is a multi-object select, the result is a collection of the instances of that type.</description>
					<location chapter="9" section="2.9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:405.3</id>
					<description>If the Java type of the cmp-field is a primitive type and the select method is a single-object select method, the result of the select method is that 
		primitive type.
					</description>
					<location chapter="9" section="2.9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:405.4</id>
					<description>If the Java type of the cmp-field is a primitive type and the select method
		is a multi-object select method, the result of the select method is a
		collection of instances of its corresponding wrappered type. 
					</description>
					<location chapter="9" section="2.9"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:406</id>
			<description>If the select method query is an aggregate query, the select method must be a single-object 
			select method.
			</description>
			<location chapter="9" section="2.9"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:406.1</id>
					<description>The result type of the select method must be a primitive type, a wrappered type,
					or an object type that is compatible with standard JDBC conversion mappings for the type
					of the cmp-field.</description>
					<location chapter="9" section="2.9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:406.2</id>
					<description>If the aggregate query uses the SUM, AVG, MAX, or MIN operator, and the
					result type of the select method is an object type and there are no values to which the
					aggregate function can be applied, the select method returns null.</description>
					<location chapter="9" section="2.9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:406.3</id>
					<description>If the aggregate query uses the SUM, AVG, MAX, or MIN operator, and the
					result type of the select method is a primitive type and there are no values to which the
					aggregate function can be applied, the container must throw the ObjectNotFoundException.</description>
					<location chapter="9" section="2.9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:406.4</id>
					<description>If the aggregate query uses the COUNT operator the result type of the select method should be an exact numeric type.</description>
					<location chapter="9" section="2.9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:406.5</id>
					<description>If there are no values to which the COUNT method can be applied, the result of the select method is 0.</description>
					<location chapter="9" section="2.9"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:408</id>
			<description>The result of a finder method may contain a null value if a cmp-field in the query result is NULL.</description>
			<location chapter="9" section="2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:409</id>
			<description>The result of a finder method may contain a null value if a cmr-field in the query result is NULL.</description>
			<location chapter="9" section="2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:410</id>
			<description>The result of a select method may contain a null value if a cmp-field in the query result is NULL.</description>
			<location chapter="9" section="2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:411</id>
			<description>The result of a select method may contain a null value if a cmr-field in the query result is NULL.</description>
			<location chapter="9" section="2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:412</id>
			<description>A finder method that is defined on the remote home interface must return the following.  The result type of a finder method defined on the remote home inteface of an entity bean is the entity bean's remote interface (or a collection of objects implementing the entity bean's remote inteface).</description>
			<location chapter="9" section="2.9"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:412.1</id>
					<description>an EJBObject</description>
					<location chapter="9" section="2.9"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:412.2</id>
					<description>an collection of EJBObjects</description>
					<location chapter="9" section="2.9"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:413</id>
			<description> If the EJB QL query is specified for a method whose return type is java.util.Collection, the collection of values returned by the Container may contain duplicates if DISTINCT is not specified in the SELECT clause.</description>
			<location chapter="9" section="2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:414</id>
			<description>If the result type of a query for a select method is an entity bean abstract schema type, the return values for the query method are instances of the entity bean's local interface or instances of the entity bean's remote interface, depending on whether the value of the result-type-mapping deployment descriptor element contained in the query element for the select method is Local or Remote.  The default value for result-type-mapping is Local.</description>
			<location chapter="9" section="2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:415</id>
			<description>Two NULL values are not considered to be equal, the comparison yield an UNKNOWN value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:416</id>
			<description>Comparison operations with a NULL value always yield an UNKNOWN value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:417</id>
			<description>Comparison operations with an UNKNOWN value always yield an UNKNOWN value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:418</id>
			<description>Arithmetic operators with a NULL value always yield an UNKNOWN value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:419</id>
			<description>Arithmetic operators with an UNKNOWN value always yield an UNKNOWN value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:420</id>
			<description>The IS NULL operators convert a NULL cmp-field into the respective TRUE or FALSE value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:421</id>
			<description>The IS NULL operators convert a NULL single-valued-cmr-field into the respective TRUE or FALSE value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:422</id>
			<description>The IS NOT NULL operators convert a NULL cmp-field into the respective TRUE or FALSE value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:423</id>
			<description>The IS NOT NULL operators convert a NULL single-valued-cmr-field into the respective TRUE or FALSE value.</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:424</id>
			<description>Boolean operators use three valued logic: Table 7:  Definition of the AND Operator</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:425</id>
			<description>Boolean operators use three valued logic: Table 8: Definition of the OR Operator</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:426</id>
			<description>Boolean operators use three valued logic: Table 9: Definition of the NOT Operator</description>
			<location chapter="9" section="2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:427</id>
			<description>Two entity objects of the same abstract schema type are  equal if and only if they have the same primary key value.</description>
			<location chapter="9" section="2.11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:428</id>
			<description>EJB-QL only permits like cmp-field types to be compared.</description>
			<location chapter="9" section="2.11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:429</id>
			<description>Boolean comparison is restricted to = and ?? .</description>
			<location chapter="9" section="2.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:430</id>
			<description>EJB-QL only permits like cmp-field types to be compared. There is one exception to this rule: it is valid to compare numeric values for which the rule of numeric promotion apply.  Conditional expression attempting to compare non-like type values are disallowedexcept for this numeric case.</description>
			<location chapter="9" section="2.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:431</id>
			<description>Instance Life Cycle</description>
			<location chapter="10" section="1.3"/>
			<comment>bb.entity.entitybeantest</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:432</id>
			<description>There are zero or more ejbCreateMETHOD methods, whose signatures match the signatures of the createMETHOD methods of the entity bean's home interface.</description>
			<location chapter="10" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:433</id>
			<description>An entity enterprise Bean has no ejbCreateMETHOD method and ejbPostCreateMETHOD methods if it does not define any create methods in its home interface.  Such an entity enterprise bean does not allows its clients to create new EJB Objects.  The enterprise Bean restricts the client to accessing its entities that were created through direct database inserts.</description>
			<location chapter="10" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:434</id>
			<description>The ejbCreateMETHOD method must return the primary key for the created entity object.</description>
			<location chapter="10" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:435</id>
			<description>An ejbCreateMETHOD method executes in the transaction context determined by the transation attribute of the matching createMETHOD method, as described in subsection 13.6.2.</description>
			<location chapter="10" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:436</id>
			<description>The entity object is available during the ejbPostCreateMETHOD method.</description>
			<location chapter="10" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:437</id>
			<description>An ejbPostCreateMETHOD method executes in the transaction context determined by the transation attribute of the matching createMETHOD method, as described in subsection 13.6.2.</description>
			<location chapter="10" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:438</id>
			<description>The [ejbRemove] method executes in the transaction context determined by the transaction attribute of the remove method that triggered the ejbRemove method.</description>
			<location chapter="10" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:439</id>
			<description>The container first invokes the ejbCreateMETHOD method whose signature matches the createMETHOD method invoked by the client.  The ejbCreateMETHOD method returns a primary key for the created entity object.  The container create an entity EJBObject reference and/or EJBLocalObject reference for the primary key.  The container then invokes a matching ejbPostCreateMETHOD method to allow the instance to fully initialize itself. Finally, the container returns the entity object's remote interface to the client if it is a remote client or the entity object's local interface to the client if the client is a local client.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:440</id>
			<description>The container invokes this [ejbActivate] method on an entity bean instance at activation
time.  The container must ensure that the primary key of the associated entity object is available to the instance if the instance invokes the getPrimaryKey(), getEJBLocalObject(), or getEJBObject() method on its EntityContext interface.  Note that this instance is not yet ready for delivery of a business method.  The container must invoke ejbLoad() method prior to a business method. 
			</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:441</id>
			<description>The container invokes this [ejbPassivate] method on an entity bean instance at passivation time.  The container must ensure that the primary key of the associated entity object is available to the instance if the instance invokes the getPrimaryKey(), getEJBLocalObject(), or getEJBObject() method on its EntityContext interface.  Note that if the instance state has been updated by a transaction, the container must first invoke the ejbStore() method before it invokes ejbPassivate() on it.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:442</id>
			<description>The container must invoke the ejbCreateMETHOD and ejbPostCreateMETHOD methods in the transaction context determined by the transaction attribute of the matching createMETHOD method as described in subsection 13.6.2.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:443</id>
			<description>The container must ensure that the instance's state is synchronized from the state in the database before invoking ejbRemove() method (i.e., if it is not synchronized, the container must invoke ejbLoad before it invokes ejbRemove).</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:444</id>
			<description>Before invoking the ejbFindMETHOD method, the container must first synchronize the state of any entity bean instances that are participating in the same transaction context as is used to execute the ejbFindMETHOD by invoking ejbStore method on those entity bean instances.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:445</id>
			<description>After the ejbFindMETHOD method completes, the instance remains in the pooled state.  The container may, but is not required to, immediately activate the objects that were located by the finder using the transition through the ejbActivate() method.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:446</id>
			<description>If the ejbFindMETHOD method is declared to return a single primary key, the container creates an entity EJBObject reference for the primary key and returns it to the client if the client is a remote client.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:447</id>
			<description>If the ejbFindMETHOD method is declared to return a collection of primary keys, the container creates a collection of entity EJBObject or EJBLocalObject references for the primary keys returned from the ejbFindMETHOD and returns the collection to the client.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:448</id>
			<description>The container must invoke the ejbHomeMETHOD method in the transaction context determined by the transaction attribute of the matching METHOD home method as described in subsection 13.6.2.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:449</id>
			<description>The container invokes the ejbTimeout method in the context of a transaction determined by its transaction attribute.</description>
			<location chapter="10" section="1.4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:450</id>
			<description>A container provides the entity bean instances with an EntityContext, which gives the entity bean instance access to the instance's context maintained by the Container.  The EntityContext interface has the following methods:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.1</id>
					<description>The getEJBObject method returns the entity bean's remote interface.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.2</id>
					<description>The getEJBHome method returns the entity bean's remote home interface.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.3</id>
					<description>The getEJBLocalObject method returns the entity bean's local interface.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.4</id>
					<description>The getEJBLocalHome method returns the entity bean's local home interface.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.5</id>
					<description>The getCallerPrincipal method returns the java.security.Principal that identifies the invoker of the bean instance's EJB object.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.6</id>
					<description>The isCallerInRole method tests if the entity bean instance's caller has a particular role.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.7</id>
					<description>The setRollbackOnly method allows the instance to mark the current transaction such that the only outcome of the transaction is a rollback.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.8</id>
					<description>The getRollbackOnly method allows the instance to test if the current transaction has been marked for rollback.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.9</id>
					<description>The getPrimaryKey method returns the entity bean's primary key.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.10</id>
					<description>The getTimerService method returns the jakarta.ejb.TimerService interface.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:450.11</id>
					<description>the getUserTransaction method returns the jakarta.transaction.UserTransaction interface.  Entity bean instances must not call this method.</description>
					<location chapter="10" section="1.7"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:451</id>
			<description>If an entity bean instance attempts to invoke a method of the EntityContext interface, and the access is not allowed in Table 10, the Container must throw the java.lang.IllegalStateException.</description>
			<location chapter="10" section="1.7"/>
			<comment>bb.entity.lrapitests</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:452</id>
			<description>If an entity bean instance attempts to invoke a method of the timer service or Timer methods and the access is not allowed in Table 10, the Container must throw the java.lang.IllegalStateException.</description>
			<location chapter="10" section="1.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:453</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbCreate:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>bb.session.test6</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>bb.entity.lrapitest - should throw IllegalStateException</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>bb.entity.lrapitest - should throw IllegalStateException</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:453.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:453.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.12</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.13</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:453.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:454</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbPostCreate:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:454.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:454.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:454.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:455</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbRemove:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:455.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:455.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:455.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:456</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbHome:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:456.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:456.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:456.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:457</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbActivate:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.4</id>
					<description>getRollbackOnly-  not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.6</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.10</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.11</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:457.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:458</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbPassivate:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.4</id>
					<description>getRollbackOnly-  not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.6</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.10</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.11</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:458.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:459</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbLoad:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:459.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:459.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:459.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:460</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbStore:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:460.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:460.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:460.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:461</id>
			<description>Operations allowed in the methods of a entity bean for business methods from the component interface:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:461.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:461.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:461.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:462</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbTimeout:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.3</id>
					<description>getCallerPrincipal - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.4</id>
					<description>getRollbackOnly-  allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.7</id>
					<description>getEJBObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.8</id>
					<description>getEJBLocalObject - allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:462.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:462.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.12</id>
					<description>getTimerService - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.13</id>
					<description>getPrimaryKey - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:462.14</id>
					<description>Timer Service methods - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:463</id>
			<description>Operations allowed in the methods of a entity bean for bean method setEntityContext:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.4</id>
					<description>getRollbackOnly-  not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.6</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:463.10</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:463.11</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.12</id>
					<description>getTimerService - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:463.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:464</id>
			<description>Operations allowed in the methods of a entity bean for bean method unsetEntityContext:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.4</id>
					<description>getRollbackOnly-  not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.5</id>
					<description>isCallerInRole - not allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.6</id>
					<description>setRollbackOnly - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.10</id>
					<description>Enterprise bean access - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.11</id>
					<description>Resource manager access - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.12</id>
					<description>getTimerService - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:464.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10464</id>
			<description>Operations allowed in the methods of a entity bean for bean method ejbFind:</description>
			<location chapter="10" section="1.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.1</id>
					<description>getEJBHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.2</id>
					<description>getEJBLocalHome - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment>stateful.cm.allowedmethodstest.test1</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.3</id>
					<description>getCallerPrincipal - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.4</id>
					<description>getRollbackOnly -  allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.5</id>
					<description>isCallerInRole - allowed </description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.6</id>
					<description>setRollbackOnly - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.7</id>
					<description>getEJBObject - not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.8</id>
					<description>getEJBLocalObject - not allowed</description>
					<location chapter="10" section="1.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.9</id>
					<description>JNDI access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:10464.10</id>
					<description>Enterprise bean access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:10464.11</id>
					<description>Resource manager access - allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.12</id>
					<description>getTimerService - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.13</id>
					<description>getPrimaryKey - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:10464.14</id>
					<description>Timer Service methods - not allowed</description>
					<location chapter="10" section="1.7"/>
					<comment/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:465</id>
			<description>The getRollbackOnly and setRollbackOnly methods of the EntityContext interface should be used only in the enterprise bean methods that execute in the context of a transactions.  The Container must throw the java.lang.IllegalStateException if the methods are invoked while the instance is not associated with a transaction.</description>
			<location chapter="10" section="1.7"/>
			<comment/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:466</id>
			<description>The container-invoked ejbLoad and ejbStore methods assist the instance with the management of the cached entity object's state.  The instance must handle the ejbLoad and ejbStore methods as follows:</description>
			<location chapter="10" section="1.8"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:466.1</id>
					<description>When the container invoked the ejbStore method on the instance, the instance must push all cached updates of the entity object's state to the underlying database.  The container invokes ejbStore method at the end of a transaction and may also invoke it at other times when the instance is in the ready state.</description>
					<location chapter="10" section="1.8"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:466.2</id>
					<description>When the container invokes the ejbLoad method on the instance, the instance must discard any cached entity object's state.  The instance may, but is not required to, refresh the cached state by reloading it from the underlying database.</description>
					<location chapter="10" section="1.8"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:467</id>
			<description>A finder method can have no arguments.</description>
			<location chapter="10" section="1.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:468</id>
			<description>For a single-object finder, the result type of a findMETHOD method defined in the entity bean's remote home interface is the entity bean's remote interface and the result type of the findMETHOD method defined in the entity bean's local home interface is the entity bean's local interface.</description>
			<location chapter="10" section="1.9.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:469</id>
			<description>For a single-object finder, the result type of the corresponding ejbFindMETHOD method defined in the entity's implementation class is the entity bean's primary key type.</description>
			<location chapter="10" section="1.9.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:470</id>
			<description>For a multi-object finder, the result type of a findMETHOD method defined in the entity bean's remote home interface is a collection of objects implementing the entity bean's remote interface and the result type of the findMETHOD method defined in the entity bean's local home interface is a collection of objects implementating the entity bean's local interface.</description>
			<location chapter="10" section="1.9.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:471</id>
			<description>For a multi-object finder, the result type of the corresponding ejbFindMETHOD method defined in the entity's implementation class is a collection of objects of the entity bean's primary key type.</description>
			<location chapter="10" section="1.9.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:472</id>
			<description>A client program must use the PortableRemoteObject.narrow() method to convert the objects contained in the collections returned by a finder method on the entity bean's remote home interface to the entity bean's remote interface type.</description>
			<location chapter="10" section="1.9.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:473</id>
			<description>If the entity bean is specified as non-reentrant in the deployment desriptor, the Container must reject an attempt to re-enter the instance via the entity bean's component interface while the instance is executing a business method.  If the attempt is made to reenter the instance through the remote interface, the container must throw the java.rmi.RemoteException to the caller.  If the attempt is made to reenter the instance through the local interface, the container must throw the jakarta.ejb.EJBException to the caller.  The container must allow the call if the Bean's deployment descriptor specifies that the entity bean is reentrant.</description>
			<location chapter="10" section="1.14"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:474</id>
			<description>The remote interface methods must not expose local interface types, local home types, timer handles, or the managed collection classes that are used for entity beans with container-managed persistence as arguments or results.</description>
			<location chapter="10" section="2.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:475</id>
			<description>The remote interface must always include the findByPrimaryKey method, which is always a single-object finder.  The method must declare the primary key class as the method argument.</description>
			<location chapter="10" section="2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:476</id>
			<description>The remote home interface methods must not expose local interface types, local home types, timer handles, or the managed collection classes that are used for entity beans with container-managed persistence as arguments or results.</description>
			<location chapter="10" section="2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:477</id>
			<description>The throws clause of any method on the entity bean's local home interface must not include the java.rmi.RemoteException.</description>
			<location chapter="10" section="2.11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:478</id>
			<description>The implementation of each createMETHOD method invokes a matching ejbCreate method followed by the matching ejbPostCreateMETHOD method, passing the createMETHOD parameters to these matching methods.</description>
			<location chapter="10" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:479</id>
			<description>The implementation of the remove() methods defined in the jakarta.ejb.EJBHome interface must activate an instance (if an instance is not in the ready state) and invoke the ejbRemove method on the instance.</description>
			<location chapter="10" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:480</id>
			<description>The implementation of each findMETHOD method invokes a matching ejbFindMETHOD method.  The implementation
of the findMETHOD method must create an entity object reference for the primary key returned from the ejbFindMETHOD and return the entity object reference to the client.
			</description>
			<location chapter="10" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:481</id>
			<description>If the ejbFindMETHOD method returns a collection of primary keys, the implementation of the findMETHOD method must create a collection of entity object references for the primary keys and return the collection to the client.</description>
			<location chapter="10" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:482</id>
			<description>Before invoking the ejbFindMETHOD method, the container must first synchronize the state of any entity bean instances that are participating in the same transaction context as the ejbFindMETHOD method by invoking ejbStore() method on those entity bean instances.</description>
			<location chapter="10" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:483</id>
			<description>The implementation of each METHOD home method invokes a matching ejbHomeMETHOD method (in which the first
characters of METHOD is uppercased in the name of the ejbHomeMETHOD method), passing the METHOD parameters to the matching method.
			</description>
			<location chapter="10" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:484</id>
			<description>The implementation of the remove() method (defined in the jakarta.ejb.EJBObject interface) must activate an
instance (if an instance is not in the ready state) and invoke the ejbRemove method on the instance.
			</description>
			<location chapter="10" section="3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:485</id>
			<description>The implementation of each remote business method must activate an instance (if an instance is not in the
ready state) and invoke the matching business method on the instance.
			</description>
			<location chapter="10" section="3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:486</id>
			<description>The implementation of each createMETHOD method invokes a matching ejbCreate method followed by the matching ejbPostCreateMETHOD method, passing the createMETHOD parameters to these matching methods.</description>
			<location chapter="10" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:487</id>
			<description>The implementation of the remove() methods defined in the jakarta.ejb.EJBLocalHome interface must activate an instance (if an instance is not in the ready state) and invoke the ejbRemove method on the instance.</description>
			<location chapter="10" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:488</id>
			<description>The implementation of each findMETHOD method invokes a matching ejbFindMETHOD method.  The implementation of the findMETHOD method must create an entity object (EJBLocalObject) reference for the primary key returned from the ejbFindMETHOD and return the entity object reference to the client.</description>
			<location chapter="10" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:489</id>
			<description>If the ejbFindMETHOD method returns a collection of primary keys, the implementation of the findMETHOD method must create a collection of entity object references for the primary keys and return the collection to the client.</description>
			<location chapter="10" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:490</id>
			<description>Before invoking the ejbFindMETHOD method, the container must first synchronize the state of any entity bean instances that are participating in the same transaction context as the ejbFindMETHOD method by invoking ejbStore() method on those entity bean instances.</description>
			<location chapter="10" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:491</id>
			<description>The implementation of each METHOD home method invokes a matching ejbHomeMETHOD method (in which the first characters of METHOD is uppercased in the name of the ejbHomeMETHOD method), passing the METHOD parameters to the matching method.</description>
			<location chapter="10" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:492</id>
			<description>The implementation of the remove() method (defined in the jakarta.ejb.EJBLocalObject interface) must activate an instance (if an instance is not in the ready state) and invoke the ejbRemove method on the instance.</description>
			<location chapter="10" section="3.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:493</id>
			<description>The implementation of each remote business method must activate an instance (if an instance is not in the ready state) and invoke the matching business method on the instance.</description>
			<location chapter="10" section="3.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:494</id>
			<description>The following requirements ensure that an EJB 1.1 entity bean with container-managed persistence can be deployed in any compliant container.</description>
			<location chapter="11" section="1.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:494.1</id>
					<description>The Bean Provider must ensure that the Java types assigned to the container-managed fields are restricted to the following:  Java primitive types, Java serializable types, and references of enterprise beans' remote or remote home interfaces.</description>
					<location chapter="11" section="1.1"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:494.2</id>
					<description>The Container Provider may, but is not required to, use Java Serialization to store the container-managed fields in the dataase.  If the container chooses a different approach, the effect should be equivalent to that of Java Serialization.  The Container must also be capable of persisting references to enterprise bean's remote and remote home interfaces.</description>
					<location chapter="11" section="1.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:495</id>
			<description>The container must ensure that the values of the container-managed fields are set to the Java language defaults(0 for integer, null for pointers) prior to invoking an ejbCreate() method on an instance.</description>
			<location chapter="11" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:496</id>
			<description>The ejbCreate methods must be defined to return the primary key class type.  The implementation of the ejbCreate() methjods should be coded to return a null.  The return value is ignored by the container.</description>
			<location chapter="11" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:497</id>
			<description>The container must establish the primary key before it invokes ejbPostCreate() method.</description>
			<location chapter="11" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:498</id>
			<description>The container may create the representation of the entity in the database immediately after ejbCreate() returns, or it can defer it to a later time.</description>
			<location chapter="11" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:499</id>
			<description>The container must invoke ejbCreate, perform the database insert operation, and invoke ejbPostCreate in the transaction context determined by the transaction attribute of the matching create() method, as described in subsection 13.6.2.</description>
			<location chapter="11" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:500</id>
			<description>The Container throws the DuplicateKeyException if  the newly created entity object would have the same  primary key as one of the existing entity objects  within the same home.</description>
			<location chapter="11" section="1.2"/>
			<comment>bb.entity.cmp.complexpktest.test2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:501</id>
			<description>When the container needs to synchronize the state of an enterprise bean instance with the entity object's state in the database, the container reads the entity object's state from the database into the container-managed fields and then it invokes ejbLoad() method on the instance.</description>
			<location chapter="11" section="1.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:502</id>
			<description>When the container needs to synchronize the state of an entity object in the database with the state of the enterprise bean instance, the container first calls the ejbStore() method on the instance, and then it extracts the container-managed fields and writes them to the database.</description>
			<location chapter="11" section="1.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:503</id>
			<description>A finder method can have no arguments.</description>
			<location chapter="11" section="1.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:504</id>
			<description>There are two ways to specify a primary key class for an entity bean with container-managed persistence:</description>
			<location chapter="11" section="1.9"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:504.1</id>
					<description> Primary key that maps to a single field in the entity  bean class</description>
					<location chapter="11" section="1.9"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:504.2</id>
					<description>Primary key that map to multiple fields in the entity bean class.</description>
					<location chapter="11" section="1.9"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:505</id>
			<description>In this special case, the type of the argument of the findByPrimaryKey method must be declared as java.lang.Object.  The Bean Provider must specify the primary key class in the deployment descriptor as the type java.lang.Object. In this case, the Container must generate the primary key value when the entity bean instance is created (and before ejbPostCreate is invoked on the instance).</description>
			<location chapter="11" section="1.9.3"/>
			<comment>bb.entity.cmp.unknownpktest.test1 and test2</comment>
		</assertion>
	
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:535</id>
			<description>A Session Bean or a Message-driven Bean can be designed with bean-managed transaction 
				demarcation or with container-managed transaction demarcation. (But it cannot be both at the 
				same time.)
			</description>
			<location chapter="13" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:536</id>
			<description>An Entity Bean must always be designed with container-managed transaction demarcation.</description>
			<location chapter="13" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:537</id>
			<description>An enterprise bean instance can access resource managers in a transaction only in the 
				enterprise bean's methods in which there is a transaction context available. 
			</description>
			<location chapter="13" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:538</id>
			<description>An entity bean with container-managed persistence can access its persistent state in a 
				transaction only in the enterprise bean's methods in which there is a transaction context 
				available.
			</description>
			<location chapter="13" section="3.1"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:539</id>
			<description>If an enterprise bean needs to access a resource manager that does not support an external 
				transaction coordinator, the Bean Provider should design the enterprise bean with 
				container-managed transaction demarcation and assign the NotSupported transaction attribute to 
				all the bean's methods.
			</description>
			<location chapter="13" section="3.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:540</id>
			<description>If an enterprise bean uses multiple resource managers, the Bean Provider may specify the 
				same or different isolation level for each resource manager.
			</description>
			<location chapter="13" section="3.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:540.1</id>
					<description>For session beans and message-driven beans with bean-managed transaction demarcation, the
                				Bean Provider can specify the desirable isolation level programmatically in the enterprise
                				bean's methods, using the resource-manager specific API.
					</description>
					<location chapter="13" section="3.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:541</id>
			<description>The enterprise bean with bean-managed transaction demarcation must be a Session bean or a 
				Message-driven bean.
			</description>
			<location chapter="13" section="3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:542</id>
			<description>An instance that starts a transaction must complete the transaction before it starts a new 
				transaction.
			</description>
			<location chapter="13" section="3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:543</id>
			<description>The Bean Provider for beans with bean-managed transaction demarcation provides that:</description>
			<location chapter="13" section="3.3"/>
			<comment>/session*/stateful/bm/*GlobalSingle/Client.java#*, /session/stateless/bm/Tx_Multi/Client.java#*</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>543.1</id>
					<description>The jakarta.transaction.UserTransaction interface is used to demarcate transactions.</description>
					<location chapter="13" section="3.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:543.2</id>
					<description>All updates to the resource managers between the UserTransaction.begin() and 
						UserTransaction.commit() methods are performed in a transaction.
					</description>
					<location chapter="13" section="3.3"/>
					<comment>/session*/stateful/bm/*GlobalSingle/Client.java#*, /session/stateless/bm/Tx_Multi/Client.java#*</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:543.3</id>
					<description>While an instance is in a transaction, the instance must not attempt to use the 
						resource-manager specific transaction demarcation API.
					</description>
					<location chapter="13" section="3.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:544</id>
			<description>A stateful Session Bean instance may, but is not required to, commit a started transaction 
				before a business method returns. 
			</description>
			<location chapter="13" section="3.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:544.1</id>
					<description>If a transaction has not been completed by the end of a business method, the Container
						retains the association between the transaction and the instance across multiple client calls 
						until the instance eventually completes the transaction.
					</description>
					<location chapter="13" section="3.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:545</id>
			<description>A stateless session bean instance must commit a transaction before a business method or 
				ejbTimeout method returns.
			</description>
			<location chapter="13" section="3.3"/>
			<comment>/session*/stateless/*/*Single/Client.java#*</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:546</id>
			<description>A message-driven bean instance must commit a transaction before its message listener methods 
				or ejbTimeout method return.
			</description>
			<location chapter="13" section="3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:547</id>
			<description>An enterprise bean with bean-managed transaction demarcation must not use the 
				getRollbackOnly() and setRollbackOnly() methods of the EJBContext interface.
			</description>
			<location chapter="13" section="3.3.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:547.1</id>
					<description>An enterprise bean with bean-managed transaction demarcation can obtain the status of a
						transaction by using the getStatus() method of the jakarta.transaction.UserTransaction 
						interface.
					</description>
					<location chapter="13" section="3.3.1"/>
					<comment>Most bm tests</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:547.2</id>
					<description>An enterprise bean with bean-managed transaction demarcation can rollback a transaction
						using the rollback() method of the jakarta.transaction.UserTransaction interface.
					</description>
					<location chapter="13" section="3.3.1"/>
					<comment>Most bm tests</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:548</id>
			<description>The enterprise bean's business methods, message listener methods, or ejbTimeout method must 
				not use any resource-manager specific transaction management methods that would interfere with 
				the Container's demarcation of transaction boundaries.
			</description>
			<location chapter="13" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:549</id>
			<description>When using container-managed transaction demarcation, the enterprise bean's business 
				methods, message listener methods, or ejbTimeout method must not attempt to obtain or use the 
				jakarta.transaction.UserTransaction interface.
			</description>
			<location chapter="13" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:550</id>
			<description>A stateful Session Bean with container-managed transaction demarcation can optionally 
				implement the jakarta.ejb.SessionSynchronization interface.
			</description>
			<location chapter="13" section="3.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:551</id>
			<description>An enterprise bean with container-managed transaction demarcation can use the 
				setRollbackOnly() method of its EJBContext object to mark the transaction such that the 
				transaction can never commit.
			</description>
			<location chapter="13" section="3.4.2"/>
			<comment>This is probably duplicated in 13.6.2.8</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:552</id>
			<description>An enterprise bean with container-managed transaction demarcation can use the 
				getRollbackOnly() method of its EJBContext object to test if the current transaction has 
				been marked for rollback.
			</description>
			<location chapter="13" section="3.4.3"/>
			<comment>This is probably duplicated in 13.6.2.9</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:553</id>
			<description>The Bean Provider of a Session Bean or a Message-driven Bean must use the transactiontype
				element to declare whether the Session Bean or Message-driven Bean is of the bean-managed or 
				container-managed transaction demarcation type.
			</description>
			<location chapter="13" section="3.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:554</id>
			<description>The Bean Provider of an enterprise bean with container-managed transaction demarcation may 
				optionally specify the transaction attributes for the enterprise bean's methods.
			</description>
			<location chapter="13" section="3.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:555</id>
			<description>The Application Assembler must not define transaction attributes for an enterprise
				bean with bean-managed transaction demarcation.
			</description>
			<location chapter="13" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:556</id>
			<description>For a session bean, the transaction attributes must be specified for the methods defined 
				in the bean's component interface and all the direct and indirect superinterfaces of the 
				component interface, excluding the methods of the jakarta.ejb.EJBObject or the  
				jakarta.ejb.EJBLocalObject interface, and for the ejbTimeout method.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:557</id>
			<description>Transaction attributes must not be specified for the methods of a session bean's home 
				interface.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:558</id>
			<description>For a stateless session bean with a web service endpoint interface, the transaction 
				attributes must be specified for the methods defined in the bean's web service endpoint 
				interface.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:559</id>
			<description>For an entity bean, the transaction attributes must be specified for the methods defined 
				in the bean's component interface and all the direct and indirect superinterfaces of the 
				component interface, excluding the getEJBHome, getEJBLocalHome, getHandle, getPrimaryKey,
				and isIdentical methods; for the methods defined in the bean's home interface and all the 
				direct and indirect superinterfaces of the home interface, excluding the getEJBMetaData and 
				getHomeHandle methods specific to the remote home interface; and for the ejbTimeout method.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:560</id>
			<description>For a message-driven bean, the transaction attribute must be specified for the bean's 
				message listener interface and for the ejbTimeout method.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:561</id>
			<description>For a given enterprise bean, the Application Assembler 
				must either specify a value of the transaction attribute for all the methods for which a 
				transaction attribute must be specified, or the Assembler must specify none. 
			</description>
			<location chapter="13" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:561.1</id>
					<description>If the transaction attributes are not specified for the methods of an enterprise bean, the 
						Deployer will have to specify them.
					</description>
					<location chapter="13" section="4.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:562</id>
			<description>For a message-driven bean's listener interface, only the Required and NotSupported 
				transaction attributes may be used.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:563</id>
			<description>For a stateless session bean's web service endpoint interface, only the Required, 
	`			RequiresNew, Supports, Never, and NotSupported attributes may be used.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:564</id>
			<description>Containers may optionally support the use of the NotSupported, Supports, and Never 
				transaction attributes for the methods of entity beans with container-managed persistence.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:565</id>
			<description>For an enterprise bean's ejbTimeout method only the RequiresNew and
				NotSupported transaction attributes may be used.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:566</id>
			<description>If an enterprise bean implements the jakarta.ejb.SessionSynchronization interface, the
				Application Assembler can specify only the following values for the transaction attributes 
				of the bean's methods: Required, RequiresNew, or Mandatory.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:567</id>
			<description>The container-transaction element specifies that all the listed methods are assigned
				the specified transaction attribute value.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:568</id>
			<description>There are three legal styles of composing the method element.</description>
			<location chapter="13" section="4.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:568.1</id>
					<description>Style 1: 
						&lt;method>
						&lt;ejb-name> EJBNAME&lt;/ejb-name>
						&lt;method-name>*&lt;/method-name>
						&lt;/method>
						This style  is used to specify a default value of the transaction attribute for 
						the methods for which there is no Style 2 or Style 3 element specified.
					</description>
					<location chapter="13" section="4.1"/>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:568.1.1</id>
							<description>There must be at most one container-transaction element that uses the Style 1 method 
								element for a given enterprise bean.
							</description>
							<location chapter="13" section="4.1"/>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:568.2</id>
					<description>Style 2:
						&lt;method>
						&lt;ejb-name> EJBNAME&lt;/ejb-name>
						&lt;method-name> METHOD&lt;/method-name>
						&lt;/method>
						This style is used for referring to a specified method of a home, component, or web service 
						endpoint interface of the specified enterprise bean.
					</description>
					<location chapter="13" section="4.1"/>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:568.2.1</id>
							<description>If there are multiple methods with the same overloaded name, this style refers to all the 
								methods with the same name.
							</description>
							<location chapter="13" section="4.1"/>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:568.2.2</id>
							<description>There must be at most one container-transaction element that uses the Style 2 method 
								element for a given method name.
							</description>
							<location chapter="13" section="4.1"/>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:568.2.3</id>
							<description>If there is also a container-transaction element that uses Style 1 element for the same 
								bean, the value specified by the Style 2 element takes precedence.
							</description>
							<location chapter="13" section="4.1"/>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:568.3</id>
					<description>Style 3: 
						&lt;method>
						&lt;ejb-name> EJBNAME&lt;/ejb-name>
						&lt;method-name> METHOD&lt;/method-name>
						&lt;method-params>
						&lt;method-param> PARAMETER_1&lt;/method-param>
						...
						&lt;method-param> PARAMETER_N&lt;/method-param>
						&lt;/method-params>
						&lt;/method> 
					</description>
					<location chapter="13" section="4.1"/>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:568.3.1</id>
							<description>If there is also a container-transaction element that uses the Style 2 element for
								the method name, or the Style 1 element for the bean, the value specified by the Style 3 
								element takes precedence.
							</description>
							<location chapter="13" section="4.1"/>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:569</id>
			<description>The optional method-intf element can be used to differentiate between methods with the same
				name and signature that are multiply defined across the component, home, and/or web service 
				endpoint interfaces.
			</description>
			<location chapter="13" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:570</id>
			<description>The Deployer is responsible for ensuring that the methods of the deployed enterprise beans 
				with container-managed transaction demarcation have been assigned a transaction attribute.
			</description>
			<location chapter="13" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:571</id>
			<description>When a client invokes a business method on a bean with bean-managed transaction 
				demarcation via one of the bean's client view interfaces, the Container suspends any 
				transaction that may be associated with the client request.
			</description>
			<location chapter="13" section="6.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:571.1</id>
					<description>If there is a transaction associated with the instance the Container associates the 
						method execution with this transaction.
					</description>
					<location chapter="13" section="6.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:572</id>
			<description> The Container must make the jakarta.transaction.UserTransaction interface available to
				the enterprise bean's business method or message listener methods via the jakarta.ejb.EJBContext
				interface and under the environment entry java:comp/UserTransaction.
			</description>
			<location chapter="13" section="6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:573</id>
			<description>In the case of a stateful session bean, it is possible that the business method that 
				started a transaction completes without committing or rolling back the transaction. In such a 
				case, the Container must retain the association between the transaction and the instance across 
				multiple client calls until the instance commits or rolls back the transaction.
			</description>
			<location chapter="13" section="6.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:573.1</id>
					<description>When the client invokes the next business method, the Container must invoke the business 
						method in this transaction context.
					</description>
					<location chapter="13" section="6.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:574</id>
			<description>If a stateless session bean instance starts a transaction in a business method, it must 
				commit the transaction before the business method returns.
			</description>
			<location chapter="13" section="6.1"/>
			<comment>/session*/stateless/*/*Single/Client.java#test1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10574</id>
			<description>The Container must detect the case in which a transaction was started, but not completed,
				 		in the business method, and handle it as follows:
						1)  Log this as an application error to alert the system administrator.
						2)  Roll back the started transaction.
						3)  Discard the instance of the session bean.
						4)  Throw the java.rmi.RemoteException to the client if the client is a remote client, or
						    throw the jakarta.ejb.EJBException if the client is a local client.
			</description>
			<location chapter="13" section="6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:575</id>
			<description>If a message-driven bean instance starts a transaction in a message listener method, 
				it must commit the transaction before the message listener method returns.
			</description>
			<location chapter="13" section="6.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:575.1</id>
					<description>The Container must detect the case in which a transaction was started, but not completed,
						in a message listener method, and handle it as follows:
						1)  Log this as an application error to alert the system administrator.
						2)  Roll back the started transaction.
						3)  Discard the instance of the message-driven bean.
					</description>
					<location chapter="13" section="6.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:576</id>
			<description>For an instance with bean-managed transaction where there is no transaction 
				currently associated with the instance, the Container will associate no transaction
				with the method, regardless of whether there is a transaction associated with 
				the client request.
			</description>
			<location chapter="13" section="6.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:576.1</id>
					<description>If the client request is not associated with a transaction the Container 
						invokes the instance with an unspecified transaction context.
					</description>
					<location chapter="13" section="6.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:576.2</id>
					<description>If the client request is associated with a transaction the Container suspends 
						the client's transaction association and invokes the instance with an unspecified 
						transaction context. The container resumes the client's transaction association 
						when the method completes.
					</description>
					<location chapter="13" section="6.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:577</id>
			<description>For an instance with bean-managed transaction where there is a transaction 
				currently associated with the instance, the Container will associate the transaction
				with the method, regardless of whether there is a transaction associated with 
				the client request.
			</description>
			<location chapter="13" section="6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:578</id>
			<description>The Container must allow the enterprise bean instance to serially perform several 
				transactions in a method.
			</description>
			<location chapter="13" section="6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:579</id>
			<description>When an instance attempts to start a transaction using the begin() method of the 
				jakarta.transaction.UserTransaction interface while the instance has not committed the previous 
				transaction, the Container must throw the jakarta.transaction.NotSupportedException in the
				begin() method.
			</description>
			<location chapter="13" section="6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:580</id>
			<description>The Container must throw the java.lang.IllegalStateException if an instance of a bean
				with bean-managed transaction demarcation attempts to invoke the setRollbackOnly() or
				getRollbackOnly() method of the jakarta.ejb.EJBContext interface.
			</description>
			<location chapter="13" section="6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:581</id>
			<description>The Container is responsible for providing the transaction demarcation for the session and 
				entity beans that the Bean Provider declared with container-managed transaction demarcation.
				For these enterprise beans, the Container must demarcate transactions as specified in the 
				deployment descriptor by the Application Assembler.
			</description>
			<location chapter="13" section="6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:582</id>
			<description>The Container invokes an enterprise Bean method whose transaction attribute is set to 
				NotSupported with an unspecified transaction context.
			</description>
			<location chapter="13" section="6.2.1"/>
			<comment>/session*/stateful/cm/TxNS_Single/Client.java#test, /entityLocal/bmp/bm/Tx_Single/Client.java#test5</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:582.1</id>
					<description>If a client calls with a transaction context, the container suspends the association of 
						the transaction context with the current thread before invoking the enterprise bean's 
						business method.
					</description>
					<location chapter="13" section="6.2.1"/>
					<comment>/session*/stateful/bm/TxNS_GlobalSingle/Client.java#test, /entityLocal/bmp/bm/Tx_Single/Client.java#test5</comment>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
							<id>EJB:SPEC:582.1.1</id>
							<description>The container resumes the suspended association when the business method has completed.</description>
							<location chapter="13" section="6.2.1"/>
							<comment>/session*/stateful/bm/TxNS_GlobalSingle/Client.java#test1</comment>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
							<id>EJB:SPEC:582.1.2</id>
							<description>The suspended transaction context of the client is not passed to the resource managers 
								or other enterprise Bean objects that are invoked from the business method.
							</description>
							<location chapter="13" section="6.2.1"/>
							<comment>/session*/stateful/bm/TxNS_GlobalSingle/Client.java#test1, /entityLocal/bmp/bm/Tx_Single/Client.java#test5</comment>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:582.2</id>
					<description>If the business method invokes other enterprise beans, the Container passes no transaction 
						context with the invocation.
					</description>
					<location chapter="13" section="6.2.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:583</id>
			<description>The Container must invoke an enterprise Bean method whose transaction attribute is set to Required as follows:</description>
			<location chapter="13" section="6.2.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:583.1</id>
					<description>The method must be invoked with a valid transaction context.</description>
					<location chapter="13" section="6.2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:583.2</id>
					<description>If a client invokes the enterprise Bean's method while the client is associated with a 
						transaction context, the container invokes the enterprise Bean's method in the client's 
						transaction context.
					</description>
					<location chapter="13" section="6.2.2"/>
					<comment>/session*/stateful/bm/TxR_GlobalSingle/Client.java#*, /session/*/bm/Tx_Multi/Client.java#*, /entity*/*/bm/Tx_Single/Client.java, /entity/*/bm/Tx_Multi/Client.java, /entity/*/bm/TxR_Diamond/Client.java</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:583.3</id>
					<description>If the client invokes the enterprise bean's method while the client is not associated 
						with a transaction context, then: 
					</description>
					<location chapter="13" section="6.2.2"/>
					<comment>/session*/stateful/cm/TxR_Single/Client.java#test1, /entity*/*/cm/Tx_Single/Client.java#test1-2, /entity/*/cm/Tx_Multi/Client.java#test1, /entity/*/cm/TxR_Diamond/Client.java#test1</comment>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:583.3.1</id>
							<description> The container automatically starts a new transaction before 
						delegating a method call to the enterprise Bean business method.
                                                      
							</description>
							<location chapter="13" section="6.2.2"/>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:583.3.2</id>
							<description>The Container automatically enlists all the resource managers
								accessed by the business method with the transaction.
							</description>
							<location chapter="13" section="6.2.2"/>
							<comment>/session*/stateful/cm/TxR_Single/Client.java#test1, /entity*/*/cm/Tx_Single/Client.java#test1-2, /entity/*/cm/Tx_Multi/Client.java#test1, /entity/*/cm/TxR_Diamond/Client.java#test1</comment>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:583.3.3</id>
							<description>If the business method invokes other enterprise
beans, the Container passes the 
								transaction context with the invocation.
							</description>
							<location chapter="13" section="6.2.2"/>
							<comment>/session*/stateful/cm/TxR_Single/Client.java#test1, /entity*/bmp/cm/Tx_Single/Client.java#test1-2, /entity/bmp/cm/Tx_Multi/Client.java#test1, /entity/bmp/cm/TxR_Diamond/Client.java#test1</comment>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:583.3.4</id>
							<description>The Container attempts to commit the transaction when the business method has completed.  The container performs the commit protocol before the method result is sent 
								to the client.
							</description>
							<location chapter="13" section="6.2.2"/>
							<comment>/session*/stateful/cm/TxR_Single/Client.java#test1, /entity*/*/cm/Tx_Single/Client.java#test1-2, /entity/*/cm/Tx_Multi/Client.java#test1, /entity/*/cm/TxR_Diamond/Client.java#test1</comment>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:584</id>
			<description>If the Container invokes an enterprise Bean method whose transaction attribute is set to 
				Supports, and the client calls with a transaction context, the Container performs the same 
				steps as described in the Required case.
			</description>
			<location chapter="13" section="6.2.3"/>
			<comment>/session/stateful/bm/TxS_GlobalSingle/Client.java</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:585</id>
			<description>If the Container invokes an enterprise Bean method whose transaction attribute is set to
				Supports, and the client calls without a transaction context, the Container performs the same 
				steps as described in the NotSupported case.
			</description>
			<location chapter="13" section="6.2.3"/>
			<comment>/session/stateful/cm/TxS_Single/Client.java, ./entityLocal/bmp/cm/Tx_Single/Client.java</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:586</id>
			<description>The Container must invoke an enterprise Bean method whose transaction attribute is set to RequiresNew as follows:</description>
			<location chapter="13" section="6.2.4"/>
			<comment>./session*/stateful/bm/TxRN_GlobalSingle/Client.java, ./entity/bmp/bm/Tx_Single/Client.java, ./entity/bmp/bm/Tx_Multi/Client.java, ./entity/bmp/bm/TxRN_Diamond/Client.java</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:586.1</id>
					<description>The method must be invoked with a new  transaction context.</description>
					<location chapter="13" section="6.2.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:586.2</id>
					<description>If the client invokes the enterprise Bean's method while the client is not associated 
						with a transaction context, then: 
					</description>
					<location chapter="13" section="6.2.4"/>
					<comment>./session*/stateful/cm/TxRN_Single/Client.java, /entity*/*/cm/TxRN_Diamond/Client.java</comment>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:586.2.1</id>
							<description>The Container automatically starts a new transaction before 
						delegating a method call to the enterprise Bean business method.
                                                      
							</description>
							<location chapter="13" section="6.2.4"/>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:586.2.2</id>
							<description>The Container automatically enlists all the resource managers accessed by the business 
								method with the transaction.
							</description>
							<location chapter="13" section="6.2.4"/>
							<comment>./session*/stateful/cm/TxRN_Single/Client.java, /entity*/*/cm/TxRN_Diamond/Client.java</comment>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:586.2.3</id>
							<description>If the business method invokes other enterprise beans, the Container passes the 
								transaction context with the invocation.
							</description>
							<location chapter="13" section="6.2.4"/>
							<comment>./session*/stateful/cm/TxRN_Single/Client.java, /entity*/*/cm/TxRN_Diamond/Client.java</comment>
						</assertion>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:586.2.4</id>
							<description>The Container attempts to commit the transaction when the business method has completed.
								The container performs the commit protocol before the method result is sent to the client.
							</description>
							<location chapter="13" section="6.2.4"/>
							<comment>./session*/stateful/cm/TxRN_Single/Client.java, /entity*/*/cm/TxRN_Diamond/Client.java</comment>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:586.3</id>
					<description>If a client calls with a transaction context, the container suspends the association of 
						the transaction context with the current thread before starting the new transaction and 
						invoking the business method.
					</description>
					<location chapter="13" section="6.2.4"/>
					<comment>./session*/stateful/bm/TxRN_GlobalSingle/Client.java, ./entity/bmp/bm/Tx_Single/Client.java, ./entity/bmp/bm/Tx_Multi/Client.java, ./entity/bmp/bm/TxRN_Diamond/Client.java</comment>
					<sub-assertions>
						<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
							<id>EJB:SPEC:586.3.1</id>
							<description>The container resumes the suspended transaction association after the business method 
								and the new transaction have been completed.
							</description>
							<location chapter="13" section="6.2.4"/>
							<comment>./session*/stateful/bm/TxRN_GlobalSingle/Client.java, ./entity/bmp/bm/Tx_Single/Client.java, ./entity/bmp/bm/Tx_Multi/Client.java, ./entity/bmp/bm/TxRN_Diamond/Client.java</comment>
						</assertion>
					</sub-assertions>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:587</id>
			<description>The Container invokes an enterprise Bean method whose transaction attribute is set to Mandatory as follows:</description>
			<location chapter="13" section="6.2.5"/>
			<comment>see subassertions for tests</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:587.1</id>
					<description>The method must be invoked in a transaction context. The client is required to call with a transaction context.</description>
					<location chapter="13" section="6.2.5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:587.2</id>
					<description>If the client calls with a transaction context, the Container performs the same steps as
						described in the Required case.
					</description>
					<location chapter="13" section="6.2.5"/>
					<comment>/session*/stateful/bm/TxM_GlobalSingle/Client.java</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:587.3</id>
					<description>If the client calls without a transaction context, the Container throws the 
						jakarta.transaction.TransactionRequiredException exception if the client is a remote client, or
						the jakarta.ejb.TransactionRequiredLocalException if the client is a local client.
					</description>
					<location chapter="13" section="6.2.5"/>
					<comment>/session*/*/cm/TxM_Single/Client.java, entity*/*/cm/Tx_Single/Client.java, entity*/*/cm/Tx_Multi/Client.java</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:588</id>
			<description>The Container invokes an enterprise Bean method whose transaction attribute is set to Never as follws:</description>
			<location chapter="13" section="6.2.6"/>
			<comment>see subassertions for tests</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:588.1</id>
					<description>The method is invoked  without a transaction context as defined by the EJB specification.</description>
					<location chapter="13" section="6.26"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:588.2</id>
					<description>The client is required to call without a transaction context.</description>
					<location chapter="13" section="6.26"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:588.3</id>
					<description>If the client calls with a transaction context, the Container throws the 
						java.rmi.RemoteException exception if the client is a remote client, or the 
						jakarta.ejb.EJBException if the client is a local client.
					</description>
					<location chapter="13" section="6.2.6"/>
					<comment>session*/stateful/bm/TxN_GlobalSingle/Client.java, entity*/*/bm/Tx_Single/Client.java, entity/*/bm/Tx_Multi/Client.java, entity*/*/bm/TxN_Exceptions/Client.java</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:588.4</id>
					<description>If the client calls without a transaction context, the Container performs the same steps 
						as described in the NotSupported case.
					</description>
					<location chapter="13" section="6.2.6"/>
					<comment>session*/stateful/cm/TxN_Single/Client.java</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:589</id>
			<description>When the EJBContext.setRollbackOnly() method is invoked from a business method executing 
				with the Required, RequiresNew, or Mandatory transaction attribute,  the Container must ensure 
				that the transaction will never commit.
			</description>
			<location chapter="13" section="6.2.8"/>
			<comment>session*/*/cm/Tx_SetRollbackOnly/Client.java, entity/*/cm/Tx_SetRollbackOnly/Client.java</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:589.1</id>
					<description>If the Container initiated the transaction immediately before dispatching the business 
						method to the instance (as opposed to the transaction being inherited from the caller), the 
						Container must note that the instance has invoked the setRollbackOnly() method.
					</description>
					<location chapter="13" section="6.2.8"/>
					<comment>session*/*/cm/Tx_SetRollbackOnly/Client.java, entity/*/cm/Tx_SetRollbackOnly/Client.java</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:589.2</id>
					<description>When the business method invocation completes, the Container must roll back rather than 
						commit the transaction.
					</description>
					<location chapter="13" section="6.2.8"/>
					<comment>session*/*/cm/Tx_SetRollbackOnly/Client.java, entity/*/cm/Tx_SetRollbackOnly/Client.java</comment>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:589.3</id>
					<description>If the business method has returned normally or with an application exception, the
						Container must pass the method result or the application exception to the client after the 
						Container performed the rollback.
					</description>
					<location chapter="13" section="6.2.8"/>
					<comment>session*/*/cm/Tx_SetRollbackOnly/Client.java, entity/*/cm/Tx_SetRollbackOnly/Client.java</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:590</id>
			<description>The Container must throw the java.lang.IllegalStateException if the 
				EJBContext.setRollbackOnly() method is invoked from a business method executing with the 
				Supports, NotSupported, or Never transaction attribute.
			</description>
			<location chapter="13" section="6.2.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:591</id>
			<description>The Container must handle the EJBContext.getRollbackOnly() method invoked from a business
				method executing with the Required, RequiresNew, or Mandatory transaction attribute.
			</description>
			<location chapter="13" section="6.2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:592</id>
			<description>The Container must throw the java.lang.IllegalStateException if the 
				EJBContext.getRollbackOnly() method is invoked from a business method executing with the 
				Supports, NotSupported, or Never transaction attribute.
			</description>
			<location chapter="13" section="6.2.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:593</id>
			<description>If an instance of an enterprise bean with container-managed transaction demarcation 
				attempts to invoke the getUserTransaction() method of the EJBContext interface, the Container 
				must throw the java.lang.IllegalStateException.
			</description>
			<location chapter="13" section="6.2.10"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:594</id>
			<description>If a Session Bean class implements the jakarta.ejb.SessionSynchronization interface, the
				Container must invoke the afterBegin(), beforeCompletion(), and afterCompletion(...)
				callbacks on the instance as part of the transaction commit protocol.
			</description>
			<location chapter="13" section="6.2.11"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:594.1</id>
					<description>The Container invokes the afterBegin() method on an instance before it invokes the first 
						business method in a transaction.
					</description>
					<location chapter="13" section="6.2.11"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:594.2</id>
					<description>The Container invokes the beforeCompletion() method to give the enterprise bean instance 
						the last chance to cause the transaction to rollback. The instance may cause the transaction 
						to roll back by invoking the EJBContext.setRollbackOnly() method.
					</description>
					<location chapter="13" section="6.2.11"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:594.3</id>
					<description>The Container invokes the afterCompletion(Boolean committed) method after the completion
						of the transaction commit protocol to notify the enterprise bean instance of the transaction 
						outcome.
					</description>
					<location chapter="13" section="6.2.11"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:595</id>
			<description>The Container is responsible for providing the transaction demarcation for the 
				message-driven beans that the Bean Provider declared as with container-managed transaction 
				demarcation. For these enterprise beans, the Container must demarcate transactions as specified in 
				the deployment descriptor by the Application Assembler.
			</description>
			<location chapter="13" section="6.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:596</id>
			<description>Only the NotSupported and Required transaction attributes may be used for message-driven
				beans.
			</description>
			<location chapter="13" section="6.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:597</id>
			<description>The Container invokes a message-driven Bean method whose transaction attribute is set to 
				NotSupported with an unspecified transaction context.
			</description>
			<location chapter="13" section="6.3.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:597.1</id>
					<description>If the message listener method invokes other enterprise beans, the Container passes no 
						transaction context with the invocation.
					</description>
					<location chapter="13" section="6.3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:598</id>
			<description>The Container must invoke a message-driven Bean message listener method whose 
				transaction attribute is set to Required with a valid transaction context. 
			</description>
			<location chapter="13" section="6.3.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:598.1</id>
					<description>The resource managers accessed by the message listener method within the transaction are 
						enlisted with the transaction.
					</description>
					<location chapter="13" section="6.3.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:598.2</id>
					<description>If the message listener method invokes other enterprise beans, the Container passes the 
						transaction context with the invocation.
					</description>
					<location chapter="13" section="6.3.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:598.3</id>
					<description>The Container attempts to commit the transaction when the 
						message listener method has completed.
					</description>
					<location chapter="13" section="6.3.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:599</id>
			<description>When the EJBContext.setRollbackOnly() method is invoked from a message listener method 
				executing with the Required transaction, the Container must ensure that the transaction 
				will never commit.
			</description>
			<location chapter="13" section="6.3.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:599.1</id>
					<description>The Container must note that the instance has invoked the setRollbackOnly() method.</description>
					<location chapter="13" section="6.3.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:599.2</id>
					<description>When the method invocation completes, the Container must roll back rather than commit the
						transaction.
					</description>
					<location chapter="13" section="6.3.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:600</id>
			<description>The Container must throw and log the java.lang.IllegalStateException if the 
				EJBContext.setRollbackOnly() method is invoked from a message listener method executing with 
				the NotSupported transaction attribute
			</description>
			<location chapter="13" section="6.3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:601</id>
			<description>The Container must handle the EJBContext.getRollbackOnly() method invoked from a message
			 	listener method executing with the Required transaction attribute.
			</description>
			<location chapter="13" section="6.3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:602</id>
			<description>The Container must throw and log the java.lang.IllegalStateException if the 
				EJBContext.getRollbackOnly() method is invoked from a message listener method executing with 
				the NotSupported transaction attribute.
			</description>
			<location chapter="13" section="6.3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:603</id>
			<description>If an instance of a message-driven bean with container-managed transaction demarcation 
				attempts to invoke the getUserTransaction() method of the EJBContext interface, the Container 
				must throw and log the java.lang.IllegalStateException.
			</description>
			<location chapter="13" section="6.3.5"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:604</id>
			<description>The container may use the optimization for transactions initiated by the container for a 
				bean with container managed transaction demarcation and for transactions initiated by a bean 
				with bean managed transaction demarcation with the UserTransaction interface.
			</description>
			<location chapter="13" section="6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:605</id>
			<description>The container cannot apply the optimization for transactions imported from a different 
				container.
			</description>
			<location chapter="13" section="6.4"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:606</id>
			<description>When executing a method with an unspecified transaction context, the Container may 
				execute the method and access the underlying resource managers without a transaction context.
			</description>
			<location chapter="13" section="6.5"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:607</id>
			<description>When executing a method with an unspecified transaction context, the Container may treat 
				each call of an instance to a resource manager as a single transaction.
			</description>
			<location chapter="13" section="6.5"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:608</id>
			<description>When executing a method with an unspecified transaction context, the Container may merge 
				multiple calls of an instance to multiple resource managers into a single transaction.
			</description>
			<location chapter="13" section="6.5"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:609</id>
			<description>When the Container executes a method with an unspecified transaction context and an 
				instance invokes methods on other enterprise beans, and the invoked methods are also
				designated to run with an unspecified transaction context, the Container may merge the
				resource manager calls from the multiple instances into a single transaction.
			</description>
			<location chapter="13" section="6.5"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:610</id>
			<description>When the container executes a method with an unspecified transaction context, it may 
				perform any combination of the actions in the preceding five assertions.
			</description>
			<location chapter="13" section="6.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:611</id>
			<description>An entity object may be accessed by multiple clients in the same transaction.</description>
			<location chapter="13" section="7.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:612</id>
			<description>Concurrent access to an entity object in the same transaction context would be considered 
				an application programming error, and it would be handled in a Container-specific way.
			</description>
			<location chapter="13" section="7.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:613</id>
			<description>The EJB specification requires that the Container provide support for local diamonds. 
				In a local diamond, components are deployed in the same EJB container.
			</description>
			<location chapter="13" section="7.2"/>
			<comment>entity/*/*/TxR*_Diamond/Client.java</comment>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:614</id>
			<description>If the Container Provider chooses not to support distributed diamonds, and if the 
				Container can detect that a client invocation would lead to a diamond, the Container should 
				throw the java.rmi.RemoteException to the client.
			</description>
			<location chapter="13" section="7.2"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:615</id>
			<description>If the Container Provider chooses to support distributed diamonds, it should always 
				instantiate the entity bean instance for a given entity object in the same process, and
				route all clients requests to this process.
			</description>
			<location chapter="13" section="7.2"/>
			<comment>DUPLICATE OF 561</comment>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:616</id>
			<description>If the Container Provider chooses to support distributed diamonds, it should always 
				instantiate the entity bean instance for a given entity object in the same process, and
				route all clients requests to this process.
			</description>
			<location chapter="13" section="7.2"/>
			<sub-assertions>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:616.1</id>
					<description>Within the process, the Container routes all the requests within the same transaction 
						to the same enterprise bean instance.
					</description>
					<location chapter="13" section="7.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:617</id>
			<description>If the Container Provider chooses to support distributed diamonds, it should instantiate 
				the entity bean instance for a given entity object in multiple processes, and use the ejbStore 
				and ejbLoad methods to synchronize the state of the instances within the same transaction.
			</description>
			<location chapter="13" section="7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:618</id>
			<description>The diamond case is transparent to the Bean Provider; the Bean Provider does not have to 
				code the enterprise bean differently for the bean to participate in a diamond.
			</description>
			<location chapter="13" section="7.3"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:619</id>
			<description>If a distributed diamond is necessary, the Deployer should advise the Container (using 
				a Container-specific API) that an entity objects of the entity bean may be involved in 
				distributed diamond scenarios.
			</description>
			<location chapter="13" section="7.4"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:10619</id>
			<description>The jakarta.ejb.CreateException, jakarta.ejb.RemoveException, jakarta.ejb.FinderException,
				and subclasses thereof are considered to be application exceptions.
				These exceptions are covered by the rules on application exceptions that are defined Chapter 18.
			</description>
			<location chapter="14" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:620</id>
			<description>The Bean Provider defines the application exceptions in the throws clauses of the methods 
				of the home, component, and web service endpoint interfaces.
			</description>
			<location chapter="14" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:621</id>
			<description>The Bean Provider must do one of the following to ensure data integrity before throwing an 
				application exception from an enterprise bean: 
				1) Ensure that the instance is in a state such that a client's attempt to continue and/or commit 
					the transaction does not result in loss of data integrity.
				2) Mark the transaction for rollback using the EJBContext.setRollbackOnly() method before 
					throwing an application exception.
			</description>
			<location chapter="14" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:622</id>
			<description>An application exception class must be a subclass (direct or indirect) of 
				java.lang.Exception.
			</description>
			<location chapter="14" section="2.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:622.1</id>
					<description>An application exception class must not be defined as a subclass of the 
						java.lang.RuntimeException, or of the java.rmi.RemoteException.
					</description>
					<location chapter="14" section="2.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:623</id>
			<description>Bean Providers may define subclasses of the standard EJB application exceptions and throw 
				instances of the subclasses in the enterprise bean methods.
			</description>
			<location chapter="14" section="2.1"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:624</id>
			<description>If the enterprise bean method encounters a system-level exception or error that does not 
				allow the method to successfully complete, the method should throw a suitable non-application 
				exception that is compatible with the method's throws clause.
			</description>
			<location chapter="14" section="2.2"/>
			<sub-assertions>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:624.1</id>
					<description>If the bean method encounters a RuntimeException or error, it should simply 
						propagate the error from the bean method to the Container (i.e., the bean method does not
						have to catch the exception).
					</description>
					<location chapter="14" section="2.2"/>
					<comment>entity*/*/*/TxN_Exceptions, entity*/*/*/TxNS_Exceptions, entity*/*/*/TxR_Exceptions, entity*/*/*/TxRN_Exceptions</comment>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:624.2</id>
					<description>If the bean method performs an operation that results in a checked exception that the bean
						method cannot recover, the bean method should throw the jakarta.ejb.EJBException that wraps the 
						original exception.
					</description>
					<location chapter="14" section="2.2"/>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:624.3</id>
					<description>Any other unexpected error conditions should be reported using the jakarta.ejb.EJBException.</description>
					<location chapter="14" section="2.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:626</id>
			<description>The Bean Provider can rely on the Containert o invoke  no other method on an instance that threw a non-application exception.</description>
			<location chapter="14" section="2.2"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:627</id>
			<description>The NoSuchEntityException should be thrown by the entity
				bean class methods to indicate that the underlying entity has been removed from the database.
			</description>
			<location chapter="14" section="2.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:628</id>
			<description>If a business method in a bean with container-managed transaction demarcation runs in the 
				context of the caller's transaction (as may occur with 
the Required, 
				Mandatory, or Supports attribute), and the method throws an application exception, then:
			</description>
			<location chapter="14" section="3.1"/>
			<comment>TxM_Exceptions, TxS_Exceptions, TxR_Exceptions.</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:628.1</id>
					<description>The container must re-throw the exception, and the client receives the exception.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:628.2</id>
					<description>The client can attempt to continue computation in the transaction, and eventually
						commit the transaction (the commit would fail if the
instance called
						setRollbackOnly().)
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:629</id>
			<description>If a business method in a bean with container-managed transaction demarcation runs in the 
				context of the caller's transaction (as may occur with the Required, 
				Mandatory, or Supports attribute), and the method throws an an error or an exception that is 
				not an application exception, the container must perform the
following:
                        
			</description>
			<location chapter="14" section="3.1"/>
			<comment>TxM_Exceptions, TxS_Exceptions, TxR_Exceptions.</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:629.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:629.2</id>
					<description>Mark the transaction for rollback.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:629.3</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:629.4</id>
					<description>Throw the jakarta.transaction.TransactionRolledBackException to
						a remote client.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:629.5</id>
					<description>Throw the jakarta.transaction.TransactionRolledBackLocalException to
						a local client.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:630</id>
			<description>If a business method in a bean with container-managed transaction demarcation runs in the 
				context of a transaction that the Container started immediately before dispatching the business 
				method (as may occur with the Requires or RequiresNew attribute),
				and the method throws an application exception, the Container must perform the following:
			</description>
			<location chapter="14" section="3.1"/>
			<comment>TxRN_Exceptions, TxR_Exceptions.</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:630.1</id>
					<description>If the instance called setRollbackOnly(), the container 
						must rollback the transaction, and re-throw the application 
                                		exception. If the client executes in a transaction, the client's
						transaction is not marked for rollback.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:630.2</id>
					<description>If the instance did not call setRollbackOnly(), the container must
						attempt to commit the transaction and then re-throw the
                                		exception. If the client executes in a transaction, the client's
						transaction is not marked for rollback.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:631</id>
			<description>If a business method in a bean with container-managed transaction demarcation runs in the 
				context of a transaction that the Container started immediately before dispatching the business 
				method (as may occur with the Requires or RequiresNew attribute),
				and the method throws an error or an exception other than an application exception, the Container 
				must perform the following:
			</description>
			<location chapter="14" section="3.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:631.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:631.2</id>
					<description>Rollback the container-started transaction.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:631.3</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:631.4</id>
					<description>Throw a RemoteException to a remote or web
service 
						client.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:631.5</id>
					<description>Throw an EJBException to a local client.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:632</id>
			<description>If a business method in a bean with container-managed transaction demarcation runs in an 
				unspecified transaction context (as may occur with the NotSupported,
				Never, or Supports attribute), and the method throws an application exception, then:
			</description>
			<location chapter="14" section="3.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:632.1</id>
					<description>The container must re-throw the application exception.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:632.2</id>
					<description>The client receives the application exception, and 
						if the client executes in a transaction, the client's transaction 
						is not marked for rollback.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:633</id>
			<description>If a business method in a bean with container-managed transaction demarcation runs in an 
				unspecified transaction context (as may occur with the NotSupported,
				Never, or Supports attribute), and the method throws an an error or an exception other than 
				an application exception, the container must:
			</description>
			<location chapter="14" section="3.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:633.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:633.2</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:633.3</id>
					<description>Throw a RemoteException to a remote or web
service 
						client.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:633.4</id>
					<description>Throw an EJBException to a local client.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:634</id>
			<description>If a business method in a stateful or stateless bean with bean-managed transaction 
				demarcation throws an application exception, the container must re-throw the exception, and 
				the client receives the exception.
			</description>
			<location chapter="14" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:635</id>
			<description>If a business method in a stateful or stateless bean with bean-managed transaction 
				demarcation throws an error or an exception other than an application exception, the container 
				must:
			</description>
			<location chapter="14" section="3.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:635.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:635.2</id>
					<description>Mark for rollback a transaction that has been
started, but not
						yet completed, by the instance.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:635.3</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:635.4</id>
					<description>Throw a RemoteException to a remote or web
service 
						client.
					</description>
					<location chapter="14" section="3.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:635.5</id>
					<description>Throw an EJBException to a local client.</description>
					<location chapter="14" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:636</id>
			<description>If a message listener method of a message-driven bean with container-managed 
				transaction demarcation runs in the context of a transaction that the Container started
				immediately before dispatching the method (as occurs with the Required attribute), and the
				method throws an application exception, then the container must do the following:
			</description>
			<location chapter="14" section="3.4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:636.1</id>
					<description>If the instance called setRollbackOnly(), then rollback the
						transaction, and re-throw the application exception to resource adapter.
					</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:636.2</id>
					<description>If the instance did not call setRollbackOnly(), attempt to commit
						the transaction, and re-throw the application exception to resource adapter.
					</description>
					<location chapter="14" section="3.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:637</id>
			<description>If a message listener method of a message-driven bean with container-managed 
				transaction demarcation runs in the context of a transaction that the Container started
				immediately before dispatching the method (as occurs with the Required attribute), and the
				method throws a system exception, then the container must do the following:
			</description>
			<location chapter="14" section="3.4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:637.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:637.2</id>
					<description>Rollback the container-started transaction.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:637.3</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:637.4</id>
					<description>Throw an EJBException that wraps the original exception to resource 
						adapter.
					</description>
					<location chapter="14" section="3.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:638</id>
			<description>If a message listener method of a message-driven bean with container-managed 
				transaction demarcation runs in an unspecified transaction context (as occurs with the 
				NotSupported attribute), and the method throws an application exception, the container 
				must re-throw the application exception to resource adapter.
			</description>
			<location chapter="14" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:639</id>
			<description>If a message listener method of a message-driven bean with container-managed 
				transaction demarcation runs in an unspecified transaction context (as occurs with the 
				NotSupported attribute), and the method throws a system exception, the container 
				must:
			</description>
			<location chapter="14" section="3.4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:639.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:639.2</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:639.3</id>
					<description>Throw an EJBException that wraps the original exception to resource 
						adapter.
					</description>
					<location chapter="14" section="3.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:640</id>
			<description>If a message listener method of a message-driven bean with bean-managed 
				transaction demarcation throws an application exception, the container 
				must re-throw the application exception to resource adapter.
			</description>
			<location chapter="14" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:641</id>
			<description>If a message listener method of a message-driven bean with bean-managed 
				transaction demarcation throws a system exception, the container 
				must:
			</description>
			<location chapter="14" section="3.4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:641.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:641.2</id>
					<description>Mark for rollback a transaction that has been
started, but not
						yet completed, by the instance.
					</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:641.3</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:641.4</id>
					<description>Throw an EJBException that wraps the original exception to resource 
						adapter.
					</description>
					<location chapter="14" section="3.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:642</id>
			<description>If the ejbCreate or ejbRemove method of a message-driven bean 
				throws a system exception, the container must:
			</description>
			<location chapter="14" section="3.4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:642.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:642.2</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:643</id>
			<description>The ejbTimeout method does not throw application exceptions and cannot throw 
				exceptions to the client.
			</description>
			<location chapter="14" section="3.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:644</id>
			<description>If a bean implements the TimedObject interface, and a system exception is thrown from 
				the ejbTimeout method running in the context of a transaction that the Container started 
				immediately before dispatching the method, the Container must:
			</description>
			<location chapter="14" section="3.6"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:644.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:644.2</id>
					<description>Rollback the container-started transaction.</description>
					<location chapter="14" section="3.6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:644.3</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.6"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:645</id>
			<description>If an bean implements the TimedObject interface, and a system exception is thrown from a 
				bean method that may make use of the UserTransaction interface the Container must:
			</description>
			<location chapter="14" section="3.6"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:645.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:645.2</id>
					<description>Mark for rollback a transaction that has been
started but not yet
						completed by the instance.
					</description>
					<location chapter="14" section="3.6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:645.3</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.6"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:646</id>
			<description>If a system exception is thrown by the ejbCreate() or ejbRemove() method of a stateless session 
				bean with web service client view, the Container must:
			</description>
			<location chapter="14" section="3.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:646.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:646.2</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:647</id>
			<description>If an exception is thrown from the container-invoked callbacks on the enterprise bean, the 
				Container must:
			</description>
			<location chapter="14" section="3.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:647.1</id>
					<description>Log the exception or error.</description>
					<location chapter="14" section="3.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:647.2</id>
					<description>If the instance is in a transaction, mark the
						transaction for rollback.
					</description>
					<location chapter="14" section="3.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:647.3</id>
					<description>Discard the instance.</description>
					<location chapter="14" section="3.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:647.4</id>
					<description>If the exception or error happened during the processing of a client-invoked method,
						throw the java.rmi.RemoteException to the client if the client is a remote client.
					</description>
					<location chapter="14" section="3.7"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:647.5</id>
					<description>If the exception or error happened during the processing of a client-invoked method,
						jakarta.ejb.EJBException to the client if the client is a local client.
					</description>
					<location chapter="14" section="3.7"/>
				</assertion>
				<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:647.6</id>
					<description>If the instance executed in the client's transaction, the Container should throw the 
						jakarta.transaction.TransactionRolledbackException to a remote client.
					</description>
					<location chapter="14" section="3.7"/>
				</assertion>
				<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:647.7</id>
					<description>If the instance executed in the client's transaction, the Container should throw the 
						jakarta.transaction.TransactionRolledbackLocalException to a local client.
					</description>
					<location chapter="14" section="3.7"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:648</id>
			<description>If the NoSuchEntityException is thrown by a method of an entity bean class, the Container 
				must handle the exception using the rules for EJBException described in Sections 18.3.1, 
				18.3.2, and 18.3.6.
			</description>
			<location chapter="14" section="3.7"/>
			<sub-assertions>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:648.1</id>
					<description>The Container should throw the java.rmi.NoSuchObjectException to a remote client.</description>
					<location chapter="14" section="3.7"/>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:648.2</id>
					<description>The Container should throw the jakarta.ejb.NoSuchObjectLocalException to a local client.</description>
					<location chapter="14" section="3.7"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:649</id>
			<description>If a client makes a call to a non-existing stateful session or
entity object, 
				the Container should:
			</description>
			<location chapter="14" section="3.9"/>
			<sub-assertions>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:649.1</id>
					<description>Throw the java.rmi.NoSuchObjectException to a remote client.</description>
					<location chapter="14" section="3.9"/>
				</assertion>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:649.2</id>
					<description>Throw the jakarta.ejb.NoSuchObjectLocalException to a local client.</description>
					<location chapter="14" section="3.9"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:650</id>
			<description>If the Container fails to start or commit a container-managed transaction, the Container 
				must throw the java.rmi.RemoteException to a remote or web service client and the 
				jakarta.ejb.EJBException to a local client.
			</description>
			<location chapter="14" section="3.10"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:650.1</id>
					<description>In the case where the Container fails to start or commit a container-managed transaction 
						on behalf of a message-driven bean, the Container must throw and log the 
						jakarta.ejb.EJBException.
					</description>
					<location chapter="14" section="3.10"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:651</id>
			<description>If the Container performs a transaction rollback because the instance has invoked the 
				setRollbackOnly() method on its EJBContext object, the Container must rollback the transaction 
				and pass the business method result or the application exception thrown by the business method 
				to the client.
			</description>
			<location chapter="14" section="3.10"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:652</id>
			<description>When the Container discards an instance because of a system exception, the Container should 
				release all the resources held by the instance that were acquired through the resource factories 
				declared in the enterprise bean environment
			</description>
			<location chapter="14" section="3.11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:653</id>
			<description>Enterprise beans written for the EJB 2.0 or later specification must use the jakarta.ejb.EJBException 
				instead of the java.rmi.RemoteException for the ejbCreate, ejbPostCreate, ejbFindMETHOD;, and ejbRemove 
				methods, and for container-invoked callbacks.
			</description>
			<location chapter="14" section="3.12"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:654</id>
			<description>The EJB 1.1 and EJB 2.0 or later specifications require that a
				Container must support the deprecated use of the java.rmi.RemoteException for the 
				ejbCreate, ejbPostCreate, ejbFindMETHOD;,  and ejbRemove methods, and for container-invoked 
				callbacks.
			</description>
			<location chapter="14" section="3.12"/>
			<sub-assertions>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:654.1</id>
					<description>The Container should treat the java.rmi.RemoteException thrown by an enterprise bean 
						method in the same way as it is specified for the jakarta.ejb.EJBException.
					</description>
					<location chapter="14" section="3.12"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:655</id>
			<description>The remote home interface, the remote interface, and the web service endpoint interface 
				are Java RMI interfaces, and therefore the throws clauses of all their methods (including those 
				inherited from superinterfaces) include the mandatory java.rmi.RemoteException.
			</description>
			<location chapter="14" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:656</id>
			<description>The local home and local interfaces are both Java local interfaces, and the throws clauses 
				of all their methods (including those inherited from superinterfaces) must not include the 
				java.rmi.RemoteException.
			</description>
			<location chapter="14" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:657</id>
			<description>If a client program receives an application exception from an enterprise bean invocation, 
				the client can continue calling the enterprise bean. An application exception does not result 
				in the removal of the EJB object.
			</description>
			<location chapter="14" section="4.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:658</id>
			<description>Clients that are enterprise beans with container-managed transaction demarcation can use 
				the getRollbackOnly() method of the jakarta.ejb.EJBContext object to learn if the current 
				transaction has been marked for rollback.
			</description>
			<location chapter="14" section="4.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:659</id>
			<description>Clients that are not enterprise beans with container-managed transaction demarcation
				can use the getStatus() method of the jakarta.transaction.UserTransaction interface to
				obtain the transaction status.
			</description>
			<location chapter="14" section="4.1.1"/>
			<comment>Tested in most bm tests</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:660</id>
			<description>If a stateless session bean throws an application exception from one of the methods on its 
				web service endpoint interface, it is the responsibility of the container to map the exception 
				to the SOAP fault specified in the WSDL that describes the port type that the stateless session 
				bean implements.
			</description>
			<location chapter="14" section="4.1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:661</id>
			<description>A remote or a Java-based web service client receives the java.rmi.RemoteException and a
				local client receives the jakarta.ejb.EJBException as an indication of a failure to invoke an 
				enterprise bean method or to properly complete its invocation.
			</description>
			<location chapter="14" section="4.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:661.1</id>
					<description>The exception can be thrown by the Container or by the communication subsystem between the 
						client and the Container.
					</description>
					<location chapter="14" section="4.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:662</id>
			<description>The java.rmi.NoSuchObjectException is thrown to the client if a remote business method 
				cannot complete because the EJB object no longer exists.
			</description>
			<location chapter="14" section="4.2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:663</id>
			<description>The jakarta.ejb.NoSuchObjectLocalException is thrown to the client if a local business 
				method cannot complete because the EJB object no longer exists.
			</description>
			<location chapter="14" section="4.2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:664</id>
			<description>          The CosNaming service must follow the requirements in the CORBA
          Interoperable Name Service specification for providing the host,
          port, and object key for its root NamingContext object. The
          Cos-Naming service must be able to service IIOP invocations on
          the root NamingContext at the advertised host, port, and object
          key.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="15" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:665</id>
			<description>           The remote home and remote interfaces of an enterprise bean
           remote client view are defined as Java RMI interfaces.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:666</id>
			<description>          The communication stubs used on the client side are artifacts
          generated at the enterprise bean s deploy-ment time by the
          Container provider s tools.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:667</id>
			<description>          All EJB, web, and application client containers must support the
          IIOP 1.2 protocol for remote invocations on EJBObject and
          EJBHome references.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:668</id>
			<description>          EJB containers must be capable of servicing IIOP 1.2 based 
          invocations on EJBObject and EJBHome objects.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:669</id>
			<description>          CORBA Interoperable Object References (IORs) for EJBObject and
          EJBHome object references must include the GIOP version number 1.2.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:670</id>
			<description>          The IIOP infrastructure in all J2EE containers must be able to 
          accept fragmented GIOP messages.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:671</id>
			<description>          Bidirectional GIOP messages may optionally be supported by J2EE
          clients and servers: if a J2EE server receives an IIOP message
          from a client which contains the BiDirIIOPServiceContext
          structure, it may or may not use the same connection for sending
          requests back to the client.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:672</id>
			<description>          J2EE containers are required to support the Unicode UTF16 code
          set for transmission of character and string data (in the IDL 
          wchar and wstring datatypes).
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:673</id>
			<description>          EJBObject and EJBHome IORs must have the TAG_CODE_SETS tagged 
          component which declares the codesets supported by the EJB container.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
			<comment>        Should we test this explicitely or rely on RI behavior?
      
			</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:674</id>
			<description>          IIOP messages which include wchar and wstring datatypes must have
          the code sets service context field.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:675</id>
			<description>          The CORBA 2.3.1 requirements for code set support must be
          followed by J2EE containers.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:676</id>
			<description>          EJB containers are required to translate Java types to their
          on-the-wire representation in IIOP messages using the Java
          Language to IDL mapping specification with the wire formats for
          IDL types as described in the GIOP specification in CORBA 2.3.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:677</id>
			<description>            For each session bean or entity bean that is deployed in a 
            container, there are two Java RMI remote interfaces in the
            remote client view the bean s remote home interface and the
            bean's remote interface. The Java Language to IDL Mapping
            specification describes precisely how these remote interfaces
            are mapped to IDL.
      
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:678</id>
			<description>          All EJB value types are mapped to IDL abstract value types or 
          abstract interfaces using the rules in the Java Language to IDL 
          Mapping.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:678.1</id>
					<description>              Java interfaces jakarta.ejb.Handle, jakarta.ejb.HomeHandle, and 
              jakarta.ejb.EJBMetaData are passed by value during remote
              invocations on enterprise beans.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:678.2</id>
					<description>              The Enumeration or Collection objects returned by entity bean
              finder methods are value types.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:678.3</id>
					<description>              There may be application-specific value types that are passed
              as parameters or return values on enterprise bean invocations.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:679</id>
			<description>          Java system exceptions, including the java.rmi.RemoteException
          and its subclasses, may be thrown by the EJB container. If the
          client's invocation was made over IIOP, the EJB server is
          required to map these exceptions to CORBA system exceptions and
          send them in the IIOP reply message to the client,
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:679.1</id>
					<description>              When client's invocation was made over IIOP, the EJB server is
              required to map javax.transactionTransactionRolledbackException
              to TRANSACTION_ROLLEDBACK CORBA system exception.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:679.2</id>
					<description>              When client's invocation was made over IIOP, the EJB server is
              required to map
              jakarta.transaction.TransactionRequiredException
              to TRANSACTION_REQUIRED CORBA system exception.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:679.3</id>
					<description>              When client's invocation was made over IIOP, the EJB server is
              required to map jakarta.transaction.InvalidTransactionException 
              to INVALID_TRANSACTION CORBA system exception.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:679.4</id>
					<description>              When client's invocation was made over IIOP, the EJB server is
              required to map java.rmi.NoSuchObjectException to
              OBJECT_NOT_EXIST CORBA system exception.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:679.5</id>
					<description>              When client's invocation was made over IIOP, the EJB server is
              required to map java.rmi.AccessException to
              NO_PERMISSION CORBA system exception.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:679.6</id>
					<description>              When client's invocation was made over IIOP, the EJB server is
              required to map java.rmi.MarshalException to MARSHAL
              CORBA system exception.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:679.7</id>
					<description>              When client's invocation was made over IIOP, the EJB server is
              required to map java.rmi.RemoteException to UNKNOWN
              CORBA system exception.
            
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:680</id>
			<description>          For EJB clients, the ORB's unmarshaling machinery maps CORBA
          system exceptions received in the IIOP reply message to the 
          appropriate Java exception as specified in the Java Language to 
          IDL mapping.      
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:681</id>
			<description>          The EJB client view classes, including application value classes,
          must be packaged with the referencing component's application, as 
          described in Section 24.3.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="15" section="5.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:682</id>
			<description>          Stubs for invoking on EJBHome and EJBObject references must be
          provided by the referencing container,
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="15" section="5.4"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:683</id>
			<description>          Containers may optionally support run-time downloading of stub
          and value classes needed by the referencing container. The CORBA
          2.3.1 specification and the Java Language to IDL Mapping specify
          how stub and value type implementations are to be downloaded: 
          using codebase URLs that are either embedded in the EJBObject or
          EJBHome's IOR, or sent in the IIOP message service context, or
          marshalled with the value type.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.4"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:684</id>
			<description>          The URL for run-time downloading of stub and value classes
          needed by the referencing container may optionally include an
          HTTPS URL for secure downloading.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:685</id>
			<description>          System value classes are serializable value classes implementing
          the jakarta.ejb.Handle, jakarta.ejb.HomeHandle,
          jakarta.ejb.EJBMetaData, java.util.Enumeration,
          java.util.Collection, and java.util.Iterator interfaces. These 
          value classes are provided by the EJB container vendor. They
          must be provided in the form of a JAR file by the container
          hosting the referenced bean.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:686</id>
			<description>          Implementations of these system value classes must be portable
          (they must use only J2SE and J2EE APIs) so that they can be
          instantiated in another vendor s container.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:687</id>
			<description>          If the system value class implementation needs to load 
          application-specific classes (such as remote home or remote 
          interfaces) at runtime, it must use the thread context class loader.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:688</id>
			<description>          The referencing container must make application-specific classes
          available to the system value class instance at runtime through 
          the thread context class loader.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:689</id>
			<description>          EJB, web and application client containers must provide 
          implementations of the HandleDelegate inter-face. The
          HandleDelegate object must be accessible in the client 
          J2EE component s JNDI namespace at the reserved name 
          java:comp/HandleDelegate.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:690</id>
			<description>          The HandleDelegate object is not exported outside the container
          that provides it.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:691</id>
			<description>          Portable implementations of Handle and HomeHandle must look up
          the HandleDelegate object of the container in which they are
          instantiated using JNDI at the name java:comp/HandleDelegate 
          and use the HandleDelegate object to serialize and deserialize
          EJBObject and EJBHome references.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
			</keywords>
			<location chapter="15" section="5.5.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:691.1</id>
					<description>            Handle and HomeHandle implementation classes must define
            writeObject and readObject methods to control their 
            serialization and deserialization. These methods must not wrap
            or substitute the stream objects that are passed to the
            HandleDelegate methods.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:691.2</id>
					<description>            The writeObject method of Handle implementations must call
            HandleDelegate.writeEJBObject with the Handle's EJBObject
            reference and the serialization output stream object as
            parameters. The HandleDelegate implementation then writes the
            EJBObject to the output stream. If the output stream
            corresponds to an IIOP message, the HandleDelegate must use the
            standard IIOP abstract interface format for writing the
            EJBObject reference.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:691.3</id>
					<description>            The readObject method of Handle implementations must call
            HandleDelegate.readEJBObject with the serialization input 
            stream object as parameter, and with the stream positioned at
            the location where the EJBObject can be read. The
            HandleDelegate implementation then reads the EJBObject from 
            the input stream and returns it to the Handle. If the input
            stream corresponds to an IIOP message, the HandleDelegate must
            use the standard abstract interface format for reading the
            EJBObject reference. The Handle maintains a reference to the
            EJBObject as a transient instance variable and returns it when
            the J2EE component calls Handle.getEJBObject().
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:691.4</id>
					<description>            The writeObject method of HomeHandle implementations must call
            HandleDelegate.writeEJBHome with the Handle's EJBHome
            reference and the serialization output stream object as
            parameters. The HandleDelegate implementation then writes the
            EJBHome to the output stream. If the output stream
            corresponds to an IIOP message, the HandleDelegate must use the
            standard IIOP abstract interface format for writing the
            EJBHome reference.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:691.5</id>
					<description>            The readObject method of HomeHandle implementations must call
            HandleDelegate.readEJBHome with the serialization input 
            stream object as parameter, and with the stream positioned at
            the location where the EJBHome can be read. The
            HandleDelegate implementation then reads the EJBHome from 
            the input stream and returns it to the HomeHandle. If the input

            stream corresponds to an IIOP message, the HandleDelegate must
            use the standard abstract interface format for reading the
            EJBHome reference. The HomeHandle maintains a reference to the
            EJBHome as a transient instance variable and returns it when
            the J2EE component calls HomeHandle.getEJBHome().
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:691.6</id>
					<description>            The HandleDelegate must ensure that an EJBObject reference is
            capable of performing invocations immediately after
            deserialization.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.5.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:691.7</id>
					<description>            The HandleDelegate must ensure that an EJBHome reference is
            capable of performing invocations immediately after
            deserialization.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
					</keywords>
					<location chapter="15" section="5.5.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:692</id>
			<description>          Vendors may choose to not implement transaction interoperability.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:693</id>
			<description>          Vendors who choose to implement transaction interoperability must
          follow the requirements in sections 19.6.1 and 19.6.2.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:694</id>
			<description>          Vendors who choose not to implement transaction interoperability
          must follow the requirements in section 19.6.2.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:695</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          A distributed transaction started by a web or EJB container must
          be able to propagate in a remote invocation to an enterprise bean 
          in an EJB container provided by a different vendor, and the
          containers must participate in the distributed two-phase commit
          protocol.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:696</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          Transaction context propagation from client to EJB container uses 
          the implicit propagation mechanism described in the CORBA Object
          Transaction Service (OTS) v1.2 specification.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:697</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          EJB containers that support transaction interoperability are
          required to be capable of producing and consuming transaction
          contexts in IIOP messages in the format described in the OTS 
          specification.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:698</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          Web containers that support transaction interoperability are
          required to include client-side libraries which can produce the
          OTS transaction context for sending over IIOP.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:699</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          The CosTransactions::PropagationContext structure must be
          included in IIOP messages sent by web or EJB containers when 
          required by the rules described in the OTS 1.2 specification.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:700</id>
			<description>          [If a vendor choose to implement transaction interoperability]
          The target EJB container must process IIOP invocations based on
          the transaction policies of EJBObject or EJBHome references using
          the rules described in the OTS 1.2 specification.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:701</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          Containers that perform transactional work within the scope of a
          transaction must register an OTS Resource object with the 
          transaction coordinator whose object reference is included in the
          propagated transaction context.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.2"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:702</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          Containers that perform transactional work within the scope of a
          transaction may also register an OTS Synchronization object.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:703</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          If the server container does not register an OTS Synchronization
          object, it must still ensure that the beforeCompletion method of
          session beans and ejbStore method of entity beans are called with
          the proper transaction context.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:704</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          Containers must participate in the two-phase commit and recovery
          procedures performed by the transaction coordinator / terminator
          as described by the OTS specification.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:705</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          Compliant J2EE containers must not use nested transactions in 
          interoperability scenarios.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:706</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          The OTS1.2 specification describes the CosTransactions::OTSPolicy
          and CosTransactions::Invocation-Policy structures that are
          encoded in IORs as tagged components. EJBObject and EJBHome
          references must contain these tagged components.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:706.1</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            EJBObject and EJBHome references may have the 
            CosTransactions::InvocationPolicy value as either 
            CosTransactions:: SHARED or CosTransactions::EITHER.
            If the InvocationPolicy is not present in the IOR, it is
            interpreted by the client as if the policy value was 
            CosTransactions::EITHER.
        
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.1.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:706.2</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            All EJBObject and EJBHome references must have the OTSPolicy
            value as CosTransactions::ADAPTS.
        
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.1.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="deprecated" testable="false">
					<id>EJB:SPEC:706.3</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            The CosTransactions::Synchronization object registered by the
            EJB container with the transaction coordinator should have
            the OTSPolicy value CosTransactions::ADAPTS and
            InvocationPolicy value CosTransactions:: SHARED
        
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.1.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:707</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          The exception handling behavior described in the OTS1.2
          specification must be followed. In particular, if an application
          exception (an exception which is not a CORBA system exception and
          does not extend java.rmi.RemoteException) is returned by the
          server, the request is defined as being successful; hence the
          client-side OTS library must not roll back the transaction.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.1.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:708</id>
			<description>          [If a vendor choose to NOT implement transaction interoperability] 

          When a J2EE client component expects the client s transaction to
          propagate to the enterprise bean but the client or EJB container
          cannot satisfy this expectation, a java.rmi.RemoteException or
          subclass is thrown, which ensures that the client s transaction
          will roll back.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:709</id>
			<description>          If the client in another container invokes an enterprise bean's
          method when there is no active global transaction associated with
          the client s thread, the client container does not include a
          transaction context in the IIOP request message to the EJB
          server, i.e., there is no CosTransactions::PropagationContext
          structure in the IIOP request header.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:710</id>
			<description>          [If a vendor choose to NOT implement transaction interoperability]

          If the client container does not support transaction propagation
          or uses a non-OTS protocol, it must include the OTS
          CosTransactions::PropagationContext structure in the IIOP request
          to the server with the CosTransactions::Coordinator and
          CosTransactions::Terminator object references as null. The
          remaining fields in this null transaction context, such as the
          transaction identifier, are not interpreted and may have any
          value. The null transaction context indicates that there is a
          global client transaction active but the client container is not
          capable of propagating it to the server. The presence of this
          null transaction context allows the EJB container to determine
          whether the J2EE client com-ponent expects the client s global
          transaction to propagate to the server.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:711</id>
			<description>          [If a vendor choose to NOT implement transaction interoperability]

          Client containers that use the OTS transaction context format but
          still do not support transaction interoperability with other
          vendor's containers must reject the
          Coordinator::register_resource call by throwing a CORBA system
          exception if the server s Resource object reference indicates
          that it belongs to another vendor s container.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:712</id>
			<description>        

          All EJB containers (including those that do not support
          transaction propagation) must include the
          Cos-Transactions::OTSPolicy as described in section 19.6.1.3. In
          particular EJBObject and EJBHome references may have the
          InvocationPolicy value as either CosTransactions::SHARED or
          CosTransactions::EITHER
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.2"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:714</id>
			<description>          [If a vendor choose to NOT implement transaction interoperability]

          All EJB containers (including those that do not support
          transaction propagation) may include the
          CosTransactions::InvocationPolicy tagged component in the IOR for
          EJBObject and EJBHome references as described in section
          19.6.1.3.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:715</id>
			<description>          When an EJB container that supports transaction
          propagation receives a IIOP request message with no
          OTS transaction context, the container must follow the behavior
          described in Section 13.6.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:716</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          When an EJB container that supports transaction propagation
          receives a IIOP request message with a valid, complete OTS
          transaction context in the IIOP message, the container must
          follow the behavior described in Section 13.6.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:717</id>
			<description>          [If a vendor choose to implement transaction interoperability]

          When an EJB container that supports transaction propagation
          receives a IIOP request message with a null transaction context
          (as defined in section 19.6.2.1), the container s required
          behavior is described in the table in section 19.6.2.2.1.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.2.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:717.1</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            When an EJB container that supports transaction propagation
            receives a IIOP request message with a null transaction context,
            and the EJB method's transaction attribute is Mandatory, the
            EJB container must throw a RemoteException.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:717.2</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            When an EJB container that supports transaction propagation
            receives a IIOP request message with a null transaction context,
            and the EJB method's transaction attribute is Required, the
            EJB container must throw a RemoteException.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:717.3</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            When an EJB container that supports transaction propagation
            receives a IIOP request message with a null transaction context,
            and the EJB method's transaction attribute is RequiresNew, the
            EJB container must follow the behavior described in Section 13.6.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:717.4</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            When an EJB container that supports transaction propagation
            receives a IIOP request message with a null transaction context,
            and the EJB method's transaction attribute is Supports, the
            EJB container must throw a RemoteException.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:717.5</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            When an EJB container that supports transaction propagation
            receives a IIOP request message with a null transaction context,
            and the EJB method's transaction attribute is NotSupported, the
            EJB container must follow the behavior described in Section 13.6.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:717.6</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            When an EJB container that supports transaction propagation
            receives a IIOP request message with a null transaction context,
            and the EJB method's transaction attribute is Never, the
            EJB container must follow the behavior described in Section
            13.6.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:717.7</id>
					<description>            [If a vendor choose to implement transaction interoperability]

            When an EJB container that supports transaction propagation
            receives a IIOP request message with a null transaction context,
            and the EJB method's transaction attribute is Bean Managed, the
            EJB container must follow the behavior described in Section
            13.6.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10717</id>
			<description>          [If a vendor choose to NOT implement transaction interoperability]

          When an EJB container that does not support transaction
          interoperability receives an IIOP request message with no OTS
          transaction context, the container must follow the behavior
          described in section 13.6. 
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:718</id>
			<description>          [If a vendor choose to NOT implement transaction interoperability]

          When an EJB container that does not support transaction
          interoperability receives an IIOP request message with an OTS
          transaction context (either a valid and complete OTS transaction
          context, or a null transaction context), the container must
          follow the behavior required in table of section 19.6.2.2.2
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.2.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:718.1</id>
					<description>            [If a vendor choose to NOT implement transaction interoperability]

            When an EJB container that does not support transaction
            interoperability receives an IIOP request message with an OTS
            transaction context (either a valid and complete OTS
            transaction context, or a null transaction context), and the
            EJB's method transaction attribute is Mandatory, the container
            must throw a RemoteException.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:718.2</id>
					<description>            [If a vendor choose to NOT implement transaction interoperability]

            When an EJB container that does not support transaction
            interoperability receives an IIOP request message with an OTS
            transaction context (either a valid and complete OTS
            transaction context, or a null transaction context), and the
            EJB's method transaction attribute is Required, the container
            must throw a RemoteException.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:718.3</id>
					<description>            [If a vendor choose to NOT implement transaction interoperability]

            When an EJB container that does not support transaction
            interoperability receives an IIOP request message with an OTS
            transaction context (either a valid and complete OTS
            transaction context, or a null transaction context), and the
            EJB's method transaction attribute is RequiresNew, the container
            must follow the behavior described in Section 13.6.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:718.4</id>
					<description>            [If a vendor choose to NOT implement transaction interoperability]

            When an EJB container that does not support transaction
            interoperability receives an IIOP request message with an OTS
            transaction context (either a valid and complete OTS
            transaction context, or a null transaction context), and the
            EJB's method transaction attribute is Supports, the container
            must throw a RemoteException.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:718.5</id>
					<description>            [If a vendor choose to NOT implement transaction interoperability]

            When an EJB container that does not support transaction
            interoperability receives an IIOP request message with an OTS
            transaction context (either a valid and complete OTS
            transaction context, or a null transaction context), and the
            EJB's method transaction attribute is NotSupported, the container
            must follow the behavior described in Section 13.6.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:718.6</id>
					<description>            [If a vendor choose to NOT implement transaction interoperability]

            When an EJB container that does not support transaction
            interoperability receives an IIOP request message with an OTS
            transaction context (either a valid and complete OTS
            transaction context, or a null transaction context), and the
            EJB's method transaction attribute is Never, the container
            must follow the behavior described in Section 13.6.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:718.7</id>
					<description>            [If a vendor choose to NOT implement transaction interoperability]

            When an EJB container that does not support transaction
            interoperability receives an IIOP request message with an OTS
            transaction context (either a valid and complete OTS
            transaction context, or a null transaction context), and the
            EJB's method transaction attribute is Bean Managed, the container
            must follow the behavior described in Section 13.6.
          
					</description>
					<keywords>
						<keyword>Interoperability</keyword>
						<keyword>Transaction</keyword>
					</keywords>
					<location chapter="15" section="6.2.2.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:719</id>
			<description>          [If a vendor choose to NOT implement transaction interoperability]

          EJB containers that accept the OTS transaction context format but
          still do not support interoperability with other vendors client
          containers must follow behavior described in the table of section
          19.6.2.2.2 if the transaction identity or the Coordinator object
          reference in the propagated cli-ent transaction context indicate
          that the client belongs to a different vendor's container.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Transaction</keyword>
			</keywords>
			<location chapter="15" section="6.2.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:720</id>
			<description>          EJB containers are required to be able to publish EJBHome object
          references in a CORBA CosNaming service. The CosNaming service
          must implement the IDL interfaces in the CosNaming module defined
          in CORBA CosNaming service specification and allow clients to
          invoke the resolve and list operations over IIOP.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="15" section="7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:721</id>
			<description>          Client containers (i.e., EJB, web, or application client
          containers) are required to include a JNDI Cos-Naming service
          provider that uses the mechanisms defined in the Interoperable
          Name Service specification to contact the server's CosNaming
          service, and to resolve the EJBHome object using standard
          CosNaming APIs.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="15" section="7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:722</id>
			<description>          The JNDI Cos-Naming service provider included in client
          containers must access the root NamingContext of the server s
          Cos-Naming service by creating an object reference from the URL
          corbaloc:iiop:1.2@&lt;host>:&lt;port>/&lt;objectkey>
          (where &lt;host>, &lt;port>, and &lt;objectkey> are the
          values corresponding to the root NamingContext advertised by the
          server s CosNaming service), or by using an equivalent mechanism.
          CosNaming APIs.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="15" section="7"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:723</id>
			<description>          At deployment time, the deployer of the client container should
          obtain the host, port and object key of the server's CosNaming
          service and the CosNaming name of the server EJBHome object
          (e.g. by browsing the server's namespace) for each ejb-ref
          element in the client component's deployment descriptor. The
          ejb-ref-name should then be linked to the EJBHome object's
          CosNaming name. At run-time, the client component's JNDI lookup
          call uses the CosNaming service provider, which contacts the
          server s CosNaming service, resolves the CosNaming name, and
          returns the EJBHome object reference to the client component.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="15" section="7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:724</id>
			<description>          Security of CosNaming service access is achieved using the
          security interoperability protocol described in Section 19.8. The
          CosNaming service must support this protocol.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="15" section="7"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:725</id>
			<description>          Clients which construct the root NamingContext object reference
          from a URL should send an IIOP LocateRequest message to the
          Cos-Naming service to obtain the complete IOR (with SSL
          information) of the root NamingContext, and then initiate an SSL
          session with the CosNaming service, as determined by the client
          policy.
        
			</description>
			<keywords>
				<keyword>Interoperability</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="15" section="7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:726</id>
			<description>When there is a chain of invocations across a web component and
     enterprise beans, an inter-mediate component may use the principal of the
     caller (the initiating client) or the intermediate compo-nent may use its
     run-as principal to perform an invocation on the callee, depending on the
     security identity specified for the intermediate component in its
     deployment descriptor.
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:727</id>
			<description>when there is a chain of multiple invocations across web components and
     enterprise beans, intermedi-ate components may not have access to the
     authentication data of the initiating client to provide proof of the client
     s identity to the target.  In such cases, the target s authentication
     requirements can be satisfied if the target container trusts the
     intermediate container to vouch for the authenticity of the propagated
     principal.  The call is made using the intermediate container s principal
     and authentication data, while also carrying the propagated principal of
     the initiating client.  The invocation on the target enterprise bean is
     authorized and performed using the propagated principal.  This procedure
     also avoids the over-head associated with authentication of clients on
     every remote invocation in a chain.
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:728</id>
			<description>EJB containers are required to provide deployers or administrators with
     the tools to configure trust rela-tionships for interactions with
     intermediate web or EJB containers.
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:729</id>
			<description>If the network is physically secure, the target EJB container may be
     configured to trust all client containers.  After a trust relationship is
     set up, the target EJB container does not need to independently
     authenticate the initiating client principal sent by the intermediate
     container on invocations.  Thus only the principal name of the initiating
     client (which may include a realm) needs to be propagated.
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:730</id>
			<description> For the current interoperability needs of J2EE, it is assumed that trust
     relationships are transitive, such that if a target container trusts an
     intermediate container, it implicitly trusts all containers trusted by the
     intermediate container.
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:731</id>
			<description> If no trust relationship has been set up between a target EJB container
     and an intermediate web or EJB container, the target container must not
     accept principals propagated from that intermediate container, hence the
     target container needs to have access to and independently verify the
     initiating client principal s authentication data.
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:732</id>
			<description> Web and EJB containers are required to support caller propagation mode
     (where the initiating client s principal is propagated down the chain of
     calls on enterprise beans) and run-as mode (where the web/EJB component's
     run-as identity is propagated).
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:733</id>
			<description>Application client containers that have authentication infrastructure
     (such as certificates, Kerberos) can 1) authenticate the user by
     interacting with an authentication service (e.g.  the Kerberos KDC) in the
     enterprise 2) inherit an authentication context which was established at
     system login time from the operating system process, or 3) obtain the
     user's certificate from a client-side store.
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:734</id>
			<description>If there is no authentication infrastructure installed in the client's
     environment, or the authentication infrastructure is not capable of
     authenticating at the transport protocol layer, the client may send its
     pri-vate credentials (e.g.  password) over a secure connection to the EJB
     server, which authenticates the user by interacting with an authentication
     service
 
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:735</id>
			<description>The secure interoperability requirements for EJB2.0 and other J2EE1.3
     containers are based on Conformance Level 0 of the Common Secure
     Interoperability version 2 (CSIv2)
			</description>
			<location chapter="15" section="8.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:736</id>
			<description>EJB, web and application client containers must support all
     requirements of Conformance Level 0 of the CSIv2 specification.
			</description>
			<location chapter="15" section="8.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:737</id>
			<description> EJB, web and application client containers are required to support both
     SSL3.0 and TLS1.0 as security protocols for IIOP.
			</description>
			<location chapter="15" section="8.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:738</id>
			<description>Compliant containers must be capable of using the following public key
     SSL/TLS ciphersuites based on policies set by the administrator: 
     TLS_RSA_WITH_RC4_128_MD5 
     SSL_RSA_WITH_RC4_128_MD5
     TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA 
     SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA 
     TLS_RSA_EXPORT_WITH_RC4_40_MD5 
     SSL_RSA_EXPORT_WITH_RC4_40_MD5
     TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
     SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
			</description>
			<location chapter="15" section="8.2"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:739</id>
			<description>Support for Kerberos ciphersuites is not specified.</description>
			<location chapter="15" section="8.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:740</id>
			<description>EJB containers must be capable of inserting the CSIv2 tagged components
     into the IORs for EJBObject and EJBHome references, based on the deployer
     or administrator's security policy settings.
     EJB containers must follow the Conformance Level 0 rules described in
     the CSIv2 specification for constructing these IORs
			</description>
			<location chapter="15" section="8.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:741</id>
			<description>EJB containers must also be capable of creating IORs that allow access
     to enterprise beans over unprotected IIOP, based on the security policies
     set by the deployer or administrator.
			</description>
			<location chapter="15" section="8.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:742</id>
			<description>In scenarios where client authentication does not occur at the
     transport layer it is necessary to support transfer of authentication data
     between two containers in the IIOP message service context.  When an
     intermediate client container does not have authentication data for the
     initiating client, it is necessary to support propagation of client
     principals in the IIOP message service context
			</description>
			<location chapter="15" section="8.2.3"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:743</id>
			<description>It is assumed that all information exchanged between client and server
     at the transport layer is also available to the containers:  e.g.  the
     certificates used for authentication at the SSL layer may be used by the
     server container for authorization.
			</description>
			<location chapter="15" section="8.2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:744</id>
			<description>Case 1: Application client invocations on enterprise beans with mutual
	  authentication between the application client and EJB container (C and
	  S1) at the SSL layer (scenario 2.1 in section 15.3.2, interoperability
	  requirement 4.1 in section 15.4).  E.g.  this is possible when the
	  enter-prise has a Kerberos-based authentication infrastructure or when
	  client-side certificates have been installed. 
			</description>
			<location chapter="15" section="8.2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:745</id>
			<description> Case 2: Application client invocations on enterprise beans with
	  server-only authentication between the application client and EJB
	  container (C and S1) at the SSL layer (scenario 2.2 in section 15.3.2,
	  interoperability requirement 4.2 in section 15.4).  This usually
	  happens when the client cannot authenticate in the transport.  In this
	  case, the client container must be capable of insert-ing into the IIOP
	  message a CSIv2 security context with a client authenti cation token
	  that con-tains the client C s authentication data.  Once the EJB
	  container S1 has authenticated the client, it may or may not maintain
	  state about the client, so subsequent invocations from the client on
	  the same network connection may need to be authenticated again.  The
	  client and server con-tainers must follow the Conformance Level 0
	  rules in the CSIv2 specification for client authen-tication.  In
	  particular, support for the GSSUP username-password authentication
	  mechanism is required.  Support for other GSSAPI mechanisms (such as
	  Kerberos) to perform client authen-tication at the IIOP layer is
	  optional.  
			</description>
			<location chapter="15" section="8.2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:746</id>
			<description> Case 3:  Invocations from Web/EJB clients to enterprise beans with a trust
	  relationship between the cli-ent container S1 and server container S2
	  (scenarios 1,3 and 4 in section 15.3.3, interoperability requirements
	  five and six in section 15.4).  S2 does not need to independently
	  authenticate the initiating client C.  In this case the client
	  container S1 must insert into the IIOP message a secu-rity context
	  with an identity token in the format described in the CSIv2
	  specification.  The prin-cipal may be propagated as an X.509
	  certificate ch ain or as a X.501 distinguished name or as a principal
	  name encoded in the GSS exported name format, as described in the
	  CSIv2 specifica-tion.  The identity propagated is determined as
	  follows:  " If the client Web/EJB component is configured to use
	  caller identity, and the caller C authenticated itself to S1, then the
	  identity token contains the initiating client C s identity.  " If the
	  client component is configured to use caller identity, and the caller
	  C did not authenticate itself to S1, then the identity token contains
	  the anonymous type.  " If the client component is configured to use a
	  run-as identity then the identity token contains the run-as identity.
			</description>
			<location chapter="15" section="8.2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:747</id>
			<description>J2EE containers are required to support the stateless mode of propagating
     principal and authentication information defined in CSIv2 (where the server
     does not store any state for a particular client principal across
     invocations), and may optionally support the stateful mode.
			</description>
			<location chapter="15" section="8.2.3"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:748</id>
			<description>The caller principal String provided by
     EJBContext.getCallerPrincipal().getName() is defined as follows:  
     
	  For case one, the principal should be derived from the distinguished
	  name obtained from the first X.509 certificate in the client s
	  certificate chain that was provided to the server during SSL mutual
	  authentication.

	  For case two, the principal should be derived from the username
	  obtained from the client authentication token in the CSIv2 security
	  context of the IIOP message.  For the GSSUP user-name- password
	  mechanism, the principal should be derived from the username in the
	  GSSUP::InitialContextToken structure.


	  For case three, the principal depends on the identity token type in
	  the CSIv2 security context:   If the type is X.509 certificate chain,
	  then the principal should be derived from the distinguished name from
	  the first certificate in the chain.  If the type is distinguished
	  name, then the principal should be derived from the distin-guished
	  name. If the type is principal name propaga ted as a GSS exported
	  name, then the principal should be derived from the mechanism-specific
	  principal name. If the anonymous principal type was propagated or
	  the identity token was absent, then
	  EJBContext.getCallerPrincipal().getName() returns a product-specific
	  unauthenticated principal name.
			</description>
			<location chapter="15" section="8.2.3"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:749</id>
			<description>At product installation or application deployment time, client and
     server container administrators may optionally configure the container and
     SSL infrastructure as described below.  These preferences may be specified
     at any level of granularity (e.g.  per host or per container process or per
     enterprise bean).  Configure the list of supported SSL cipher suites in
     preference order.

	  For server containers, configure a list of trusted client container
	  principals with whom the server has a trust relationship.

	  Configure authentication preferences and requirements (e.g.  if the
	  server prefers authenticated clients to anonymous clients).  In
	  particular, if a trust relationship has been configured between two
	  servers, then mutual authentication should be required unless there is
	  physical network security.

	  If the client and server are using certificates for authentication,
	  configure a trusted common certificate authority for both client and
	  server.  If using Kerberos, configure the client and server with the
	  same KDC or cooperating KDCs.

	  Configure a restricted list of trusted server principals that a client
	  container is allowed to inter-act with, to prevent the client s
	  private credentials such as password from being sent to untrusted
	  servers.
			</description>
			<location chapter="15" section="8.2.4"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:750</id>
			<description>Client containers determine whether to use SSL for an enterprise bean
     invocation by using the security policies configured by the client
     administrator for interactions with the target host or enterprise bean, and
     the target_requires information in the CSIv2 tagged component in the target
     enterprise bean's IOR.
			</description>
			<location chapter="15" section="8.2.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:751</id>
			<description>If either the client configuration requires secure interactions with
     the enterprise bean, or the enterprise bean requires a secure transport,
     the client should initiate an SSL connection to the server.  The client
     must follow the rules described in the CSIv2 specification Conformance
     Level 0 for interpreting security information in IORs and including
     security context information in IIOP messages
			</description>
			<location chapter="15" section="8.2.5"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:752</id>
			<description>When an EJB container receives an IIOP message, its behavior depends on
     deployment time configura-tion, run-time information exchanged with the
     client at the SSL layer, and principal/authentication data contained in the
     IIOP message service context
			</description>
			<location chapter="15" section="8.2.5"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:753</id>
			<description>When the administrator changes the security policies associated with an
     enterprise bean, the IORs for EJB references should be updated.  When the
     bean has existing clients holding IORs, it is recommended that the security
     policy change should be handled by the client and server containers
     transparently to the client application if the old security policy is
     compatible with the new one.  This may be done by using interoperable GIOP
     1.2 forwarding mechanisms.
			</description>
			<location chapter="15" section="8.2.5"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="deprecated" testable="true">
			<id>EJB:SPEC:754</id>
			<description>          When the tools convert the EJB 1.0 deployment descriptor to the
          EJB 1.1 XML format, they should place the definitions of the
          environment properties into the ejb10-properties subcontext of
          the environment naming context. The env-entry elements should be
          defined as follows: the env-entry-name element contains the name
          of the environment property, the env-entry-type must be
          java.lang.String, and the optional env-entry-value contains the
          environment property value.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section=""/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:755</id>
			<description>          The Container provides an implementation of the JNDI naming
          context that stores the enterprise bean environment, and makes the
          environment naming context available to the enterprise bean
          instances at runtime.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="16" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:756</id>
			<description>          The Container also provides the tools that allow the Deployer to
          create and manage the environment of each enterprise bean.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="16" section="2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:756.1</id>
					<description>            The container provider must provide a deployment tool that
            allows the Deployer to set and modify the values of the
            enterprise bean's environment entries.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="2.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:756.2</id>
					<description>            The Container Provider must provide the deployment tools that
            allow the Deployer to perform the tasks described in section
            20.3.3. The deployment tools provided by the EJB Container
            provider must be able to process the information supplied in the
            ejb-ref and ejb-local-ref elements in the deployment descriptor.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="3.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:756.3</id>
					<description>            The Container Provider must provide the deployment tools that
            allow the Deployer to perform the tasks described in section
            20.4.2.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="4.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:756.4</id>
					<description>            The container provider must provide the deployment tools that
            allow the Deployer to perform the tasks described in section
            20.5.2.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:756.5</id>
					<description>            The container provider must provide the deployment tools that
            allow the Deployer to perform the tasks described in section
            20.6.2.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="6.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:757</id>
			<description>          All instances of an enterprise bean within the same home share
          the same environment entries; the environment entries are not
          shared with other enterprise beans.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:757.1</id>
					<description>            An environment entry is scoped to the enterprise bean whose
            declaration contains the env-entry element. This means that
            the environment entry is inaccessible from other enterprise
            beans at runtime, and that other enterprise beans may define
            env-entry elements with the same env-entry-name without
            causing a name conflict.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="2.1.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:757.2</id>
					<description>            An EJB reference is scoped to the enterprise bean whose
            declaration contains the ejb-ref or ejb-local-ref element. This
            means that the EJB reference is not accessible to other
            enterprise beans at runtime, and that other enterprise beans
            may define ejb-ref and/or ejb-local-ref elements with the same
            ejb-ref-name without causing a name conflict.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="3.1.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:757.3</id>
					<description>            A web service reference is scoped to the enterprise bean whose
            declaration contains the service-ref element. This means that
            the web service reference is not accessible to other enterprise
            beans at runtime, and that other enterprise beans may define
            service-ref elements with the same service-ref-name without
            causing a name conflict.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="4.1.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:757.4</id>
					<description>            A resource manager connection factory reference is scoped to
            the enterprise bean whose declaration contains the resource-ref
            element. This means that the resource manager connection
            factory reference is not accessible from other enterprise
            beans at runtime, and that other enterprise beans may define
            resource-ref elements with the same res-ref-name without
            causing a name conflict.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="5.1.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:757.5</id>
					<description>            A resource environment reference is scoped to the enterprise
            bean whose declaration contains the resource-env-ref
            element. This means that the resource environment reference is
            not accessible to other enterprise beans at runtime, and that
            other enterprise beans may define resource-env-ref elements
            with the same resource-env-ref-name without causing a name
            conflict.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="6.1.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:758</id>
			<description>          Enterprise bean instances are not allowed to modify the bean s
          environment at runtime.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="16" section="2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:758.1</id>
					<description>            The Container must ensure that the enterprise bean instances
            have only read access to their environment variables. The
            Container must throw the
            javax.naming.OperationNotSupportedException from all the
            methods of the javax.naming.Context interface that modify the
            environment naming context and its subcontexts.
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
					</keywords>
					<location chapter="16" section="2.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:759</id>
			<description>          If an enterprise bean is deployed multiple times in the same
          Container, each deployment results in the creation of a distinct
          home. The Deployer may set different values for the enterprise
          bean environment entries for each home.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:760</id>
			<description>          In general, lookups of objects in the JNDI java: namespace are
          required to return a new instance of the requested object every
          time. Exceptions are allowed for the following: 

           The container knows the object is immutable (for example,
           objects of type java.lang.String) or knows that the application
           can't change the state of the object

            /

            or "The object is defined to be a singleton, such that only
            one instance of the object may exist in the JVM

            /

            The name used for the lookup is defined to return an instance
            of the object that might be shared. The name java:comp/ORB is
            such a name.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="16" section="2"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:761</id>
			<description>          The object returned for lookups of objects in the JNDI java: 
          namespace may be a shared instance of the object when:

          The container knows the object is immutable (for example, objects
          of type java.lang.String) or knows that the application can't
          change the state of the object

          /

          or "The object is defined to be a singleton, such that only
          one instance of the object may exist in the JVM
          
          /

          The name used for the lookup is defined to return an instance
          of the object that might be shared. The name java:comp/ORB is
          such a name. 
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Naming</keyword>
			</keywords>
			<location chapter="16" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:762</id>
			<description>          The environment entry values may be one of the following Java
          types: String, Character, Integer, Boolean, Double, Byte, Short,
          Long, and Float.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="2.1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:763</id>
			<description>          The naming context must include all the environment entries
          declared by the Bean Provider, with their values supplied in the
          deployment descriptor or set by the Deployer.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="2.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:764</id>
			<description>          The environment naming context must allow the Deployer to create
          subcontexts if they are needed by an enterprise bean.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="2.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:765</id>
			<description>          The deployment descriptor allows the Application Assembler to
          link an EJB reference declared in one enterprise bean to another
          enterprise bean contained in the same ejb-jar file, or in another
          ejb-jar file in the same J2EE application unit.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:766</id>
			<description>          Container provider must support deployment of an ejb-jar whose
          deployment descriptor contains ejb-link elements using the
          following syntax: "The Application Assembler may specify the path
          name of the ejb-jar file containing the referenced enterprise
          bean and appends the ejb-name of the target bean separated from
          the path name by # . The path name is relative to the referencing
          application component jar file. In this manner, multiple beans
          with the same ejb-name may be uniquely identified when the
          Application Assembler cannot change ejb-names."
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:10766</id>
			<description>          
          Enterprise beans refer to resource factories using logical names called
resource manager connection
factory references.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:767</id>
			<description>          It is possible to obtain multiple connections from a resource
          managerfactory object by calling the factory object multiple
          times.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5.1.1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:768</id>
			<description>          By default, connections to a resource manager are shareable
          across other enterprise beans in the application that use the
          same resource in the same transaction context.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5.1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:769</id>
			<description>          The name of the environment entry is relative to the
          java:comp/env context. XXX Note: shouldn't this assertion be
          in 20.2 instead of a res-env-ref specific sub-section?
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5.1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:770</id>
			<description>          If the Bean Provider sets the res-sharing-scope of a resource
          manager connection factory reference to Unshareable, the
          Container must not attempt to share the connections obtained from
          the resource manager connection factory reference.  (Connections
          obtained from the same resource manager connection factory
          through a different resource manager connection factory
          reference may be shareable.)
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:771</id>
			<description>          The EJB Container provider is responsible for providing the
          implementation of the resource manager connection factory classes
          for the resource managers that are configured with the EJB
          Container.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:772</id>
			<description>          If the Bean Provider sets the res-auth of a resource manager
          connection factory reference to Application, the Container must
          allow the bean to perform explicit programmatic sign-on using the
          resource manager's API.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:773</id>
			<description>          The Container must provide tools that allow the Deployer to set
          up resource manager sign-on information for the resource manager
          references whose res-auth element is set to Container. The
          minimum requirement is that the Deployer must be able to specify
          the user/password information for each resource manager
          connection factory reference declared by the enterprise bean, and
          the Container must be able to use the user/password combination
          for user authentication when obtaining a connection to the
          resource by invoking the resource manager connection factory.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:774</id>
			<description>          If the container provides a mechanism to pool connections to the
          resources for the enterprise beans, the pooling must be
          transparent to the enterprise beans.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="5.3"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:775</id>
			<description>          An EJB 2.0 or EJB 1.1 compliant Container may implement support
          for the EJB 1.0 style environment properties.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:776</id>
			<description>          If the Container does not implement support for the EJB 1.0 style
          environment properties, it should throw a RuntimeException (or
          subclass thereof) from the EJBContext.getEnvironment() method.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="7"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="deprecated" testable="true">
			<id>EJB:SPEC:777</id>
			<description>          The Container should provide the entries declared in the
          ejb10-properties subcontext to the instances as a
          java.util.Properties object that the instances obtain by invoking
          the EJBContext.getEnvironment() method.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:778</id>
			<description>        A message destination reference is scoped to the enterprise bean
        whose declaration contains the message- destination-ref
        element. This means that the message destination reference is not
        accessible to other enterprise beans at runtime, and that other
        enterprise beans may define message-destination-ref elements with
        the same message-destination-ref-name without causing a name
        conflict.
      
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>JMS</keyword>
			</keywords>
			<location chapter="16" section="7.1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:779</id>
			<description>         A J2EE product must support the deployment of a J2EE application
         where the target of an message-destination-link element
         is a message-destination element packaged in another EJB module of
         the same J2EE application.
      
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>JMS</keyword>
			</keywords>
			<location chapter="16" section="7.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:780</id>
			<description>        A J2EE product must support the deployment of a J2EE application
        using the following syntax in the message-destination-link
        element of the referencing application component: The Application
        Assembler specifies the path name of the ejb-jar file containing
        the referenced message destination and appends the
        message-destination-name of the target destination separated from
        the path name by # . The path name is relative to the referencing
        application component jar file. In this manner, multiple
        destinations with the same message-destination- name may be
        uniquely identified.
      
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>JMS</keyword>
			</keywords>
			<location chapter="16" section="7.2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:781</id>
			<description>        The Container Provider must provide the deployment tools that allow
        the Deployer to perform the tasks described in subsection
        EJB.20.7.3.

        The tools must be able to inform the Deployer of the message flow
        between consumers and producers sharing common message
        destinations. The tools must also be able to inform the Deployer of
        any unresolved message destination references, and allow him or her
        to resolve a message destination reference by binding it to a
        specified compatible target object in the environment.
      
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>JMS</keyword>
			</keywords>
			<location chapter="16" section="7.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:782</id>
			<description>          The Container must make the UserTransaction interface available
          to the enterprise beans that are allowed to use this interface
          (only session and message-driven beans with bean-managed
          transaction demarcation are allowed to use this interface) in
          JNDI under the name java:comp/UserTransaction.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:783</id>
			<description>          The Container must not make the UserTransaction interface
          available to the enterprise beans that are not allowed to use
          this interface. The Container should throw
          javax.naming.NameNotFoundException if an instance of an
          enterprise bean that is not allowed to use the UserTransaction
          interface attempts to look up the interface in JNDI.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="16" section="8"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:784</id>
			<description>The Application Assembler (which could be the same party as the Bean
     Provider) may define security roles for an application composed of one or
     more enterprise beans.
			</description>
			<location chapter="17" section="1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:785</id>
			<description>The Applications Assembler can define (declaratively in the deployment
     descriptor) method permissions for each security role.
     
     The Application Assembler specifies in the deployment descriptor
     whether the caller s security identity or a run-as security identity should
     be used for the execution of the bean s methods.
			</description>
			<location chapter="17" section="1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:786</id>
			<description>The Application Assembler should specify the requirements for the
     caller s principal management of enterprise bean invocations by means of
     the security-identity deployment descriptor element and as part of the
     description.
  
     If use-caller-identity is specified as the value of the secu-rity- identity
     element, the caller principal is propagated from the caller to the callee.
     (That is, the called enterprise bean will see the same returned value of
     the EJBContext.getCallerPrinci-pal() as the calling enterprise bean.)  If
     the run-as element is specified, a security principal that has been
     assigned to the specified security role will be used for the execution of
     the bean s methods and will be visible as the caller principal in the
     callee.
			</description>
			<location chapter="17" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:787</id>
			<description>The Deployer is responsible for assigning principals, or groups of
     principals, which are defined in the target operational environment, to the
     security roles defined by the Application Assembler for the enter-prise
     beans in the deployment descriptor.  
     
     The Deployer is also responsible for assigning principals for the run-as
     identities specified by the Application Assembler.

     The Deployer is further responsible for configuring other aspects of the
     security management of the enterprise beans, such as principal mapping for
     inter-enterprise bean calls, and principal mapping for resource manager
     access.
			</description>
			<location chapter="17" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:788</id>
			<description>At runtime, a client will be allowed to invoke a business method
     only if the principal associated with the client call has been
     assigned by the Deployer to have at least one security role that is allowed
     to invoke the business method or if the Application Assembler has specified
     that security authorization is not to be checked for the method.
			</description>
			<location chapter="17" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:789</id>
			<description>The Container Provider is responsible for enforcing the security
     policies at runtime, providing the tools for managing security at runtime,
     and providing the tools used by the Deployer to manage security during
     deployment. 
			</description>
			<location chapter="17" section="1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:790</id>
			<description>An enterprise bean business method can invoke another enterprise bean
     via the other bean s home or component interface.
			</description>
			<location chapter="17" section="2.1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:791</id>
			<description>The management of caller principals passed on inter-enterprise bean
     invocations (i.e.  principal delegation) is set up by the Deployer and
     System Administrator in a Container-specific way.  The Bean Provider and
     Application Assembler should describe all the requirements for the caller s
     principal management of inter-enterprise bean invocations as part of the
     description.
			</description>
			<location chapter="17" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:792</id>
			<description>The EJB architecture does not define the operating system principal
     under which enterprise bean methods execute.  Therefore, the Bean Provider
     cannot rely on a specific principal for accessing the underlying OS
     resources, such as files
			</description>
			<location chapter="17" section="2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:793</id>
			<description>The Bean Provider should neither implement security mechanisms nor
     hard-code security policies in the enterprise beans business methods.
     Rather, the Bean Provider should rely on the security mecha-nisms provided
     by the EJB Container, and should let the Application Assembler and Deployer
     define the appropriate security policies for the application.
			</description>
			<location chapter="17" section="2.4"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:794</id>
			<description>The Bean Provider and Application Assembler may use the deployment
     descriptor to convey security related information to the Deployer.  The
     information helps the Deployer to set up the appropriate security policy
     for the enterprise bean application.
			</description>
			<location chapter="17" section="2.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:795</id>
			<description>The jakarta.ejb.EJBContext interface provides two methods (plus two
     deprecated methods that were defined in EJB 1.0) that allow the Bean
     Provider to access security information about the enter-prise bean s
     caller.
     
     The Bean Provider can invoke the getCallerPrincipal and isCallerInRole
     methods only in the enterprise bean s business methods for which the
     Container has a client security context, as specified in Table 2 on page
     87, Table 3 on page 100, Table 4 on page 197, and Table 10 on page 279,
     and Table 12 on page 344.  If they are otherwise invoked when no security context
     exists, they should throw the java.lang.IllegalStateException runtime
     exception.
			</description>
			<location chapter="17" section="2.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:796</id>
			<description> The getCallerIdentity() and isCallerInRole(Identity role) methods were
     depre-cated in EJB 1.1.  The Bean Provider must use the
     getCallerPrincipal() and isCallerIn-Role( String roleName) methods for new
     enterprise beans.
     
     An EJB 2.0 or 1.1 compliant container may choose to implement the two
     deprecated methods as fol-lows.  " A Container that does not want to
     provide support for this deprecated method should throw a RuntimeException
     (or subclass of RuntimeException) from the getCallerIdentity() method.
     
	  A Container that does not want to provide support for this deprecated
	  method should throw a RuntimeException (or subclass of
	  RuntimeException) from the getCallerIdentity() method.
	  
	  A Container that wants to provide support for the getCallerIdentity()
	  method should return an instance of a subclass of the
	  java.security.Identity abstract class from the method.  The getName()
	  method invoked on the returned object must return the same value that
	  getCallerPrincipal().getName() would return.  
	  
	  A Container that does not want to provide support for this deprecated
	  method should throw a RuntimeException (or subclass of
	  RuntimeException) from the isCallerIn-Role( Identity identity) method.

	  A Container that wants to implement the isCallerInRole(Identity
	  identity) method should implement it as follows:  
	  public isCallerInRole(Identity identity) { 
	    return isCallerInRole(identity.getName());
	  }
			</description>
			<location chapter="17" section="2.5"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:797</id>
			<description>An enterprise bean can invoke the getCallerPrincipal() method to obtain
     a java.security.  Principal interface representing the current caller.
     The enterprise bean can then obtain the distinguished name of the caller
     principal using the getName() method of the java.security.Principal
     interface.  If the security identity has not been established, getCallerPrincipal
     returns the container's represenation of the authenticated identity.
     
     The meaning of the current caller, the Java class that implements the
     java.security.Principal interface, and the realm of the principals returned
     by the getCallerPrincipal() method depend on the operational environment
     and the configuration of the application.
			</description>
			<location chapter="17" section="2.5"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:798</id>
			<description>The enterprise bean code uses the isCallerInRole(String roleName)
     method to test whether the current caller has been assigned to a given
     security role.
			</description>
			<location chapter="17" section="2.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:799</id>
			<description>The Bean Provider must declare each security role referenced in the
     code using the security-role-ref element as follows:  
     
	  Declare the name of the security role using the role-name element.
	  The name must be the security role name that is used as a parameter to
	  the isCallerInRole(String role-Name) method.

	  Optionally provide a description of the security role in the
	  description element.
	 
     A security role reference, including the name defined by the role-name
     element, is scoped to the session or entity bean element whose declaration
     contains the security-role-ref element.
			</description>
			<location chapter="17" section="2.5"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:800</id>
			<description>The Application Assembler (which could be the same party as the Bean
     Provider) may define a security view of the enterprise beans contained in
     the ejb-jar file.  Providing the security view in the deployment descriptor
     is optional for the Bean Provider and Application Assembler.

     The Application Assembler defines method permissions for each security
     role.
			</description>
			<location chapter="17" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:801</id>
			<description>If the Bean Provider has declared any security role references using
     the security-role-ref elements, the Application Assembler must link all
     the security role references listed in the security- role-ref elements to
     the security roles defined in the security-role elements.
			</description>
			<location chapter="17" section="3"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:802</id>
			<description>Defining the security roles in the deployment descriptor is optional
     for the Application Assembler.
			</description>
			<location chapter="17" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:803</id>
			<description>The Application Assembler is responsible for the following:  
     
	  Define each security role using a security-role element.

	  Use the role-name element to define the name of the security role.

	  Optionally, use the description element to provide a description of a
	  security role.
			</description>
			<location chapter="17" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:804</id>
			<description> The security roles defined by the security-role elements are scoped to
     the ejb-jar file level, and apply to all the enterprise beans in the
     ejb-jar file.
			</description>
			<location chapter="17" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:805</id>
			<description>The Application Assembler defines the method permissions relation in
     the deployment descriptor using the method-permission elements as follows.
     
	  Each method-permission element includes a list of one or more security
	  roles and a list of one or more methods.  All the listed security
	  roles are allowed to invoke all the listed methods.  Each security
	  role in the list is identified by the role-name element, and each
	  method (or a set of methods, as described below) is identified by the
	  method element.  An optional description can be associated with a
	  method-permission element using the description element.

	  The method permissions relation is defined as the union of all the
	  method permissions defined in the individual method-permission
	  elements.

	  A security role or a method may appear in multiple method-permission
	  elements.
			</description>
			<location chapter="17" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:806</id>
			<description> The Application Assembler uses the unchecked element instead of a role
     name in the method-permission element to indicate that a method should not
     be checked for authorization.
			</description>
			<location chapter="17" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:807</id>
			<description>If the method permission relation specifies both the unchecked element
     for a given method and one or more security roles, the method should not be
     checked for authorization.
			</description>
			<location chapter="17" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:808</id>
			<description>The Application Assembler can use the exclude-list element to indicate
     the set of methods that should not be called.  The Deployer should
     configure the enterprise bean s security such that no access is permitted
     to any method contained in the exclude-list.
			</description>
			<location chapter="17" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:809</id>
			<description>If a given method is specified both in the exclude-list element and in
     the method permission relation, the Deployer should configure the
     enterprise bean s security such that no access is permitted to the method.
			</description>
			<location chapter="17" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:810</id>
			<description>It is possible that some methods are not assigned to any security roles
     nor contained in the exclude-list element.  In this case, it is the
     responsibility of the Deployer to assign method permis-sions for all of the
     unspecified methods, either by assigning them to security roles, or by
     marking them as unchecked.
			</description>
			<location chapter="17" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:811</id>
			<description> The method element uses the ejb-name, method-name, and method-params
     elements to denote one or more methods of an enterprise bean s home,
     component, and/or web service endpoint interfaces.  There are three legal
     styles for composing the method element:
     Style 1: 
     
            &lt;method> 
                 &lt;ejb-name> EJBNAME&lt;/ejb-name> 
                 &lt;method-name>*&lt;/method-name> 
            &lt;/method>
            
     This style is used for referring to all of the home, component, and web
     service endpoint inter-face methods of a specified enterprise bean.

     Style 2:
     
            &lt;method> 
                 &lt;ejb-name> EJBNAME&lt;/ejb-name> 
                 &lt;method-name>METHOD&lt;/method-name> 
            &lt;/method> 
            
     This style is used for referring to a specified method of the home,
     component, or web service endpoint interface of the specified enterprise
     bean.  If there are multiple methods with the same overloaded name, this
     style refers to all of the overloaded methods.

      Style 3:
      
             &lt;method> 
                 &lt;ejb-name> EJBNAME&lt;/ejb-name> 
                 &lt;method-name> METHOD&lt;/method-name> 
                 &lt;method-params> 
                    &lt;method-param> PARAMETER_1&lt;/method-param> 
                    ... 
                    &lt;method-param> PARAMETER_N&lt;/method-param> 
                 &lt;/method-params> 
             &lt;/method>
      
      
     This style is used to refer to a specified method within a set of methods
     with an overloaded name.  The method must be defined in the specified
     enterprise bean s home, component, or web service endpoint interface.  If
     there are multiple methods with the same overloaded name, however, this
     style refers to all of the overloaded methods.
			</description>
			<location chapter="17" section="3.2"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:812</id>
			<description>The optional method-intf element can be used to differentiate methods
     with the same name and sig-nature that are multiply defined across the
     home, component, and/or web service endpoint interfaces of an enterprise
     bean.
			</description>
			<location chapter="17" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:813</id>
			<description> If the Application Assembler defines the security-role elements in the
     deployment descriptor, he or she is also responsible for linking all the
     security role references declared in the security- role-ref elements to
     the security roles defined in the security-role elements.
     
     The Application Assembler links each security role reference to a security
     role using the role-link element.  The value of the role-link element must
     be the name of one of the security roles defined in a security-role
     element.

     A role-link element must be used even if the value
     of role-name is the same as the value of the role-link reference.
			</description>
			<location chapter="17" section="3.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:814</id>
			<description>The Application Assembler typically specifies whether the caller's
     security identity should be used for the execution of the methods of an
     enterprise bean or whether a specific run-as identity should be used.  
     
     The Application Assembler uses the security-identity deployment descriptor
     element for this purpose.  The value of the security-identity element is
     either use-caller-identity or run-as.  The use-caller-identity element
     cannot be specified for message-driven beans or for entity beans that
     implement the TimedObject interface.
     
     Defining the security identities in the deployment descriptor is optional
     for the Application Assembler.
			</description>
			<location chapter="17" section="3.4"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:815</id>
			<description>The Application Assembler can use the run-as element to define a run-as
     identity for an enterprise bean in the deployment descriptor.  The run-as
     identity applies to the enterprise bean as a whole, that is, to all methods
     of the enterprise bean's home, component, and/or web service endpoint
     interfaces or to the message listener methods of a message-driven bean or
     the ejbTimeout method of an entity bean that implements the TimedObject
     interface, and all internal methods of the bean that they might in turn
     call.
     
     The Application Assembler is responsible for the following in the
     specification of run-as identities:  
     
	  Use the role-name element to define the name of the security role.

	  Optionally, use the description element to provide a description of
	  the principal that is expected to be bound to the run-as identity in
	  terms of its security role.
			</description>
			<location chapter="17" section="3.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:816</id>
			<description>The Deployer is responsible for assigning the security domain and
     principal realm to an enterprise bean application.
     
     The Deployer assigns principals and/or groups of principals (such as
     individual users or user groups) used for managing security in the
     operational environment to the security roles defined in the security-
     role elements of the deployment descriptor.
     
     The Deployer does not assign principals and/or principal groups to the
     security role references the principals and/or principals groups assigned
     to a security role apply also to all the linked security role references.
			</description>
			<location chapter="17" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:817</id>
			<description>The Deployer is responsible for configuring the principal delegation
     for inter-component calls.The Deployer must follow any instructions
     supplied by the Application Assembler

     If the use-caller-identity element is specified, the caller principal is
     propagated from one com-ponent to another (i.e., the caller principal of
     the first enterprise bean in a call-chain is passed to the enterprise beans
     down the chain).  
     
     If the Application Assembler specifies that a run-as identity be used on
     behalf of a particular enterprise bean, the Deployer must configure the
     enterprise beans such that the run-as principal is used as the caller
     principal on any calls that the enterprise bean makes to other beans, and
     that the run-as principal is propagated along the call-chain of those other
     beans (in the absence of the specification of any further run-as elements).
			</description>
			<location chapter="17" section="4.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:818</id>
			<description> Rules that the EJB client program must follow to ensure that the
     security context passed on the client calls, and possibly imported by the
     enterprise bean, do not conflict with the EJB Server s capabilities for
     association between a security context and transactions.  These rules are:
     
	  A transactional client cannot change its principal association within
	  a transaction.  This rule ensures that all calls from the client
	  within a transaction are performed with the same security context.

	  A Session Bean s client must not change its principal association for
	  the duration of the communication with the session object.  This rule
	  ensures that the server can associate a security identity with the
	  session instance at instance creation time, and never have to change
	  the security association during the session instance lifetime.

	  If transactional requests within a single transaction arrive from
	  multiple clients (this could hap-pen if there are intermediary objects
	  or programs in the transaction call-chain), al l requests within the
	  same transaction must be associated with the same security context.
			</description>
			<location chapter="17" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:819</id>
			<description>The EJB Container Provider is responsible for providing the deployment
     tools that the Deployer can use to perform the tasks defined in Section
     21.4
			</description>
			<location chapter="17" section="6.1"/>
		</assertion>
		<assertion required="false" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:820</id>
			<description>The EJB Container provides a security domain and one or more principal
     realms to the enterprise beans.  The EJB architecture does not specify how
     an EJB Server should implement a security domain, and does not define the
     scope of a security domain.
     
     The EJB Server can, but is not required to, provide support for multiple
     security domains, and/or multi-ple principal realms.
			</description>
			<location chapter="17" section="6.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:821</id>
			<description> The EJB Container Provider must provide the security mechanisms
     necessary to enforce the security policies set by the Deployer.  
     
     The EJB specification does not specify the exact mechanisms that must be
     implemented and supported by the EJB Server.
			</description>
			<location chapter="17" section="6.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:822</id>
			<description> The EJB Container Provider is responsible for providing the
     deployment tools that allow the Deployer to configure the principal
     delegation for calls from one enterprise bean to another.  The EJB
     Container is responsible for performing the principal delegation as
     specified by the Deployer.  
     
     The EJB Container must be capable of allowing the Deployer to specify that,
     for all calls from a single application within a single J2EE product, the
     caller principal is propagated on calls from one enterprise bean to another
     (i.e., the multiple beans in the call chain will see the same return value
     from getCall-erPrincipal()).

     The EJB Container must be capable of allowing the Deployer to specify that
     a run-as principal be used for the execution of the home, component, and/or
     web service endpoint interface methods of a session or entity bean or for
     the message li stener method of a message-driven bean.
			</description>
			<location chapter="17" section="6.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:823</id>
			<description> The EJB Container must provide access to the caller s security context
     information from the enterprise beans instances via the
     getCallerPrincipal() and isCallerInRole(String role-Name) methods.  The EJB
     Container must provide this context information during the execution of a
     business method invoked via the enterprise bean s home, component, message-listener, and/or
     web service endpoint interface, as defined in Table 2 on page 87, Table 3
     on page 100, Table 4 on page 197, and Table 10 on page 279, and Table 12 on page 344.  
     
     The Container must ensure that all enterprise bean method invocations
     received through the home and component interface are associated with some
     principal.  If the security identity has not been established, the container returns
     the container's representation of the unauthenticated identity. The Container must never
     return a null from the getCallerPrincipal() method.
     
     (Note : this may change)
			</description>
			<location chapter="17" section="6.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:824</id>
			<description>The EJB Container Provider is responsible for providing secure access
     to resource managers as described in Subsection 20.5.3.
			</description>
			<location chapter="17" section="6.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:825</id>
			<description> If the application requires that its clients are deployed in a
     different security domain, or if multiple applications deployed across
     multiple security domains need to interoperate, the EJB Container Provider
     is responsible for the mechanism and tools that allow mapping of
     principals.
			</description>
			<location chapter="17" section="6.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:826</id>
			<description> The EJB Container is responsible for enforcing the security policies
     defined by the Deployer.  The implementation of the enforcement mechanism
     is EJB Container implementation specific.  The EJB Container may, but does
     not have to, use the Java programming language security as the enforcement
     mechanism.
			</description>
			<location chapter="17" section="6.9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:827</id>
			<description>The general security enforcement requirements for the EJB
     Container follow:  
     
	  The EJB Container must provide enforcement of the client access
	  control per the policy defined by the Deployer.  A caller is allowed
	  to invoke a method if, and only if, the method is specified as unchecked
	  or the caller is assigned at least one of the security roles that includes
	  the method in its method permissions definition.  (That is, it is not meant that the
	  caller must be assigned all the roles associated with the method.)  If
	  the Container denies a client access to a business method, the
	  Container must throw the java.rmi.RemoteException (or its subclass,
	  the java.rmi.AccessException) to the client if the client is a remote
	  client, or the jakarta.ejb.EJBException (or its subclass, the
	  jakarta.ejb.AccessLocalExcep-tion) if the client is a local client.

	  The EJB Container must isolate an enterprise bean instance from other
	  instances and other application components running on the server.  The
	  EJB Container must ensure that other enter-prise bean instance s and
	  other application components are allowed to access an enterprise bean
	  only via the enterprise bean s component, home, and/or web service
	  endpoint interfaces.


	  The EJB Container must isolate an enterprise bean instance at runtime
	  such that the instance does not gain unauthorized access to privileged
	  system information.  Such information includes the internal
	  implementation classes of the container, the various runtime state and
	  context maintained by the container, object references of other
	  enterprise bean instances, or resource managers used by other
	  enterprise bean instances.  The EJB Container must ensure that the
	  interactions between the enterprise beans and the container are only
	  through the EJB archi-tected interfaces.

	  The EJB Container must ensure the security of the persistent state of
	  the enterprise beans.  " The EJB Container must manage the mapping of
	  principals on calls to other enterprise beans or on access to resource
	  managers according to the security policy defined by the Deployer.

	  The Container must allow the same enterprise bean to be deployed
	  independently multiple times, each time with a different security
	  policy .  The Container must allow multiple- deployed enterprise
	  beans to co-exist at runtime.
			</description>
			<location chapter="17" section="6.9"/>
		</assertion>
		<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:828</id>
			<description>The EJB Container may provide a security audit trail mechanism.  A
     security audit trail mechanism typ-ically logs all
     java.security.Exceptions.  It also logs all denials of access to EJB
     Servers, EJB Container, EJB component interfaces, EJB home interfaces, and
     EJB web service endpoint interfaces.
			</description>
			<location chapter="17" section="6.10"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:829</id>
			<description>The System Administrator is responsible for the administration of
     principals.  Security domain administration is beyond the scope of the EJB
     specification.
			</description>
			<location chapter="17" section="7.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:830</id>
			<description>If the client is in a different security domain than the target
     enterprise bean, the system administrator is responsible for mapping the
     principals used by the client to the principals defined for the enterprise
     bean.  The result of the mapping is available to the Deployer.
			</description>
			<location chapter="17" section="7.2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:831</id>
			<description>If the EJB Container provides an audit trail facility, the System
     Administrator is responsible for its management.
			</description>
			<location chapter="17" section="7.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:832</id>
			<description>Timer cancellation.</description>
			<location chapter="18" section="2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:832.1</id>
					<description>A timer may be cancelled by a bean before its expiration.</description>
					<location chapter="18" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:832.2</id>
					<description>If a timer is cancelled, the ejbTimeout method is not called.</description>
					<location chapter="18" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:832.3</id>
					<description>A timer is cancelled by calling its cancel method.</description>
					<location chapter="18" section="2"/>
					<comment>IMPLICITLY TESTED whenever timer is cancelled.</comment>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:833</id>
			<description>Timers survive container crashes and the activation/passivation and load/store cycles of the 
				enterprise beans that are registered with them.
			</description>
			<location chapter="18" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:834</id>
			<description>The Timer Service is accessed through the getTimerService() method of the EJBContext 
				interface.
			</description>
			<location chapter="18" section="2.1"/>
			<comment>IMPLICITLY TESTED whenever timer is created.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:835</id>
			<description>The timer creation methods allow a timer to be created as a single-event timer or as an 
				interval timer.
			</description>
			<location chapter="18" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:836</id>
			<description>The timer expiration (initial expiration in the case of an interval timer) may be expressed 
				either in terms of a duration or as an absolute time.
			</description>
			<location chapter="18" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:837</id>
			<description>Client-specific information at timer creation.  </description>
			<location chapter="18" section="2.1"/>
			<comment>DUPLICATED in 2.2</comment>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:837.1</id>
					<description>The Bean may pass some client-specific information at timer creation to help it recognize the 
						significance of the timer's expiration. This information is stored by the timer service and 
						available through the timer.
					</description>
					<location chapter="18" section="2.1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:837.2</id>
					<description>The information object must be serializable.</description>
					<location chapter="18" section="2.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:838</id>
			<description>The timer duration is expressed in terms of milliseconds.</description>
			<location chapter="18" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:839</id>
			<description>The createTimer methods return a Timer object that allows the bean to cancel the timer or 
				to obtain information about the timer prior to its cancellation and/or expiration (if it is a 
				single-event timer).
			</description>
			<location chapter="18" section="2.1"/>
			<comment>IMPLICITLY TESTED whenever timer is created.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:840</id>
			<description>The enterprise bean class of a bean that is to be registered with the timer service for timer 
				callbacks must implement the jakarta.ejb.TimedObject interface.
			</description>
			<location chapter="18" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:841</id>
			<description>If multiple timers have been created for a bean and will expire at approximately the
				same times, the Bean Provider must be prepared to handle timeout callbacks that are out of
				sequence.
			</description>
			<location chapter="18" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:842</id>
			<description>The Bean Provider must be prepared to handle extraneous calls to the ejbTimeout method in 
				the event that a timer expiration is outstanding when a call to the cancellation method has been 
				made.
			</description>
			<location chapter="18" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:843</id>
			<description>The ejbTimeout method is called within the scope of a new transaction that the container 
				starts prior to the invocation of the ejbTimeout method.
			</description>
			<location chapter="18" section="2.2"/>
			<comment>No API in a CMT bean for determining whether a transaction is taking place.</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:844</id>
			<description>Since the ejbTimeout method is an internal method of the bean class it has no
			client security context.  When getCallerPrincipal is called from within the ejbTimeout method,
			it returns the container's representation of an unauthenticated identity.
			</description>
			<location chapter="18" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:845</id>
			<description>If the timed object needs to make use of the identity of the timer to recognize the 
				significance of the timer expiration, it may use the equals method to compare it with any other timer 
				references it might have outstanding.
			</description>
			<location chapter="18" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:846</id>
			<description>The jakarta.ejb.Timer interface allows the Bean Provider to cancel a timer and to obtain 
				information about the timer.
			</description>
			<location chapter="18" section="2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:847</id>
			<description>The jakarta.ejb.TimerHandle interface allows the Bean Provider to obtain a serializable timer 
				handle that may be persisted.
			</description>
			<location chapter="18" section="2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:848</id>
			<description>If an enterprise bean creates a timer within a transaction, and if the transaction is rolled 
				back, the timer creation is rolled back.
			</description>
			<location chapter="18" section="2.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:849</id>
			<description>If an enterprise bean cancels a timer within a transaction, and if the transaction is rolled 
				back, the container rescinds the timer cancellation.
			</description>
			<location chapter="18" section="2.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:850</id>
			<description>If the ejbTimeout method is specified to have transaction attribute RequiresNew, and the
				transaction is rolled back, the container retries the timeout.
			</description>
			<location chapter="18" section="2.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:851</id>
			<description>A stateless session bean or entity bean that is to be registered with the Timer Service must 
				implement the jakarta.ejb.TimedObject interface
			</description>
			<location chapter="18" section="3.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:851.1</id>
					<description>If the bean has superclasses, then the ejbTimeout method may may be defined in the bean 
						class, or in any of its superclasses.
					</description>
					<location chapter="18" section="3.1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:852</id>
			<description>Serialization of timer handles.</description>
			<location chapter="18" section="3.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:852.1</id>
					<description>Since the TimerHandle interface extends java.io.Serializable, a client may serialize the 
						handle.
					</description>
					<location chapter="18" section="3.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:852.2</id>
					<description>The serialized handle may be used later to obtain a reference to the timer identified by
						the handle.
					</description>
					<location chapter="18" section="3.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:853</id>
			<description>A TimerHandle must not be passed as an argument or result of an enterprise bean's remote 
				interface or web service endpoint interface.
			</description>
			<location chapter="18" section="3.2"/>
			<comment>DUPLICATED in 2.3</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:854</id>
			<description>The Container must provide the implementation of the TimerService, Timer, and TimerHandle 
				interfaces.
			</description>
			<location chapter="18" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:855</id>
			<description>Timer instances must not be serializable.</description>
			<location chapter="18" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:856</id>
			<description>The container must implement a timer handle to be usable over the lifetime of the Timer.</description>
			<location chapter="18" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:857</id>
			<description>The Container must provide suitable implementations of the Timer equals(Object obj) and
				hashCode() methods.
			</description>
			<location chapter="18" section="4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:858</id>
			<description>The container must call the ejbTimeout method after the timed duration or the absolute time 
				specification in the timer creation method has passed.
			</description>
			<location chapter="18" section="4.2"/>
			<comment>DUPLICATED in 2.2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:859</id>
			<description>The timer service must begin to count down the timer duration upon timer creation.</description>
			<location chapter="18" section="4.2"/>
			<comment>DUPLICATED in 2.1</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:860</id>
			<description>The container must call the ejbTimeout method with the expired Timer.</description>
			<location chapter="18" section="4.2"/>
			<comment>DUPLICATED in 2.2</comment>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:861</id>
			<description>If container managed transaction demarcation is used and the RequiresNew transaction 
				attribute is specified, the container must begin a new transaction prior to invoking the ejbTimeout 
				method.
			</description>
			<location chapter="18" section="4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:862</id>
			<description>If a timer for an entity bean expires, and the bean has been passivated, the container must 
				call the ejbActivate and ejbLoad methods on the entity bean class before calling the ejbTimeout 
				method, as described in Sections 10.5.3 and 12.1.4.2.
			</description>
			<location chapter="18" section="4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:863</id>
			<description>Timer expiration.</description>
			<location chapter="18" section="4.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:863.1</id>
					<description>If the timer is a single-event timer, the container must cause the timer to no longer exist
						upon expiration.
					</description>
					<location chapter="18" section="4.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:863.2</id>
					<description>If a method is subsequently invoked on the timer after the completion of the ejbTimeout 
						method, the container must throw the jakarta.ejb.NoSuchObjectLocalException.
					</description>
					<location chapter="18" section="4.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:864</id>
			<description>Invoking the setRollbackOnly method from within the ejbTimeout method.
			</description>
			<location chapter="18" section="4.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:864.1</id>
					<description>If the Bean Provider invokes the setRollbackOnly method from within the ejbTimeout method,
						the container must rollback the transaction in which the ejbTimeout method is invoked.
					</description>
					<location chapter="18" section="4.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:864.2</id>
					<description>The container must retry the timeout after the transaction rollback.</description>
					<location chapter="18" section="4.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:865</id>
			<description>In the event of a container crash, any single-event timers that have expired during the 
				intervening time before container restart must cause the ejbTimeout method to be invoked upon restart.
			</description>
			<location chapter="18" section="4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id>EJB:SPEC:866</id>
			<description>In the event of a container crash, any interval timers that have expired during the 
				intervening time before container restart must cause the ejbTimeout method to be invoked at least once
				upon restart.
			</description>
			<location chapter="18" section="4.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:867</id>
			<description>Timer cancellation.</description>
			<location chapter="18" section="4.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:867.1</id>
					<description>When a timer's cancel method has been called, the container must cause the timer to no longer exist.
					</description>
					<location chapter="18" section="4.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:867.2</id>
					<description>If a method is subsequently invoked on the timer, the container must throw the 
						jakarta.ejb.NoSuchObjectLocalException.
					</description>
					<location chapter="18" section="4.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:868</id>
			<description>If the transaction in which the timer cancellation occurs is rolled back, the container must 
				restore the duration of the timer to the duration it would have had had if it had never been 
				cancelled.  
			</description>
			<location chapter="18" section="4.3"/>
			<sub-assertions>
				<assertion required="false" impl-spec="true" defined-by="technology" status="active" testable="false">
					<id>EJB:SPEC:868.1</id>
					<description>If the timer would have expired by the time that the transaction failed, the failure of 
						the transaction should result in the expired timer providing an expiration notification after the
						transaction rolls back.
					</description>
					<location chapter="18" section="4.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:869</id>
			<description>If an entity bean is removed, the container must remove the timers for that bean.</description>
			<location chapter="18" section="4.4"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:870</id>
			<description>          The Container provider provides tools that read and import the
          information contained in the XML deployment descriptor.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="19" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:871</id>
			<description>          All EJB 2.1 implementations must support EJB 1.1 and EJB 2.0 as
          well as EJB 2.1 deployment descriptors.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="19" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:872</id>
			<description>          The content of the XML elements is in general case sensitive
          (i.e., unless stated otherwise).
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
			</keywords>
			<location chapter="19" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:873</id>
			<description>Message-driven beans are never re-entrant.</description>
			<location chapter="19" section="23.2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:874</id>
			<description>          Generating the stubs of the EJBHome and EJBObject interfaces is
          the responsibility of the Container.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="20" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:875</id>
			<description>          Generating the stubs of the EJBHome and EJBObject interfaces is
          the responsibility of the Container.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="20" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:876</id>
			<description>          The container provider must support deployment of ejb-jar whose
          deployment descriptor includes the optional ejb-client-jar element.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="20" section="4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:876.1</id>
					<description>            The container provider must support deployment of ejb-jar whose
            deployment descriptor that includes the optional ejb-client-jar
            element and uses the "by-copy approach".
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
						<keyword>Packaging</keyword>
					</keywords>
					<location chapter="20" section="4"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:876.2</id>
					<description>            The container provider must support deployment of ejb-jar whose
            deployment descriptor that includes the optional ejb-client-jar
            element and uses the "by-reference approach".
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
						<keyword>Packaging</keyword>
					</keywords>
					<location chapter="20" section="4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:877</id>
			<description>          The container provider must support deployment of ejb-jar whose
          deployment descriptor includes the optional ejb-client-jar element.
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="20" section="4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:877.1</id>
					<description>            The container provider must support deployment of ejb-jar whose
            deployment descriptor that includes the optional ejb-client-jar
            element and uses the "by-copy approach".
          
					</description>
					<keywords>
						<keyword>Deployment</keyword>
						<keyword>Packaging</keyword>
					</keywords>
					<location chapter="20" section="4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:878</id>
			<description>        The container provider must support deployment of ejb-jar which
        include referenced bean client view classes by a reference to
        the ejb-client JAR file.
      
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="20" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:879</id>
			<description>        The container provider must support deployment of ejb-jar which
        include referenced bean client view classes by a reference to
        the ejb-jar file that contains the client view classes.
      
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="20" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:880</id>
			<description>        The container provider must support deployment of ejb-jar which
        include referenced bean client view classes by copy of the client
        view classes.
      
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="20" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:881</id>
			<description>          It is the responsibility of the provider of the container hosting
          the referenced beans to provide the system value classes and make
          them available for use when the client is deployed (e.g., the
          serializable value classes imple-menting the jakarta.ejb.Handle,
          jakarta.ejb.HomeHandle, jakarta.ejb.EJBMetaData,
          java.util.Enumeration, java.util.Collection, and
          java.util.Iterator interfaces).
        
			</description>
			<keywords>
				<keyword>Deployment</keyword>
				<keyword>Packaging</keyword>
			</keywords>
			<location chapter="20" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:882</id>
			<description>          An EJB 2.1 Container must make the EJB 2.1 APIs available to the
          enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:883</id>
			<description>          An EJB 2.1 Container must make the UserTransaction interface of
          the JTA 1.0.1 API available to the enterprise bean instances at
          runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:883.1</id>
					<description>            The EJB Container must include the JTA 1.0.1 extension, and it
            must provide the jakarta.transaction.UserTransaction interface
            to enterprise beans with bean-managed transaction demarcation
            through the jakarta.ejb.EJBContext interface.
          
					</description>
					<keywords>
						<keyword>Naming</keyword>
					</keywords>
					<location chapter="21" section="2.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:884</id>
			<description>          An EJB 2.1 Container must make the JMS 1.1 API available to the
          enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:885</id>
			<description>          An EJB 2.1 Container must make the "sending mail" part of the
          JavaMail 1.2 API available to the enterprise bean instances at
          runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:886</id>
			<description>          An EJB 2.1 Container must make the JAF 1.0 API available to the
          enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:887</id>
			<description>          An EJB 2.1 Container must make the JAXP 1.2 API available to the
          enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:888</id>
			<description>          An EJB 2.1 Container must make the JAXR 1.0 API available to the
          enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:889</id>
			<description>          An EJB 2.1 Container must make the JAX-RPC 1.0 API available to the
          enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:890</id>
			<description>          An EJB 2.1 Container must make the Connector 1.5 API available to the
          enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:891</id>
			<description>          An EJB 2.1 Container must make the Web Services 1.0 API available
          to the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:892</id>
			<description>          An EJB 2.1 Container must make the full set of the Java 2
          Platform, Standard Edition v1.4 (J2SE) APIs available to the
          enterprise bean instances at runtime. The Container is not
          allowed to subset the Java 2 platform APIs.
        
			</description>
			<keywords>
				<keyword>API</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:892.1</id>
					<description>            An EJB 2.1 Container must make the JDBC API from the Java 2
            Platform Standard Edition v1.4 available to the enterprise
            bean instances at runtime.
          
					</description>
					<keywords>
						<keyword>API</keyword>
					</keywords>
					<location chapter="21" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:892.2</id>
					<description>            An EJB 2.1 Container must make the RMI-IIOP API from the Java 2
            Platform Standard Edition v1.4 available to the enterprise
            bean instances at runtime.
          
					</description>
					<keywords>
						<keyword>API</keyword>
					</keywords>
					<location chapter="21" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:892.3</id>
					<description>            An EJB 2.1 Container must make the JNDI API from the Java 2
            Platform Standard Edition v1.4 available to the enterprise
            bean instances at runtime.
          
					</description>
					<keywords>
						<keyword>API</keyword>
					</keywords>
					<location chapter="21" section="2"/>
					<sub-assertions>
						<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:892.3.1</id>
							<description>                At the minimum, the EJB Container must provide a JNDI API
                name space to the enterprise bean instances. The EJB
                Container must make the name space available to an instance
                when the instance invokes the javax.naming.InitialContext
                default (no-arg) constructor.
              
							</description>
							<keywords>
								<keyword>Naming</keyword>
							</keywords>
							<location chapter="21" section="2.3"/>
						</assertion>
						<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:892.3.2</id>
							<description>                The EJB Container must make available at least the
                following objects in the name space: the home interfaces of
                other enterprise beans, the resource factories used by
                the enterprise beans, the web service interfaces used by
                the enterprise beans.
              
							</description>
							<keywords>
								<keyword>Naming</keyword>
							</keywords>
							<location chapter="21" section="2.3"/>
						</assertion>
						<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
							<id>EJB:SPEC:892.3.3</id>
							<description>                all the instances of the same enterprise bean must be
                presented with the same JNDI API name space.
              
							</description>
							<keywords>
								<keyword>Naming</keyword>
							</keywords>
							<location chapter="21" section="2.3"/>
						</assertion>
					</sub-assertions>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:892.4</id>
					<description>            An EJB 2.1 Container must make the JAXP 1.1 API from the Java 2
            Platform Standard Edition v1.4 available to the enterprise
            bean instances at runtime.
          
					</description>
					<keywords>
						<keyword>API</keyword>
					</keywords>
					<location chapter="21" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:892.5</id>
					<description>            An EJB 2.1 Container must make the JavaIDL API from the Java 2
            Platform Standard Edition v1.4 available to the enterprise
            bean instances at runtime.
          
					</description>
					<keywords>
						<keyword>API</keyword>
					</keywords>
					<location chapter="21" section="2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:893</id>
			<description>          A standard EJB Container should deny the J2SE permission
          java.security.AllPermission to the enterprise bean instances at
          runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:894</id>
			<description>          A standard EJB Container should deny the J2SE permission
          java.awt.AWTPermission to the enterprise bean instances at
          runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:895</id>
			<description>          A standard EJB Container should deny the J2SE permission
          java.io.FilePermission to the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:896</id>
			<description>          A standard EJB Container should deny the J2SE permission
          java.net.NetPermission to the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:897</id>
			<description>          A standard EJB Container must be able to grant the J2SE
          permissions java.util.PropertyPermission 'grant "read", "*" ' to
          the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:898</id>
			<description>          A standard EJB Container should deny the J2SE permissions
          java.util.PropertyPermission other than 'grant "read", "*" ' to
          the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:899</id>
			<description>          A standard EJB Container should deny the J2SE permission
          java.lang.reflect.ReflectPermission to the enterprise bean
          instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:900</id>
			<description>          A standard EJB Container should deny the J2SE permissions
          java.lang.RuntimePermission other than 'grant "queuePrintJob"' to
          the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:901</id>
			<description>          A standard EJB Container must be able to grant the J2SE
          permission java.lang.RuntimePermission 'grant "queuePrintJob"' to
          the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:902</id>
			<description>          A standard EJB Container should deny the J2SE permission
          java.lang.SecurityPermission to the enterprise bean instances at
          runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:903</id>
			<description>          A standard EJB Container should deny the J2SE permission
          java.io.SerializablePermission to the enterprise bean instances
          at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:904</id>
			<description>          A standard EJB Container should deny the J2SE permissions
          java.io.SerializablePermission other than 'grant "connect", "*"'
          to the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:905</id>
			<description>          A standard EJB Container must be able to grant the J2SE
          permission java.io.SerializablePermission 'grant "connect", "*"'
          to the enterprise bean instances at runtime.
        
			</description>
			<keywords>
				<keyword>Security</keyword>
			</keywords>
			<location chapter="21" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:906</id>
			<description>An enterprise beans remote home and remote interfaces are remote interfaces for Java RMI. The Container must ensure the semantics for passing arguments conforms to Java RMI. Non-remote objects must be passed by value.  Specifically, the EJB Container is not allowed to pass non-remote objects by reference on inter-EJB invocations when the calling and called enterprise beans are collocated in the same JVM. Doing so could result in the multiple beans sharing the state of a Java object, which would break the enterprise beans semantics.</description>
			<location chapter="21" section="2.7"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id>EJB:SPEC:907</id>
			<description>          An enterprise bean's remote home and remote interfaces are remote
          interfaces for Java RMI. The Container must ensure the semantics
          for passing arguments conforms to Java RMI. Non-remote objects
          must be passed by value.
        
			</description>
			<location chapter="21" section="2.7"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:907.1</id>
					<description>            The EJB Container is not allowed to pass non-remote objects by
            reference on inter-EJB invocations when the calling and called
            enterprise beans are collocated in the same JVM.
					</description>
					<location chapter="21" section="2.7"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id>EJB:SPEC:907.2</id>
					<description>            The EJB Container must ensure the semantics for passing
            arguments across an enterprise bean's local home and local
            interfaces conforms to the standard argument passing semantics
            of the Java programming language.
          		</description>
					<location chapter="21" section="2.7"/>
				</assertion>
			</sub-assertions>
		</assertion>
	</assertions>
</spec>

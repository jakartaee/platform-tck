<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
<next-available-id>262</next-available-id>
<previous-id>1</previous-id>
<technology>EJB</technology>
<id>EJB</id>
<name>Enterprise JavaBeans</name>
<version>3.2</version>
<assertions>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>1</id>
<description>
                            Constructs an AccessLocalException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>AccessLocalException</class-interface>
<method name="AccessLocalException" return-type="AccessLocalException"/>
</assertion>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>2</id>
<description>
                            Constructs an AccessLocalException with the specified  detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>AccessLocalException</class-interface>
<method name="AccessLocalException" return-type="AccessLocalException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>3</id>
<description>
                            Constructs an AccessLocalException with the specified  detail message and a nested exception.
                        </description>
<package>javax.ejb</package>
<class-interface>AccessLocalException</class-interface>
<method name="AccessLocalException" return-type="AccessLocalException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>4</id>
<description/>
<package>javax.ejb</package>
<class-interface>ActivationConfigProperty</class-interface>
<method name="propertyName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>5</id>
<description/>
<package>javax.ejb</package>
<class-interface>ActivationConfigProperty</class-interface>
<method name="propertyValue" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>6</id>
<description>
                            Indicates whether the container should cause the transaction to   rollback when the exception is thrown.
                        </description>
<package>javax.ejb</package>
<class-interface>ApplicationException</class-interface>
<method name="rollback" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>7</id>
<description>
                            Constructs an ConcurrentAccessException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>ConcurrentAccessException</class-interface>
<method name="ConcurrentAccessException" return-type="ConcurrentAccessException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>8</id>
<description>
                            Constructs an ConcurrentAccessException with the specified  detailed message.
                        </description>
<package>javax.ejb</package>
<class-interface>ConcurrentAccessException</class-interface>
<method name="ConcurrentAccessException" return-type="ConcurrentAccessException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
<id>9</id>
<description>
                            Constructs an ConcurrentAccessException with the specified  detail message and a nested exception.
                        </description>
<package>javax.ejb</package>
<class-interface>ConcurrentAccessException</class-interface>
<method name="ConcurrentAccessException" return-type="ConcurrentAccessException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>10</id>
<description>
                            Constructs a CreateException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>CreateException</class-interface>
<method name="CreateException" return-type="CreateException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>11</id>
<description>
                            Constructs a CreateException with the specified  detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>CreateException</class-interface>
<method name="CreateException" return-type="CreateException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>12</id>
<description>
                            Constructs a DuplicateKeyException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>DuplicateKeyException</class-interface>
<method name="DuplicateKeyException" return-type="DuplicateKeyException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>13</id>
<description>
                            Constructs a DuplicateKeyException with the specified  detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>DuplicateKeyException</class-interface>
<method name="DuplicateKeyException" return-type="DuplicateKeyException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>14</id>
<description>
                            Holds one of the following interface types of the target EJB :   [ Local business interface, Remote business interface,      Local Home interface, Remote Home interface ]
                        </description>
<package>javax.ejb</package>
<class-interface>EJB</class-interface>
<method name="beanInterface" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>15</id>
<description>
                            The ejb-name of the Enterprise Java Bean to which this reference   is mapped.
                              Only applicable if the target EJB is defined within the   same application or stand-alone module as the declaring component.
                        </description>
<package>javax.ejb</package>
<class-interface>EJB</class-interface>
<method name="beanName" return-type="java.lang.String"/>
</assertion>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>16</id>
<description>
                            The product specific name of the EJB component to which this  ejb reference should be mapped.
                              This mapped name is often a  global JNDI name, but may be a name of any form.     Application servers are not required to support any particular   form or type of mapped name, nor the ability to use mapped names.   The mapped name is product-dependent and often installation-dependent.   No use of a mapped name is portable.
                        </description>
<package>javax.ejb</package>
<class-interface>EJB</class-interface>
<method name="mappedName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>17</id>
<description>
                            The logical name of the ejb reference within the declaring component's  (java:comp/env) environment.
                        </description>
<package>javax.ejb</package>
<class-interface>EJB</class-interface>
<method name="name" return-type="java.lang.String"/>
</assertion>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>18</id>
<description>
                            Constructs an EJBAccessException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBAccessException</class-interface>
<method name="EJBAccessException" return-type="EJBAccessException"/>
</assertion>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>19</id>
<description>
                            Constructs an EJBAccessException with the specified  detailed message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBAccessException</class-interface>
<method name="EJBAccessException" return-type="EJBAccessException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>20</id>
<description>
                            Obtain the java.security.Identity of the caller.
                               This method is deprecated in EJB 1.1. The Container  is allowed to return alway null from this method. The enterprise  bean should use the getCallerPrincipal method instead.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getCallerIdentity" return-type="java.security.Identity"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>21</id>
<description>
                            Obtain the java.security.Principal that identifies the caller.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getCallerPrincipal" return-type="java.security.Principal"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>22</id>
<description>
                            Obtain the enterprise bean's remote home interface.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getEJBHome" return-type="jakarta.ejb.EJBHome"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>23</id>
<description>
                            Obtain the enterprise bean's local home interface.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getEJBLocalHome" return-type="jakarta.ejb.EJBLocalHome"/>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>24</id>
<description>
                            Obtain the enterprise bean's environment properties.
                                Note: If the enterprise bean has no environment properties   this method returns an empty java.util.Properties object. This method  never returns null.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getEnvironment" return-type="java.util.Properties"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>25</id>
<description>
                            Test if the transaction has been marked for rollback only.
                             An enterprise  bean instance can use this operation, for example, to test after an  exception has been caught, whether it is fruitless to continue  computation on behalf of the current transaction.   Only enterprise beans with container-managed transactions are allowed  to use this method.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getRollbackOnly" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>26</id>
<description>The Container throws the exception     if the instance is not allowed to use this method (i.e. the     instance is of a bean with bean-managed transactions).</description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getRollbackOnly" return-type="boolean">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>27</id>
<description>
                            Get access to the EJB Timer Service.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getTimerService" return-type="jakarta.ejb.TimerService"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>28</id>
<description>The Container throws the exception     if the instance is not allowed to use this method (e.g. if the bean     is a stateful session bean)</description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getTimerService" return-type="jakarta.ejb.TimerService">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>29</id>
<description>
                            Obtain the transaction demarcation interface.
                               Only enterprise beans with bean-managed transactions are allowed to  to use the UserTransaction interface. As entity beans must always use  container-managed transactions, only session beans or message-driven  beans with bean-managed transactions are allowed to invoke this method.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getUserTransaction" return-type="UserTransaction"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>30</id>
<description>The Container throws the exception     if the instance is not allowed to use the UserTransaction interface     (i.e. the instance is of a bean with container-managed transactions).</description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="getUserTransaction" return-type="UserTransaction">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="deprecated" testable="true">
<id>31</id>
<description>
                            Test if the caller has a given role.
                               This method is deprecated in EJB 1.1. The enterprise bean  should use the isCallerInRole(String roleName) method instead.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="isCallerInRole" return-type="boolean">
<parameters>
<parameter>java.security.Identity</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>32</id>
<description>
                            Test if the caller has a given security role.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="isCallerInRole" return-type="boolean">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>33</id>
<description>
                            Lookup a resource within the component's private naming context.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="lookup" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>34</id>
<description>
                            Mark the current transaction for rollback.
                             The transaction will become  permanently marked for rollback. A transaction marked for rollback  can never commit.   Only enterprise beans with container-managed transactions are allowed  to use this method.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="setRollbackOnly" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>35</id>
<description>The Container throws the exception     if the instance is not allowed to use this method (i.e. the     instance is of a bean with bean-managed transactions).</description>
<package>javax.ejb</package>
<class-interface>EJBContext</class-interface>
<method name="setRollbackOnly" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>36</id>
<description>
                            Constructs an EJBException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="EJBException" return-type="EJBException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>37</id>
<description>
                            Constructs an EJBException with the specified  detailed message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="EJBException" return-type="EJBException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>38</id>
<description>
                            Constructs an EJBException that embeds the originally thrown exception.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="EJBException" return-type="EJBException">
<parameters>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>39</id>
<description>
                            Constructs an EJBException that embeds the originally thrown exception  with the specified detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="EJBException" return-type="EJBException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>40</id>
<description>
                            Obtain the exception that caused the EJBException being thrown.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="getCausedByException" return-type="java.lang.Exception"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>41</id>
<description>
                            Returns the detail message, including the message from the nested  exception if there is one.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="getMessage" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>42</id>
<description>
                            Prints the composite message and the embedded stack trace to  the specified stream ps.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="printStackTrace" return-type="void">
<parameters>
<parameter>java.io.PrintStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>43</id>
<description>
                            Prints the composite message to System.err.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="printStackTrace" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>44</id>
<description>
                            Prints the composite message and the embedded stack trace to  the specified print writer pw.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBException</class-interface>
<method name="printStackTrace" return-type="void">
<parameters>
<parameter>java.io.PrintWriter</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>45</id>
<description>
                            Obtain the EJBMetaData interface for the enterprise Bean.
                             The  EJBMetaData interface allows the client to obtain information about  the enterprise Bean.    The information obtainable via the EJBMetaData interface is  intended to be used by tools.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="getEJBMetaData" return-type="jakarta.ejb.EJBMetaData"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>46</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="getEJBMetaData" return-type="jakarta.ejb.EJBMetaData">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>47</id>
<description>
                            Obtain a handle for the remote home object.
                             The handle can be used at   later time to re-obtain a reference to the remote home object, possibly   in a different Java Virtual Machine.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="getHomeHandle" return-type="jakarta.ejb.HomeHandle"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>48</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="getHomeHandle" return-type="jakarta.ejb.HomeHandle">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>49</id>
<description>
                            Remove an EJB object identified by its handle.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>jakarta.ejb.Handle</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>50</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>jakarta.ejb.Handle</parameter>
</parameters>
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>51</id>
<description>Thrown if the enterprise Bean or     the container does not allow the client to remove the object.</description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>jakarta.ejb.Handle</parameter>
</parameters>
<throw>jakarta.ejb.RemoveException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>52</id>
<description>
                            Remove an EJB object identified by its primary key.
                               This method can be used only for an entity bean. An attempt  to call this method on a session bean will result in a RemoveException.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>53</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>54</id>
<description>Thrown if the enterprise Bean or     the container does not allow the client to remove the object.</description>
<package>javax.ejb</package>
<class-interface>EJBHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.ejb.RemoveException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>55</id>
<description>
                            Remove an EJB object identified by its primary key.
                               This method can only be used by local clients of an entity bean.  An attempt  to call this method on a session bean will result in a RemoveException.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBLocalHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>56</id>
<description>Thrown if the enterprise Bean or     the container does not allow the client to remove the object.</description>
<package>javax.ejb</package>
<class-interface>EJBLocalHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.ejb.RemoveException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>57</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBLocalHome</class-interface>
<method name="remove" return-type="void">
<parameters>
<parameter>java.lang.Object</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>58</id>
<description>
                            Obtain the enterprise Bean's local home interface.
                             The local home  interface defines the enterprise Bean's create, finder, remove,  and home business methods that are available to local clients.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="getEJBLocalHome" return-type="jakarta.ejb.EJBLocalHome"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>59</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="getEJBLocalHome" return-type="jakarta.ejb.EJBLocalHome">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>60</id>
<description>
                            Obtain the primary key of the EJB local object.
                                 This method can be called on an entity bean.   An attempt to invoke this method on a session Bean will result in  an EJBException.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="getPrimaryKey" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>61</id>
<description>Thrown when the method failed due to a     system-level failure or when invoked on a session bean.</description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="getPrimaryKey" return-type="java.lang.Object">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>62</id>
<description>
                            Test if a given EJB local object is identical to the invoked EJB   local object.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="isIdentical" return-type="boolean">
<parameters>
<parameter>jakarta.ejb.EJBLocalObject</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>63</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="isIdentical" return-type="boolean">
<parameters>
<parameter>jakarta.ejb.EJBLocalObject</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>64</id>
<description>
                            Remove the EJB local object.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="remove" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>65</id>
<description>The enterprise Bean or the container     does not allow destruction of the object.</description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="remove" return-type="void">
<throw>jakarta.ejb.RemoveException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>66</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBLocalObject</class-interface>
<method name="remove" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>67</id>
<description>
                            Obtain the remote home interface of the enterprise Bean.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBMetaData</class-interface>
<method name="getEJBHome" return-type="jakarta.ejb.EJBHome"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>68</id>
<description>
                            Obtain the Class object for the enterprise Bean's remote home interface.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBMetaData</class-interface>
<method name="getHomeInterfaceClass" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>69</id>
<description>
                            Obtain the Class object for the enterprise Bean's primary key class.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBMetaData</class-interface>
<method name="getPrimaryKeyClass" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>70</id>
<description>
                            Obtain the Class object for the enterprise Bean's remote interface.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBMetaData</class-interface>
<method name="getRemoteInterfaceClass" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>71</id>
<description>
                            Test if the enterprise Bean's type is "session".
                        </description>
<package>javax.ejb</package>
<class-interface>EJBMetaData</class-interface>
<method name="isSession" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>72</id>
<description>
                            Test if the enterprise Bean's type is "stateless session".
                        </description>
<package>javax.ejb</package>
<class-interface>EJBMetaData</class-interface>
<method name="isStatelessSession" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>73</id>
<description>
                            Obtain the enterprise Bean's remote home interface.
                             The remote home   interface defines the enterprise Bean's create, finder, remove,  and home business methods.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="getEJBHome" return-type="jakarta.ejb.EJBHome"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>74</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="getEJBHome" return-type="jakarta.ejb.EJBHome">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>75</id>
<description>
                            Obtain a handle for the EJB object.
                             The handle can be used at later  time to re-obtain a reference to the EJB object, possibly in a  different Java Virtual Machine.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="getHandle" return-type="jakarta.ejb.Handle"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>76</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="getHandle" return-type="jakarta.ejb.Handle">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>77</id>
<description>
                            Obtain the primary key of the EJB object.
                                 This method can be called on an entity bean. An attempt to invoke  this method on a session bean will result in RemoteException.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="getPrimaryKey" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>78</id>
<description>Thrown when the method failed due to a     system-level failure or when invoked on a session bean.</description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="getPrimaryKey" return-type="java.lang.Object">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>79</id>
<description>
                            Test if a given EJB object is identical to the invoked EJB object.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="isIdentical" return-type="boolean">
<parameters>
<parameter>jakarta.ejb.EJBObject</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>80</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="isIdentical" return-type="boolean">
<parameters>
<parameter>jakarta.ejb.EJBObject</parameter>
</parameters>
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>81</id>
<description>
                            Remove the EJB object.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="remove" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>82</id>
<description>Thrown when the method failed due to a     system-level failure.</description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="remove" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>83</id>
<description>The enterprise Bean or the container     does not allow destruction of the object.</description>
<package>javax.ejb</package>
<class-interface>EJBObject</class-interface>
<method name="remove" return-type="void">
<throw>jakarta.ejb.RemoveException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>84</id>
<description/>
<package>javax.ejb</package>
<class-interface>EJBs</class-interface>
<method name="value" return-type="jakarta.ejb.EJB[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>85</id>
<description>
                            Constructs an EJBTransactionRequiredException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBTransactionRequiredException</class-interface>
<method name="EJBTransactionRequiredException" return-type="EJBTransactionRequiredException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>86</id>
<description>
                            Constructs an EJBTransactionRequiredException with the specified  detailed message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBTransactionRequiredException</class-interface>
<method name="EJBTransactionRequiredException" return-type="EJBTransactionRequiredException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>87</id>
<description>
                            Constructs an EJBTransactionRolledbackException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBTransactionRolledbackException</class-interface>
<method name="EJBTransactionRolledbackException" return-type="EJBTransactionRolledbackException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>88</id>
<description>
                            Constructs an EJBTransactionRolledbackException with the specified  detailed message.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBTransactionRolledbackException</class-interface>
<method name="EJBTransactionRolledbackException" return-type="EJBTransactionRolledbackException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>89</id>
<description>
                            Constructs an EJBTransactionRolledbackException with the specified  detail message and a nested exception.
                        </description>
<package>javax.ejb</package>
<class-interface>EJBTransactionRolledbackException</class-interface>
<method name="EJBTransactionRolledbackException" return-type="EJBTransactionRolledbackException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>90</id>
<description>
                            A container invokes this method when the instance  is taken out of the pool of available instances to become associated  with a specific EJB object.
                             This method transitions the instance to   the ready state.    This method executes in an unspecified transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbActivate" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>91</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbActivate" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>92</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbActivate" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>93</id>
<description>
                            A container invokes this method to instruct the  instance to synchronize its state by loading it state from the  underlying database.
                                 This method always executes in the transaction context determined  by the value of the transaction attribute in the deployment descriptor.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbLoad" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>94</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbLoad" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>95</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbLoad" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>96</id>
<description>
                            A container invokes this method on an instance before the instance  becomes disassociated with a specific EJB object.
                             After this method  completes, the container will place the instance into the pool of  available instances.    This method executes in an unspecified transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbPassivate" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>97</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbPassivate" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>98</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbPassivate" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>99</id>
<description>
                            A container invokes this method before it removes the EJB object  that is currently associated with the instance.
                             This method  is invoked when a client invokes a remove operation on the  enterprise Bean's home interface or the EJB object's remote interface.  This method transitions the instance from the ready state to the pool   of available instances.     This method is called in the transaction context of the remove   operation.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbRemove" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>100</id>
<description>The enterprise Bean does not allow     destruction of the object.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbRemove" return-type="void">
<throw>jakarta.ejb.RemoveException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>101</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbRemove" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>102</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbRemove" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>103</id>
<description>
                            A container invokes this method to instruct the  instance to synchronize its state by storing it to the underlying   database.
                                This method always executes in the transaction context determined  by the value of the transaction attribute in the deployment descriptor.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbStore" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>104</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbStore" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>105</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="ejbStore" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>106</id>
<description>
                            Set the associated entity context.
                             The container invokes this method  on an instance after the instance has been created.    This method is called in an unspecified transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="setEntityContext" return-type="void">
<parameters>
<parameter>jakarta.ejb.EntityContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>107</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="setEntityContext" return-type="void">
<parameters>
<parameter>jakarta.ejb.EntityContext</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>108</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="setEntityContext" return-type="void">
<parameters>
<parameter>jakarta.ejb.EntityContext</parameter>
</parameters>
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>109</id>
<description>
                            Unset the associated entity context.
                             The container calls this method  before removing the instance.    This is the last method that the container invokes on the instance.  The Java garbage collector will eventually invoke the finalize() method  on the instance.    This method is called in an unspecified transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="unsetEntityContext" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>110</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="unsetEntityContext" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>111</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>EntityBean</class-interface>
<method name="unsetEntityContext" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>112</id>
<description>
                            Obtain a reference to the EJB local object that is currently   associated with the instance.
                                An instance of an entity enterprise Bean can call this method only  when the instance is associated with an EJB local object identity, i.e.  in the ejbActivate, ejbPassivate, ejbPostCreate, ejbRemove,  ejbLoad, ejbStore, and business methods.    An instance can use this method, for example, when it wants to  pass a reference to itself in a method argument or result.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityContext</class-interface>
<method name="getEJBLocalObject" return-type="jakarta.ejb.EJBLocalObject"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>113</id>
<description>if the instance invokes this     method while the instance is in a state that does not allow the     instance to invoke this method, or if the instance does not have     a local interface.</description>
<package>javax.ejb</package>
<class-interface>EntityContext</class-interface>
<method name="getEJBLocalObject" return-type="jakarta.ejb.EJBLocalObject">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>114</id>
<description>
                            Obtain a reference to the EJB object that is currently associated with   the instance.
                                An instance of an entity enterprise Bean can call this method only  when the instance is associated with an EJB object identity, i.e.  in the ejbActivate, ejbPassivate, ejbPostCreate, ejbRemove,  ejbLoad, ejbStore, and business methods.    An instance can use this method, for example, when it wants to  pass a reference to itself in a method argument or result.
                        </description>
<package>javax.ejb</package>
<class-interface>EntityContext</class-interface>
<method name="getEJBObject" return-type="jakarta.ejb.EJBObject"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>115</id>
<description>Thrown if the instance invokes this     method while the instance is in a state that does not allow the     instance to invoke this method, or if the instance does not have     a remote interface.</description>
<package>javax.ejb</package>
<class-interface>EntityContext</class-interface>
<method name="getEJBObject" return-type="jakarta.ejb.EJBObject">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>116</id>
<description>
                            Obtain the primary key of the EJB object that is currently  associated with this instance.
                                An instance of an entity enterprise Bean can call this method only  when the instance is associated with an EJB object identity, i.e.  in the ejbActivate, ejbPassivate, ejbPostCreate, ejbRemove,  ejbLoad, ejbStore, and business methods.   Note: The result of this method is that same as the  result of getEJBObject().getPrimaryKey().
                        </description>
<package>javax.ejb</package>
<class-interface>EntityContext</class-interface>
<method name="getPrimaryKey" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>117</id>
<description>Thrown if the instance invokes this     method while the instance is in a state that does not allow the     instance to invoke this method.</description>
<package>javax.ejb</package>
<class-interface>EntityContext</class-interface>
<method name="getPrimaryKey" return-type="java.lang.Object">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>118</id>
<description>
                            Constructs an FinderException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>FinderException</class-interface>
<method name="FinderException" return-type="FinderException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>119</id>
<description>
                            Constructs an FinderException with the specified  detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>FinderException</class-interface>
<method name="FinderException" return-type="FinderException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>120</id>
<description>
                            Obtain the EJB object reference represented by this handle.
                        </description>
<package>javax.ejb</package>
<class-interface>Handle</class-interface>
<method name="getEJBObject" return-type="jakarta.ejb.EJBObject"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>121</id>
<description>The EJB object could not be obtained     because of a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>Handle</class-interface>
<method name="getEJBObject" return-type="jakarta.ejb.EJBObject">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>122</id>
<description>
                            Obtain the home object represented by this handle.
                        </description>
<package>javax.ejb</package>
<class-interface>HomeHandle</class-interface>
<method name="getEJBHome" return-type="jakarta.ejb.EJBHome"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>123</id>
<description>The home object could not be obtained     because of a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>HomeHandle</class-interface>
<method name="getEJBHome" return-type="jakarta.ejb.EJBHome">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>124</id>
<description>
                            The name of the corresponding create method of the adapted  Home/LocalHome interface.
                              This value is used to disambiguate the  case where there are multiple create methods on an  adapted Home/LocalHome interface with the same signature as the  annotated @Init method.  If no value is specified, the create  matching is based on signature only.
                        </description>
<package>javax.ejb</package>
<class-interface>Init</class-interface>
<method name="value" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>125</id>
<description/>
<package>javax.ejb</package>
<class-interface>Local</class-interface>
<method name="value" return-type="java.lang.Class[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>126</id>
<description/>
<package>javax.ejb</package>
<class-interface>LocalHome</class-interface>
<method name="value" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>127</id>
<description>
                            Activation config properties.
                        </description>
<package>javax.ejb</package>
<class-interface>MessageDriven</class-interface>
<method name="activationConfig" return-type="jakarta.ejb.ActivationConfigProperty[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>128</id>
<description/>
<package>javax.ejb</package>
<class-interface>MessageDriven</class-interface>
<method name="description" return-type="java.lang.String"/>
</assertion>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>129</id>
<description>
                            A product specific name(e.g.
                             global JNDI name of a queue)   that this message-driven bean should be mapped to.      Application servers are not required to support any particular   form or type of mapped name, nor the ability to use mapped names.   The mapped name is product-dependent and often installation-dependent.   No use of a mapped name is portable.
                        </description>
<package>javax.ejb</package>
<class-interface>MessageDriven</class-interface>
<method name="mappedName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>130</id>
<description>
                            Message-listener interface.
                        </description>
<package>javax.ejb</package>
<class-interface>MessageDriven</class-interface>
<method name="messageListenerInterface" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>131</id>
<description>
                            ejb-name for this bean.
                        </description>
<package>javax.ejb</package>
<class-interface>MessageDriven</class-interface>
<method name="name" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>132</id>
<description>
                            A container invokes this method before it ends the life of the   message-driven object.
                             This happens when a container decides to   terminate the message-driven object.     This method is called with no transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>MessageDrivenBean</class-interface>
<method name="ejbRemove" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>133</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>MessageDrivenBean</class-interface>
<method name="ejbRemove" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>134</id>
<description>
                            Set the associated message-driven context.
                             The container calls   this method after the instance creation.    The enterprise Bean instance should store the reference to the  context object in an instance variable.    This method is called with no transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>MessageDrivenBean</class-interface>
<method name="setMessageDrivenContext" return-type="void">
<parameters>
<parameter>jakarta.ejb.MessageDrivenContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>135</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>MessageDrivenBean</class-interface>
<method name="setMessageDrivenContext" return-type="void">
<parameters>
<parameter>jakarta.ejb.MessageDrivenContext</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>136</id>
<description>
                            Constructs a NoSuchEJBException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchEJBException</class-interface>
<method name="NoSuchEJBException" return-type="NoSuchEJBException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>137</id>
<description>
                            Constructs a NoSuchEJBException with the specified  detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchEJBException</class-interface>
<method name="NoSuchEJBException" return-type="NoSuchEJBException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>138</id>
<description>
                            Constructs a NoSuchEJBException with the specified  detail message and a nested exception.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchEJBException</class-interface>
<method name="NoSuchEJBException" return-type="NoSuchEJBException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>139</id>
<description>
                            Constructs a NoSuchEntityException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchEntityException</class-interface>
<method name="NoSuchEntityException" return-type="NoSuchEntityException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>140</id>
<description>
                            Constructs a NoSuchEntityException with the specified  detailed message.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchEntityException</class-interface>
<method name="NoSuchEntityException" return-type="NoSuchEntityException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>141</id>
<description>
                            Constructs a NoSuchEntityException that embeds the originally   thrown exception.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchEntityException</class-interface>
<method name="NoSuchEntityException" return-type="NoSuchEntityException">
<parameters>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>142</id>
<description>
                            Constructs a NoSuchObjectLocalException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchObjectLocalException</class-interface>
<method name="NoSuchObjectLocalException" return-type="NoSuchObjectLocalException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>143</id>
<description>
                            Constructs a NoSuchObjectLocalException with the specified  detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchObjectLocalException</class-interface>
<method name="NoSuchObjectLocalException" return-type="NoSuchObjectLocalException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>144</id>
<description>
                            Constructs a NoSuchObjectLocalException with the specified  detail message and a nested exception.
                        </description>
<package>javax.ejb</package>
<class-interface>NoSuchObjectLocalException</class-interface>
<method name="NoSuchObjectLocalException" return-type="NoSuchObjectLocalException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>145</id>
<description>
                            Constructs an ObjectNotFoundException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>ObjectNotFoundException</class-interface>
<method name="ObjectNotFoundException" return-type="ObjectNotFoundException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>146</id>
<description>
                            Constructs an ObjectNotFoundException with the specified  detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>ObjectNotFoundException</class-interface>
<method name="ObjectNotFoundException" return-type="ObjectNotFoundException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>147</id>
<description/>
<package>javax.ejb</package>
<class-interface>Remote</class-interface>
<method name="value" return-type="java.lang.Class[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>148</id>
<description/>
<package>javax.ejb</package>
<class-interface>RemoteHome</class-interface>
<method name="value" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>149</id>
<description>
                            If true, the stateful session bean will not be removed if an   exception is thrown from the designated method.
                        </description>
<package>javax.ejb</package>
<class-interface>Remove</class-interface>
<method name="retainIfException" return-type="boolean"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>150</id>
<description>
                            Constructs an RemoveException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>RemoveException</class-interface>
<method name="RemoveException" return-type="RemoveException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>151</id>
<description>
                            Constructs an RemoveException with the specified  detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>RemoveException</class-interface>
<method name="RemoveException" return-type="RemoveException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>152</id>
<description>
                            The activate method is called when the instance is activated  from its "passive" state.
                             The instance should acquire any resource  that it has released earlier in the ejbPassivate() method.    This method is called with no transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbActivate" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>153</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbActivate" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>154</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbActivate" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>155</id>
<description>
                            The passivate method is called before the instance enters  the "passive" state.
                             The instance should release any resources that  it can re-acquire later in the ejbActivate() method.    After the passivate method completes, the instance must be  in a state that allows the container to use the Java Serialization  protocol to externalize and store away the instance's state.    This method is called with no transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbPassivate" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>156</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbPassivate" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>157</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbPassivate" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>158</id>
<description>
                            A container invokes this method before it ends the life of the session  object.
                             This happens as a result of a client's invoking a remove  operation, or when a container decides to terminate the session object  after a timeout.     This method is called with no transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbRemove" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>159</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbRemove" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>160</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="ejbRemove" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>161</id>
<description>
                            Set the associated session context.
                             The container calls this method  after the instance creation.    The enterprise Bean instance should store the reference to the  context object in an instance variable.    This method is called with no transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="setSessionContext" return-type="void">
<parameters>
<parameter>jakarta.ejb.SessionContext</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>162</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="setSessionContext" return-type="void">
<parameters>
<parameter>jakarta.ejb.SessionContext</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>163</id>
<description>This exception is defined in the method     signature to provide backward compatibility for applications written     for the EJB 1.0 specification. Enterprise beans written for the      EJB 1.1 specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB2.0 and higher specifications     must throw the jakarta.ejb.EJBException instead of this exception.</description>
<package>javax.ejb</package>
<class-interface>SessionBean</class-interface>
<method name="setSessionContext" return-type="void">
<parameters>
<parameter>jakarta.ejb.SessionContext</parameter>
</parameters>
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>164</id>
<description>
                            Obtain an object that can be used to invoke the current bean through  the given business interface.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getBusinessObject" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Class</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>165</id>
<description>Thrown if this method is invoked           with an invalid business interface for the current bean.</description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getBusinessObject" return-type="java.lang.Object">
<parameters>
<parameter>java.lang.Class</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>166</id>
<description>
                            Obtain a reference to the EJB local object that is    associated with the instance.
                                An instance of a session enterprise Bean can call this method  at anytime between the ejbCreate() and ejbRemove() methods, including  from within the ejbCreate() and ejbRemove() methods.    An instance can use this method, for example, when it wants to  pass a reference to itself in a method argument or result.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getEJBLocalObject" return-type="jakarta.ejb.EJBLocalObject"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>167</id>
<description>Thrown if the instance invokes this     method while the instance is in a state that does not allow the     instance to invoke this method, or if the instance does not have     a local interface.</description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getEJBLocalObject" return-type="jakarta.ejb.EJBLocalObject">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>168</id>
<description>
                            Obtain a reference to the EJB object that is currently associated with   the instance.
                                An instance of a session enterprise Bean can call this method  at anytime between the ejbCreate() and ejbRemove() methods, including  from within the ejbCreate() and ejbRemove() methods.    An instance can use this method, for example, when it wants to  pass a reference to itself in a method argument or result.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getEJBObject" return-type="jakarta.ejb.EJBObject"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>169</id>
<description>Thrown if the instance invokes this     method while the instance is in a state that does not allow the     instance to invoke this method, or if the instance does not have     a remote interface.</description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getEJBObject" return-type="jakarta.ejb.EJBObject">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>170</id>
<description>
                            Obtain the business interface through which the current business  method invocation was made.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getInvokedBusinessInterface" return-type="java.lang.Class"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>171</id>
<description>Thrown if this method is called        and the bean has not been invoked through a business interface.</description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getInvokedBusinessInterface" return-type="java.lang.Class">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>172</id>
<description>
                            Obtain a reference to the JAX-RPC MessageContext.
                                 An instance of a stateless session bean can call this method  from any business method invoked through its web service  endpoint interface.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getMessageContext" return-type="MessageContext"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>173</id>
<description>Thrown if this method is invoked     while the instance is in a state that does not allow access     to this method.</description>
<package>javax.ejb</package>
<class-interface>SessionContext</class-interface>
<method name="getMessageContext" return-type="MessageContext">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>174</id>
<description>
                            The afterBegin method notifies a session Bean instance that a new  transaction has started, and that the subsequent business methods on the  instance will be invoked in the context of the transaction.
                                The instance can use this method, for example, to read data  from a database and cache the data in the instance fields.    This method executes in the proper transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="afterBegin" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>175</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="afterBegin" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>176</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 and higher specifications should throw the     jakarta.ejb.EJBException instead of this exception.      Enterprise beans written for the EJB 2.0 and higher specifications      must not throw the java.rmi.RemoteException.</description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="afterBegin" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>177</id>
<description>
                            The afterCompletion method notifies a session Bean instance that a  transaction commit protocol has completed, and tells the instance  whether the transaction has been committed or rolled back.
                                This method executes with no transaction context.    This method executes with no transaction context.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="afterCompletion" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>178</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="afterCompletion" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>179</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 and higher specification should throw the     jakarta.ejb.EJBException instead of this exception.      Enterprise beans written for the EJB 2.0 and higher specifications      must not throw the java.rmi.RemoteException.</description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="afterCompletion" return-type="void">
<parameters>
<parameter>boolean</parameter>
</parameters>
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>180</id>
<description>
                            The beforeCompletion method notifies a session Bean instance that  a transaction is about to be committed.
                             The instance can use this  method, for example, to write any cached data to a database.    This method executes in the proper transaction context.   Note: The instance may still cause the container to  rollback the transaction by invoking the setRollbackOnly() method  on the instance context, or by throwing an exception.
                        </description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="beforeCompletion" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>181</id>
<description>Thrown by the method to indicate a failure     caused by a system-level error.</description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="beforeCompletion" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>182</id>
<description>This exception is defined in the method     signature to provide backward compatibility for enterprise beans      written for the EJB 1.0 specification. Enterprise beans written      for the EJB 1.1 and higher specification should throw the     jakarta.ejb.EJBException instead of this exception.     Enterprise beans written for the EJB 2.0 and higher specifications      must not throw the java.rmi.RemoteException.</description>
<package>javax.ejb</package>
<class-interface>SessionSynchronization</class-interface>
<method name="beforeCompletion" return-type="void">
<throw>java.rmi.RemoteException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>183</id>
<description/>
<package>javax.ejb</package>
<class-interface>Stateful</class-interface>
<method name="description" return-type="java.lang.String"/>
</assertion>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>184</id>
<description>
                            A product specific name(e.g.
                             global JNDI name)   that this session bean should be mapped to.      Application servers are not required to support any particular   form or type of mapped name, nor the ability to use mapped names.   The mapped name is product-dependent and often installation-dependent.   No use of a mapped name is portable.
                        </description>
<package>javax.ejb</package>
<class-interface>Stateful</class-interface>
<method name="mappedName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>185</id>
<description>
                            ejb-name for this bean.
                        </description>
<package>javax.ejb</package>
<class-interface>Stateful</class-interface>
<method name="name" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>186</id>
<description/>
<package>javax.ejb</package>
<class-interface>Stateless</class-interface>
<method name="description" return-type="java.lang.String"/>
</assertion>
<assertion required="false" impl-spec="true" status="active" testable="false">
<id>187</id>
<description>
                            A product specific name(e.g.
                             global JNDI name)   that this session bean should be mapped to.      Application servers are not required to support any particular   form or type of mapped name, nor the ability to use mapped names.   The mapped name is product-dependent and often installation-dependent.   No use of a mapped name is portable.
                        </description>
<package>javax.ejb</package>
<class-interface>Stateless</class-interface>
<method name="mappedName" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>188</id>
<description>
                            ejb-name for this bean.
                        </description>
<package>javax.ejb</package>
<class-interface>Stateless</class-interface>
<method name="name" return-type="java.lang.String"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>189</id>
<description>
                            Invoked by the EJB container upon timer expiration.
                        </description>
<package>javax.ejb</package>
<class-interface>TimedObject</class-interface>
<method name="ejbTimeout" return-type="void">
<parameters>
<parameter>jakarta.ejb.Timer</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>190</id>
<description>
                            Cause the timer and all its associated expiration notifications to  be cancelled.
                        </description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="cancel" return-type="void"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>191</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="cancel" return-type="void">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>192</id>
<description>If invoked on a timer  that has expired or has been cancelled.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="cancel" return-type="void">
<throw>jakarta.ejb.NoSuchObjectLocalException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>193</id>
<description>If this method could not complete due  to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="cancel" return-type="void">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>194</id>
<description>
                            Get a serializable handle to the timer.
                              This handle can  be used at a later time to re-obtain the timer reference.
                        </description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getHandle" return-type="jakarta.ejb.TimerHandle"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>195</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getHandle" return-type="jakarta.ejb.TimerHandle">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>196</id>
<description>If invoked on a timer  that has expired or has been cancelled.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getHandle" return-type="jakarta.ejb.TimerHandle">
<throw>jakarta.ejb.NoSuchObjectLocalException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>197</id>
<description>If this method could not complete due  to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getHandle" return-type="jakarta.ejb.TimerHandle">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>198</id>
<description>
                            Get the information associated with the timer at the time of creation.
                        </description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getInfo" return-type="java.io.Serializable"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>199</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getInfo" return-type="java.io.Serializable">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>200</id>
<description>If invoked on a timer  that has expired or has been cancelled.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getInfo" return-type="java.io.Serializable">
<throw>jakarta.ejb.NoSuchObjectLocalException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>201</id>
<description>If this method could not complete due  to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getInfo" return-type="java.io.Serializable">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>202</id>
<description>
                            Get the point in time at which the next timer expiration is scheduled   to occur.
                        </description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getNextTimeout" return-type="java.util.Date"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>203</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getNextTimeout" return-type="java.util.Date">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>204</id>
<description>If invoked on a timer  that has expired or has been cancelled.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getNextTimeout" return-type="java.util.Date">
<throw>jakarta.ejb.NoSuchObjectLocalException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>205</id>
<description>If this method could not complete due  to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getNextTimeout" return-type="java.util.Date">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>206</id>
<description>
                            Get the number of milliseconds that will elapse before the next  scheduled timer expiration.
                        </description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getTimeRemaining" return-type="long"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>207</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getTimeRemaining" return-type="long">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>208</id>
<description>If invoked on a timer  that has expired or has been cancelled.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getTimeRemaining" return-type="long">
<throw>jakarta.ejb.NoSuchObjectLocalException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>209</id>
<description>If this method could not complete due  to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>Timer</class-interface>
<method name="getTimeRemaining" return-type="long">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>210</id>
<description>
                            Obtain a reference to the timer represented by this handle.
                        </description>
<package>javax.ejb</package>
<class-interface>TimerHandle</class-interface>
<method name="getTimer" return-type="jakarta.ejb.Timer"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>211</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>TimerHandle</class-interface>
<method name="getTimer" return-type="jakarta.ejb.Timer">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>212</id>
<description>If invoked on a  handle whose associated timer has expired or has been cancelled.</description>
<package>javax.ejb</package>
<class-interface>TimerHandle</class-interface>
<method name="getTimer" return-type="jakarta.ejb.Timer">
<throw>jakarta.ejb.NoSuchObjectLocalException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>213</id>
<description>If this method could not complete due  to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>TimerHandle</class-interface>
<method name="getTimer" return-type="jakarta.ejb.Timer">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>214</id>
<description>
                            Create a single-action timer that expires after a specified duration.
                        </description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>215</id>
<description>If duration is negative</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>216</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>217</id>
<description>If this method fails due to a   system-level failure.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>218</id>
<description>
                            Create an interval timer whose first expiration occurs after a specified  duration, and whose subsequent expirations occur after a specified  interval.
                        </description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>long</parameter>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>219</id>
<description>If initialDuration is  negative, or intervalDuration is negative.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>long</parameter>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>220</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>long</parameter>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>221</id>
<description>If this method could not complete  due to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>long</parameter>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>222</id>
<description>
                            Create a single-action timer that expires at a given point in time.
                        </description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>java.util.Date</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>223</id>
<description>If expiration is null, or  expiration.getTime() is negative.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>java.util.Date</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>224</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>java.util.Date</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>225</id>
<description>If this method could not complete  due to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>java.util.Date</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>226</id>
<description>
                            Create an interval timer whose first expiration occurs at a given  point in time and whose subsequent expirations occur after a specified  interval.
                        </description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>java.util.Date</parameter>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>227</id>
<description>If initialExpiration is  null, or initialExpiration.getTime() is negative, or intervalDuration   is negative.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>java.util.Date</parameter>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>java.lang.IllegalArgumentException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>228</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>java.util.Date</parameter>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>229</id>
<description>If this method could not complete  due to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="createTimer" return-type="jakarta.ejb.Timer">
<parameters>
<parameter>java.util.Date</parameter>
<parameter>long</parameter>
<parameter>java.io.Serializable</parameter>
</parameters>
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>230</id>
<description>
                            Get all the active timers associated with this bean.
                        </description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="getTimers" return-type="java.util.Collection"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>231</id>
<description>If this method is  invoked while the instance is in a state that does not allow access   to this method.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="getTimers" return-type="java.util.Collection">
<throw>java.lang.IllegalStateException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>232</id>
<description>If this method could not complete  due to a system-level failure.</description>
<package>javax.ejb</package>
<class-interface>TimerService</class-interface>
<method name="getTimers" return-type="java.util.Collection">
<throw>jakarta.ejb.EJBException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>233</id>
<description/>
<package>javax.ejb</package>
<class-interface>TransactionAttribute</class-interface>
<method name="value" return-type="jakarta.ejb.TransactionAttributeType"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>234</id>
<description/>
<package>javax.ejb</package>
<class-interface>TransactionAttributeType</class-interface>
<method name="valueOf" return-type="jakarta.ejb.TransactionAttributeType">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>235</id>
<description/>
<package>javax.ejb</package>
<class-interface>TransactionAttributeType</class-interface>
<method name="values" return-type="jakarta.ejb.TransactionAttributeType[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>236</id>
<description/>
<package>javax.ejb</package>
<class-interface>TransactionManagement</class-interface>
<method name="value" return-type="jakarta.ejb.TransactionManagementType"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>237</id>
<description/>
<package>javax.ejb</package>
<class-interface>TransactionManagementType</class-interface>
<method name="valueOf" return-type="jakarta.ejb.TransactionManagementType">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>238</id>
<description/>
<package>javax.ejb</package>
<class-interface>TransactionManagementType</class-interface>
<method name="values" return-type="jakarta.ejb.TransactionManagementType[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>239</id>
<description>
                            Constructs a TransactionRequiredLocalException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>TransactionRequiredLocalException</class-interface>
<method name="TransactionRequiredLocalException" return-type="TransactionRequiredLocalException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>240</id>
<description>
                            Constructs an TransactionRequiredLocalException with the specified  detailed message.
                        </description>
<package>javax.ejb</package>
<class-interface>TransactionRequiredLocalException</class-interface>
<method name="TransactionRequiredLocalException" return-type="TransactionRequiredLocalException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>241</id>
<description>
                            Constructs a TransactionRolledbackLocalException with no detail message.
                        </description>
<package>javax.ejb</package>
<class-interface>TransactionRolledbackLocalException</class-interface>
<method name="TransactionRolledbackLocalException" return-type="TransactionRolledbackLocalException"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>242</id>
<description>
                            Constructs a TransactionRolledbackLocalException with the specified  detailed message.
                        </description>
<package>javax.ejb</package>
<class-interface>TransactionRolledbackLocalException</class-interface>
<method name="TransactionRolledbackLocalException" return-type="TransactionRolledbackLocalException">
<parameters>
<parameter>java.lang.String</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>243</id>
<description>
                            Constructs a TransactionRolledbackLocalException with the specified  detail message and a nested exception.
                        </description>
<package>javax.ejb</package>
<class-interface>TransactionRolledbackLocalException</class-interface>
<method name="TransactionRolledbackLocalException" return-type="TransactionRolledbackLocalException">
<parameters>
<parameter>java.lang.String</parameter>
<parameter>java.lang.Exception</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>244</id>
<description>
                            Deserialize the EJBHome reference corresponding to a HomeHandle.
                                readEJBHome is called from the readObject method of   portable HomeHandle implementation classes. The istream object is the  same object that was passed in to the HomeHandle class's readObject.  When readEJBHome is called, istream must point to the location  in the stream at which the EJBHome reference can be read.  The container must ensure that the EJBHome reference is   capable of performing invocations immediately after deserialization.
                        </description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="readEJBHome" return-type="jakarta.ejb.EJBHome">
<parameters>
<parameter>java.io.ObjectInputStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>245</id>
<description>The EJBHome could not be deserialized     because of a system-level failure.</description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="readEJBHome" return-type="jakarta.ejb.EJBHome">
<parameters>
<parameter>java.io.ObjectInputStream</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>246</id>
<description>The EJBHome could not be deserialized     because some class could not be found.</description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="readEJBHome" return-type="jakarta.ejb.EJBHome">
<parameters>
<parameter>java.io.ObjectInputStream</parameter>
</parameters>
<throw>java.lang.ClassNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>247</id>
<description>
                            Deserialize the EJBObject reference corresponding to a Handle.
                                readEJBObject is called from the readObject method of   portable Handle implementation classes. The istream object is the  same object that was passed in to the Handle class's readObject.  When readEJBObject is called, istream must point to the location  in the stream at which the EJBObject reference can be read.  The container must ensure that the EJBObject reference is   capable of performing invocations immediately after deserialization.
                        </description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="readEJBObject" return-type="jakarta.ejb.EJBObject">
<parameters>
<parameter>java.io.ObjectInputStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>248</id>
<description>The EJBObject could not be deserialized     because of a system-level failure.</description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="readEJBObject" return-type="jakarta.ejb.EJBObject">
<parameters>
<parameter>java.io.ObjectInputStream</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>249</id>
<description>The EJBObject could not be deserialized     because some class could not be found.</description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="readEJBObject" return-type="jakarta.ejb.EJBObject">
<parameters>
<parameter>java.io.ObjectInputStream</parameter>
</parameters>
<throw>java.lang.ClassNotFoundException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>250</id>
<description>
                            Serialize the EJBHome reference corresponding to a HomeHandle.
                                This method is called from the writeObject method of   portable HomeHandle implementation classes. The ostream object is the  same object that was passed in to the Handle class's writeObject.
                        </description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="writeEJBHome" return-type="void">
<parameters>
<parameter>jakarta.ejb.EJBHome</parameter>
<parameter>java.io.ObjectOutputStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>251</id>
<description>The EJBObject could not be serialized     because of a system-level failure.</description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="writeEJBHome" return-type="void">
<parameters>
<parameter>jakarta.ejb.EJBHome</parameter>
<parameter>java.io.ObjectOutputStream</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>252</id>
<description>
                            Serialize the EJBObject reference corresponding to a Handle.
                                This method is called from the writeObject method of   portable Handle implementation classes. The ostream object is the  same object that was passed in to the Handle class's writeObject.
                        </description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="writeEJBObject" return-type="void">
<parameters>
<parameter>jakarta.ejb.EJBObject</parameter>
<parameter>java.io.ObjectOutputStream</parameter>
</parameters>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>253</id>
<description>The EJBObject could not be serialized     because of a system-level failure.</description>
<package>jakarta.ejb.spi</package>
<class-interface>HandleDelegate</class-interface>
<method name="writeEJBObject" return-type="void">
<parameters>
<parameter>jakarta.ejb.EJBObject</parameter>
<parameter>java.io.ObjectOutputStream</parameter>
</parameters>
<throw>java.io.IOException</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>254</id>
<description/>
<package>javax.interceptor</package>
<class-interface>Interceptors</class-interface>
<method name="value" return-type="java.lang.Class[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>255</id>
<description>
                            Returns the context data associated with this invocation or  lifecycle callback.
                              If there is no context data, an  empty Map object will be returned.
                        </description>
<package>javax.interceptor</package>
<class-interface>InvocationContext</class-interface>
<method name="getContextData" return-type="java.util.Map"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>256</id>
<description>
                            Returns the method of the bean class for which the interceptor  was invoked.
                              For AroundInvoke methods, this is the business  method on the bean class. For lifecycle callback methods,   returns null.
                        </description>
<package>javax.interceptor</package>
<class-interface>InvocationContext</class-interface>
<method name="getMethod" return-type="java.lang.reflect.Method"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>257</id>
<description>
                            Returns the parameters that will be used to invoke  the business method.
                              If setParameters has been called,   getParameters() returns the values to which the parameters   have been set.
                        </description>
<package>javax.interceptor</package>
<class-interface>InvocationContext</class-interface>
<method name="getParameters" return-type="java.lang.Object[]"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>258</id>
<description>
                            Returns the target instance.
                        </description>
<package>javax.interceptor</package>
<class-interface>InvocationContext</class-interface>
<method name="getTarget" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>259</id>
<description>
                            Proceed to the next entry in the interceptor chain.
                              The proceed method returns the result of the next  method invoked.  If the method returns void, proceed  returns null.
                        </description>
<package>javax.interceptor</package>
<class-interface>InvocationContext</class-interface>
<method name="proceed" return-type="java.lang.Object"/>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>260</id>
<description/>
<package>javax.interceptor</package>
<class-interface>InvocationContext</class-interface>
<method name="proceed" return-type="java.lang.Object">
<throw>java.lang.Exception</throw>
</method>
</assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
<id>261</id>
<description>
                            Sets the parameters that will be used to invoke the   business method.
                        </description>
<package>javax.interceptor</package>
<class-interface>InvocationContext</class-interface>
<method name="setParameters" return-type="void">
<parameters>
<parameter>java.lang.Object[]</parameter>
</parameters>
</method>
</assertion>
</assertions>
</javadoc>

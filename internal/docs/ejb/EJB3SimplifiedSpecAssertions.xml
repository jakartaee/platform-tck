<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/spec_assertions.dtd">
<!--

    Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<?xml-stylesheet type="text/xsl" href="https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/xsl/spec_assertions.xsl"?>
<spec>
	<next-available-id/>
	<previous-id/>
	<technology>EJB3</technology>
	<id>Version 3.0</id>
	<name>Simplified API</name>
	<version>Public Draft</version>
	<location-names>
		<chapters>
			<chapter id="2" name="Overview of the EJB 3.0 Simplified API">
				<sections>
					<section id="1" name="Metadata Annotations and Deployment Descriptors"/>
					<section id="1.1" name="Deployment Descriptors"/>
					<section id="2" name="Interoperability Between EJB 3.0 and EJB 2.1 Clients and Beans"/>
				</sections>
			</chapter>
			<chapter id="3" name="Enterprise Bean Class and Business Interface">
				<sections>
					<section id="1" name="Enterprise Bean Class"/>
					<section id="1.1" name="Requirements for the Enterprise Bean Class"/>
					<section id="2" name="Business Interfaces"/>
					<section id="3" name="Exceptions"/>
					<section id="4" name="Callbacks and Callback Listener Classes"/>
					<section id="4.1" name="Method Signatures"/>
					<section id="5" name="Interceptors"/>
					<section id="5.1" name="Interceptor Methods"/>
					<section id="5.2" name="Interceptor Classes"/>
					<section id="5.3" name="Multiple Interceptors for a Business Method Invocation"/>
					<section id="5.4" name="Method Signatures"/>
					<section id="5.5" name="AroundInvoke Methods"/>
					<section id="5.6" name="Exceptions"/>
					<section id="6" name="Home Interfaces"/>
				</sections>
			</chapter>
			<chapter id="4" name="Stateless Session Beans">
				<sections>
					<section id="1" name="Requirements for Stateless Session Beans"/>
					<section id="1.1" name="Business Interface"/>
					<section id="1.2" name="Home Interface"/>
					<section id="1.3" name="Bean Class"/>
					<section id="1.4" name="Callbacks fpr Stateless Session Beans"/>
					<section id="1.5" name="Dependency Injection"/>
					<section id="1.6" name="Interceptors for Stateless Session Beans"/>
					<section id="1.6.1" name="Example"/>
					<section id="2" name="Client View"/>
					<section id="3" name="Other Requirements"/>
				</sections>
			</chapter>
			<chapter id="5" name="Stateful Session Beans">
				<sections>
					<section id="1" name="Requirements for Stateful Session Beans"/>
					<section id="1.1" name="Business Interface"/>
					<section id="1.2" name="Home Interface"/>
					<section id="1.3" name="Bean Class"/>
					<section id="1.4" name="Callbacks for Stateful Session Beans"/>
					<section id="1.4.1" name="Semantics of the Life Cycle Callback Methods for Stateful Session Beans"/>
					<section id="1.5" name="Dependency Injection"/>
					<section id="1.6" name="Interceptors for Stateful Session Beans"/>
					<section id="1.7" name="Example"/>
					<section id="1.8" name="Client View"/>
					<section id="1.9" name="Stateful Session Bean Removal"/>
					<section id="1.9.1" name="Example"/>
					<section id="2" name="Other Requirements"/>
				</sections>
			</chapter>
			<chapter id="6" name="Message-Driven Beans">
				<sections>
					<section id="1" name="Requirements for Message-Driven Beans"/>
					<section id="1.1" name="Business Interface"/>
					<section id="1.2" name="Bean Class"/>
					<section id="1.3" name="Callbacks for Message-Driven Beans"/>
					<section id="1.4" name="Dependency Injection"/>
					<section id="1.5" name="Interceptors for Message-Driven Beans"/>
					<section id="2" name="Other Requirements"/>
				</sections>
			</chapter>
			<chapter id="7" name="Entity Beans and Persistence"/>
			<chapter id="8" name="Enterprise Bean Context and Environment">
				<sections>
					<section id="1" name="Annotation of Context Dependencies"/>
					<section id="1.1" name="Annotation of Instance Variables"/>
					<section id="1.2" name="Setter Injection"/>
					<section id="1.3" name="Injection and Lookup"/>
					<section id="1.4" name="EJBContext"/>
				</sections>
			</chapter>
			<chapter id="9" name="Compatibility and Migration">
				<sections>
					<section id="1" name="Support for Existing Applications"/>
					<section id="2" name="Interoperability of EJB 3.0 and Earlier Components"/>
					<section id="2.1" name="Clients Written to the EJB 2.x APIs"/>
					<section id="2.2" name="Clients Written to the new EJB 3.0 API"/>
					<section id="2.3" name="Combined use of EJB 2.x and EJB 3.0 Persistence APIs"/>
					<section id="2.4" name="Clients Written to the EJB 2.x APIs using the EJB 3.0 Client View"/>
					<section id="2.5" name="Other Combinations of EJB 3.0 and Earlier APIs"/>
					<section id="3" name="Adapting EJB 3.0 Session Beans to Earlier Client Views"/>
					<section id="3.1" name="Stateless Session Beans"/>
					<section id="3.2" name="Stateful Session Beans"/>
					<section id="4" name="Combined Use of EJB 3.0 and EJB 2.1 APIs in a BeanClass"/>
				</sections>
			</chapter>
			<chapter id="10" name="MetaData Annotations">
				<sections>
					<section id="1" name="Annotations to Specify Bean Type"/>
					<section id="1.1" name="Stateless Session Beans"/>
					<section id="1.2" name="Stateful Session Beans"/>
					<section id="1.2.1" name="Init Annotation for Stateful Session Beans"/>
					<section id="1.2.2" name="Remove Annotation for Stateful Session Beans"/>
					<section id="1.3" name="Message-Driven Beans"/>
					<section id="2" name="Annotations to Specify Local or Remote Accessibility"/>
					<section id="3" name="Annotations to Support EJB 2.1 and Earlier Client Views"/>
					<section id="4" name="Transaction Management"/>
					<section id="5" name="Transaction Attributes"/>
					<section id="6" name="Callbacks"/>
					<section id="7" name="Interceptors"/>
					<section id="8" name="Timeout"/>
					<section id="9" name="Exceptions"/>
					<section id="10" name="Security and Method Permissions"/>
					<section id="10.1" name="Security Role References"/>
					<section id="10.2" name="MethodPermissions"/>
					<section id="10.3" name="PermitAll"/>
					<section id="10.4" name="DenyAll"/>
					<section id="10.5" name="RunAs"/>
					<section id="10.6" name="Security Roles"/>
					<section id="11" name="EJB References"/>
					<section id="12" name="Resource References"/>
				</sections>
			</chapter>
		</chapters>
	</location-names>
	<assertions>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The bean type of the enterprise bean must be specified.</description>
			<location chapter="3" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Session beans require a business interface.</description>
			<location chapter="3" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>MessageDriven beans require a business interface.</description>
			<location chapter="3" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A bean class may implement its business interface.</description>
			<location chapter="3" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A bean class may have more than one business interface. </description>
			<location chapter="3" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The following rules apply [to business interfaces]:</description>
			<location chapter="3" section="2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>If a bean class implements a single interface, that interface is assumed to be the business interface of the bean.</description>
					<location chapter="3" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>The business interface will be implemented as a local interface unless the bean class is annoted with the Remote annotation on the bean class or interface or by means of the deployment descriptor.</description>
					<location chapter="3" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>A bean class is permitted to have more than one interface.</description>
					<location chapter="3" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>If a bean class has more than one interface excluding the interfaces listed below any business interface of the bean class must be explicitly designated as a business interface of the bean by means of the Local or Remote annotation on the bean class or interface or in the deployment descriptor.</description>
					<keywords>
						<keyword>application-role</keyword>
					</keywords>
					<location chapter="3" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>A business interface must not extend jakarta.ejb.EJBObject or jakarta.ejb.EJBLocalObject.</description>
					<keywords>
						<keyword>application-role</keyword>
					</keywords>
					<location chapter="3" section="2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>The following interfaces are excluded when determining whether the bean class has more than one interface:  java.io.Serialiable, java.io.Externalizable, any of the interfaces defined by the javax.ejb package.</description>
					<location chapter="3" section="2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The methods of the business interface should not throw the java.rmi.RemoteException, even if the interface is a remote business interface or the bean class is annotated WebService or the method as WebMethod.</description>
			<keywords>
				<keyword>application-role</keyword>
			</keywords>
			<location chapter="3" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id/>
			<description>If problems are encountered at the protocol level, an EJBException is thrown by the container and wraps the appropriate RemoteException. </description>
			<location chapter="3" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Callback methods are annotated with a callback annotation.</description>
			<location chapter="3" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A callback listener class is denoted using the CallbackListener annotation on the bean class with which it is associated.</description>
			<location chapter="3" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Listeners are statically configured for a bean class by use of:</description>
			<location chapter="3" section="4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>metadata annotations</description>
					<location chapter="3" section="4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>or the deployment descriptor</description>
					<location chapter="3" section="4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The callback listener class must have a public no-arg constructor.</description>
			<keywords>
				<keyword>application-role</keyword>
			</keywords>
			<location chapter="3" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The same method may be annotated with more that one callback thus serving for more than one callback.</description>
			<location chapter="3" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Any subset or combination of annotations appropriate to the bean class may be specified on the bean class or on the associated listener class.</description>
			<location chapter="3" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The same callback may not be specified on both the bean class and the listener class or more than one on either class.</description>
			<location chapter="3" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The following rules apply to callbacks:</description>
			<location chapter="3" section="4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>Callback methods may thrown runtime exceptions.</description>
					<location chapter="3" section="4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>A runtime exception thrown by a callback method that executes within a transaction causes that transaction to be rolled back.</description>
					<location chapter="3" section="4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>Callback methods must not throw application exceptions.</description>
					<keywords>
						<keyword>application-role</keyword>
					</keywords>
					<location chapter="3" section="4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
					<id/>
					<description>Dependency injection is not defined for callback listener classes.</description>
					<location chapter="3" section="4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>A callback listener may access entries in the bean's environment according to the rules specified in the EJB CoreContracts and Requirements specification.  See tables 1,2, 3 in particular.</description>
					<location chapter="3" section="4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>Programming restrictions that apply to enterprise bean components apply to callback listeners as well (see EJB Core, Section 25.1.2)</description>
					<location chapter="3" section="4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>An interceptor method may be defined:</description>
			<location chapter="3" section="5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>for a session bean class</description>
					<location chapter="3" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>for a message-driven bean class</description>
					<location chapter="3" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>for EJB 2.1 entity beans</description>
					<location chapter="3" section="5"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>An interceptor class is denoted using the Interceptor annotation on the bean class.</description>
			<location chapter="3" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>In the case of multiple interceptor classes, the Interceptors annotation is used.</description>
			<location chapter="3" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>An interceptor method is denoted by  the AroundInvoke annotation.</description>
			<location chapter="3" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The following rules apply to interceptors:</description>
			<location chapter="3" section="5"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>Interceptor method invocations occur within the same transaction and security context as the business method for which they are invoked.</description>
					<location chapter="3" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>Interceptors may throw runtime exceptions or application exceptions that are allowed in the throws clause of a business method.</description>
					<keywords>
						<keyword>application-role</keyword>
						<keyword>application-server-role</keyword>
					</keywords>
					<location chapter="3" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>Interceptors can invoke JNDI, JDBC, JMS, other enterprise beans and the EntityManager.</description>
					<location chapter="3" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>Dependency injection is supported for interceptor classes.</description>
					<location chapter="3" section="5"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>Programming restrictions that apply to enterprise bean components apply to interceptors as well (see EJB Core, Section 25.1.2)</description>
					<location chapter="3" section="5"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Only one AroundInvoke method may be present on the bean class or on any given interceptor class. An AroundInvoke method must not be a business method.</description>
			<keywords>
				<keyword>application-role</keyword>
				<keyword>application-server-role</keyword>
			</keywords>
			<location chapter="3" section="5.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Any number of interceptor classes may be defined for a bean class.</description>
			<location chapter="3" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Any number of interceptor classes may be defined for a bean class.  If multiple interceptors are defined, the order in which they are invoked is determined by the order in which they are specified.</description>
			<location chapter="3" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>An interceptor must have a public no-arg constructor.</description>
			<keywords>
				<keyword>application-role</keyword>
			</keywords>
			<location chapter="3" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>It is possible to carry state across multiple interceptor method invocations for a single business method invocation on a bean in the context data of the InvocationContext object.</description>
			<location chapter="3" section="5.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Interceptors are statically configured by:</description>
			<location chapter="3" section="5.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>metadata annotations</description>
					<location chapter="3" section="5.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>or the deployment descriptor</description>
					<location chapter="3" section="5.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If multiple interceptors are defined for a bean, the ordering of the invocation of these methods is as follows:</description>
			<location chapter="3" section="5.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>The AroundInvoke methods are invoked in the same order as the specification of the interceptor classes in the Interceptors annotation.</description>
					<location chapter="3" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>If an AroundInvoke method is also specified on the bean class itself, the AroundInvoke method on the bean class is invoked after the other AroundInvoke methods. </description>
					<location chapter="3" section="5.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>AroundInvoke methods must always call InvocationContext.proceed() or neither the business method will be invoked nor any subsequent interceptor AroundInvoke methods.</description>
					<keywords>
						<keyword>application-role</keyword>
						<keyword>application-server-role</keyword>
					</keywords>
					<location chapter="3" section="5.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The same InvocationContext instance will be passed to each AroundInvoke method for a given business method interception.  This allows an interceptor to save information in the context data property of the InvocationContext that can be subsequently retrieved in other interceptors as a means to pass conextual data between interceptors.  The contextual data is not shareable across business method invocations.</description>
			<location chapter="3" section="5.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Invocation.proceed() will throw the same exception as any thrown in the business method unless an interceptor further down the Java call stack has caught it and thrown a different exception.</description>
			<location chapter="3" section="5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>AroundInvoke methods are allowed to catch and supppress business method exceptions.</description>
			<location chapter="3" section="5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>AroundInvoke methods are allowed to throw runtime exceptions or any checked exceptions that the business method allowes within its throws clause.</description>
			<location chapter="3" section="5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If an AroundInvoke method throws an exception before it call the proceed() method, no other AroundInvoke methods will be called.</description>
			<location chapter="3" section="5.6"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id/>
			<description>AroundInvoke methods may mark the transaction for rollback by:</description>
			<location chapter="3" section="5.6"/>
			<sub-assertions>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id/>
					<description>throwing a runtime exception</description>
					<location chapter="3" section="5.6"/>
				</assertion>
				<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
					<id/>
					<description>calling InvocationContext.getEJBContext().setRollbackOnly()</description>
					<location chapter="3" section="5.6"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="true">
			<id/>
			<description>AroundInvoke methods may cause this rollback before or after InvocationContext.proceed() is called.</description>
			<location chapter="3" section="5.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The business interface of a [stateless] session bean written to the EJB 3.0 API is a plain Java interface, not an EJBObject or EJBLocalObject interface.</description>
			<location chapter="4" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>In the case of a [stateless] session bean that implements a web service, a web service interface is not required to be defined.</description>
			<location chapter="4" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The WebMethod annotations are used to identify the methods that are exposed as a web service operation.</description>
			<location chapter="4" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The [stateless] session bean that serves as a web service endpoint is annotated with the WebService annotation.</description>
			<location chapter="4" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Stateless session beans do not need home interfaces.</description>
			<location chapter="4" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A stateless session bean class must:</description>
			<location chapter="4" section="1.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>be annotated with the Stateless annotation</description>
					<location chapter="4" section="1.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>or be denoted in the deployment descriptor as a stateless session bean</description>
					<location chapter="4" section="1.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The [stateless] bean class need not implement the jakarta.ejb.SessionBean interface.</description>
			<location chapter="4" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The PostConstruct callback occurs after any dependency injection has been performed by the container and before the first business invocation on the bean.</description>
			<location chapter="4" section="1.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The PostConstruct method is invoked in an unspecified transaction and security context. </description>
			<location chapter="4" section="1.4"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The PostDestroy callback occurs at the time the bean instance is destroyed.</description>
			<location chapter="4" section="1.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The PostDestroy method executes in an unspecified transaction and security context. </description>
			<location chapter="4" section="1.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If a stateless session bean uses dependency injection mechanisms for the acquisition of references to resources or other objects in its environment, the container injects these references before any business methods are invoked on the bean instance and after the setSessionContext method (if any) is called.</description>
			<location chapter="4" section="1.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The AroundInvoke methods are supported for stateless session business method invocations.</description>
			<location chapter="4" section="1.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The local client of a [stateless] session bean acquires a reference to a session bean business interface through one of the dependency injection or lookup mechanisms.</description>
			<location chapter="4" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The remote client of a [stateless] session bean acquires a reference to a session bean business interface through one of the dependency injection or lookup mechanisms.</description>
			<location chapter="4" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The full set of requirements that apply to stateless session beans written to the EJB 3.0 API are specified in the EJB Core Contracts and Requirements document and associated to that assertion document.  This is a placeholder to cross-check the requirements when the specification is available for review.
			</description>
			<keywords>
				<keyword>application-role</keyword>
				<keyword>application-server-role</keyword>
			</keywords>
			<location chapter="4" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The business interface of a [stateful] session bean written to the EJB 3.0 API is a plain Java interface, not an EJBObject or EJBLocalObject interface.</description>
			<location chapter="5" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A [stateful] session bean must have a business interface.</description>
			<location chapter="5" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Stateful session beans do not need home interfaces.</description>
			<location chapter="5" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A stateful session bean class must:</description>
			<location chapter="5" section="1.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>be annotated with the Stateful annotation</description>
					<location chapter="5" section="1.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>or be denoted in the deployment descriptor as a stateful session bean</description>
					<location chapter="5" section="1.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The [stateful] bean class need not implement the jakarta.ejb.SessionBean interface or the java.io.Serialiable interface.</description>
			<location chapter="5" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The container must be able to handle the passivation of the bean instance even if the bean class does not implement the Serializable interface.</description>
			<location chapter="5" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A stateful session bean may implement the SessionSynchronization interface.</description>
			<location chapter="5" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The PostConstruct method is invoked on the newly constructed instance, after any dependency injection has been performed by the container and before the first business method is invoked on the bean.</description>
			<location chapter="5" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The PostConstruct method is invoked in the transaction and security contexts of the first method on the bean.  The latter is typically a method annotated with Init annotation. </description>
			<location chapter="5" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The PreDestroy method will execute after any method annotated with the Remove annotation has completed.</description>
			<location chapter="5" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The PreDestroy method is invoked in the transaction and security contexts of the method annotated with the Remove annotation. </description>
			<location chapter="5" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The semantics of PrePassivate are the same as EJB 2.1 ejbPassivate callback method.</description>
			<location chapter="5" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The semantics of PostActivate are the same as EJB 2.1 ejbActivate callback method.</description>
			<location chapter="5" section="1.4.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If a stateful session bean uses dependency injection mechanisms for the acquisition of references to resources or other objects in its environment, the container injects these references before any business methods are invoked on the bean instance and after the setSessionContext method (if any) is called.</description>
			<location chapter="5" section="1.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The AroundInvoke methods are supported for stateful session business method invocations.</description>
			<location chapter="5" section="1.6"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>For stateful session beans that implement the SessionSynchronization interface:</description>
			<location chapter="5" section="1.6"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>afterBegin occurs before any  AroundInvoke method invocation</description>
					<location chapter="5" section="1.6"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>beforeCompletion [occurs] after all AroundInvoke invocations are finished</description>
					<location chapter="5" section="1.6"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The local client of a [stateful] session bean acquires a reference to a session bean business interface through one of the dependency injection or lookup mechanisms.</description>
			<location chapter="5" section="1.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The remote client of a [stateful] session bean acquires a reference to a session bean business interface through one of the dependency injection or lookup mechanisms.</description>
			<location chapter="5" section="1.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>When a stateful session bean is looked up or otherwise obtained through the explicit JNDI lookup mechanisms, the container must provide a new stateful session bean instance, as required by the  J2EE Specification, JNDI Naming Context.</description>
			<location chapter="5" section="1.7"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>This [new stateful session bean] instance is uninitialized from the client's point of view as the client does not call create.  The client typically initializes a stateful session bean through business methods defined as part of the bean's interface.  The bean may provide one or more initialization methods for this purpose.</description>
			<location chapter="5" section="1.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Remove annotation may be used to annotate a stateful session bean business method.  Use of this annotation will cause the container to remove the stateful session bean instance after the completion (normal or abnormal) of the annotated method.</description>
			<location chapter="5" section="1.8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The following requirements from the EJB 2.1 Specification apply to statelful session beans written to the EJB 3.0 API. 
			NOTE:  These assertion requirements will be defined in the EJB Core Contracts and Requirements document and associated to that assertion document.  This is a placeholder to cross-check the requirements when the specification is available for review.
			</description>
			<keywords>
				<keyword>application-role</keyword>
				<keyword>application-server-role</keyword>
			</keywords>
			<location chapter="5" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The business interface of a message-driven bean is the message-listener interface that is determined by the messaging type in use for the bean.</description>
			<location chapter="6" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The message-driven bean must implement the appropriate message listener interface for the messaging type that the message-driven bean supports.</description>
			<location chapter="6" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A message-driven bean is:</description>
			<location chapter="6" section="1.2"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>annotated with the MessageDriven annotation</description>
					<location chapter="6" section="1.2"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>or denoted in the deployment descriptor as a message-driven bean</description>
					<location chapter="6" section="1.2"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The PostConstruct callback occurs before the first message listener invocation on the bean.  This is at the point after which any dependency injection has been performed by the container [e.g., at the time the ejbCreate method would normally be called].</description>
			<location chapter="6" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The PostConstruct method executes in an unspecified transaction and security context. </description>
			<location chapter="6" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The PostDestroy callback occurs at the time the bean instance is removed from the pool or destroyed [e.g., at the time the ejbRemove would normally be called].</description>
			<location chapter="6" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The PostDestroy method executes in an unspecified transaction and security context. </description>
			<location chapter="6" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If a message-driven bean uses dependency injection mechanisms for the acquisition of references to resources or other objects in its environment, the container injects these references before any business methods are invoked on the bean instance and after the setMessageDrivenContext method (if any) is called.</description>
			<location chapter="6" section="1.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The AroundInvoke methods are supported for message-driven beans.</description>
			<location chapter="6" section="1.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The following requirements from the EJB 2.1 Specification apply to message-driven beans written to the EJB 3.0 API. 
			NOTE:  These assertion requirements will be defined in the EJB Core Contracts and Requirements document and associated to that assertion document.  This is a placeholder to cross-check the requirements when the specification is available for review.
			</description>
			<location chapter="6" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A bean declares dependency upon a resource or other entry in its environment context through a dependency annotation.</description>
			<location chapter="8" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Dependency annotations may be attached to:</description>
			<location chapter="8" section="1"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>the bean class</description>
					<location chapter="8" section="1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>to the bean class instance variables</description>
					<location chapter="8" section="1"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>to the bean class methods</description>
					<location chapter="8" section="1"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The container automatically intializes these annotated [enterprise bean class instance] variables withe the external references to the specified environment objects.  This initialization occurs before any business methods are invoked on the bean instance (immediately after the time the method (if any) to set the bean's EJBContext is called).</description>
			<location chapter="8" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>When the resource type can be determined by the variable type, the annotation need not contain the type of the object to be accessed.</description>
			<location chapter="8" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If the name of the resource is the same as the variable, it does not need to be explicitly stated.</description>
			<location chapter="8" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>[for instance variable injection] When all properties of the reference can be inferred in this way and/or are defaulted, the Inject annotation may be used instead.</description>
			<location chapter="8" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>When setter injection is to be used [as an alternative to the container's initialization of instance variables], the dependency annotations are applied to setter methods of the bean class defined for that purpose.</description>
			<location chapter="8" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>When the resource type can be determined by the parameter type, the annotation need not contain the type of the object to be accessed.</description>
			<location chapter="8" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If the name of the resource is the same as the property name, it does not need to be explicitly stated.</description>
			<location chapter="8" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A setter method that is annotated with the Resourcr or other dependency annotation will be used by the container for dependency injection.   Such setter injection methods will be called by the container before any business methods are invoked on the bean instance and the bean's method (if any) to set its EJBContext.</description>
			<location chapter="8" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Resources, reference to other components, and other objects that may be looked up in the JNDI name space may be injected by means of the injection mechanisms listed above.</description>
			<location chapter="8" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>References to injected objects are looked up by:</description>
			<location chapter="8" section="1.3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>type (as specified by the instance variable type for instance variable injection)</description>
					<location chapter="8" section="1.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>name (as specified by instance variable name for instance variable injection)</description>
					<location chapter="8" section="1.3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>parameter type (for setter injection)</description>
					<location chapter="8" section="1.3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The method [Object lookup(String name) added to the jakarta.ejb.EJBContext interface] can be used to lookup resources and other environment entries bound in the bean's JNDI environment naming context.</description>
			<location chapter="8" section="1.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Existing EJB 2.1 and earlier applications must be supported to run unchanged in EJB 3.0 containers.</description>
			<location chapter="9" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>All EJB 3.0 implementations must support EJB 1.1, EJB 2.0, and EJB 2.1 deployment descriptors for applications written to earlier versions of the Enterprise JavaBeans specification.</description>
			<location chapter="9" section="1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>An enterprise bean that is written to the EJB 2.1 or earlier API release may be a client of components written to EJB 3.0 API using the earlier EJB APIs when deployed in an EJB 3.0 container.</description>
			<location chapter="9" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Such clients [written to the EJB 2.1 APIs] may access components written to the EJB 3.0 APIs and components written to the earlier EJB APIs within the same transaction.</description>
			<location chapter="9" section="2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A client written to the EJB 3.0 API may be a client of a component written to the EJB 2.1 or earlier API.</description>
			<location chapter="9" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Such clients [written to the new EJB 3.0 API] may access components written to the EJB 3.0 APIs and components written to the earlier EJB APIs within the same transaction.</description>
			<location chapter="9" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Such components access components written to earlier EJB APIs using the EJB 2.1 client view home and component interfaces.</description>
			<location chapter="9" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Home annotation may be used for the injection of the home interface into EJB 3.0 components that are clients of beans written to the earlier EJB client view.</description>
			<location chapter="9" section="2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A client written to the EJB 2.1 (or earlier) API that is deployed in an EJB 3.0 container must be able to utilize the EJB 3.0 persistence APIs.</description>
			<location chapter="9" section="2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Such clients may access the EntityManager under the java:comp/env namespace.  A resource-ref desployment descriptor resource reference is used to denote the dependency on the EntityManager.</description>
			<location chapter="9" section="2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>EJB 3.0 clients and EJB 2.1 clients deployed in EJB 3.0 containers must be able to access EJB 3.0 entities and/or the EntityManager API together with EJB 2.x entities within the same  as well as in separate transactions.</description>
			<location chapter="9" section="2.3"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id/>
			<description>The same database data should not be accessed by both EJB 3.0 and EJB 2.x entities within the same application. The behavior is unspecified if data aliasing occurs.</description>
			<keywords>
				<keyword>application-role</keyword>
				<keyword>application-server-role</keyword>
			</keywords>
			<location chapter="9" section="2.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>An enterprise bean that is written to the EJB 2.1 API and deployed in an EJB 3.0 container may be a client of a bean written to EJB 3.0 API using the EJB 3.0 client view API.</description>
			<location chapter="9" section="2.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Such clients [written to the to the EJB 2.x APIs using the EJB 3.0 client view] may access components written to the EJB 3.0 APIs and components written to the earlier EJB APIs within the same transaction.</description>
			<location chapter="9" section="2.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>These clients [written to the to the EJB 2.x APIs using the EJB 3.0 client view] must :</description>
			<location chapter="9" section="2.4"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>use the ejb-ref or ejb-local-ref deployment element of the EJB 3.0 deployment descriptor to declare their dependency on EJB 3.0 session beans</description>
					<location chapter="9" section="2.4"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>use the resource-ref element to declare dependency on the EntityManager</description>
					<location chapter="9" section="2.4"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Other Combinations of EJB 3.0 and earlier APIs:  The Enterprise JavaBeans Core Contracts and Requirements will specify how the new EJB 3.0 APIs may be used together with the existing EJB APIs within a single component class.  This is a placeholder to cross-check assertions when that specification is available.</description>
			<location chapter="9" section="2.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>A session bean written to the EJB 3.0 API may be adapted to such earlier preexisting client view interfaces.</description>
			<location chapter="9" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The session bean designates the interfaces to be adapted by using:</description>
			<location chapter="9" section="3"/>
			<sub-assertions>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>the RemoteHome metadata annotation</description>
					<location chapter="9" section="3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>the LocalHome metadata annotation</description>
					<location chapter="9" section="3"/>
				</assertion>
				<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
					<id/>
					<description>equivalent deployment descriptors elements</description>
					<location chapter="9" section="3"/>
				</assertion>
			</sub-assertions>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>When the client is deployed, the container classes that implement the home and remote interfaces referenced by the client must provide the implementation of the jakarta.ejb.EJBHome and jakarta.ejb.EJBObject interfaces</description>
			<location chapter="9" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>When the client is deployed, the container classes that implement the local home and local interfaces referenced by the client must provide the implementation of the jakarta.ejb.EJBLocalHome and jakarta.ejb.EJBLocalObject interfaces</description>
			<location chapter="9" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>In addition, the container implementation classes must implement the methods of the home and component interfaces to apply to the EJB 3.0 component being referenced.</description>
			<location chapter="9" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>[Stateless Session Bean] The invocation of the home create() method must return the corresponding local or remote component interface of the bean.</description>
			<location chapter="9" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id/>
			<description>[[Stateless Session Bean] The invocation of the home create()] may or may not cause the creation of the bean instance.</description>
			<location chapter="9" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id/>
			<description>When the [stateless session bean instance is created] the container invokes the setSessionContext method (if any), performs any other dependency injection, and invokes the PostConstruct callback method (if any) as specified in Enterprise JavaBeans Core Contracts and Requirements. (This assertion may be removed after cross-checking the requiremens when the referenced specification is available for review.)</description>
			<location chapter="9" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="true" defined-by="technology" status="active" testable="false">
			<id/>
			<description>[Stateless Session Bean] It is likewise implementation-dependent as to whether the invocation of the EJBHome remove(Handle) or EJBObject or EJBLocalObject remove() method causes immediate removal of the bean instance depending on the container's implementation strategy.</description>
			<location chapter="9" section="3.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>[Stateful Session Bean] The invocation of a createMETHOD() causes construction of the bean instance, invocation of the PostConstruct callback (if any), and invocation of the matching Init method, and returns the corresponding local or remote component interface of the bean.</description>
			<location chapter="9" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>[Stateful Session Bean] The invocation of these [PostConstruct, Init] methods occurs in the same transaction and security context as the client's call to the create method.</description>
			<location chapter="9" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>[Stateful Session Bean] The invocation of EJBHome remove(Handle) method causes the invocation of the PreDestroy callback method (if any) and the removal of the bean instance.</description>
			<location chapter="9" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>[Stateful Session Bean] The invocation of EJBObject remove() method causes the invocation of the PreDestroy callback method (if any) and the removal of the bean instance.</description>
			<location chapter="9" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>[Stateful Session Bean] The invocation of EJBLocalObject remove() method causes the invocation of the PreDestroy callback method (if any) and the removal of the bean instance.</description>
			<location chapter="9" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The result type of such an Init method is required to be void, and its parameter types must be exactly the same as those of the referenced create method.</description>
			<keywords>
				<keyword>application-role</keyword>
				<keyword>application-server-role</keyword>
			</keywords>
			<location chapter="9" section="3.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>It is permitted to combine the use of [EJB 3.0] annotations with the bean's implementation of one of the jakarta.ejb.EnterpriseBean interfaces as such combination may be useful in facilitating migration to the EJB 3.0 simplified programming model.</description>
			<location chapter="9" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>In addition to the business interface described in Section 3.2, a session bean may define EJBHome, EJBLocalHome, EJBObject, and/or EJBLocalObject interfaces in accordance with the rules of the EJB 2.1 specification.</description>
			<location chapter="9" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The stateless annotation is applied to the bean class.  The name annotation element defaults to the unqualified name of the bean class.</description>
			<location chapter="10" section="1.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The stateful annotation is applied to the bean class.  The name annotation element defaults to the unqualified name of the bean class.</description>
			<location chapter="10" section="1.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Init annotation is used to specify the correspondence of a method on the bean class with a createMETHOD method for an adapted EJB 2.1 EJBHome and/or EJBLocalHome client view.  The result type of such an Init method is required to be void, and its parameter types must be exactly the same as those of the referenced createMETHOD method.</description>
			<keywords>
				<keyword>application-role</keyword>
				<keyword>application-server-role</keyword>
			</keywords>
			<location chapter="10" section="1.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The value element must be specified when the init annotation is used with an adapted home interface of a stateful session bean that has more than one create method.</description>
			<keywords>
				<keyword>application-role</keyword>
				<keyword>application-server-role</keyword>
			</keywords>
			<location chapter="10" section="1.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Init method is only required to be specified for stateful session beans that provide a RemoteHome or LocalHome interface. </description>
			<keywords>
				<keyword>application-role</keyword>
			</keywords>
			<location chapter="10" section="1.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The name of the adapted create method of the home or the localhome interface must be specified if there is any ambiguity.</description>
			<location chapter="10" section="1.2.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Remove annotation is used to denote a remove method of a stateful session bean.  Completion of this method causes the  container to destroy the stateful session bean, first invoking the bean's PreDestroy method, if any.</description>
			<location chapter="10" section="1.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The retainIfException element allows the removal to be prevented if the method terminates abnormally with an application exception.</description>
			<location chapter="10" section="1.2.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The MessageDriven annotation is applied to the bean class.  The name annotation element defaults to the unqualified name of the bean class.</description>
			<location chapter="10" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>messageListenerInterface must be specified if the bean class does not implement its message listener interface or implements more than one interface.</description>
			<keywords>
				<keyword>application-role</keyword>
			</keywords>
			<location chapter="10" section="1.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Remote and Local annnotations apply only to session beans and their interface.</description>
			<location chapter="10" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Remote annotation is applied to the session bean class or remote business interface to designate a remote interface of the bean.</description>
			<location chapter="10" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Local annotation is applied to the session bean class or local business interface to designate a local interface of the bean.</description>
			<location chapter="10" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The value element [of the Remote or Local annotation] is specified only when the annotation is applied to the bean class.</description>
			<keywords>
				<keyword>application-role</keyword>
			</keywords>
			<location chapter="10" section="2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The RemoteHome and LocalHome annotations may be applied to session beans only.  These annotation are intended for use with EJB 3.0 session beans that provide an adapted EJB 2.1 component view. They may also be used with beans that have been written to the EJB 2.1 APIs.</description>
			<location chapter="10" section="3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If the TransactionManagement annotation is not specified for a session bean or message-driven bean, the bean is assumed to have container managed transaction demarcation.</description>
			<location chapter="10" section="4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The TransactionAttribute annotation can only be specified if container managed transaction demarcation is used.</description>
            <keywords>
                <keyword>application-role</keyword>
                <keyword>application-server-role</keyword>
            </keywords>
			<location chapter="10" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The [TransactionAttribute] annotation can be specified on the bean class and/or it can be specified on methods of the class that are methods of the business interface.</description>
			<location chapter="10" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Specifying the TransactionAttribute annotation on the bean class means that is applies to all applicable business interface methods of the class.</description>
			<location chapter="10" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Specifying the TransactionAttribute annotation on a method applies it to that method only.</description>
			<location chapter="10" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If the [TransactionAttribute] annotation is applied at both the class and method level, the method value overrides if the two disagree.</description>
			<location chapter="10" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If a TransactionAttribute annotation is not specified, and the bean uses container managed transaction demarcation, the semantics of the REQUIRED transaction attribute are assumed.</description>
			<location chapter="10" section="5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Timeout annotation is used to denote the timeout method of an enterprise bean.</description>
			<location chapter="10" section="8"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The ApplicationException annotation is applied to an exception to denote that it is an application exception and should be reported to the client directly (i.e., unwrapped).</description>
			<location chapter="10" section="9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The ApplicationException annotation may be applied to both checked and unchecked exceptions.</description>
			<location chapter="10" section="9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The rollback element is used to indicate whether the container should cause the transaction to rollback when the exception is thrown.</description>
			<location chapter="10" section="9"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The RolesReferenced annotation is used to declare the references to security roles in the enterprise bean code.</description>
			<location chapter="10" section="10.1"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The RolesAllowed annotation specifies the security roles that are allowed to invoke the methods of the bean.  The value of the RolesAllowed annotation is a list of security role names.</description>
			<location chapter="10" section="10.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Specifying the RolesAllowed annotation on the bean class means that is applies to all applicable business interface methods of the class.</description>
			<location chapter="10" section="10.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Specifying the RolesAllowed annotation on a method applies it to that method only.</description>
			<location chapter="10" section="10.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If the [RolesAllowed] annotation is applied at both the class and method level, the method value overrides if the two disagree.</description>
			<location chapter="10" section="10.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>If the PermitAll annotation is applied to the bean class, and RolesAllowed is specified on an individual method, the value of the RolesAllowed annotation overrides for a given method.</description>
			<location chapter="10" section="10.2"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Specifying the PermitAll annotation on the bean class means that is applies to all applicable business methods of the class.</description>
			<location chapter="10" section="10.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>Specifying the PermitAll annotation on a method applies it to that method only, overriding any class-level setting for the particular method.</description>
			<location chapter="10" section="10.3"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The DenyAll annotation specifies that no security roles are allowed to invoke the specified method; i.e., that the specified method is to be excluded from execution.</description>
			<location chapter="10" section="10.4"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The RunAs annotation is used to specify the bean's run-as property.  This annotation is applied to the ean class.  Its values is the name of the security role.</description>
			<location chapter="10" section="10.5"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The EJB annotation denotes a reference to an EJB business or home interface.</description>
			<location chapter="10" section="11"/>
		</assertion>
		<assertion required="true" impl-spec="false" defined-by="technology" status="active" testable="true">
			<id/>
			<description>The Resource annotation is used to express a dependency on an external resource in the bean's environment.</description>
			<location chapter="10" section="12"/>
		</assertion>
	</assertions>
</spec>

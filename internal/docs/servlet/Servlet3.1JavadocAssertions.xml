<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
	<next-available-id>956</next-available-id>
	<previous-id>955</previous-id>
	<technology>Servlet</technology>
	<id>Servlet</id>
	<name>Java(TM) Servlet</name>
	<version>3.1</version>
	<assertions>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>1</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>UnavailableException</class-interface>
			<method name="UnavailableException" return-type="UnavailableException">
				<parameters>
					<parameter>javax.servlet.Servlet</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>2</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>UnavailableException</class-interface>
			<method name="UnavailableException" return-type="UnavailableException">
				<parameters>
					<parameter>int</parameter>
					<parameter>javax.servlet.Servlet</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>3</id>
			<description>                            Constructs a new exception with a descriptive  message indicating that the servlet is permanently  unavailable.

			</description>
			<package>javax.servlet</package>
			<class-interface>UnavailableException</class-interface>
			<method name="UnavailableException" return-type="UnavailableException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>4</id>
			<description>                            Constructs a new exception with a descriptive message  indicating that the servlet is temporarily unavailable  and giving an estimate of how long it will be unavailable.
                                In some cases, the servlet cannot make an estimate. For  example, the servlet might know that a server it needs is  not running, but not be able to report how long it will take  to be restored to functionality. This can be indicated with  a negative or zero value for the seconds argument.

			</description>
			<package>javax.servlet</package>
			<class-interface>UnavailableException</class-interface>
			<method name="UnavailableException" return-type="UnavailableException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>5</id>
			<description>                            Returns a boolean indicating  whether the servlet is permanently unavailable.</description>
			<package>javax.servlet</package>
			<class-interface>UnavailableException</class-interface>
			<method name="isPermanent" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>6</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>UnavailableException</class-interface>
			<method name="getServlet" return-type="javax.servlet.Servlet"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>7</id>
			<description>                            Returns the number of seconds the servlet expects to   be temporarily unavailable.
                                 If this method returns a negative number, the servlet  is permanently unavailable or cannot provide an estimate of  how long it will be unavailable. No effort is  made to correct for the time elapsed since the exception was  first reported.

			</description>
			<package>javax.servlet</package>
			<class-interface>UnavailableException</class-interface>
			<method name="getUnavailableSeconds" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>8</id>
			<description>Returns the exception that caused this servlet exception.</description>
			<package>javax.servlet</package>
			<class-interface>UnavailableException.{javax.servlet.ServletException}</class-interface>
			<method name="getRootCause" return-type="java.lang.Throwable"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>9</id>
			<description>                            Creates a ServletResponse adaptor wrapping the given response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="ServletResponseWrapper" return-type="ServletResponseWrapper">
				<parameters>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>10</id>
			<description>Return the wrapped ServletResponse object.</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getResponse" return-type="javax.servlet.ServletResponse"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>11</id>
			<description>Sets the response being wrapped.</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="setResponse" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>12</id>
			<description>if the response is null.</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="setResponse" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>13</id>
			<description>The default behavior of this method is to call setCharacterEncoding(String charset)  on the wrapped response object.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>14</id>
			<description>                            The default behavior of this method is to return getCharacterEncoding()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>15</id>
			<description>The default behavior of this method is to return getOutputStream()  on the wrapped response object.</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>16</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>17</id>
			<description>                            The default behavior of this method is to return getWriter()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>18</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>19</id>
			<description>                            The default behavior of this method is to call setContentLength(int len)  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="setContentLength" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>20</id>
			<description>                            The default behavior of this method is to call setContentType(String type)  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="setContentType" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>21</id>
			<description>                            The default behavior of this method is to return getContentType()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>22</id>
			<description>                            The default behavior of this method is to call setBufferSize(int size)  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="setBufferSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>23</id>
			<description>                            The default behavior of this method is to return getBufferSize()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getBufferSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>24</id>
			<description>                            The default behavior of this method is to call flushBuffer()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="flushBuffer" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>25</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="flushBuffer" return-type="void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>26</id>
			<description>                            The default behavior of this method is to return isCommitted()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="isCommitted" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>27</id>
			<description>                            The default behavior of this method is to call reset()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="reset" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>28</id>
			<description>                            The default behavior of this method is to call resetBuffer()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="resetBuffer" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>29</id>
			<description>                            The default behavior of this method is to call setLocale(Locale loc)  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="setLocale" return-type="void">
				<parameters>
					<parameter>java.util.Locale</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>30</id>
			<description>                            The default behavior of this method is to return getLocale()  on the wrapped response object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponseWrapper</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>31</id>
			<description>                            Creates a ServletRequest adaptor wrapping the given request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="ServletRequestWrapper" return-type="ServletRequestWrapper">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>32</id>
			<description>                            Return the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getRequest" return-type="javax.servlet.ServletRequest"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>33</id>
			<description>Sets the request object being wrapped.</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="setRequest" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>34</id>
			<description>if the request is null.</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="setRequest" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>35</id>
			<description>                            The default behavior of this method is to call getAttribute(String name)  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>36</id>
			<description>                            The default behavior of this method is to return getAttributeNames()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getAttributeNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>37</id>
			<description>                            The default behavior of this method is to return getCharacterEncoding()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>38</id>
			<description>Overrides the name of the character encoding used in the body of this wrapped request. This method must be called prior to reading request parameters or reading input using getReader(). Otherwise, it has no effect.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>39</id>
			<description>if this ServletRequest is still in a state where a character encoding may be set, but the specified encoding is invalid</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.UnsupportedEncodingException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>40</id>
			<description>                            The default behavior of this method is to return getContentLength()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getContentLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>41</id>
			<description>                            The default behavior of this method is to return getContentType()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>42</id>
			<description>                            The default behavior of this method is to return getInputStream()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>43</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>44</id>
			<description>                            The default behavior of this method is to return getParameter(String name)  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>45</id>
			<description>                            The default behavior of this method is to return getParameterMap()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getParameterMap" return-type="java.util.Map"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>46</id>
			<description>                            The default behavior of this method is to return getParameterNames()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>47</id>
			<description>                            The default behavior of this method is to return getParameterValues(String name)  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getParameterValues" return-type="java.lang.String[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>48</id>
			<description>                            The default behavior of this method is to return getProtocol()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getProtocol" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>49</id>
			<description>                            The default behavior of this method is to return getScheme()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getScheme" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>50</id>
			<description>                            The default behavior of this method is to return getServerName()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getServerName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>51</id>
			<description>                            The default behavior of this method is to return getServerPort()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getServerPort" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>52</id>
			<description>                            The default behavior of this method is to return getReader()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>53</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>54</id>
			<description>                            The default behavior of this method is to return getRemoteAddr()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getRemoteAddr" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>55</id>
			<description>                            The default behavior of this method is to return getRemoteHost()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getRemoteHost" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>56</id>
			<description>                            The default behavior of this method is to return setAttribute(String name, Object o)  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>57</id>
			<description>                            The default behavior of this method is to call removeAttribute(String name)  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>58</id>
			<description>                            The default behavior of this method is to return getLocale()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>59</id>
			<description>                            The default behavior of this method is to return getLocales()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getLocales" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>60</id>
			<description>                            The default behavior of this method is to return isSecure()  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="isSecure" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>61</id>
			<description>                            The default behavior of this method is to return getRequestDispatcher(String path)  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getRequestDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>62</id>
			<description>                            The default behavior of this method is to return getRealPath(String path)  on the wrapped request object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestWrapper</class-interface>
			<method name="getRealPath" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>63</id>
			<description>                            Construct a ServletRequestEvent from the given context.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestEvent</class-interface>
			<method name="ServletRequestEvent" return-type="ServletRequestEvent">
				<parameters>
					<parameter>javax.servlet.ServletContext</parameter>
					<parameter>javax.servlet.ServletRequest</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>64</id>
			<description>                            Return the ServletRequest that changed.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestEvent</class-interface>
			<method name="getServletRequest" return-type="javax.servlet.ServletRequest"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>65</id>
			<description>                            Return the ServletContext that changed.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestEvent</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>66</id>
			<description>                            Construct a ServletRequestAttributeEvent from the given context for the  given attribute name and attribute value.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeEvent</class-interface>
			<method name="ServletRequestAttributeEvent" return-type="ServletRequestAttributeEvent">
				<parameters>
					<parameter>javax.servlet.ServletContext</parameter>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>67</id>
			<description>Return the name of the attribute that changed on the ServletRequest.</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeEvent</class-interface>
			<method name="getName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>68</id>
			<description>Returns the value of the attribute that has been added removed or   replaced.
                             If the attribute was added, this is the value of the   attribute.</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>69</id>
			<description>Returns the value of the attribute that has been added removed or   replaced.
                             If the attribute was removed, this is the value of the   removed attribute.</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>70</id>
			<description>Returns the value of the attribute that has been added removed or   replaced.
                             If the attribute was replaced, this is the old   value of the attribute.</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>71</id>
			<description>Return the ServletRequest that changed.</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeEvent.{javax.servlet.ServletRequestEvent}</class-interface>
			<method name="getServletRequest" return-type="javax.servlet.ServletRequest"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>72</id>
			<description>Return the ServletContext that changed.</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeEvent.{javax.servlet.ServletRequestEvent}</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>73</id>
			<description>                            Writes a String to the client,   without a carriage return-line feed (CRLF)   character at the end.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>74</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>75</id>
			<description>                            Writes a boolean value to the client,  with no carriage return-line feed (CRLF)   character at the end.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>76</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>77</id>
			<description>                            Writes a character to the client,  with no carriage return-line feed (CRLF)   at the end.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>char</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>78</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>char</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>79</id>
			<description>                            Writes an int to the client,  with no carriage return-line feed (CRLF)   at the end.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>80</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>81</id>
			<description>                            Writes a long value to the client,  with no carriage return-line feed (CRLF) at the end.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>82</id>
			<description>if an input or output exception      occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>83</id>
			<description>                            Writes a float value to the client,  with no carriage return-line feed (CRLF) at the end.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>84</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>85</id>
			<description>                            Writes a double value to the client,  with no carriage return-line feed (CRLF) at the end.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>86</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="print" return-type="void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>87</id>
			<description>                            Writes a carriage return-line feed (CRLF)  to the client.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>88</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>89</id>
			<description>                            Writes a String to the client,   followed by a carriage return-line feed (CRLF).

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>90</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>91</id>
			<description>                            Writes a boolean value to the client,   followed by a   carriage return-line feed (CRLF).

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>92</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>93</id>
			<description>                            Writes a character to the client, followed by a carriage  return-line feed (CRLF).

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>char</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>94</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>char</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>95</id>
			<description>                            Writes an int to the client, followed by a   carriage return-line feed (CRLF) character.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>96</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>97</id>
			<description>                            Writes a long value to the client, followed by a   carriage return-line feed (CRLF).

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>98</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>long</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>99</id>
			<description>                            Writes a float value to the client,   followed by a carriage return-line feed (CRLF).

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>100</id>
			<description>if an input or output exception      occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>float</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>101</id>
			<description>                            Writes a double value to the client,   followed by a carriage return-line feed (CRLF).

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>102</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletOutputStream</class-interface>
			<method name="println" return-type="void">
				<parameters>
					<parameter>double</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>103</id>
			<description>Reads the input stream, one line at a time. Starting at an  offset, reads bytes into an array, until it reads a certain number  of bytes or reaches a newline character, which it reads into the  array as well.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletInputStream</class-interface>
			<method name="readLine" return-type="int">
				<parameters>
					<parameter>byte[]</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>104</id>
			<description>if an input or output exception has occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletInputStream</class-interface>
			<method name="readLine" return-type="int">
				<parameters>
					<parameter>byte[]</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>105</id>
			<description>                            Constructs a new servlet exception.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletException</class-interface>
			<method name="ServletException" return-type="ServletException"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>106</id>
			<description>                            Constructs a new servlet exception with the  specified message.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletException</class-interface>
			<method name="ServletException" return-type="ServletException">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>107</id>
			<description>                            Constructs a new servlet exception when the servlet   needs to throw an exception and include a message   about the "root cause" exception that interfered with its   normal operation, including a description message.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletException</class-interface>
			<method name="ServletException" return-type="ServletException">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>108</id>
			<description>                            Constructs a new servlet exception when the servlet   needs to throw an exception and include a message  about the "root cause" exception that interfered with its  normal operation.
                              The exception's message is based on the localized  message of the underlying exception.   This method calls the getLocalizedMessage method  on the Throwable exception to get a localized exception  message. When subclassing ServletException,   this method can be overridden to create an exception message   designed for a specific locale.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletException</class-interface>
			<method name="ServletException" return-type="ServletException">
				<parameters>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>109</id>
			<description>                            Returns the exception that caused this servlet exception.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletException</class-interface>
			<method name="getRootCause" return-type="java.lang.Throwable"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>110</id>
			<description>                            Construct a ServletContextEvent from the given context.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextEvent</class-interface>
			<method name="ServletContextEvent" return-type="ServletContextEvent">
				<parameters>
					<parameter>javax.servlet.ServletContext</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>111</id>
			<description>                            Return the ServletContext that changed.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextEvent</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>112</id>
			<description>                            Construct a ServletContextAttributeEvent from the given context for the  given attribute name and attribute value.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeEvent</class-interface>
			<method name="ServletContextAttributeEvent" return-type="ServletContextAttributeEvent">
				<parameters>
					<parameter>javax.servlet.ServletContext</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>113</id>
			<description>                            Return the name of the attribute that changed on the ServletContext.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeEvent</class-interface>
			<method name="getName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>114</id>
			<description>                            Returns the value of the attribute that has been added removed or replaced.
                              If the attribute was added, this is the value of the attribute.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>115</id>
			<description>                            Returns the value of the attribute that has been added removed or replaced.
                              If the attrubute was  removed, this is the value of the removed attribute.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>116</id>
			<description>                            Returns the value of the attribute that has been added removed or replaced.
                              If the attribute was replaced, this  is the old value of the attribute.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>117</id>
			<description>Return the ServletContext that changed.</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeEvent.{javax.servlet.ServletContextEvent}</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>118</id>
			<description>                            Does nothing.
                             All of the servlet initialization  is done by one of the init methods.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="GenericServlet" return-type="GenericServlet"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>119</id>
			<description>                            Called by the servlet container to indicate to a servlet that the  servlet is being taken out of service.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="destroy" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>120</id>
			<description>                            Returns a String containing the value of the named  initialization parameter, or null if the parameter does  not exist.

                              This method is supplied for convenience. It gets the   value of the named parameter from the servlet's   ServletConfig object.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>121</id>
			<description>                            Returns null if the parameter does  not exist.

                              This method is supplied for convenience. It gets the   value of the named parameter from the servlet's   ServletConfig object.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>122</id>
			<description>                            Returns the names of the servlet's initialization parameters   as an Enumeration of String objects,  or an empty Enumeration if the servlet has no  initialization parameters.

                              This method is supplied for convenience. It gets the   parameter names from the servlet's ServletConfig object.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>123</id>
			<description>                            Returns an empty Enumeration if the servlet has no  initialization parameters.

                              This method is supplied for convenience. It gets the   parameter names from the servlet's ServletConfig object.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>124</id>
			<description>
                            Returns this servlet's  object.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="getServletConfig" return-type="javax.servlet.ServletConfig"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>125</id>
			<description>
                            Returns a reference to the  context in which this servlet  is running.

                              This method is supplied for convenience. It gets the servlet context from the servlet's ServletConfig object.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>126</id>
			<description>                            Returns information about the servlet, such as  author, version, and copyright.

                               By default, this method returns an empty string.  Override this method  to have it return a meaningful value.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="getServletInfo" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>127</id>
			<description>                            Called by the servlet container to indicate to a servlet that the  servlet is being placed into service.


                             This implementation stores the   object it receives from the servlet container for later use.  When overriding this form of the method, call   super.init(config).


			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="init" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletConfig</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>128</id>
			<description>if an exception occurs that      interrupts the servlet's normal      operation</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="init" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletConfig</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>129</id>
			<description>                            A convenience method which can be overridden so that there's no need  to call super.init(config).


                               Instead of overriding #init(ServletConfig), simply override  this method and it will be called by  GenericServlet.init(ServletConfig config).  The ServletConfig object can still be retrieved via .

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="init" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>130</id>
			<description>if an exception occurs that      interrupts the servlet's      normal operation</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="init" return-type="void">
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>131</id>
			<description>                            Writes the specified message to a servlet log file, prepended by the  servlet's name.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="log" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>132</id>
			<description>                            Writes an explanatory message and a stack trace  for a given Throwable exception  to the servlet log file, prepended by the servlet's name.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="log" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>133</id>
			<description>                            Called by the servlet container to allow the servlet to respond to  a request.

                              This method is declared abstract so subclasses, such as   HttpServlet, must override it.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>134</id>
			<description>if an exception occurs that      interferes with the servlet's      normal operation occurred</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>135</id>
			<description>if an input or output      exception occurs</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>136</id>
			<description>                            Returns the name of this servlet instance.

			</description>
			<package>javax.servlet</package>
			<class-interface>GenericServlet</class-interface>
			<method name="getServletName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>137</id>
			<description>                            Returns the name of the charset used for  the MIME body sent in this response.
                               See RFC 2047 (http://ds.internic.net/rfc/rfc2045.txt)  for more information about character encoding and MIME.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>138</id>
			<description>                            Returns the name of the charset used for  the MIME body sent in this response.
                               If no charset has been assigned, it is implicitly  set to ISO-8859-1 (Latin-1).   See RFC 2047 (http://ds.internic.net/rfc/rfc2045.txt)  for more information about character encoding and MIME.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>139</id>
			<description>                            Overrides the name of the character encoding used in the body  of the request.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>140</id>
			<description>
                            Returns a ServletOutputStream suitable output steam for writing binary   data in the response.

                             Calling flush() on the ServletOutputStream commits the response.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>141</id>
			<description>
                            Returns a ServletOutputStream suitable output steam for writing binary   data in the response.

                             The servlet container does not encode the  binary data.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>142</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>143</id>
			<description>if the getWriter method has been called on this response</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream">
			    <throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>144</id>
			<description>                            Returns a PrintWriter object that   can send character text to the client.


                               The character encoding used is the one specified   in the charset= property of the setContentType(String)  method.



			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>145</id>
			<description>                            Returns a PrintWriter object that   can send character text to the client.


                               getWriter()must be called  before calling the setContentType(String) methodfor the charset to take effect.



			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>146</id>
			<description>                            Returns a PrintWriter object that   can send character text to the client.


                               Calling flush() on the PrintWriter commits the response.



			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>147</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>148</id>
			<description>if the character encoding returned by getCharacterEncoding cannot be used</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter">
				<throw>java.io.UnsupportedEncodingException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>149</id>
			<description>if the getOutputStream method has already been called for this response object</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>150</id>
			<description>                            Sets the length of the content body in the response  In HTTP servlets, this method sets the HTTP Content-Length header.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setContentLength" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>151</id>
			<description>Sets the content type of the response being sent to the client, if the response has not been committed yet. The given content type may include a character encoding specification, for example, text/html;charset=UTF-8. The response s character encoding is only set from the given content type if this method is called before getWriter is called.
                        </description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setContentType" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>151.1</id>
			<description>This method may be called repeatedly to change content type and character encoding.
                        </description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setContentType" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>151.2</id>
			<description>This method has no effect if called after the response has been committed. It does not set the response s character encoding if it is called after getWriter has been called or after the response has been committed.
                        </description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setContentType" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>151.3</id>
			<description>Containers must communicate the content type and the character encoding used for the servlet response's writer to the client if the protocol provides a way for doing so. In the case of HTTP, the Content-Type header is used.
                        </description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setContentType" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>152</id>
			<description>Returns the content type used for the MIME body sent in this response. The content type proper must have been specified using setContentType(java.lang.String)  before the response is committed.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>153</id>
			<description>If no content type has been specified, this method returns null.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>153.1</id>
			<description>If a content type has been specified, and a character encoding has been explicitly or implicitly specified as described in getCharacterEncoding() or getWriter() has been called, the charset parameter is included in the string returned. If no character encoding has been specified, the charset parameter is omitted.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>154</id>
			<description>                            Sets the preferred buffer size for the body of the response.
                                The servlet container will use a buffer at least as large as   the size requested.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setBufferSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>155</id>
			<description>If this method is called after content has been written</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setBufferSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>156</id>
			<description>                            Returns the actual buffer size used for the response.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getBufferSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>157</id>
			<description>
                              If no buffering  is used, this method returns 0.





			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getBufferSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>158</id>
			<description>                            Forces any content in the buffer to be written to the client.
                              A call  to this method automatically commits the response, meaning the status   code and headers will be written.





			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="flushBuffer" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>159</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="flushBuffer" return-type="void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>160</id>
			<description>                            Clears the content of the underlying buffer in the response without  clearing headers or status code.</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="resetBuffer" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>161</id>
			<description>                            Returns a boolean indicating if the response has been  committed.</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="isCommitted" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>162</id>
			<description>                            Clears any data that exists in the buffer as well as the status code and  headers.</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="reset" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>163</id>
			<description>if the response has already been committed</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="reset" return-type="void">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>164</id>
			<description>Sets the locale of the response, if the response has not been
                                     committed yet.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setLocale" return-type="void">
				<parameters>
					<parameter>java.util.Locale</parameter>
				</parameters>
			</method>
		</assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.1</id>
                        <description>It also sets the response's character encoding
                                     appropriately for the locale, if the character encoding has not
                                     been explicitly set using setContentType
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.2</id>
                        <description>It also sets the response's character encoding
                                     appropriately for the locale, if the character encoding has not
                                     been explicitly set using
                                     setCharacterEncoding,
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.3</id>
                        <description>It also sets the response's character encoding
                                     appropriately for the locale, if the character encoding has not
                                     been explicitly set using setContentType or
                                     setCharacterEncoding, getWriter hasn't
                                     been called yet
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.4</id>
                        <description>It also sets the response's character encoding
                                     appropriately for the locale, if the character encoding has not
                                     been explicitly set using setContentType or
                                     setCharacterEncoding,
                                     and the response hasn't been committed yet.
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.5</id>
                        <description>If the deployment descriptor contains a
                                      locale-encoding-mapping-list element, and that
                                      element provides a mapping for the given locale, that mapping
                                      is used.
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.6</id>
                        <description>Otherwise, the mapping from locale to character
                                     encoding is container dependent.
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.7</id>
                        <description>This method may be called repeatedly to change locale and
                                     character encoding.
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.8</id>
                        <description>The method has no effect if called after the
                                     response has been committed.
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.9</id>
                        <description>It does not set the response's
                                     character encoding if it is called after setContentType
                                     has been called with a charset specification,</description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.10</id>
                        <description>It does not set the response's
                                     character encoding if it is called after
                                     setCharacterEncoding has been called
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.11</id>
                        <description>It does not set the response's
                                     character encoding if it is called after
                                     getWriter has been called,
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>164.12</id>
                        <description>It does not set the response's
                                     character encoding if it is called after
                                     the response has been committed.
                        </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletResponse</class-interface>
                        <method name="setLocale" return-type="void">
                                <parameters>
                                        <parameter>java.util.Locale</parameter>
                                </parameters>
                        </method>
                </assertion>
                <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>165</id>
                        <description>Containers must communicate the locale and the character encoding
                                     used for the servlet response's writer to the client if the protocol
                                     provides a way for doing so. In the case of HTTP, the locale is
                                     communicated via the Content-Language header,
                                     the character encoding as part of the Content-Type
                                     header for text media types. Note that the character encoding
                                     cannot be communicated via HTTP headers if the servlet does not
                                     specify a content type; however, it is still used to encode text
                                     written via the servlet response's writer.Sets the locale of the response,
                                     setting the headers (including the  Content-Type's charset) as appropriate.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="setLocale" return-type="void">
				<parameters>
					<parameter>java.util.Locale</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>166</id>
			<description>Returns the locale specified for this response
                                     using the setLocale method.
                                     If no locale has been specified,
                                      the container's default locale is returned.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletResponse</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>167</id>
			<description>                            Notification that the servlet request is about to go out of scope.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestListener</class-interface>
			<method name="requestDestroyed" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequestEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>168</id>
			<description>                            Notification that the servlet request is about to go into scope.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestListener</class-interface>
			<method name="requestInitialized" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequestEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>169</id>
			<description>                            Notification that a new attribute was added to the servlet request.
                             Called after the attribute is added.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeListener</class-interface>
			<method name="attributeAdded" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequestAttributeEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>170</id>
			<description>                            Notification that an existing attribute has been removed from the servlet request.
                             Called after the attribute is removed.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeListener</class-interface>
			<method name="attributeRemoved" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequestAttributeEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>171</id>
			<description>                            Notification that an attribute on the servlet request has been replaced.
                             Called after the attribute is replaced.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequestAttributeListener</class-interface>
			<method name="attributeReplaced" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequestAttributeEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>172</id>
			<description>                            Returns the value of the named attribute as an Object.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>173</id>
			<description>                            Returns null if no attribute of the given name exists.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>174</id>
			<description>                            Returns an Enumeration containing the  names of the attributes available to this request.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getAttributeNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>175</id>
			<description>                            Returns an empty Enumeration  if the request has no attributes available to it.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getAttributeNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>176</id>
			<description>                            Returns the name of the character encoding used in the body of this  request.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>177</id>
			<description>                            Returns null if the request  does not specify a character encoding

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>178</id>
			<description>Overrides the name of the character encoding used in the body of this
request. This method must be called prior to reading request parameters or
reading input using getReader(). Otherwise, it has no effect.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>179</id>
			<description>if this ServletRequest is still in a state where a character encoding may be set, but the specified encoding is invalid</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.UnsupportedEncodingException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>180</id>
			<description>Returns the length, in bytes, of the request body   and made available by the input stream.
                         For HTTP servlets, same as the value  of the CGI variable CONTENT_LENGTH.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getContentLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>181</id>
			<description>                            Returns -1 if the  length is not known.
                             For HTTP servlets, same as the value  of the CGI variable CONTENT_LENGTH.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getContentLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>182</id>
			<description>Returns the MIME type of the body of the request.
                             For HTTP servlets,   same as the value of the CGI variable CONTENT_TYPE.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>183</id>
			<description>Returns null if the MIME type is not known.
                             For HTTP servlets,   same as the value of the CGI variable CONTENT_TYPE.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>184</id>
			<description>
                            Retrieves the body of the request as binary data using  a ServletInputStream.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>185</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>186</id>
			<description>if the getReader() method has already been called for this request</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>187</id>
			<description>                            Returns the value of a request parameter as a String.



                             Request parameters  are extra information sent with the request.  For HTTP servlets,  parameters are contained in the query string or posted form data.   You should only use this method when you are sure the  parameter has only one value. If the parameter might have  more than one value, use .   If you use this method with a multivalued  parameter, the value returned is equal to the first value  in the array returned by getParameterValues.   If the parameter data was sent in the request body, such as occurs  with an HTTP POST request, then reading the body directly via  or  can interfere  with the execution of this method.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>188</id>
			<description>                           Returns null if the parameter does not exist.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>189</id>
			<description>                            Returns an Enumeration of String  objects containing the names of the parameters contained  in this request.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>190</id>
			<description>                             If the request has   no parameters, the method returns an   empty Enumeration.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>191</id>
			<description>                            Returns an array of String objects containing   all of the values the given request parameter has.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getParameterValues" return-type="java.lang.String[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>192</id>
			<description>                            Returns null if the parameter does not exist.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getParameterValues" return-type="java.lang.String[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>193</id>
			<description>                            Returns a java.util.Map of the parameters of this request.
                              Request parameters  are extra information sent with the request.  For HTTP servlets,  parameters are contained in the query string or posted form data.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getParameterMap" return-type="java.util.Map"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>194</id>
			<description>                            Returns the name and version of the protocol the request uses  in the form protocol/majorVersion.minorVersion, for   example, HTTP/1.1.
                             For HTTP servlets, the value  returned is the same as the value of the CGI variable   SERVER_PROTOCOL.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getProtocol" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>195</id>
			<description>                            Returns the name of the scheme used to make this request,   for example,  http, https, or ftp.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getScheme" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>196</id>
			<description>                            Returns the host name of the server that received the request.
                              For HTTP servlets, same as the value of the CGI variable   SERVER_NAME.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getServerName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>197</id>
			<description>                            Returns the port number on which this request was received.
                              For HTTP servlets, same as the value of the CGI variable   SERVER_PORT.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getServerPort" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>198</id>
			<description>                            Retrieves the body of the request as character data using  a BufferedReader.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>199</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>200</id>
			<description>if the character set encoding used is not supported and the text cannot be decoded</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader">
				<throw>java.io.UnsupportedEncodingException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>201</id>
			<description>if getInputStream method has been called on this request</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>202</id>
			<description>                            Returns the Internet Protocol (IP) address of the client   that sent the request.
                              For HTTP servlets, same as the value of the   CGI variable REMOTE_ADDR.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getRemoteAddr" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>203</id>
			<description>                            Returns the fully qualified name of the client that sent the  request.
                             If the engine cannot or chooses not to resolve the hostname   (to improve performance), this method returns the dotted-string form of   the IP address. For HTTP servlets, same as the value of the CGI variable   REMOTE_HOST.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getRemoteHost" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>204</id>
			<description>                            Stores an attribute in this request.


                              Attributes are reset between requests.  This method is most  often used in conjunction with .   Attribute names should follow the same conventions as  package names. Names beginning with java.*,  javax.*, and com.sun.*, are  reserved for use by Sun Microsystems.  If the value passed in is null, the effect is the same as  calling .

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>205</id>
			<description>                            Removes an attribute from this request.
                              This method is not  generally needed as attributes only persist as long as the request  is being handled.   Attribute names should follow the same conventions as  package names. Names beginning with java.*,  javax.*, and com.sun.*, are  reserved for use by Sun Microsystems.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>206</id>
			<description>                            Returns the preferred Locale that the client will   accept content in, based on the Accept-Language header.
                              If the client request doesn't provide an Accept-Language header,  this method returns the default locale for the server.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>207</id>
			<description>                              If the client request doesn't provide an Accept-Language header,  this method returns the default locale for the server.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>208</id>
			<description>                            Returns an Enumeration of Locale objects  indicating, in decreasing order starting with the preferred locale, the  locales that are acceptable to the client based on the Accept-Language  header.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getLocales" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>209</id>
			<description>
                              If the client request doesn't provide an Accept-Language header,  this method returns an Enumeration containing one   Locale, the default locale for the server.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getLocales" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>210</id>
			<description>                            Returns a boolean indicating whether this request was made using a  secure channel, such as HTTPS.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="isSecure" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>211</id>
			<description>
                            Returns a  object that acts as a wrapper for  the resource located at the given path.

                                A RequestDispatcher object can be used to forward  a request to the resource or to include the resource in a response.  The resource can be dynamic or static.   The pathname specified may be relative, although it cannot extend  outside the current servlet context.  If the path begins with   a "/" it is interpreted as relative to the current context root.



			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getRequestDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>212</id>
			<description>

                           This method returns null if the servlet container  cannot return a RequestDispatcher.



			</description>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getRequestDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>213</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletRequest</class-interface>
			<method name="getRealPath" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>214</id>
			<description>                            Notification that the web application is ready to process requests.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextListener</class-interface>
			<method name="contextInitialized" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletContextEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>215</id>
			<description>                            Notification that the servlet context is about to be shut down.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextListener</class-interface>
			<method name="contextDestroyed" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletContextEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>216</id>
			<description>                            Notification that a new attribute was added to the servlet context.
                             Called after the attribute is added.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeListener</class-interface>
			<method name="attributeAdded" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletContextAttributeEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>217</id>
			<description>                            Notification that an existing attribute has been remved from the servlet context.
                             Called after the attribute is removed.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeListener</class-interface>
			<method name="attributeRemoved" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletContextAttributeEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>218</id>
			<description>                            Notification that an attribute on the servlet context has been replaced.
                             Called after the attribute is replaced.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContextAttributeListener</class-interface>
			<method name="attributeReplaced" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletContextAttributeEvent</parameter>
				</parameters>
			</method>
		</assertion>
                    <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>219</id>
                        <description>Returns a ServletContext object that corresponds to a specified URL on the server.</description>
                        <package>javax.servlet</package>
                        <class-interface>ServletContext</class-interface>
                        <method name="getContext" return-type="javax.servlet.ServletContext">
                            <parameters>
                                <parameter>java.lang.String</parameter>
                            </parameters>
                        </method>
                    </assertion>
                    <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>219.1</id>
                        <description>This method allows servlets to gain  access to the context for various parts of the server, and as  needed obtain RequestDispatcher objects from the context.  The given path must be begin with "/", is interpreted relative   to the server's document root and is matched against the context roots of  other web applications hosted on this container. </description>
                        <package>javax.servlet</package>
                        <class-interface>ServletContext</class-interface>
                        <method name="getContext" return-type="javax.servlet.ServletContext">
                            <parameters>
                                <parameter>java.lang.String</parameter>
                            </parameters>
                        </method>
                    </assertion>
                    <assertion required="true" impl-spec="false" status="active" testable="true">
                        <id>219.2</id>
                        <description> In a security conscious environment, the servlet container may  return null for a given URL.</description>
                        <package>javax.servlet</package>
                        <class-interface>ServletContext</class-interface>
                        <method name="getContext" return-type="javax.servlet.ServletContext">
                            <parameters>
                                <parameter>java.lang.String</parameter>
                            </parameters>
                        </method>
                    </assertion>
                    <assertion required="true" impl-spec="false" status="active" testable="true">
			<id>220</id>
			<description>Returns the major version of the Java Servlet API that this  servlet container supports.
                             All implementations that comply  with Version 3.0 must have this method  return the integer 3.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getMajorVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>221</id>
			<description>Returns the minor version of the Servlet API that this  servlet container supports.
                             All implementations that comply  with Version 3.0 must have this method  return the integer 0.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getMinorVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>222</id>
			<description>Returns the MIME type of the specified file, or null if   the MIME type is not known.
                             The MIME type is determined  by the configuration of the servlet container, and may be specified  in a web application deployment descriptor. Common MIME  types are "text/html" and "image/gif".
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getMimeType" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>223</id>
			<description>Returns null if   the MIME type is not known.
                             The MIME type is determined  by the configuration of the servlet container, and may be specified  in a web application deployment descriptor. Common MIME  types are "text/html" and "image/gif".
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getMimeType" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>224</id>
			<description>Returns a directory-like listing of all the paths to resources within the web application whose longest sub-path  matches the supplied path argument.
                             Paths indicating subdirectory paths end with a '/'. The returned paths are all   relative to the root of the web application and have a leading '/'. For example, for a web application   containing    /welcome.html  /catalog/index.html  /catalog/products.html  /catalog/offers/books.html  /catalog/offers/music.html  /customer/login.jsp  /WEB-INF/web.xml  /WEB-INF/classes/com.acme.OrderServlet.class,   getResourcePaths("/") returns {"/welcome.html", "/catalog/", "/customer/", "/WEB-INF/"}  getResourcePaths("/catalog/") returns {"/catalog/index.html", "/catalog/products.html", "/catalog/offers/"}.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getResourcePaths" return-type="java.util.Set">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>225</id>
			<description>
                             This method returns null  if no resource is mapped to the pathname.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getResource" return-type="java.net.URL">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>226</id>
			<description>Returns a URL to the resource that is mapped to the given  path.
                             The path must begin with a "/" and is interpreted  as relative to the current context root.   This method allows the servlet container to make a resource   available to servlets from any source. Resources   can be located on a local or remote  file system, in a database, or in a .war file.    The servlet container must implement the URL handlers  and URLConnection objects that are necessary  to access the resource.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getResource" return-type="java.net.URL">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>227</id>
			<description>if the pathname is not given in the correct form</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getResource" return-type="java.net.URL">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.net.MalformedURLException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>228</id>
			<description>Returns the resource located at the named path as  an InputStream object.
                               The data in the InputStream can be   of any type or length. The path must be specified according  to the rules given in getResource.  Meta-information such as content length and content type  that is available via getResource  method is lost when using this method.   The servlet container must implement the URL handlers  and URLConnection objects necessary to access  the resource.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getResourceAsStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>229</id>
			<description>This method returns null if no resource exists at  the specified path.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getResourceAsStream" return-type="java.io.InputStream">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>230</id>
			<description>Returns a RequestDispatcher object that acts as a wrapper for the resource located at the given path.
                        A RequestDispatcher object can be used to forward a request to the resource or to include the resource in a response.
                        The resource can be dynamic or static. The pathname must begin with a / and is interpreted as relative to the current context root.
                        Use getContext to obtain a RequestDispatcher for resources in foreign contexts. </description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getRequestDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>231</id>
			<description>
                              This method returns null if the ServletContext  cannot return a RequestDispatcher.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getRequestDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>232</id>
			<description>Returns a RequestDispatcher object that acts as a wrapper for the named servlet. Servlets (and JSP pages also) may be given names via server administration or via a web application deployment descriptor. A servlet instance can determine its name using ServletConfig#getServletName. </description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getNamedDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>233</id>
			<description>
                               This method returns null if the   ServletContext  cannot return a RequestDispatcher for any reason.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getNamedDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>234</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getServlet" return-type="javax.servlet.Servlet">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>235</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getServlet" return-type="javax.servlet.Servlet">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>236</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getServlets" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>237</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getServletNames" return-type="java.util.Enumeration"/>
		</assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:954</id>
      <description>Returns the configuration name of the logical host on which the ServletContext is deployed. Servlet containers may support multiple logical hosts. This method must return the same name for all the servlet contexts deployed on a logical host, and the name returned by this method must be distinct, stable per logical host, and suitable for use in associating server configuration information with the logical host. The returned value is NOT expected or required to be equivalent to a network address or hostname of the logical host.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getVirtualServerName" return-type="java.lang.String" />
    </assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>238</id>
			<description>Writes the specified message to a servlet log file, usually  an event log.
                             The name and type of the servlet log file is   specific to the servlet container.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="log" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="false">
			<id>239</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="log" return-type="void">
				<parameters>
					<parameter>java.lang.Exception</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>240</id>
			<description>Writes an explanatory message and a stack trace  for a given Throwable exception  to the servlet log file.
                             The name and type of the servlet log   file is specific to the servlet container, usually an event log.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="log" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>241</id>
			<description>Gets the real path corresponding to the given virtual path. For example, if path is equal to /index.html, this method will return the absolute file path on the server's filesystem to which a request of the form http://://index.html would be mapped, where corresponds to the context path of this ServletContext. The real path returned will be in a form appropriate to the computer and operating system on which the servlet container is running, including the proper path separators. Resources inside the /META-INF/resources directories of JAR files bundled in the application's /WEB-INF/lib directory must be considered only if the container has unpacked them from their containing JAR file, in which case the path to the unpacked location must be returned. This method returns null if the servlet container is unable to translate the given virtual path to a real path.</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getRealPath" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>242</id>
			<description>                            Returns the name and version of the servlet container on which  the servlet is running.
                                The form of the returned string is   servername/versionnumber.  For example, the JavaServer Web Development Kit may return the string  JavaServer Web Dev Kit/1.0.   The servlet container may return other optional information   after the primary string in parentheses, for example,  JavaServer Web Dev Kit/1.0 (JDK 1.1.6; Windows NT 4.0 x86).
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getServerInfo" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>243</id>
			<description>                            Returns a String containing the value of the named  context-wide initialization parameter.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>244</id>
			<description>                          Returns null if the   parameter does not exist.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>245</id>
			<description>                            Returns the names of the context's initialization parameters as an  Enumeration of String objects.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>246</id>
			<description>                            Returns an  empty Enumeration if the context has no initialization  parameters.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>247</id>
			<description>                            Returns the servlet container attribute with the given name.</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>248</id>
			<description>                            Returns null if there is no attribute by that name.</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>249</id>
			<description>Returns an Enumeration containing the attribute names available within this ServletContext. Use the #getAttribute method with an attribute name to get the value of an attribute.</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getAttributeNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>250</id>
			<description>                            Binds an object to a given attribute name in this servlet context.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>251</id>
			<description>
                             If  the name specified is already used for an attribute, this  method will replace the attribute with the new to the new attribute.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>252</id>
			<description>
                            If listeners are configured on the ServletContext the    container notifies them accordingly.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>253</id>
			<description>
                             If a null value is passed, the effect is the same as calling   removeAttribute().

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>254</id>
			<description>                            Removes the attribute with the given name from   the servlet context.

                             After removal, subsequent calls to   to retrieve the attribute's value  will return null.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>255</id>
			<description>

                          If listeners are configured on the ServletContext the   container notifies them accordingly.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>256</id>
			<description>                            Returns the name of this web application correponding to this ServletContext as specified in the deployment  descriptor for this web application by the display-name element.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletContext</class-interface>
			<method name="getServletContextName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>257</id>
			<description>                            Returns the name of this servlet instance.
                              The name may be provided via server administration, assigned in the   web application deployment descriptor, or for an unregistered (and thus  unnamed) servlet instance it will be the servlet's class name.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletConfig</class-interface>
			<method name="getServletName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>258</id>
			<description>
                            Returns a reference to the ServletContext in which the caller  is executing.


			</description>
			<package>javax.servlet</package>
			<class-interface>ServletConfig</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>259</id>
			<description>                            Returns a String containing the value of the   named initialization parameter.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletConfig</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>260</id>
			<description>                            Returns null if   the parameter does not exist.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletConfig</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>261</id>
			<description>                            Returns the names of the servlet's initialization parameters  as an Enumeration of String objects.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletConfig</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>262</id>
			<description>                            Returns an empty Enumeration if the servlet has  no initialization parameters.

			</description>
			<package>javax.servlet</package>
			<class-interface>ServletConfig</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>263</id>
			<description>                            Called by the servlet container to indicate to a servlet that the   servlet is being placed into service.
                               The servlet container calls the init  method exactly once after instantiating the servlet.  The init method must complete successfully  before the servlet can receive any requests.
                           </description>
			<package>javax.servlet</package>
			<class-interface>Servlet</class-interface>
			<method name="init" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletConfig</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>265</id>
			<description>Called by the servlet container to indicate to a servlet that the   servlet is being placed into service.
The servlet container cannot place the servlet into service  if the init method    Throws a ServletException  or does not return within a time period defined by the Web server.
if an exception has occurred that      interferes with the servlet's normal      operation</description>
			<package>javax.servlet</package>
			<class-interface>Servlet</class-interface>
			<method name="init" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletConfig</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>266</id>
			<description>
                            Returns a  ServletConfig object, which contains  initialization and startup parameters for this servlet.
                            The ServletConfig object returned is the one passed to the init method. Implementations of this interface are responsible for storing the ServletConfig object so that this method can return it. The GenericServlet class, which implements this interface, already does this.
			</description>
			<package>javax.servlet</package>
			<class-interface>Servlet</class-interface>
			<method name="getServletConfig" return-type="javax.servlet.ServletConfig"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>267</id>
			<description>                            Called by the servlet container to allow the servlet to respond to   a request.

			</description>
			<package>javax.servlet</package>
			<class-interface>Servlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>268</id>
			<description>if an exception occurs that interferes      with the servlet's normal operation</description>
			<package>javax.servlet</package>
			<class-interface>Servlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>269</id>
			<description>if an input or output exception occurs</description>
			<package>javax.servlet</package>
			<class-interface>Servlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>270</id>
			<description>                            Returns information about the servlet, such  as author, version, and copyright.
                                The string that this method returns should  be plain text and not markup of any kind (such as HTML, XML,  etc.).

			</description>
			<package>javax.servlet</package>
			<class-interface>Servlet</class-interface>
			<method name="getServletInfo" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>271</id>
			<description>                            Called by the servlet container to indicate to a servlet that the  servlet is being taken out of service. This method is only called once all threads within the servlet's service method have exited or after a timeout period has passed. After the servlet container calls this method, it will not call the service method again on this servlet. This method gives the servlet an opportunity to clean up any resources that are being held (for example, memory, file handles, threads) and make sure that any persistent state is synchronized with the servlet's current state in memory.</description>
			<package>javax.servlet</package>
			<class-interface>Servlet</class-interface>
			<method name="destroy" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>272</id>
			<description>                            Forwards a request from  a servlet to another resource (servlet, JSP file, or  HTML file) on the server.


        For a RequestDispatcher obtained via   getRequestDispatcher(), the ServletRequest   object has its path elements and parameters adjusted to match  the path of the target resource.

			</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="forward" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>273</id>
			<description>                            Forwards a request from  a servlet to another resource (servlet, JSP file, or  HTML file) on the server.


                             Uncommitted output in the response buffer is automatically cleared   before the forward.

			</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="forward" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>274</id>
			<description>                            Forwards a request from  a servlet to another resource (servlet, JSP file, or  HTML file) on the server.


        The request and response parameters must be either the same objects as were passed to the calling servlet's service method or be subclasses of the ServletRequestWrapper or ServletResponseWrapper classes that wrap them.

			</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="forward" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>275</id>
			<description>if the target resource throws this exception</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="forward" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>276</id>
			<description>if the target resource throws this exception</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="forward" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>277</id>
			<description>if the response was already committed</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="forward" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>278</id>
			<description>                            Includes the content of a resource (servlet, JSP page,  HTML file) in the response.



                             In essence, this method enables   programmatic server-side includes.   The  ServletResponse object has its path elements  and parameters remain unchanged from the caller's.
                             The included  servlet cannot change the response status code or set headers;  any attempt to make a change is ignored.
                             The request and response parameters must be either the same  objects as were passed to the calling servlet's service method or be  subclasses of the ServletRequestWrapper or ServletResponseWrapper classes that wrap them.
                             This method sets the dispatcher type of the given request to DispatcherType.INCLUDE.
			</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="include" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>279</id>
			<description>if the included resource throws this exception</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="include" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>280</id>
			<description>if the included resource throws this exception</description>
			<package>javax.servlet</package>
			<class-interface>RequestDispatcher</class-interface>
			<method name="include" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>281</id>
			<description>                            Returns the filter-name of this filter as defined in the deployment descriptor.

			</description>
			<package>javax.servlet</package>
			<class-interface>FilterConfig</class-interface>
			<method name="getFilterName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>282</id>
			<description>
                            Returns a reference to the ServletContext in which the caller  is executing.


			</description>
			<package>javax.servlet</package>
			<class-interface>FilterConfig</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>283</id>
			<description>                            Returns a String containing the value of the   named initialization parameter.

			</description>
			<package>javax.servlet</package>
			<class-interface>FilterConfig</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>284</id>
			<description>                            Returns null if   the parameter does not exist.

			</description>
			<package>javax.servlet</package>
			<class-interface>FilterConfig</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>285</id>
			<description>                            Returns the names of the servlet's initialization parameters  as an Enumeration of String objects.

			</description>
			<package>javax.servlet</package>
			<class-interface>FilterConfig</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>286</id>
			<description>                            Returns an empty Enumeration if the servlet has  no initialization parameters.

			</description>
			<package>javax.servlet</package>
			<class-interface>FilterConfig</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>287</id>
			<description>                            Causes the next filter in the chain to be invoked, or if the calling filter is the last filter  in the chain, causes the resource at the end of the chain to be invoked.

			</description>
			<package>javax.servlet</package>
			<class-interface>FilterChain</class-interface>
			<method name="doFilter" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>288</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>FilterChain</class-interface>
			<method name="doFilter" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>289</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>FilterChain</class-interface>
			<method name="doFilter" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>290</id>
			<description>Called by the web container to indicate to a filter that it is being placed into  service.
                             The servlet container calls the init method exactly once after instantiating the  filter.
                             The init method must complete successfully before the filter is asked to do any  filtering work.
                             The web container cannot place the filter into service if the init method either
                             1.Throws a ServletException
                             2.Does not return within a time period defined by the web container

			</description>
			<package>javax.servlet</package>
			<class-interface>Filter</class-interface>
			<method name="init" return-type="void">
				<parameters>
					<parameter>javax.servlet.FilterConfig</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>292</id>
			<description>
Called by the web container to indicate to a filter that it is being placed into  service.1
The web container cannot place the filter into service if the init method throws a ServletException.
			</description>
			<package>javax.servlet</package>
			<class-interface>Filter</class-interface>
			<method name="init" return-type="void">
				<parameters>
					<parameter>javax.servlet.FilterConfig</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>293</id>
			<description> The doFilter method of the Filter is called by the container  each time a request/response pair is passed through the chain due  to a client request for a resource at the end of the chain.
                        The FilterChain passed in to this method allows the Filter to pass on the request and response to the next entity in the chain. A typical implementation of this method would follow the following pattern: Examine the request Optionally wrap the request object with a custom implementation to filter content or headers for input filtering Optionally wrap the response object with a custom implementation to filter content or headers for output filtering Either invoke the next entity in the chain using the FilterChain object (chain.doFilter()), or not pass on the request/response pair to the next entity in the filter chain to block the request processing Directly set headers on the response after invocation of the next entity in the filter chain.
			</description>
			<package>javax.servlet</package>
			<class-interface>Filter</class-interface>
			<method name="doFilter" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
					<parameter>javax.servlet.FilterChain</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>294</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>Filter</class-interface>
			<method name="doFilter" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
					<parameter>javax.servlet.FilterChain</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>295</id>
			<description/>
			<package>javax.servlet</package>
			<class-interface>Filter</class-interface>
			<method name="doFilter" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
					<parameter>javax.servlet.FilterChain</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>296</id>
			<description>                            Called by the web container to indicate to a filter that it is being taken out of service.
                             This   method is only called once all threads within the filter's doFilter method have exited or after  a timeout period has passed. After the web container calls this method, it will not call the  doFilter method again on this instance of the filter.     This method gives the filter an opportunity to clean up any resources that are being held (for  example, memory, file handles, threads) and make sure that any persistent state is synchronized  with the filter's current state in memory.

			</description>
			<package>javax.servlet</package>
			<class-interface>Filter</class-interface>
			<method name="destroy" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>297</id>
			<description>                            Constructs an empty HttpUtils object.
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpUtils</class-interface>
			<method name="HttpUtils" return-type="HttpUtils"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>298</id>
			<description>                            Parses a query string passed from the client to the  server and builds a HashTable object  with key-value pairs.
                               The query string should be in the form of a string  packaged by the GET or POST method, that is, it  should have key-value pairs in the form key=value,  with each pair separated from the next by a &amp; character.   A key can appear more than once in the query string  with different values. However, the key appears only once in   the hashtable, with its value being  an array of strings containing the multiple values sent  by the query string.    The keys and values in the hashtable are stored in their  decoded form, so  any + characters are converted to spaces, and characters  sent in hexadecimal notation (like %xx) are  converted to ASCII characters.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpUtils</class-interface>
			<method name="parseQueryString" return-type="java.util.Hashtable">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>299</id>
			<description>if the query string is invalid</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpUtils</class-interface>
			<method name="parseQueryString" return-type="java.util.Hashtable">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>300</id>
			<description>                            Parses data from an HTML form that the client sends to   the server using the HTTP POST method and the   application/x-www-form-urlencoded MIME type.
                               The data sent by the POST method contains key-value  pairs. A key can appear more than once in the POST data  with different values. However, the key appears only once in   the hashtable, with its value being  an array of strings containing the multiple values sent  by the POST method.   The keys and values in the hashtable are stored in their  decoded form, so  any + characters are converted to spaces, and characters  sent in hexadecimal notation (like %xx) are  converted to ASCII characters.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpUtils</class-interface>
			<method name="parsePostData" return-type="java.util.Hashtable">
				<parameters>
					<parameter>int</parameter>
					<parameter>javax.servlet.ServletInputStream</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>301</id>
			<description>if the data sent by the POST method is invalid</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpUtils</class-interface>
			<method name="parsePostData" return-type="java.util.Hashtable">
				<parameters>
					<parameter>int</parameter>
					<parameter>javax.servlet.ServletInputStream</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>302</id>
			<description>                            Reconstructs the URL the client used to make the request,  using information in the HttpServletRequest object.
                              The returned URL contains a protocol, server name, port  number, and server path, but it does not include query  string parameters.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpUtils</class-interface>
			<method name="getRequestURL" return-type="java.lang.StringBuffer">
				<parameters>
					<parameter>javax.servlet.http.HttpServletRequest</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>303</id>
			<description>                            Construct a session event from the given source.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionEvent</class-interface>
			<method name="HttpSessionEvent" return-type="HttpSessionEvent">
				<parameters>
					<parameter>javax.servlet.http.HttpSession</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>304</id>
			<description>Return the session that changed.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionEvent</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>305</id>
			<description>                            Constructs an event that notifies an object that it  has been bound to or unbound from a session.

                               To receive the event, the object must implement HttpSessionBindingListener .



			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingEvent</class-interface>
			<method name="HttpSessionBindingEvent" return-type="HttpSessionBindingEvent">
				<parameters>
					<parameter>javax.servlet.http.HttpSession</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>306</id>
			<description>                            Constructs an event that notifies an object that it  has been bound to or unbound from a session.

                               To receive the event, the object must implement HttpSessionBindingListener.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingEvent</class-interface>
			<method name="HttpSessionBindingEvent" return-type="HttpSessionBindingEvent">
				<parameters>
					<parameter>javax.servlet.http.HttpSession</parameter>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>307</id>
			<description>Return the session that changed.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingEvent</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>308</id>
			<description>                            Returns the name with which the attribute is bound to or  unbound from the session.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingEvent</class-interface>
			<method name="getName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>309</id>
			<description>                            Returns the value of the attribute that has been added, removed or replaced.
                              If the attribute was added (or bound), this is the value of the attribute.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>310</id>
			<description>                            Returns the value of the attribute that has been added, removed or replaced.
                              If the attrubute was  removed (or unbound), this is the value of the removed attribute.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>311</id>
			<description>                            Returns the value of the attribute that has been added, removed or replaced.
                             If the attribute was replaced, this  is the old value of the attribute.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingEvent</class-interface>
			<method name="getValue" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="removed" testable="false">
			<id>312</id>
			<description>Return the session that changed.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingEvent.{javax.servlet.http.HttpSessionEvent}</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>313</id>
			<description>                            Constructs a response adaptor wrapping the given response.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="HttpServletResponseWrapper" return-type="HttpServletResponseWrapper">
				<parameters>
					<parameter>javax.servlet.http.HttpServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>314</id>
			<description>                            The default behavior of this method is to call addCookie(Cookie cookie)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="addCookie" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.Cookie</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>315</id>
			<description>                            The default behavior of this method is to call containsHeader(String name)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="containsHeader" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>316</id>
			<description>                            The default behavior of this method is to call encodeURL(String url)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="encodeURL" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>317</id>
			<description>                            The default behavior of this method is to return encodeRedirectURL(String url)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="encodeRedirectURL" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>318</id>
			<description>                            The default behavior of this method is to call encodeUrl(String url)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="encodeUrl" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>319</id>
			<description>                            The default behavior of this method is to return encodeRedirectUrl(String url)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="encodeRedirectUrl" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>320</id>
			<description>                            The default behavior of this method is to call sendError(int sc, String msg)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>321</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>322</id>
			<description>                            The default behavior of this method is to call sendError(int sc)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>323</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>324</id>
			<description>                            The default behavior of this method is to return sendRedirect(String location)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="sendRedirect" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>325</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="sendRedirect" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>326</id>
			<description>                            The default behavior of this method is to call setDateHeader(String name, long date)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="setDateHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>327</id>
			<description>                            The default behavior of this method is to call addDateHeader(String name, long date)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="addDateHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>328</id>
			<description>                            The default behavior of this method is to return setHeader(String name, String value)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="setHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>329</id>
			<description>                            The default behavior of this method is to return addHeader(String name, String value)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="addHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>330</id>
			<description>                            The default behavior of this method is to call setIntHeader(String name, int value)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="setIntHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>331</id>
			<description>                            The default behavior of this method is to call addIntHeader(String name, int value)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="addIntHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>332</id>
			<description>                            The default behavior of this method is to call setStatus(int sc)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="setStatus" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>333</id>
			<description>                            The default behavior of this method is to call setStatus(int sc, String sm)  on the wrapped response object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="setStatus" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>334</id>
			<description>Return the wrapped ServletResponse object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="getResponse" return-type="javax.servlet.ServletResponse"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>335</id>
			<description>Sets the response being wrapped.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="setResponse" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>336</id>
			<description>if the response is null.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="setResponse" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>337</id>
			<description>The default behavior of this method is to call setCharacterEncoding(String charset)  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>338</id>
			<description>The default behavior of this method is to return getCharacterEncoding()  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>339</id>
			<description>The default behavior of this method is to return getOutputStream()  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>340</id>
			<description>if an input or output exception occurred.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>341</id>
			<description>The default behavior of this method is to return getWriter() on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>342</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>343</id>
			<description>The default behavior of this method is to call setContentLength(int len) on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="setContentLength" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>344</id>
			<description>The default behavior of this method is to call setContentType(String type) on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="setContentType" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>345</id>
			<description>The default behavior of this method is to return getContentType()  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>346</id>
			<description>The default behavior of this method is to call setBufferSize(int size)  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="setBufferSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>347</id>
			<description>The default behavior of this method is to return getBufferSize() on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="getBufferSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>348</id>
			<description>The default behavior of this method is to call flushBuffer()  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="flushBuffer" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>349</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper</class-interface>
			<method name="flushBuffer" return-type="void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>350</id>
			<description>The default behavior of this method is to return isCommitted()  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="isCommitted" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>351</id>
			<description>The default behavior of this method is to call reset() on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="reset" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>352</id>
			<description>The default behavior of this method is to call resetBuffer() on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="resetBuffer" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>353</id>
			<description>The default behavior of this method is to call setLocale(Locale loc)  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="setLocale" return-type="void">
				<parameters>
					<parameter>java.util.Locale</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>354</id>
			<description>The default behavior of this method is to return getLocale()  on the wrapped response object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponseWrapper.{javax.servlet.ServletResponseWrapper}</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>355</id>
			<description>                            Constructs a request object wrapping the given request.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="HttpServletRequestWrapper" return-type="HttpServletRequestWrapper">
				<parameters>
					<parameter>javax.servlet.http.HttpServletRequest</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>356</id>
			<description>                            The default behavior of this method is to return getAuthType()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getAuthType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>357</id>
			<description>                            The default behavior of this method is to return getCookies()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getCookies" return-type="javax.servlet.http.Cookie[]"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>358</id>
			<description>                            The default behavior of this method is to return getDateHeader(String name)  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getDateHeader" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>359</id>
			<description>                            The default behavior of this method is to return getHeader(String name)  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getHeader" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>360</id>
			<description>                            The default behavior of this method is to return getHeaders(String name)  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getHeaders" return-type="java.util.Enumeration">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>361</id>
			<description>                            The default behavior of this method is to return getHeaderNames()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getHeaderNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>362</id>
			<description>                            The default behavior of this method is to return getIntHeader(String name)  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getIntHeader" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>363</id>
			<description>                            The default behavior of this method is to return getMethod()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getMethod" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>364</id>
			<description>                            The default behavior of this method is to return getPathInfo()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getPathInfo" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>365</id>
			<description>                            The default behavior of this method is to return getPathTranslated()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getPathTranslated" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>366</id>
			<description>                            The default behavior of this method is to return getContextPath()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getContextPath" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>367</id>
			<description>                            The default behavior of this method is to return getQueryString()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getQueryString" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>368</id>
			<description>                            The default behavior of this method is to return getRemoteUser()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getRemoteUser" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>369</id>
			<description>                            The default behavior of this method is to return isUserInRole(String role)  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="isUserInRole" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>370</id>
			<description>                            The default behavior of this method is to return getUserPrincipal()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getUserPrincipal" return-type="java.security.Principal"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>371</id>
			<description>                            The default behavior of this method is to return getRequestedSessionId()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getRequestedSessionId" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>372</id>
			<description>                            The default behavior of this method is to return getRequestURI()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getRequestURI" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>373</id>
			<description>                            The default behavior of this method is to return getRequestURL()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getRequestURL" return-type="java.lang.StringBuffer"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>374</id>
			<description>                            The default behavior of this method is to return getServletPath()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getServletPath" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>375</id>
			<description>The default behavior of this method is to return getSession(boolean create)  on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>376</id>
			<description>The default behavior of this method is to return getSession()  on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>377</id>
			<description>The default behavior of this method is to return isRequestedSessionIdValid()  on the wrapped request object.
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="isRequestedSessionIdValid" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>378</id>
			<description>                            The default behavior of this method is to return isRequestedSessionIdFromCookie()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="isRequestedSessionIdFromCookie" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>379</id>
			<description>                            The default behavior of this method is to return isRequestedSessionIdFromURL()  on the wrapped request object.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="isRequestedSessionIdFromURL" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>380</id>
			<description>The default behavior of this method is to return isRequestedSessionIdFromUrl()  on the wrapped request object.
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="isRequestedSessionIdFromUrl" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>381</id>
			<description>Return the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getRequest" return-type="javax.servlet.ServletRequest"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>382</id>
			<description>Sets the request object being wrapped.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="setRequest" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>383</id>
			<description>if the request is null.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="setRequest" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>384</id>
			<description>The default behavior of this method is to call getAttribute(String name) on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>385</id>
			<description>The default behavior of this method is to return getAttributeNames() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getAttributeNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>386</id>
			<description>The default behavior of this method is to return getCharacterEncoding() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>387</id>
            <description>Overrides the name of the character encoding used in the body of the wrapped
                request. This method must be called prior to reading request parameters or
                reading input using getReader(). Otherwise, it has no effect.
            </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>388</id>
			<description>if this ServletRequest is still in a state where a character encoding may be set, but the specified encoding is invalid</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.UnsupportedEncodingException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>389</id>
			<description>The default behavior of this method is to return getContentLength() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getContentLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>390</id>
			<description>The default behavior of this method is to return getContentType() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>391</id>
			<description>The default behavior of this method is to return getInputStream() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>392</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>393</id>
			<description>The default behavior of this method is to return getParameter(String name) on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>394</id>
			<description>The default behavior of this method is to return getParameterMap() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getParameterMap" return-type="java.util.Map"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>395</id>
			<description>The default behavior of this method is to return getParameterNames() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>396</id>
			<description>The default behavior of this method is to return getParameterValues(String name) on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getParameterValues" return-type="java.lang.String[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>397</id>
			<description>The default behavior of this method is to return getProtocol() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getProtocol" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>398</id>
			<description>The default behavior of this method is to return getScheme() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getScheme" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>399</id>
			<description>The default behavior of this method is to return getServerName() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getServerName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>400</id>
			<description>The default behavior of this method is to return getServerPort() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getServerPort" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>401</id>
			<description>The default behavior of this method is to return getReader() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>402</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>403</id>
			<description>The default behavior of this method is to return getRemoteAddr() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getRemoteAddr" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>404</id>
			<description>The default behavior of this method is to return getRemoteHost() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getRemoteHost" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>405</id>
			<description>The default behavior of this method is to return setAttribute(String name, Object o) on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>406</id>
			<description>The default behavior of this method is to call removeAttribute(String name) on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>407</id>
			<description>The default behavior of this method is to return getLocale() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>408</id>
			<description>The default behavior of this method is to return getLocales() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getLocales" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>409</id>
			<description>The default behavior of this method is to return isSecure() on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="isSecure" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>410</id>
			<description>The default behavior of this method is to return getRequestDispatcher(String path) on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getRequestDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>411</id>
			<description>The default behavior of this method is to return getRealPath(String path) on the wrapped request object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper.{javax.servlet.ServletRequestWrapper}</class-interface>
			<method name="getRealPath" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>412</id>
			<description>Does nothing, because this is an abstract class.
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet</class-interface>
			<method name="HttpServlet" return-type="HttpServlet"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>413</id>
			<description>Dispatches client requests to the protected  service method.
                             There's no need to  override this method.
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>414</id>
			<description>if the request for the TRACE cannot be handled</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>415</id>
			<description>if an input or output error occurs while the servlet is handling the TRACE request</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>416</id>
			<description>Called by the servlet container to indicate to a servlet that the  servlet is being taken out of service.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="destroy" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>417</id>
			<description>Returns a String containing the value of the named  initialization parameter.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>418</id>
			<description>Returns null if the parameter does  not exist.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="getInitParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>419</id>
			<description>Returns the names of the servlet's initialization parameters as an Enumeration of String objects.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>420</id>
			<description>Returns an empty Enumeration if the servlet has no initialization parameters.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="getInitParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>421</id>
			<description>Returns this servlet's ServletConfig object.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="getServletConfig" return-type="javax.servlet.ServletConfig"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>422</id>
			<description>Returns a reference to the ServletContext in which this servlet is running.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>423</id>
			<description>Returns information about the servlet, such as author, version, and copyright. By default, this method returns an empty string.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="getServletInfo" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>424</id>
			<description>Called by the servlet container to indicate to a servlet that the  servlet is being placed into service.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="init" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletConfig</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>425</id>
			<description>if an exception occurs that interrupts the servlet's normal operation</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet</class-interface>
			<method name="init" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletConfig</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>426</id>
			<description>A convenience method which can be overridden so that there's no need  to call super.init(config). Instead of overriding init(ServletConfig(, simply override  this method and it will be called by  GenericServlet.init(ServletConfig config).  The ServletConfig object can still be retrieved via getServletConfig.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="init" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>427</id>
			<description>if an exception occurs that interrupts the servlet's normal operation</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet</class-interface>
			<method name="init" return-type="void">
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>428</id>
			<description>Writes the specified message to a servlet log file, prepended by the servlet's name. See ServletContext.log(String).</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="log" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>429</id>
            <description>Writes an explanatory message and a stack trace for a given Throwable exception to the servlet log file, prepended by the servlet's name.
                See ServletContext.log(String, Throwable).
            </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="log" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Throwable</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>430</id>
			<description>Called by the servlet container to allow the servlet to respond to a request.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>431</id>
			<description>if an exception occurs that      interferes with the servlet's      normal operation occurred</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>javax.servlet.ServletException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>432</id>
			<description>if an input or output      exception occurs</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet</class-interface>
			<method name="service" return-type="void">
				<parameters>
					<parameter>javax.servlet.ServletRequest</parameter>
					<parameter>javax.servlet.ServletResponse</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>433</id>
			<description>Returns the name of this servlet instance.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServlet.{javax.servlet.GenericServlet}</class-interface>
			<method name="getServletName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>434</id>
			<description>                            Constructs a cookie with a specified name and value.
                               The name must conform to RFC 2109. That means it can contain   only ASCII alphanumeric characters and cannot contain commas,   semicolons, or white space or begin with a $ character. The cookie's  name cannot be changed after creation.   The value can be anything the server chooses to send. Its  value is probably of interest only to the server. The cookie's  value can be changed after creation with the  setValue method.   By default, cookies are created according to the Netscape  cookie specification. The version can be changed with the   setVersion method.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="Cookie" return-type="Cookie">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>435</id>
			<description>                            Specifies a comment that describes a cookie's purpose.
                              The comment is useful if the browser presents the cookie   to the user. Comments  are not supported by Netscape Version 0 cookies.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setComment" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>436</id>
			<description>                            Returns the comment describing the purpose of this cookie.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getComment" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>437</id>
			<description>                            Returns null if the cookie has no comment.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getComment" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>438</id>
			<description>                            Specifies the domain within which this cookie should be presented.
                               The form of the domain name is specified by RFC 2109. A domain  name begins with a dot (.foo.com) and means that  the cookie is visible to servers in a specified Domain Name System  (DNS) zone (for example, www.foo.com, but not   a.b.foo.com). By default, cookies are only returned  to the server that sent them.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setDomain" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>439</id>
			<description>                            Returns the domain name set for this cookie.
                             The form of   the domain name is set by RFC 2109.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getDomain" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>440</id>
			<description>                            Sets the maximum age of the cookie in seconds.
                               A positive value indicates that the cookie will expire  after that many seconds have passed. Note that the value is  the maximum age when the cookie will expire, not the cookie's  current age.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setMaxAge" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>441</id>
			<description>                            Sets the maximum age of the cookie in seconds.
                               A negative value means  that the cookie is not stored persistently and will be deleted  when the Web browser exits.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setMaxAge" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>442</id>
			<description>                            Sets the maximum age of the cookie in seconds.
                               A zero value causes the cookie  to be deleted.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setMaxAge" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>443</id>
			<description>                            Returns the maximum age of the cookie, specified in seconds,  By default, -1 indicating the cookie will persist  until browser shutdown.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getMaxAge" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>444</id>
			<description>                            Specifies a path for the cookie  to which the client should return the cookie.
                               The cookie is visible to all the pages in the directory  you specify, and all the pages in that directory's subdirectories.   A cookie's path must include the servlet that set the cookie,  for example, /catalog, which makes the cookie  visible to all directories on the server under /catalog.   Consult RFC 2109 (available on the Internet) for more  information on setting path names for cookies.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setPath" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>445</id>
			<description>                            Returns the path on the server   to which the browser returns this cookie.
                             The  cookie is visible to all subpaths on the server.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getPath" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>446</id>
			<description>                            Indicates to the browser whether the cookie should only be sent  using a secure protocol, such as HTTPS or SSL.
                               The default value is false.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setSecure" return-type="void">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>447</id>
			<description>                            Returns true if the browser is sending cookies  only over a secure protocol, or false if the  browser can send cookies using any protocol.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getSecure" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>448</id>
			<description>                            Returns the name of the cookie.
                             The name cannot be changed after  creation.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>449</id>
			<description>                            Assigns a new value to a cookie after the cookie is created.
                              If you use a binary value, you may want to use BASE64 encoding.   With Version 0 cookies, values should not contain white   space, brackets, parentheses, equals signs, commas,  double quotes, slashes, question marks, at signs, colons,  and semicolons. Empty values may not behave the same way  on all browsers.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setValue" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>450</id>
			<description>                            Returns the value of the cookie.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getValue" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>451</id>
			<description>                            Returns the version of the protocol this cookie complies   with.
                             Version 1 complies with RFC 2109,   and version 0 complies with the original  cookie specification drafted by Netscape. Cookies provided  by a browser use and identify the browser's cookie version.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="getVersion" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>452</id>
			<description>                            Sets the version of the cookie protocol this cookie complies  with.
                             Version 0 complies with the original Netscape cookie  specification. Version 1 complies with RFC 2109.   Since RFC 2109 is still somewhat new, consider  version 1 as experimental; do not use it yet on production sites.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="setVersion" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>453</id>
			<description>                            Overrides the standard java.lang.Object.clone   method to return a copy of this cookie.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="clone" return-type="java.lang.Object"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>454</id>
			<description>                            Notification that a session was created.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionListener</class-interface>
			<method name="sessionCreated" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>455</id>
			<description>                            Notification that a session was invalidated.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionListener</class-interface>
			<method name="sessionDestroyed" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>456</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionContext</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>457</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionContext</class-interface>
			<method name="getIds" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>458</id>
			<description>                            Notifies the object that it is being bound to  a session and identifies the session.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingListener</class-interface>
			<method name="valueBound" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionBindingEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>459</id>
			<description>                            Notifies the object that it is being unbound  from a session and identifies the session.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionBindingListener</class-interface>
			<method name="valueUnbound" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionBindingEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>460</id>
			<description>                            Notification that an attribute has been added to a session.
                             Called after the attribute is added.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionAttributeListener</class-interface>
			<method name="attributeAdded" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionBindingEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>461</id>
			<description>                            Notification that an attribute has been removed from a session.
                             Called after the attribute is removed.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionAttributeListener</class-interface>
			<method name="attributeRemoved" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionBindingEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>462</id>
			<description>                            Notification that an attribute has been replaced in a session.
                             Called after the attribute is replaced.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionAttributeListener</class-interface>
			<method name="attributeReplaced" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionBindingEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>463</id>
			<description>                            Notification that the session is about to be passivated.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionActivationListener</class-interface>
			<method name="sessionWillPassivate" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>464</id>
			<description>                            Notification that the session has just been activated.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSessionActivationListener</class-interface>
			<method name="sessionDidActivate" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.HttpSessionEvent</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>465</id>
			<description>                            Returns the time when this session was created, measured  in milliseconds since midnight January 1, 1970 GMT.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getCreationTime" return-type="long"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>466</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getCreationTime" return-type="long">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>467</id>
			<description>Returns a string containing the unique identifier assigned   to this session.
                             The identifier is assigned   by the servlet container and is implementation dependent.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getId" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="removed" testable="true">
			<id>468</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getId" return-type="java.lang.String">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>469</id>
			<description>                            Returns the last time the client sent a request associated with  this session, as the number of milliseconds since midnight  January 1, 1970 GMT, and marked by the time the container recieved the request.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getLastAccessedTime" return-type="long"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>470</id>
			<description>
                                Actions such as getting or setting  a value associated with the session, do not affect the access  time.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getLastAccessedTime" return-type="long"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>471</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getLastAccessedTime" return-type="long">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>472</id>
			<description>                            Returns the ServletContext to which this session belongs.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getServletContext" return-type="javax.servlet.ServletContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>473</id>
			<description>                            Specifies the time, in seconds, between client requests before the   servlet container will invalidate this session.
                              A negative time  indicates the session should never timeout.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="setMaxInactiveInterval" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>474</id>
			<description>                            Returns the maximum time interval, in seconds, that   the servlet container will keep this session open between   client accesses.
                             After this interval, the servlet container  will invalidate the session.  The maximum time interval can be set  with the setMaxInactiveInterval method.  A negative time indicates the session should never timeout.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getMaxInactiveInterval" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>475</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getSessionContext" return-type="javax.servlet.http.HttpSessionContext"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>476</id>
			<description>                            Returns the object bound with the specified name in this session, or  null if no object is bound under the name.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>477</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>478</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getValue" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>479</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getValue" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>480</id>
			<description>                            Returns an Enumeration of String objects  containing the names of all the objects bound to this session.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getAttributeNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>481</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getAttributeNames" return-type="java.util.Enumeration">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>482</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getValueNames" return-type="java.lang.String[]"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>483</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="getValueNames" return-type="java.lang.String[]">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>484</id>
			<description>                            Binds an object to this session, using the name specified.
                              If an object of the same name is already bound to the session,  the object is replaced.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>485</id>
			<description>                            Binds an object to this session, using the name specified.
                              After this method executes, and if the new object  implements HttpSessionBindingListener,  the container calls   HttpSessionBindingListener.valueBound. The container then     notifies any HttpSessionAttributeListeners in the web   application.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>486</id>
			<description>                            Binds an object to this session, using the name specified.
                              If an object was already bound to this session of this name  that implements HttpSessionBindingListener, its   HttpSessionBindingListener.valueUnbound method is called.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>487</id>
			<description>                            Binds an object to this session, using the name specified.
                              If the value passed in is null, this has the same effect as calling   removeAttribute().

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>488</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>489</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="putValue" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>490</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="putValue" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>491</id>
			<description>                            Removes the object bound with the specified name from  this session.
                             After this method executes, and if the object  implements HttpSessionBindingListener,  the container calls   HttpSessionBindingListener.valueUnbound. The container  then notifies any HttpSessionAttributeListeners in the web   application.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>492</id>
			<description>
                             If the session does not have an object  bound with the specified name, this method does nothing.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>493</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>494</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="removeValue" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>495</id>
			<description>if this method is called on an invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="removeValue" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>496</id>
			<description>                            Invalidates this session then unbinds any objects bound  to it.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="invalidate" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>497</id>
			<description>if this method is called on an already invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="invalidate" return-type="void">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>498</id>
			<description>                            Returns true if the client does not yet know about the  session or if the client chooses not to join the session.
                              For   example, if the server used only cookie-based sessions, and  the client had disabled the use of cookies, then a session would  be new on each request.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="isNew" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>499</id>
			<description>if this method is called on an already invalidated session</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpSession</class-interface>
			<method name="isNew" return-type="boolean">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>502</id>
			<description>                            Adds the specified cookie to the response.
                              This method can be called  multiple times to set more than one cookie.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="addCookie" return-type="void">
				<parameters>
					<parameter>javax.servlet.http.Cookie</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>503</id>
			<description>                            Returns a boolean indicating whether the named response header   has already been set.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="containsHeader" return-type="boolean">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>504</id>
			<description>                            Encodes the specified URL by including the session ID in it,  or, if encoding is not needed, returns the URL unchanged.
                              The implementation of this method includes the logic to  determine whether the session ID needs to be encoded in the URL.  For example, if the browser supports cookies, or session  tracking is turned off, URL encoding is unnecessary.    For robust session tracking, all URLs emitted by a servlet   should be run through this  method.  Otherwise, URL rewriting cannot be used with browsers  which do not support cookies.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="encodeURL" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>505</id>
			<description>                            Encodes the specified URL for use in the  sendRedirect method or, if encoding is not needed,  returns the URL unchanged.
                              The implementation of this method  includes the logic to determine whether the session ID  needs to be encoded in the URL.  Because the rules for making  this determination can differ from those used to decide whether to  encode a normal link, this method is seperate from the  encodeURL method.    All URLs sent to the HttpServletResponse.sendRedirect  method should be run through this method.  Otherwise, URL  rewriting cannot be used with browsers which do not support  cookies.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="encodeRedirectURL" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>506</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="encodeUrl" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>507</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="encodeRedirectUrl" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>508</id>
			<description>                            Sends an error response to the client using the specified  status clearing the buffer.
                              The server defaults to creating the   response to look like an HTML-formatted server error page containing the specified message, setting the content type  to "text/html", leaving cookies and other headers unmodified.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>509</id>
			<description>                            Sends an error response to the client using the specified  status clearing the buffer.
                              If an error-page declaration has been made for the web application  corresponding to the status code passed in, it will be served back in   preference to the suggested msg parameter.    If the response has already been committed, this method throws   an IllegalStateException.  After using this method, the response should be considered  to be committed and should not be written to.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>510</id>
			<description>If an input or output exception occurs</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>511</id>
			<description>If the response was committed</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>512</id>
			<description>                            Sends an error response to the client using the specified status  code and clearing the buffer.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>513</id>
			<description>If an input or output exception occurs</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>514</id>
			<description>If the response was committed before this method call</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendError" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>515</id>
			<description>                            Sends a temporary redirect response to the client using the  specified redirect location URL.
                              This method can accept relative URLs;  the servlet container must convert the relative URL to an absolute URL  before sending the response to the client. If the location is relative   without a leading '/' the container interprets it as relative to  the current request URI.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendRedirect" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>516</id>
			<description>                            Sends a temporary redirect response to the client using the  specified redirect location URL.
                             If the location is relative with a leading  '/' the container interprets it as relative to the servlet container root.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendRedirect" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="removed" testable="true">
			<id>517</id>
			<description>                            Sends a temporary redirect response to the client using the  specified redirect location URL.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendRedirect" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>518</id>
			<description>If an input or output exception occurs</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendRedirect" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>519</id>
			<description>If the response was committed or if a partial URL is given and cannot be converted into a valid URL</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="sendRedirect" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>520</id>
			<description>                            Sets a response header with the given name and  date-value.
                              The date is specified in terms of  milliseconds since the epoch.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="setDateHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>521</id>
			<description>                            Sets a response header with the given name and  date-value.
                              If the header had already  been set, the new value overwrites the previous one.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="setDateHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>522</id>
			<description>                            Adds a response header with the given name and  date-value.
                              The date is specified in terms of  milliseconds since the epoch.  This method allows response headers   to have multiple values.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="addDateHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>long</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>523</id>
			<description>                            Sets a response header with the given name and value.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="setHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>524</id>
			<description>                            Sets a response header with the given name and value.
                              If the header had already been set, the new value overwrites the  previous one.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="setHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>525</id>
			<description>                            Adds a response header with the given name and value.
                              This method allows response headers to have multiple values.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="addHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>526</id>
			<description>                            Sets a response header with the given name and  integer value.
                              If the header had already been set, the new value  overwrites the previous one.  The containsHeader  method can be used to test for the presence of a header before  setting its value.



			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="setIntHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>527</id>
			<description>                            Adds a response header with the given name and  integer value.
                              This method allows response headers to have multiple  values.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="addIntHeader" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>528</id>
			<description>                            Sets the status code for this response.
                              This method is used to  set the return status code when there is no error (for example,  for the status codes SC_OK or SC_MOVED_TEMPORARILY).  The container clears the buffer and sets the Location header, preserving  cookies and other headers.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="setStatus" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>529</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse</class-interface>
			<method name="setStatus" return-type="void">
				<parameters>
					<parameter>int</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>530</id>
			<description>                            Returns the name of the authentication scheme used to protect  the servlet.
                             All servlet containers support basic, form and client   certificate authentication, and may additionally support digest   authentication.  If the servlet is not authenticated null is returned.    Same as the value of the CGI variable AUTH_TYPE.
                       XXX
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getAuthType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>531</id>
			<description>                            Returns an array containing all of the Cookie  objects the client sent with this request.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getCookies" return-type="javax.servlet.http.Cookie[]"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>532</id>
			<description>
                              This method returns null if no cookies were sent.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getCookies" return-type="javax.servlet.http.Cookie[]"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>533</id>
			<description>                            Returns the value of the specified request header  as a long value that represents a   Date object.
                             The date is returned as  the number of milliseconds since January 1, 1970 GMT.  The header name is case insensitive.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getDateHeader" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>534</id>
			<description>                            Returns the value of the specified request header  as a long value that represents a   Date object.
                             if the request did not have a header of the  specified name, this method returns -1.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getDateHeader" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>535</id>
			<description>If the header value can't be converted to a date</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getDateHeader" return-type="long">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>536</id>
			<description>                            Returns the value of the specified request header  as a String.
                             The header name is case insensitive.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getHeader" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>537</id>
			<description>
                           If the request does not include a header  of the specified name, this method returns null.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getHeader" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>538</id>
			<description>                            Returns all the values of the specified request header  as an Enumeration of String objects.
                               Some headers, such as Accept-Language can be sent  by clients as several headers each with a different value rather than  sending the header as a comma separated list.   The header name is case insensitive.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getHeaders" return-type="java.util.Enumeration">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>539</id>
			<description>                            If the request did not include any headers  of the specified name, this method returns an empty  Enumeration.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getHeaders" return-type="java.util.Enumeration">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>540</id>
			<description>                            Returns an enumeration of all the header names  this request contains.
                             Some servlet containers do not allow do not allow  servlets to access headers using this method, in  which case this method returns null

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getHeaderNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>541</id>
			<description>
                             If the request has no  headers, this method returns an empty enumeration.   Some servlet containers do not allow do not allow  servlets to access headers using this method, in  which case this method returns null

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getHeaderNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>542</id>
			<description>                            Returns the value of the specified request header  as an int.
                             The header name is case insensitive.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getIntHeader" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>543</id>
			<description>
                             If the request does not have a header  of the specified name, this method returns -1.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getIntHeader" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>544</id>
			<description>If the header value can't be converted to an int</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getIntHeader" return-type="int">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.NumberFormatException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>545</id>
			<description>                            Returns the name of the HTTP method with which this   request was made, for example, GET, POST, or PUT.
                              Same as the value of the CGI variable REQUEST_METHOD.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getMethod" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>546</id>
			<description>                            Returns any extra path information associated with  the URL the client sent when it made this request.
                              The extra path information follows the servlet path  but precedes the query string and will start with  a "/" character.   This method returns null if there  was no extra path information.   Same as the value of the CGI variable PATH_INFO.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getPathInfo" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>547</id>
			<description>           This method returns null if there  was no extra path information.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getPathInfo" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>548</id>
			<description>                            Returns any extra path information after the servlet name  but before the query string, and translates it to a real  path.
                             Same as the value of the CGI variable PATH_TRANSLATED.   The web container does not decode this string.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getPathTranslated" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>549</id>
			<description>
                             If the URL does not have any extra path information,  this method returns null or the servlet container  cannot translate the virtual path to a real path for any reason  (such as when the web application is executed from an archive).

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getPathTranslated" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>550</id>
			<description>Returns the portion of the request URI that indicates the context  of the request.
                              The context path always comes first in a request  URI.  The path starts with a "/" character but does not end with a "/"  character.
                        It is possible that a servlet container may match a context by more than one context path. In such cases this method will return the actual context path used by the request and it may differ from the path returned by the ServletContext.getContextPath() method. The context path returned by ServletContext.getContextPath() should be considered as the prime or preferred context path of the application.
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getContextPath" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>551</id>
			<description>
                              For servlets in the default (root) context, this method  returns "". The container does not decode this string.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getContextPath" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>552</id>
			<description>                            Returns the query string that is contained in the request  URL after the path.
                       Same as the value of the CGI variable QUERY_STRING.
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getQueryString" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>553</id>
			<description>                             This method returns null  if the URL does not have a query string.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getQueryString" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>554</id>
			<description>                            Returns the login of the user making this request, if the  user has been authenticated, or null if the user   has not been authenticated.
                              Whether the user name is sent with each subsequent request  depends on the browser and type of authentication. Same as the   value of the CGI variable REMOTE_USER.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getRemoteUser" return-type="java.lang.String"/>
		</assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>555</id>
            <description>Returns a boolean indicating whether the authenticated user is included  in the specified logical "role".
                Roles and role membership can be  defined using deployment descriptors.
            </description>
            <package>javax.servlet.http</package>
            <class-interface>HttpServletRequest</class-interface>
            <method name="isUserInRole" return-type="boolean">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>556</id>
            <description>
                If the user has not been  authenticated, the method returns false.
            </description>
            <package>javax.servlet.http</package>
            <class-interface>HttpServletRequest</class-interface>
            <method name="isUserInRole" return-type="boolean">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>947</id>
            <description> If the role-name of the security-role to be tested is &#x201c;**&#x201d;,
                and the application has NOT declared an application security-role with role-name &#x201c;**&#x201d;,
                isUserInRole must only return true if the user has been authenticated;
                that is, only when #getRemoteUser and #getUserPrincipal would both return a non-null value.
                Otherwise, the container must check the user for membership in the application role.
            </description>
            <package>javax.servlet.http</package>
            <class-interface>HttpServletRequest</class-interface>
            <method name="isUserInRole" return-type="boolean">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
			<id>557</id>
			<description>                            Returns a java.security.Principal object containing  the name of the current authenticated user.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getUserPrincipal" return-type="java.security.Principal"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>558</id>
			<description>
                             If the user has not been  authenticated, the method returns null.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getUserPrincipal" return-type="java.security.Principal"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>559</id>
			<description>                            Returns the session ID specified by the client.
                             This may  not be the same as the ID of the actual session in use.  For example, if the request specified an old (expired)  session ID and the server has started a new session, this  method gets a new session with a new ID. If the request  did not specify a session ID, this method returns  null.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getRequestedSessionId" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>560</id>
			<description>
                           If the request  did not specify a session ID, this method returns  null.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getRequestedSessionId" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>561</id>
			<description>                            Returns the part of this request's URL from the protocol  name up to the query string in the first line of the HTTP request.

                              The web container does not decode this String.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getRequestURI" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>562</id>
			<description>Reconstructs the URL the client used to make the request.
                              The returned URL contains a protocol, server name, port  number, and server path, but it does not include query  string parameters.   If this request has been forwarded using RequestDispatcher.forward(ServletRequest, ServletResponse) , the server path in the reconstructed URL must reflect the path used to obtain the RequestDispatcher, and not the server path specified by the client. Because this method returns a StringBuffer , not a string, you can modify the URL easily, for example, to append query parameters.
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getRequestURL" return-type="java.lang.StringBuffer"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>563</id>
			<description> Returns the part of this request's URL that calls  the servlet.
                             This path starts with a "/" character   and includes either the servlet name or a path to   the servlet, but does not include any extra path   information or a query string. Same as the value of   the CGI variable SCRIPT_NAME.   This method will return an empty string ("") if the   servlet used to process this request was matched using   the "/*" pattern.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getServletPath" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>564</id>
			<description>
                          This method will return an empty string ("") if the   servlet used to process this request was matched using   the "/*" pattern.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getServletPath" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>565</id>
			<description>                            Returns the current HttpSession  associated with this request or, if if there is no  current session and create is true, returns   a new session.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>566</id>
			<description>                               If create is false  and the request has no valid HttpSession,  this method returns null. </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession">
				<parameters>
					<parameter>boolean</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>567</id>
			<description>                            Returns the current session associated with this request,  or if the request does not have a session, creates one.


			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="getSession" return-type="javax.servlet.http.HttpSession"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>568</id>
			<description>Checks whether the requested session ID is still valid. If the client did not specify any session ID, this method returns false.
Returns: true if this request has an id for a valid session in the current session context; false otherwise
			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="isRequestedSessionIdValid" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>569</id>
			<description>                            Checks whether the requested session ID came in as a cookie.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="isRequestedSessionIdFromCookie" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>570</id>
			<description>                            Checks whether the requested session ID came in as part of the   request URL.

			</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="isRequestedSessionIdFromURL" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>571</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest</class-interface>
			<method name="isRequestedSessionIdFromUrl" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>572</id>
			<description>Returns the value of the named attribute as an Object,  or null if no attribute of the given name exists.
                                     Attributes can be set two ways.  The servlet container may set attributes to make available custom information about a request.
                                     For example, for requests made using HTTPS, the attribute javax.servlet.request.X509Certificate can be used to retrieve information
                                     on the certificate of the client.
                                     Attributes can also be set programatically using setAttribute(java.lang.String, java.lang.Object).
                                     This allows information to be embedded into a request before a RequestDispatcher call.
                                     Attribute names should follow the same conventions as package names.
                                     This specification reserves names matching java.*,  javax.*, and sun.*.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getAttribute" return-type="java.lang.Object">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>573</id>
			<description>Returns an Enumeration containing the  names of the attributes available to this request.
                               This method returns an empty Enumeration  if the request has no attributes available to it.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getAttributeNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>574</id>
			<description>
                            Returns the name of the character encoding used in the body of this  request.
                             This method returns null if the request  does not specify a character encoding
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>575</id>
			<description>
                            Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the  length is not known.
                             For HTTP servlets, same as the value  of the CGI variable CONTENT_LENGTH.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getContentLength" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>576</id>
			<description>Returns the MIME type of the body of the request, or null if the type is not known.
                                     For HTTP servlets, same as the value of the CGI variable CONTENT_TYPE.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>577</id>
			<description>Retrieves the body of the request as binary data using  a ServletInputStream.
                              Either this method or getReader() may be called to read the body, not both.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>578</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>579</id>
			<description>if the getReader method has already been called for this request</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getInputStream" return-type="javax.servlet.ServletInputStream">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>580</id>
			<description>Returns the preferred Locale that the client will accept content in, based on the Accept-Language header.
                              If the client request doesn't provide an Accept-Language header,  this method returns the default locale for the server.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>581</id>
			<description>Returns an Enumeration of Locale objects indicating,
                                     in decreasing order starting with the preferred locale,
                                     the locales that are acceptable to the client based on the Accept-Language header.
                                     If the client request doesn't provide an Accept-Language header,
                                     this method returns an Enumeration containing one Locale, the default locale for the server.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getLocales" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>582</id>
			<description>Returns the value of a request parameter as a String,  or null if the parameter does not exist.
                                     Request parameters are extra information sent with the request.
                                     For HTTP servlets,  parameters are contained in the query string or posted form data.
                                     You should only use this method when you are sure the parameter has only one value.
                                     If the parameter might have more than one value, use getParameterValues(java.lang.String).
                                     If you use this method with a multivalued parameter, the value returned is equal to the first value in the array returned by getParameterValues.
                                     If the parameter data was sent in the request body, such as occurs  with an HTTP POST request,
                                     then reading the body directly via getInputStream() or getReader() can interfere with the execution of this method.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getParameter" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>583</id>
			<description>Returns a java.util.Map of the parameters of this request.
                              Request parameters are extra information sent with the request.
                              For HTTP servlets, parameters are contained in the query string or posted form data.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getParameterMap" return-type="java.util.Map"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>584</id>
			<description>Returns an Enumeration of String objects containing the names of the parameters contained in this request.
                                     If the request has no parameters, the method returns an empty Enumeration.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getParameterNames" return-type="java.util.Enumeration"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>585</id>
			<description>Returns an array of String objects containing all of the values the given request parameter has,
                                     or null if the parameter does not exist.
                                     If the parameter has a single value, the array has a length  of 1.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getParameterValues" return-type="java.lang.String[]">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>586</id>
			<description>Returns the name and version of the protocol the request uses in the form protocol/majorVersion.minorVersion,
                                     for example, HTTP/1.1.
                                     For HTTP servlets, the value returned is the same as the value of the CGI variable SERVER_PROTOCOL.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getProtocol" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>587</id>
			<description>Retrieves the body of the request as character data using a BufferedReader.
                              The reader translates the character  data according to the character encoding used on the body.
                              Either this method or getInputStream() may be called to read the body, not both.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>588</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>589</id>
			<description>if the character set encoding used is not supported and the text cannot be decoded</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader">
				<throw>java.io.UnsupportedEncodingException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>590</id>
			<description>if getInputStream method has been called on this request</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getReader" return-type="java.io.BufferedReader">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="deprecated" testable="true">
			<id>591</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getRealPath" return-type="java.lang.String">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>592</id>
			<description>Returns the Internet Protocol (IP) address of the client that sent the request.
                              For HTTP servlets, same as the value of the CGI variable REMOTE_ADDR.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getRemoteAddr" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>593</id>
			<description>Returns the fully qualified name of the client that sent the  request.
                             If the engine cannot or chooses not to resolve the hostname (to improve performance),
                             this method returns the dotted-string form of   the IP address.
                             For HTTP servlets, same as the value of the CGI variable REMOTE_HOST.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getRemoteHost" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>594</id>
			<description>Returns a object that acts as a wrapper for the resource located at the given path.
                            A RequestDispatcher object can be used to forward  a request to the resource or to include the resource in a response.
                            The resource can be dynamic or static.
                            The pathname specified may be relative, although it cannot extend  outside the current servlet context.
                            If the path begins with   a "/" it is interpreted as relative to the current context root.
                            This method returns null if the servlet container  cannot return a RequestDispatcher.
                            The difference between this method and  is that this method can take a  relative path.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getRequestDispatcher" return-type="javax.servlet.RequestDispatcher">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>595</id>
			<description>Returns the name of the scheme used to make this request, for example,  http, https, or ftp.
                              Different schemes have different rules for constructing URLs,  as noted in RFC 1738.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getScheme" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>596</id>
			<description>Returns the host name of the server that received the request.
                              For HTTP servlets, same as the value of the CGI variable SERVER_NAME.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getServerName" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>597</id>
			<description>Returns the port number on which this request was received.
                              For HTTP servlets, same as the value of the CGI variable   SERVER_PORT.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="getServerPort" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>598</id>
			<description>Returns a boolean indicating whether this request was made using a  secure channel, such as HTTPS.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="isSecure" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>599</id>
			<description>Removes an attribute from this request.
                              This method is not generally needed as attributes only persist as long as the request is being handled.
                              Attribute names should follow the same conventions as  package names.
                              Names beginning with java.*,  javax.*, and com.sun.*, are  reserved for use by Sun Microsystems.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="removeAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>600</id>
			<description>Stores an attribute in this request.
                             Attributes are reset between requests.
                             This method is most often used in conjunction with RequestDispatcher.
                             Attribute names should follow the same conventions as package names.
                             Names beginning with java.*,  javax.*, and com.sun.*, are reserved for use by Sun Microsystems.
                             If the value passed in is null, the effect is the same as calling removeAttribute(java.lang.String).
                             It is warned that when the request is dispatched from the servlet resides in a different web application by RequestDispatcher,
                             the object set by this method may not be correctly retrieved in the caller servlet.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="setAttribute" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.Object</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>601</id>
                        <description>Overrides the name of the character encoding used in the body of this request.
                            This method must be called prior to reading request parameters or reading input using getReader().
                            Otherwise, it has no effect.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>602</id>
			<description>if this ServletRequest is still in a state where a character encoding may be set, but the specified encoding is invalid</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequest.{javax.servlet.ServletRequest}</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.io.UnsupportedEncodingException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>603</id>
			<description>Forces any content in the buffer to be written to the client.
                              A call  to this method automatically commits the response, meaning the status code and headers will be written.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="flushBuffer" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>604</id>
			<description/>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="flushBuffer" return-type="void">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>605</id>
			<description>Returns the actual buffer size used for the response.
                            If no buffering  is used, this method returns 0.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getBufferSize" return-type="int"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>606</id>
			<description>Returns the name of the charset used for  the MIME body sent in this response.
                             If no charset has been assigned, it is implicitly  set to ISO-8859-1 (Latin-1).
                             See RFC 2047 (http://ds.internic.net/rfc/rfc2045.txt)  for more information about character encoding and MIME.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getCharacterEncoding" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>607</id>
			<description>Returns the MIME type of the body of the request, or null if the type is not known.
                            For HTTP servlets, same as the value of the CGI variable CONTENT_TYPE.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getContentType" return-type="java.lang.String"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>608</id>
			<description>Returns the locale assigned to the response.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getLocale" return-type="java.util.Locale"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>609</id>
			<description>Returns a  suitable for writing binary data in the response.
                            The servlet container does not encode the  binary data.
                            Calling flush() on the ServletOutputStream commits the response.
                            Either this method or getWriter() may be called to write the body, not both.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>610</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>611</id>
			<description>if the getWriter method has been called on this response</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getOutputStream" return-type="javax.servlet.ServletOutputStream">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>612</id>
			<description>Returns a PrintWriter object that can send character text to the client.
                               The PrintWriter uses the character encoding returned by getCharacterEncoding().
                               If the response's character encoding has not been specified as described in getCharacterEncoding
                               (i.e., the method just returns the default value ISO-8859-1), getWriter  updates it to ISO-8859-1.
                               Calling flush() on the PrintWriter commits the response.
                               Either this method or getOutputStream() may be called to write the body, not both, except when reset() has been called.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>613</id>
			<description>if an input or output exception occurred</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter">
				<throw>java.io.IOException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>614</id>
			<description>if the character encoding returned by getCharacterEncoding cannot be used</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter">
				<throw>java.io.UnsupportedEncodingException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>615</id>
			<description>if the getOutputStream method has already been called for this response object</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="getWriter" return-type="java.io.PrintWriter">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>616</id>
			<description>Returns a boolean indicating if the response has been  committed.
                              A commited response has already had its status code and headers written.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="isCommitted" return-type="boolean"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>617</id>
			<description>Clears any data that exists in the buffer as well as the status code and  headers.
                              If the response has been committed, this method throws an IllegalStateException.
                         </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="reset" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>618</id>
			<description>if the response has already been committed</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="reset" return-type="void">
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>619</id>
			<description>Clears the content of the underlying buffer in the response without clearing headers or status code.
                             If the response has been committed, this method throws an IllegalStateException.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="resetBuffer" return-type="void"/>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>620</id>
			<description>Sets the preferred buffer size for the body of the response.
                                The servlet container will use a buffer at least as large as the size requested.
                                The actual buffer size used can be found using getBufferSize.
                                A larger buffer allows more content to be written before anything is actually sent,
                                thus providing the servlet with more time to set  appropriate status codes and headers.
                                A smaller buffer decreases server memory load and allows the client to start receiving data more quickly.
                                This method must be called before any response body content is  written;
                                if content has been written, this method throws an IllegalStateException.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="setBufferSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>621</id>
			<description>if this method is called after content has been written</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="setBufferSize" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>622</id>
			<description>Overrides the name of the character encoding used in the body  of the request.
                             This method must be called prior to reading  request parameters or reading input using getReader().
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="setCharacterEncoding" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>623</id>
			<description>Sets the length of the content body in the response.
                        In HTTP servlets, this method sets the HTTP Content-Length header.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="setContentLength" return-type="void">
				<parameters>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>624</id>
			<description>Sets the content type of the response being sent to the client.
                             The content type may include the type of character  encoding used, for example, text/html; charset=ISO-8859-4.
                             If obtaining a PrintWriter, this method should be called first.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="setContentType" return-type="void">
				<parameters>
					<parameter>java.lang.String</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>625</id>
			<description>Sets the locale of the response, if the response has not been committed yet.
                            It also sets the response's character encoding appropriately for the locale,
                            if the character encoding has not been explicitly set using setContentType(java.lang.String)
                            or setCharacterEncoding(java.lang.String), getWriter hasn't been called yet, and the response hasn't been committed yet.
                            If the deployment descriptor contains a locale-encoding-mapping-list element,
                            and that element provides a mapping for the given locale, that mapping is used.
                            Otherwise, the mapping from locale to character encoding is container dependent.
                            This method may be called repeatedly to change locale and character encoding.
                            The method has no effect if called after the response has been committed.
                            It does not set the response's character encoding if it is called after
                            setContentType(java.lang.String) has been called with a charset specification,
                            after setCharacterEncoding(java.lang.String) has been called, after getWriter has been called,
                            or after the response has been committed.
                            Containers must communicate the locale and the character encoding used for the servlet response's writer
                            to the client if the protocol provides a way for doing so. In the case of HTTP,
                            the locale is communicated via the Content-Language header,
                            the character encoding as part of the Content-Type header for text media types.
                            Note that the character encoding cannot be communicated via HTTP headers if the servlet does not specify a content type;
                            however, it is still used to encode text written via the servlet response's writer.
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletResponse.{javax.servlet.ServletResponse}</class-interface>
			<method name="setLocale" return-type="void">
				<parameters>
					<parameter>java.util.Locale</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>626</id>
			<description>If the request is null.</description>
			<package>javax.servlet.http</package>
			<class-interface>HttpServletRequestWrapper</class-interface>
			<method name="HttpServletRequestWrapper" return-type="HttpServletRequestWrapper">
				<parameters>
					<parameter>javax.servlet.http.HttpServletRequest</parameter>
				</parameters>
				<throw>java.lang.IllegalStateException</throw>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="false">
			<id>627</id>
			<description>Reads the input stream, one line at a time.
                             This method returns -1 if it reaches the end of the input stream before reading the maximum number of bytes.
			</description>
			<package>javax.servlet</package>
			<class-interface>ServletInputStream</class-interface>
			<method name="readLine" return-type="int">
				<parameters>
					<parameter>byte[]</parameter>
					<parameter>int</parameter>
					<parameter>int</parameter>
				</parameters>
			</method>
		</assertion>
		<assertion required="true" impl-spec="false" status="active" testable="true">
			<id>628</id>
			<description>if the cookie name contains illegal characters (for example, a comma, space, or semicolon)
                            or it is one of the tokens reserved for use by the cookie protocol
                        </description>
			<package>javax.servlet.http</package>
			<class-interface>Cookie</class-interface>
			<method name="Cookie" return-type="Cookie">
				<parameters>
					<parameter>java.lang.String</parameter>
					<parameter>java.lang.String</parameter>
				</parameters>
				<throw>java.lang.IllegalArgumentException</throw>
			</method>
		</assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>629</id>
            <description>Returns the host name of the Internet Protocol (IP) interface on which the request was received.
            </description>
            <package>javax.servlet.http</package>
            <class-interface>HttpServletRequest</class-interface>
            <method name="getLocalName" return-type="java.lang.String"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>630</id>
            <description>Returns the Internet Protocol (IP) port number of the interface
                    on which the request was received.
            </description>
            <package>javax.servlet.http</package>
            <class-interface>HttpServletRequest</class-interface>
            <method name="getLocalPort" return-type="int"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>631</id>
            <description>The default behavior of this method is to return getLocalPort() on the wrapped
                         request object.
            </description>
            <package>javax.servlet.http</package>
            <class-interface>HttpServletRequestWrapper</class-interface>
            <method name="getLocalPort" return-type="int"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>632</id>
            <description>Returns the host name of the Internet Protocol (IP) interface on which the request was received.
            </description>
            <package>javax.servlet</package>
            <class-interface>ServletRequest</class-interface>
            <method name="getLocalName" return-type="java.lang.String"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>633</id>
            <description>The default behavior of this method is to return getLocalName() on the wrapped request object.
            </description>
            <package>javax.servlet</package>
            <class-interface>ServletRequestWrapper</class-interface>
            <method name="getLocalName" return-type="java.lang.String"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>634</id>
            <description>The default behavior of this method is to return getLocalName() on the wrapped request object.
            </description>
            <package>javax.servlet.http</package>
            <class-interface>HttpServletRequestWrapper</class-interface>
            <method name="getLocalName" return-type="java.lang.String"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>635</id>
            <description>Returns the Internet Protocol (IP) port number of the interface
                    on which the request was received.
            </description>
            <package>javax.servlet</package>
            <class-interface>ServletRequest</class-interface>
            <method name="getLocalPort" return-type="int"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>636</id>
            <description>The default behavior of this method is to return getLocalPort() on the wrapped
                         request object.
            </description>
            <package>javax.servlet</package>
            <class-interface>ServletRequestWrapper</class-interface>
            <method name="getLocalPort" return-type="int"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>637</id>
            <description>Returns the context path of the web application.
                The context path is the portion of the request URI that is used to select the context of the request.
                The context path always comes first in a request URI. If this context is the "default"
                context rooted at the base of the Web server's URL name space, this path will be an empty string.
                Otherwise, if the context is not rooted at the root of the server's URL name space,
                the path starts with a / character but does not end with a / character.
                It is possible that a servlet container may match a context by more than one context path.
                In such cases the javax.servlet.http.HttpServletRequest#getContextPath() will return the actual context path
                used by the request and it may differ from the path returned by this method.
                The context path returned by this method should be considered as the prime or preferred context path of the application.
            </description>
            <package>javax.servlet</package>
            <class-interface>ServletContext</class-interface>
            <method name="getContextPath" return-type="java.lang.String"/>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:638</id>
            <description>Completes the asynchronous operation that was started on the request
                that was used to initialze this AsyncContext, closing the response that was used to initialize this AsyncContext.
                Any listeners of type AsyncListener that were added to the request that was used to initialize this AsyncContext
                will have their AsyncListener#onComplete(AsyncEvent) method invoked.
                It is legal to call this method any time after a call to ServletRequest#startAsync()
                or ServletRequest#startAsync(ServletRequest, ServletResponse),
                and before a call to one of the dispatch methods of this class.
                If this method is called before the container-initiated dispatch that called startAsync has returned to the container,
                then the call will not take effect (and any invocations of AsyncListener#onComplete(AsyncEvent) will be delayed)
                until after the container-initiated dispatch has returned to the container.</description>
      <package>javax.servlet</package>
      <class-interface>AsyncContext</class-interface>
      <method name="complete" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:638.1</id>
        <description>Any listeners of type AsyncListener that were added to the request that was used to initialize this AsyncContext will have their AsyncListener#onComplete(AsyncEvent) method invoked.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="complete" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:638.2</id>
        <description>It is legal to call this method any time after a call to ServletRequest#startAsync() or ServletRequest#startAsync(ServletRequest, ServletResponse), and before a call to one of the dispatch methods of this class. If this method is called before the container-initiated dispatch that called startAsync has returned to the container, then the call will not take effect (and any invocations of AsyncListener#onComplete(AsyncEvent) will be delayed) until after the container-initiated dispatch has returned to the container.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="complete" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:639</id>
      <description>Dispatches the request and response objects of this AsyncContext to the servlet container. If the asynchronous cycle was started with ServletRequest#startAsync(ServletRequest, ServletResponse) then the dispatch is to the URI of the request passed to startAsync. If the asynchronous cycle was started with ServletRequest#startAsync(), then the dispatch is to the URI of the request when it was last dispatched by the container. The following sequence illustrates how this will work: // REQUEST dispatch to /url/A AsyncContext ac = request.startAsync(); ... ac.dispatch(); // ASYNC dispatch to /url/A // FORWARD dispatch to /url/B getRequestDispatcher("/url/B").forward(request,response); // Start async operation from within the target of the FORWARD // dispatch ac = request.startAsync(); ... ac.dispatch(); // ASYNC dispatch to /url/A // FORWARD dispatch to /url/B getRequestDispatcher("/url/B").forward(request,response); // Start async operation from within the target of the FORWARD // dispatch ac = request.startAsync(request,response); ... ac.dispatch(); // ASYNC dispatch to /url/B This method returns immediately after passing the request and response objects to a container managed thread, on which the dispatch operation will be performed. The dispatcher type of the request is set to DispatcherType.ASYNC. Unlike RequestDispatcher#forward(ServletRequest, ServletResponse) forward dispatches, the response buffer and headers will not be reset, and it is legal to dispatch even if the response has already been committed. Control over the request and response is delegated to the dispatch target, and the response will be closed when the dispatch target has completed execution, unless ServletRequest#startAsync() or ServletRequest#startAsync(ServletRequest, ServletResponse) are called.</description>
      <package>javax.servlet</package>
      <class-interface>AsyncContext</class-interface>
      <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.1</id>
        <description>If the asynchronous cycle was started with ServletRequest.startAsync(ServletRequest, ServletResponse), and the request passed is an instance of HttpServletRequest, then the dispatch is to the URI returned by HttpServletRequest.getRequestURI().</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.2</id>
        <description>Otherwise, the dispatch is to the URI of the request when it was last dispatched by the container. </description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.3</id>
        <description>This method returns immediately after passing the request and response objects to a container managed thread, on which the dispatch operation will be performed. </description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.4</id>
        <description>The dispatcher type of the request is set to DispatcherType.ASYNC. Unlike forward dispatches, the response buffer and headers will not be reset, and it is legal to dispatch even if the response has already been committed.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.5</id>
        <description>Control over the request and response is delegated to the dispatch target, and the response will be closed when the dispatch target has completed execution, unless ServletRequest.startAsync() or ServletRequest.startAsync(ServletRequest, ServletResponse)  are called.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.6</id>
        <description>Any errors or exceptions that may occur during the execution of this method must be caught and handled by the container, as follows:   1. Invoke, at their onError method, all AsyncListener instances registered with the ServletRequest for which this AsyncContext was created, and make the caught Throwable available via AsyncEvent.getThrowable().</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.7</id>
        <description>2. If none of the listeners called complete() or any of the dispatch() methods, perform an error dispatch with a status code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR, and make the above Throwable available as the value of the RequestDispatcher.ERROR_EXCEPTION request attribute.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.8</id>
        <description>3. If no matching error page was found, or the error page did not call complete() or any of the dispatch() methods, call complete().</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.9</id>
        <description>There can be at most one asynchronous dispatch operation per asynchronous cycle, which is started by a call to one of the ServletRequest.startAsync() methods. Any attempt to perform an additional asynchronous dispatch operation within the same asynchronous cycle will result in an IllegalStateException. </description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.10</id>
        <description>If startAsync is subsequently called on the dispatched request, then any of the dispatch or complete() methods may be called. </description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:639.11</id>
        <description>if one of the dispatch methods has been called and the startAsync method has not been called during the resulting dispatch, or if complete()  was called</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <throw>java.lang.IllegalStateException </throw>
        </method>
    </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:639.12</id>
            <description>Unlike forward dispatches, the response buffer and headers will not be reset,
                and it is legal to dispatch even if the response has already been committed.
            </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="dispatch" return-type="void" />
        </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:640</id>
      <description>Dispatches the request and response objects of this AsyncContext to the given path. The path parameter is interpreted in the same way as in ServletRequest#getRequestDispatcher(String), within the scope of the ServletContext from which this AsyncContext was initialized. All path related query methods of the request must reflect the dispatch target, while the original request URI, context path, path info, servlet path, and query string may be recovered from the #ASYNC_REQUEST_URI, #ASYNC_CONTEXT_PATH, #ASYNC_PATH_INFO, #ASYNC_SERVLET_PATH, and #ASYNC_QUERY_STRING attributes of the request. These attributes will always reflect the original path elements, even under repeated dispatches. See #dispatch() for additional details.</description>
      <package>javax.servlet</package>
      <class-interface>AsyncContext</class-interface>
      <method name="dispatch" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:640.1</id>
        <description>The path parameter is interpreted in the same way as in ServletRequest.getRequestDispatcher(String), within the scope of the ServletContext from which this AsyncContext was initialized. </description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:640.2</id>
        <description>All path related query methods of the request must reflect the dispatch target, while the original request URI, context path, path info, servlet path, and query string may be recovered from the ASYNC_REQUEST_URI, ASYNC_CONTEXT_PATH, ASYNC_PATH_INFO, ASYNC_SERVLET_PATH, and ASYNC_QUERY_STRING attributes of the request. These attributes will always reflect the original path elements, even under repeated dispatches. </description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:640.3</id>
        <description>There can be at most one asynchronous dispatch operation per asynchronous cycle, which is started by a call to one of the ServletRequest.startAsync() methods. Any attempt to perform an additional asynchronous dispatch operation within the same asynchronous cycle will result in an IllegalStateException.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:640.4</id>
        <description>If startAsync is subsequently called on the dispatched request, then any of the dispatch or complete() methods may be called. </description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:640.5</id>
        <description>Any errors or exceptions that may occur during the execution of this method must be caught and handled by the container, as follows:   1. Invoke, at their onError method, all AsyncListener instances registered with the ServletRequest for which this AsyncContext was created, and make the caught Throwable available via AsyncEvent.getThrowable().</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:640.6</id>
        <description>2. If none of the listeners called complete() or any of the dispatch() methods, perform an error dispatch with a status code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR, and make the above Throwable available as the value of the RequestDispatcher.ERROR_EXCEPTION request attribute.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:640.7</id>
        <description>3. If no matching error page was found, or the error page did not call complete() or any of the dispatch() methods, call complete().</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:640.8</id>
        <description>if one of the dispatch methods has been called and the startAsync method has not been called during the resulting dispatch, or if complete()  was called</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641</id>
      <description>Dispatches the request and response objects of this AsyncContext to the given path scoped to the given context. The path parameter is interpreted in the same way as in ServletRequest#getRequestDispatcher(String), except that it is scoped to the given context. All path related query methods of the request must reflect the dispatch target, while the original request URI, context path, path info, servlet path, and query string may be recovered from the #ASYNC_REQUEST_URI, #ASYNC_CONTEXT_PATH, #ASYNC_PATH_INFO, #ASYNC_SERVLET_PATH, and #ASYNC_QUERY_STRING attributes of the request. These attributes will always reflect the original path elements, even under repeated dispatches. See #dispatch() for additional details.</description>
      <package>javax.servlet</package>
      <class-interface>AsyncContext</class-interface>
      <method name="dispatch" return-type="void">
        <parameters>
          <parameter>javax.servlet.ServletContext</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641.1</id>
        <description>The path parameter is interpreted in the same way as in ServletRequest.getRequestDispatcher(String), except that it is scoped to the given context.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>javax.servlet.ServletContext</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641.2</id>
        <description>All path related query methods of the request must reflect the dispatch target, while the original request URI, context path, path info, servlet path, and query string may be recovered from the ASYNC_REQUEST_URI, ASYNC_CONTEXT_PATH, ASYNC_PATH_INFO, ASYNC_SERVLET_PATH, and ASYNC_QUERY_STRING attributes of the request. These attributes will always reflect the original path elements, even under repeated dispatches.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>javax.servlet.ServletContext</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641.3</id>
        <description>There can be at most one asynchronous dispatch operation per asynchronous cycle, which is started by a call to one of the ServletRequest.startAsync() methods. Any attempt to perform an additional asynchronous dispatch operation within the same asynchronous cycle will result in an IllegalStateException.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>javax.servlet.ServletContext</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641.4</id>
        <description>If startAsync is subsequently called on the dispatched request, then any of the dispatch or complete() methods may be called.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>javax.servlet.ServletContext</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641.5</id>
        <description>Any errors or exceptions that may occur during the execution of this method must be caught and handled by the container, as follows:   1. Invoke, at their onError method, all AsyncListener instances registered with the ServletRequest for which this AsyncContext was created, and make the caught Throwable available via AsyncEvent.getThrowable().</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>javax.servlet.ServletContext</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641.6</id>
        <description>2. If none of the listeners called complete() or any of the dispatch() methods, perform an error dispatch with a status code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR, and make the above Throwable available as the value of the RequestDispatcher.ERROR_EXCEPTION request attribute.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>javax.servlet.ServletContext</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641.7</id>
        <description>3. If no matching error page was found, or the error page did not call complete() or any of the dispatch() methods, call complete().</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>javax.servlet.ServletContext</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:641.8</id>
        <description>if one of the dispatch methods has been called and the startAsync method has not been called during the resulting dispatch, or if complete()  was called</description>
        <package>javax.servlet</package>
        <class-interface>AsyncContext</class-interface>
        <method name="dispatch" return-type="void">
            <parameters>
                <parameter>javax.servlet.ServletContext</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:642</id>
            <description>Gets the request that was used to initialize this AsyncContext
                by calling ServletRequest#startAsync()
                or ServletRequest#startAsync(ServletRequest, ServletResponse).
            </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="getRequest" return-type="javax.servlet.ServletRequest" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:927</id>
            <description>if complete() or any of the dispatch() methods
                has been called in the asynchronous cycle
            </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="getRequest" return-type="javax.servlet.ServletRequest">
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:643</id>
            <description>Gets the response that was used to initialize this AsyncContext
                by calling ServletRequest#startAsync()
                or ServletRequest#startAsync(ServletRequest, ServletResponse).
            </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="getResponse" return-type="javax.servlet.ServletResponse" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:928</id>
            <description>if complete() or any of the dispatch() methods
                has been called in the asynchronous cycle
            </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="getResponse" return-type="javax.servlet.ServletResponse">
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:644</id>
      <description>Checks if this AsyncContext was initialized with the original request and response objects by calling ServletRequest#startAsync(), or if it was initialized with wrapped request and/or response objects using ServletRequest#startAsync(ServletRequest, ServletResponse). This information may be used by filters invoked in the outbound direction, after a request was put into asynchronous mode, to determine whether any request and/or response wrappers that they added during their inbound invocation need to be preserved for the duration of the asynchronous operation, or may be released.</description>
      <package>javax.servlet</package>
      <class-interface>AsyncContext</class-interface>
      <method name="hasOriginalRequestAndResponse" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:645</id>
      <description>Causes the container to dispatch a thread to run the specified Runnable in the ServletContext that initialized this AsyncContext.</description>
      <package>javax.servlet</package>
      <class-interface>AsyncContext</class-interface>
      <method name="start" return-type="void">
        <parameters>
          <parameter>java.lang.Runnable</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:649</id>
      <description>Notifies this AsyncListener that an asynchronous operation has been completed.</description>
      <package>javax.servlet</package>
      <class-interface>AsyncListener</class-interface>
      <method name="onComplete" return-type="void">
        <parameters>
          <parameter>javax.servlet.AsyncEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:649.1</id>
        <description>The AsyncContext corresponding to the asynchronous operation that has been completed may be obtained by calling AsyncEvent#getAsyncContext getAsyncContext on the given event.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncListener</class-interface>
        <method name="onComplete" return-type="void">
            <parameters>
                <parameter>javax.servlet.AsyncEvent</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:649.2</id>
        <description>In addition, if this AsyncListener had been registered via a call to AsyncContext#addListener(AsyncListener, ServletRequest, ServletResponse), the supplied ServletRequest and ServletResponse objects may be retrieved by calling AsyncEvent#getSuppliedRequest getSuppliedRequest and AsyncEvent#getSuppliedResponse getSuppliedResponse, respectively, on the given event.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncListener</class-interface>
        <method name="onComplete" return-type="void">
            <parameters>
                <parameter>javax.servlet.AsyncEvent</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:650</id>
      <description>if an I/O related error has occurred during the processing of the given AsyncEvent</description>
      <package>javax.servlet</package>
      <class-interface>AsyncListener</class-interface>
      <method name="onComplete" return-type="void">
        <parameters>
          <parameter>javax.servlet.AsyncEvent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:651</id>
      <description>Notifies this AsyncListener that an asynchronous operation has timed out.</description>
      <package>javax.servlet</package>
      <class-interface>AsyncListener</class-interface>
      <method name="onTimeout" return-type="void">
        <parameters>
          <parameter>javax.servlet.AsyncEvent</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:651.1</id>
        <description>The AsyncContext corresponding to the asynchronous operation that has timed out may be obtained by calling AsyncEvent#getAsyncContext getAsyncContext on the given event.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncListener</class-interface>
        <method name="onTimeout" return-type="void">
            <parameters>
                <parameter>javax.servlet.AsyncEvent</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:651.2</id>
        <description>In addition, if this AsyncListener had been registered via a call to AsyncContext#addListener(AsyncListener, ServletRequest, ServletResponse), the supplied ServletRequest and ServletResponse objects may be retrieved by calling AsyncEvent#getSuppliedRequest getSuppliedRequest and AsyncEvent#getSuppliedResponse getSuppliedResponse, respectively, on the given event.</description>
        <package>javax.servlet</package>
        <class-interface>AsyncListener</class-interface>
        <method name="onTimeout" return-type="void">
            <parameters>
                <parameter>javax.servlet.AsyncEvent</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:652</id>
      <description>if an I/O related error has occurred during the processing of the given AsyncEvent</description>
      <package>javax.servlet</package>
      <class-interface>AsyncListener</class-interface>
      <method name="onTimeout" return-type="void">
        <parameters>
          <parameter>javax.servlet.AsyncEvent</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:653</id>
      <description></description>
      <package>javax.servlet</package>
      <class-interface>DispatcherType</class-interface>
      <method name="valueOf" return-type="javax.servlet.DispatcherType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:654</id>
      <description></description>
      <package>javax.servlet</package>
      <class-interface>DispatcherType</class-interface>
      <method name="values" return-type="javax.servlet.DispatcherType[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:655</id>
      <description>Adds a filter mapping with the given servlet names and dispatcher types for the Filter represented by this FilterRegistration.</description>
      <package>javax.servlet</package>
      <class-interface>FilterRegistration</class-interface>
      <method name="addMappingForServletNames" return-type="void">
        <parameters>
          <parameter>java.util.EnumSet</parameter>
          <parameter>boolean</parameter>
          <parameter>java.lang.String[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:655.1</id>
        <description>Filter mappings are matched in the order in which they were added.</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForServletNames" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:655.2</id>
        <description>Depending on the value of the isMatchAfter parameter, the given filter mapping will be considered after or before any declared filter mappings of the ServletContext from which this FilterRegistration was obtained.</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForServletNames" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:655.3</id>
        <description>If this method is called multiple times, each successive call adds to the effects of the former.</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForServletNames" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:655.4</id>
        <description>if servletNames is null or empty</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForServletNames" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:655.4</id>
        <description>if the ServletContext from which this FilterRegistration was obtained has already been initialized</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForServletNames" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:656</id>
        <description>Adds a filter mapping with the given url patterns and dispatcher types for the Filter represented by this FilterRegistration.</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForUrlPatterns" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:656.1</id>
        <description>Filter mappings are matched in the order in which they were added.</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForUrlPatterns" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:656.2</id>
        <description>Depending on the value of the isMatchAfter parameter, the given filter mapping will be considered after or before any declared filter mappings of the ServletContext from which this FilterRegistration was obtained.</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForUrlPatterns" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:656.3</id>
        <description>If this method is called multiple times, each successive call adds to the effects of the former.</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForUrlPatterns" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:656.4</id>
        <description>if urlPatterns is null or empty</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForUrlPatterns" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:656.5</id>
        <description>if the ServletContext from which this FilterRegistration was obtained has already been initialized</description>
        <package>javax.servlet</package>
        <class-interface>FilterRegistration</class-interface>
        <method name="addMappingForUrlPatterns" return-type="void">
            <parameters>
                <parameter>java.util.EnumSet</parameter>
                <parameter>boolean</parameter>
                <parameter>java.lang.String[]</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:657</id>
      <description>Gets the currently available servlet name mappings of the Filter represented by this FilterRegistration. Any changes to the returned Collection must not affect this FilterRegistration.</description>
      <package>javax.servlet</package>
      <class-interface>FilterRegistration</class-interface>
      <method name="getServletNameMappings" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:658</id>
      <description>Gets the currently available URL pattern mappings of the Filter represented by this FilterRegistration. Any changes to the returned Collection must not affect this FilterRegistration.</description>
      <package>javax.servlet</package>
      <class-interface>FilterRegistration</class-interface>
      <method name="getUrlPatternMappings" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:659</id>
      <description>Gets the fully qualified class name of the Servlet or Filter that is represented by this Registration.</description>
      <package>javax.servlet</package>
      <class-interface>Registration</class-interface>
      <method name="getClassName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:660</id>
      <description>Gets the value of the initialization parameter with the given name that will be used to initialize the Servlet or Filter represented by this Registration object.</description>
      <package>javax.servlet</package>
      <class-interface>Registration</class-interface>
      <method name="getInitParameter" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:661</id>
      <description>Gets an immutable (and possibly empty) Map containing the currently available initialization parameters that will be used to initialize the Servlet or Filter represented by this Registration object.</description>
      <package>javax.servlet</package>
      <class-interface>Registration</class-interface>
      <method name="getInitParameters" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:662</id>
      <description>Gets the name of the Servlet or Filter that is represented by this Registration.</description>
      <package>javax.servlet</package>
      <class-interface>Registration</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:663</id>
      <description>Sets the initialization parameter with the given name and value on the Servlet or Filter that is represented by this Registration.</description>
      <package>javax.servlet</package>
      <class-interface>Registration</class-interface>
      <method name="setInitParameter" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:663.1</id>
        <description>if the ServletContext from which this Registration was obtained has already been initialized </description>
        <package>javax.servlet</package>
        <class-interface>Registration</class-interface>
        <method name="setInitParameter" return-type="boolean">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:663.2</id>
        <description>if the given name or value is null</description>
        <package>javax.servlet</package>
        <class-interface>Registration</class-interface>
        <method name="setInitParameter" return-type="boolean">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:664</id>
      <description>Sets the given initialization parameters on the Servlet or Filter that is represented by this Registration. The given map of initialization parameters is processed by-value, i.e., for each initialization parameter contained in the map, this method calls #setInitParameter(String,String). If that method would return false for any of the initialization parameters in the given map, no updates will be performed, and false will be returned. Likewise, if the map contains an initialization parameter with a null name or value, no updates will be performed, and an IllegalArgumentException will be thrown.</description>
      <package>javax.servlet</package>
      <class-interface>Registration</class-interface>
      <method name="setInitParameters" return-type="java.util.Set">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:664.1</id>
            <description>if the ServletContext from which this Registration was obtained has already been initialized </description>
            <package>javax.servlet</package>
            <class-interface>Registration</class-interface>
            <method name="setInitParameters" return-type="java.util.Set">
                <parameters>
                    <parameter>java.util.Map</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:664.2</id>
            <description>if the given map contains an initialization parameter with a null name or value</description>
            <package>javax.servlet</package>
            <class-interface>Registration</class-interface>
            <method name="setInitParameters" return-type="java.util.Set">
                <parameters>
                    <parameter>java.util.Map</parameter>
                </parameters>
                <throw>java.lang.IllegalArgumentException</throw>
            </method>
        </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:665</id>
      <description>Configures the Servlet or Filter represented by this dynamic Registration as supporting asynchronous operations or not. By default, servlet and filters do not support asynchronous operations. A call to this method overrides any previous setting.</description>
      <package>javax.servlet</package>
      <class-interface>Registration.Dynamic</class-interface>
      <method name="setAsyncSupported" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:665.1</id>
      <description>if the ServletContext from which this dynamic Registration was obtained has already been initialized</description>
      <package>javax.servlet</package>
      <class-interface>Registration.Dynamic</class-interface>
      <method name="setAsyncSupported" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:666</id>
      <description>Notifies this ServletContainerInitializer of the startup of the application represented by the given ServletContext.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContainerInitializer</class-interface>
      <method name="onStartup" return-type="void">
        <parameters>
          <parameter>java.util.Set</parameter>
          <parameter>javax.servlet.ServletContext</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:666.1</id>
        <description>If this ServletContainerInitializer is bundled in a JAR file inside the WEB-INF/lib directory of an application, its onStartup method will be invoked only once during the startup of the bundling application. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContainerInitializer</class-interface>
        <method name="onStartup" return-type="void">
            <parameters>
                <parameter>java.util.Set</parameter>
                <parameter>javax.servlet.ServletContext</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:666.2</id>
        <description>If this ServletContainerInitializer is bundled inside a JAR file outside of any WEB-INF/lib directory, but still discoverable by the runtime's service provider lookup mechanism, its onStartup method will be invoked every time an application is started.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContainerInitializer</class-interface>
        <method name="onStartup" return-type="void">
            <parameters>
                <parameter>java.util.Set</parameter>
                <parameter>javax.servlet.ServletContext</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:667</id>
      <description>if an error has occurred</description>
      <package>javax.servlet</package>
      <class-interface>ServletContainerInitializer</class-interface>
      <method name="onStartup" return-type="void">
        <parameters>
          <parameter>java.util.Set</parameter>
          <parameter>javax.servlet.ServletContext</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:668</id>
      <description>Adds the filter with the given name and class name to this servlet context. The registered filter may be further configured via the returned FilterRegistration object. The specified className will be loaded using the classloader associated with the application represented by this ServletContext.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
        <id>Servlet:JAVADOC:668.1</id>
        <description>If this ServletContext already contains a preliminary FilterRegistration for a filter with the given filterName, it will be completed (by assigning the name of the given filterClass to it) and returned. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:668.2</id>
        <description>This method supports resource injection if the given filterClass represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:668.3</id>
        <description>Returns: a FilterRegistration object that may be used to further configure the registered filter,</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
      <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:668.4</id>
        <description>Returns: or null if this ServletContext already contains a complete FilterRegistration for a filter with the given filterName.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:668.5</id>
        <description>if this ServletContext has already been initialized.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:951</id>
        <description>if filterName is null or an empty String</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:668.6</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:669</id>
      <description>Registers the given filter instance with this ServletContext under the given filterName. The registered filter may be further configured via the returned FilterRegistration object.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.servlet.Filter</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
        <id>Servlet:JAVADOC:669.1</id>
        <description>If this ServletContext already contains a preliminary FilterRegistration for a filter with the given filterName, it will be completed (by assigning the name of the given filterClass to it) and returned. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Filter</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:669.2</id>
        <description>This method supports resource injection if the given filterClass represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Filter</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:669.3</id>
        <description>Returns: a FilterRegistration object that may be used to further configure the registered filter.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Filter</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:669.4</id>
        <description>Returns: or null if this ServletContext already contains a complete FilterRegistration for a filter with the given filterName</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Filter</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:669.5</id>
        <description>Returns: null if the same filter instance has already been registered with this or another ServletContext in the same container </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Filter</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:669.6</id>
        <description>if this ServletContext has already been initialized.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Filter</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:952</id>
            <description>if filterName is null or an empty String</description>
            <package>javax.servlet</package>
            <class-interface>ServletContext</class-interface>
            <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
                <parameters>
                    <parameter>java.lang.String</parameter>
                    <parameter>javax.servlet.Filter</parameter>
                </parameters>
                <throw>java.lang.IllegalArgumentException</throw>
            </method>
        </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:669.7</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Filter</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:670</id>
      <description>Adds the filter with the given name and class type to this servlet context. The registered filter may be further configured via the returned FilterRegistration object.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
        <id>Servlet:JAVADOC:670.1</id>
        <description>If this ServletContext already contains a preliminary FilterRegistration for a filter with the given filterName, it will be completed (by assigning the name of the given filterClass to it) and returned. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:670.2</id>
        <description>This method supports resource injection if the given filterClass represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:670.3</id>
        <description>Returns: a FilterRegistration object that may be used to further configure the registered filter.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:670.4</id>
        <description>Returns: or null if this ServletContext already contains a complete FilterRegistration for a filter with the given filterName</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:670.5</id>
        <description>if this ServletContext has already been initialized.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:953</id>
        <description>if filterName is null or an empty String</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:670.6</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addFilter" return-type="javax.servlet.FilterRegistration.FilterRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>Servlet:JAVADOC:671</id>
      <description>Adds the listener with the given class name to this ServletContext. The class with the given name will be loaded using the classloader associated with the application represented by this ServletContext, and must implement one or more of the following interfaces: ServletContextAttributeListenerServletRequestListenerServletRequestAttributeListenerjavax.servlet.http.HttpSessionListenerjavax.servlet.http.HttpSessionAttributeListener If this ServletContext was passed to ServletContainerInitializer#onStartup, then the class with the given name may also implement ServletContextListener, in addition to the interfaces listed above. As part of this method call, the container must load the class with the specified class name to ensure that it implements one of the required interfaces. If the class with the given name implements a listener interface whose invocation order corresponds to the declaration order (i.e., if it implements ServletRequestListener, ServletContextListener, or javax.servlet.http.HttpSessionListener), then the new listener will be added to the end of the ordered list of listeners of that interface.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="addListener" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.1</id>
        <description>Adds the listener with the given class name to this ServletContext. The class with the given name will be loaded using the classloader associated with the application represented by this ServletContext, and must implement one or more of the following interfaces: ServletContextAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.2</id>
        <description>Adds the listener with the given class name to this ServletContext. The class with the given name will be loaded using the classloader associated with the application represented by this ServletContext, and must implement one or more of the following interfaces: ServletRequestListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.3</id>
        <description>Adds the listener with the given class name to this ServletContext. The class with the given name will be loaded using the classloader associated with the application represented by this ServletContext, and must implement one or more of the following interfaces: ServletRequestAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.4</id>
        <description>Adds the listener with the given class name to this ServletContext. The class with the given name will be loaded using the classloader associated with the application represented by this ServletContext, and must implement one or more of the following interfaces: javax.servlet.http.HttpSessionListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.5</id>
        <description>Adds the listener with the given class name to this ServletContext. The class with the given name will be loaded using the classloader associated with the application represented by this ServletContext, and must implement one or more of the following interfaces: javax.servlet.http.HttpSessionAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.6</id>
        <description>Adds the listener with the given class name to this ServletContext. ... If this ServletContext was passed to ServletContainerInitializer#onStartup, then the class with the given name may also implement ServletContextListener, in addition to the interfaces listed above. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.7</id>
        <description>If the class with the given name implements a listener interface whose invocation order corresponds to the declaration order (i.e., if it is an instance of ServletRequestListener, ServletContextListener, or javax.servlet.http.HttpSessionListener), then the listener will be added to the end of the ordered list of listeners of that interface.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.8</id>
        <description>This method supports resource injection if the class with the given className represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.9</id>
        <description>if the class with the given name does not implement any of the above interfaces</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.10</id>
        <description>or if it implements ServletContextListener and this ServletContext was not passed to ServletContainerInitializer.onStartup(java.util.Set>, javax.servlet.ServletContext)</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.11</id>
        <description>if this ServletContext has already been initialized</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:671.12</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>Servlet:JAVADOC:672</id>
      <description>Adds the given listener to this ServletContext. The given listener must be an instance of one or more of the following interfaces: ServletContextAttributeListenerServletRequestListenerServletRequestAttributeListenerjavax.servlet.http.HttpSessionListenerjavax.servlet.http.HttpSessionAttributeListener If this ServletContext was passed to ServletContainerInitializer#onStartup, then the given listener may also be an instance of ServletContextListener, in addition to the interfaces listed above. If the given listener is an instance of a listener interface whose invocation order corresponds to the declaration order (i.e., if it is an instance of ServletRequestListener, ServletContextListener, or javax.servlet.http.HttpSessionListener), then the listener will be added to the end of the ordered list of listeners of that interface.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="addListener" return-type="void">
        <parameters>
          <parameter>java.util.EventListener</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.1</id>
        <description>Adds the given listener to this ServletContext. The given listener must be an instance of one or more of the following interfaces: ServletContextAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.2</id>
        <description>Adds the given listener to this ServletContext. The given listener must be an instance of one or more of the following interfaces: ServletRequestListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.3</id>
        <description>Adds the given listener to this ServletContext. The given listener must be an instance of one or more of the following interfaces: ServletRequestAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.4</id>
        <description>Adds the given listener to this ServletContext. The given listener must be an instance of one or more of the following interfaces: javax.servlet.http.HttpSessionListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.5</id>
        <description>Adds the given listener to this ServletContext. The given listener must be an instance of one or more of the following interfaces: javax.servlet.http.HttpSessionAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.6</id>
        <description>Adds the given listener to this ServletContext. ... If this ServletContext was passed to ServletContainerInitializer#onStartup, then the given listener may also be an instance of ServletContextListener, in addition to the interfaces listed above. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.7</id>
        <description>If the given listener is an instance of a listener interface whose invocation order corresponds to the declaration order (i.e., if it is an instance of ServletRequestListener, ServletContextListener, or javax.servlet.http.HttpSessionListener), then the listener will be added to the end of the ordered list of listeners of that interface.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.8</id>
        <description>This method supports resource injection if the given listenerClass represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.9</id>
        <description>if the given listenerClass  does not implement any of the above interfaces</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.10</id>
        <description>or if it implements ServletContextListener and this ServletContext was not passed to ServletContainerInitializer.onStartup(java.util.Set>, javax.servlet.ServletContext)</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.11</id>
        <description>if this ServletContext has already been initialized</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:672.12</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.util.EventListener</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
        <id>Servlet:JAVADOC:673</id>
      <description>Adds a listener of the given class type to this ServletContext. The given listenerClass must implement one or more of the following interfaces: ServletContextAttributeListenerServletRequestListenerServletRequestAttributeListenerjavax.servlet.http.HttpSessionListenerjavax.servlet.http.HttpSessionAttributeListener If this ServletContext was passed to ServletContainerInitializer#onStartup, then the given listenerClass may also implement ServletContextListener, in addition to the interfaces listed above. If the given listenerClass&lt;/tt implements a listener interface whose invocation order corresponds to the declaration order (i.e., if it implements ServletRequestListener, ServletContextListener, or javax.servlet.http.HttpSessionListener), then the new listener will be added to the end of the ordered list of listeners of that interface.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="addListener" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.1</id>
        <description>Adds a listener of the given class type to this ServletContext. The given listenerClass must implement one or more of the following interfaces: ServletContextAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.2</id>
        <description>Adds a listener of the given class type to this ServletContext. The given listenerClass must implement one or more of the following interfaces: ServletRequestListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.3</id>
        <description>Adds a listener of the given class type to this ServletContext. The given listenerClass must implement one or more of the following interfaces: ServletRequestAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.4</id>
        <description>Adds a listener of the given class type to this ServletContext. The given listenerClass must implement one or more of the following interfaces: javax.servlet.http.HttpSessionListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.5</id>
        <description>Adds a listener of the given class type to this ServletContext. The given listenerClass must implement one or more of the following interfaces: javax.servlet.http.HttpSessionAttributeListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.6</id>
        <description>Adds a listener of the given class type to this ServletContext. ... If this ServletContext was passed to ServletContainerInitializer#onStartup, then the given listenerClass may also be implement ServletContextListener, in addition to the interfaces listed above. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.7</id>
        <description>If the given listenerClass&lt;&gt; implements a listener interface whose invocation order corresponds to the declaration order (i.e., if it is an instance of ServletRequestListener, ServletContextListener, or javax.servlet.http.HttpSessionListener), then the listener will be added to the end of the ordered list of listeners of that interface.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.8</id>
        <description>This method supports resource injection if the given listenerClass represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.9</id>
        <description>if the given listenerClass  does not implement any of the above interfaces</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.10</id>
        <description>or if it implements ServletContextListener and this ServletContext was not passed to ServletContainerInitializer.onStartup(java.util.Set>, javax.servlet.ServletContext)</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.11</id>
        <description>if this ServletContext has already been initialized</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:673.12</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addListener" return-type="void">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:674</id>
      <description>Adds the servlet with the given name and class name to this servlet context. The registered servlet may be further configured via the returned ServletRegistration object. The specified className will be loaded using the classloader associated with the application represented by this ServletContext.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
        <id>Servlet:JAVADOC:674.1</id>
        <description>If this ServletContext already contains a preliminary ServletRegistration for a servlet with the given servletName, it will be completed (by assigning the given className to it) and returned. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:674.2</id>
        <description>This method introspects the class with the given className  for the ServletSecurity, MultipartConfig, javax.annotation.security.RunAs, and javax.annotation.security.DeclareRoles annotations. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:674.3</id>
        <description>In addition, this method supports resource injection if the class with the given className represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:674.4</id>
        <description>Returns: a ServletRegistration object that may be used to further configure the registered servlet, </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:674.5</id>
        <description>Returns:  null if this ServletContext already contains a complete ServletRegistration for a servlet with the given servletName </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:674.6</id>
        <description>if this ServletContext has already been initialized </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>javax.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:674.7</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>javax.servlet.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:675</id>
      <description>Registers the given servlet instance with this ServletContext under the given servletName. The registered servlet may be further configured via the returned ServletRegistration object.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.servlet.Servlet</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
        <id>Servlet:JAVADOC:675.1</id>
        <description>If this ServletContext already contains a preliminary ServletRegistration for a servlet with the given servletName, it will be completed (by assigning the given className to it) and returned. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:675.2</id>
        <description>This method introspects the class with the given className  for the ServletSecurity, MultipartConfig, javax.annotation.security.RunAs, and javax.annotation.security.DeclareRoles annotations. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:675.3</id>
        <description>In addition, this method supports resource injection if the class with the given className represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:675.4</id>
        <description>Returns: a ServletRegistration object that may be used to further configure the registered servlet, </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:675.5</id>
        <description>Returns:  null if this ServletContext already contains a complete ServletRegistration for a servlet with the given servletName </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:675.6</id>
        <description>Returns:  null or if the same servlet instance has already been registered with this or another ServletContext in the same container </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:675.7</id>
        <description>if this ServletContext has already been initialized </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
            <throw>javax.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:949</id>
        <description>if servletName is null or an empty String</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
            <throw>javax.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:675.8</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
            <throw>javax.servlet.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:675.9</id>
        <description>if the given servlet instance implements SingleThreadModel, , or servletName is null or an empty String</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>javax.servlet.Servlet</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:676</id>
        <description>Adds the servlet with the given name and class type to this servlet context. The registered servlet may be further configured via the returned ServletRegistration object.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="false">
        <id>Servlet:JAVADOC:676.1</id>
        <description>If this ServletContext already contains a preliminary ServletRegistration for a servlet with the given servletName, it will be completed (by assigning the given className to it) and returned. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:676.2</id>
        <description>This method introspects the class with the given className  for the ServletSecurity, MultipartConfig, javax.annotation.security.RunAs, and javax.annotation.security.DeclareRoles annotations. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:676.3</id>
        <description>In addition, this method supports resource injection if the class with the given className represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:676.4</id>
        <description>Returns: a ServletRegistration object that may be used to further configure the registered servlet, </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:676.5</id>
        <description>Returns:  null if this ServletContext already contains a complete ServletRegistration for a servlet with the given servletName </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:676.6</id>
        <description>if this ServletContext has already been initialized </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>javax.lang.IllegalStateException</throw>
        </method>
    </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:950</id>
            <description>if servletName is null or an empty String</description>
            <package>javax.servlet</package>
            <class-interface>ServletContext</class-interface>
            <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
                <parameters>
                    <parameter>java.lang.String</parameter>
                    <parameter>java.lang.Class</parameter>
                </parameters>
                <throw>javax.lang.IllegalArgumentException</throw>
            </method>
        </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:676.7</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="addServlet" return-type="javax.servlet.ServletRegistration.ServletRegistration.Dynamic">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>javax.servlet.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:677</id>
      <description>Instantiates the given Filter class and performs any required resource injection into the new Filter instance before returning it. The returned Filter instance may be further customized before it is registered with this ServletContext via a call to #addFilter(String,Filter).</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="createFilter" return-type="javax.servlet.Filter">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:677.1</id>
        <description>The given Filter class must define a zero argument constructor, which is used to instantiate it. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createFilter" return-type="javax.servlet.Filter">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:677.2</id>
        <description>This method supports resource injection if the given clazz represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createFilter" return-type="javax.servlet.Filter">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:677.3</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createFilter" return-type="javax.servlet.Filter">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:678</id>
      <description>if an error occurs during the instantiation of, or resource injection into the new Filter</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="createFilter" return-type="javax.servlet.Filter">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="deprecated" testable="true">
      <id>Servlet:JAVADOC:679</id>
      <description>Instantiates the given EventListener class and performs any required resource injection into the new EventListener instance before returning it. The specified EventListener class must implement at least one of the ServletContextListener, ServletContextAttributeListener, ServletRequestListener, ServletRequestAttributeListener, javax.servlet.http.HttpSessionListener, or javax.servlet.http.HttpSessionAttributeListener interfaces. The returned EventListener instance may be further customized before it is registered with this ServletContext via a call to #addListener(EventListener).</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="createListener" return-type="java.util.EventListener">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:679.1</id>
        <description>The given EventListener class must define a zero argument constructor, which is used to instantiate it. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createListener" return-type="java.util.EventListener">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:679.2</id>
        <description>This method supports resource injection if the given clazz represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createListener" return-type="java.util.EventListener">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:679.3</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createListener" return-type="java.util.EventListener">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:679.4</id>
        <description>if the specified EventListener class does not implement any of the ServletContextListener, ServletContextAttributeListener, ServletRequestListener, ServletRequestAttributeListener, HttpSessionListener, or HttpSessionAttributeListener  interfaces.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createListener" return-type="java.util.EventListener">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:680</id>
      <description>if the given class fails to be instantiated</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="createListener" return-type="java.util.EventListener">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:681</id>
      <description>Instantiates the given Servlet class. The returned Servlet instance may be further customized before it is registered with this ServletContext via a call to #addServlet(String,Servlet). The given Servlet class must define a zero argument constructor, which is used to instantiate it.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="createServlet" return-type="javax.servlet.Servlet">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:681.1</id>
        <description>This method introspects the given clazz for the following annotations: ServletSecurity, MultipartConfig, javax.annotation.security.RunAs, and javax.annotation.security.DeclareRoles. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createServlet" return-type="javax.servlet.Servlet">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:681.2</id>
        <description>In addition, this method supports resource injection if the given clazz represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createServlet" return-type="javax.servlet.Servlet">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:681.3</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="createServlet" return-type="javax.servlet.Servlet">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:682</id>
      <description>if the given class fails to be instantiated</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="createServlet" return-type="javax.servlet.Servlet">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:683</id>
      <description>Gets the class loader of the web application represented by this ServletContext.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getClassLoader" return-type="java.lang.ClassLoader" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:683.1</id>
        <description>If a security manager exists, and the caller's class loader is not the same as, or an ancestor of the requested class loader, then the security manager's checkPermission method is called with a RuntimePermission("getClassLoader") permission to check whether access to the requested class loader should be granted.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getClassLoader" return-type="java.lang.ClassLoader" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:683.2</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getClassLoader" return-type="java.lang.ClassLoader">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:683.3</id>
        <description>if a security manager denies access to the requested class loader</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getClassLoader" return-type="java.lang.ClassLoader">
            <throw>java.lang.SecurityException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:684</id>
      <description>Gets the session tracking modes that are supported by default for this ServletContext.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getDefaultSessionTrackingModes" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:684.1</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getDefaultSessionTrackingModes" return-type="java.util.Set">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:685</id>
      <description>Gets the major version of the Servlet specification that the application represented by this ServletContext is based on. The value returned may be different from #getMajorVersion, which returns the major version of the Servlet specification supported by the Servlet container.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getEffectiveMajorVersion" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:685.1</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getEffectiveMajorVersion" return-type="int">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:686</id>
      <description>Gets the minor version of the Servlet specification that the application represented by this ServletContext is based on. The value returned may be different from #getMinorVersion, which returns the minor version of the Servlet specification supported by the Servlet container.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getEffectiveMinorVersion" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:686.1</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getEffectiveMinorVersion" return-type="int">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:687</id>
      <description>Gets the session tracking modes that are in effect for this ServletContext. The session tracking modes in effect are those provided to #setSessionTrackingModes setSessionTrackingModes. By default, the session tracking modes returned by #getDefaultSessionTrackingModes getDefaultSessionTrackingModes are in effect.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getEffectiveSessionTrackingModes" return-type="java.util.Set" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:687.1</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getEffectiveSessionTrackingModes" return-type="java.util.Set">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:688</id>
      <description>Gets the FilterRegistration corresponding to the filter with the given filterName.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getFilterRegistration" return-type="javax.servlet.FilterRegistration">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:688.1</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getFilterRegistration" return-type="javax.servlet.FilterRegistration">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:689</id>
      <description>Gets a (possibly empty) Map of the FilterRegistration objects (keyed by filter name) corresponding to all filters registered with this ServletContext. The returned Map includes the FilterRegistration objects corresponding to all declared and annotated filters, as well as the FilterRegistration objects corresponding to all filters that have been added via one of the addFilter methods.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getFilterRegistrations" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:689.1</id>
        <description>Any changes to the returned Map must not affect this ServletContext.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getFilterRegistrations" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:689.2</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getFilterRegistrations" return-type="java.util.Map">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:690</id>
      <description>Gets the related configuration that was aggregated from the web.xml and web-fragment.xml descriptor files of the web application represented by this ServletContext.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getJspConfigDescriptor" return-type="javax.servlet.descriptor.JspConfigDescriptor" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:690.1</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getJspConfigDescriptor" return-type="javax.servlet.descriptor.JspConfigDescriptor">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:691</id>
      <description>Gets the ServletRegistration corresponding to the servlet with the given servletName.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getServletRegistration" return-type="javax.servlet.ServletRegistration">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:691.1</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getServletRegistration" return-type="javax.servlet.ServletRegistration">
            <parameters>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:692</id>
      <description>Gets a (possibly empty) Map of the ServletRegistration objects (keyed by servlet name) corresponding to all servlets registered with this ServletContext. The returned Map includes the ServletRegistration objects corresponding to all declared and annotated servlets, as well as the ServletRegistration objects corresponding to all servlets that have been added via one of the addServlet methods.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getServletRegistrations" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:692.1</id>
        <description>Any changes to the returned Map must not affect this ServletContext.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getServletRegistrations" return-type="java.util.Map" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:692.2</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getServletRegistrations" return-type="java.util.Map">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:693</id>
      <description>Gets the SessionCookieConfig object through which various properties of the session tracking cookies created on behalf of this ServletContext may be configured.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="getSessionCookieConfig" return-type="javax.servlet.SessionCookieConfig" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:693.1</id>
        <description>Repeated invocations of this method will return the same SessionCookieConfig instance.</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getSessionCookieConfig" return-type="javax.servlet.SessionCookieConfig"/>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:693.2</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="getSessionCookieConfig" return-type="javax.servlet.SessionCookieConfig">
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:694</id>
      <description>Sets the context initialization parameter with the given name and value on this ServletContext.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="setInitParameter" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:694.1</id>
        <description>if this ServletContext has already been initialized </description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="setInitParameter" return-type="boolean">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:694.2</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="setInitParameter" return-type="boolean">
            <parameters>
                <parameter>java.lang.String</parameter>
                <parameter>java.lang.String</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:695</id>
      <description>Sets the session tracking modes that are to become effective for this ServletContext. The given sessionTrackingModes replaces any session tracking modes set by a previous invocation of this method on this ServletContext.</description>
      <package>javax.servlet</package>
      <class-interface>ServletContext</class-interface>
      <method name="setSessionTrackingModes" return-type="void">
        <parameters>
          <parameter>java.util.Set</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:695.1</id>
        <description>if this ServletContext was passed to the ServletContextListener.contextInitialized(javax.servlet.ServletContextEvent) method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with WebListener</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="setSessionTrackingModes" return-type="void">
            <parameters>
                <parameter>java.util.Set</parameter>
            </parameters>
            <throw>java.lang.UnsupportedOperationException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:695.2</id>
        <description>if this ServletContext has already been initialized</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="setSessionTrackingModes" return-type="void">
            <parameters>
                <parameter>java.util.Set</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:695.3</id>
        <description>if sessionTrackingModes  specifies a combination of SessionTrackingMode.SSL with a session tracking mode other than SessionTrackingMode.SSL, or if sessionTrackingModes specifies a session tracking mode that is not supported by the servlet container</description>
        <package>javax.servlet</package>
        <class-interface>ServletContext</class-interface>
        <method name="setSessionTrackingModes" return-type="void">
            <parameters>
                <parameter>java.util.Set</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:696</id>
      <description>Adds a servlet mapping with the given URL patterns for the Servlet represented by this ServletRegistration..</description>
      <package>javax.servlet</package>
      <class-interface>ServletRegistration</class-interface>
      <method name="addMapping" return-type="java.util.Set">
        <parameters>
          <parameter>java.lang.String[]</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:696.1</id>
        <description>If any of the specified URL patterns are already mapped to a different Servlet, no updates will be performed.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRegistration</class-interface>
        <method name="addMapping" return-type="java.util.Set">
            <parameters>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:696.2</id>
        <description>If this method is called multiple times, each successive call adds to the effects of the former. </description>
        <package>javax.servlet</package>
        <class-interface>ServletRegistration</class-interface>
        <method name="addMapping" return-type="java.util.Set">
            <parameters>
                <parameter>java.lang.String[]</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:696.3</id>
        <description>if urlPatterns is null or empty</description>
        <package>javax.servlet</package>
        <class-interface>ServletRegistration</class-interface>
        <method name="addMapping" return-type="java.util.Set">
            <parameters>
                <parameter>java.lang.String[]</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:696.4</id>
        <description>if the ServletContext from which this ServletRegistration was obtained has already been initialized</description>
        <package>javax.servlet</package>
        <class-interface>ServletRegistration</class-interface>
        <method name="addMapping" return-type="java.util.Set">
            <parameters>
                <parameter>java.lang.String[]</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:697</id>
      <description>Gets the currently available mappings of the Servlet represented by this ServletRegistration. Any changes to the returned Collection must not affect this ServletRegistration.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRegistration</class-interface>
      <method name="getMappings" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:698</id>
      <description>Sets the loadOnStartup priority on the Servlet represented by this dynamic ServletRegistration. A loadOnStartup value of greater than or equal to zero indicates to the container the initialization priority of the Servlet. In this case, the container must instantiate and initialize the Servlet during the initialization phase of the ServletContext, that is, after it has invoked all of the ServletContextListener objects configured for the ServletContext at their ServletContextListener#contextInitialized method.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRegistration.Dynamic</class-interface>
      <method name="setLoadOnStartup" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:698.1</id>
        <description>If loadOnStartup is a negative integer, the container is free to instantiate and initialize the Servlet lazily.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRegistration.Dynamic</class-interface>
        <method name="setLoadOnStartup" return-type="void">
            <parameters>
                <parameter>int</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:698.2</id>
        <description>The default value for loadOnStartup is -1.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRegistration.Dynamic</class-interface>
        <method name="setLoadOnStartup" return-type="void">
            <parameters>
                <parameter>int</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:698.3</id>
        <description>A call to this method overrides any previous setting.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRegistration.Dynamic</class-interface>
        <method name="setLoadOnStartup" return-type="void">
            <parameters>
                <parameter>int</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:698.4</id>
        <description>if the ServletContext from which this ServletRegistration was obtained has already been initialized</description>
        <package>javax.servlet</package>
        <class-interface>ServletRegistration.Dynamic</class-interface>
        <method name="setLoadOnStartup" return-type="void">
            <parameters>
                <parameter>int</parameter>
            </parameters>
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:701</id>
      <description>Gets the AsyncContext that was created or reinitialized by the most recent invocation of #startAsync or #startAsync(ServletRequest,ServletResponse) on this request.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="getAsyncContext" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:701.1</id>
        <description>if this request has not been put into asynchronous mode, i.e., if neither startAsync() nor startAsync(ServletRequest,ServletResponse) has been called</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="getAsyncContext" return-type="javax.servlet.AsyncContext">
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:703</id>
      <description>Gets the dispatcher type of this request. The dispatcher type of a request is used by the container to select the filters that need to be applied to the request: Only filters with matching dispatcher type and url patterns will be applied. Allowing a filter that has been configured for multiple dispatcher types to query a request for its dispatcher type allows the filter to process the request differently depending on its dispatcher type. The initial dispatcher type of a request is defined as DispatcherType.REQUEST. The dispatcher type of a request dispatched via RequestDispatcher#forward(ServletRequest, ServletResponse) or RequestDispatcher#include(ServletRequest, ServletResponse) is given as DispatcherType.FORWARD or DispatcherType.INCLUDE, respectively, while the dispatcher type of an asynchronous request dispatched via one of the AsyncContext#dispatch methods is given as DispatcherType.ASYNC. Finally, the dispatcher type of a request dispatched to an error page by the container's error handling mechanism is given as DispatcherType.ERROR.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="getDispatcherType" return-type="javax.servlet.DispatcherType" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:704</id>
      <description>Returns the Internet Protocol (IP) address of the interface on which the request was received.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="getLocalAddr" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:705</id>
      <description>Returns the Internet Protocol (IP) source port of the client or last proxy that sent the request.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="getRemotePort" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:706</id>
      <description>Gets the servlet context to which this ServletRequest was last dispatched.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="getServletContext" return-type="javax.servlet.ServletContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:707</id>
      <description>Checks if this request has been put into asynchronous mode. A ServletRequest is put into asynchronous mode by calling #startAsync or #startAsync(ServletRequest,ServletResponse) on it. This method returns false if this request was put into asynchronous mode, but has since been dispatched using one of the AsyncContext#dispatch methods or released from asynchronous mode via a call to AsyncContext#complete.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="isAsyncStarted" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:708</id>
      <description>Checks if this request supports asynchronous operation. Asynchronous operation is disabled for this request if this request is within the scope of a filter or servlet that has not been annotated or flagged in the deployment descriptor as being able to support asynchronous handling.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="isAsyncSupported" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:710</id>
      <description>Puts this request into asynchronous mode, and initializes its AsyncContext with the original (unwrapped) ServletRequest and ServletResponse objects and the timeout as returned by #getAsyncTimeout.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="startAsync" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:710.1</id>
        <description>This will delay committal of the associated response until AsyncContext#complete is called on the returned AsyncContext, or the AsyncContext times out.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:710.2</id>
        <description>Calling AsyncContext#hasOriginalRequestAndResponse() on the returned AsyncContext will return true.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:710.3</id>
        <description>Any filters invoked in the outbound direction after this request was put into asynchronous mode may use this as an indication that any request and/or response wrappers that they added during their inbound invocation need not stay around for the duration of the asynchronous operation, and therefore any of their associated resources may be released.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:710.4</id>
        <description>This method clears the list of AsyncListener instances (if any) that were registered with the AsyncContext returned by the previous call to one of the startAsync methods, after calling each AsyncListener at its onStartAsync  method. </description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:710.5</id>
        <description>Subsequent invocations of this method, or its overloaded variant, will return the same AsyncContext instance, reinitialized as appropriate.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:710.6</id>
        <description>The timer for async timeouts will not start until the container-initiated dispatch that called startAsync has returned to the container.
            If a timeout occurs and none of the AsyncListener#onTimeout(AsyncEvent) handlers call AsyncContext#complete or one of the AsyncContext#dispatch methods,
            the container must call AsyncContext#complete.
        </description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:711</id>
      <description>if this request is within the scope of a filter or servlet that does not support asynchronous operation, that is, if #isAsyncSupported returns false, or if this method is called again outside the scope of a dispatch resulting from an AsyncContext#dispatch, or if the response has already been closed</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="startAsync" return-type="javax.servlet.AsyncContext">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:712</id>
      <description>Puts this request into asynchronous mode, and initializes its AsyncContext with the given request and response objects.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="startAsync" return-type="javax.servlet.AsyncContext">
        <parameters>
          <parameter>javax.servlet.ServletRequest</parameter>
          <parameter>javax.servlet.ServletResponse</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:712.1</id>
        <description>The ServletRequest and ServletResponse arguments must be the same instances, or instances of ServletRequestWrapper and ServletResponseWrapper that wrap them, that were passed to the service method of the Servlet or the doFilter method of the Filter, respectively, in whose scope this method is being called.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext">
            <parameters>
                <parameter>javax.servlet.ServletRequest</parameter>
                <parameter>javax.servlet.ServletResponse</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:712.2</id>
        <description>Calling this method will cause committal of the associated response to be delayed until AsyncContext.complete() is called on the returned AsyncContext, or the asynchronous operation has timed out.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext">
            <parameters>
                <parameter>javax.servlet.ServletRequest</parameter>
                <parameter>javax.servlet.ServletResponse</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:712.3</id>
        <description>Calling AsyncContext.hasOriginalRequestAndResponse() on the returned AsyncContext will return false, unless the passed in ServletRequest and ServletResponse arguments are the original ones or do not carry any application-provided wrappers.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext">
            <parameters>
                <parameter>javax.servlet.ServletRequest</parameter>
                <parameter>javax.servlet.ServletResponse</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:712.4</id>
        <description>Any filters invoked in the outbound direction after this request was put into asynchronous mode may use this as an indication that some of the request and/or response wrappers that they added during their inbound invocation may need to stay in place for the duration of the asynchronous operation, and their associated resources may not be released. A ServletRequestWrapper applied during the inbound invocation of a filter may be released by the outbound invocation of the filter only if the given servletRequest, which is used to initialize the AsyncContext and will be returned by a call to AsyncContext.getRequest(), does not contain said ServletRequestWrapper. The same holds true for ServletResponseWrapper instances.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext">
            <parameters>
                <parameter>javax.servlet.ServletRequest</parameter>
                <parameter>javax.servlet.ServletResponse</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:712.5</id>
        <description>This method clears the list of AsyncListener instances (if any) that were registered with the AsyncContext returned by the previous call to one of the startAsync methods, after calling each AsyncListener at its onStartAsync method.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext">
            <parameters>
                <parameter>javax.servlet.ServletRequest</parameter>
                <parameter>javax.servlet.ServletResponse</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:712.6</id>
        <description>Subsequent invocations of this method, or its zero-argument variant, will return the same AsyncContext instance, reinitialized as appropriate.</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext">
            <parameters>
                <parameter>javax.servlet.ServletRequest</parameter>
                <parameter>javax.servlet.ServletResponse</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:712.7</id>
        <description>If a call to this method is followed by a call to its zero-argument variant, the specified (and possibly wrapped) request and response objects will remain locked in on the returned AsyncContext. </description>
        <package>javax.servlet</package>
        <class-interface>ServletRequest</class-interface>
        <method name="startAsync" return-type="javax.servlet.AsyncContext">
            <parameters>
                <parameter>javax.servlet.ServletRequest</parameter>
                <parameter>javax.servlet.ServletResponse</parameter>
            </parameters>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:713</id>
      <description>if this request is within the scope of a filter or servlet that does not support asynchronous operation, that is, if #isAsyncSupported returns false, or if this method is called again outside the scope of a dispatch resulting from an AsyncContext#dispatch, or if the response has already been closed</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequest</class-interface>
      <method name="startAsync" return-type="javax.servlet.AsyncContext">
        <parameters>
          <parameter>javax.servlet.ServletRequest</parameter>
          <parameter>javax.servlet.ServletResponse</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:716</id>
      <description>Gets the AsyncContext that was created or reinitialized by the most recent invocation of #startAsync or #startAsync(ServletRequest,ServletResponse) on the wrapped request.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="getAsyncContext" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:716.1</id>
        <description>if this request has not been put into asynchronous mode, i.e., if neither startAsync() nor startAsync(ServletRequest,ServletResponse) has been called</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequestWrapper</class-interface>
        <method name="getAsyncContext" return-type="javax.servlet.AsyncContext">
            <throw>java.lang.IllegalStateException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:718</id>
      <description>Gets the dispatcher type of the wrapped request.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="getDispatcherType" return-type="javax.servlet.DispatcherType" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:719</id>
      <description>The default behavior of this method is to return getLocalAddr() on the wrapped request object.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="getLocalAddr" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:720</id>
      <description>The default behavior of this method is to return getRemotePort() on the wrapped request object.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="getRemotePort" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:721</id>
      <description>Gets the servlet context to which the wrapped servlet request was last dispatched.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="getServletContext" return-type="javax.servlet.ServletContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:722</id>
      <description>Checks if the wrapped request has been put into asynchronous mode.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="isAsyncStarted" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:723</id>
      <description>Checks if the wrapped request supports asynchronous operation.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="isAsyncSupported" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:724</id>
      <description>Checks (recursively) if this ServletRequestWrapper wraps the given ServletRequest instance.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="isWrapperFor" return-type="boolean">
        <parameters>
          <parameter>javax.servlet.ServletRequest</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:725</id>
      <description>Checks (recursively) if this ServletRequestWrapper wraps a ServletRequest of the given class type.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="isWrapperFor" return-type="boolean">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
        <id>Servlet:JAVADOC:725.1</id>
        <description>if the given class does not implement ServletRequest</description>
        <package>javax.servlet</package>
        <class-interface>ServletRequestWrapper</class-interface>
        <method name="isWrapperFor" return-type="boolean">
            <parameters>
                <parameter>java.lang.Class</parameter>
            </parameters>
            <throw>java.lang.IllegalArgumentException</throw>
        </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:727</id>
      <description>Puts the wrapped request into asynchronous mode, and initializes its AsyncContext with the original ServletRequest and ServletResponse objects and the timeout derived according to the rules laid out in #setAsyncTimeout.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="startAsync" return-type="javax.servlet.AsyncContext" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:728</id>
      <description>if this request is within the scope of a filter or servlet that does not support asynchronous operation, that is, if #isAsyncSupported returns false, or if this method is called again outside the scope of a dispatch resulting from an AsyncContext#dispatch, or if the response has already been closed</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="startAsync" return-type="javax.servlet.AsyncContext">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:729</id>
      <description>Puts the wrapped request into asynchronous mode, and initializes its AsyncContext with the given request and response objects and the timeout derived according to the rules laid out in #setAsyncTimeout.</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="startAsync" return-type="javax.servlet.AsyncContext">
        <parameters>
          <parameter>javax.servlet.ServletRequest</parameter>
          <parameter>javax.servlet.ServletResponse</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:730</id>
      <description>if this request is within the scope of a filter or servlet that does not support asynchronous operation, that is, if #isAsyncSupported returns false, or if this method is called again outside the scope of a dispatch resulting from an AsyncContext#dispatch, or if the response has already been closed</description>
      <package>javax.servlet</package>
      <class-interface>ServletRequestWrapper</class-interface>
      <method name="startAsync" return-type="javax.servlet.AsyncContext">
        <parameters>
          <parameter>javax.servlet.ServletRequest</parameter>
          <parameter>javax.servlet.ServletResponse</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:731</id>
      <description>Checks (recursively) if this ServletResponseWrapper wraps the given ServletResponse instance.</description>
      <package>javax.servlet</package>
      <class-interface>ServletResponseWrapper</class-interface>
      <method name="isWrapperFor" return-type="boolean">
        <parameters>
          <parameter>javax.servlet.ServletResponse</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:732</id>
      <description>Checks (recursively) if this ServletResponseWrapper wraps a ServletResponse of the given class type.</description>
      <package>javax.servlet</package>
      <class-interface>ServletResponseWrapper</class-interface>
      <method name="isWrapperFor" return-type="boolean">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:733</id>
      <description>Gets the comment that will be assigned to any session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="getComment" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:734</id>
      <description>Gets the domain name that will be assigned to any session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="getDomain" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:735</id>
      <description>Gets the lifetime (in seconds) of the session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired. By default, -1 is returned.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="getMaxAge" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:736</id>
      <description>Gets the name that will be assigned to any session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired. By default, JSESSIONID will be used as the cookie name.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:737</id>
      <description>Gets the path that will be assigned to any session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired. By default, the context path of the ServletContext from which this SessionCookieConfig was acquired will be used.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="getPath" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:738</id>
      <description>Checks if the session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired will be marked as HttpOnly.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="isHttpOnly" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:739</id>
      <description>Checks if the session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired will be marked as secure even if the request that initiated the corresponding session is using plain HTTP instead of HTTPS.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="isSecure" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:740</id>
      <description>Sets the comment that will be assigned to any session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="setComment" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:741</id>
      <description>Sets the domain name that will be assigned to any session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="setDomain" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:742</id>
      <description>Marks or unmarks the session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired as HttpOnly. A cookie is marked as HttpOnly by adding the HttpOnly attribute to it. HttpOnly cookies are not supposed to be exposed to client-side scripting code, and may therefore help mitigate certain kinds of cross-site scripting attacks.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="setHttpOnly" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:743</id>
      <description>Sets the lifetime (in seconds) for the session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="setMaxAge" return-type="void">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:744</id>
      <description>Sets the name that will be assigned to any session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired. NOTE: Changing the name of session tracking cookies may break other tiers (for example, a load balancing frontend) that assume the cookie name to be equal to the default JSESSIONID, and therefore should only be done cautiously.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="setName" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:745</id>
      <description>Sets the path that will be assigned to any session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="setPath" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:746</id>
      <description>Marks or unmarks the session tracking cookies created on behalf of the ServletContext from which this SessionCookieConfig was acquired as secure. One use case for marking a session tracking cookie as secure, even though the request that initiated the session came over HTTP, is to support a topology where the web container is front-ended by an SSL offloading load balancer. In this case, the traffic between the client and the load balancer will be over HTTPS, whereas the traffic between the load balancer and the web container will be over HTTP.</description>
      <package>javax.servlet</package>
      <class-interface>SessionCookieConfig</class-interface>
      <method name="setSecure" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:747</id>
      <description></description>
      <package>javax.servlet</package>
      <class-interface>SessionTrackingMode</class-interface>
      <method name="valueOf" return-type="javax.servlet.SessionTrackingMode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:748</id>
      <description></description>
      <package>javax.servlet</package>
      <class-interface>SessionTrackingMode</class-interface>
      <method name="values" return-type="javax.servlet.SessionTrackingMode[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:749</id>
      <description>Checks whether this cookie has been marked as HttpOnly.</description>
      <package>javax.servlet.http</package>
      <class-interface>Cookie</class-interface>
      <method name="isHttpOnly" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:750</id>
      <description>Marks or unmarks this cookie as HttpOnly. If isHttpOnly is set to true, this cookie is marked as HttpOnly, by adding the HttpOnly attribute to it. HttpOnly cookies are not supposed to be exposed to client-side scripting code, and may therefore help mitigate certain kinds of cross-site scripting attacks.</description>
      <package>javax.servlet.http</package>
      <class-interface>Cookie</class-interface>
      <method name="setHttpOnly" return-type="void">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:751</id>
      <description>Use the container login mechanism configured for the ServletContext to authenticate the user making this request. This method may modify and commit the argument HttpServletResponse.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="authenticate" return-type="boolean">
        <parameters>
          <parameter>javax.servlet.http.HttpServletResponse</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:752</id>
      <description>if an error occurs while writing the response.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="authenticate" return-type="boolean">
        <parameters>
          <parameter>javax.servlet.http.HttpServletResponse</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:753</id>
      <description>if the authentication failed and the caller is responsible for handling the error (i.e., the underlying login mechanism did NOT establish the message and HTTP status code to be returned to the user).</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="authenticate" return-type="boolean">
        <parameters>
          <parameter>javax.servlet.http.HttpServletResponse</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:754</id>
      <description>Gets the Part with the given name.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="getPart" return-type="javax.servlet.http.Part">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:755</id>
      <description>if an I/O error occurred during the retrieval of the requested Part</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="getPart" return-type="javax.servlet.http.Part">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:756</id>
      <description>if this request is not of type multipart/form-data</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="getPart" return-type="javax.servlet.http.Part">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:757</id>
      <description>Gets all the Part components of this request, provided that it is of type multipart/form-data. If this request is of type multipart/form-data, but does not contain any Part components, the returned Collection will be empty. Any changes to the returned Collection must not affect this HttpServletRequest.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="getParts" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:758</id>
      <description>if an I/O error occurred during the retrieval of the Part components of this request</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="getParts" return-type="java.util.Collection">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:759</id>
      <description>if this request is not of type multipart/form-data</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="getParts" return-type="java.util.Collection">
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:760</id>
      <description>Validate the provided username and password in the password validation realm used by the web container login mechanism configured for the ServletContext. This method returns without throwing a ServletException when the login mechanism configured for the ServletContext supports username password validation, and when, at the time of the call to login, the identity of the caller of the request had not been established (i.e, all of getUserPrincipal, getRemoteUser, and getAuthType return null), and when validation of the provided credentials is successful. Otherwise, this method throws a ServletException as described below. When this method returns without throwing an exception, it must have established non-null values as the values returned by getUserPrincipal, getRemoteUser, and getAuthType.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="login" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:761</id>
      <description>if the configured login mechanism does not support username password authentication, or if a non-null caller identity had already been established (prior to the call to login), or if validation of the provided username and password fails.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="login" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:762</id>
      <description>Establish null as the value returned when getUserPrincipal, getRemoteUser, and getAuthType is called on the request.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="logout" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:763</id>
      <description>if logout fails</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="logout" return-type="void">
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:764</id>
      <description>The default behavior of this method is to call authenticate on the wrapped request object.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="authenticate" return-type="boolean">
        <parameters>
          <parameter>javax.servlet.http.HttpServletResponse</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:765</id>
      <description></description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="authenticate" return-type="boolean">
        <parameters>
          <parameter>javax.servlet.http.HttpServletResponse</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:766</id>
      <description></description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="authenticate" return-type="boolean">
        <parameters>
          <parameter>javax.servlet.http.HttpServletResponse</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:767</id>
      <description>The default behavior of this method is to call getPart on the wrapped request object.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="getPart" return-type="javax.servlet.http.Part">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:768</id>
      <description></description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="getPart" return-type="javax.servlet.http.Part">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:769</id>
      <description></description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="getPart" return-type="javax.servlet.http.Part">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:770</id>
      <description>The default behavior of this method is to call getParts on the wrapped request object. Any changes to the returned Collection must not affect this HttpServletRequestWrapper.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="getParts" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:771</id>
      <description></description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="getParts" return-type="java.util.Collection">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:772</id>
      <description></description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="getParts" return-type="java.util.Collection">
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:773</id>
      <description>The default behavior of this method is to call login on the wrapped request object.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="login" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:774</id>
      <description></description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="login" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:775</id>
      <description>The default behavior of this method is to call login on the wrapped request object.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="logout" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:776</id>
      <description></description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="logout" return-type="void">
        <throw>javax.servlet.ServletException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:777</id>
      <description>Gets the value of the response header with the given name. If a response header with the given name exists and contains multiple values, the value that was added first will be returned. This method considers only response headers set or added via #setHeader, #addHeader, #setDateHeader, #addDateHeader, #setIntHeader, or #addIntHeader, respectively.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletResponse</class-interface>
      <method name="getHeader" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:778</id>
      <description>Gets the names of the headers of this response. This method considers only response headers set or added via #setHeader, #addHeader, #setDateHeader, #addDateHeader, #setIntHeader, or #addIntHeader, respectively. Any changes to the returned Collection must not affect this HttpServletResponse.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletResponse</class-interface>
      <method name="getHeaderNames" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:779</id>
      <description>Gets the values of the response header with the given name. This method considers only response headers set or added via #setHeader, #addHeader, #setDateHeader, #addDateHeader, #setIntHeader, or #addIntHeader, respectively. Any changes to the returned Collection must not affect this HttpServletResponse.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletResponse</class-interface>
      <method name="getHeaders" return-type="java.util.Collection">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:780</id>
      <description>Gets the current status code of this response.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletResponse</class-interface>
      <method name="getStatus" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:781</id>
      <description>The default behaviour of this method is to call HttpServletResponse#getHeader on the wrapped response object.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletResponseWrapper</class-interface>
      <method name="getHeader" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:782</id>
      <description>The default behaviour of this method is to call HttpServletResponse#getHeaderNames on the wrapped response object. Any changes to the returned Collection must not affect this HttpServletResponseWrapper.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletResponseWrapper</class-interface>
      <method name="getHeaderNames" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:783</id>
      <description>The default behaviour of this method is to call HttpServletResponse#getHeaders on the wrapped response object. Any changes to the returned Collection must not affect this HttpServletResponseWrapper.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletResponseWrapper</class-interface>
      <method name="getHeaders" return-type="java.util.Collection">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:784</id>
      <description>The default behaviour of this method is to call HttpServletResponse#getStatus on the wrapped response object.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletResponseWrapper</class-interface>
      <method name="getStatus" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:785</id>
      <description>Deletes the underlying storage for a file item, including deleting any associated temporary disk file.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="delete" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:786</id>
      <description>if an error occurs.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="delete" return-type="void">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:787</id>
      <description>Gets the content type of this part.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:788</id>
      <description>Returns the value of the specified mime header as a String. If the Part did not include a header of the specified name, this method returns null. If there are multiple headers with the same name, this method returns the first header in the part. The header name is case insensitive. You can use this method with any request header.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getHeader" return-type="java.lang.String">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:789</id>
      <description>Gets the header names of this Part. Some servlet containers do not allow servlets to access headers using this method, in which case this method returns null Any changes to the returned Collection must not affect this Part.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getHeaderNames" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:790</id>
      <description>Gets the values of the Part header with the given name. Any changes to the returned Collection must not affect this Part. Part header names are case insensitive.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getHeaders" return-type="java.util.Collection">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:791</id>
      <description>Gets the content of this part as an InputStream</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getInputStream" return-type="java.io.InputStream" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:792</id>
      <description>If an error occurs in retrieving the contet as an InputStream</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getInputStream" return-type="java.io.InputStream">
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:793</id>
      <description>Gets the name of this part</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:794</id>
      <description>Returns the size of this fille.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getSize" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:955</id>
      <description>Gets the file name specified by the client</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="getSubmittedFileName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:795</id>
      <description>A convenience method to write this uploaded item to disk. This method is not guaranteed to succeed if called more than once for the same part. This allows a particular implementation to use, for example, file renaming, where possible, rather than copying all of the underlying data, thus gaining a significant performance benefit.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="write" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:796</id>
      <description>if an error occurs.</description>
      <package>javax.servlet.http</package>
      <class-interface>Part</class-interface>
      <method name="write" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:797</id>
      <description>The classes in which a javax.servlet.ServletContainerInitializer ServletContainerInitializer has expressed interest. If an implementation of ServletContainerInitializer specifies this annotation, the Servlet container must pass the Set of application classes that extend, implement, or have been annotated with the class types listed by this annotation to the javax.servlet.ServletContainerInitializer#onStartup method of the ServletContainerInitializer (if no matching classes are found, null must be passed instead)</description>
      <package>javax.servlet.annotation</package>
      <class-interface>HandlesTypes</class-interface>
      <method name="value" return-type="java.lang.Class[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:798</id>
      <description>The size threshold after which the file will be written to disk</description>
      <package>javax.servlet.annotation</package>
      <class-interface>MultipartConfig</class-interface>
      <method name="fileSizeThreshold" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:799</id>
      <description>The directory location where files will be stored</description>
      <package>javax.servlet.annotation</package>
      <class-interface>MultipartConfig</class-interface>
      <method name="location" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:800</id>
      <description>The maximum size allowed for uploaded files. The default is -1L, which means unlimited.</description>
      <package>javax.servlet.annotation</package>
      <class-interface>MultipartConfig</class-interface>
      <method name="maxFileSize" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:801</id>
      <description>The maximum size allowed for multipart/form-data requests The default is -1L, which means unlimited.</description>
      <package>javax.servlet.annotation</package>
      <class-interface>MultipartConfig</class-interface>
      <method name="maxRequestSize" return-type="long" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:802</id>
      <description>Declares whether the filter supports asynchronous operation mode.</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="asyncSupported" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:803</id>
      <description>The description of the filter</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="description" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:804</id>
      <description>The dispatcher types to which the filter applies</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="dispatcherTypes" return-type="javax.servlet.DispatcherType[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:805</id>
      <description>The display name of the filter</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="displayName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:806</id>
      <description>The name of the filter</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="filterName" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:807</id>
      <description>The init parameters of the filter</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="initParams" return-type="javax.servlet.annotation.WebInitParam[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:808</id>
      <description>The large-icon of the filter</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="largeIcon" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:809</id>
      <description>The names of the servlets to which the filter applies.</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="servletNames" return-type="java.lang.String[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:810</id>
      <description>The small-icon of the filter</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="smallIcon" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:811</id>
      <description>The URL patterns to which the filter applies</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="urlPatterns" return-type="java.lang.String[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:812</id>
      <description>The URL patterns to which the filter applies</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebFilter</class-interface>
      <method name="value" return-type="java.lang.String[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:813</id>
      <description>Description of the init param</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebInitParam</class-interface>
      <method name="description" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:814</id>
      <description>Name of the init param</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebInitParam</class-interface>
      <method name="name" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:815</id>
      <description>Value of the init param</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebInitParam</class-interface>
      <method name="value" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:817</id>
      <description>Declares whether the servlet supports asynchronous operation mode.</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="asyncSupported" return-type="boolean" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:818</id>
      <description>The description of the servlet</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="description" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:819</id>
      <description>The init parameters of the servlet</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="initParams" return-type="javax.servlet.annotation.WebInitParam[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:820</id>
      <description>The large-icon of the servlet</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="largeIcon" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:821</id>
      <description>The load-on-startup order of the servlet</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="loadOnStartup" return-type="int" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:822</id>
      <description>The name of the servlet</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="name" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:823</id>
      <description>The small-icon of the servlet</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="smallIcon" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:824</id>
      <description>The URL patterns of the servlet</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="urlPatterns" return-type="java.lang.String[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:825</id>
      <description>The URL patterns of the servlet</description>
      <package>javax.servlet.annotation</package>
      <class-interface>WebServlet</class-interface>
      <method name="value" return-type="java.lang.String[]" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:826</id>
      <description>Gets the child elements of the element represented by this JspConfigDescriptor. Any changes to the returned Collection must not affect this JspConfigDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspConfigDescriptor</class-interface>
      <method name="getJspPropertyGroups" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:827</id>
      <description>Gets the child elements of the element represented by this JspConfigDescriptor. Any changes to the returned Collection must not affect this JspConfigDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspConfigDescriptor</class-interface>
      <method name="getTaglibs" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:828</id>
      <description>Gets the value of the buffer configuration, which specifies the default size of the response buffer for any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getBuffer" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:829</id>
      <description>Gets the value of the default-content-type configuration, which specifies the default response content type for any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getDefaultContentType" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:830</id>
      <description>Gets the value of the deferred-syntax-allowed-as-literal configuration, which specifies whether the character sequence "#{", which is normally reserved for Expression Language (EL) expressions, will cause a translation error if it appears as a String literal in any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getDeferredSyntaxAllowedAsLiteral" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:831</id>
      <description>Gets the value of the el-ignored configuration, which specifies whether Expression Language (EL) evaluation is enabled for any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getElIgnored" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:832</id>
      <description>Gets the value of the error-on-undeclared-namespace configuration, which specifies whether an error will be raised at translation time if tag with an undeclared namespace is used in any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getErrorOnUndeclaredNamespace" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:833</id>
      <description>Gets the include-coda configuration of the JSP property group represented by this JspPropertyGroupDescriptor. Any changes to the returned Collection must not affect this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getIncludeCodas" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:834</id>
      <description>Gets the include-prelude configuration of the JSP property group represented by this JspPropertyGroupDescriptor. Any changes to the returned Collection must not affect this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getIncludePreludes" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:835</id>
      <description>Gets the value of the is-xml configuration, which specifies whether any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor will be treated as JSP documents (XML syntax).</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getIsXml" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:836</id>
      <description>Gets the value of the page-encoding configuration, which specifies the default page encoding for any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getPageEncoding" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:837</id>
      <description>Gets the value of the scripting-invalid configuration, which specifies whether scripting is enabled for any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getScriptingInvalid" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:838</id>
      <description>Gets the value of the trim-directive-whitespaces configuration, which specifies whether template text containing only whitespaces must be removed from the response output of any JSP pages mapped to the JSP property group represented by this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getTrimDirectiveWhitespaces" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:839</id>
      <description>Gets the URL patterns of the JSP property group represented by this JspPropertyGroupDescriptor. Any changes to the returned Collection must not affect this JspPropertyGroupDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>JspPropertyGroupDescriptor</class-interface>
      <method name="getUrlPatterns" return-type="java.util.Collection" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:840</id>
      <description>Gets the location of the tag library represented by this TaglibDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>TaglibDescriptor</class-interface>
      <method name="getTaglibLocation" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:841</id>
      <description>Gets the unique identifier of the tag library represented by this TaglibDescriptor.</description>
      <package>javax.servlet.descriptor</package>
      <class-interface>TaglibDescriptor</class-interface>
      <method name="getTaglibURI" return-type="java.lang.String" />
    </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:842</id>
            <description>Constructs an AsyncEvent from the given AsyncContext.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncEvent</class-interface>
            <method name="AsyncEvent" return-type="AsyncEvent">
                <parameters>
                    <parameter>javax.servlet.AsyncContext</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:843</id>
            <description>Constructs an AsyncEvent from the given AsyncContext, ServletRequest, and ServletResponse.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncEvent</class-interface>
            <method name="AsyncEvent" return-type="AsyncEvent">
                <parameters>
                    <parameter>javax.servlet.AsyncContext</parameter>
                    <parameter>javax.servlet.ServletRequest</parameter>
                    <parameter>javax.servlet.ServletResponse</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:844</id>
            <description>Constructs an AsyncEvent from the given AsyncContext and Throwable.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncEvent</class-interface>
            <method name="AsyncEvent" return-type="AsyncEvent">
                <parameters>
                    <parameter>javax.servlet.AsyncContext</parameter>
                    <parameter>java.lang.Throwable</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:845</id>
            <description>Constructs an AsyncEvent from the given AsyncContext, ServletRequest, ServletResponse, and Throwable.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncEvent</class-interface>
            <method name="AsyncEvent" return-type="AsyncEvent">
                <parameters>
                    <parameter>javax.servlet.AsyncContext</parameter>
                    <parameter>javax.servlet.ServletRequest</parameter>
                    <parameter>javax.servlet.ServletResponse</parameter>
                    <parameter>java.lang.Throwable</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:846</id>
            <description>Gets the AsyncContext from this AsyncEvent.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncEvent</class-interface>
            <method name="getAsyncContext" return-type="javax.servlet.AsyncContext" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:847</id>
            <description>Gets the ServletRequest from this AsyncEvent. If the AsyncListener to which this AsyncEvent is being delivered was added using ServletRequest#addAsyncListener(AsyncListener, ServletRequest, ServletResponse), the returned ServletRequest will be the same as the one supplied to the above method. If the AsyncListener was added via ServletRequest#addAsyncListener(AsyncListener), this method must return null.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncEvent</class-interface>
            <method name="getSuppliedRequest" return-type="javax.servlet.ServletRequest" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:848</id>
            <description>Gets the ServletResponse from this AsyncEvent. If the AsyncListener to which this AsyncEvent is being delivered was added using ServletRequest#addAsyncListener(AsyncListener, ServletRequest, ServletResponse), the returned ServletResponse will be the same as the one supplied to the above method. If the AsyncListener was added via ServletRequest#addAsyncListener(AsyncListener), this method must return null.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncEvent</class-interface>
            <method name="getSuppliedResponse" return-type="javax.servlet.ServletResponse" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:849</id>
            <description>Gets the Throwable from this AsyncEvent.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncEvent</class-interface>
            <method name="getThrowable" return-type="java.lang.Throwable" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:850</id>
            <description>Notifies this AsyncListener that an asynchronous operation has failed to complete.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onError" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:850.1</id>
            <description>The AsyncContext corresponding to the asynchronous operation that failed to complete may be obtained by calling AsyncEvent#getAsyncContext getAsyncContext on the given event.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onError" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:850.2</id>
            <description>In addition, if this AsyncListener had been registered via a call to ServletRequest#addAsyncListener(AsyncListener, ServletRequest, ServletResponse), the supplied ServletRequest and ServletResponse objects may be retrieved by calling AsyncEvent#getSuppliedRequest getSuppliedRequest and AsyncEvent#getSuppliedResponse getSuppliedResponse, respectively, on the given event.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onError" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:851</id>
            <description>if an I/O related error has occurred during the processing of the given AsyncEvent</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onError" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
                <throw>java.io.IOException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:852</id>
            <description>The names of the authorized roles.
                Duplicate role names appearing in rolesAllowed are insignificant
                and may be discarded during runtime processing of the annotation.
                The String "*" has no special meaning as a role name (should it occur in rolesAllowed).
            </description>
            <package>javax.servlet.annotation</package>
            <class-interface>HttpConstraint</class-interface>
            <method name="rolesAllowed" return-type="java.lang.String[]" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:853</id>
            <description>The data protection requirements (i.e., whether or not SSL/TLS is required)
                that must be satisfied by the connections on which requests arrive.
            </description>
            <package>javax.servlet.annotation</package>
            <class-interface>HttpConstraint</class-interface>
            <method name="transportGuarantee" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.TransportGuarantee" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:854</id>
            <description>The default authorization semantic.
                This value is insignificant when rolesAllowed returns a non-empty array,
                and should not be specified when a non-empty array is specified for rolesAllowed.
            </description>
            <package>javax.servlet.annotation</package>
            <class-interface>HttpConstraint</class-interface>
            <method name="value" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.EmptyRoleSemantic" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:855</id>
            <description>The default authorization semantic. This value is insignificant when rolesAllowed returns a non-empty array, and should not be specified when a non-empty array is specified for rolesAllowed.</description>
            <package>javax.servlet.annotation</package>
            <class-interface>HttpMethodConstraint</class-interface>
            <method name="emptyRoleSemantic" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.EmptyRoleSemantic" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:856</id>
            <description>The names of the authorized roles. Duplicate role names appearing in rolesAllowed are insignificant and may be discarded during runtime processing of the annotation. The String "*" has no special meaning as a role name (should it occur in rolesAllowed).</description>
            <package>javax.servlet.annotation</package>
            <class-interface>HttpMethodConstraint</class-interface>
            <method name="rolesAllowed" return-type="java.lang.String[]" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:857</id>
            <description>The data protection requirements (i.e., whether or not SSL/TLS is required) that must be satisfied by the connections on which requests arrive.</description>
            <package>javax.servlet.annotation</package>
            <class-interface>HttpMethodConstraint</class-interface>
            <method name="transportGuarantee" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.TransportGuarantee" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:858</id>
            <description>Http protocol method name</description>
            <package>javax.servlet.annotation</package>
            <class-interface>HttpMethodConstraint</class-interface>
            <method name="value" return-type="java.lang.String" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:859</id>
            <description>Get the HTTP method specific constraints. Each HttpMethodConstraint names an HTTP protocol method and defines the protection to be applied to it.</description>
            <package>javax.servlet.annotation</package>
            <class-interface>ServletSecurity</class-interface>
            <method name="httpMethodConstraints" return-type="javax.servlet.annotation.HttpMethodConstraint[]" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:860</id>
            <description>Get the HttpConstraint that defines the protection that is to be applied to all HTTP methods that are NOT represented in the array returned by httpMethodConstraints.</description>
            <package>javax.servlet.annotation</package>
            <class-interface>ServletSecurity</class-interface>
            <method name="value" return-type="javax.servlet.annotation.HttpConstraint" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:861</id>
            <description />
            <package>javax.servlet.annotation</package>
            <class-interface>ServletSecurity.EmptyRoleSemantic</class-interface>
            <method name="valueOf" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.EmptyRoleSemantic">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:862</id>
            <description />
            <package>javax.servlet.annotation</package>
            <class-interface>ServletSecurity.EmptyRoleSemantic</class-interface>
            <method name="values" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.EmptyRoleSemantic[]" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:863</id>
            <description />
            <package>javax.servlet.annotation</package>
            <class-interface>ServletSecurity.TransportGuarantee</class-interface>
            <method name="valueOf" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.TransportGuarantee">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:864</id>
            <description>Returns an array containing the constants of this enum type, in the order they are declared.
                This method may be used to iterate over the constants as follows:
                for (ServletSecurity.TransportGuarantee c : ServletSecurity.TransportGuarantee.values())
                System.out.println(c);
            </description>
            <package>javax.servlet.annotation</package>
            <class-interface>ServletSecurity.TransportGuarantee</class-interface>
            <method name="values" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.TransportGuarantee[]" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:865</id>
            <description>Description of the listener</description>
            <package>javax.servlet.annotation</package>
            <class-interface>WebListener</class-interface>
            <method name="value" return-type="java.lang.String" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:866</id>
            <description>Registers the given AsyncListener with the most recent asynchronous cycle that was started by a call to one of the ServletRequest#startAsync methods. The given AsyncListener will receive an AsyncEvent when the asynchronous cycle completes successfully, times out, or results in an error. AsyncListener instances will be notified in the order in which they were added.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:866.1</id>
            <description>The given AsyncListener will receive an AsyncEvent when the asynchronous cycle completes successfully, times out, or results in an error. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:866.2</id>
            <description>AsyncListener instances will be notified in the order in which they were added. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:948</id>
            <description>If ServletRequest#startAsync(ServletRequest, ServletResponse) or ServletRequest#startAsync is called,
                the exact same request and response objects are available from the AsyncEvent when the AsyncListener is notified.
            </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:866.3</id>
            <description>if this method is called after the container-initiated dispatch, during which one of the ServletRequest.startAsync() methods was called, has returned to the container</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:867</id>
            <description>Registers the given AsyncListener with the most recent asynchronous cycle that was started by a call to one of the ServletRequest#startAsync methods. The given AsyncListener will receive an AsyncEvent when the asynchronous cycle completes successfully, times out, or results in an error. AsyncListener instances will be notified in the order in which they were added. The given ServletRequest and ServletResponse objects will be made available to the given AsyncListener via the AsyncEvent#getSuppliedRequest getSuppliedRequest and AsyncEvent#getSuppliedResponse getSuppliedResponse methods, respectively, of the AsyncEvent delivered to it. These objects should not be read from or written to, respectively, at the time the AsyncEvent is delivered, because additional wrapping may have occurred since the given AsyncListener was registered, but may be used in order to release any resources associated with them.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                    <parameter>javax.servlet.ServletRequest</parameter>
                    <parameter>javax.servlet.ServletResponse</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:867.1</id>
            <description>The given AsyncListener will receive an AsyncEvent when the asynchronous cycle completes successfully, times out, or results in an error.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                    <parameter>javax.servlet.ServletRequest</parameter>
                    <parameter>javax.servlet.ServletResponse</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:867.2</id>
            <description>AsyncListener instances will be notified in the order in which they were added. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                    <parameter>javax.servlet.ServletRequest</parameter>
                    <parameter>javax.servlet.ServletResponse</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:867.3</id>
            <description>The given ServletRequest and ServletResponse objects will be made available to the given AsyncListener via the getSuppliedRequest and getSuppliedResponse methods, respectively, of the AsyncEvent delivered to it. These objects should not be read from or written to, respectively, at the time the AsyncEvent is delivered, because additional wrapping may have occurred since the given AsyncListener was registered, but may be used in order to release any resources associated with them. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                    <parameter>javax.servlet.ServletRequest</parameter>
                    <parameter>javax.servlet.ServletResponse</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:867.4</id>
            <description>if this method is called after the container-initiated dispatch, during which one of the ServletRequest.startAsync() methods was called, has returned to the container</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="addListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncListener</parameter>
                    <parameter>javax.servlet.ServletRequest</parameter>
                    <parameter>javax.servlet.ServletResponse</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:868</id>
            <description>Gets the timeout (in milliseconds) for this AsyncContext. This method returns the container's default timeout for asynchronous operations, or the timeout value passed to the most recent invocation of #setTimeout. A timeout value of zero or less indicates no timeout.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="getTimeout" return-type="long" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:868.1</id>
            <description>A timeout value of zero or less indicates no timeout.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="getTimeout" return-type="long" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:869</id>
            <description>Sets the timeout (in milliseconds) for this AsyncContext.
                The timeout applies to this AsyncContext once the container-initiated dispatch
                during which one of the ServletRequest#startAsync methods was called has returned to the container.
                The timeout will expire if neither the #complete method nor any of the dispatch methods are called.
                A timeout value of zero or less indicates no timeout.
                If #setTimeout is not called, then the container's default timeout,
                which is available via a call to #getTimeout, will apply.
            </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="setTimeout" return-type="void">
                <parameters>
                    <parameter>long</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:869.1</id>
            <description>The timeout applies to this AsyncContext once the container-initiated dispatch during which one of the ServletRequest.startAsync() methods was called has returned to the container. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="setTimeout" return-type="void">
                <parameters>
                    <parameter>long</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:869.2</id>
            <description>The timeout will expire if neither the complete() method nor any of the dispatch methods are called.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="setTimeout" return-type="void">
                <parameters>
                    <parameter>long</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:869.3</id>
            <description> A timeout value of zero or less indicates no timeout. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="setTimeout" return-type="void">
                <parameters>
                    <parameter>long</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:869.4</id>
            <description>If setTimeout(long) is not called, then the container's default timeout, which is available via a call to getTimeout(), will apply.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="setTimeout" return-type="void">
                <parameters>
                    <parameter>long</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:869.5</id>
            <description>if this method is called after the container-initiated dispatch, during which one of the ServletRequest.startAsync() methods was called, has returned to the container.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="setTimeout" return-type="void">
                <parameters>
                    <parameter>long</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:870</id>
            <description>Notifies this AsyncListener that a new asynchronous cycle is being initiated via a call to one of the ServletRequest#startAsync methods.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onStartAsync" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:870.1</id>
            <description>The AsyncContext corresponding to the asynchronous operation that is being reinitialized may be obtained by calling AsyncEvent#getAsyncContext getAsyncContext on the given event.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onStartAsync" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:870.2</id>
            <description>In addition, if this AsyncListener had been registered via a call to AsyncContext#addListener(AsyncListener, ServletRequest, ServletResponse), the supplied ServletRequest and ServletResponse objects may be retrieved by calling AsyncEvent#getSuppliedRequest getSuppliedRequest and AsyncEvent#getSuppliedResponse getSuppliedResponse, respectively, on the given event.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onStartAsync" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:870.3</id>
            <description>This AsyncListener will not receive any events related to the new asynchronous cycle unless it registers itself (via a call to AsyncContext#addListener) with the AsyncContext that is delivered as part of the given AsyncEvent.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onStartAsync" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:871</id>
            <description>if an I/O related error has occurred during the processing of the given AsyncEvent</description>
            <package>javax.servlet</package>
            <class-interface>AsyncListener</class-interface>
            <method name="onStartAsync" return-type="void">
                <parameters>
                    <parameter>javax.servlet.AsyncEvent</parameter>
                </parameters>
                <throw>java.io.IOException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:872</id>
            <description>Instantiates the given AsyncListener class. The returned AsyncListener instance may be further customized before it is registered with this AsyncContext via a call to one of the addListener methods. The given AsyncListener class must define a zero argument constructor, which is used to instantiate it. This method supports any annotations applicable to AsyncListener.</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="createListener" return-type="javax.servlet.AsyncListener">
                <parameters>
                    <parameter>java.lang.Class</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:872.1</id>
            <description>The returned AsyncListener instance may be further customized before it is registered with this AsyncContext via a call to one of the addListener methods. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="createListener" return-type="javax.servlet.AsyncListener">
                <parameters>
                    <parameter>java.lang.Class</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:872.2</id>
            <description>The given AsyncListener class must define a zero argument constructor, which is used to instantiate it. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="createListener" return-type="javax.servlet.AsyncListener">
                <parameters>
                    <parameter>java.lang.Class</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:872.3</id>
            <description>This method supports resource injection if the given clazz represents a Managed Bean. See the Java EE platform and JSR 299 specifications for additional details about Managed Beans and resource injection. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="createListener" return-type="javax.servlet.AsyncListener">
                <parameters>
                    <parameter>java.lang.Class</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:872.4</id>
            <description>This method supports any annotations applicable to AsyncListener. </description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="createListener" return-type="javax.servlet.AsyncListener">
                <parameters>
                    <parameter>java.lang.Class</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:872.5</id>
            <description>if the given clazz fails to be instantiated</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="createListener" return-type="javax.servlet.AsyncListener">
                <parameters>
                    <parameter>java.lang.Class</parameter>
                </parameters>
                <throw>ServletException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:873</id>
            <description>if the given clazz fails to be instantiated</description>
            <package>javax.servlet</package>
            <class-interface>AsyncContext</class-interface>
            <method name="createListener" return-type="javax.servlet.AsyncListener">
                <parameters>
                    <parameter>java.lang.Class</parameter>
                </parameters>
                <throw>javax.servlet.ServletException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:874</id>
            <description>Gets the default authorization semantic. This value is insignificant when getRolesAllowed returns a non-empty array, and should not be specified when a non-empty array is specified for getRolesAllowed.</description>
            <package>javax.servlet</package>
            <class-interface>HttpConstraintElement</class-interface>
            <method name="getEmptyRoleSemantic" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.EmptyRoleSemantic" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:875</id>
            <description>Gets the names of the authorized roles. Duplicate role names appearing in getRolesAllowed are insignificant and may be discarded. The String "*" has no special meaning as a role name (should it occur in getRolesAllowed).</description>
            <package>javax.servlet</package>
            <class-interface>HttpConstraintElement</class-interface>
            <method name="getRolesAllowed" return-type="java.lang.String[]" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:876</id>
            <description>Gets the data protection requirement (i.e., whether or not SSL/TLS is required) that must be satisfied by the transport connection.</description>
            <package>javax.servlet</package>
            <class-interface>HttpConstraintElement</class-interface>
            <method name="getTransportGuarantee" return-type="javax.servlet.annotation.ServletSecurity.ServletSecurity.TransportGuarantee" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:877</id>
            <description>Constructs a default HTTP constraint element</description>
            <package>javax.servlet</package>
            <class-interface>HttpConstraintElement</class-interface>
            <method name="HttpConstraintElement" return-type="HttpConstraintElement" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:878</id>
            <description>Convenience constructor to establish EmptyRoleSemantic.DENY</description>
            <package>javax.servlet</package>
            <class-interface>HttpConstraintElement</class-interface>
            <method name="HttpConstraintElement" return-type="HttpConstraintElement">
                <parameters>
                    <parameter>javax.servlet.annotation.ServletSecurity.ServletSecurity.EmptyRoleSemantic</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:879</id>
            <description>Constructor to establish non-empty getRolesAllowed and/or TransportGuarantee.CONFIDENTIAL.</description>
            <package>javax.servlet</package>
            <class-interface>HttpConstraintElement</class-interface>
            <method name="HttpConstraintElement" return-type="HttpConstraintElement">
                <parameters>
                    <parameter>javax.servlet.annotation.ServletSecurity.ServletSecurity.TransportGuarantee</parameter>
                    <parameter>java.lang.String[]</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:880</id>
            <description>Constructor to establish all of getEmptyRoleSemantic, getRolesAllowed, and getTransportGuarantee.</description>
            <package>javax.servlet</package>
            <class-interface>HttpConstraintElement</class-interface>
            <method name="HttpConstraintElement" return-type="HttpConstraintElement">
                <parameters>
                    <parameter>javax.servlet.annotation.ServletSecurity.ServletSecurity.EmptyRoleSemantic</parameter>
                    <parameter>javax.servlet.annotation.ServletSecurity.ServletSecurity.TransportGuarantee</parameter>
                    <parameter>java.lang.String[]</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:881</id>
            <description>Gets the HTTP method name.</description>
            <package>javax.servlet</package>
            <class-interface>HttpMethodConstraintElement</class-interface>
            <method name="getMethodName" return-type="java.lang.String" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:882</id>
            <description>Constructs an instance with default HttpConstraintElement value.</description>
            <package>javax.servlet</package>
            <class-interface>HttpMethodConstraintElement</class-interface>
            <method name="HttpMethodConstraintElement" return-type="HttpMethodConstraintElement">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:883</id>
            <description>Constructs an instance with specified HttpConstraintElement value.</description>
            <package>javax.servlet</package>
            <class-interface>HttpMethodConstraintElement</class-interface>
            <method name="HttpMethodConstraintElement" return-type="HttpMethodConstraintElement">
                <parameters>
                    <parameter>java.lang.String</parameter>
                    <parameter>javax.servlet.HttpConstraintElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:884</id>
            <description>Gets the size threshold after which files will be written to disk.</description>
            <package>javax.servlet</package>
            <class-interface>MultipartConfigElement</class-interface>
            <method name="getFileSizeThreshold" return-type="int" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:885</id>
            <description>Gets the directory location where files will be stored.</description>
            <package>javax.servlet</package>
            <class-interface>MultipartConfigElement</class-interface>
            <method name="getLocation" return-type="java.lang.String" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:886</id>
            <description>Gets the maximum size allowed for uploaded files.</description>
            <package>javax.servlet</package>
            <class-interface>MultipartConfigElement</class-interface>
            <method name="getMaxFileSize" return-type="long" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:887</id>
            <description>Gets the maximum size allowed for multipart/form-data requests.</description>
            <package>javax.servlet</package>
            <class-interface>MultipartConfigElement</class-interface>
            <method name="getMaxRequestSize" return-type="long" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:888</id>
            <description>Constructs an instance with defaults for all but location.</description>
            <package>javax.servlet</package>
            <class-interface>MultipartConfigElement</class-interface>
            <method name="MultipartConfigElement" return-type="MultipartConfigElement">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:889</id>
            <description>Constructs an instance with all values specified.</description>
            <package>javax.servlet</package>
            <class-interface>MultipartConfigElement</class-interface>
            <method name="MultipartConfigElement" return-type="MultipartConfigElement">
                <parameters>
                    <parameter>java.lang.String</parameter>
                    <parameter>long</parameter>
                    <parameter>long</parameter>
                    <parameter>int</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:890</id>
            <description>Constructs an instance from a MultipartConfig annotation value.</description>
            <package>javax.servlet</package>
            <class-interface>MultipartConfigElement</class-interface>
            <method name="MultipartConfigElement" return-type="MultipartConfigElement">
                <parameters>
                    <parameter>javax.servlet.annotation.MultipartConfig</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:891</id>
            <description>Declares role names that are tested using isUserInRole. Roles that are implicitly declared as a result of their use within the ServletRegistration.Dynamic#setServletSecurity setServletSecurity or ServletRegistration.Dynamic#setRunAsRole setRunAsRole methods of the ServletRegistration interface need not be declared.</description>
            <package>javax.servlet</package>
            <class-interface>ServletContext</class-interface>
            <method name="declareRoles" return-type="void">
                <parameters>
                    <parameter>java.lang.String[]</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:892</id>
            <description>Gets the name of the runAs role of the Servlet represented by this ServletRegistration.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration</class-interface>
            <method name="getRunAsRole" return-type="java.lang.String" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:893</id>
            <description>Sets the MultipartConfigElement to be applied to the mappings defined for this ServletRegistration.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setMultipartConfig" return-type="void">
                <parameters>
                    <parameter>javax.servlet.MultipartConfigElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:893.1</id>
            <description>If this method is called multiple times, each successive call overrides the effects of the former.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setMultipartConfig" return-type="void">
                <parameters>
                    <parameter>javax.servlet.MultipartConfigElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:893.2</id>
            <description>if multipartConfig is null</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setMultipartConfig" return-type="void">
                <parameters>
                    <parameter>javax.servlet.MultipartConfigElement</parameter>
                </parameters>
                <throw>java.lang.IllegalArgumentException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:893.3</id>
            <description>if the ServletContext from which this ServletRegistration was obtained has already been initialized</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setMultipartConfig" return-type="void">
                <parameters>
                    <parameter>javax.servlet.MultipartConfigElement</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:894</id>
            <description>Sets the name of the runAs role for the ServletRegistration.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setRunAsRole" return-type="void">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:894.1</id>
            <description>if roleName is null</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setRunAsRole" return-type="void">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
                <throw>java.lang.IllegalArgumentException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:894.2</id>
            <description>if the ServletContext from which this ServletRegistration was obtained has already been initialized</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setRunAsRole" return-type="void">
                <parameters>
                    <parameter>java.lang.String</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:895</id>
            <description>Sets the ServletSecurityElement to be applied to the mappings currently assigned to this ServletRegistration.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setServletSecurity" return-type="java.util.Set">
                <parameters>
                    <parameter>javax.servlet.ServletSecurityElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:895.1</id>
            <description>Any mappings added to this ServletRegistration after a call to this method may be secured by a subsequent call to this method.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setServletSecurity" return-type="java.util.Set">
                <parameters>
                    <parameter>javax.servlet.ServletSecurityElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:895.2</id>
            <description>If a url-pattern of this ServletRegistration is an exact target of a security-constraint that was established via the portable deployment descriptor, then this method does not change the security-constraint for that pattern, and the pattern will be included in the return value.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setServletSecurity" return-type="java.util.Set">
                <parameters>
                    <parameter>javax.servlet.ServletSecurityElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:895.3</id>
            <description>If a url-pattern of this ServletRegistration is an exact target of a security constraint that was established via the javax.servlet.annotation.ServletSecurity annotation or a previous call to this method, then this method replaces the security constraint for that pattern. </description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setServletSecurity" return-type="java.util.Set">
                <parameters>
                    <parameter>javax.servlet.ServletSecurityElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:895.4</id>
            <description>If a url-pattern of this ServletRegistration is neither the exact target of a security constraint that was established via the javax.servlet.annotation.ServletSecurity annotation or a previous call to this method, nor the exact target of a security-constraint in the portable deployment descriptor, then this method establishes the security constraint for that pattern from the argument ServletSecurityElement.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setServletSecurity" return-type="java.util.Set">
                <parameters>
                    <parameter>javax.servlet.ServletSecurityElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:895.5</id>
            <description>if constraint is null</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setServletSecurity" return-type="java.util.Set">
                <parameters>
                    <parameter>javax.servlet.ServletSecurityElement</parameter>
                </parameters>
                <throw>java.lang.IllegalArgumentException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:895.6</id>
            <description>if the ServletContext from which this ServletRegistration was obtained has already been initialized</description>
            <package>javax.servlet</package>
            <class-interface>ServletRegistration.Dynamic</class-interface>
            <method name="setServletSecurity" return-type="java.util.Set">
                <parameters>
                    <parameter>javax.servlet.ServletSecurityElement</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:896</id>
            <description>Gets the (possibly empty) collection of HTTP Method specific constraint elements.</description>
            <package>javax.servlet</package>
            <class-interface>ServletSecurityElement</class-interface>
            <method name="getHttpMethodConstraints" return-type="java.util.Collection" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:897</id>
            <description>Gets the set of HTTP methid names named by the HttpMethodConstraints.</description>
            <package>javax.servlet</package>
            <class-interface>ServletSecurityElement</class-interface>
            <method name="getMethodNames" return-type="java.util.Collection" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:898</id>
            <description>Constructs an instance using the default HttpConstraintElement value as the default Constraint element and with no HTTP Method specific constraint elements.</description>
            <package>javax.servlet</package>
            <class-interface>ServletSecurityElement</class-interface>
            <method name="ServletSecurityElement" return-type="ServletSecurityElement" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:899</id>
            <description>Constructs an instance with a default Constraint element and with no HTTP Method specific constraint elements.</description>
            <package>javax.servlet</package>
            <class-interface>ServletSecurityElement</class-interface>
            <method name="ServletSecurityElement" return-type="ServletSecurityElement">
                <parameters>
                    <parameter>javax.servlet.HttpConstraintElement</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:900</id>
            <description>Constructs an instance using the default HttpConstraintElement value as the default Constraint element and with a collection of HTTP Method specific constraint elements.</description>
            <package>javax.servlet</package>
            <class-interface>ServletSecurityElement</class-interface>
            <method name="ServletSecurityElement" return-type="ServletSecurityElement">
                <parameters>
                    <parameter>java.util.Collection</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:901</id>
            <description>Constructs an instance with a default Constraint element and with a collection of HTTP Method specific constraint elements.</description>
            <package>javax.servlet</package>
            <class-interface>ServletSecurityElement</class-interface>
            <method name="ServletSecurityElement" return-type="ServletSecurityElement">
                <parameters>
                    <parameter>javax.servlet.HttpConstraintElement</parameter>
                    <parameter>java.util.Collection</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:902</id>
            <description>Constructs an instance from a ServletSecurity annotation value.</description>
            <package>javax.servlet</package>
            <class-interface>ServletSecurityElement</class-interface>
            <method name="ServletSecurityElement" return-type="ServletSecurityElement">
                <parameters>
                    <parameter>javax.servlet.annotation.ServletSecurity</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:903</id>
            <description>The display name of the servlet</description>
            <package>javax.servlet.annotation</package>
            <class-interface>WebServlet</class-interface>
            <method name="displayName" return-type="java.lang.String" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:904</id>
            <description>Invoked when all data for the current request has been read.</description>
            <package>javax.servlet</package>
            <class-interface>ReadListener</class-interface>
            <method name="onAllDataRead" return-type="void" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:944</id>
            <description>if an I/O related error has occurred during processing</description>
            <package>javax.servlet</package>
            <class-interface>ReadListener</class-interface>
            <method name="onAllDataRead" return-type="void">
                <throw>java.io.IOException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:905</id>
            <description>﻿When an instance of the ReadListener is registered with a ServletInputStream,
                this method will be invoked by the container the first time when it is possible
                to read data. Subsequently the container will invoke this method if and only
                if javax.servlet.ServletInputStream#isReady() method
                has been called and has returned false.
            </description>
            <package>javax.servlet</package>
            <class-interface>ReadListener</class-interface>
            <method name="onDataAvailable" return-type="void" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:945</id>
            <description>if an I/O related error has occurred during processing</description>
            <package>javax.servlet</package>
            <class-interface>ReadListener</class-interface>
            <method name="onDataAvailable" return-type="void">
                <throw>java.io.IOException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:906</id>
            <description>Invoked when an error occurs processing the request.</description>
            <package>javax.servlet</package>
            <class-interface>ReadListener</class-interface>
            <method name="onError" return-type="void">
                <parameters>
                    <parameter>java.lang.Throwable</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:907</id>
            <description>Returns true when all the data from the stream has been read else it returns false.</description>
            <package>javax.servlet</package>
            <class-interface>ServletInputStream</class-interface>
            <method name="isFinished" return-type="boolean" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:908</id>
            <description>Returns true if data can be read without blocking else returns false.</description>
            <package>javax.servlet</package>
            <class-interface>ServletInputStream</class-interface>
            <method name="isReady" return-type="boolean" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:909</id>
            <description>Instructs the ServletInputStream to invoke the provided ReadListener when it is possible to read</description>
            <package>javax.servlet</package>
            <class-interface>ServletInputStream</class-interface>
            <method name="setReadListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.ReadListener</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:941</id>
            <description>the associated request is neither upgraded nor the async started</description>
            <package>javax.servlet</package>
            <class-interface>ServletInputStream</class-interface>
            <method name="setReadListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.ReadListener</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:942</id>
            <description>setWriteListener is called more than once within the scope of the same request.</description>
            <package>javax.servlet</package>
            <class-interface>ServletInputStream</class-interface>
            <method name="setReadListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.ReadListener</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:943</id>
            <description> if readListener is null</description>
            <package>javax.servlet</package>
            <class-interface>ServletInputStream</class-interface>
            <method name="setReadListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.ReadListener</parameter>
                </parameters>
                <throw>java.lang.NullPointerException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:910</id>
            <description>This method can be used to determine if data can be written without blocking.</description>
            <package>javax.servlet</package>
            <class-interface>ServletOutputStream</class-interface>
            <method name="isReady" return-type="boolean" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:911</id>
            <description>Instructs the ServletOutputStream to invoke the provided WriteListener when it is possible to write</description>
            <package>javax.servlet</package>
            <class-interface>ServletOutputStream</class-interface>
            <method name="setWriteListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.WriteListener</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:938</id>
            <description>the associated request is neither upgraded nor the async started</description>
            <package>javax.servlet</package>
            <class-interface>ServletOutputStream</class-interface>
            <method name="setWriteListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.WriteListener</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:939</id>
            <description>setWriteListener is called more than once within the scope of the same request.</description>
            <package>javax.servlet</package>
            <class-interface>ServletOutputStream</class-interface>
            <method name="setWriteListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.WriteListener</parameter>
                </parameters>
                <throw>java.lang.IllegalStateException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:940</id>
            <description>if writeListener is null</description>
            <package>javax.servlet</package>
            <class-interface>ServletOutputStream</class-interface>
            <method name="setWriteListener" return-type="void">
                <parameters>
                    <parameter>javax.servlet.WriteListener</parameter>
                </parameters>
                <throw>java.lang.NullPointerException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:912</id>
            <description>Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the length is not known. For HTTP servlets, same as the value of the CGI variable CONTENT_LENGTH.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRequest</class-interface>
            <method name="getContentLengthLong" return-type="long" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:913</id>
            <description>The default behavior of this method is to return getContentLengthLong() on the wrapped request object.</description>
            <package>javax.servlet</package>
            <class-interface>ServletRequestWrapper</class-interface>
            <method name="getContentLengthLong" return-type="long" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:914</id>
            <description>Sets the length of the content body in the response In HTTP servlets, this method sets the HTTP Content-Length header.</description>
            <package>javax.servlet</package>
            <class-interface>ServletResponse</class-interface>
            <method name="setContentLengthLong" return-type="void">
                <parameters>
                    <parameter>long</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:915</id>
            <description>The default behavior of this method is to call setContentLengthLong(long len) on the wrapped response object.</description>
            <package>javax.servlet</package>
            <class-interface>ServletResponseWrapper</class-interface>
            <method name="setContentLengthLong" return-type="void">
                <parameters>
                    <parameter>long</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:916</id>
            <description>Invoked when an error occurs writing data using the non-blocking APIs.</description>
            <package>javax.servlet</package>
            <class-interface>WriteListener</class-interface>
            <method name="onError" return-type="void">
                <parameters>
                    <parameter>java.lang.Throwable</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:917</id>
            <description>When an instance of the WriteListener is registered with s ServletOutputStream,
                this method will be invoked by the container the first time when it is possible
                to write data. Subsequently the container will invoke this method if and only
                if javax.servlet.ServletOutputStream#isReady() method
                has been called and has returned false.
            </description>
            <package>javax.servlet</package>
            <class-interface>WriteListener</class-interface>
            <method name="onWritePossible" return-type="void" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:946</id>
            <description>if an I/O related error has occurred during processing</description>
            <package>javax.servlet</package>
            <class-interface>WriteListener</class-interface>
            <method name="onWritePossible" return-type="void">
                <throw>java.io.IOException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:922</id>
            <description>It is called once the HTTP Upgrade process has been completed and the upgraded connection is ready to start using the new protocol.</description>
            <package>javax.servlet.http</package>
            <class-interface>ProtocolHandler</class-interface>
            <method name="init" return-type="void">
                <parameters>
                    <parameter>javax.servlet.http.WebConnection</parameter>
                </parameters>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:923</id>
            <description>Returns an input stream for this web connection.</description>
            <package>javax.servlet.http</package>
            <class-interface>WebConnection</class-interface>
            <method name="getInputStream" return-type="javax.servlet.ServletInputStream" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:924</id>
            <description>if an I/O error occurs</description>
            <package>javax.servlet.http</package>
            <class-interface>WebConnection</class-interface>
            <method name="getInputStream" return-type="javax.servlet.ServletInputStream">
                <throw>java.io.IOException</throw>
            </method>
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:925</id>
            <description>Returns an output stream for this web connection.</description>
            <package>javax.servlet.http</package>
            <class-interface>WebConnection</class-interface>
            <method name="getOutputStream" return-type="javax.servlet.ServletOutputStream" />
        </assertion>
        <assertion required="true" impl-spec="false" status="active" testable="true">
            <id>Servlet:JAVADOC:926</id>
            <description>if an I/O error occurs</description>
            <package>javax.servlet.http</package>
            <class-interface>WebConnection</class-interface>
            <method name="getOutputStream" return-type="javax.servlet.ServletOutputStream">
                <throw>java.io.IOException</throw>
            </method>
        </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:929</id>
      <description>Change the session id of the current session associated with this request and return the new session id.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="changeSessionId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:929.1</id>
      <description>If there is no session associated with the request</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="changeSessionId" return-type="java.lang.String">
          <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:930</id>
      <description>Create an instance of HttpUpgradeHandler for an given class and uses it for the http protocol upgrade processing.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="upgrade" return-type="javax.servlet.http.HttpUpgradeHandler">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:931</id>
      <description>if an I/O error occurred during the upgrade</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequest</class-interface>
      <method name="upgrade" return-type="javax.servlet.http.HttpUpgradeHandler">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:932</id>
      <description>The default behavior of this method is to return changeSessionId() on the wrapped request object.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="changeSessionId" return-type="java.lang.String" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:932.1</id>
      <description>If there is no session associated with the request</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="changeSessionId" return-type="java.lang.String">
          <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:933</id>
      <description>Create an instance of HttpUpgradeHandler for an given class and uses it for the http protocol upgrade processing.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="upgrade" return-type="javax.servlet.http.HttpUpgradeHandler">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:934</id>
      <description />
      <package>javax.servlet.http</package>
      <class-interface>HttpServletRequestWrapper</class-interface>
      <method name="upgrade" return-type="javax.servlet.http.HttpUpgradeHandler">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.io.IOException</throw>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:935</id>
      <description>Receives notification that session id has been changed in a session.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpSessionIdListener</class-interface>
      <method name="sessionIdChanged" return-type="void">
        <parameters>
          <parameter>javax.servlet.http.HttpSessionEvent</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:936</id>
      <description>It is called when the client is disconnected.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpUpgradeHandler</class-interface>
      <method name="destroy" return-type="void" />
    </assertion>
    <assertion required="true" impl-spec="false" status="active" testable="true">
      <id>Servlet:JAVADOC:937</id>
      <description>It is called once the HTTP Upgrade process has been completed and the upgraded connection is ready to start using the new protocol.</description>
      <package>javax.servlet.http</package>
      <class-interface>HttpUpgradeHandler</class-interface>
      <method name="init" return-type="void">
        <parameters>
          <parameter>javax.servlet.http.WebConnection</parameter>
        </parameters>
      </method>
    </assertion>
    </assertions>
</javadoc>

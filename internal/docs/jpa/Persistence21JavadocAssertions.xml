<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE javadoc SYSTEM "https://raw.githubusercontent.com/eclipse-ee4j/jakartaee-tck/master/internal/docs/dtd/javadoc_assertions.dtd">
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<javadoc>
  <next-available-id>3487</next-available-id>
  <previous-id>3475</previous-id>
  <technology>PERSISTENCE</technology>
  <id>PERSISTENCE</id>
  <name>Java(TM) Persistence API</name>
  <version>2.1</version>
  <assertions>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1</id>
      <description>The join column(s) being mapped to the persistent attribute(s). The joinColumns elements must be specified if a foreign key mapping is used in the overriding of the mapping of the relationship. The joinColumns element must not be specified if a join table is used in the overriding of the mapping of the relationship.</description>
      <package>javax.persistence</package>
      <class-interface>AssociationOverride</class-interface>
      <method name="joinColumns" return-type="javax.persistence.JoinColumn[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:2</id>
      <description>(Required) The name of the relationship property whose mapping is being overridden if property-based access is being used, or the name of the relationship field if field-based access is used.</description>
      <package>javax.persistence</package>
      <class-interface>AssociationOverride</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3</id>
      <description>(Required) The association override mappings that are to be applied to the relationship field or property .</description>
      <package>javax.persistence</package>
      <class-interface>AssociationOverrides</class-interface>
      <method name="value" return-type="javax.persistence.AssociationOverride[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:4</id>
      <description>(Required) The column that is being mapped to the persistent attribute. The mapping type will remain the same as is defined in the embeddable class or mapped superclass.</description>
      <package>javax.persistence</package>
      <class-interface>AttributeOverride</class-interface>
      <method name="column" return-type="javax.persistence.Column"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:5</id>
      <description>(Required) The name of the property whose mapping is being overridden if property-based access is being used, or the name of the field if field-based access is used.</description>
      <package>javax.persistence</package>
      <class-interface>AttributeOverride</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:6</id>
      <description>(Required) One or more field or property mapping overrides.</description>
      <package>javax.persistence</package>
      <class-interface>AttributeOverrides</class-interface>
      <method name="value" return-type="javax.persistence.AttributeOverride[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:7</id>
      <description>(Optional) Defines whether the value of the field or property should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the value must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime. If not specified, defaults to EAGER.</description>
      <package>javax.persistence</package>
      <class-interface>Basic</class-interface>
      <method name="fetch" return-type="javax.persistence.FetchType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:8</id>
      <description>(Optional) Defines whether the value of the field or property may be null. This is a hint and is disregarded for primitive types; it may be used in schema generation. If not specified, defaults to true.</description>
      <package>javax.persistence</package>
      <class-interface>Basic</class-interface>
      <method name="optional" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:9</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>CascadeType</class-interface>
      <method name="valueOf" return-type="javax.persistence.CascadeType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:10</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>CascadeType</class-interface>
      <method name="values" return-type="javax.persistence.CascadeType[]"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:11</id>
      <description>(Optional) The SQL fragment that is used when generating the DDL for the column. Defaults to the generated SQL to create a column of the inferred type.</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="columnDefinition" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:12</id>
      <description>(Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="insertable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:13</id>
      <description>(Optional) The column length. (Applies only if a string-valued column is used.)</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="length" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:14</id>
      <description>(Optional) The name of the column. Defaults to the property or field name.</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:15</id>
      <description>(Optional) Whether the database column is nullable.</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="nullable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:16</id>
      <description>(Optional) The precision for a decimal (exact numeric) column. (Applies only if a decimal column is used.) Value must be set by developer if used when generating the DDL for the column.</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="precision" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:17</id>
      <description>(Optional) The scale for a decimal (exact numeric) column. (Applies only if a decimal column is used.)</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="scale" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:18</id>
      <description>(Optional) The name of the table that contains the column. If absent the column is assumed to be in the primary table.</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="table" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:19</id>
      <description>(Optional) Whether the column is a unique key. This is a shortcut for the UniqueConstraint annotation at the table level and is useful for when the unique key constraint corresponds to only a single column. This constraint applies in addition to any constraint entailed by primary key mapping and to constraints specified at the table level.</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="unique" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:20</id>
      <description>(Optional) Whether the column is included in SQL UPDATE statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>Column</class-interface>
      <method name="updatable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:21</id>
      <description>(Required) The name of a column in the SELECT clause of a SQL query</description>
      <package>javax.persistence</package>
      <class-interface>ColumnResult</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:22</id>
      <description>(Optional) The SQL fragment that is used when generating the DDL for the discriminator column. Defaults to the provider-generated SQL to create a column of the specified discriminator type.</description>
      <package>javax.persistence</package>
      <class-interface>DiscriminatorColumn</class-interface>
      <method name="columnDefinition" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:23</id>
      <description>(Optional) The type of object/column to use as a class discriminator. Defaults to DiscriminatorType#STRING DiscriminatorType.STRING.</description>
      <package>javax.persistence</package>
      <class-interface>DiscriminatorColumn</class-interface>
      <method name="discriminatorType" return-type="javax.persistence.DiscriminatorType"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:24</id>
      <description>(Optional) The column length for String-based discriminator types. Ignored for other discriminator types.</description>
      <package>javax.persistence</package>
      <class-interface>DiscriminatorColumn</class-interface>
      <method name="length" return-type="int"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:25</id>
      <description>(Optional) The name of column to be used for the discriminator.</description>
      <package>javax.persistence</package>
      <class-interface>DiscriminatorColumn</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:26</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>DiscriminatorType</class-interface>
      <method name="valueOf" return-type="javax.persistence.DiscriminatorType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:27</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>DiscriminatorType</class-interface>
      <method name="values" return-type="javax.persistence.DiscriminatorType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:28</id>
      <description>(Optional) The value that indicates that the row is an entity of the annotated entity type. If the DiscriminatorValue annotation is not specified and a discriminator column is used, a provider-specific function will be used to generate a value representing the entity type. If the DiscriminatorType is STRING, the discriminator value default is the entity name.</description>
      <package>javax.persistence</package>
      <class-interface>DiscriminatorValue</class-interface>
      <method name="value" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:29</id>
      <description>(Optional) The entity name. Defaults to the unqualified name of the entity class. This name is used to refer to the entity in queries. The name must not be a reserved literal in the Java Persistence query language.</description>
      <package>javax.persistence</package>
      <class-interface>Entity</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:30</id>
      <description>Constructs a new EntityExistsException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>EntityExistsException</class-interface>
      <method name="EntityExistsException" return-type="EntityExistsException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:31</id>
      <description>Constructs a new EntityExistsException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>EntityExistsException</class-interface>
      <method name="EntityExistsException" return-type="EntityExistsException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:32</id>
      <description>Constructs a new EntityExistsException exception with the specified detail message and cause.</description>
      <package>javax.persistence</package>
      <class-interface>EntityExistsException</class-interface>
      <method name="EntityExistsException" return-type="EntityExistsException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:33</id>
      <description>Constructs a new EntityExistsException exception with the specified cause.</description>
      <package>javax.persistence</package>
      <class-interface>EntityExistsException</class-interface>
      <method name="EntityExistsException" return-type="EntityExistsException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:34</id>
      <description>The callback listener classes</description>
      <package>javax.persistence</package>
      <class-interface>EntityListeners</class-interface>
      <method name="value" return-type="java.lang.Class[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:35</id>
      <description>Clear the persistence context, causing all managed entities to become detached. Changes made to entities that have not been flushed to the database will not be persisted.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="clear" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:36</id>
      <description>Close an application-managed entity manager. After the close method has been invoked, all methods on the EntityManager instance and any Query, TypedQuery, and StoredProcedureQuery objects obtained from it will throw the IllegalStateException except for getProperties, getTransaction, and isOpen (which will return false). If this method is called when the entity manager is joined to an active transaction, the persistence context remains managed until the transaction completes.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="close" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:37</id>
      <description>Check if the instance is a managed entity instance belonging to the current persistence context.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="contains" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:38</id>
      <description>Create an instance of Query for executing a named query (in the Java Persistence query language or in native SQL).</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNamedQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:39</id>
      <description>Create an instance of Query for executing a native SQL statement, e.g., for update or delete. If the query is not an update or delete query, query execution will result in each row of the SQL result being returned as a result of type Object[] (or a result of type Object if there is only one column in the select list.) Column values are returned in the order of their appearance in the select list and default JDBC type mappings are applied.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNativeQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:40</id>
      <description>Create an instance of Query for executing a native SQL query.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNativeQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:41</id>
      <description>Create an instance of Query for executing a native SQL query.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNativeQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:42</id>
      <description>Create an instance of Query for executing a Java Persistence query language statement.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:43</id>
      <description>Find by primary key. Search for an entity of the specified class and primary key. If the entity instance is contained in the persistence context, it is returned from there.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:44</id>
      <description>Synchronize the persistence context to the underlying database.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="flush" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:45</id>
      <description>Return the underlying provider object for the EntityManager, if available. The result of this method is implementation specific. The unwrap method is to be preferred for new applications.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getDelegate" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:46</id>
      <description>Get the flush mode that applies to all objects contained in the persistence context.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getFlushMode" return-type="javax.persistence.FlushModeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:47</id>
      <description>Get an instance, whose state may be lazily fetched. If the requested instance does not exist in the database, the EntityNotFoundException is thrown when the instance state is first accessed. (The persistence provider runtime is permitted to throw the EntityNotFoundException when getReference is called.) The application should not expect that the instance state will be available upon detachment, unless it was accessed by the application while the entity manager was open.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getReference" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:48</id>
      <description>Return the resource-level EntityTransaction object. The EntityTransaction instance may be used serially to begin and commit multiple transactions.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getTransaction" return-type="javax.persistence.EntityTransaction"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:49</id>
      <description>Determine whether the entity manager is open.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="isOpen" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:50</id>
      <description>Indicate to the entity manager that a JTA transaction is active and join the persistence context to it. This method should be called on a JTA application managed entity manager that was created outside the scope of the active transaction or on an entity manager of type SynchronizationType.UNSYNCHRONIZED to associate it with the current JTA transaction.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="joinTransaction" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:51</id>
      <description>Lock an entity instance that is contained in the persistence context with the specified lock mode type. If a pessimistic lock mode type is specified and the entity contains a version attribute, the persistence provider must also perform optimistic version checks when obtaining the database lock. If these checks fail, the OptimisticLockException will be thrown. If the lock mode type is pessimistic and the entity instance is found but cannot be locked: the PessimisticLockException will be thrown if the database locking failure causes transaction-level rollback the LockTimeoutException will be thrown if the database locking failure causes only statement-level rollback</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:52</id>
      <description>Merge the state of the given entity into the current persistence context.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="merge" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:53</id>
      <description>Make an instance managed and persistent.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="persist" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:54</id>
      <description>Refresh the state of the instance from the database, overwriting changes made to the entity, if any.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:55</id>
      <description>Remove the entity instance.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="remove" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:56</id>
      <description>Set the flush mode that applies to all objects contained in the persistence context.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="setFlushMode" return-type="void">
        <parameters>
          <parameter>javax.persistence.FlushModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:57</id>
      <description>Close the factory, releasing any resources that it holds. After a factory instance has been closed, all methods invoked on it will throw the IllegalStateException, except for isOpen, which will return false. Once an EntityManagerFactory has been closed, all its entity managers are considered to be in the closed state.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="close" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:58</id>
      <description>Create a new application-managed EntityManager. This method returns a new EntityManager instance each time it is invoked. The isOpen method will return true on the returned instance.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="createEntityManager" return-type="javax.persistence.EntityManager"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:59</id>
      <description>Create a new application-managed EntityManager with the specified Map of properties. This method returns a new EntityManager instance each time it is invoked. The isOpen method will return true on the returned instance.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="createEntityManager" return-type="javax.persistence.EntityManager">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:60</id>
      <description>Indicates whether the factory is open. Returns true until the factory has been closed.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="isOpen" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:61</id>
      <description>Constructs a new EntityNotFoundException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>EntityNotFoundException</class-interface>
      <method name="EntityNotFoundException" return-type="EntityNotFoundException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:62</id>
      <description>Constructs a new EntityNotFoundException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>EntityNotFoundException</class-interface>
      <method name="EntityNotFoundException" return-type="EntityNotFoundException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:63</id>
      <description>Specifies the column name (or alias) of the column in the SELECT list that is used to determine the type of the entity instance.</description>
      <package>javax.persistence</package>
      <class-interface>EntityResult</class-interface>
      <method name="discriminatorColumn" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:64</id>
      <description>The class of the result.</description>
      <package>javax.persistence</package>
      <class-interface>EntityResult</class-interface>
      <method name="entityClass" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:65</id>
      <description>Maps the columns specified in the SELECT list of the query to the properties or fields of the entity class.</description>
      <package>javax.persistence</package>
      <class-interface>EntityResult</class-interface>
      <method name="fields" return-type="javax.persistence.FieldResult[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:66</id>
      <description>Start a resource transaction.</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="begin" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:67</id>
      <description>Commit the current resource transaction, writing any unflushed changes to the database.</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="commit" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:68</id>
      <description>Determine whether the current resource transaction has been marked for rollback.</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="getRollbackOnly" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:69</id>
      <description>Indicate whether a resource transaction is in progress.</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="isActive" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:70</id>
      <description>Roll back the current resource transaction.</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="rollback" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:71</id>
      <description>Mark the current resource transaction so that the only possible outcome of the transaction is for the transaction to be rolled back.</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="setRollbackOnly" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:72</id>
      <description>(Optional) The type used in mapping an enum type.</description>
      <package>javax.persistence</package>
      <class-interface>Enumerated</class-interface>
      <method name="value" return-type="javax.persistence.EnumType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:73</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>EnumType</class-interface>
      <method name="valueOf" return-type="javax.persistence.EnumType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:74</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>EnumType</class-interface>
      <method name="values" return-type="javax.persistence.EnumType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:75</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>FetchType</class-interface>
      <method name="valueOf" return-type="javax.persistence.FetchType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:76</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>FetchType</class-interface>
      <method name="values" return-type="javax.persistence.FetchType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:77</id>
      <description>Name of the column in the SELECT clause - i.e., column aliases, if applicable.</description>
      <package>javax.persistence</package>
      <class-interface>FieldResult</class-interface>
      <method name="column" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:78</id>
      <description>Name of the persistent field or property of the class.</description>
      <package>javax.persistence</package>
      <class-interface>FieldResult</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:79</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>FlushModeType</class-interface>
      <method name="valueOf" return-type="javax.persistence.FlushModeType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:80</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>FlushModeType</class-interface>
      <method name="values" return-type="javax.persistence.FlushModeType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:81</id>
      <description>(Optional) The name of the primary key generator to use as specified in the SequenceGenerator or TableGenerator annotation. Defaults to the id generator supplied by persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>GeneratedValue</class-interface>
      <method name="generator" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:82</id>
      <description>(Optional) The primary key generation strategy that the persistence provider must use to generate the annotated entity primary key.</description>
      <package>javax.persistence</package>
      <class-interface>GeneratedValue</class-interface>
      <method name="strategy" return-type="javax.persistence.GenerationType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:83</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>GenerationType</class-interface>
      <method name="valueOf" return-type="javax.persistence.GenerationType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:84</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>GenerationType</class-interface>
      <method name="values" return-type="javax.persistence.GenerationType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:85</id>
      <description>Primary key class</description>
      <package>javax.persistence</package>
      <class-interface>IdClass</class-interface>
      <method name="value" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:86</id>
      <description>The strategy to be used for the entity inheritance hierarchy.</description>
      <package>javax.persistence</package>
      <class-interface>Inheritance</class-interface>
      <method name="strategy" return-type="javax.persistence.InheritanceType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:87</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>InheritanceType</class-interface>
      <method name="valueOf" return-type="javax.persistence.InheritanceType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:88</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>InheritanceType</class-interface>
      <method name="values" return-type="javax.persistence.InheritanceType[]"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:89</id>
      <description>(Optional) The SQL fragment that is used when generating the DDL for the column. Defaults to the generated SQL for the column.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="columnDefinition" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:90</id>
      <description>(Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="insertable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:91</id>
      <description>(Optional) The name of the foreign key column. The table in which it is found depends upon the context. If the join is for a OneToOne or ManyToOne mapping using a foreign key mapping strategy, the foreign key column is in the table of the source entity or embeddable. If the join is for a unidirectional OneToMany mapping using a foreign key mapping strategy, the foreign key is in the table of the target entity. If the join is for a ManyToMany mapping or for a OneToOne or bidirectional ManyToOne/OneToMany mapping using a join table, the foreign key is in a join table. If the join is for an element collection, the foreign key is in a collection table. Default (only applies if a single join column is used): The concatenation of the following: the name of the referencing relationship property or field of the referencing entity or embeddable class; "_"; the name of the referenced primary key column. If there is no such referencing relationship property or field in the entity, or if the join is for an element collection, the join column name is formed as the concatenation of the following: the name of the entity; "_"; the name of the referenced primary key column.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:92</id>
      <description>(Optional) Whether the foreign key column is nullable.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="nullable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:93</id>
      <description>(Optional) The name of the column referenced by this foreign key column. When used with entity relationship mappings other than the cases described here, the referenced column is in the table of the target entity. When used with a unidirectional OneToMany foreign key mapping, the referenced column is in the table of the source entity. When used inside a JoinTable annotation, the referenced key column is in the entity table of the owning entity, or inverse entity if the join is part of the inverse join definition. When used in a CollectionTable mapping, the referenced column is in the table of the entity containing the collection. Default (only applies if single join column is being used): The same name as the primary key column of the referenced table.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="referencedColumnName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:94</id>
      <description>(Optional) The name of the table that contains the column. If a table is not specified, the column is assumed to be in the primary table of the applicable entity. Default: If the join is for a OneToOne or ManyToOne mapping using a foreign key mapping strategy, the name of the table of the source entity or embeddable. If the join is for a unidirectional OneToMany mapping using a foreign key mapping strategy, the name of the table of the target entity. If the join is for a ManyToMany mapping or for a OneToOne or bidirectional ManyToOne/OneToMany mapping using a join table, the name of the join table. If the join is for an element collection, the name of the collection table.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="table" return-type="java.lang.String"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:95</id>
      <description>(Optional) Whether the property is a unique key. This is a shortcut for the UniqueConstraint annotation at the table level and is useful for when the unique key constraint is only a single field. It is not necessary to explicitly specify this for a join column that corresponds to a primary key that is part of a foreign key.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="unique" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:96</id>
      <description>(Optional) Whether the column is included in SQL UPDATE statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="updatable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:97</id>
      <description>The join columns that map the relationship.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumns</class-interface>
      <method name="value" return-type="javax.persistence.JoinColumn[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:98</id>
      <description>(Optional) The catalog of the table. Defaults to the default catalog.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="catalog" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:99</id>
      <description>(Optional) The foreign key columns of the join table which reference the primary table of the entity that does not own the association. (I.e. the inverse side of the association). Uses the same defaults as for JoinColumn.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="inverseJoinColumns" return-type="javax.persistence.JoinColumn[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:100</id>
      <description>(Optional) The foreign key columns of the join table which reference the primary table of the entity owning the association. (I.e. the owning side of the association). Uses the same defaults as for JoinColumn.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="joinColumns" return-type="javax.persistence.JoinColumn[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:101</id>
      <description>(Optional) The name of the join table. Defaults to the concatenated names of the two associated primary entity tables, separated by an underscore.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:102</id>
      <description>(Optional) The schema of the table. Defaults to the default schema for user.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="schema" return-type="java.lang.String"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:103</id>
      <description>(Optional) Unique constraints that are to be placed on the table. These are only used if table generation is in effect. Defaults to no additional constraints.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="uniqueConstraints" return-type="javax.persistence.UniqueConstraint[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:104</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>LockModeType</class-interface>
      <method name="valueOf" return-type="javax.persistence.LockModeType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:105</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>LockModeType</class-interface>
      <method name="values" return-type="javax.persistence.LockModeType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:106</id>
      <description>(Optional) The operations that must be cascaded to the target of the association. When the target collection is a java.util.Map java.util.Map, the cascade element applies to the map value. Defaults to no operations being cascaded.</description>
      <package>javax.persistence</package>
      <class-interface>ManyToMany</class-interface>
      <method name="cascade" return-type="javax.persistence.CascadeType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:107</id>
      <description>(Optional) Whether the association should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the associated entities must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime.</description>
      <package>javax.persistence</package>
      <class-interface>ManyToMany</class-interface>
      <method name="fetch" return-type="javax.persistence.FetchType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:108</id>
      <description>The field that owns the relationship. Required unless the relationship is unidirectional.</description>
      <package>javax.persistence</package>
      <class-interface>ManyToMany</class-interface>
      <method name="mappedBy" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:109</id>
      <description>(Optional) The entity class that is the target of the association. Optional only if the collection-valued relationship property is defined using Java generics. Must be specified otherwise. Defaults to the parameterized type of the collection when defined using generics.</description>
      <package>javax.persistence</package>
      <class-interface>ManyToMany</class-interface>
      <method name="targetEntity" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:110</id>
      <description>(Optional) The operations that must be cascaded to the target of the association. By default no operations are cascaded.</description>
      <package>javax.persistence</package>
      <class-interface>ManyToOne</class-interface>
      <method name="cascade" return-type="javax.persistence.CascadeType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:111</id>
      <description>(Optional) Whether the association should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the associated entity must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime.</description>
      <package>javax.persistence</package>
      <class-interface>ManyToOne</class-interface>
      <method name="fetch" return-type="javax.persistence.FetchType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:112</id>
      <description>(Optional) Whether the association is optional. If set to false then a non-null relationship must always exist.</description>
      <package>javax.persistence</package>
      <class-interface>ManyToOne</class-interface>
      <method name="optional" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:113</id>
      <description>(Optional) The entity class that is the target of the association. Defaults to the type of the field or property that stores the association.</description>
      <package>javax.persistence</package>
      <class-interface>ManyToOne</class-interface>
      <method name="targetEntity" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:114</id>
      <description>(Optional) The name of the persistent field or property of the associated entity that is used as the map key. Default: If the name element is not specified, the primary key of the associated entity is used as the map key. If the primary key is a composite primary key and is mapped as IdClass, an instance of the primary key class is used as the key.</description>
      <package>javax.persistence</package>
      <class-interface>MapKey</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:115</id>
      <description>(Required) Array of NamedNativeQuery annotations.</description>
      <package>javax.persistence</package>
      <class-interface>NamedNativeQueries</class-interface>
      <method name="value" return-type="javax.persistence.NamedNativeQuery[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:116</id>
      <description>Query properties and hints. (May include vendor-specific query hints.)</description>
      <package>javax.persistence</package>
      <class-interface>NamedNativeQuery</class-interface>
      <method name="hints" return-type="javax.persistence.QueryHint[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:117</id>
      <description>The name used to refer to the query with the EntityManager methods that create query objects.</description>
      <package>javax.persistence</package>
      <class-interface>NamedNativeQuery</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:118</id>
      <description>The SQL query string.</description>
      <package>javax.persistence</package>
      <class-interface>NamedNativeQuery</class-interface>
      <method name="query" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:119</id>
      <description>The class of the result.</description>
      <package>javax.persistence</package>
      <class-interface>NamedNativeQuery</class-interface>
      <method name="resultClass" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:120</id>
      <description>The name of a SqlResultSetMapping, as defined in metadata.</description>
      <package>javax.persistence</package>
      <class-interface>NamedNativeQuery</class-interface>
      <method name="resultSetMapping" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:121</id>
      <description>(Required) An array of NamedQuery annotations.</description>
      <package>javax.persistence</package>
      <class-interface>NamedQueries</class-interface>
      <method name="value" return-type="javax.persistence.NamedQuery[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:122</id>
      <description>(Optional) Query properties and hints. May include vendor-specific query hints.</description>
      <package>javax.persistence</package>
      <class-interface>NamedQuery</class-interface>
      <method name="hints" return-type="javax.persistence.QueryHint[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:123</id>
      <description>(Required) The name used to refer to the query with the EntityManager methods that create query objects.</description>
      <package>javax.persistence</package>
      <class-interface>NamedQuery</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:124</id>
      <description>(Required) The query string in the Java Persistence query language.</description>
      <package>javax.persistence</package>
      <class-interface>NamedQuery</class-interface>
      <method name="query" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:125</id>
      <description>Constructs a new NonUniqueResultException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>NonUniqueResultException</class-interface>
      <method name="NonUniqueResultException" return-type="NonUniqueResultException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:126</id>
      <description>Constructs a new NonUniqueResultException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>NonUniqueResultException</class-interface>
      <method name="NonUniqueResultException" return-type="NonUniqueResultException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:127</id>
      <description>Constructs a new NoResultException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>NoResultException</class-interface>
      <method name="NoResultException" return-type="NoResultException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:128</id>
      <description>Constructs a new NoResultException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>NoResultException</class-interface>
      <method name="NoResultException" return-type="NoResultException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:129</id>
      <description>(Optional) The operations that must be cascaded to the target of the association. Defaults to no operations being cascaded. When the target collection is a java.util.Map java.util.Map, the cascade element applies to the map value.</description>
      <package>javax.persistence</package>
      <class-interface>OneToMany</class-interface>
      <method name="cascade" return-type="javax.persistence.CascadeType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:130</id>
      <description>(Optional) Whether the association should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the associated entities must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime.</description>
      <package>javax.persistence</package>
      <class-interface>OneToMany</class-interface>
      <method name="fetch" return-type="javax.persistence.FetchType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:131</id>
      <description>The field that owns the relationship. Required unless the relationship is unidirectional.</description>
      <package>javax.persistence</package>
      <class-interface>OneToMany</class-interface>
      <method name="mappedBy" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:132</id>
      <description>(Optional) The entity class that is the target of the association. Optional only if the collection property is defined using Java generics. Must be specified otherwise. Defaults to the parameterized type of the collection when defined using generics.</description>
      <package>javax.persistence</package>
      <class-interface>OneToMany</class-interface>
      <method name="targetEntity" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:133</id>
      <description>(Optional) The operations that must be cascaded to the target of the association. By default no operations are cascaded.</description>
      <package>javax.persistence</package>
      <class-interface>OneToOne</class-interface>
      <method name="cascade" return-type="javax.persistence.CascadeType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:134</id>
      <description>(Optional) Whether the association should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the associated entity must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime.</description>
      <package>javax.persistence</package>
      <class-interface>OneToOne</class-interface>
      <method name="fetch" return-type="javax.persistence.FetchType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:135</id>
      <description>(Optional) The field that owns the relationship. This element is only specified on the inverse (non-owning) side of the association.</description>
      <package>javax.persistence</package>
      <class-interface>OneToOne</class-interface>
      <method name="mappedBy" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:136</id>
      <description>(Optional) Whether the association is optional. If set to false then a non-null relationship must always exist.</description>
      <package>javax.persistence</package>
      <class-interface>OneToOne</class-interface>
      <method name="optional" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:137</id>
      <description>(Optional) The entity class that is the target of the association. Defaults to the type of the field or property that stores the association.</description>
      <package>javax.persistence</package>
      <class-interface>OneToOne</class-interface>
      <method name="targetEntity" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:138</id>
      <description>Returns the entity that caused this exception.</description>
      <package>javax.persistence</package>
      <class-interface>OptimisticLockException</class-interface>
      <method name="getEntity" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:139</id>
      <description>Constructs a new OptimisticLockException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>OptimisticLockException</class-interface>
      <method name="OptimisticLockException" return-type="OptimisticLockException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:140</id>
      <description>Constructs a new OptimisticLockException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>OptimisticLockException</class-interface>
      <method name="OptimisticLockException" return-type="OptimisticLockException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:141</id>
      <description>Constructs a new OptimisticLockException exception with the specified detail message and cause.</description>
      <package>javax.persistence</package>
      <class-interface>OptimisticLockException</class-interface>
      <method name="OptimisticLockException" return-type="OptimisticLockException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:142</id>
      <description>Constructs a new OptimisticLockException exception with the specified cause.</description>
      <package>javax.persistence</package>
      <class-interface>OptimisticLockException</class-interface>
      <method name="OptimisticLockException" return-type="OptimisticLockException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:143</id>
      <description>Constructs a new OptimisticLockException exception with the specified entity.</description>
      <package>javax.persistence</package>
      <class-interface>OptimisticLockException</class-interface>
      <method name="OptimisticLockException" return-type="OptimisticLockException">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:144</id>
      <description>Constructs a new OptimisticLockException exception with the specified detail message, cause, and entity.</description>
      <package>javax.persistence</package>
      <class-interface>OptimisticLockException</class-interface>
      <method name="OptimisticLockException" return-type="OptimisticLockException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:145</id>
      <description>An orderby_list. Specified as follows: orderby_list::= orderby_item [,orderby_item]* orderby_item::= [property_or_field_name] [ASC | DESC] If ASC or DESC is not specified, ASC (ascending order) is assumed. If the ordering element is not specified, ordering by the primary key of the associated entity is assumed.</description>
      <package>javax.persistence</package>
      <class-interface>OrderBy</class-interface>
      <method name="value" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:146</id>
      <description>Create and return an EntityManagerFactory for the named persistence unit.</description>
      <package>javax.persistence</package>
      <class-interface>Persistence</class-interface>
      <method name="createEntityManagerFactory" return-type="javax.persistence.EntityManagerFactory">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:147</id>
      <description>Create and return an EntityManagerFactory for the named persistence unit using the given properties.</description>
      <package>javax.persistence</package>
      <class-interface>Persistence</class-interface>
      <method name="createEntityManagerFactory" return-type="javax.persistence.EntityManagerFactory">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:148</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>Persistence</class-interface>
      <method name="Persistence" return-type="Persistence"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:149</id>
      <description>(Optional) The name by which the entity manager is to be accessed in the environment referencing context; not needed when dependency injection is used.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceContext</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:150</id>
      <description>(Optional) Properties for the container or persistence provider. Vendor specific properties may be included in this set of properties. Properties that are not recognized by a vendor are ignored.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceContext</class-interface>
      <method name="properties" return-type="javax.persistence.PersistenceProperty[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:151</id>
      <description>(Optional) Specifies whether a transaction-scoped persistence context or an extended persistence context is to be used.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceContext</class-interface>
      <method name="type" return-type="javax.persistence.PersistenceContextType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:152</id>
      <description>(Optional) The name of the persistence unit as defined in the persistence.xml file. If the unitName element is specified, the persistence unit for the entity manager that is accessible in JNDI must have the same name.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceContext</class-interface>
      <method name="unitName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:153</id>
      <description>(Required) One or more PersistenceContext annotations.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceContexts</class-interface>
      <method name="value" return-type="javax.persistence.PersistenceContext[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:154</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>PersistenceContextType</class-interface>
      <method name="valueOf" return-type="javax.persistence.PersistenceContextType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:155</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>PersistenceContextType</class-interface>
      <method name="values" return-type="javax.persistence.PersistenceContextType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:156</id>
      <description>Constructs a new PersistenceException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceException</class-interface>
      <method name="PersistenceException" return-type="PersistenceException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:157</id>
      <description>Constructs a new PersistenceException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceException</class-interface>
      <method name="PersistenceException" return-type="PersistenceException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:158</id>
      <description>Constructs a new PersistenceException exception with the specified detail message and cause.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceException</class-interface>
      <method name="PersistenceException" return-type="PersistenceException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:159</id>
      <description>Constructs a new PersistenceException exception with the specified cause.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceException</class-interface>
      <method name="PersistenceException" return-type="PersistenceException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:160</id>
      <description>The name of the property</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceProperty</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:161</id>
      <description>The value of the property</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceProperty</class-interface>
      <method name="value" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:162</id>
      <description>(Optional) The name by which the entity manager factory is to be accessed in the environment referencing context; not needed when dependency injection is used.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnit</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:163</id>
      <description>(Optional) The name of the persistence unit as defined in the persistence.xml file. If specified, the persistence unit for the entity manager factory that is accessible in JNDI must have the same name.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnit</class-interface>
      <method name="unitName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:164</id>
      <description>(Required) One or more PersistenceUnit annotations.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnits</class-interface>
      <method name="value" return-type="javax.persistence.PersistenceUnit[]"/>
    </assertion>
<assertion required="false" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:165</id>
      <description>(Optional) The SQL fragment that is used when generating the DDL for the column. This should not be specified for a OneToOne primary key association. Defaults to the generated SQL to create a column of the inferred type.</description>
      <package>javax.persistence</package>
      <class-interface>PrimaryKeyJoinColumn</class-interface>
      <method name="columnDefinition" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:166</id>
      <description>(Optional) The name of the primary key column of the current table. Defaults to the same name as the primary key column of the primary table of the superclass (JOINED mapping strategy); the same name as the primary key column of the primary table (SecondaryTable mapping); or the same name as the primary key column for the table for the referencing entity (OneToOne mapping).</description>
      <package>javax.persistence</package>
      <class-interface>PrimaryKeyJoinColumn</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:167</id>
      <description>(Optional) The name of the primary key column of the table being joined to. Defaults to the same name as the primary key column of the primary table of the superclass (JOINED mapping strategy); the same name as the primary key column of the primary table (SecondaryTable mapping); or the same name as the primary key column for the table for the referencing entity (OneToOne mapping).</description>
      <package>javax.persistence</package>
      <class-interface>PrimaryKeyJoinColumn</class-interface>
      <method name="referencedColumnName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:168</id>
      <description>One or more PrimaryKeyJoinColumn annotations.</description>
      <package>javax.persistence</package>
      <class-interface>PrimaryKeyJoinColumns</class-interface>
      <method name="value" return-type="javax.persistence.PrimaryKeyJoinColumn[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:169</id>
      <description>Execute an update or delete statement.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="executeUpdate" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:170</id>
      <description>Execute a SELECT query and return the query results as an untyped List.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getResultList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:171</id>
      <description>Execute a SELECT query that returns a single untyped result.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:172</id>
      <description>Set the position of the first result to retrieve.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setFirstResult" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:173</id>
      <description>Set the flush mode type to be used for the query execution. The flush mode type applies to the query regardless of the flush mode type in use for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setFlushMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.FlushModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:174</id>
      <description>Set a query property or hint. The hints elements may be used to specify query properties and hints. Properties defined by this specification must be observed by the provider. Vendor-specific hints that are not recognized by a provider must be silently ignored. Portable applications should not rely on the standard timeout hint. Depending on the database in use and the locking mechanisms used by the provider, this hint may or may not be observed.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setHint" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:175</id>
      <description>Set the maximum number of results to retrieve.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setMaxResults" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:176</id>
      <description>Bind an argument value to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:177</id>
      <description>Bind an instance of java.util.Date to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:178</id>
      <description>Bind an instance of java.util.Calendar to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:179</id>
      <description>Bind an argument value to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:180</id>
      <description>Bind an instance of java.util.Date to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:181</id>
      <description>Bind an instance of java.util.Calendar to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:182</id>
      <description>Name of the hint.</description>
      <package>javax.persistence</package>
      <class-interface>QueryHint</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:183</id>
      <description>Value of the hint.</description>
      <package>javax.persistence</package>
      <class-interface>QueryHint</class-interface>
      <method name="value" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:184</id>
      <description>Constructs a new RollbackException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>RollbackException</class-interface>
      <method name="RollbackException" return-type="RollbackException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:185</id>
      <description>Constructs a new RollbackException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>RollbackException</class-interface>
      <method name="RollbackException" return-type="RollbackException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:186</id>
      <description>Constructs a new RollbackException exception with the specified detail message and cause.</description>
      <package>javax.persistence</package>
      <class-interface>RollbackException</class-interface>
      <method name="RollbackException" return-type="RollbackException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:187</id>
      <description>Constructs a new RollbackException exception with the specified cause.</description>
      <package>javax.persistence</package>
      <class-interface>RollbackException</class-interface>
      <method name="RollbackException" return-type="RollbackException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:188</id>
      <description>(Optional) The catalog of the table. Defaults to the default catalog.</description>
      <package>javax.persistence</package>
      <class-interface>SecondaryTable</class-interface>
      <method name="catalog" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:189</id>
      <description>(Required) The name of the table.</description>
      <package>javax.persistence</package>
      <class-interface>SecondaryTable</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:190</id>
      <description>(Optional) The columns that are used to join with the primary table. Defaults to the column(s) of the same name(s) as the primary key column(s) in the primary table.</description>
      <package>javax.persistence</package>
      <class-interface>SecondaryTable</class-interface>
      <method name="pkJoinColumns" return-type="javax.persistence.PrimaryKeyJoinColumn[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:191</id>
      <description>(Optional) The schema of the table. Defaults to the default schema for user.</description>
      <package>javax.persistence</package>
      <class-interface>SecondaryTable</class-interface>
      <method name="schema" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:192</id>
      <description>(Optional) Unique constraints that are to be placed on the table. These are typically only used if table generation is in effect. These constraints apply in addition to any constraints specified by the Column and JoinColumn annotations and constraints entailed by primary key mappings. Defaults to no additional constraints.</description>
      <package>javax.persistence</package>
      <class-interface>SecondaryTable</class-interface>
      <method name="uniqueConstraints" return-type="javax.persistence.UniqueConstraint[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:193</id>
      <description>(Required) The secondary tables for an entity.</description>
      <package>javax.persistence</package>
      <class-interface>SecondaryTables</class-interface>
      <method name="value" return-type="javax.persistence.SecondaryTable[]"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:194</id>
      <description>(Optional) The amount to increment by when allocating sequence numbers from the sequence.</description>
      <package>javax.persistence</package>
      <class-interface>SequenceGenerator</class-interface>
      <method name="allocationSize" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:195</id>
      <description>(Optional) The value from which the sequence object is to start generating.</description>
      <package>javax.persistence</package>
      <class-interface>SequenceGenerator</class-interface>
      <method name="initialValue" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:196</id>
      <description>(Required) A unique generator name that can be referenced by one or more classes to be the generator for primary key values.</description>
      <package>javax.persistence</package>
      <class-interface>SequenceGenerator</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:197</id>
      <description>(Optional) The name of the database sequence object from which to obtain primary key values. Defaults to a provider-chosen value.</description>
      <package>javax.persistence</package>
      <class-interface>SequenceGenerator</class-interface>
      <method name="sequenceName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:198</id>
      <description>Specifies the result set mapping to scalar values.</description>
      <package>javax.persistence</package>
      <class-interface>SqlResultSetMapping</class-interface>
      <method name="columns" return-type="javax.persistence.ColumnResult[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:199</id>
      <description>Specifies the result set mapping to entities.</description>
      <package>javax.persistence</package>
      <class-interface>SqlResultSetMapping</class-interface>
      <method name="entities" return-type="javax.persistence.EntityResult[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:200</id>
      <description>The name given to the result set mapping, and used to refer to it in the methods of the Query and StoredProcedureQuery APIs.</description>
      <package>javax.persistence</package>
      <class-interface>SqlResultSetMapping</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:201</id>
      <description>One or more SqlResultSetMapping annotations.</description>
      <package>javax.persistence</package>
      <class-interface>SqlResultSetMappings</class-interface>
      <method name="value" return-type="javax.persistence.SqlResultSetMapping[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:202</id>
      <description>(Optional) The catalog of the table. Defaults to the default catalog.</description>
      <package>javax.persistence</package>
      <class-interface>Table</class-interface>
      <method name="catalog" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:203</id>
      <description>(Optional) The name of the table. Defaults to the entity name.</description>
      <package>javax.persistence</package>
      <class-interface>Table</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:204</id>
      <description>(Optional) The schema of the table. Defaults to the default schema for user.</description>
      <package>javax.persistence</package>
      <class-interface>Table</class-interface>
      <method name="schema" return-type="java.lang.String"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:205</id>
      <description>(Optional) Unique constraints that are to be placed on the table. These are only used if table generation is in effect. These constraints apply in addition to any constraints specified by the Column and JoinColumn annotations and constraints entailed by primary key mappings. Defaults to no additional constraints.</description>
      <package>javax.persistence</package>
      <class-interface>Table</class-interface>
      <method name="uniqueConstraints" return-type="javax.persistence.UniqueConstraint[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:206</id>
      <description>(Optional) The amount to increment by when allocating id numbers from the generator.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="allocationSize" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:207</id>
      <description>(Optional) The catalog of the table. Defaults to the default catalog.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="catalog" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:208</id>
      <description>(Optional) The initial value to be used to initialize the column that stores the last value generated.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="initialValue" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:209</id>
      <description>(Required) A unique generator name that can be referenced by one or more classes to be the generator for id values.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:210</id>
      <description>(Optional) Name of the primary key column in the table. Defaults to a provider-chosen name.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="pkColumnName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:211</id>
      <description>(Optional) The primary key value in the generator table that distinguishes this set of generated values from others that may be stored in the table. Defaults to a provider-chosen value to store in the primary key column of the generator table</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="pkColumnValue" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:212</id>
      <description>(Optional) The schema of the table. Defaults to the default schema for user.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="schema" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:213</id>
      <description>(Optional) Name of table that stores the generated id values. Defaults to a name chosen by persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="table" return-type="java.lang.String"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:214</id>
      <description>(Optional) Unique constraints that are to be placed on the table. These are only used if table generation is in effect. These constraints apply in addition to primary key constraints. Defaults to no additional constraints.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="uniqueConstraints" return-type="javax.persistence.UniqueConstraint[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:215</id>
      <description>(Optional) Name of the column that stores the last value generated. Defaults to a provider-chosen name.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="valueColumnName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:216</id>
      <description>The type used in mapping java.util.Date or java.util.Calendar.</description>
      <package>javax.persistence</package>
      <class-interface>Temporal</class-interface>
      <method name="value" return-type="javax.persistence.TemporalType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:217</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>TemporalType</class-interface>
      <method name="valueOf" return-type="javax.persistence.TemporalType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:218</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>TemporalType</class-interface>
      <method name="values" return-type="javax.persistence.TemporalType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:219</id>
      <description>Constructs a new TransactionRequiredException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>TransactionRequiredException</class-interface>
      <method name="TransactionRequiredException" return-type="TransactionRequiredException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:220</id>
      <description>Constructs a new TransactionRequiredException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>TransactionRequiredException</class-interface>
      <method name="TransactionRequiredException" return-type="TransactionRequiredException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:221</id>
      <description>(Required) An array of the column names that make up the constraint.</description>
      <package>javax.persistence</package>
      <class-interface>UniqueConstraint</class-interface>
      <method name="columnNames" return-type="java.lang.String[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:300</id>
      <description>(Required) Specification of field- or property-based access.</description>
      <package>javax.persistence</package>
      <class-interface>Access</class-interface>
      <method name="value" return-type="javax.persistence.AccessType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:301</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>AccessType</class-interface>
      <method name="valueOf" return-type="javax.persistence.AccessType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:302</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>AccessType</class-interface>
      <method name="values" return-type="javax.persistence.AccessType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:303</id>
      <description>The join table that maps the relationship. The joinTable element must be specified if a join table is used in the overriding of the mapping of the relationship. The joinTable element must not be specified if a foreign key mapping is used in the overriding of the relationship.</description>
      <package>javax.persistence</package>
      <class-interface>AssociationOverride</class-interface>
      <method name="joinTable" return-type="javax.persistence.JoinTable"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:304</id>
      <description>Whether the cache contains data for the given entity.</description>
      <package>javax.persistence</package>
      <class-interface>Cache</class-interface>
      <method name="contains" return-type="boolean">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:305</id>
      <description>Remove the data for the given entity from the cache.</description>
      <package>javax.persistence</package>
      <class-interface>Cache</class-interface>
      <method name="evict" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:306</id>
      <description>Remove the data for entities of the specified class (and its subclasses) from the cache.</description>
      <package>javax.persistence</package>
      <class-interface>Cache</class-interface>
      <method name="evict" return-type="void">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:307</id>
      <description>Clear the cache.</description>
      <package>javax.persistence</package>
      <class-interface>Cache</class-interface>
      <method name="evictAll" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:308</id>
      <description>(Optional) Whether or not the entity should be cached.</description>
      <package>javax.persistence</package>
      <class-interface>Cacheable</class-interface>
      <method name="value" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:309</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>CacheRetrieveMode</class-interface>
      <method name="valueOf" return-type="javax.persistence.CacheRetrieveMode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:310</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>CacheRetrieveMode</class-interface>
      <method name="values" return-type="javax.persistence.CacheRetrieveMode[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:311</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>CacheStoreMode</class-interface>
      <method name="valueOf" return-type="javax.persistence.CacheStoreMode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:312</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>CacheStoreMode</class-interface>
      <method name="values" return-type="javax.persistence.CacheStoreMode[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:313</id>
      <description>(Optional) The catalog of the table. If not specified, the default catalog is used.</description>
      <package>javax.persistence</package>
      <class-interface>CollectionTable</class-interface>
      <method name="catalog" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:314</id>
      <description>(Optional) The foreign key columns of the collection table which reference the primary table of the entity. The default only applies if a single join column is used. The default is the same as for JoinColumn (i.e., the concatenation of the following: the name of the entity; "_"; the name of the referenced primary key column.) However, if there is more than one join column, a JoinColumn annotation must be specified for each join column using the JoinColumns annotation. In this case, both the name and the referencedColumnName elements must be specified in each such JoinColumn annotation.</description>
      <package>javax.persistence</package>
      <class-interface>CollectionTable</class-interface>
      <method name="joinColumns" return-type="javax.persistence.JoinColumn[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:315</id>
      <description>(Optional) The name of the collection table. If not specified, it defaults to the concatenation of the name of the containing entity and the name of the collection attribute, separated by an underscore.</description>
      <package>javax.persistence</package>
      <class-interface>CollectionTable</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:316</id>
      <description>(Optional) The schema of the table. If not specified, the default schema for the user is used.</description>
      <package>javax.persistence</package>
      <class-interface>CollectionTable</class-interface>
      <method name="schema" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:317</id>
      <description>(Optional) Unique constraints that are to be placed on the table. These are only used if table generation is in effect.</description>
      <package>javax.persistence</package>
      <class-interface>CollectionTable</class-interface>
      <method name="uniqueConstraints" return-type="javax.persistence.UniqueConstraint[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:318</id>
      <description>(Optional) Whether the collection should be lazily loaded or must be eagerly fetched. The EAGER strategy is a requirement on the persistence provider runtime that the collection elements must be eagerly fetched. The LAZY strategy is a hint to the persistence provider runtime.</description>
      <package>javax.persistence</package>
      <class-interface>ElementCollection</class-interface>
      <method name="fetch" return-type="javax.persistence.FetchType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:319</id>
      <description>(Optional) The basic or embeddable class that is the element type of the collection. This element is optional only if the collection field or property is defined using Java generics, and must be specified otherwise. It defaults to the paramterized type of the collection when defined using generics.</description>
      <package>javax.persistence</package>
      <class-interface>ElementCollection</class-interface>
      <method name="targetClass" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:320</id>
      <description>Create an instance of TypedQuery for executing a Java Persistence query language named query. The select list of the query must contain only a single item, which must be assignable to the type specified by the resultClass argument.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNamedQuery" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:321</id>
      <description>Create an instance of TypedQuery for executing a criteria query.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaQuery</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:322</id>
      <description>Create an instance of TypedQuery for executing a Java Persistence query language statement. The select list of the query must contain only a single item, which must be assignable to the type specified by the resultClass argument.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:323</id>
      <description>Remove the given entity from the persistence context, causing a managed entity to become detached. Unflushed changes made to the entity if any (including removal of the entity), will not be synchronized to the database. Entities which previously referenced the detached entity will continue to reference it.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="detach" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:324</id>
      <description>Find by primary key, using the specified properties. Search for an entity of the specified class and primary key. If the entity instance is contained in the persistence context, it is returned from there. If a vendor-specific property or hint is not recognized, it is silently ignored.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:325</id>
      <description>Find by primary key and lock. Search for an entity of the specified class and primary key and lock it with respect to the specified lock type. If the entity instance is contained in the persistence context, it is returned from there, and the effect of this method is the same as if the lock method had been called on the entity. If the entity is found within the persistence context and the lock mode type is pessimistic and the entity has a version attribute, the persistence provider must perform optimistic version checks when obtaining the database lock. If these checks fail, the OptimisticLockException will be thrown. If the lock mode type is pessimistic and the entity instance is found but cannot be locked: the PessimisticLockException will be thrown if the database locking failure causes transaction-level rollback the LockTimeoutException will be thrown if the database locking failure causes only statement-level rollback</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:326</id>
      <description>Find by primary key and lock, using the specified properties. Search for an entity of the specified class and primary key and lock it with respect to the specified lock type. If the entity instance is contained in the persistence context, it is returned from there. If the entity is found within the persistence context and the lock mode type is pessimistic and the entity has a version attribute, the persistence provider must perform optimistic version checks when obtaining the database lock. If these checks fail, the OptimisticLockException will be thrown. If the lock mode type is pessimistic and the entity instance is found but cannot be locked: the PessimisticLockException will be thrown if the database locking failure causes transaction-level rollback the LockTimeoutException will be thrown if the database locking failure causes only statement-level rollback If a vendor-specific property or hint is not recognized, it is silently ignored. Portable applications should not rely on the standard timeout hint. Depending on the database in use and the locking mechanisms used by the provider, the hint may or may not be observed.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:327</id>
      <description>Return an instance of CriteriaBuilder for the creation of CriteriaQuery objects.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getCriteriaBuilder" return-type="javax.persistence.criteria.CriteriaBuilder"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:328</id>
      <description>Return the entity manager factory for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getEntityManagerFactory" return-type="javax.persistence.EntityManagerFactory"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:329</id>
      <description>Get the current lock mode for the entity instance.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:330</id>
      <description>Return an instance of Metamodel interface for access to the metamodel of the persistence unit.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getMetamodel" return-type="javax.persistence.metamodel.Metamodel"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:331</id>
      <description>Get the properties and hints and associated values that are in effect for the entity manager. Changing the contents of the map does not change the configuration in effect.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getProperties" return-type="java.util.Map"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:332</id>
      <description>Lock an entity instance that is contained in the persistence context with the specified lock mode type and with specified properties. If a pessimistic lock mode type is specified and the entity contains a version attribute, the persistence provider must also perform optimistic version checks when obtaining the database lock. If these checks fail, the OptimisticLockException will be thrown. If the lock mode type is pessimistic and the entity instance is found but cannot be locked: the PessimisticLockException will be thrown if the database locking failure causes transaction-level rollback the LockTimeoutException will be thrown if the database locking failure causes only statement-level rollback If a vendor-specific property or hint is not recognized, it is silently ignored. Portable applications should not rely on the standard timeout hint. Depending on the database in use and the locking mechanisms used by the provider, the hint may or may not be observed.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:333</id>
      <description>Refresh the state of the instance from the database, using the specified properties, and overwriting changes made to the entity, if any. If a vendor-specific property or hint is not recognized, it is silently ignored.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:334</id>
      <description>Refresh the state of the instance from the database, overwriting changes made to the entity, if any, and lock it with respect to given lock mode type. If the lock mode type is pessimistic and the entity instance is found but cannot be locked: the PessimisticLockException will be thrown if the database locking failure causes transaction-level rollback the LockTimeoutException will be thrown if the database locking failure causes only statement-level rollback.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:335</id>
      <description>Refresh the state of the instance from the database, overwriting changes made to the entity, if any, and lock it with respect to given lock mode type and with specified properties. If the lock mode type is pessimistic and the entity instance is found but cannot be locked: the PessimisticLockException will be thrown if the database locking failure causes transaction-level rollback the LockTimeoutException will be thrown if the database locking failure causes only statement-level rollback If a vendor-specific property or hint is not recognized, it is silently ignored. Portable applications should not rely on the standard timeout hint. Depending on the database in use and the locking mechanisms used by the provider, the hint may or may not be observed.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:336</id>
      <description>Set an entity manager property or hint. If a vendor-specific property or hint is not recognized, it is silently ignored.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="setProperty" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:337</id>
      <description>Return an object of the specified type to allow access to the provider-specific API. If the provider's EntityManager implementation does not support the specified class, the PersistenceException is thrown.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:338</id>
      <description>Access the cache that is associated with the entity manager factory (the "second level cache").</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getCache" return-type="javax.persistence.Cache"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:339</id>
      <description>Return an instance of CriteriaBuilder for the creation of CriteriaQuery objects.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getCriteriaBuilder" return-type="javax.persistence.criteria.CriteriaBuilder"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:340</id>
      <description>Return an instance of Metamodel interface for access to the metamodel of the persistence unit.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getMetamodel" return-type="javax.persistence.metamodel.Metamodel"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:341</id>
      <description>Return interface providing access to utility methods for the persistence unit.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getPersistenceUnitUtil" return-type="javax.persistence.PersistenceUnitUtil"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:342</id>
      <description>Get the properties and associated values that are in effect for the entity manager factory. Changing the contents of the map does not change the configuration in effect.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getProperties" return-type="java.util.Map"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:343</id>
      <description>Returns the object that caused this exception.</description>
      <package>javax.persistence</package>
      <class-interface>LockTimeoutException</class-interface>
      <method name="getObject" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:344</id>
      <description>Constructs a new LockTimeoutException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>LockTimeoutException</class-interface>
      <method name="LockTimeoutException" return-type="LockTimeoutException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:345</id>
      <description>Constructs a new LockTimeoutException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>LockTimeoutException</class-interface>
      <method name="LockTimeoutException" return-type="LockTimeoutException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:346</id>
      <description>Constructs a new LockTimeoutException exception with the specified detail message and cause.</description>
      <package>javax.persistence</package>
      <class-interface>LockTimeoutException</class-interface>
      <method name="LockTimeoutException" return-type="LockTimeoutException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:347</id>
      <description>Constructs a new LockTimeoutException exception with the specified cause.</description>
      <package>javax.persistence</package>
      <class-interface>LockTimeoutException</class-interface>
      <method name="LockTimeoutException" return-type="LockTimeoutException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:348</id>
      <description>Constructs a new LockTimeoutException exception with the specified object.</description>
      <package>javax.persistence</package>
      <class-interface>LockTimeoutException</class-interface>
      <method name="LockTimeoutException" return-type="LockTimeoutException">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:349</id>
      <description>Constructs a new LockTimeoutException exception with the specified detail message, cause, and entity.</description>
      <package>javax.persistence</package>
      <class-interface>LockTimeoutException</class-interface>
      <method name="LockTimeoutException" return-type="LockTimeoutException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:350</id>
      <description>(Required) The type of the map key.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyClass</class-interface>
      <method name="value" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:351</id>
      <description>(Optional) The SQL fragment that is used when generating the DDL for the column. Defaults to the generated SQL to create a column of the inferred type.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="columnDefinition" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:352</id>
      <description>(Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="insertable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:353</id>
      <description>(Optional) The column length. (Applies only if a string-valued column is used.)</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="length" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:354</id>
      <description>(Optional) The name of the map key column. The table in which it is found depends upon the context. If the map key is for an element collection, the map key column is in the collection table for the map value. If the map key is for a ManyToMany entity relationship or for a OneToMany entity relationship using a join table, the map key column is in a join table. If the map key is for a OneToMany entity relationship using a foreign key mapping strategy, the map key column is in the table of the entity that is the value of the map. Defaults to the concatenation of the following: the name of the referencing relationship field or property; "_"; "KEY".</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:355</id>
      <description>(Optional) Whether the database column is nullable.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="nullable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:356</id>
      <description>(Optional) The precision for a decimal (exact numeric) column. (Applies only if a decimal column is used.) Default: 0. (The value must be set by the developer.)</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="precision" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:357</id>
      <description>(Optional) The scale for a decimal (exact numeric) column. (Applies only if a decimal column is used.)</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="scale" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:358</id>
      <description>(Optional) The name of the table that contains the column. Defaults: If the map key is for an element collection, the name of the collection table for the map value. If the map key is for a OneToMany or ManyToMany entity relationship using a join table, the name of the join table for the map. If the map key is for a OneToMany entity relationship using a foreign key mapping strategy, the name of the primary table of the entity that is the value of the map.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="table" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:359</id>
      <description>(Optional) Whether the column is a unique key. This is a shortcut for the UniqueConstraint annotation at the table level and is useful for when the unique key constraint corresponds to only a single column. This constraint applies in addition to any constraint entailed by primary key mapping and to constraints specified at the table level.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="unique" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:360</id>
      <description>(Optional) Whether the column is included in SQL UPDATE statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyColumn</class-interface>
      <method name="updatable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:361</id>
      <description>(Optional) The type used in mapping a map key enum type.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyEnumerated</class-interface>
      <method name="value" return-type="javax.persistence.EnumType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:362</id>
      <description>(Optional) The SQL fragment that is used when generating the DDL for the column. Defaults to SQL generated by the provider for the column.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="columnDefinition" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:363</id>
      <description>(Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="insertable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:364</id>
      <description>(Optional) The name of the foreign key column for the map key. The table in which it is found depends upon the context. If the join is for a map key for an element collection, the foreign key column is in the collection table for the map value. If the join is for a map key for a ManyToMany entity relationship or for a OneToMany entity relationship using a join table, the foreign key column is in a join table. If the join is for a OneToMany entity relationship using a foreign key mapping strategy, the foreign key column for the map key is in the table of the entity that is the value of the map. Default (only applies if a single join column is used.) The concatenation of the following: the name of the referencing relationship property or field of the referencing entity or embeddable class; "_"; "KEY".</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:365</id>
      <description>(Optional) Whether the foreign key column is nullable.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="nullable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:366</id>
      <description>(Optional) The name of the column referenced by this foreign key column. The referenced column is in the table of the target entity. Default (only applies if single join column is being used.) The same name as the primary key column of the referenced table</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="referencedColumnName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:367</id>
      <description>(Optional) The name of the table that contains the foreign key column. If the join is for a map key for an element collection, the foreign key column is in the collection table for the map value. If the join is for a map key for a ManyToMany entity relationship or for a OneToMany entity relationship using a join table, the foreign key column is in a join table. If the join is for a OneToMany entity relationship using a foreign key mapping strategy, the foreign key column for the map key is in the table of the entity that is the value of the map. Default: If the map is for an element collection, the name of the collection table for the map value. If the map is for a OneToMany or ManyToMany entity relationship using a join table, the name of the join table for the map. If the map is for a OneToMany entity relationship using a foreign key mapping strategy, the name of the primary table of the entity that is the value of the map.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="table" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:368</id>
      <description>(Optional) Whether the property is a unique key. This is a shortcut for the UniqueConstraint annotation at the table level and is useful for when the unique key constraint is only a single field.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="unique" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:369</id>
      <description>(Optional) Whether the column is included in SQL UPDATE statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="updatable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:370</id>
      <description>(Required) The map key join columns that are used to map to the entity that is the map key.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumns</class-interface>
      <method name="value" return-type="javax.persistence.MapKeyJoinColumn[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:371</id>
      <description>(Required) The type used in mapping java.util.Date or java.util.Calendar.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyTemporal</class-interface>
      <method name="value" return-type="javax.persistence.TemporalType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:372</id>
      <description>(Optional) The name of the attribute within the composite key to which the relationship attribute corresponds. If not supplied, the relationship maps the entity's primary key.</description>
      <package>javax.persistence</package>
      <class-interface>MapsId</class-interface>
      <method name="value" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:373</id>
      <description>(Optional) The lock mode type to use in query execution. If a lockMode other than LockModeType.NONE is specified, the query must be executed in a transaction and the persistence context joined to the transaction.</description>
      <package>javax.persistence</package>
      <class-interface>NamedQuery</class-interface>
      <method name="lockMode" return-type="javax.persistence.LockModeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:374</id>
      <description>(Optional) Whether to apply the remove operation to entities that have been removed from the relationship and to cascade the remove operation to those entities.</description>
      <package>javax.persistence</package>
      <class-interface>OneToMany</class-interface>
      <method name="orphanRemoval" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:375</id>
      <description>(Optional) Whether to apply the remove operation to entities that have been removed from the relationship and to cascade the remove operation to those entities.</description>
      <package>javax.persistence</package>
      <class-interface>OneToOne</class-interface>
      <method name="orphanRemoval" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:376</id>
      <description>(Optional) The SQL fragment that is used when generating the DDL for the column. Defaults to generated SQL to create a column of the inferred type.</description>
      <package>javax.persistence</package>
      <class-interface>OrderColumn</class-interface>
      <method name="columnDefinition" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:377</id>
      <description>(Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>OrderColumn</class-interface>
      <method name="insertable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:378</id>
      <description>(Optional) The name of the ordering column. Defaults to the concatenation of the name of the referencing property or field; "_"; "ORDER".</description>
      <package>javax.persistence</package>
      <class-interface>OrderColumn</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:379</id>
      <description>(Optional) Whether the database column is nullable.</description>
      <package>javax.persistence</package>
      <class-interface>OrderColumn</class-interface>
      <method name="nullable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:380</id>
      <description>(Optional) Whether the column is included in SQL UPDATE statements generated by the persistence provider.</description>
      <package>javax.persistence</package>
      <class-interface>OrderColumn</class-interface>
      <method name="updatable" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:381</id>
      <description>Return the parameter name, or null if the parameter is not a named parameter or no name has been assigned.</description>
      <package>javax.persistence</package>
      <class-interface>Parameter</class-interface>
      <method name="getName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:382</id>
      <description>Return the Java type of the parameter. Values bound to the parameter must be assignable to this type. This method is required to be supported for criteria queries only. Applications that use this method for Java Persistence query language queries and native queries will not be portable.</description>
      <package>javax.persistence</package>
      <class-interface>Parameter</class-interface>
      <method name="getParameterType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:383</id>
      <description>Return the parameter position, or null if the parameter is not a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>Parameter</class-interface>
      <method name="getPosition" return-type="java.lang.Integer"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:384</id>
      <description>Return the PersistenceUtil instance</description>
      <package>javax.persistence</package>
      <class-interface>Persistence</class-interface>
      <method name="getPersistenceUtil" return-type="javax.persistence.PersistenceUtil"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:385</id>
      <description>Return the id of the entity. A generated id is not guaranteed to be available until after the database insert has occurred. Returns null if the entity does not yet have an id.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnitUtil</class-interface>
      <method name="getIdentifier" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:386</id>
      <description>Determine the load state of a given persistent attribute of an entity belonging to the persistence unit.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnitUtil</class-interface>
      <method name="isLoaded" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:387</id>
      <description>Determine the load state of an entity belonging to the persistence unit. This method can be used to determine the load state of an entity passed as a reference. An entity is considered loaded if all attributes for which FetchType.EAGER has been specified have been loaded. The isLoaded(Object, String) method should be used to determine the load state of an attribute. Not doing so might lead to unintended loading of state.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnitUtil</class-interface>
      <method name="isLoaded" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:388</id>
      <description>Determine the load state of a given persistent attribute.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUtil</class-interface>
      <method name="isLoaded" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:389</id>
      <description>Determine the load state of an entity. This method can be used to determine the load state of an entity passed as a reference. An entity is considered loaded if all attributes for which FetchType.EAGER has been specified have been loaded. The isLoaded(Object, String) method should be used to determine the load state of an attribute. Not doing so might lead to unintended loading of state.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUtil</class-interface>
      <method name="isLoaded" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:390</id>
      <description>Returns the entity that caused this exception.</description>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockException</class-interface>
      <method name="getEntity" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:391</id>
      <description>Constructs a new PessimisticLockException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockException</class-interface>
      <method name="PessimisticLockException" return-type="PessimisticLockException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:392</id>
      <description>Constructs a new PessimisticLockException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockException</class-interface>
      <method name="PessimisticLockException" return-type="PessimisticLockException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:393</id>
      <description>Constructs a new PessimisticLockException exception with the specified detail message and cause.</description>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockException</class-interface>
      <method name="PessimisticLockException" return-type="PessimisticLockException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:394</id>
      <description>Constructs a new PessimisticLockException exception with the specified cause.</description>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockException</class-interface>
      <method name="PessimisticLockException" return-type="PessimisticLockException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:395</id>
      <description>Constructs a new PessimisticLockException exception with the specified entity.</description>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockException</class-interface>
      <method name="PessimisticLockException" return-type="PessimisticLockException">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:396</id>
      <description>Constructs a new PessimisticLockException exception with the specified detail message, cause, and entity.</description>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockException</class-interface>
      <method name="PessimisticLockException" return-type="PessimisticLockException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:397</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockScope</class-interface>
      <method name="valueOf" return-type="javax.persistence.PessimisticLockScope">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:398</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>PessimisticLockScope</class-interface>
      <method name="values" return-type="javax.persistence.PessimisticLockScope[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:399</id>
      <description>The position of the first result the query object was set to retrieve. Returns 0 if setFirstResult was not applied to the query object.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getFirstResult" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:400</id>
      <description>Get the flush mode in effect for the query execution. If a flush mode has not been set for the query object, returns the flush mode in effect for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getFlushMode" return-type="javax.persistence.FlushModeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:401</id>
      <description>Get the properties and hints and associated values that are in effect for the query instance.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getHints" return-type="java.util.Map"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:402</id>
      <description>Get the current lock mode for the query. Returns null if a lock mode has not been set on the query object.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:403</id>
      <description>The maximum number of results the query object was set to retrieve. Returns Integer.MAX_VALUE if setMaxResults was not applied to the query object.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getMaxResults" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:404</id>
      <description>Get the parameter object corresponding to the declared parameter of the given name. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:405</id>
      <description>Get the parameter object corresponding to the declared parameter of the given name and type. This method is required to be supported for criteria queries only.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:406</id>
      <description>Get the parameter object corresponding to the declared positional parameter with the given position. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:407</id>
      <description>Get the parameter object corresponding to the declared positional parameter with the given position and type. This method is not required to be supported by the provider.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:408</id>
      <description>Get the parameter objects corresponding to the declared parameters of the query. Returns empty set if the query has no parameters. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameters" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:409</id>
      <description>Return the input value bound to the parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:410</id>
      <description>Return the input value bound to the named parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:411</id>
      <description>Return the input value bound to the positional parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:412</id>
      <description>Return a boolean indicating whether a value has been bound to the parameter.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="isBound" return-type="boolean">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:413</id>
      <description>Set the lock mode type to be used for the query execution.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setLockMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:414</id>
      <description>Bind the value of a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:415</id>
      <description>Bind an instance of java.util.Calendar to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:416</id>
      <description>Bind an instance of java.util.Date to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:417</id>
      <description>Return an object of the specified type to allow access to the provider-specific API. If the provider's query implementation does not support the specified class, the PersistenceException is thrown.</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:418</id>
      <description>Returns the query that caused this exception.</description>
      <package>javax.persistence</package>
      <class-interface>QueryTimeoutException</class-interface>
      <method name="getQuery" return-type="javax.persistence.Query"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:419</id>
      <description>Constructs a new QueryTimeoutException exception with null as its detail message.</description>
      <package>javax.persistence</package>
      <class-interface>QueryTimeoutException</class-interface>
      <method name="QueryTimeoutException" return-type="QueryTimeoutException"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:420</id>
      <description>Constructs a new QueryTimeoutException exception with the specified detail message.</description>
      <package>javax.persistence</package>
      <class-interface>QueryTimeoutException</class-interface>
      <method name="QueryTimeoutException" return-type="QueryTimeoutException">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:421</id>
      <description>Constructs a new QueryTimeoutException exception with the specified detail message and cause.</description>
      <package>javax.persistence</package>
      <class-interface>QueryTimeoutException</class-interface>
      <method name="QueryTimeoutException" return-type="QueryTimeoutException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:422</id>
      <description>Constructs a new QueryTimeoutException exception with the specified cause.</description>
      <package>javax.persistence</package>
      <class-interface>QueryTimeoutException</class-interface>
      <method name="QueryTimeoutException" return-type="QueryTimeoutException">
        <parameters>
          <parameter>java.lang.Throwable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:423</id>
      <description>Constructs a new QueryTimeoutException exception with the specified query.</description>
      <package>javax.persistence</package>
      <class-interface>QueryTimeoutException</class-interface>
      <method name="QueryTimeoutException" return-type="QueryTimeoutException">
        <parameters>
          <parameter>javax.persistence.Query</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:424</id>
      <description>Constructs a new QueryTimeoutException exception with the specified detail message, cause, and query.</description>
      <package>javax.persistence</package>
      <class-interface>QueryTimeoutException</class-interface>
      <method name="QueryTimeoutException" return-type="QueryTimeoutException">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Throwable</parameter>
          <parameter>javax.persistence.Query</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:425</id>
      <description>(Optional) The catalog of the sequence generator.</description>
      <package>javax.persistence</package>
      <class-interface>SequenceGenerator</class-interface>
      <method name="catalog" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:426</id>
      <description>(Optional) The schema of the sequence generator.</description>
      <package>javax.persistence</package>
      <class-interface>SequenceGenerator</class-interface>
      <method name="schema" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:427</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>SharedCacheMode</class-interface>
      <method name="valueOf" return-type="javax.persistence.SharedCacheMode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:428</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>SharedCacheMode</class-interface>
      <method name="values" return-type="javax.persistence.SharedCacheMode[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:429</id>
      <description>Get the value of the specified tuple element.</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.TupleElement</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:430</id>
      <description>Get the value of the tuple element to which the specified alias has been assigned.</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:431</id>
      <description>Get the value of the tuple element to which the specified alias has been assigned.</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:432</id>
      <description>Get the value of the element at the specified position in the result tuple. The first position is 0.</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:433</id>
      <description>Get the value of the element at the specified position in the result tuple. The first position is 0.</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:434</id>
      <description>Return the tuple elements.</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="getElements" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:435</id>
      <description>Return the values of the result tuple elements as an array.</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="toArray" return-type="java.lang.Object[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:436</id>
      <description>Return the alias assigned to the tuple element or null, if no alias has been assigned.</description>
      <package>javax.persistence</package>
      <class-interface>TupleElement</class-interface>
      <method name="getAlias" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:437</id>
      <description>Return the Java type of the tuple element.</description>
      <package>javax.persistence</package>
      <class-interface>TupleElement</class-interface>
      <method name="getJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:438</id>
      <description>Execute a SELECT query and return the query results as a typed List.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:439</id>
      <description>Execute a SELECT query that returns a single result.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:440</id>
      <description>Set the position of the first result to retrieve.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setFirstResult" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:441</id>
      <description>Set the flush mode type to be used for the query execution. The flush mode type applies to the query regardless of the flush mode type in use for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setFlushMode" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.FlushModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:442</id>
      <description>Set a query property or hint. The hints elements may be used to specify query properties and hints. Properties defined by this specification must be observed by the provider. Vendor-specific hints that are not recognized by a provider must be silently ignored. Portable applications should not rely on the standard timeout hint. Depending on the database in use and the locking mechanisms used by the provider, this hint may or may not be observed.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setHint" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:443</id>
      <description>Set the lock mode type to be used for the query execution.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setLockMode" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:444</id>
      <description>Set the maximum number of results to retrieve.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setMaxResults" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:445</id>
      <description>Bind the value of a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:446</id>
      <description>Bind an instance of java.util.Calendar to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:447</id>
      <description>Bind an instance of java.util.Date to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:448</id>
      <description>Bind an argument value to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:449</id>
      <description>Bind an instance of java.util.Calendar to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:450</id>
      <description>Bind an instance of java.util.Date to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:451</id>
      <description>Bind an argument value to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:452</id>
      <description>Bind an instance of java.util.Calendar to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:453</id>
      <description>Bind an instance of java.util.Date to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:454</id>
      <description>(Optional) Constraint name. A provider-chosen name will be chosen if a name is not specified.</description>
      <package>javax.persistence</package>
      <class-interface>UniqueConstraint</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:455</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>ValidationMode</class-interface>
      <method name="valueOf" return-type="javax.persistence.ValidationMode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:456</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>ValidationMode</class-interface>
      <method name="values" return-type="javax.persistence.ValidationMode[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:457</id>
      <description>if the entity manager is container-managed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="close" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:458</id>
      <description>if not an entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="contains" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:459</id>
      <description>if a query has not been defined with the given name or if the query string is found to be invalid</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNamedQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:460</id>
      <description>if a query has not been defined with the given name or if the query string is found to be invalid or if the query result is found to not be assignable to the specified type</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNamedQuery" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:461</id>
      <description>if the query string is found to be invalid</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:462</id>
      <description>if the criteria query is found to be invalid</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaQuery</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:463</id>
      <description>if the query string is found to be invalid or if the query result is found to not be assignable to the specified type</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:464</id>
      <description>if the instance is not an entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="detach" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:465</id>
      <description>if the first argument does not denote an entity type or the second argument is is not a valid type for that entity's primary key or is null</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:466</id>
      <description>if the first argument does not denote an entity type or the second argument is is not a valid type for that entity's primary key or is null</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:467</id>
      <description>if the first argument does not denote an entity type or the second argument is not a valid type for that entity's primary key or is null</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:468</id>
      <description>if there is no transaction and a lock mode other than NONE is specified or if invoked on an entity manager which has not been joined to the current transaction and a lock mode other than NONE is specified</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:469</id>
      <description>if the optimistic version check fails</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.OptimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:470</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:471</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:472</id>
      <description>if an unsupported lock call is made</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:473</id>
      <description>if the first argument does not denote an entity type or the second argument is not a valid type for that entity's primary key or is null</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:474</id>
      <description>if there is no transaction and a lock mode other than NONE is specified or if invoked on an entity manager which has not been joined to the current transaction and a lock mode other than NONE is specified</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:475</id>
      <description>if the optimistic version check fails</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.OptimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:476</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:477</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:478</id>
      <description>if an unsupported lock call is made</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="find" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:479</id>
      <description>if there is no transaction or if the entity manager has not been joined to the current transaction</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="flush" return-type="void">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:480</id>
      <description>if the flush fails</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="flush" return-type="void">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:481</id>
      <description>if the entity manager has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getCriteriaBuilder" return-type="javax.persistence.criteria.CriteriaBuilder">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:482</id>
      <description>if the entity manager has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getEntityManagerFactory" return-type="javax.persistence.EntityManagerFactory">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:483</id>
      <description>if there is no transaction or if the entity manager has not been joined to the current transaction</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:484</id>
      <description>if the instance is not a managed entity and a transaction is active</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:485</id>
      <description>if the entity manager has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getMetamodel" return-type="javax.persistence.metamodel.Metamodel">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:486</id>
      <description>if the first argument does not denote an entity type or the second argument is not a valid type for that entity's primary key or is null</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getReference" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:487</id>
      <description>if the entity state cannot be accessed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getReference" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.persistence.EntityNotFoundException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:488</id>
      <description>if invoked on a JTA entity manager</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getTransaction" return-type="javax.persistence.EntityTransaction">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:489</id>
      <description>if there is no transaction</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="joinTransaction" return-type="void">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:490</id>
      <description>if the instance is not an entity or is a detached entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:491</id>
      <description>if there is no transaction or if invoked on an entity manager which has not been joined to the current transaction</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:492</id>
      <description>if the entity does not exist in the database when pessimistic locking is performed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.EntityNotFoundException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:493</id>
      <description>if the optimistic version check fails</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.OptimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:494</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:495</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:496</id>
      <description>if an unsupported lock call is made</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:497</id>
      <description>if the instance is not an entity or is a detached entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:498</id>
      <description>if there is no transaction or if invoked on an entity manager which has not been joined to the current transaction</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:499</id>
      <description>if the entity does not exist in the database when pessimistic locking is performed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.EntityNotFoundException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:500</id>
      <description>if the optimistic version check fails</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.OptimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:501</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:502</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:503</id>
      <description>if an unsupported lock call is made</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="lock" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:504</id>
      <description>if instance is not an entity or is a removed entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="merge" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:505</id>
      <description>if there is no transaction when invoked on a container-managed entity manager of that is of type PersistenceContextType.TRANSACTION</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="merge" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:506</id>
      <description>if the entity already exists. (If the entity already exists, the EntityExistsException may be thrown when the persist operation is invoked, or the EntityExistsException or another PersistenceException may be thrown at flush or commit time.)</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="persist" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.persistence.EntityExistsException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:507</id>
      <description>if the instance is not an entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="persist" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:508</id>
      <description>if there is no transaction when invoked on a container-managed entity manager of that is of type PersistenceContextType.TRANSACTION</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="persist" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:509</id>
      <description>if the instance is not an entity or the entity is not managed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:510</id>
      <description>if there is no transaction when invoked on a container-managed entity manager of type PersistenceContextType.TRANSACTION</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:511</id>
      <description>if the entity no longer exists in the database</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.persistence.EntityNotFoundException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:512</id>
      <description>if the instance is not an entity or the entity is not managed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:513</id>
      <description>if there is no transaction when invoked on a container-managed entity manager of type PersistenceContextType.TRANSACTION</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:514</id>
      <description>if the entity no longer exists in the database</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.EntityNotFoundException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:515</id>
      <description>if the instance is not an entity or the entity is not managed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:516</id>
      <description>if invoked on a container-managed entity manager of type PersistenceContextType.TRANSACTION when there is no transaction; if invoked on an extended entity manager when there is no transaction and a lock mode other than NONE has been specified; or if invoked on an extended entity manager that has not been joined to the current transaction and a lock mode other than NONE has been specified</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:517</id>
      <description>if the entity no longer exists in the database</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.EntityNotFoundException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:518</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:519</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:520</id>
      <description>if an unsupported lock call is made</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:521</id>
      <description>if the instance is not an entity or the entity is not managed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:522</id>
      <description>if invoked on a container-managed entity manager of type PersistenceContextType.TRANSACTION when there is no transaction; if invoked on an extended entity manager when there is no transaction and a lock mode other than NONE has been specified; or if invoked on an extended entity manager that has not been joined to the current transaction and a lock mode other than NONE has been specified</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:523</id>
      <description>if the entity no longer exists in the database</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.EntityNotFoundException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:524</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:525</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:526</id>
      <description>if an unsupported lock call is made</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="refresh" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.LockModeType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:527</id>
      <description>if the instance is not an entity or is a detached entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="remove" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:528</id>
      <description>if invoked on a container-managed entity manager of type PersistenceContextType.TRANSACTION and there is no transaction</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="remove" return-type="void">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:529</id>
      <description>if the second argument is not valid for the implementation</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="setProperty" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:530</id>
      <description>if the provider does not support the call</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:531</id>
      <description>if the entity manager factory has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="close" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:532</id>
      <description>if the entity manager factory has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="createEntityManager" return-type="javax.persistence.EntityManager">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:533</id>
      <description>if the entity manager factory has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="createEntityManager" return-type="javax.persistence.EntityManager">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:534</id>
      <description>if the entity manager factory has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getCache" return-type="javax.persistence.Cache">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:535</id>
      <description>if the entity manager factory has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getCriteriaBuilder" return-type="javax.persistence.criteria.CriteriaBuilder">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:536</id>
      <description>if the entity manager factory has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getMetamodel" return-type="javax.persistence.metamodel.Metamodel">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:537</id>
      <description>if the entity manager factory has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getPersistenceUnitUtil" return-type="javax.persistence.PersistenceUnitUtil">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:538</id>
      <description>if the entity manager factory has been closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="getProperties" return-type="java.util.Map">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:539</id>
      <description>if isActive() is true</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="begin" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:540</id>
      <description>if isActive() is false</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="commit" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:541</id>
      <description>if the commit fails</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="commit" return-type="void">
        <throw>javax.persistence.RollbackException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:542</id>
      <description>if isActive() is false</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="getRollbackOnly" return-type="boolean">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:543</id>
      <description>if an unexpected error condition is encountered</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="isActive" return-type="boolean">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:544</id>
      <description>if isActive() is false</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="rollback" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:545</id>
      <description>if an unexpected error condition is encountered</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="rollback" return-type="void">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:546</id>
      <description>if isActive() is false</description>
      <package>javax.persistence</package>
      <class-interface>EntityTransaction</class-interface>
      <method name="setRollbackOnly" return-type="void">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:547</id>
      <description>if invoked on a parameter obtained from a Java persistence query language query or native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>Parameter</class-interface>
      <method name="getParameterType" return-type="java.lang.Class">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:548</id>
      <description>if the object is found not to be an entity</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnitUtil</class-interface>
      <method name="getIdentifier" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:549</id>
      <description>Determine the load state of a given persistent attribute.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnitUtil.{javax.persistence.PersistenceUtil}</class-interface>
      <method name="isLoaded" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:550</id>
      <description>Determine the load state of an entity. This method can be used to determine the load state of an entity passed as a reference. An entity is considered loaded if all attributes for which FetchType.EAGER has been specified have been loaded. The isLoaded(Object, String) method should be used to determine the load state of an attribute. Not doing so might lead to unintended loading of state.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceUnitUtil.{javax.persistence.PersistenceUtil}</class-interface>
      <method name="isLoaded" return-type="boolean">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:551</id>
      <description>if called for a Java Persistence query language SELECT statement or for a criteria query</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:552</id>
      <description>if there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:553</id>
      <description>if the statement execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:554</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:555</id>
      <description>if the query is found not to be a Java Persistence query language SELECT query or a Criteria API query</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:556</id>
      <description>if the parameter of the specified name does not exist</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:557</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:558</id>
      <description>if the parameter of the specified name does not exist or is not assignable to the type</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:559</id>
      <description>if invoked on a native query or Java Persistence query language query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:560</id>
      <description>if the parameter with the specified position does not exist</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:561</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:562</id>
      <description>if the parameter with the specified position does not exist or is not assignable to the type</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:563</id>
      <description>if invoked on a native query or Java Persistence query language query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:564</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameters" return-type="java.util.Set">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:565</id>
      <description>if the parameter is not a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:566</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:567</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:568</id>
      <description>if the parameter of the specified name does not exist</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:569</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:570</id>
      <description>if the parameter with the specified position does not exist</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:571</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:572</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:573</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:574</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:575</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:576</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:577</id>
      <description>if there is no result</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NoResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:578</id>
      <description>if more than one result</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NonUniqueResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:579</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:580</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:581</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:582</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:583</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:584</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:585</id>
      <description>if the argument is negative</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setFirstResult" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:586</id>
      <description>if the second argument is not valid for the implementation</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setHint" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:587</id>
      <description>if the query is found not to be a Java Persistence query language SELECT query or a CriteriaQuery query</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setLockMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:588</id>
      <description>if the argument is negative</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setMaxResults" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:589</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:590</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:591</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:592</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:593</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:594</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:595</id>
      <description>if position does not correspond to a positional parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:596</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:597</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:598</id>
      <description>if the provider does not support the call</description>
      <package>javax.persistence</package>
      <class-interface>Query</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:599</id>
      <description>if tuple element does not correspond to an element in the query result tuple</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.TupleElement</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:600</id>
      <description>if alias does not correspond to an element in the query result tuple or element cannot be assigned to the specified type</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:601</id>
      <description>if alias does not correspond to an element in the query result tuple</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:602</id>
      <description>if i exceeds length of result tuple or element cannot be assigned to the specified type</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:603</id>
      <description>if i exceeds length of result tuple</description>
      <package>javax.persistence</package>
      <class-interface>Tuple</class-interface>
      <method name="get" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:604</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:605</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:606</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:607</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:608</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:609</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:610</id>
      <description>if there is no result</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NoResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:611</id>
      <description>if more than one result</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NonUniqueResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:612</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:613</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:614</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:615</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:616</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:617</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:618</id>
      <description>if the argument is negative</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setFirstResult" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:619</id>
      <description>if the second argument is not valid for the implementation</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setHint" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:620</id>
      <description>if the query is found not to be a Java Persistence query language SELECT query or a CriteriaQuery query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setLockMode" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:621</id>
      <description>if the argument is negative</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setMaxResults" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:622</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:623</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:624</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:625</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:626</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:627</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:628</id>
      <description>if position does not correspond to a positional parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:629</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:630</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.TypedQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:631</id>
      <description>Execute an update or delete statement.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:632</id>
      <description>if called for a Java Persistence query language SELECT statement or for a criteria query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:633</id>
      <description>if there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:634</id>
      <description>if the statement execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:635</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:636</id>
      <description>The position of the first result the query object was set to retrieve. Returns 0 if setFirstResult was not applied to the query object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getFirstResult" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:637</id>
      <description>Get the flush mode in effect for the query execution. If a flush mode has not been set for the query object, returns the flush mode in effect for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getFlushMode" return-type="javax.persistence.FlushModeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:638</id>
      <description>Get the properties and hints and associated values that are in effect for the query instance.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getHints" return-type="java.util.Map"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:639</id>
      <description>Get the current lock mode for the query. Returns null if a lock mode has not been set on the query object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:640</id>
      <description>if the query is found not to be a Java Persistence query language SELECT query or a Criteria API query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:641</id>
      <description>The maximum number of results the query object was set to retrieve. Returns Integer.MAX_VALUE if setMaxResults was not applied to the query object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getMaxResults" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:642</id>
      <description>Get the parameter object corresponding to the declared parameter of the given name. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:643</id>
      <description>if the parameter of the specified name does not exist</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:644</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:645</id>
      <description>Get the parameter object corresponding to the declared parameter of the given name and type. This method is required to be supported for criteria queries only.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:646</id>
      <description>if the parameter of the specified name does not exist or is not assignable to the type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:647</id>
      <description>if invoked on a native query or Java Persistence query language query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:648</id>
      <description>Get the parameter object corresponding to the declared positional parameter with the given position. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:649</id>
      <description>if the parameter with the specified position does not exist</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:650</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:651</id>
      <description>Get the parameter object corresponding to the declared positional parameter with the given position and type. This method is not required to be supported by the provider.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:652</id>
      <description>if the parameter with the specified position does not exist or is not assignable to the type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:653</id>
      <description>if invoked on a native query or Java Persistence query language query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:654</id>
      <description>Get the parameter objects corresponding to the declared parameters of the query. Returns empty set if the query has no parameters. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameters" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:655</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameters" return-type="java.util.Set">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:656</id>
      <description>Return the input value bound to the parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:657</id>
      <description>if the parameter is not a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:658</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:659</id>
      <description>Return the input value bound to the named parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:660</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:661</id>
      <description>if the parameter of the specified name does not exist</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:662</id>
      <description>Return the input value bound to the positional parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:663</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:664</id>
      <description>if the parameter with the specified position does not exist</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:665</id>
      <description>Execute a SELECT query and return the query results as an untyped List.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:666</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:667</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:668</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:669</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:670</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:671</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:672</id>
      <description>Execute a SELECT query that returns a single untyped result.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:673</id>
      <description>if there is no result</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NoResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:674</id>
      <description>if more than one result</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NonUniqueResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:675</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:676</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:677</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:678</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:679</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:680</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:681</id>
      <description>Return a boolean indicating whether a value has been bound to the parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="isBound" return-type="boolean">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:682</id>
      <description>Set the position of the first result to retrieve.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setFirstResult" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:683</id>
      <description>if the argument is negative</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setFirstResult" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:684</id>
      <description>Set the flush mode type to be used for the query execution. The flush mode type applies to the query regardless of the flush mode type in use for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setFlushMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.FlushModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:685</id>
      <description>Set a query property or hint. The hints elements may be used to specify query properties and hints. Properties defined by this specification must be observed by the provider. Vendor-specific hints that are not recognized by a provider must be silently ignored. Portable applications should not rely on the standard timeout hint. Depending on the database in use and the locking mechanisms used by the provider, this hint may or may not be observed.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setHint" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:686</id>
      <description>if the second argument is not valid for the implementation</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setHint" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:687</id>
      <description>Set the lock mode type to be used for the query execution.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setLockMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:688</id>
      <description>if the query is found not to be a Java Persistence query language SELECT query or a CriteriaQuery query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setLockMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:689</id>
      <description>Set the maximum number of results to retrieve.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setMaxResults" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:690</id>
      <description>if the argument is negative</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setMaxResults" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:691</id>
      <description>Bind the value of a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:692</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:693</id>
      <description>Bind an instance of java.util.Calendar to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:694</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:695</id>
      <description>Bind an instance of java.util.Date to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:696</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:697</id>
      <description>Bind an argument value to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:698</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:699</id>
      <description>Bind an instance of java.util.Calendar to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:700</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:701</id>
      <description>Bind an instance of java.util.Date to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:702</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:703</id>
      <description>Bind an argument value to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:704</id>
      <description>if position does not correspond to a positional parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:705</id>
      <description>Bind an instance of java.util.Calendar to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:706</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:707</id>
      <description>Bind an instance of java.util.Date to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:708</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:709</id>
      <description>Return an object of the specified type to allow access to the provider-specific API. If the provider's query implementation does not support the specified class, the PersistenceException is thrown.</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:710</id>
      <description>if the provider does not support the call</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery.{javax.persistence.Query}</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:711</id>
      <description>Specify whether duplicate query results will be eliminated. A true value will cause duplicates to be eliminated. A false value will cause duplicates to be retained. If distinct has not been specified, duplicate results must be retained.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="distinct" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:712</id>
      <description>Create and add a query root corresponding to the given entity, forming a cartesian product with any existing roots.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:713</id>
      <description>Create and add a query root corresponding to the given entity, forming a cartesian product with any existing roots.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>javax.persistence.metamodel.EntityType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:714</id>
      <description>Return a list of the grouping expressions. Returns empty list if no grouping expressions have been specified. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="getGroupList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:715</id>
      <description>Return the predicate that corresponds to the restriction(s) over the grouping items, or null if no restrictions have been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="getGroupRestriction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:717</id>
      <description>Return the result type of the query or subquery. If a result type was specified as an argument to the createQuery or subquery method, that type will be returned. If the query was created using the createTupleQuery method, the result type is Tuple. Otherwise, the result type is Object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="getResultType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:718</id>
      <description>Return the query roots. These are the roots that have been defined for the CriteriaQuery or Subquery itself, including any subquery roots defined as a result of correlation. Returns empty set if no roots have been defined. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="getRoots" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:719</id>
      <description>Return the selection of the query, or null if no selection has been set.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="getSelection" return-type="javax.persistence.criteria.Selection"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:720</id>
      <description>Specify the expressions that are used to form groups over the query results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:721</id>
      <description>Specify the expressions that are used to form groups over the query results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:722</id>
      <description>Specify a restriction over the groups of the query. Replaces the previous having restriction(s), if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="having" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:723</id>
      <description>Specify restrictions over the groups of the query according the conjunction of the specified restriction predicates. Replaces the previously having added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="having" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:724</id>
      <description>Return whether duplicate query results must be eliminated or retained.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="isDistinct" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:726</id>
      <description>Modify the query to restrict the query results according to the specified boolean expression. Replaces the previously added restriction(s), if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="where" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:727</id>
      <description>Modify the query to restrict the query results according to the conjunction of the specified restriction predicates. Replaces the previously added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery</class-interface>
      <method name="where" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:728</id>
      <description>Return the metamodel representation for the collection attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CollectionJoin</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.CollectionAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:729</id>
      <description>Return the metamodel representation for the collection-valued attribute corresponding to the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CollectionJoin.{javax.persistence.criteria.PluralJoin}</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.PluralAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:730</id>
      <description>Assigns an alias to the selection item. Once assigned, an alias cannot be changed or reassigned. Returns the same selection item.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CompoundSelection.{javax.persistence.criteria.Selection}</class-interface>
      <method name="alias" return-type="javax.persistence.criteria.Selection">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:731</id>
      <description>Return the selection items composing a compound selection. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CompoundSelection.{javax.persistence.criteria.Selection}</class-interface>
      <method name="getCompoundSelectionItems" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:732</id>
      <description>if selection is not a compound selection</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CompoundSelection.{javax.persistence.criteria.Selection}</class-interface>
      <method name="getCompoundSelectionItems" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:733</id>
      <description>Whether the selection item is a compound selection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CompoundSelection.{javax.persistence.criteria.Selection}</class-interface>
      <method name="isCompoundSelection" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:734</id>
      <description>Create an expression that returns the absolute value of its argument.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="abs" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:735</id>
      <description>Create an all expression over the subquery results.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="all" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Subquery</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:736</id>
      <description>Create a conjunction of the given boolean expressions.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="and" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:737</id>
      <description>Create a conjunction of the given restriction predicates. A conjunction of zero predicates is true.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="and" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:738</id>
      <description>Create an any expression over the subquery results. This expression is equivalent to a some expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="any" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Subquery</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:739</id>
      <description>Create an array-valued selection item.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="array" return-type="javax.persistence.criteria.CompoundSelection">
        <parameters>
          <parameter>javax.persistence.criteria.Selection[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:740</id>
      <description>if an argument is a tuple- or array-valued selection item</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="array" return-type="javax.persistence.criteria.CompoundSelection">
        <parameters>
          <parameter>javax.persistence.criteria.Selection[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:741</id>
      <description>Create an ordering by the ascending value of the expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="asc" return-type="javax.persistence.criteria.Order">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:742</id>
      <description>Create an aggregate expression applying the avg operation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="avg" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:743</id>
      <description>Create a predicate for testing whether the first argument is between the second and third arguments in value.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="between" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:744</id>
      <description>Create a predicate for testing whether the first argument is between the second and third arguments in value.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="between" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Comparable</parameter>
          <parameter>java.lang.Comparable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:745</id>
      <description>Create an expression that returns null if all its arguments evaluate to null, and the value of the first non-null argument otherwise.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="coalesce" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:746</id>
      <description>Create an expression that returns null if all its arguments evaluate to null, and the value of the first non-null argument otherwise.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="coalesce" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:747</id>
      <description>Create a coalesce expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="coalesce" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Coalesce"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:748</id>
      <description>Create an expression for string concatenation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="concat" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:749</id>
      <description>Create an expression for string concatenation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="concat" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:750</id>
      <description>Create an expression for string concatenation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="concat" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:751</id>
      <description>Create a conjunction (with zero conjuncts). A conjunction with zero conjuncts is true.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="conjunction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:752</id>
      <description>Create a selection item corresponding to a constructor. This method is used to specify a constructor that will be applied to the results of the query execution. If the constructor is for an entity class, the resulting entities will be in the new state after the query is executed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="construct" return-type="javax.persistence.criteria.CompoundSelection">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.persistence.criteria.Selection[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:753</id>
      <description>if an argument is a tuple- or array-valued selection item</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="construct" return-type="javax.persistence.criteria.CompoundSelection">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.persistence.criteria.Selection[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:754</id>
      <description>Create an aggregate expression applying the count operation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="count" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:755</id>
      <description>Create an aggregate expression applying the count distinct operation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="countDistinct" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:756</id>
      <description>Create a CriteriaQuery object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="createQuery" return-type="javax.persistence.criteria.CriteriaQuery"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:757</id>
      <description>Create a CriteriaQuery object with the specified result type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="createQuery" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:758</id>
      <description>Create a CriteriaQuery object that returns a tuple of objects as its result.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="createTupleQuery" return-type="javax.persistence.criteria.CriteriaQuery"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:759</id>
      <description>Create expression to return current date.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="currentDate" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:760</id>
      <description>Create expression to return current time.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="currentTime" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:761</id>
      <description>Create expression to return current timestamp.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="currentTimestamp" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:762</id>
      <description>Create an ordering by the descending value of the expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="desc" return-type="javax.persistence.criteria.Order">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:763</id>
      <description>Create an expression that returns the difference between its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="diff" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:764</id>
      <description>Create an expression that returns the difference between its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="diff" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Number</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:765</id>
      <description>Create an expression that returns the difference between its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="diff" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Number</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:766</id>
      <description>Create a disjunction (with zero disjuncts). A disjunction with zero disjuncts is false.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="disjunction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:767</id>
      <description>Create a predicate for testing the arguments for equality.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="equal" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:768</id>
      <description>Create a predicate for testing the arguments for equality.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="equal" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:769</id>
      <description>Create a predicate testing the existence of a subquery result.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="exists" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Subquery</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:770</id>
      <description>Create an expression for the execution of a database function.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="function" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:771</id>
      <description>Create a predicate for testing whether the first argument is greater than or equal to the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="ge" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:772</id>
      <description>Create a predicate for testing whether the first argument is greater than or equal to the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="ge" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Number</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:773</id>
      <description>Create a predicate for testing whether the first argument is greater than the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="greaterThan" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:774</id>
      <description>Create a predicate for testing whether the first argument is greater than the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="greaterThan" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Comparable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:775</id>
      <description>Create a predicate for testing whether the first argument is greater than or equal to the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="greaterThanOrEqualTo" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:776</id>
      <description>Create a predicate for testing whether the first argument is greater than or equal to the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="greaterThanOrEqualTo" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Comparable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:777</id>
      <description>Create an aggregate expression for finding the greatest of the values (strings, dates, etc).</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="greatest" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:778</id>
      <description>Create a predicate for testing whether the first argument is greater than the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="gt" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:779</id>
      <description>Create a predicate for testing whether the first argument is greater than the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="gt" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Number</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:780</id>
      <description>Create predicate to test whether given expression is contained in a list of values.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="in" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.In">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:781</id>
      <description>Create a predicate that tests whether a collection is empty.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isEmpty" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:782</id>
      <description>Create a predicate testing for a false value.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isFalse" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:783</id>
      <description>Create a predicate that tests whether an element is a member of a collection. If the collection is empty, the predicate will be false.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isMember" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:784</id>
      <description>Create a predicate that tests whether an element is a member of a collection. If the collection is empty, the predicate will be false.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isMember" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:785</id>
      <description>Create a predicate that tests whether a collection is not empty.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isNotEmpty" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:786</id>
      <description>Create a predicate that tests whether an element is not a member of a collection. If the collection is empty, the predicate will be true.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isNotMember" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:787</id>
      <description>Create a predicate that tests whether an element is not a member of a collection. If the collection is empty, the predicate will be true.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isNotMember" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:788</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:789</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:790</id>
      <description>Create a predicate testing for a true value.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="isTrue" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:791</id>
      <description>Create an expression that returns the keys of a map.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="keys" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:792</id>
      <description>Create a predicate for testing whether the first argument is less than or equal to the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="le" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:793</id>
      <description>Create a predicate for testing whether the first argument is less than or equal to the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="le" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Number</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:794</id>
      <description>Create an aggregate expression for finding the least of the values (strings, dates, etc).</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="least" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:795</id>
      <description>Create expression to return length of a string.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="length" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:796</id>
      <description>Create a predicate for testing whether the first argument is less than the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="lessThan" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:797</id>
      <description>Create a predicate for testing whether the first argument is less than the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="lessThan" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Comparable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:798</id>
      <description>Create a predicate for testing whether the first argument is less than or equal to the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="lessThanOrEqualTo" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:799</id>
      <description>Create a predicate for testing whether the first argument is less than or equal to the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="lessThanOrEqualTo" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Comparable</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:800</id>
      <description>Create a predicate for testing whether the expression satisfies the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="like" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:801</id>
      <description>Create a predicate for testing whether the expression satisfies the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="like" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:802</id>
      <description>Create a predicate for testing whether the expression satisfies the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="like" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:803</id>
      <description>Create a predicate for testing whether the expression satisfies the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="like" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>char</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:804</id>
      <description>Create a predicate for testing whether the expression satisfies the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="like" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:805</id>
      <description>Create a predicate for testing whether the expression satisfies the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="like" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>char</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:806</id>
      <description>Create an expression for a literal.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="literal" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:807</id>
      <description>if value is null</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="literal" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:808</id>
      <description>Create expression to locate the position of one string within another, returning position of first character if found. The first position in a string is denoted by 1. If the string to be located is not found, 0 is returned.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="locate" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:809</id>
      <description>Create expression to locate the position of one string within another, returning position of first character if found. The first position in a string is denoted by 1. If the string to be located is not found, 0 is returned.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="locate" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:810</id>
      <description>Create expression to locate the position of one string within another, returning position of first character if found. The first position in a string is denoted by 1. If the string to be located is not found, 0 is returned.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="locate" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:811</id>
      <description>Create expression to locate the position of one string within another, returning position of first character if found. The first position in a string is denoted by 1. If the string to be located is not found, 0 is returned.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="locate" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:812</id>
      <description>Create expression for converting a string to lowercase.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="lower" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:813</id>
      <description>Create a predicate for testing whether the first argument is less than the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="lt" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:814</id>
      <description>Create a predicate for testing whether the first argument is less than the second.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="lt" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Number</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:815</id>
      <description>Create an aggregate expression applying the numerical max operation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="max" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:816</id>
      <description>Create an aggregate expression applying the numerical min operation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="min" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:817</id>
      <description>Create an expression that returns the modulus of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="mod" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:818</id>
      <description>Create an expression that returns the modulus of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="mod" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Integer</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:819</id>
      <description>Create an expression that returns the modulus of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="mod" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Integer</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:820</id>
      <description>Create an expression that returns the arithmetic negation of its argument.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="neg" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:821</id>
      <description>Create a negation of the given restriction.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="not" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:822</id>
      <description>Create a predicate for testing the arguments for inequality.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="notEqual" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:823</id>
      <description>Create a predicate for testing the arguments for inequality.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="notEqual" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:824</id>
      <description>Create a predicate for testing whether the expression does not satisfy the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="notLike" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:825</id>
      <description>Create a predicate for testing whether the expression does not satisfy the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="notLike" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:826</id>
      <description>Create a predicate for testing whether the expression does not satisfy the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="notLike" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:827</id>
      <description>Create a predicate for testing whether the expression does not satisfy the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="notLike" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>char</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:828</id>
      <description>Create a predicate for testing whether the expression does not satisfy the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="notLike" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:829</id>
      <description>Create a predicate for testing whether the expression does not satisfy the given pattern.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="notLike" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>char</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:830</id>
      <description>Create an expression that tests whether its argument are equal, returning null if they are and the value of the first expression if they are not.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="nullif" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:831</id>
      <description>Create an expression that tests whether its argument are equal, returning null if they are and the value of the first expression if they are not.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="nullif" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:832</id>
      <description>Create an expression for a null literal with the given type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="nullLiteral" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:833</id>
      <description>Create a disjunction of the given boolean expressions.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="or" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:834</id>
      <description>Create a disjunction of the given restriction predicates. A disjunction of zero predicates is false.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="or" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:835</id>
      <description>Create a parameter expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="parameter" return-type="javax.persistence.criteria.ParameterExpression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:836</id>
      <description>Create a parameter expression with the given name.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="parameter" return-type="javax.persistence.criteria.ParameterExpression">
        <parameters>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:837</id>
      <description>Create an expression that returns the product of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="prod" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:838</id>
      <description>Create an expression that returns the product of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="prod" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Number</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:839</id>
      <description>Create an expression that returns the product of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="prod" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Number</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:840</id>
      <description>Create an expression that returns the quotient of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="quot" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:841</id>
      <description>Create an expression that returns the quotient of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="quot" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Number</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:842</id>
      <description>Create an expression that returns the quotient of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="quot" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Number</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:843</id>
      <description>Create a simple case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="selectCase" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.SimpleCase">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:844</id>
      <description>Create a general case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="selectCase" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Case"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:845</id>
      <description>Create an expression that tests the size of a collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="size" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:846</id>
      <description>Create an expression that tests the size of a collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="size" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:847</id>
      <description>Create a some expression over the subquery results. This expression is equivalent to an any expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="some" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Subquery</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:848</id>
      <description>Create an expression that returns the square root of its argument.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="sqrt" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:849</id>
      <description>Create an expression for substring extraction. Extracts a substring starting at the specified position through to end of the string. First position is 1.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="substring" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:850</id>
      <description>Create an expression for substring extraction. Extracts a substring starting at the specified position through to end of the string. First position is 1.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="substring" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:851</id>
      <description>Create an expression for substring extraction. Extracts a substring of given length starting at the specified position. First position is 1.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="substring" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:852</id>
      <description>Create an expression for substring extraction. Extracts a substring of given length starting at the specified position. First position is 1.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="substring" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>int</parameter>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:853</id>
      <description>Create an aggregate expression applying the sum operation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="sum" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:854</id>
      <description>Create an expression that returns the sum of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="sum" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:855</id>
      <description>Create an expression that returns the sum of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="sum" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Number</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:856</id>
      <description>Create an expression that returns the sum of its arguments.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="sum" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Number</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:857</id>
      <description>Create an aggregate expression applying the sum operation to a Float-valued expression, returning a Double result.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="sumAsDouble" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:858</id>
      <description>Create an aggregate expression applying the sum operation to an Integer-valued expression, returning a Long result.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="sumAsLong" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:859</id>
      <description>Typecast. Returns same expression object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="toBigDecimal" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:860</id>
      <description>Typecast. Returns same expression object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="toBigInteger" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:861</id>
      <description>Typecast. Returns same expression object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="toDouble" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:862</id>
      <description>Typecast. Returns same expression object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="toFloat" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:863</id>
      <description>Typecast. Returns same expression object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="toInteger" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:864</id>
      <description>Typecast. Returns same expression object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="toLong" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:865</id>
      <description>Typecast. Returns same expression object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="toString" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:866</id>
      <description>Create expression to trim blanks from both ends of a string.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="trim" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:867</id>
      <description>Create expression to trim blanks from a string.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="trim" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Trimspec</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:868</id>
      <description>Create expression to trim character from both ends of a string.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="trim" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:869</id>
      <description>Create expression to trim character from a string.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="trim" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Trimspec</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:870</id>
      <description>Create expression to trim character from both ends of a string.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="trim" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>char</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:871</id>
      <description>Create expression to trim character from a string.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="trim" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Trimspec</parameter>
          <parameter>char</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:872</id>
      <description>Create a tuple-valued selection item.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="tuple" return-type="javax.persistence.criteria.CompoundSelection">
        <parameters>
          <parameter>javax.persistence.criteria.Selection[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:873</id>
      <description>if an argument is a tuple- or array-valued selection item</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="tuple" return-type="javax.persistence.criteria.CompoundSelection">
        <parameters>
          <parameter>javax.persistence.criteria.Selection[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:874</id>
      <description>Create expression for converting a string to uppercase.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="upper" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:875</id>
      <description>Create an expression that returns the values of a map.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="values" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:876</id>
      <description>Add an "else" clause to the case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case</class-interface>
      <method name="otherwise" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:877</id>
      <description>Add an "else" clause to the case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case</class-interface>
      <method name="otherwise" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:878</id>
      <description>Add a when/then clause to the case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case</class-interface>
      <method name="when" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Case">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:879</id>
      <description>Add a when/then clause to the case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case</class-interface>
      <method name="when" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Case">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:880</id>
      <description>Perform a typecast upon the expression, returning a new expression object. This method does not cause type conversion: the runtime type is not changed. Warning: may result in a runtime failure.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case.{javax.persistence.criteria.Expression}</class-interface>
      <method name="as" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:881</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:882</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:883</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:884</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:885</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:886</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Case.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:887</id>
      <description>Add an argument to the coalesce expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce</class-interface>
      <method name="value" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Coalesce">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:888</id>
      <description>Add an argument to the coalesce expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce</class-interface>
      <method name="value" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Coalesce">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:889</id>
      <description>Perform a typecast upon the expression, returning a new expression object. This method does not cause type conversion: the runtime type is not changed. Warning: may result in a runtime failure.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce.{javax.persistence.criteria.Expression}</class-interface>
      <method name="as" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:890</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:891</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:892</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:893</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:894</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:895</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Coalesce.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:896</id>
      <description>Return the expression to be tested against the list of values.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.In</class-interface>
      <method name="getExpression" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:897</id>
      <description>Add to list of values to be tested against.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.In</class-interface>
      <method name="value" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.In">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:898</id>
      <description>Add to list of values to be tested against.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.In</class-interface>
      <method name="value" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.In">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:899</id>
      <description>Return the top-level conjuncts or disjuncts of the predicate. Returns empty list if there are no top-level conjuncts or disjuncts of the predicate. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.In.{javax.persistence.criteria.Predicate}</class-interface>
      <method name="getExpressions" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:900</id>
      <description>Return the boolean operator for the predicate. If the predicate is simple, this is AND.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.In.{javax.persistence.criteria.Predicate}</class-interface>
      <method name="getOperator" return-type="javax.persistence.criteria.Predicate.Predicate.BooleanOperator"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:901</id>
      <description>Whether the predicate has been created from another predicate by applying the Predicate.not() method or the CriteriaBuilder.not() method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.In.{javax.persistence.criteria.Predicate}</class-interface>
      <method name="isNegated" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:902</id>
      <description>Create a negation of the predicate.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.In.{javax.persistence.criteria.Predicate}</class-interface>
      <method name="not" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:903</id>
      <description>Return the expression to be tested against the conditions.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase</class-interface>
      <method name="getExpression" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:904</id>
      <description>Add an "else" clause to the case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase</class-interface>
      <method name="otherwise" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:905</id>
      <description>Add an "else" clause to the case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase</class-interface>
      <method name="otherwise" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:906</id>
      <description>Add a when/then clause to the case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase</class-interface>
      <method name="when" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.SimpleCase">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:907</id>
      <description>Add a when/then clause to the case expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase</class-interface>
      <method name="when" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.SimpleCase">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:908</id>
      <description>Perform a typecast upon the expression, returning a new expression object. This method does not cause type conversion: the runtime type is not changed. Warning: may result in a runtime failure.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase.{javax.persistence.criteria.Expression}</class-interface>
      <method name="as" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:909</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:910</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:911</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:912</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:913</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:914</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.SimpleCase.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:915</id>
      <description/>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Trimspec</class-interface>
      <method name="valueOf" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Trimspec">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:916</id>
      <description/>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder.Trimspec</class-interface>
      <method name="values" return-type="javax.persistence.criteria.CriteriaBuilder.CriteriaBuilder.Trimspec[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:917</id>
      <description>Specify whether duplicate query results will be eliminated. A true value will cause duplicates to be eliminated. A false value will cause duplicates to be retained. If distinct has not been specified, duplicate results must be retained. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="distinct" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:918</id>
      <description>Return the ordering expressions in order of precedence. Returns empty list if no ordering expressions have been specified. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="getOrderList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:919</id>
      <description>Return the parameters of the query. Returns empty set if there are no parameters. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="getParameters" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:920</id>
      <description>Specify the expressions that are used to form groups over the query results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:921</id>
      <description>Specify the expressions that are used to form groups over the query results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:922</id>
      <description>Specify a restriction over the groups of the query. Replaces the previous having restriction(s), if any. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="having" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:923</id>
      <description>Specify restrictions over the groups of the query according the conjunction of the specified restriction predicates. Replaces the previously added having restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="having" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:924</id>
      <description>Specify the selection items that are to be returned in the query result. Replaces the previously specified selection(s), if any. The type of the result of the query execution depends on the specification of the type of the criteria query object created as well as the arguments to the multiselect method. An argument to the multiselect method must not be a tuple- or array-valued compound selection item. The semantics of this method are as follows: If the type of the criteria query is CriteriaQuery&lt;Tuple&gt; (i.e., a criteria query object created by either the createTupleQuery method or by passing a Tuple class argument to the createQuery method), a Tuple object corresponding to the arguments of the multiselect method, in the specified order, will be instantiated and returned for each row that results from the query execution. If the type of the criteria query is CriteriaQuery&lt;X&gt; for some user-defined class X (i.e., a criteria query object created by passing a X class argument to the createQuery method), the arguments to the multiselect method will be passed to the X constructor and an instance of type X will be returned for each row. If the type of the criteria query is CriteriaQuery&lt;X[]&gt; for some class X, an instance of type X[] will be returned for each row. The elements of the array will correspond to the arguments of the multiselect method, in the specified order. If the type of the criteria query is CriteriaQuery&lt;Object&gt; or if the criteria query was created without specifying a type, and only a single argument is passed to the multiselect method, an instance of type Object will be returned for each row. If the type of the criteria query is CriteriaQuery&lt;Object&gt; or if the criteria query was created without specifying a type, and more than one argument is passed to the multiselect method, an instance of type Object[] will be instantiated and returned for each row. The elements of the array will correspond to the arguments to the multiselect method, in the specified order.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="multiselect" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Selection[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:925</id>
      <description>if a selection item is not valid or if more than one selection item has the same assigned alias</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="multiselect" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Selection[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:926</id>
      <description>Specify the selection items that are to be returned in the query result. Replaces the previously specified selection(s), if any. The type of the result of the query execution depends on the specification of the type of the criteria query object created as well as the argument to the multiselect method. An element of the list passed to the multiselect method must not be a tuple- or array-valued compound selection item. The semantics of this method are as follows: If the type of the criteria query is CriteriaQuery&lt;Tuple&gt; (i.e., a criteria query object created by either the createTupleQuery method or by passing a Tuple class argument to the createQuery method), a Tuple object corresponding to the elements of the list passed to the multiselect method, in the specified order, will be instantiated and returned for each row that results from the query execution. If the type of the criteria query is CriteriaQuery&lt;X&gt; for some user-defined class X (i.e., a criteria query object created by passing a X class argument to the createQuery method), the elements of the list passed to the multiselect method will be passed to the X constructor and an instance of type X will be returned for each row. If the type of the criteria query is CriteriaQuery&lt;X[]&gt; for some class X, an instance of type X[] will be returned for each row. The elements of the array will correspond to the elements of the list passed to the multiselect method, in the specified order. If the type of the criteria query is CriteriaQuery&lt;Object&gt; or if the criteria query was created without specifying a type, and the list passed to the multiselect method contains only a single element, an instance of type Object will be returned for each row. If the type of the criteria query is CriteriaQuery&lt;Object&gt; or if the criteria query was created without specifying a type, and the list passed to the multiselect method contains more than one element, an instance of type Object[] will be instantiated and returned for each row. The elements of the array will correspond to the elements of the list passed to the multiselect method, in the specified order.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="multiselect" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:927</id>
      <description>if a selection item is not valid or if more than one selection item has the same assigned alias</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="multiselect" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:928</id>
      <description>Specify the ordering expressions that are used to order the query results. Replaces the previous ordering expressions, if any. If no ordering expressions are specified, the previous ordering, if any, is simply removed, and results will be returned in no particular order. The left-to-right sequence of the ordering expressions determines the precedence, whereby the leftmost has highest precedence.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="orderBy" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Order[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:929</id>
      <description>Specify the ordering expressions that are used to order the query results. Replaces the previous ordering expressions, if any. If no ordering expressions are specified, the previous ordering, if any, is simply removed, and results will be returned in no particular order. The order of the ordering expressions in the list determines the precedence, whereby the first element in the list has highest precedence.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="orderBy" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:930</id>
      <description>Specify the item that is to be returned in the query result. Replaces the previously specified selection(s), if any. Note: Applications using the string-based API may need to specify the type of the select item when it results from a get or join operation and the query result type is specified. For example: CriteriaQuery&lt;String&gt; q = cb.createQuery(String.class); Root&lt;Order&gt; order = q.from(Order.class); q.select(order.get("shippingAddress").&lt;String&gt;get("state")); CriteriaQuery&lt;Product&gt; q2 = cb.createQuery(Product.class); q2.select(q2.from(Order.class) .join("items") .&lt;Item,Product&gt;join("product"));</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="select" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Selection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:931</id>
      <description>if the selection is a compound selection and more than one selection item has the same assigned alias</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="select" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Selection</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:932</id>
      <description>Modify the query to restrict the query result according to the specified boolean expression. Replaces the previously added restriction(s), if any. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="where" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:933</id>
      <description>Modify the query to restrict the query result according to the conjunction of the specified restriction predicates. Replaces the previously added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery</class-interface>
      <method name="where" return-type="javax.persistence.criteria.CriteriaQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:934</id>
      <description>Specify whether duplicate query results will be eliminated. A true value will cause duplicates to be eliminated. A false value will cause duplicates to be retained. If distinct has not been specified, duplicate results must be retained.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="distinct" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:935</id>
      <description>Create and add a query root corresponding to the given entity, forming a cartesian product with any existing roots.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:936</id>
      <description>Create and add a query root corresponding to the given entity, forming a cartesian product with any existing roots.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>javax.persistence.metamodel.EntityType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:937</id>
      <description>Return a list of the grouping expressions. Returns empty list if no grouping expressions have been specified. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getGroupList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:938</id>
      <description>Return the predicate that corresponds to the restriction(s) over the grouping items, or null if no restrictions have been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getGroupRestriction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:940</id>
      <description>Return the result type of the query or subquery. If a result type was specified as an argument to the createQuery or subquery method, that type will be returned. If the query was created using the createTupleQuery method, the result type is Tuple. Otherwise, the result type is Object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getResultType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:941</id>
      <description>Return the query roots. These are the roots that have been defined for the CriteriaQuery or Subquery itself, including any subquery roots defined as a result of correlation. Returns empty set if no roots have been defined. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getRoots" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:942</id>
      <description>Return the selection of the query, or null if no selection has been set.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getSelection" return-type="javax.persistence.criteria.Selection"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:943</id>
      <description>Specify the expressions that are used to form groups over the query results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:944</id>
      <description>Specify the expressions that are used to form groups over the query results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:945</id>
      <description>Specify a restriction over the groups of the query. Replaces the previous having restriction(s), if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="having" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:946</id>
      <description>Specify restrictions over the groups of the query according the conjunction of the specified restriction predicates. Replaces the previously having added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="having" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:947</id>
      <description>Return whether duplicate query results must be eliminated or retained.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="isDistinct" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:949</id>
      <description>Modify the query to restrict the query results according to the specified boolean expression. Replaces the previously added restriction(s), if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="where" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:950</id>
      <description>Modify the query to restrict the query results according to the conjunction of the specified restriction predicates. Replaces the previously added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaQuery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="where" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:951</id>
      <description>Perform a typecast upon the expression, returning a new expression object. This method does not cause type conversion: the runtime type is not changed. Warning: may result in a runtime failure.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression</class-interface>
      <method name="as" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:952</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:953</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:954</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:955</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:956</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:957</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:958</id>
      <description>Assigns an alias to the selection item. Once assigned, an alias cannot be changed or reassigned. Returns the same selection item.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression.{javax.persistence.criteria.Selection}</class-interface>
      <method name="alias" return-type="javax.persistence.criteria.Selection">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:959</id>
      <description>Return the selection items composing a compound selection. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression.{javax.persistence.criteria.Selection}</class-interface>
      <method name="getCompoundSelectionItems" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:960</id>
      <description>if selection is not a compound selection</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression.{javax.persistence.criteria.Selection}</class-interface>
      <method name="getCompoundSelectionItems" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:961</id>
      <description>Whether the selection item is a compound selection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Expression.{javax.persistence.criteria.Selection}</class-interface>
      <method name="isCompoundSelection" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:962</id>
      <description>Return the metamodel attribute corresponding to the fetch join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:963</id>
      <description>Return the join type used in the fetch join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch</class-interface>
      <method name="getJoinType" return-type="javax.persistence.criteria.JoinType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:964</id>
      <description>Return the parent of the fetched item.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch</class-interface>
      <method name="getParent" return-type="javax.persistence.criteria.FetchParent"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:965</id>
      <description>Create a fetch join to the specified single-valued attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:966</id>
      <description>Create a fetch join to the specified single-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:967</id>
      <description>Create a fetch join to the specified collection-valued attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.PluralAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:968</id>
      <description>Create a fetch join to the specified collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.PluralAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:969</id>
      <description>Create a fetch join to the specified attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:970</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:971</id>
      <description>Create a fetch join to the specified attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:972</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:973</id>
      <description>Return the fetch joins that have been made from this type. Returns empty set if no fetch joins have been made from this type. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Fetch.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="getFetches" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:974</id>
      <description>Create a fetch join to the specified single-valued attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:975</id>
      <description>Create a fetch join to the specified single-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:976</id>
      <description>Create a fetch join to the specified collection-valued attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.PluralAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:977</id>
      <description>Create a fetch join to the specified collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.PluralAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:978</id>
      <description>Create a fetch join to the specified attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:979</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:980</id>
      <description>Create a fetch join to the specified attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:981</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:982</id>
      <description>Return the fetch joins that have been made from this type. Returns empty set if no fetch joins have been made from this type. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>FetchParent</class-interface>
      <method name="getFetches" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:983</id>
      <description>Returns the parent From object from which the correlated From object has been obtained through correlation (use of a Subquery correlate method).</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="getCorrelationParent" return-type="javax.persistence.criteria.From"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:984</id>
      <description>if the From object has not been obtained through correlation</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="getCorrelationParent" return-type="javax.persistence.criteria.From">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:985</id>
      <description>Return the joins that have been made from this bound type. Returns empty set if no joins have been made from this bound type. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="getJoins" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:986</id>
      <description>Whether the From object has been obtained as a result of correlation (use of a Subquery correlate method).</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="isCorrelated" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:987</id>
      <description>Create an inner join to the specified single-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:988</id>
      <description>Create a join to the specified single-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:989</id>
      <description>Create an inner join to the specified Collection-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.CollectionAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:990</id>
      <description>Create an inner join to the specified Set-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.SetAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:991</id>
      <description>Create an inner join to the specified List-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.ListAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:992</id>
      <description>Create an inner join to the specified Map-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.MapAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:993</id>
      <description>Create a join to the specified Collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.CollectionAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:994</id>
      <description>Create a join to the specified Set-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.SetAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:995</id>
      <description>Create a join to the specified List-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.ListAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:996</id>
      <description>Create a join to the specified Map-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.MapAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:997</id>
      <description>Create an inner join to the specified attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:998</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:999</id>
      <description>Create a join to the specified attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1000</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1001</id>
      <description>Create an inner join to the specified Collection-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1002</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1003</id>
      <description>Create a join to the specified Collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1004</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1005</id>
      <description>Create an inner join to the specified List-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1006</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1007</id>
      <description>Create a join to the specified List-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1008</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1009</id>
      <description>Create an inner join to the specified Map-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1010</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1011</id>
      <description>Create a join to the specified Map-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1012</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1013</id>
      <description>Create an inner join to the specified Set-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1014</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1015</id>
      <description>Create a join to the specified Set-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1016</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1017</id>
      <description>Create a fetch join to the specified single-valued attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1018</id>
      <description>Create a fetch join to the specified single-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1019</id>
      <description>Create a fetch join to the specified collection-valued attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.PluralAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1020</id>
      <description>Create a fetch join to the specified collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>javax.persistence.metamodel.PluralAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1021</id>
      <description>Create a fetch join to the specified attribute using an inner join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1022</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1023</id>
      <description>Create a fetch join to the specified attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1024</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="fetch" return-type="javax.persistence.criteria.Fetch">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1025</id>
      <description>Return the fetch joins that have been made from this type. Returns empty set if no fetch joins have been made from this type. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.FetchParent}</class-interface>
      <method name="getFetches" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1026</id>
      <description>Create a path corresponding to the referenced single-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1027</id>
      <description>Create a path corresponding to the referenced collection-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.metamodel.PluralAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1028</id>
      <description>Create a path corresponding to the referenced map-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.metamodel.MapAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1029</id>
      <description>Create a path corresponding to the referenced attribute. Note: Applications using the string-based API may need to specify the type resulting from the get operation in order to avoid the use of Path variables. For example: CriteriaQuery&lt;Person&gt; q = cb.createQuery(Person.class); Root&lt;Person&gt; p = q.from(Person.class); q.select(p) .where(cb.isMember("joe", p.&lt;Set&lt;String&gt;&gt;get("nicknames"))); rather than: CriteriaQuery&lt;Person&gt; q = cb.createQuery(Person.class); Root&lt;Person&gt; p = q.from(Person.class); Path&lt;Set&lt;String&gt;&gt; nicknames = p.get("nicknames"); q.select(p) .where(cb.isMember("joe", nicknames));</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1030</id>
      <description>if invoked on a path that corresponds to a basic type</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1031</id>
      <description>if attribute of the given name does not otherwise exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1032</id>
      <description>Return the bindable object that corresponds to the path expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.Bindable"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1033</id>
      <description>Return the parent "node" in the path or null if no parent.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="getParentPath" return-type="javax.persistence.criteria.Path"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1034</id>
      <description>Create an expression corresponding to the type of the path.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>From.{javax.persistence.criteria.Path}</class-interface>
      <method name="type" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1035</id>
      <description>Return the metamodel attribute corresponding to the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1036</id>
      <description>Return the join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join</class-interface>
      <method name="getJoinType" return-type="javax.persistence.criteria.JoinType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1037</id>
      <description>Return the parent of the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join</class-interface>
      <method name="getParent" return-type="javax.persistence.criteria.From"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1038</id>
      <description>Returns the parent From object from which the correlated From object has been obtained through correlation (use of a Subquery correlate method).</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="getCorrelationParent" return-type="javax.persistence.criteria.From"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1039</id>
      <description>if the From object has not been obtained through correlation</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="getCorrelationParent" return-type="javax.persistence.criteria.From">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1040</id>
      <description>Return the joins that have been made from this bound type. Returns empty set if no joins have been made from this bound type. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="getJoins" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1041</id>
      <description>Whether the From object has been obtained as a result of correlation (use of a Subquery correlate method).</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="isCorrelated" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1042</id>
      <description>Create an inner join to the specified single-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1043</id>
      <description>Create a join to the specified single-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1044</id>
      <description>Create an inner join to the specified Collection-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.CollectionAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1045</id>
      <description>Create an inner join to the specified Set-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.SetAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1046</id>
      <description>Create an inner join to the specified List-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.ListAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1047</id>
      <description>Create an inner join to the specified Map-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.MapAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1048</id>
      <description>Create a join to the specified Collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.CollectionAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1049</id>
      <description>Create a join to the specified Set-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.SetAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1050</id>
      <description>Create a join to the specified List-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.ListAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1051</id>
      <description>Create a join to the specified Map-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.MapAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1052</id>
      <description>Create an inner join to the specified attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1053</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1054</id>
      <description>Create a join to the specified attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1055</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1056</id>
      <description>Create an inner join to the specified Collection-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1057</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1058</id>
      <description>Create a join to the specified Collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1059</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1060</id>
      <description>Create an inner join to the specified List-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1061</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1062</id>
      <description>Create a join to the specified List-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1063</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1064</id>
      <description>Create an inner join to the specified Map-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1065</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1066</id>
      <description>Create a join to the specified Map-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1067</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1068</id>
      <description>Create an inner join to the specified Set-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1069</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1070</id>
      <description>Create a join to the specified Set-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1071</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join.{javax.persistence.criteria.From}</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1072</id>
      <description/>
      <package>javax.persistence.criteria</package>
      <class-interface>JoinType</class-interface>
      <method name="valueOf" return-type="javax.persistence.criteria.JoinType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1073</id>
      <description/>
      <package>javax.persistence.criteria</package>
      <class-interface>JoinType</class-interface>
      <method name="values" return-type="javax.persistence.criteria.JoinType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1074</id>
      <description>Return the metamodel representation for the list attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ListJoin</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.ListAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1075</id>
      <description>Create an expression that corresponds to the index of the object in the referenced association or element collection. This method must only be invoked upon an object that represents an association or element collection for which an order column has been defined.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ListJoin</class-interface>
      <method name="index" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1076</id>
      <description>Return the metamodel representation for the collection-valued attribute corresponding to the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ListJoin.{javax.persistence.criteria.PluralJoin}</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.PluralAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1077</id>
      <description>Create an expression that corresponds to the map entry.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>MapJoin</class-interface>
      <method name="entry" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1078</id>
      <description>Return the metamodel representation for the map attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>MapJoin</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.MapAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1079</id>
      <description>Create a path expression that corresponds to the map key.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>MapJoin</class-interface>
      <method name="key" return-type="javax.persistence.criteria.Path"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1080</id>
      <description>Create a path expression that corresponds to the map value. This method is for stylistic use only: it just returns this.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>MapJoin</class-interface>
      <method name="value" return-type="javax.persistence.criteria.Path"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1081</id>
      <description>Return the metamodel representation for the collection-valued attribute corresponding to the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>MapJoin.{javax.persistence.criteria.PluralJoin}</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.PluralAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1082</id>
      <description>Return the expression that is used for ordering.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Order</class-interface>
      <method name="getExpression" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1083</id>
      <description>Whether ascending ordering is in effect.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Order</class-interface>
      <method name="isAscending" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1084</id>
      <description>Switch the ordering.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Order</class-interface>
      <method name="reverse" return-type="javax.persistence.criteria.Order"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1085</id>
      <description>Perform a typecast upon the expression, returning a new expression object. This method does not cause type conversion: the runtime type is not changed. Warning: may result in a runtime failure.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.criteria.Expression}</class-interface>
      <method name="as" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1086</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1087</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1088</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1089</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1090</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1091</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1092</id>
      <description>Return the parameter name, or null if the parameter is not a named parameter or no name has been assigned.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.Parameter}</class-interface>
      <method name="getName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1093</id>
      <description>Return the Java type of the parameter. Values bound to the parameter must be assignable to this type. This method is required to be supported for criteria queries only. Applications that use this method for Java Persistence query language queries and native queries will not be portable.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.Parameter}</class-interface>
      <method name="getParameterType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1094</id>
      <description>if invoked on a parameter obtained from a Java persistence query language query or native query when the implementation does not support this use</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.Parameter}</class-interface>
      <method name="getParameterType" return-type="java.lang.Class">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1095</id>
      <description>Return the parameter position, or null if the parameter is not a positional parameter.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ParameterExpression.{javax.persistence.Parameter}</class-interface>
      <method name="getPosition" return-type="java.lang.Integer"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1096</id>
      <description>Create a path corresponding to the referenced single-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1097</id>
      <description>Create a path corresponding to the referenced collection-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.metamodel.PluralAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1098</id>
      <description>Create a path corresponding to the referenced map-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>javax.persistence.metamodel.MapAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1099</id>
      <description>Create a path corresponding to the referenced attribute. Note: Applications using the string-based API may need to specify the type resulting from the get operation in order to avoid the use of Path variables. For example: CriteriaQuery&lt;Person&gt; q = cb.createQuery(Person.class); Root&lt;Person&gt; p = q.from(Person.class); q.select(p) .where(cb.isMember("joe", p.&lt;Set&lt;String&gt;&gt;get("nicknames"))); rather than: CriteriaQuery&lt;Person&gt; q = cb.createQuery(Person.class); Root&lt;Person&gt; p = q.from(Person.class); Path&lt;Set&lt;String&gt;&gt; nicknames = p.get("nicknames"); q.select(p) .where(cb.isMember("joe", nicknames));</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1100</id>
      <description>if invoked on a path that corresponds to a basic type</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1101</id>
      <description>if attribute of the given name does not otherwise exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="get" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1102</id>
      <description>Return the bindable object that corresponds to the path expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.Bindable"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1103</id>
      <description>Return the parent "node" in the path or null if no parent.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="getParentPath" return-type="javax.persistence.criteria.Path"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1104</id>
      <description>Create an expression corresponding to the type of the path.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path</class-interface>
      <method name="type" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1105</id>
      <description>Perform a typecast upon the expression, returning a new expression object. This method does not cause type conversion: the runtime type is not changed. Warning: may result in a runtime failure.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path.{javax.persistence.criteria.Expression}</class-interface>
      <method name="as" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1106</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1107</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1108</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1109</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1110</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1111</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Path.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1112</id>
      <description>Return the metamodel representation for the collection-valued attribute corresponding to the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>PluralJoin</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.PluralAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1113</id>
      <description>Return the metamodel attribute corresponding to the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>PluralJoin.{javax.persistence.criteria.Join}</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1114</id>
      <description>Return the join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>PluralJoin.{javax.persistence.criteria.Join}</class-interface>
      <method name="getJoinType" return-type="javax.persistence.criteria.JoinType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1115</id>
      <description>Return the parent of the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>PluralJoin.{javax.persistence.criteria.Join}</class-interface>
      <method name="getParent" return-type="javax.persistence.criteria.From"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1116</id>
      <description>Return the top-level conjuncts or disjuncts of the predicate. Returns empty list if there are no top-level conjuncts or disjuncts of the predicate. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate</class-interface>
      <method name="getExpressions" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1117</id>
      <description>Return the boolean operator for the predicate. If the predicate is simple, this is AND.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate</class-interface>
      <method name="getOperator" return-type="javax.persistence.criteria.Predicate.Predicate.BooleanOperator"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1118</id>
      <description>Whether the predicate has been created from another predicate by applying the Predicate.not() method or the CriteriaBuilder.not() method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate</class-interface>
      <method name="isNegated" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1119</id>
      <description>Create a negation of the predicate.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate</class-interface>
      <method name="not" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1120</id>
      <description>Perform a typecast upon the expression, returning a new expression object. This method does not cause type conversion: the runtime type is not changed. Warning: may result in a runtime failure.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.{javax.persistence.criteria.Expression}</class-interface>
      <method name="as" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1121</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1122</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1123</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1124</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1125</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1126</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1127</id>
      <description/>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.BooleanOperator</class-interface>
      <method name="valueOf" return-type="javax.persistence.criteria.Predicate.Predicate.BooleanOperator">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1128</id>
      <description/>
      <package>javax.persistence.criteria</package>
      <class-interface>Predicate.BooleanOperator</class-interface>
      <method name="values" return-type="javax.persistence.criteria.Predicate.Predicate.BooleanOperator[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1129</id>
      <description>Return the metamodel entity corresponding to the root.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.EntityType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1130</id>
      <description>Returns the parent From object from which the correlated From object has been obtained through correlation (use of a Subquery correlate method).</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="getCorrelationParent" return-type="javax.persistence.criteria.From"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1131</id>
      <description>if the From object has not been obtained through correlation</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="getCorrelationParent" return-type="javax.persistence.criteria.From">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1132</id>
      <description>Return the joins that have been made from this bound type. Returns empty set if no joins have been made from this bound type. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="getJoins" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1133</id>
      <description>Whether the From object has been obtained as a result of correlation (use of a Subquery correlate method).</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="isCorrelated" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1134</id>
      <description>Create an inner join to the specified single-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1135</id>
      <description>Create a join to the specified single-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1136</id>
      <description>Create an inner join to the specified Collection-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.CollectionAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1137</id>
      <description>Create an inner join to the specified Set-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.SetAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1138</id>
      <description>Create an inner join to the specified List-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.ListAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1139</id>
      <description>Create an inner join to the specified Map-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.MapAttribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1140</id>
      <description>Create a join to the specified Collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.CollectionAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1141</id>
      <description>Create a join to the specified Set-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.SetAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1142</id>
      <description>Create a join to the specified List-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.ListAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1143</id>
      <description>Create a join to the specified Map-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.metamodel.MapAttribute</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1144</id>
      <description>Create an inner join to the specified attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1145</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1146</id>
      <description>Create a join to the specified attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1147</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="join" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1148</id>
      <description>Create an inner join to the specified Collection-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1149</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1150</id>
      <description>Create a join to the specified Collection-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1151</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinCollection" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1152</id>
      <description>Create an inner join to the specified List-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1153</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1154</id>
      <description>Create a join to the specified List-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1155</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinList" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1156</id>
      <description>Create an inner join to the specified Map-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1157</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1158</id>
      <description>Create a join to the specified Map-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1159</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinMap" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1160</id>
      <description>Create an inner join to the specified Set-valued attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1161</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1162</id>
      <description>Create a join to the specified Set-valued attribute using the given join type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1163</id>
      <description>if attribute of the given name does not exist</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Root.{javax.persistence.criteria.From}</class-interface>
      <method name="joinSet" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.criteria.JoinType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1164</id>
      <description>Assigns an alias to the selection item. Once assigned, an alias cannot be changed or reassigned. Returns the same selection item.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Selection</class-interface>
      <method name="alias" return-type="javax.persistence.criteria.Selection">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1165</id>
      <description>Return the selection items composing a compound selection. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Selection</class-interface>
      <method name="getCompoundSelectionItems" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1166</id>
      <description>if selection is not a compound selection</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Selection</class-interface>
      <method name="getCompoundSelectionItems" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1167</id>
      <description>Whether the selection item is a compound selection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Selection</class-interface>
      <method name="isCompoundSelection" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1168</id>
      <description>Return the alias assigned to the tuple element or null, if no alias has been assigned.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Selection.{javax.persistence.TupleElement}</class-interface>
      <method name="getAlias" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1169</id>
      <description>Return the Java type of the tuple element.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Selection.{javax.persistence.TupleElement}</class-interface>
      <method name="getJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1170</id>
      <description>Return the metamodel representation for the set attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>SetJoin</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.SetAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1171</id>
      <description>Return the metamodel representation for the collection-valued attribute corresponding to the join.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>SetJoin.{javax.persistence.criteria.PluralJoin}</class-interface>
      <method name="getModel" return-type="javax.persistence.metamodel.PluralAttribute"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1172</id>
      <description>Create a subquery root correlated to a root of the enclosing query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="correlate" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>javax.persistence.criteria.Root</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1173</id>
      <description>Create a subquery join object correlated to a join object of the enclosing query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="correlate" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.criteria.Join</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1174</id>
      <description>Create a subquery collection join object correlated to a collection join object of the enclosing query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="correlate" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.criteria.CollectionJoin</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1175</id>
      <description>Create a subquery set join object correlated to a set join object of the enclosing query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="correlate" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.criteria.SetJoin</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1176</id>
      <description>Create a subquery list join object correlated to a list join object of the enclosing query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="correlate" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.criteria.ListJoin</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1177</id>
      <description>Create a subquery map join object correlated to a map join object of the enclosing query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="correlate" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.criteria.MapJoin</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1178</id>
      <description>Specify whether duplicate query results will be eliminated. A true value will cause duplicates to be eliminated. A false value will cause duplicates to be retained. If distinct has not been specified, duplicate results must be retained. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="distinct" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1179</id>
      <description>Return the correlated joins of the subquery. Returns empty set if the subquery has no correlated joins. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="getCorrelatedJoins" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1180</id>
      <description>Return the query of which this is a subquery. This must be a CriteriaQuery or a Subquery.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="getParent" return-type="javax.persistence.criteria.AbstractQuery"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1181</id>
      <description>Return the selection expression.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="getSelection" return-type="javax.persistence.criteria.Expression"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1182</id>
      <description>Specify the expressions that are used to form groups over the subquery results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1183</id>
      <description>Specify the expressions that are used to form groups over the subquery results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1184</id>
      <description>Specify a restriction over the groups of the subquery. Replaces the previous having restriction(s), if any. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="having" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1185</id>
      <description>Specify restrictions over the groups of the subquery according the conjunction of the specified restriction predicates. Replaces the previously added having restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="having" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1186</id>
      <description>Specify the item that is to be returned as the subquery result. Replaces the previously specified selection, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="select" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1187</id>
      <description>Modify the subquery to restrict the result according to the specified boolean expression. Replaces the previously added restriction(s), if any. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="where" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1188</id>
      <description>Modify the subquery to restrict the result according to the conjunction of the specified restriction predicates. Replaces the previously added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed. This method only overrides the return type of the corresponding AbstractQuery method.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="where" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1189</id>
      <description>Specify whether duplicate query results will be eliminated. A true value will cause duplicates to be eliminated. A false value will cause duplicates to be retained. If distinct has not been specified, duplicate results must be retained.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="distinct" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>boolean</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1190</id>
      <description>Create and add a query root corresponding to the given entity, forming a cartesian product with any existing roots.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1191</id>
      <description>Create and add a query root corresponding to the given entity, forming a cartesian product with any existing roots.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>javax.persistence.metamodel.EntityType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1192</id>
      <description>Return a list of the grouping expressions. Returns empty list if no grouping expressions have been specified. Modifications to the list do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getGroupList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1193</id>
      <description>Return the predicate that corresponds to the restriction(s) over the grouping items, or null if no restrictions have been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getGroupRestriction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1195</id>
      <description>Return the result type of the query or subquery. If a result type was specified as an argument to the createQuery or subquery method, that type will be returned. If the query was created using the createTupleQuery method, the result type is Tuple. Otherwise, the result type is Object.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getResultType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1196</id>
      <description>Return the query roots. These are the roots that have been defined for the CriteriaQuery or Subquery itself, including any subquery roots defined as a result of correlation. Returns empty set if no roots have been defined. Modifications to the set do not affect the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getRoots" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1197</id>
      <description>Return the selection of the query, or null if no selection has been set.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="getSelection" return-type="javax.persistence.criteria.Selection"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1198</id>
      <description>Specify the expressions that are used to form groups over the query results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1199</id>
      <description>Specify the expressions that are used to form groups over the query results. Replaces the previous specified grouping expressions, if any. If no grouping expressions are specified, any previously added grouping expressions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="groupBy" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>java.util.List</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1200</id>
      <description>Specify a restriction over the groups of the query. Replaces the previous having restriction(s), if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="having" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1201</id>
      <description>Specify restrictions over the groups of the query according the conjunction of the specified restriction predicates. Replaces the previously having added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="having" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1202</id>
      <description>Return whether duplicate query results must be eliminated or retained.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="isDistinct" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1204</id>
      <description>Modify the query to restrict the query results according to the specified boolean expression. Replaces the previously added restriction(s), if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="where" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1205</id>
      <description>Modify the query to restrict the query results according to the conjunction of the specified restriction predicates. Replaces the previously added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.AbstractQuery}</class-interface>
      <method name="where" return-type="javax.persistence.criteria.AbstractQuery">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1206</id>
      <description>Perform a typecast upon the expression, returning a new expression object. This method does not cause type conversion: the runtime type is not changed. Warning: may result in a runtime failure.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.Expression}</class-interface>
      <method name="as" return-type="javax.persistence.criteria.Expression">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1207</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.lang.Object[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1208</id>
      <description>Create a predicate to test whether the expression is a member of the argument list.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1209</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>java.util.Collection</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1210</id>
      <description>Create a predicate to test whether the expression is a member of the collection.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.Expression}</class-interface>
      <method name="in" return-type="javax.persistence.criteria.Predicate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1211</id>
      <description>Create a predicate to test whether the expression is not null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNotNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1212</id>
      <description>Create a predicate to test whether the expression is null.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery.{javax.persistence.criteria.Expression}</class-interface>
      <method name="isNull" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1213</id>
      <description>Return the managed type representing the type in which the attribute was declared.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute</class-interface>
      <method name="getDeclaringType" return-type="javax.persistence.metamodel.ManagedType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1214</id>
      <description>Return the java.lang.reflect.Member for the represented attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute</class-interface>
      <method name="getJavaMember" return-type="java.lang.reflect.Member"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1215</id>
      <description>Return the Java type of the represented attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute</class-interface>
      <method name="getJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1216</id>
      <description>Return the name of the attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute</class-interface>
      <method name="getName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1217</id>
      <description>Return the persistent attribute type for the attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute</class-interface>
      <method name="getPersistentAttributeType" return-type="javax.persistence.metamodel.Attribute.Attribute.PersistentAttributeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1218</id>
      <description>Is the attribute an association.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute</class-interface>
      <method name="isAssociation" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1219</id>
      <description>Is the attribute collection-valued (represents a Collection, Set, List, or Map).</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute</class-interface>
      <method name="isCollection" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1220</id>
      <description/>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute.PersistentAttributeType</class-interface>
      <method name="valueOf" return-type="javax.persistence.metamodel.Attribute.Attribute.PersistentAttributeType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1221</id>
      <description/>
      <package>javax.persistence.metamodel</package>
      <class-interface>Attribute.PersistentAttributeType</class-interface>
      <method name="values" return-type="javax.persistence.metamodel.Attribute.Attribute.PersistentAttributeType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1222</id>
      <description>Return the represented Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>BasicType.{javax.persistence.metamodel.Type}</class-interface>
      <method name="getJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1223</id>
      <description>Return the persistence type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>BasicType.{javax.persistence.metamodel.Type}</class-interface>
      <method name="getPersistenceType" return-type="javax.persistence.metamodel.Type.Type.PersistenceType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1224</id>
      <description>Return the Java type of the represented object. If the bindable type of the object is PLURAL_ATTRIBUTE, the Java element type is returned. If the bindable type is SINGULAR_ATTRIBUTE or ENTITY_TYPE, the Java type of the represented entity or attribute is returned.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Bindable</class-interface>
      <method name="getBindableJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1225</id>
      <description>Return the bindable type of the represented object.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Bindable</class-interface>
      <method name="getBindableType" return-type="javax.persistence.metamodel.Bindable.Bindable.BindableType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1226</id>
      <description/>
      <package>javax.persistence.metamodel</package>
      <class-interface>Bindable.BindableType</class-interface>
      <method name="valueOf" return-type="javax.persistence.metamodel.Bindable.Bindable.BindableType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1227</id>
      <description/>
      <package>javax.persistence.metamodel</package>
      <class-interface>Bindable.BindableType</class-interface>
      <method name="values" return-type="javax.persistence.metamodel.Bindable.Bindable.BindableType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1228</id>
      <description>Return the collection type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>CollectionAttribute.{javax.persistence.metamodel.PluralAttribute}</class-interface>
      <method name="getCollectionType" return-type="javax.persistence.metamodel.PluralAttribute.PluralAttribute.CollectionType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1229</id>
      <description>Return the type representing the element type of the collection.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>CollectionAttribute.{javax.persistence.metamodel.PluralAttribute}</class-interface>
      <method name="getElementType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1230</id>
      <description>Return the attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1231</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1232</id>
      <description>Return the attributes of the managed type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1233</id>
      <description>Return the Collection-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1234</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1235</id>
      <description>Return the Collection-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1236</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1237</id>
      <description>Return the attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1238</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1239</id>
      <description>Return the attributes declared by the managed type. Returns empty set if the managed type has no declared attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1240</id>
      <description>Return the Collection-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1241</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1242</id>
      <description>Return the Collection-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1243</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1244</id>
      <description>Return the List-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1245</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1246</id>
      <description>Return the List-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1247</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1248</id>
      <description>Return the Map-valued attribute declared by the managed type that corresponds to the specified name and Java key and value types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1249</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1250</id>
      <description>Return the Map-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1251</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1252</id>
      <description>Return all multi-valued attributes (Collection-, Set-, List-, and Map-valued attributes) declared by the managed type. Returns empty set if the managed type has no declared multi-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredPluralAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1253</id>
      <description>Return the Set-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1254</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1255</id>
      <description>Return the Set-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1256</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1257</id>
      <description>Return the single-valued attribute declared by the managed type that corresponds to the specified name and Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1258</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1259</id>
      <description>Return the single-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1260</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1261</id>
      <description>Return the single-valued attributes declared by the managed type. Returns empty set if the managed type has no declared single-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1262</id>
      <description>Return the List-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1263</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1264</id>
      <description>Return the List-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1265</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1266</id>
      <description>Return the Map-valued attribute of the managed type that corresponds to the specified name and Java key and value types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1267</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1268</id>
      <description>Return the Map-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1269</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1270</id>
      <description>Return all multi-valued attributes (Collection-, Set-, List-, and Map-valued attributes) of the managed type. Returns empty set if the managed type has no multi-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getPluralAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1271</id>
      <description>Return the Set-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1272</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1273</id>
      <description>Return the Set-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1274</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1275</id>
      <description>Return the single-valued attribute of the managed type that corresponds to the specified name and Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1276</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1277</id>
      <description>Return the single-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1278</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1279</id>
      <description>Return the single-valued attributes of the managed type. Returns empty set if the managed type has no single-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EmbeddableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1280</id>
      <description>Return the entity name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType</class-interface>
      <method name="getName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1281</id>
      <description>Return the Java type of the represented object. If the bindable type of the object is PLURAL_ATTRIBUTE, the Java element type is returned. If the bindable type is SINGULAR_ATTRIBUTE or ENTITY_TYPE, the Java type of the represented entity or attribute is returned.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.Bindable}</class-interface>
      <method name="getBindableJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1282</id>
      <description>Return the bindable type of the represented object.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.Bindable}</class-interface>
      <method name="getBindableType" return-type="javax.persistence.metamodel.Bindable.Bindable.BindableType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1283</id>
      <description>Return the attribute that corresponds to the id attribute declared by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getDeclaredId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1284</id>
      <description>if id attribute of the given type is not declared in the identifiable type or if the identifiable type has an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getDeclaredId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1285</id>
      <description>Return the attribute that corresponds to the version attribute declared by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getDeclaredVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1286</id>
      <description>if version attribute of the type is not declared in the identifiable type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getDeclaredVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1287</id>
      <description>Return the attribute that corresponds to the id attribute of the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1288</id>
      <description>if id attribute of the given type is not present in the identifiable type or if the identifiable type has an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1289</id>
      <description>Return the attributes corresponding to the id class of the identifiable type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getIdClassAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1290</id>
      <description>if the identifiable type does not have an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getIdClassAttributes" return-type="java.util.Set">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1291</id>
      <description>Return the type that represents the type of the id.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getIdType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1292</id>
      <description>Return the identifiable type that corresponds to the most specific mapped superclass or entity extended by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getSupertype" return-type="javax.persistence.metamodel.IdentifiableType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1293</id>
      <description>Return the attribute that corresponds to the version attribute of the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1294</id>
      <description>if version attribute of the given type is not present in the identifiable type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1295</id>
      <description>Whether the identifiable type has a single id attribute. Returns true for a simple id or embedded id; returns false for an idclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="hasSingleIdAttribute" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1296</id>
      <description>Whether the identifiable type has a version attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>EntityType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="hasVersionAttribute" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1297</id>
      <description>Return the attribute that corresponds to the id attribute declared by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getDeclaredId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1298</id>
      <description>if id attribute of the given type is not declared in the identifiable type or if the identifiable type has an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getDeclaredId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1299</id>
      <description>Return the attribute that corresponds to the version attribute declared by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getDeclaredVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1300</id>
      <description>if version attribute of the type is not declared in the identifiable type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getDeclaredVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1301</id>
      <description>Return the attribute that corresponds to the id attribute of the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1302</id>
      <description>if id attribute of the given type is not present in the identifiable type or if the identifiable type has an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1303</id>
      <description>Return the attributes corresponding to the id class of the identifiable type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getIdClassAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1304</id>
      <description>if the identifiable type does not have an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getIdClassAttributes" return-type="java.util.Set">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1305</id>
      <description>Return the type that represents the type of the id.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getIdType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1306</id>
      <description>Return the identifiable type that corresponds to the most specific mapped superclass or entity extended by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getSupertype" return-type="javax.persistence.metamodel.IdentifiableType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1307</id>
      <description>Return the attribute that corresponds to the version attribute of the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1308</id>
      <description>if version attribute of the given type is not present in the identifiable type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="getVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1309</id>
      <description>Whether the identifiable type has a single id attribute. Returns true for a simple id or embedded id; returns false for an idclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="hasSingleIdAttribute" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1310</id>
      <description>Whether the identifiable type has a version attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType</class-interface>
      <method name="hasVersionAttribute" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1311</id>
      <description>Return the attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1312</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1313</id>
      <description>Return the attributes of the managed type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1314</id>
      <description>Return the Collection-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1315</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1316</id>
      <description>Return the Collection-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1317</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1318</id>
      <description>Return the attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1319</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1320</id>
      <description>Return the attributes declared by the managed type. Returns empty set if the managed type has no declared attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1321</id>
      <description>Return the Collection-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1322</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1323</id>
      <description>Return the Collection-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1324</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1325</id>
      <description>Return the List-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1326</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1327</id>
      <description>Return the List-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1328</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1329</id>
      <description>Return the Map-valued attribute declared by the managed type that corresponds to the specified name and Java key and value types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1330</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1331</id>
      <description>Return the Map-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1332</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1333</id>
      <description>Return all multi-valued attributes (Collection-, Set-, List-, and Map-valued attributes) declared by the managed type. Returns empty set if the managed type has no declared multi-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredPluralAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1334</id>
      <description>Return the Set-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1335</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1336</id>
      <description>Return the Set-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1337</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1338</id>
      <description>Return the single-valued attribute declared by the managed type that corresponds to the specified name and Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1339</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1340</id>
      <description>Return the single-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1341</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1342</id>
      <description>Return the single-valued attributes declared by the managed type. Returns empty set if the managed type has no declared single-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getDeclaredSingularAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1343</id>
      <description>Return the List-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1344</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1345</id>
      <description>Return the List-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1346</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1347</id>
      <description>Return the Map-valued attribute of the managed type that corresponds to the specified name and Java key and value types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1348</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1349</id>
      <description>Return the Map-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1350</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1351</id>
      <description>Return all multi-valued attributes (Collection-, Set-, List-, and Map-valued attributes) of the managed type. Returns empty set if the managed type has no multi-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getPluralAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1352</id>
      <description>Return the Set-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1353</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1354</id>
      <description>Return the Set-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1355</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1356</id>
      <description>Return the single-valued attribute of the managed type that corresponds to the specified name and Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1357</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1358</id>
      <description>Return the single-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1359</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1360</id>
      <description>Return the single-valued attributes of the managed type. Returns empty set if the managed type has no single-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>IdentifiableType.{javax.persistence.metamodel.ManagedType}</class-interface>
      <method name="getSingularAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1361</id>
      <description>Return the collection type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ListAttribute.{javax.persistence.metamodel.PluralAttribute}</class-interface>
      <method name="getCollectionType" return-type="javax.persistence.metamodel.PluralAttribute.PluralAttribute.CollectionType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1362</id>
      <description>Return the type representing the element type of the collection.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ListAttribute.{javax.persistence.metamodel.PluralAttribute}</class-interface>
      <method name="getElementType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1363</id>
      <description>Return the attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1364</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1365</id>
      <description>Return the attributes of the managed type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1366</id>
      <description>Return the Collection-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1367</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1368</id>
      <description>Return the Collection-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1369</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1370</id>
      <description>Return the attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1371</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredAttribute" return-type="javax.persistence.metamodel.Attribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1372</id>
      <description>Return the attributes declared by the managed type. Returns empty set if the managed type has no declared attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1373</id>
      <description>Return the Collection-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1374</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1375</id>
      <description>Return the Collection-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1376</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredCollection" return-type="javax.persistence.metamodel.CollectionAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1377</id>
      <description>Return the List-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1378</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1379</id>
      <description>Return the List-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1380</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1381</id>
      <description>Return the Map-valued attribute declared by the managed type that corresponds to the specified name and Java key and value types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1382</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1383</id>
      <description>Return the Map-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1384</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1385</id>
      <description>Return all multi-valued attributes (Collection-, Set-, List-, and Map-valued attributes) declared by the managed type. Returns empty set if the managed type has no declared multi-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredPluralAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1386</id>
      <description>Return the Set-valued attribute declared by the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1387</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1388</id>
      <description>Return the Set-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1389</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1390</id>
      <description>Return the single-valued attribute declared by the managed type that corresponds to the specified name and Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1391</id>
      <description>if attribute of the given name and type is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1392</id>
      <description>Return the single-valued attribute declared by the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1393</id>
      <description>if attribute of the given name is not declared in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1394</id>
      <description>Return the single-valued attributes declared by the managed type. Returns empty set if the managed type has no declared single-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getDeclaredSingularAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1395</id>
      <description>Return the List-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1396</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1397</id>
      <description>Return the List-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1398</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getList" return-type="javax.persistence.metamodel.ListAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1399</id>
      <description>Return the Map-valued attribute of the managed type that corresponds to the specified name and Java key and value types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1400</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1401</id>
      <description>Return the Map-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1402</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getMap" return-type="javax.persistence.metamodel.MapAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1403</id>
      <description>Return all multi-valued attributes (Collection-, Set-, List-, and Map-valued attributes) of the managed type. Returns empty set if the managed type has no multi-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getPluralAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1404</id>
      <description>Return the Set-valued attribute of the managed type that corresponds to the specified name and Java element type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1405</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1406</id>
      <description>Return the Set-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1407</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSet" return-type="javax.persistence.metamodel.SetAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1408</id>
      <description>Return the single-valued attribute of the managed type that corresponds to the specified name and Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1409</id>
      <description>if attribute of the given name and type is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1410</id>
      <description>Return the single-valued attribute of the managed type that corresponds to the specified name.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1411</id>
      <description>if attribute of the given name is not present in the managed type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSingularAttribute" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1412</id>
      <description>Return the single-valued attributes of the managed type. Returns empty set if the managed type has no single-valued attributes.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType</class-interface>
      <method name="getSingularAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1413</id>
      <description>Return the represented Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType.{javax.persistence.metamodel.Type}</class-interface>
      <method name="getJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1414</id>
      <description>Return the persistence type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>ManagedType.{javax.persistence.metamodel.Type}</class-interface>
      <method name="getPersistenceType" return-type="javax.persistence.metamodel.Type.Type.PersistenceType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1415</id>
      <description>Return the Java type of the map key.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MapAttribute</class-interface>
      <method name="getKeyJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1416</id>
      <description>Return the type representing the key type of the map.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MapAttribute</class-interface>
      <method name="getKeyType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1417</id>
      <description>Return the collection type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MapAttribute.{javax.persistence.metamodel.PluralAttribute}</class-interface>
      <method name="getCollectionType" return-type="javax.persistence.metamodel.PluralAttribute.PluralAttribute.CollectionType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1418</id>
      <description>Return the type representing the element type of the collection.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MapAttribute.{javax.persistence.metamodel.PluralAttribute}</class-interface>
      <method name="getElementType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1419</id>
      <description>Return the attribute that corresponds to the id attribute declared by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getDeclaredId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1420</id>
      <description>if id attribute of the given type is not declared in the identifiable type or if the identifiable type has an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getDeclaredId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1421</id>
      <description>Return the attribute that corresponds to the version attribute declared by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getDeclaredVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1422</id>
      <description>if version attribute of the type is not declared in the identifiable type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getDeclaredVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1423</id>
      <description>Return the attribute that corresponds to the id attribute of the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1424</id>
      <description>if id attribute of the given type is not present in the identifiable type or if the identifiable type has an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getId" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1425</id>
      <description>Return the attributes corresponding to the id class of the identifiable type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getIdClassAttributes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1426</id>
      <description>if the identifiable type does not have an id class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getIdClassAttributes" return-type="java.util.Set">
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1427</id>
      <description>Return the type that represents the type of the id.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getIdType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1428</id>
      <description>Return the identifiable type that corresponds to the most specific mapped superclass or entity extended by the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getSupertype" return-type="javax.persistence.metamodel.IdentifiableType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1429</id>
      <description>Return the attribute that corresponds to the version attribute of the entity or mapped superclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1430</id>
      <description>if version attribute of the given type is not present in the identifiable type</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="getVersion" return-type="javax.persistence.metamodel.SingularAttribute">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1431</id>
      <description>Whether the identifiable type has a single id attribute. Returns true for a simple id or embedded id; returns false for an idclass.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="hasSingleIdAttribute" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1432</id>
      <description>Whether the identifiable type has a version attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>MappedSuperclassType.{javax.persistence.metamodel.IdentifiableType}</class-interface>
      <method name="hasVersionAttribute" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1433</id>
      <description>Return the metamodel embeddable type representing the embeddable class.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="embeddable" return-type="javax.persistence.metamodel.EmbeddableType">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1434</id>
      <description>if not an embeddable class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="embeddable" return-type="javax.persistence.metamodel.EmbeddableType">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1435</id>
      <description>Return the metamodel entity type representing the entity.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="entity" return-type="javax.persistence.metamodel.EntityType">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1436</id>
      <description>if not an entity</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="entity" return-type="javax.persistence.metamodel.EntityType">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1437</id>
      <description>Return the metamodel embeddable types. Returns empty set if there are no embeddable types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="getEmbeddables" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1438</id>
      <description>Return the metamodel entity types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="getEntities" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1439</id>
      <description>Return the metamodel managed types.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="getManagedTypes" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1440</id>
      <description>Return the metamodel managed type representing the entity, mapped superclass, or embeddable class.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="managedType" return-type="javax.persistence.metamodel.ManagedType">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1441</id>
      <description>if not a managed class</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Metamodel</class-interface>
      <method name="managedType" return-type="javax.persistence.metamodel.ManagedType">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1442</id>
      <description>Return the collection type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute</class-interface>
      <method name="getCollectionType" return-type="javax.persistence.metamodel.PluralAttribute.PluralAttribute.CollectionType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1443</id>
      <description>Return the type representing the element type of the collection.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute</class-interface>
      <method name="getElementType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1444</id>
      <description>Return the managed type representing the type in which the attribute was declared.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getDeclaringType" return-type="javax.persistence.metamodel.ManagedType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1445</id>
      <description>Return the java.lang.reflect.Member for the represented attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getJavaMember" return-type="java.lang.reflect.Member"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1446</id>
      <description>Return the Java type of the represented attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1447</id>
      <description>Return the name of the attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1448</id>
      <description>Return the persistent attribute type for the attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getPersistentAttributeType" return-type="javax.persistence.metamodel.Attribute.Attribute.PersistentAttributeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1449</id>
      <description>Is the attribute an association.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="isAssociation" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1450</id>
      <description>Is the attribute collection-valued (represents a Collection, Set, List, or Map).</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="isCollection" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1451</id>
      <description>Return the Java type of the represented object. If the bindable type of the object is PLURAL_ATTRIBUTE, the Java element type is returned. If the bindable type is SINGULAR_ATTRIBUTE or ENTITY_TYPE, the Java type of the represented entity or attribute is returned.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Bindable}</class-interface>
      <method name="getBindableJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1452</id>
      <description>Return the bindable type of the represented object.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.{javax.persistence.metamodel.Bindable}</class-interface>
      <method name="getBindableType" return-type="javax.persistence.metamodel.Bindable.Bindable.BindableType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1453</id>
      <description/>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.CollectionType</class-interface>
      <method name="valueOf" return-type="javax.persistence.metamodel.PluralAttribute.PluralAttribute.CollectionType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1454</id>
      <description/>
      <package>javax.persistence.metamodel</package>
      <class-interface>PluralAttribute.CollectionType</class-interface>
      <method name="values" return-type="javax.persistence.metamodel.PluralAttribute.PluralAttribute.CollectionType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1455</id>
      <description>Return the collection type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SetAttribute.{javax.persistence.metamodel.PluralAttribute}</class-interface>
      <method name="getCollectionType" return-type="javax.persistence.metamodel.PluralAttribute.PluralAttribute.CollectionType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1456</id>
      <description>Return the type representing the element type of the collection.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SetAttribute.{javax.persistence.metamodel.PluralAttribute}</class-interface>
      <method name="getElementType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1457</id>
      <description>Return the type that represents the type of the attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute</class-interface>
      <method name="getType" return-type="javax.persistence.metamodel.Type"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1458</id>
      <description>Is the attribute an id attribute. This method will return true if the attribute is an attribute that corresponds to a simple id, an embedded id, or an attribute of an id class.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute</class-interface>
      <method name="isId" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1459</id>
      <description>Can the attribute be null.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute</class-interface>
      <method name="isOptional" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1460</id>
      <description>Is the attribute a version attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute</class-interface>
      <method name="isVersion" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1461</id>
      <description>Return the managed type representing the type in which the attribute was declared.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getDeclaringType" return-type="javax.persistence.metamodel.ManagedType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1462</id>
      <description>Return the java.lang.reflect.Member for the represented attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getJavaMember" return-type="java.lang.reflect.Member"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1463</id>
      <description>Return the Java type of the represented attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1464</id>
      <description>Return the name of the attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1465</id>
      <description>Return the persistent attribute type for the attribute.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="getPersistentAttributeType" return-type="javax.persistence.metamodel.Attribute.Attribute.PersistentAttributeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1466</id>
      <description>Is the attribute an association.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="isAssociation" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1467</id>
      <description>Is the attribute collection-valued (represents a Collection, Set, List, or Map).</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Attribute}</class-interface>
      <method name="isCollection" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1468</id>
      <description>Return the Java type of the represented object. If the bindable type of the object is PLURAL_ATTRIBUTE, the Java element type is returned. If the bindable type is SINGULAR_ATTRIBUTE or ENTITY_TYPE, the Java type of the represented entity or attribute is returned.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Bindable}</class-interface>
      <method name="getBindableJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1469</id>
      <description>Return the bindable type of the represented object.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>SingularAttribute.{javax.persistence.metamodel.Bindable}</class-interface>
      <method name="getBindableType" return-type="javax.persistence.metamodel.Bindable.Bindable.BindableType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1470</id>
      <description>Class being modelled by the annotated class.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>StaticMetamodel</class-interface>
      <method name="value" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1471</id>
      <description>Return the represented Java type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Type</class-interface>
      <method name="getJavaType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1472</id>
      <description>Return the persistence type.</description>
      <package>javax.persistence.metamodel</package>
      <class-interface>Type</class-interface>
      <method name="getPersistenceType" return-type="javax.persistence.metamodel.Type.Type.PersistenceType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1473</id>
      <description/>
      <package>javax.persistence.metamodel</package>
      <class-interface>Type.PersistenceType</class-interface>
      <method name="valueOf" return-type="javax.persistence.metamodel.Type.Type.PersistenceType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1474</id>
      <description/>
      <package>javax.persistence.metamodel</package>
      <class-interface>Type.PersistenceType</class-interface>
      <method name="values" return-type="javax.persistence.metamodel.Type.Type.PersistenceType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1475</id>
      <description>Invoked when a class is being loaded or redefined. The implementation of this method may transform the supplied class file and return a new replacement class file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>ClassTransformer</class-interface>
      <method name="transform" return-type="byte[]">
        <parameters>
          <parameter>java.lang.ClassLoader</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.security.ProtectionDomain</parameter>
          <parameter>byte[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1476</id>
      <description>if the input does not represent a well-formed class file</description>
      <package>javax.persistence.spi</package>
      <class-interface>ClassTransformer</class-interface>
      <method name="transform" return-type="byte[]">
        <parameters>
          <parameter>java.lang.ClassLoader</parameter>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>java.security.ProtectionDomain</parameter>
          <parameter>byte[]</parameter>
        </parameters>
        <throw>java.lang.instrument.IllegalClassFormatException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1477</id>
      <description/>
      <package>javax.persistence.spi</package>
      <class-interface>LoadState</class-interface>
      <method name="valueOf" return-type="javax.persistence.spi.LoadState">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1478</id>
      <description/>
      <package>javax.persistence.spi</package>
      <class-interface>LoadState</class-interface>
      <method name="values" return-type="javax.persistence.spi.LoadState[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1479</id>
      <description>Called by the container when an EntityManagerFactory is to be created.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProvider</class-interface>
      <method name="createContainerEntityManagerFactory" return-type="javax.persistence.EntityManagerFactory">
        <parameters>
          <parameter>javax.persistence.spi.PersistenceUnitInfo</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1480</id>
      <description>Called by Persistence class when an EntityManagerFactory is to be created.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProvider</class-interface>
      <method name="createEntityManagerFactory" return-type="javax.persistence.EntityManagerFactory">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1481</id>
      <description>Return the utility interface implemented by the persistence provider.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProvider</class-interface>
      <method name="getProviderUtil" return-type="javax.persistence.spi.ProviderUtil"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1482</id>
      <description>Clear cache of providers.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProviderResolver</class-interface>
      <method name="clearCachedProviders" return-type="void"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1483</id>
      <description>Returns a list of the PersistenceProvider implementations available in the runtime environment.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProviderResolver</class-interface>
      <method name="getPersistenceProviders" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1484</id>
      <description>Returns the current persistence provider resolver.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProviderResolverHolder</class-interface>
      <method name="getPersistenceProviderResolver" return-type="javax.persistence.spi.PersistenceProviderResolver"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1485</id>
      <description/>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProviderResolverHolder</class-interface>
      <method name="PersistenceProviderResolverHolder" return-type="PersistenceProviderResolverHolder"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1486</id>
      <description>Defines the persistence provider resolver used.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProviderResolverHolder</class-interface>
      <method name="setPersistenceProviderResolver" return-type="void">
        <parameters>
          <parameter>javax.persistence.spi.PersistenceProviderResolver</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1487</id>
      <description>Add a transformer supplied by the provider that will be called for every new class definition or class redefinition that gets loaded by the loader returned by the PersistenceUnitInfo#getClassLoader method. The transformer has no effect on the result returned by the PersistenceUnitInfo#getNewTempClassLoader method. Classes are only transformed once within the same classloading scope, regardless of how many persistence units they may be a part of.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="addTransformer" return-type="void">
        <parameters>
          <parameter>javax.persistence.spi.ClassTransformer</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1488</id>
      <description>Returns whether classes in the root of the persistence unit that have not been explicitly listed are to be included in the set of managed classes. This value corresponds to the exclude-unlisted-classes element in the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="excludeUnlistedClasses" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1489</id>
      <description>Returns ClassLoader that the provider may use to load any classes, resources, or open URLs.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getClassLoader" return-type="java.lang.ClassLoader"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1490</id>
      <description>Returns a list of URLs for the jar files or exploded jar file directories that the persistence provider must examine for managed classes of the persistence unit. Each URL corresponds to a jar-file element in the persistence.xml file. A URL will either be a file: URL referring to a jar file or referring to a directory that contains an exploded jar file, or some other URL from which an InputStream in jar format can be obtained.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getJarFileUrls" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1491</id>
      <description>Returns the JTA-enabled data source to be used by the persistence provider. The data source corresponds to the jta-data-source element in the persistence.xml file or is provided at deployment or by the container.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getJtaDataSource" return-type="javax.sql.DataSource"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1492</id>
      <description>Returns the list of the names of the classes that the persistence provider must add to its set of managed classes. Each name corresponds to a named class element in the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getManagedClassNames" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1493</id>
      <description>Returns the list of the names of the mapping files that the persistence provider must load to determine the mappings for the entity classes. The mapping files must be in the standard XML mapping format, be uniquely named and be resource-loadable from the application classpath. Each mapping file name corresponds to a mapping-file element in the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getMappingFileNames" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1494</id>
      <description>Return a new instance of a ClassLoader that the provider may use to temporarily load any classes, resources, or open URLs. The scope and classpath of this loader is exactly the same as that of the loader returned by PersistenceUnitInfo#getClassLoader. None of the classes loaded by this class loader will be visible to application components. The provider may only use this ClassLoader within the scope of the PersistenceProvider#createContainerEntityManagerFactory call.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getNewTempClassLoader" return-type="java.lang.ClassLoader"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1495</id>
      <description>Returns the non-JTA-enabled data source to be used by the persistence provider for accessing data outside a JTA transaction. The data source corresponds to the named non-jta-data-source element in the persistence.xml file or provided at deployment or by the container.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getNonJtaDataSource" return-type="javax.sql.DataSource"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1496</id>
      <description>Returns the fully qualified name of the persistence provider implementation class. Corresponds to the provider element in the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getPersistenceProviderClassName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1497</id>
      <description>Returns the name of the persistence unit. Corresponds to the name attribute in the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getPersistenceUnitName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1498</id>
      <description>Returns the URL for the jar file or directory that is the root of the persistence unit. (If the persistence unit is rooted in the WEB-INF/classes directory, this will be the URL of that directory.) The URL will either be a file: URL referring to a jar file or referring to a directory that contains an exploded jar file, or some other URL from which an InputStream in jar format can be obtained.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getPersistenceUnitRootUrl" return-type="java.net.URL"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1499</id>
      <description>Returns the schema version of the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getPersistenceXMLSchemaVersion" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1500</id>
      <description>Returns a properties object. Each property corresponds to a property element in the persistence.xml file or to a property set by the container.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getProperties" return-type="java.util.Properties"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1501</id>
      <description>Returns the specification of how the provider must use a second-level cache for the persistence unit. The result of this method corresponds to the shared-cache-mode element in the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getSharedCacheMode" return-type="javax.persistence.SharedCacheMode"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1502</id>
      <description>Returns the transaction type of the entity managers created by the EntityManagerFactory. The transaction type corresponds to the transaction-type attribute in the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getTransactionType" return-type="javax.persistence.spi.PersistenceUnitTransactionType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1503</id>
      <description>Returns the validation mode to be used by the persistence provider for the persistence unit. The validation mode corresponds to the validation-mode element in the persistence.xml file.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitInfo</class-interface>
      <method name="getValidationMode" return-type="javax.persistence.ValidationMode"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1504</id>
      <description/>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitTransactionType</class-interface>
      <method name="valueOf" return-type="javax.persistence.spi.PersistenceUnitTransactionType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1505</id>
      <description/>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceUnitTransactionType</class-interface>
      <method name="values" return-type="javax.persistence.spi.PersistenceUnitTransactionType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1506</id>
      <description>If the provider determines that the entity has been provided by itself and that the state of all attributes for which FetchType.EAGER has been specified have been loaded, this method returns LoadState.LOADED. If the provider determines that the entity has been provided by itself and that not all attributes with FetchType.EAGER have been loaded, this method returns LoadState.NOT_LOADED. If the provider cannot determine if the entity has been provided by itself, this method returns LoadState.UNKNOWN. The provider's implementation of this method must not obtain a reference to any attribute value, as this could trigger the loading of entity state if the entity has been provided by a different provider.</description>
      <package>javax.persistence.spi</package>
      <class-interface>ProviderUtil</class-interface>
      <method name="isLoaded" return-type="javax.persistence.spi.LoadState">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1507</id>
      <description>If the provider determines that the entity has been provided by itself and that the state of the specified attribute has been loaded, this method returns LoadState.LOADED. If the provider determines that the entity has been provided by itself and that either entity attributes with FetchType.EAGER have not been loaded or that the state of the specified attribute has not been loaded, this methods returns LoadState.NOT_LOADED. If a provider cannot determine the load state, this method returns LoadState.UNKNOWN. The provider's implementation of this method must not obtain a reference to an attribute value, as this could trigger the loading of entity state if the entity has been provided by a different provider.</description>
      <package>javax.persistence.spi</package>
      <class-interface>ProviderUtil</class-interface>
      <method name="isLoadedWithoutReference" return-type="javax.persistence.spi.LoadState">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1508</id>
      <description>If the provider determines that the entity has been provided by itself and that the state of the specified attribute has been loaded, this method returns LoadState.LOADED. If a provider determines that the entity has been provided by itself and that either the entity attributes with FetchType.EAGER have not been loaded or that the state of the specified attribute has not been loaded, this method returns return LoadState.NOT_LOADED. If the provider cannot determine the load state, this method returns LoadState.UNKNOWN. The provider's implementation of this method is permitted to obtain a reference to the attribute value. (This access is safe because providers which might trigger the loading of the attribute state will have already been determined by isLoadedWithoutReference. )</description>
      <package>javax.persistence.spi</package>
      <class-interface>ProviderUtil</class-interface>
      <method name="isLoadedWithReference" return-type="javax.persistence.spi.LoadState">
        <parameters>
          <parameter>java.lang.Object</parameter>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1509</id>
      <description>Return an object of the specified type to allow access to the provider-specific API. If the provider's Cache implementation does not support the specified class, the PersistenceException is thrown.</description>
      <package>javax.persistence</package>
      <class-interface>Cache</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1510</id>
      <description>if the provider does not support the call</description>
      <package>javax.persistence</package>
      <class-interface>Cache</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1511</id>
      <description>(Optional) The Java type to which the column type is to be mapped. If the type element is not specified, the default JDBC type mapping for the column will be used.</description>
      <package>javax.persistence</package>
      <class-interface>ColumnResult</class-interface>
      <method name="type" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1512</id>
      <description>(Required) The mapping of columns in the SELECT list to the arguments of the intended constructor, in order.</description>
      <package>javax.persistence</package>
      <class-interface>ConstructorResult</class-interface>
      <method name="columns" return-type="javax.persistence.ColumnResult[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1513</id>
      <description>(Required) The class whose constructor is to be invoked.</description>
      <package>javax.persistence</package>
      <class-interface>ConstructorResult</class-interface>
      <method name="targetClass" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1514</id>
      <description>Create an instance of StoredProcedureQuery for executing a stored procedure in the database. Parameters must be registered before the stored procedure can be executed. If the stored procedure returns one or more result sets, any result set will be returned as a list of type Object[].</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNamedStoredProcedureQuery" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1515</id>
      <description>if a query has not been defined with the given name</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createNamedStoredProcedureQuery" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1516</id>
      <description>Create an instance of Query for executing a criteria update query.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaUpdate</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1517</id>
      <description>if the update query is found to be invalid</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaUpdate</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1518</id>
      <description>Create an instance of Query for executing a criteria delete query.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaDelete</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1519</id>
      <description>if the delete query is found to be invalid</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createQuery" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.criteria.CriteriaDelete</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1520</id>
      <description>Create an instance of StoredProcedureQuery for executing a stored procedure in the database. Parameters must be registered before the stored procedure can be executed. If the stored procedure returns one or more result sets, any result set will be returned as a list of type Object[].</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createStoredProcedureQuery" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1521</id>
      <description>if a stored procedure of the given name does not exist (or the query execution will fail)</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createStoredProcedureQuery" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1522</id>
      <description>Create an instance of StoredProcedureQuery for executing a stored procedure in the database. Parameters must be registered before the stored procedure can be executed. The resultClass arguments must be specified in the order in which the result sets will be returned by the stored procedure invocation.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createStoredProcedureQuery" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1523</id>
      <description>if a stored procedure of the given name does not exist (or the query execution will fail)</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createStoredProcedureQuery" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1524</id>
      <description>Create an instance of StoredProcedureQuery for executing a stored procedure in the database. Parameters must be registered before the stored procedure can be executed. The resultSetMapping arguments must be specified in the order in which the result sets will be returned by the stored procedure invocation.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createStoredProcedureQuery" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1525</id>
      <description>if a stored procedure or result set mapping of the given name does not exist (or the query execution will fail)</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createStoredProcedureQuery" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.String[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1526</id>
      <description>Determine whether the entity manager is joined to the current transaction. Returns false if the entity manager is not joined to the current transaction or if no transaction is active</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="isJoinedToTransaction" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1527</id>
      <description>Define the query, typed query, or stored procedure query as a named query such that future query objects can be created from it using the createNamedQuery or createNamedStoredProcedureQuery method. Any configuration of the query object (except for actual parameter binding) in effect when the named query is added is retained as part of the named query definition. This includes configuration information such as max results, hints, flush mode, lock mode, result set mapping information, and information about stored procedure parameters. When the query is executed, information that can be set by means of the query APIs can be overridden. Information that is overridden does not affect the named query as registered with the entity manager factory, and thus does not affect subsequent query objects created from it by means of the createNamedQuery or createNamedStoredProcedureQuery method. If a named query of the same name has been previously defined, either statically via metadata or via this method, that query definition is replaced.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="addNamedQuery" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.Query</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1528</id>
      <description>Return an object of the specified type to allow access to the provider-specific API. If the provider's EntityManagerFactory implementation does not support the specified class, the PersistenceException is thrown.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1529</id>
      <description>if the provider does not support the call</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1530</id>
      <description>(Required) Array of NamedStoredProcedureQuery annotations.</description>
      <package>javax.persistence</package>
      <class-interface>NamedStoredProcedureQueries</class-interface>
      <method name="value" return-type="javax.persistence.NamedStoredProcedureQuery[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1531</id>
      <description>Query properties and hints. (May include vendor-specific query hints.)</description>
      <package>javax.persistence</package>
      <class-interface>NamedStoredProcedureQuery</class-interface>
      <method name="hints" return-type="javax.persistence.QueryHint[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1532</id>
      <description>The name used to refer to the query with the EntityManager methods that create stored procedure query objects.</description>
      <package>javax.persistence</package>
      <class-interface>NamedStoredProcedureQuery</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1533</id>
      <description>Information about all parameters of the stored procedure. All parameters must be specified in the order in which they occur in the parameter list of the stored procedure.</description>
      <package>javax.persistence</package>
      <class-interface>NamedStoredProcedureQuery</class-interface>
      <method name="parameters" return-type="javax.persistence.StoredProcedureParameter[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1534</id>
      <description>The name of the stored procedure in the database.</description>
      <package>javax.persistence</package>
      <class-interface>NamedStoredProcedureQuery</class-interface>
      <method name="procedureName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1535</id>
      <description>The class or classes that are used to map the results.</description>
      <package>javax.persistence</package>
      <class-interface>NamedStoredProcedureQuery</class-interface>
      <method name="resultClasses" return-type="java.lang.Class[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1537</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>ParameterMode</class-interface>
      <method name="valueOf" return-type="javax.persistence.ParameterMode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1538</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>ParameterMode</class-interface>
      <method name="values" return-type="javax.persistence.ParameterMode[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1539</id>
      <description>(Optional) Specifies whether the persistence context is always automatically synchronized with the current transaction or whether the persistence context must be explicitly joined to the current transaction by means of the EntityManager EntityManager#joinTransaction joinTransaction method.</description>
      <package>javax.persistence</package>
      <class-interface>PersistenceContext</class-interface>
      <method name="synchronization" return-type="javax.persistence.SynchronizationType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1540</id>
      <description>Specifies the result set mapping to constructors.</description>
      <package>javax.persistence</package>
      <class-interface>SqlResultSetMapping</class-interface>
      <method name="classes" return-type="javax.persistence.ConstructorResult[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1541</id>
      <description>Specifies whether the parameter is an IN, INOUT, OUT, or REF_CURSOR parameter. REF_CURSOR parameters are used by some databases to return result sets from a stored procedure.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureParameter</class-interface>
      <method name="mode" return-type="javax.persistence.ParameterMode"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1542</id>
      <description>The name of the parameter as defined by the stored procedure in the database. If a name is not specified, it is assumed that the stored procedure uses positional parameters.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureParameter</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1543</id>
      <description>JDBC type of the paramter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureParameter</class-interface>
      <method name="type" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1544</id>
      <description>Return true if the first result corresponds to a result set, and false if it is an update count or if there are no results other than through INOUT and OUT parameters, if any.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="execute" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1545</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="execute" return-type="boolean">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1546</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="execute" return-type="boolean">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1547</id>
      <description>Retrieve a value passed back from the procedure through an INOUT or OUT parameter. For portability, all results corresponding to result sets and update counts must be retrieved before the values of output parameters.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getOutputParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1548</id>
      <description>if the position does not correspond to a parameter of the query or is not an INOUT or OUT parameter</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getOutputParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1549</id>
      <description>Retrieve a value passed back from the procedure through an INOUT or OUT parameter. For portability, all results corresponding to result sets and update counts must be retrieved before the values of output parameters.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getOutputParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1550</id>
      <description>if the parameter name does not correspond to a parameter of the query or is not an INOUT or OUT parameter</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getOutputParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1551</id>
      <description>Return the update count or -1 if there is no pending result or if the next result is not an update count.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getUpdateCount" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1552</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getUpdateCount" return-type="int">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1553</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getUpdateCount" return-type="int">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1554</id>
      <description>Return true if the next result corresponds to a result set, and false if it is an update count or if there are no results other than through INOUT and OUT parameters, if any.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="hasMoreResults" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1555</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="hasMoreResults" return-type="boolean">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1556</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="hasMoreResults" return-type="boolean">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1557</id>
      <description>Register a positional parameter. All parameters must be registered.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="registerStoredProcedureParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.persistence.ParameterMode</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1558</id>
      <description>Register a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="registerStoredProcedureParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
          <parameter>javax.persistence.ParameterMode</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1559</id>
      <description>Set the flush mode type to be used for the query execution. The flush mode type applies to the query regardless of the flush mode type in use for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setFlushMode" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>javax.persistence.FlushModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1560</id>
      <description>Set a query property or hint. The hints elements may be used to specify query properties and hints. Properties defined by this specification must be observed by the provider. Vendor-specific hints that are not recognized by a provider must be silently ignored. Portable applications should not rely on the standard timeout hint. Depending on the database in use, this hint may or may not be observed.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setHint" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1561</id>
      <description>if the second argument is not valid for the implementation</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setHint" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1562</id>
      <description>Bind the value of a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1563</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1564</id>
      <description>Bind an instance of java.util.Calendar to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1565</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1566</id>
      <description>Bind an instance of java.util.Date to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1567</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1568</id>
      <description>Bind an argument value to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1569</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1570</id>
      <description>Bind an instance of java.util.Calendar to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1571</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1572</id>
      <description>Bind an instance of java.util.Date to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1573</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1574</id>
      <description>Bind an argument value to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1575</id>
      <description>if position does not correspond to a positional parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1576</id>
      <description>Bind an instance of java.util.Calendar to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1577</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1578</id>
      <description>Bind an instance of java.util.Date to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1579</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="setParameter" return-type="javax.persistence.StoredProcedureQuery">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1580</id>
      <description>Execute an update or delete statement.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int"/>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1581</id>
      <description>if called for a Java Persistence query language SELECT statement or for a criteria query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1582</id>
      <description>if there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1583</id>
      <description>if the statement execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1584</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1585</id>
      <description>The position of the first result the query object was set to retrieve. Returns 0 if setFirstResult was not applied to the query object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getFirstResult" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1586</id>
      <description>Get the flush mode in effect for the query execution. If a flush mode has not been set for the query object, returns the flush mode in effect for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getFlushMode" return-type="javax.persistence.FlushModeType"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1587</id>
      <description>Get the properties and hints and associated values that are in effect for the query instance.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getHints" return-type="java.util.Map"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1588</id>
      <description>Get the current lock mode for the query. Returns null if a lock mode has not been set on the query object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1589</id>
      <description>if the query is found not to be a Java Persistence query language SELECT query or a Criteria API query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getLockMode" return-type="javax.persistence.LockModeType">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1590</id>
      <description>The maximum number of results the query object was set to retrieve. Returns Integer.MAX_VALUE if setMaxResults was not applied to the query object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getMaxResults" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1591</id>
      <description>Get the parameter object corresponding to the declared parameter of the given name. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1592</id>
      <description>if the parameter of the specified name does not exist</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1593</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1594</id>
      <description>Get the parameter object corresponding to the declared parameter of the given name and type. This method is required to be supported for criteria queries only.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1595</id>
      <description>if the parameter of the specified name does not exist or is not assignable to the type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1596</id>
      <description>if invoked on a native query or Java Persistence query language query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1597</id>
      <description>Get the parameter object corresponding to the declared positional parameter with the given position. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1598</id>
      <description>if the parameter with the specified position does not exist</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1599</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1600</id>
      <description>Get the parameter object corresponding to the declared positional parameter with the given position and type. This method is not required to be supported by the provider.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1601</id>
      <description>if the parameter with the specified position does not exist or is not assignable to the type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1602</id>
      <description>if invoked on a native query or Java Persistence query language query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameter" return-type="javax.persistence.Parameter">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1603</id>
      <description>Get the parameter objects corresponding to the declared parameters of the query. Returns empty set if the query has no parameters. This method is not required to be supported for native queries.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameters" return-type="java.util.Set"/>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1604</id>
      <description>if invoked on a native query when the implementation does not support this use</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameters" return-type="java.util.Set">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1605</id>
      <description>Return the input value bound to the parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1606</id>
      <description>if the parameter is not a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1607</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1608</id>
      <description>Return the input value bound to the named parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1609</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1610</id>
      <description>if the parameter of the specified name does not exist</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1611</id>
      <description>Return the input value bound to the positional parameter. (Note that OUT parameters are unbound.)</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1612</id>
      <description>if the parameter has not been been bound</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1613</id>
      <description>if the parameter with the specified position does not exist</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getParameterValue" return-type="java.lang.Object">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1614</id>
      <description>Execute a SELECT query and return the query results as an untyped List.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1615</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1616</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="false" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1617</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1618</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1619</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1620</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1621</id>
      <description>Execute a SELECT query that returns a single untyped result.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1622</id>
      <description>if there is no result</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NoResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1623</id>
      <description>if more than one result</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NonUniqueResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1624</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1625</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1626</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1627</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1628</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1629</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1630</id>
      <description>Return a boolean indicating whether a value has been bound to the parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="isBound" return-type="boolean">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1631</id>
      <description>Set the position of the first result to retrieve.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setFirstResult" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1632</id>
      <description>if the argument is negative</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setFirstResult" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1633</id>
      <description>Set the flush mode type to be used for the query execution. The flush mode type applies to the query regardless of the flush mode type in use for the entity manager.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setFlushMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.FlushModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1634</id>
      <description>Set a query property or hint. The hints elements may be used to specify query properties and hints. Properties defined by this specification must be observed by the provider. Vendor-specific hints that are not recognized by a provider must be silently ignored. Portable applications should not rely on the standard timeout hint. Depending on the database in use and the locking mechanisms used by the provider, this hint may or may not be observed.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setHint" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1635</id>
      <description>if the second argument is not valid for the implementation</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setHint" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1636</id>
      <description>Set the lock mode type to be used for the query execution.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setLockMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1637</id>
      <description>if the query is found not to be a Java Persistence query language SELECT query or a CriteriaQuery query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setLockMode" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.LockModeType</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1638</id>
      <description>Set the maximum number of results to retrieve.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setMaxResults" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="false" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1639</id>
      <description>if the argument is negative</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setMaxResults" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1640</id>
      <description>Bind the value of a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1641</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1642</id>
      <description>Bind an instance of java.util.Calendar to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1643</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1644</id>
      <description>Bind an instance of java.util.Date to a Parameter object.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1645</id>
      <description>if the parameter does not correspond to a parameter of the query</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>javax.persistence.Parameter</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1646</id>
      <description>Bind an argument value to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1647</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1648</id>
      <description>Bind an instance of java.util.Calendar to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1649</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1650</id>
      <description>Bind an instance of java.util.Date to a named parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="removed" testable="false">
      <id>PERSISTENCE:JAVADOC:1651</id>
      <description>if the parameter name does not correspond to a parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1652</id>
      <description>Bind an argument value to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1653</id>
      <description>if position does not correspond to a positional parameter of the query or if the argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1654</id>
      <description>Bind an instance of java.util.Calendar to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1655</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Calendar</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1656</id>
      <description>Bind an instance of java.util.Date to a positional parameter.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="removed" testable="true">
      <id>PERSISTENCE:JAVADOC:1657</id>
      <description>if position does not correspond to a positional parameter of the query or if the value argument is of incorrect type</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="setParameter" return-type="javax.persistence.Query">
        <parameters>
          <parameter>int</parameter>
          <parameter>java.util.Date</parameter>
          <parameter>javax.persistence.TemporalType</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="true" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1658</id>
      <description>Return an object of the specified type to allow access to the provider-specific API. If the provider's query implementation does not support the specified class, the PersistenceException is thrown.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:1659</id>
      <description>if the provider does not support the call</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery.{javax.persistence.Query}</class-interface>
      <method name="unwrap" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1660</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>SynchronizationType</class-interface>
      <method name="valueOf" return-type="javax.persistence.SynchronizationType">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1661</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>SynchronizationType</class-interface>
      <method name="values" return-type="javax.persistence.SynchronizationType[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1668</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CollectionJoin</class-interface>
      <method name="on" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1669</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CollectionJoin</class-interface>
      <method name="on" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1676</id>
      <description>Create a CriteriaDelete query object to perform a bulk delete operation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="createCriteriaDelete" return-type="javax.persistence.criteria.CriteriaDelete">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1677</id>
      <description>Create a CriteriaUpdate query object to perform a bulk update operation.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="createCriteriaUpdate" return-type="javax.persistence.criteria.CriteriaUpdate">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1678</id>
      <description>Downcast Join object to the specified type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="treat" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.criteria.Join</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1679</id>
      <description>Downcast CollectionJoin object to the specified type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="treat" return-type="javax.persistence.criteria.CollectionJoin">
        <parameters>
          <parameter>javax.persistence.criteria.CollectionJoin</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1680</id>
      <description>Downcast SetJoin object to the specified type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="treat" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.criteria.SetJoin</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1681</id>
      <description>Downcast ListJoin object to the specified type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="treat" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.criteria.ListJoin</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1682</id>
      <description>Downcast MapJoin object to the specified type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="treat" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.criteria.MapJoin</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1683</id>
      <description>Downcast Path object to the specified type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="treat" return-type="javax.persistence.criteria.Path">
        <parameters>
          <parameter>javax.persistence.criteria.Path</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1684</id>
      <description>Downcast Root object to the specified type.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaBuilder</class-interface>
      <method name="treat" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>javax.persistence.criteria.Root</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1685</id>
      <description>Create and add a query root corresponding to the entity that is the target of the delete. A CriteriaDelete object has a single root, the entity that is being deleted.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaDelete</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1686</id>
      <description>Create and add a query root corresponding to the entity that is the target of the delete. A CriteriaDelete object has a single root, the entity that is being deleted.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaDelete</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>javax.persistence.metamodel.EntityType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1687</id>
      <description>Return the query root.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaDelete</class-interface>
      <method name="getRoot" return-type="javax.persistence.criteria.Root"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1688</id>
      <description>Modify the delete query to restrict the target of the deletion according to the specified boolean expression. Replaces the previously added restriction(s), if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaDelete</class-interface>
      <method name="where" return-type="javax.persistence.criteria.CriteriaDelete">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1689</id>
      <description>Modify the delete query to restrict the target of the deletion according to the conjunction of the specified restriction predicates. Replaces the previously added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaDelete</class-interface>
      <method name="where" return-type="javax.persistence.criteria.CriteriaDelete">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1696</id>
      <description>Create and add a query root corresponding to the entity that is the target of the update. A CriteriaUpdate object has a single root, the entity that is being updated.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1697</id>
      <description>Create and add a query root corresponding to the entity that is the target of the update. A CriteriaUpdate object has a single root, the entity that is being updated.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="from" return-type="javax.persistence.criteria.Root">
        <parameters>
          <parameter>javax.persistence.metamodel.EntityType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1698</id>
      <description>Return the query root.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="getRoot" return-type="javax.persistence.criteria.Root"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1699</id>
      <description>Update the value of the specified attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="set" return-type="javax.persistence.criteria.CriteriaUpdate">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1700</id>
      <description>Update the value of the specified attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="set" return-type="javax.persistence.criteria.CriteriaUpdate">
        <parameters>
          <parameter>javax.persistence.metamodel.SingularAttribute</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1701</id>
      <description>Update the value of the specified attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="set" return-type="javax.persistence.criteria.CriteriaUpdate">
        <parameters>
          <parameter>javax.persistence.criteria.Path</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1702</id>
      <description>Update the value of the specified attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="set" return-type="javax.persistence.criteria.CriteriaUpdate">
        <parameters>
          <parameter>javax.persistence.criteria.Path</parameter>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1703</id>
      <description>Update the value of the specified attribute.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="set" return-type="javax.persistence.criteria.CriteriaUpdate">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1704</id>
      <description>Modify the update query to restrict the target of the update according to the specified boolean expression. Replaces the previously added restriction(s), if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="where" return-type="javax.persistence.criteria.CriteriaUpdate">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1705</id>
      <description>Modify the update query to restrict the target of the update according to the conjunction of the specified restriction predicates. Replaces the previously added restriction(s), if any. If no restrictions are specified, any previously added restrictions are simply removed.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate</class-interface>
      <method name="where" return-type="javax.persistence.criteria.CriteriaUpdate">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1715</id>
      <description>Return the predicate that corresponds to the ON restriction(s) on the join, or null if no ON condition has been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join</class-interface>
      <method name="getOn" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1716</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join</class-interface>
      <method name="on" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1717</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Join</class-interface>
      <method name="on" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1718</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ListJoin</class-interface>
      <method name="on" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1719</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>ListJoin</class-interface>
      <method name="on" return-type="javax.persistence.criteria.ListJoin">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1720</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>MapJoin</class-interface>
      <method name="on" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1721</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>MapJoin</class-interface>
      <method name="on" return-type="javax.persistence.criteria.MapJoin">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1722</id>
      <description>Return the predicate that corresponds to the ON restriction(s) on the join, or null if no ON condition has been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>PluralJoin.{javax.persistence.criteria.Join}</class-interface>
      <method name="getOn" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1723</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>PluralJoin.{javax.persistence.criteria.Join}</class-interface>
      <method name="on" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1724</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>PluralJoin.{javax.persistence.criteria.Join}</class-interface>
      <method name="on" return-type="javax.persistence.criteria.Join">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1725</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>SetJoin</class-interface>
      <method name="on" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.criteria.Expression</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:1726</id>
      <description>Modify the join to restrict the result according to the specified ON condition and return the join object. Replaces the previous ON condition, if any.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>SetJoin</class-interface>
      <method name="on" return-type="javax.persistence.criteria.SetJoin">
        <parameters>
          <parameter>javax.persistence.criteria.Predicate[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:2699</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:2700</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:2701</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:2702</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:2703</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:2704</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:2706</id>
      <description>if there is no result</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NoResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:2707</id>
      <description>if more than one result</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NonUniqueResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:2708</id>
      <description>if called for a Java Persistence query language UPDATE or DELETE statement</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:2709</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:2710</id>
      <description>if a lock mode other than NONE has been set and there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:2711</id>
      <description>if pessimistic locking fails and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PessimisticLockException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:2712</id>
      <description>if pessimistic locking fails and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.LockTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:2713</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>TypedQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3310</id>
      <description>Converts the value stored in the entity attribute into the data representation to be stored in the database.</description>
      <package>javax.persistence</package>
      <class-interface>AttributeConverter</class-interface>
      <method name="convertToDatabaseColumn" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3311</id>
      <description>Converts the data stored in the database column into the value to be stored in the entity attribute. Note that it is the responsibility of the converter writer to specify the correct dbData type for the corresponding column for use by the JDBC driver: i.e., persistence providers are not expected to do such type conversion.</description>
      <package>javax.persistence</package>
      <class-interface>AttributeConverter</class-interface>
      <method name="convertToEntityAttribute" return-type="java.lang.Object">
        <parameters>
          <parameter>java.lang.Object</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3312</id>
      <description>The attributeName element must be specified unless the Convert annotation is on an attribute of basic type or on an element collection of basic type. In these cases, the attributeName element must not be specified.</description>
      <package>javax.persistence</package>
      <class-interface>Convert</class-interface>
      <method name="attributeName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3313</id>
      <description>Specifies the converter to be applied. A value for this element must be specified if multiple converters would otherwise apply.</description>
      <package>javax.persistence</package>
      <class-interface>Convert</class-interface>
      <method name="converter" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3314</id>
      <description>Used to disable an auto-apply or inherited converter. If disableConversion is true, the converter element should not be specified.</description>
      <package>javax.persistence</package>
      <class-interface>Convert</class-interface>
      <method name="disableConversion" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3315</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>Converter</class-interface>
      <method name="autoApply" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3316</id>
      <description>The Convert mappings that are to be applied.</description>
      <package>javax.persistence</package>
      <class-interface>Converts</class-interface>
      <method name="value" return-type="javax.persistence.Convert[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3317</id>
      <description>The names of one or more result set mappings, as defined in metadata.</description>
      <package>javax.persistence</package>
      <class-interface>NamedStoredProcedureQuery</class-interface>
      <method name="resultSetMappings" return-type="java.lang.String[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3318</id>
      <description>Create a new JTA application-managed EntityManager with the specified synchronization type and map of properties. This method returns a new EntityManager instance each time it is invoked. The isOpen method will return true on the returned instance.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="createEntityManager" return-type="javax.persistence.EntityManager">
        <parameters>
          <parameter>javax.persistence.SynchronizationType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3319</id>
      <description>if the entity manager factory has been configured for resource-local entity managers or is closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="createEntityManager" return-type="javax.persistence.EntityManager">
        <parameters>
          <parameter>javax.persistence.SynchronizationType</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3321</id>
      <description>(Optional) Indexes for the table. These are only used if table generation is in effect.</description>
      <package>javax.persistence</package>
      <class-interface>CollectionTable</class-interface>
      <method name="indexes" return-type="javax.persistence.Index[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3322</id>
      <description>Create a new JTA application-managed EntityManager with the specified synchronization type. This method returns a new EntityManager instance each time it is invoked. The isOpen method will return true on the returned instance.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="createEntityManager" return-type="javax.persistence.EntityManager">
        <parameters>
          <parameter>javax.persistence.SynchronizationType</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3323</id>
      <description>if the entity manager factory has been configured for resource-local entity managers or is closed</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="createEntityManager" return-type="javax.persistence.EntityManager">
        <parameters>
          <parameter>javax.persistence.SynchronizationType</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3325</id>
      <description>(Optional) The foreign key constraint definition.</description>
      <package>javax.persistence</package>
      <class-interface>ForeignKey</class-interface>
      <method name="foreignKeyDefinition" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3326</id>
      <description>(Optional) The name of the foreign key constraint. If this is not specified, it defaults to a provider-generated name.</description>
      <package>javax.persistence</package>
      <class-interface>ForeignKey</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3327</id>
      <description>(Required) The names of the columns to be included in the index, in order.</description>
      <package>javax.persistence</package>
      <class-interface>Index</class-interface>
      <method name="columnList" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3328</id>
      <description>(Optional) The name of the index; defaults to a provider-generated name.</description>
      <package>javax.persistence</package>
      <class-interface>Index</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3329</id>
      <description>(Optional) Whether the index is unique.</description>
      <package>javax.persistence</package>
      <class-interface>Index</class-interface>
      <method name="unique" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3330</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint when table generation is in effect. If this element is not specified, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumn</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3331</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint when table generation is in effect. If both this element and the foreignKey element of any of the JoinColumn elements are specified, the behavior is undefined. If no foreign key annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>JoinColumns</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3332</id>
      <description>(Optional) Indexes for the table. These are only used if table generation is in effect.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="indexes" return-type="javax.persistence.Index[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3333</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint when table generation is in effect. If this element is not specified, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumn</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3334</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint when table generation is in effect. If both this element and the foreignKey element of any of the MapKeyJoinColumn elements are specified, the behavior is undefined. If no foreign key annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>MapKeyJoinColumns</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3335</id>
      <description>Create database schemas and/or tables and/or create DDL scripts as determined by the supplied properties. Called when schema generation is to occur as a separate phase from creation of the entity manager factory.</description>
      <package>javax.persistence</package>
      <class-interface>Persistence</class-interface>
      <method name="generateSchema" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3336</id>
      <description>if insufficient or inconsistent configuration information is provided or if schema generation otherwise fails.</description>
      <package>javax.persistence</package>
      <class-interface>Persistence</class-interface>
      <method name="generateSchema" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3337</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint for the primary key join column when table generation is in effect. If this element is not specified, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>PrimaryKeyJoinColumn</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3338</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint when table generation is in effect. If both this element and the foreignKey element of any of the PrimaryKeyJoinColumn elements are specified, the behavior is undefined. If no foreign key annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>PrimaryKeyJoinColumns</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3339</id>
      <description>(Optional) Indexes for the table. These are only used if table generation is in effect.</description>
      <package>javax.persistence</package>
      <class-interface>SecondaryTable</class-interface>
      <method name="indexes" return-type="javax.persistence.Index[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3340</id>
      <description>(Optional) Indexes for the table. These are only used if table generation is in effect. Note that it is not necessary to specify an index for a primary key, as the primary key index will be created automatically.</description>
      <package>javax.persistence</package>
      <class-interface>Table</class-interface>
      <method name="indexes" return-type="javax.persistence.Index[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3341</id>
      <description>(Optional) Indexes for the table. These are only used if table generation is in effect. Note that it is not necessary to specify an index for a primary key, as the primary key index will be created automatically.</description>
      <package>javax.persistence</package>
      <class-interface>TableGenerator</class-interface>
      <method name="indexes" return-type="javax.persistence.Index[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:3342</id>
      <description>Return the predicate that corresponds to the where clause restriction(s), or null if no restrictions have been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery.{javax.persistence.criteria.CommonAbstractCriteria}</class-interface>
      <method name="getRestriction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:3343</id>
      <description>Create a subquery of the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>AbstractQuery.{javax.persistence.criteria.CommonAbstractCriteria}</class-interface>
      <method name="subquery" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:3344</id>
      <description>Return the predicate that corresponds to the where clause restriction(s), or null if no restrictions have been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CommonAbstractCriteria</class-interface>
      <method name="getRestriction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:3345</id>
      <description>Create a subquery of the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CommonAbstractCriteria</class-interface>
      <method name="subquery" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3352</id>
      <description>Return the predicate that corresponds to the where clause restriction(s), or null if no restrictions have been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaDelete.{javax.persistence.criteria.CommonAbstractCriteria}</class-interface>
      <method name="getRestriction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3353</id>
      <description>Create a subquery of the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaDelete.{javax.persistence.criteria.CommonAbstractCriteria}</class-interface>
      <method name="subquery" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3354</id>
      <description>Return the predicate that corresponds to the where clause restriction(s), or null if no restrictions have been specified.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate.{javax.persistence.criteria.CommonAbstractCriteria}</class-interface>
      <method name="getRestriction" return-type="javax.persistence.criteria.Predicate"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3355</id>
      <description>Create a subquery of the query.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>CriteriaUpdate.{javax.persistence.criteria.CommonAbstractCriteria}</class-interface>
      <method name="subquery" return-type="javax.persistence.criteria.Subquery">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3356</id>
      <description>Return the query of which this is a subquery. This may be a CriteriaQuery, CriteriaUpdate, CriteriaDelete, or a Subquery.</description>
      <package>javax.persistence.criteria</package>
      <class-interface>Subquery</class-interface>
      <method name="getContainingQuery" return-type="javax.persistence.criteria.CommonAbstractCriteria"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:3357</id>
      <description>Create database schemas and/or tables and/or create DDL scripts as determined by the supplied properties. Called by the container when schema generation is to occur as a separate phase from creation of the entity manager factory.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProvider</class-interface>
      <method name="generateSchema" return-type="void">
        <parameters>
          <parameter>javax.persistence.spi.PersistenceUnitInfo</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:3358</id>
      <description>if insufficient or inconsistent configuration information is provided of if schema generation otherwise fails</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProvider</class-interface>
      <method name="generateSchema" return-type="void">
        <parameters>
          <parameter>javax.persistence.spi.PersistenceUnitInfo</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3360</id>
      <description>Return the name of the attribute corresponding to the attribute node.</description>
      <package>javax.persistence</package>
      <class-interface>AttributeNode</class-interface>
      <method name="getAttributeName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3362</id>
      <description>Add one or more attribute nodes to the entity graph.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>java.lang.String[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3363</id>
      <description>if the attribute is not an attribute of this entity.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>java.lang.String[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3364</id>
      <description>if the EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>java.lang.String[]</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3365</id>
      <description>Add one or more attribute nodes to the entity graph.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3366</id>
      <description>if the EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute[]</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3367</id>
      <description>Add a node to the graph that corresponds to a map key that is a managed type. This allows for construction of multi-node entity graphs that include related managed types.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3368</id>
      <description>if the attribute's target type is not an entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3369</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3370</id>
      <description>Add a node to the graph that corresponds to a map key that is a managed type with inheritance. This allows for construction of multi-node entity graphs that include related managed types. Subclass subgraphs will include the specified attributes of superclass subgraphs.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3371</id>
      <description>if the attribute's target type is not an entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3372</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3373</id>
      <description>Add a node to the graph that corresponds to a map key that is a managed type. This allows for construction of multi-node entity graphs that include related managed types.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3374</id>
      <description>if the attribute is not an attribute of this entity.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3375</id>
      <description>if the attribute's target type is not an entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3376</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3377</id>
      <description>Add a node to the graph that corresponds to a map key that is a managed type with inheritance. This allows for construction of multi-node entity graphs that include related managed types. Subclass subgraphs will automatically include the specified attributes of superclass subgraphs</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3378</id>
      <description>if the attribute is not an attribute of this entity.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3379</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3380</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3381</id>
      <description>Add additional attributes to this entity graph that correspond to attributes of subclasses of this EntityGraph's entity type. Subclass subgraphs will automatically include the specified attributes of superclass subgraphs.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubclassSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3382</id>
      <description>if the type is not an entity type</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubclassSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3383</id>
      <description>if the EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubclassSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3384</id>
      <description>Add a node to the graph that corresponds to a managed type. This allows for construction of multi-node entity graphs that include related managed types.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3385</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3386</id>
      <description>if the EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3387</id>
      <description>Add a node to the graph that corresponds to a managed type with inheritance. This allows for multiple subclass subgraphs to be defined for this node of the entity graph. Subclass subgraphs will automatically include the specified attributes of superclass subgraphs.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3388</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3389</id>
      <description>if the EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3390</id>
      <description>Add a node to the graph that corresponds to a managed type. This allows for construction of multi-node entity graphs that include related managed types.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3391</id>
      <description>if the attribute is not an attribute of this entity.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3392</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3393</id>
      <description>if the EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3394</id>
      <description>Add a node to the graph that corresponds to a managed type with inheritance. This allows for multiple subclass subgraphs to be defined for this node of the entity graph. Subclass subgraphs will automatically include the specified attributes of superclass subgraphs.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3395</id>
      <description>if the attribute is not an attribute of this managed type.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3396</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3397</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3398</id>
      <description>Return the attribute nodes of this entity that are included in the entity graph.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="getAttributeNodes" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3399</id>
      <description>Return the name of a named EntityGraph (an entity graph defined by means of the NamedEntityGraph annotation, XML descriptor element, or added by means of the addNamedEntityGraph method. Returns null if the EntityGraph is not a named EntityGraph.</description>
      <package>javax.persistence</package>
      <class-interface>EntityGraph</class-interface>
      <method name="getName" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3402</id>
      <description>Return a mutable EntityGraph that can be used to dynamically create an EntityGraph.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createEntityGraph" return-type="javax.persistence.EntityGraph">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3403</id>
      <description>Return a mutable copy of the named EntityGraph. If there is no entity graph with the specified name, null is returned.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="createEntityGraph" return-type="javax.persistence.EntityGraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3404</id>
      <description>Return a named EntityGraph. The returned EntityGraph should be considered immutable.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getEntityGraph" return-type="javax.persistence.EntityGraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3405</id>
      <description>if there is no EntityGraph of the given name</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getEntityGraph" return-type="javax.persistence.EntityGraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3406</id>
      <description>Return all named EntityGraphs that have been defined for the provided class type.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getEntityGraphs" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3407</id>
      <description>if the class is not an entity</description>
      <package>javax.persistence</package>
      <class-interface>EntityManager</class-interface>
      <method name="getEntityGraphs" return-type="java.util.List">
        <parameters>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3411</id>
      <description>Add a named copy of the EntityGraph to the EntityManagerFactory. If an entity graph with the same name already exists, it is replaced.</description>
      <package>javax.persistence</package>
      <class-interface>EntityManagerFactory</class-interface>
      <method name="addNamedEntityGraph" return-type="void">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>javax.persistence.EntityGraph</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3412</id>
      <description>(Optional) If the attribute references a Map type, this element can be used to specify a subgraph for the Key in the case of an Entity key type. A keySubgraph can not be specified without the Map attribute also being specified. If the target type has inheritance, multiple subgraphs can be specified. These additional subgraphs are intended to add subclass-specific attributes. Superclass subgraph entries will be merged into subclass subgraphs. The value of this element is the name of the key subgraph as specified by the name element of the corresponding NamedSubgraph element. If multiple key subgraphs are specified due to inheritance, they are referenced by this name.</description>
      <package>javax.persistence</package>
      <class-interface>NamedAttributeNode</class-interface>
      <method name="keySubgraph" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3413</id>
      <description>(Optional) If the attribute references a managed type that has its own AttributeNodes, this element is used to refer to that NamedSubgraph definition. If the target type has inheritance, multiple subgraphs can be specified. These additional subgraphs are intended to add subclass-specific attributes. Superclass subgraph entries will be merged into subclass subgraphs. The value of this element is the name of the subgraph as specified by the name element of the corresponding NamedSubgraph element. If multiple subgraphs are specified due to inheritance, they are referenced by this name.</description>
      <package>javax.persistence</package>
      <class-interface>NamedAttributeNode</class-interface>
      <method name="subgraph" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3414</id>
      <description>(Required) The name of the attribute that must be included in the graph.</description>
      <package>javax.persistence</package>
      <class-interface>NamedAttributeNode</class-interface>
      <method name="value" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3415</id>
      <description>(Optional) A list of attributes of the entity that are included in this graph.</description>
      <package>javax.persistence</package>
      <class-interface>NamedEntityGraph</class-interface>
      <method name="attributeNodes" return-type="javax.persistence.NamedAttributeNode[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3416</id>
      <description>(Optional) Includes all of the attributes of the annotated entity class as attribute nodes in the NamedEntityGraph without the need to explicitly list them. Included attributes can still be fully specified by an attribute node referencing a subgraph.</description>
      <package>javax.persistence</package>
      <class-interface>NamedEntityGraph</class-interface>
      <method name="includeAllAttributes" return-type="boolean"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3417</id>
      <description>(Optional) The name of the entity graph. Defaults to the entity name of the root entity.</description>
      <package>javax.persistence</package>
      <class-interface>NamedEntityGraph</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3418</id>
      <description>(Optional) A list of subgraphs that will add additional attributes for subclasses of the annotated entity class to the entity graph. Specified attributes from superclasses are included in subclasses.</description>
      <package>javax.persistence</package>
      <class-interface>NamedEntityGraph</class-interface>
      <method name="subclassSubgraphs" return-type="javax.persistence.NamedSubgraph[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3419</id>
      <description>(Optional) A list of subgraphs that are included in the entity graph. These are referenced by name from NamedAttributeNode definitions.</description>
      <package>javax.persistence</package>
      <class-interface>NamedEntityGraph</class-interface>
      <method name="subgraphs" return-type="javax.persistence.NamedSubgraph[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3420</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>NamedEntityGraphs</class-interface>
      <method name="value" return-type="javax.persistence.NamedEntityGraph[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3421</id>
      <description>(Required) The list of the attributes of the class that must be included. If the named subgraph corresponds to a subclass of the class referenced by the corresponding attribute node, then only subclass-specific attributes are listed.</description>
      <package>javax.persistence</package>
      <class-interface>NamedSubgraph</class-interface>
      <method name="attributeNodes" return-type="javax.persistence.NamedAttributeNode[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3422</id>
      <description>(Required) The name of the subgraph as referenced from a NamedAttributeNode element.</description>
      <package>javax.persistence</package>
      <class-interface>NamedSubgraph</class-interface>
      <method name="name" return-type="java.lang.String"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3423</id>
      <description>(Optional) The type represented by this subgraph. The element must be specified when this subgraph is extending a definition on behalf of a subclass.</description>
      <package>javax.persistence</package>
      <class-interface>NamedSubgraph</class-interface>
      <method name="type" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3424</id>
      <description>Add one or more attribute nodes to the entity graph.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>java.lang.String[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3425</id>
      <description>if the attribute is not an attribute of this managed type.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>java.lang.String[]</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3426</id>
      <description>if the EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>java.lang.String[]</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3427</id>
      <description>Add one or more attribute nodes to the entity graph.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute[]</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3428</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addAttributeNodes" return-type="void">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute[]</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3429</id>
      <description>Add a node to the graph that corresponds to a map key that is a managed type. This allows for construction of multinode entity graphs that include related managed types.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3430</id>
      <description>if the attribute's target type is not a managed type entity</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3431</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3432</id>
      <description>Add a node to the graph that corresponds to a map key that is a managed type with inheritance. This allows for construction of multi-node entity graphs that include related managed types. Subclass subgraphs will automatically include the specified attributes of superclass subgraphs</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3433</id>
      <description>if the attribute's target type is not a managed type entity</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3434</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3435</id>
      <description>Add a node to the graph that corresponds to a map key that is a managed type. This allows for construction of multi-node entity graphs that include related managed types.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3436</id>
      <description>if the attribute is not an attribute of this entity.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3437</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3438</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3439</id>
      <description>Add a node to the graph that corresponds to a map key that is a managed type with inheritance. This allows for construction of multi-node entity graphs that include related managed types. Subclass subgraphs will include the specified attributes of superclass subgraphs</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3440</id>
      <description>if the attribute is not an attribute of this entity.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3441</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3442</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addKeySubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3443</id>
      <description>Add a node to the graph that corresponds to a managed type. This allows for construction of multi-node entity graphs that include related managed types.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3444</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3445</id>
      <description>if the EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3446</id>
      <description>Add a node to the graph that corresponds to a managed type with inheritance. This allows for multiple subclass subgraphs to be defined for this node of the entity graph. Subclass subgraphs will automatically include the specified attributes of superclass subgraphs</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3447</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3448</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>javax.persistence.metamodel.Attribute</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3449</id>
      <description>Add a node to the graph that corresponds to a managed type. This allows for construction of multi-node entity graphs that include related managed types.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3450</id>
      <description>if the attribute is not an attribute of this managed type.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3451</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3452</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3453</id>
      <description>Add a node to the graph that corresponds to a managed type with inheritance. This allows for multiple subclass subgraphs to be defined for this node of the entity graph. Subclass subgraphs will automatically include the specified attributes of superclass subgraphs</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3454</id>
      <description>if the attribute is not an attribute of this managed type.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3455</id>
      <description>if the attribute's target type is not a managed type</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalArgumentException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3456</id>
      <description>if this EntityGraph has been statically defined</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="addSubgraph" return-type="javax.persistence.Subgraph">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.lang.Class</parameter>
        </parameters>
        <throw>java.lang.IllegalStateException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3457</id>
      <description>Return the attribute nodes corresponding to the attributes of this managed type that are included in the subgraph.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="getAttributeNodes" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3458</id>
      <description>Return the type for which this subgraph was defined.</description>
      <package>javax.persistence</package>
      <class-interface>Subgraph</class-interface>
      <method name="getClassType" return-type="java.lang.Class"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:3463</id>
      <description>Create database schemas and/or tables and/or create DDL scripts as determined by the supplied properties. Called by the Persistence class when schema generation is to occur as a separate phase from creation of the entity manager factory.</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProvider</class-interface>
      <method name="generateSchema" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="false">
      <id>PERSISTENCE:JAVADOC:3464</id>
      <description>if insufficient or inconsistent configuration information is provided or if schema generation otherwise fails</description>
      <package>javax.persistence.spi</package>
      <class-interface>PersistenceProvider</class-interface>
      <method name="generateSchema" return-type="boolean">
        <parameters>
          <parameter>java.lang.String</parameter>
          <parameter>java.util.Map</parameter>
        </parameters>
        <throw>PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3465</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint for the columns corresponding to the joinColumns element when table generation is in effect. If both this element and the foreignKey element of any of the joinColumns elements are specified, the behavior is undefined. If no foreign key annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>AssociationOverride</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3466</id>
      <description>Return the Map&lt;Class, Subgraph&gt; of subgraphs associated with this attribute node's map key.</description>
      <package>javax.persistence</package>
      <class-interface>AttributeNode</class-interface>
      <method name="getKeySubgraphs" return-type="java.util.Map"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3467</id>
      <description>Return the Map&lt;Class, Subgraph&gt; of subgraphs associated with this attribute node.</description>
      <package>javax.persistence</package>
      <class-interface>AttributeNode</class-interface>
      <method name="getSubgraphs" return-type="java.util.Map"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3468</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint for the columns corresponding to the joinColumns element when table generation is in effect. If both this element and the foreignKey element of any of the joinColumns elements are specified, the behavior is undefined. If no foreign key annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>CollectionTable</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3469</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>ConstraintMode</class-interface>
      <method name="valueOf" return-type="javax.persistence.ConstraintMode">
        <parameters>
          <parameter>java.lang.String</parameter>
        </parameters>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3470</id>
      <description/>
      <package>javax.persistence</package>
      <class-interface>ConstraintMode</class-interface>
      <method name="values" return-type="javax.persistence.ConstraintMode[]"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3471</id>
      <description>(Optional) Used to specify whether a foreign key constraint should be generated when schema generation is in effect. A value of CONSTRAINT will cause the persistence provider to generate a foreign key constraint. If the foreignKeyDefinition element is not specified, the provider will generate a constraint whose update and delete actions it determines most appropriate for the join column(s) to which the foreign key annotation is applied. A value of NO_CONSTRAINT will result in no constraint being generated. A value of PROVIDER_DEFAULT will result in the provider's default behavior (which may or may not result in the generation of a constraint for the given join column(s).</description>
      <package>javax.persistence</package>
      <class-interface>ForeignKey</class-interface>
      <method name="value" return-type="javax.persistence.ConstraintMode"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3472</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint for the columns corresponding to the joinColumns element when table generation is in effect. If both this element and the foreignKey element of any of the joinColumns elements are specified, the behavior is undefined. If no foreign key annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3473</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint for the columns corresponding to the inverseJoinColumns element when table generation is in effect. If both this element and the foreignKey element of any of the inverseJoinColumns elements are specified, the behavior is undefined. If no foreign key annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>JoinTable</class-interface>
      <method name="inverseForeignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3474</id>
      <description>(Optional) Used to specify or control the generation of a foreign key constraint for the columns corresponding to the pkJoinColumns element when table generation is in effect. If both this element and the foreignKey element of any of the pkJoinColumns elements are specified, the behavior is undefined. If no foreign key annotation element is specified in either location, the persistence provider's default foreign key strategy will apply.</description>
      <package>javax.persistence</package>
      <class-interface>SecondaryTable</class-interface>
      <method name="foreignKey" return-type="javax.persistence.ForeignKey"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3475</id>
      <description>Return the update count of -1 if there is no pending result or if the first result is not an update count. The provider will call execute on the query if needed.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="executeUpdate" return-type="int"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3476</id>
      <description>if there is no transaction or the persistence context has not been joined to the transaction</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.TransactionRequiredException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3477</id>
      <description>if the statement execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3478</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="executeUpdate" return-type="int">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3479</id>
      <description>Retrieve the list of results from the next result set. The provider will call execute on the query if needed. A REF_CURSOR result set, if any, will be retrieved in the order the REF_CURSOR parameter was registered with the query.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getResultList" return-type="java.util.List"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3480</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3481</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getResultList" return-type="java.util.List">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3482</id>
      <description>Retrieve a single result from the next result set. The provider will call execute on the query if needed. A REF_CURSOR result set, if any, will be retrieved in the order the REF_CURSOR parameter was registered with the query.</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object"/>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3483</id>
      <description>if there is no result in the next result set</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NoResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3484</id>
      <description>if more than one result</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.NonUniqueResultException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3485</id>
      <description>if the query execution exceeds the query timeout value set and only the statement is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.QueryTimeoutException</throw>
      </method>
    </assertion>
<assertion required="true" impl-spec="false" status="active" testable="true">
      <id>PERSISTENCE:JAVADOC:3486</id>
      <description>if the query execution exceeds the query timeout value set and the transaction is rolled back</description>
      <package>javax.persistence</package>
      <class-interface>StoredProcedureQuery</class-interface>
      <method name="getSingleResult" return-type="java.lang.Object">
        <throw>javax.persistence.PersistenceException</throw>
      </method>
    </assertion>
</assertions>
</javadoc>
